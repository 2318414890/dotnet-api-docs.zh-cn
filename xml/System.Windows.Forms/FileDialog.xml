<Type Name="FileDialog" FullName="System.Windows.Forms.FileDialog">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8cbb7afeb46b2d4091e9a19468358f3bdc2d860" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34317316" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class FileDialog : System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FileDialog extends System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.FileDialog" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FileDialog&#xA;Inherits CommonDialog" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileDialog abstract : System::Windows::Forms::CommonDialog" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.CommonDialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("FileOk")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("FileName")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>显示一个用户可从中选择文件的对话框窗口。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog> 是一个抽象类包含常见行为<xref:System.Windows.Forms.OpenFileDialog>和<xref:System.Windows.Forms.SaveFileDialog>类。 它不应直接使用，但包含这两个类的通用行为。 无法创建的实例<xref:System.Windows.Forms.FileDialog>。 尽管类声明为公共的但你不能从它继承，因为它包含内部抽象方法。 若要创建一个对话框，选择或保存的文件，使用<xref:System.Windows.Forms.OpenFileDialog>或<xref:System.Windows.Forms.SaveFileDialog>。  
  
 <xref:System.Windows.Forms.FileDialog> 是一个模式对话框;因此，在显示时，它将阻止应用程序的其余部分之前用户已选择一个文件。 有模式地显示一个对话框，不需要输入 （键盘或鼠标单击） 可以在对话框中的对象进行除外。 该程序必须隐藏或关闭 （通常以响应某些用户执行任何操作） 之前调用程序的输入对话框中可能发生。  
  
> [!CAUTION]
>  当你使用的类派生自<xref:System.Windows.Forms.FileDialog>，如<xref:System.Windows.Forms.OpenFileDialog>和<xref:System.Windows.Forms.SaveFileDialog>，避免使用包含绝对路径的字符串。 相反，动态获取路径中使用一个或多个下表中所述的技术。  
  
 如果你想要使用户能够选择而不是文件的文件夹，请使用<xref:System.Windows.Forms.FolderBrowserDialog>。  
  
 根据应用程序、 数据与应用程序关联的存储方式和访问文件系统的原因的类型，有许多可能的方法可以在其中创建目录路径。 下表显示用于动态创建的路径的技术。  
  
|路径或程序类别|类和成员，以使用|  
|------------------------------|------------------------------|  
|标准 Windows 路径，如 Program Files、 我的文档、 桌面和等等|<xref:System.Environment?displayProperty=nameWithType>类是完整地获取对于这些数据，不论是通过其静态方法，如<xref:System.Environment.SystemDirectory%2A>，或通过<xref:System.Environment.GetFolderPath%2A>方法，使用之一<xref:System.Environment.SpecialFolder>枚举值。|  
|与当前的应用程序相关的路径|<xref:System.Windows.Forms.Application>类具有静态成员，以获取某些路径，如<xref:System.Windows.Forms.Application.StartupPath%2A>， <xref:System.Windows.Forms.Application.ExecutablePath%2A>， <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>，和<xref:System.Windows.Forms.Application.CommonAppDataPath%2A>。<br /><br /> <xref:System.IO.Path.GetTempPath%2A>方法<xref:System.IO.Path?displayProperty=nameWithType>返回临时文件夹的路径。<br /><br /> <xref:System.IO.Directory.GetCurrentDirectory%2A>方法<xref:System.IO.Directory?displayProperty=nameWithType>类返回应用程序的当前正在执行目录。<br /><br /> <xref:System.IO.DriveInfo.RootDirectory%2A>属性<xref:System.IO.DriveInfo>类表示指定的驱动器的根目录。|  
|存储为应用程序设置的路径|访问对应的应用程序设置属性的包装类派生自<xref:System.Configuration.ApplicationSettingsBase>。 有关详细信息，请参阅[应用程序设置 Windows 窗体](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md)。|  
|注册表存储|某些应用程序存储在注册表中的目录信息。 <xref:System.Windows.Forms.Application>类具有<xref:System.Windows.Forms.Application.CommonAppDataPath%2A>和<xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>属性解析为<xref:Microsoft.Win32.RegistryKey>值。|  
|ClickOnce 应用程序|为 ClickOnce 应用程序使用<xref:System.Windows.Forms.Application>类成员，如<xref:System.Windows.Forms.Application.UserAppDataPath%2A>，这将返回一个指向 ClickOnce 数据目录。 有关详细信息，请参阅[访问本地数据和 ClickOnce 应用程序中的远程数据](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)。|  
|国际应用程序|对于国际应用程序，检索的相对路径部分从你的应用程序中的字符串资源使用<xref:System.Resources.ResourceReader?displayProperty=nameWithType>类。 有关全球化和本地化的详细信息，请参阅主题[全球化和本地化](~/docs/standard/globalization-localization/index.md)。|  
  
 请注意，可能需要使用一个或多个所介绍的技术来生成完整的路径。 例如，<xref:System.Environment.GetFolderPath%2A>方法可能用于获取的路径的我的文档文件夹中，则添加相对子目录部分可能用于应用程序设置。  
  
 <xref:System.IO.Path?displayProperty=nameWithType>类包含静态成员，以帮助操作绝对和相对路径字符串，而<xref:System.IO.File?displayProperty=nameWithType>和<xref:System.IO.Directory?displayProperty=nameWithType>类具有实际分别操作文件和目录的静态成员。  
  
> [!IMPORTANT]
>  如果你的应用程序的用户更改中的文件夹<xref:System.Windows.Forms.FileDialog>，则你的应用程序的当前工作目录设置中指定的位置为<xref:System.Windows.Forms.FileDialog>。 若要防止此情况，将设置<xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A>属性`true`。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Windows.Forms.OpenFileDialog>实现<xref:System.Windows.Forms.FileDialog>并说明了创建、 设置的属性，以及显示的对话框。 该示例使用<xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>方法以显示对话框中，并返回<xref:System.Windows.Forms.DialogResult>。 该示例需要的窗体具有<xref:System.Windows.Forms.Button>在其上放置和<xref:System.IO>命名空间添加到它。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.CommonDialog" />
    <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
    <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
    <altmember cref="T:System.Windows.Forms.FolderBrowserDialog" />
    <altmember cref="T:System.IO.Path" />
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.Directory" />
    <altmember cref="T:System.Environment" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:Microsoft.Win32.Registry" />
    <altmember cref="T:System.Resources.ResourceReader" />
  </Docs>
  <Members>
    <Member MemberName="AddExtension">
      <MemberSignature Language="C#" Value="public bool AddExtension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddExtension" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AddExtension" />
      <MemberSignature Language="VB.NET" Value="Public Property AddExtension As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AddExtension { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示如果用户省略扩展名，对话框是否自动在文件名中添加扩展名。</summary>
        <value>当用户省略了扩展名时，如果对话框在文件名中添加扩展名，值为 <see langword="true" />；反之，值为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 添加到文件名的扩展名取决于当前所选的文件筛选器和的值<xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>属性。  
  
 如果<xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>属性是`true`，对话框中添加第一个扩展插件从现有文件匹配的当前文件筛选器。 如果没有匹配的文件当前文件筛选器，则对话框将添加指定的扩展<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>属性。  
  
 如果<xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>属性是`false`，对话框中将当前文件筛选器中添加的第一个有效的文件扩展名。 如果当前文件筛选器包含没有有效的文件扩展名，对话框中添加指定的扩展<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>属性。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">有关添加扩展，如果用户省略它。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="AutoUpgradeEnabled">
      <MemberSignature Language="C#" Value="public bool AutoUpgradeEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoUpgradeEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoUpgradeEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoUpgradeEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示此 <see cref="T:System.Windows.Forms.FileDialog" /> 实例在 [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)] 上运行时是否应自动升级外观和行为。</summary>
        <value>
          <see langword="true" /> 如果此<see cref="T:System.Windows.Forms.FileDialog" />实例应自动升级外观和行为上运行时 [！INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)];否则为<see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此属性为`false`、<xref:System.Windows.Forms.FileDialog>类将具有[!INCLUDE[winxp](~/includes/winxp-md.md)]-上样式的外观和行为[!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]。  
  
 上[!INCLUDE[winxp](~/includes/winxp-md.md)]，此属性不起任何作用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckFileExists">
      <MemberSignature Language="C#" Value="public virtual bool CheckFileExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckFileExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CheckFileExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CheckFileExists { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示如果用户指定不存在的文件名，对话框是否显示警告。</summary>
        <value>当用户指定不存在的文件名时，如果对话框显示警告，值为 <see langword="true" />；反之，值为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认值是`true`; 对继承<xref:System.Windows.Forms.OpenFileDialog>和`false`; 对继承<xref:System.Windows.Forms.SaveFileDialog>。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">如果该文件已存在，则显示一条警告。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      </Docs>
    </Member>
    <Member MemberName="CheckPathExists">
      <MemberSignature Language="C#" Value="public bool CheckPathExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckPathExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckPathExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckPathExists { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示如果用户指定不存在的路径，对话框是否显示警告。</summary>
        <value>当用户指定不存在的路径时，如果对话框显示警告，值为 <see langword="true" />；反之，值为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">如果用户指定的路径已存在，则显示一条警告。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      </Docs>
    </Member>
    <Member MemberName="CustomPlaces">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomPlaces As FileDialogCustomPlacesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FileDialogCustomPlacesCollection ^ CustomPlaces { System::Windows::Forms::FileDialogCustomPlacesCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FileDialogCustomPlacesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此 <see cref="T:System.Windows.Forms.FileDialog" /> 实例的自定义空间的集合。</summary>
        <value>此 <see cref="T:System.Windows.Forms.FileDialog" /> 实例的自定义空间的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上[!INCLUDE[winxp](~/includes/winxp-md.md)]，此属性不起任何作用。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.FileDialog.CustomPlaces%2A>集合。 若要运行此示例，请将以下代码粘贴到 Windows 窗体和调用`InitializeDialogAndButton`从窗体的构造函数或<xref:System.Windows.Forms.Form.Load>事件处理方法。  
  
 [!code-csharp[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultExt">
      <MemberSignature Language="C#" Value="public string DefaultExt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultExt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultExt As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultExt { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置默认文件扩展名。</summary>
        <value>默认的文件扩展名。 返回的字符串不包含句点。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你的应用程序在用户指定不带扩展名的文件名称时<xref:System.Windows.Forms.FileDialog>向文件名追加一个扩展。 使用扩展由<xref:System.Windows.Forms.FileDialog.Filter%2A>和<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>属性。 如果选择中的筛选器<xref:System.Windows.Forms.FileDialog>和筛选器指定的扩展，然后使用该扩展名。 如果选定的筛选器使用通配符代替该扩展，则在指定的扩展名<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>使用属性。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType>与流的方法。 它还演示如何使用<xref:System.Windows.Forms.FileDialog.FileName%2A>， <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>， <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>，和<xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType>成员。  
  
 这是已准备好运行时将其复制到你的项目的完整示例。  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DereferenceLinks">
      <MemberSignature Language="C#" Value="public bool DereferenceLinks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DereferenceLinks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberSignature Language="VB.NET" Value="Public Property DereferenceLinks As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DereferenceLinks { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示对话框是否返回快捷方式引用的文件的位置，或者是否返回快捷方式 (.lnk) 的位置。</summary>
        <value>如果对话框返回快捷方式引用的文件位置，值为 <see langword="true" />；反之，值为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要设置的属性。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="EventFileOk">
      <MemberSignature Language="C#" Value="protected static readonly object EventFileOk;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly object EventFileOk" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly EventFileOk As Object " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly System::Object ^ EventFileOk;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>具有 <see cref="E:System.Windows.Forms.FileDialog.FileOk" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileName" />
      <MemberSignature Language="VB.NET" Value="Public Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个包含在文件对话框中选定的文件名的字符串。</summary>
        <value>对话框中选择的文件名。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文件名中包括的文件路径和扩展插件。 如果未不选择任何文件，此方法将返回空字符串 ("")。  
  
 在从使用时<xref:System.Windows.Forms.SaveFileDialog>类，此属性表示保存; 当中使用的文件<xref:System.Windows.Forms.OpenFileDialog>类，它表示所打开的文件。  
  
 此属性只能为一个所选文件的名称。 如果你想要返回包含在多选对话框中，使用的所有选定文件的名称的数组<xref:System.Windows.Forms.FileDialog.FileNames%2A>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType>与流的方法。 它还演示如何使用<xref:System.Windows.Forms.FileDialog.FileName%2A>， <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>， <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>，和<xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType>成员。  
  
 这是已准备好运行时将其复制到你的项目的完整示例。  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">要获取或设置的文件名称。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileNames" />
        <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
        <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
      </Docs>
    </Member>
    <Member MemberName="FileNames">
      <MemberSignature Language="C#" Value="public string[] FileNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] FileNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ FileNames { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对话框中所有选定文件的文件名。</summary>
        <value>包含对话框中所有选定文件的文件名的 <see cref="T:System.String" /> 类型数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个文件名中包括的文件路径和扩展插件。 如果未不选择任何文件，此方法将返回空数组。  
  
   
  
## Examples  
 下面的代码示例允许用户选择多个映像，并将其显示在<xref:System.Windows.Forms.PictureBox>窗体上的控件。 它演示如何初始化<xref:System.Windows.Forms.OpenFileDialog>，则设置<xref:System.Windows.Forms.FileDialog.Title%2A>和<xref:System.Windows.Forms.FileDialog.Filter%2A>属性，并允许用户选择多个文件，通过设置<xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A>属性为 true。 此代码示例假定你的窗体已有<xref:System.Windows.Forms.OpenFileDialog>控件名为`openFileDialog1`、<xref:System.Windows.Forms.Button>名为`SelectFileButton`，和一个<xref:System.Windows.Forms.FlowLayoutPanel>名为`flowLayoutPanel1`。  
  
 [!code-csharp[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要获取的文件名称。 关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileName" />
      </Docs>
    </Member>
    <Member MemberName="FileOk">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler FileOk;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler FileOk" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.FileDialog.FileOk" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FileOk As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ FileOk;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户单击文件对话框中的“打开”或“保存”按钮时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.FileDialog.FileNames%2A>属性，如何处理<xref:System.Windows.Forms.FileDialog.FileOk>事件以及如何使用<xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType>方法。 该示例运行时，用户可选择从图形文件<xref:System.Windows.Forms.OpenFileDialog>对象。 所选的文件将显示在窗体中。 <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType>方法会强行重绘的每个图形文件在打开的窗体。 若要运行此示例，请粘贴下面的代码中一个窗体包含<xref:System.Windows.Forms.PictureBox>名为`PictureBox1`、<xref:System.Windows.Forms.OpenFileDialog>名为`OpenFileDialog1`，和一个<xref:System.Windows.Forms.Button>名为`fileButton`。 调用`InitializePictureBox`和`InitializeOpenFileDialog`从窗体的构造函数的方法或`Load`方法。 当运行示例时，显示对话框中单击的按钮。  
  
 [!code-cpp[System.Windows.Forms.FileDialog#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#1)]
 [!code-csharp[System.Windows.Forms.FileDialog#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialog#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前文件名筛选器字符串，该字符串决定对话框的“另存为文件类型”或“文件类型”框中出现的选择内容。</summary>
        <value>对话框中可用的文件筛选选项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于每个筛选选项，筛选器字符串都包含筛选器，跟垂直条说明 (&#124;) 和筛选器模式。 由竖线分隔的字符串不同筛选选项。  
  
 下面是筛选器字符串的示例：  
  
 `Text files (*.txt)|*.txt|All files (*.*)|*.*`  
  
 你可以将多个筛选器模式添加到筛选器，例如用分号分隔的文件类型：  
  
 `Image Files(*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files (*.*)|*.*`  
  
 使用<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>属性以设置的筛选选项向用户显示第一个。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Windows.Forms.OpenFileDialog>实现<xref:System.Windows.Forms.FileDialog>并说明了创建、 设置的属性，以及显示的对话框。 该示例使用<xref:System.Windows.Forms.FileDialog.Filter%2A>和<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>属性，可为用户提供筛选器的列表。 该示例需要的窗体具有<xref:System.Windows.Forms.Button>在其上放置和<xref:System.IO>命名空间添加到它。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Filter" /> 格式无效。</exception>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="FilterIndex">
      <MemberSignature Language="C#" Value="public int FilterIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FilterIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FilterIndex { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置文件对话框中当前选定筛选器的索引。</summary>
        <value>包含文件对话框中当前选定筛选器的索引的值。 默认值为 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>属性以设置的筛选选项向用户显示第一个。 你还可以使用的值<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>后显示文件对话框以执行特殊文件操作取决于选择的筛选器。  
  
> [!NOTE]
>  第一个筛选器项的索引值为 1。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Windows.Forms.OpenFileDialog>实现<xref:System.Windows.Forms.FileDialog>并说明了创建、 设置的属性，以及显示的对话框。 该示例使用<xref:System.Windows.Forms.FileDialog.Filter%2A>和<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>属性，可为用户提供筛选器的列表。 该示例需要的窗体具有<xref:System.Windows.Forms.Button>在其上放置和<xref:System.IO>命名空间添加到它。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="HookProc">
      <MemberSignature Language="C#" Value="protected override IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int HookProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HookProc (hWnd As IntPtr, msg As Integer, wparam As IntPtr, lparam As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">对话框窗口的句柄。</param>
        <param name="msg">对话框接收的消息。</param>
        <param name="wparam">关于消息的附加信息。</param>
        <param name="lparam">关于消息的附加信息。</param>
        <summary>定义要重写的通用对话框挂钩过程，以便向文件对话框添加特定功能。</summary>
        <returns>如果默认对话框过程处理此消息，则返回零；如果默认对话框过程忽略此消息，则返回非零值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 挂钩过程允许用户连接或插入其他例程的例程或应用程序，以便调试或增强功能。  
  
 默认情况下，挂钩过程中心 WM_INITDIALOG 消息响应中的屏幕上的对话框。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="InitialDirectory">
      <MemberSignature Language="C#" Value="public string InitialDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InitialDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InitialDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置文件对话框显示的初始目录。</summary>
        <value>文件对话框中显示的初始目录。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A>属性通常使用以下源之一设置：  
  
-   在程序中，从最后一个目录或文件操作可能保留以前使用的路径。  
  
-   从持久性的源，如应用程序设置，读取的路径<xref:Microsoft.Win32.Registry>或应用程序中的字符串资源。  
  
-   标准 Windows 系统和用户的路径，例如 Program Files、 我的文档、 我，等 (其中你可以获取使用<xref:System.Environment.GetFolderPath%2A>方法)  
  
-   当前应用程序，如其启动目录相关的路径 (你可以获取使用属性上<xref:System.Windows.Forms.Application>对象)。  
  
 有关创建动态路径的详细信息，请参阅<xref:System.Windows.Forms.FileDialog>类概述。  
  
 上[!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]，如果<xref:System.Windows.Forms.FileDialog.InitialDirectory%2A>设置为而不仅是目录路径不是一个完整的文件名称，，到应用程序的路径，或从其用户最近一次选择一个文件的目录将默认的初始目录。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Windows.Forms.OpenFileDialog>实现<xref:System.Windows.Forms.FileDialog>并说明了创建、 设置的属性，以及显示的对话框。 该示例使用<xref:System.Windows.Forms.FileDialog.InitialDirectory%2A>属性来设置时向用户显示该对话框是什么的初始目录。 该示例需要的窗体具有<xref:System.Windows.Forms.Button>在其上放置和<xref:System.IO>命名空间添加到它。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">需要设置的初始目录。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
        <altmember cref="T:Microsoft.Win32.Registry" />
        <altmember cref="T:System.Windows.Forms.Application" />
        <altmember cref="T:System.Environment" />
        <altmember cref="T:System.IO.Path" />
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="protected virtual IntPtr Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Instance" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Instance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Instance As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr Instance { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取应用程序的 Win32 实例句柄。</summary>
        <value>应用程序的 Win32 实例句柄。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFileOk">
      <MemberSignature Language="C#" Value="protected void OnFileOk (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnFileOk(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnFileOk (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnFileOk(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.FileDialog.FileOk" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.FileDialog.FileOk" />
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="protected int Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Options" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Options" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Options As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int Options { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用来初始化 <see cref="T:System.Windows.Forms.FileDialog" /> 的值。</summary>
        <value>内部值的按位组合，用于初始化 <see cref="T:System.Windows.Forms.FileDialog" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog.Options%2A>属性对应于用于初始化使用 Win32 文件对话框中的标志。 使用的属性<xref:System.Windows.Forms.FileDialog>类获取和设置选项。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将所有属性重新设置为其默认值。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.FileDialog.Reset" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.CommonDialog.Reset" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RestoreDirectory">
      <MemberSignature Language="C#" Value="public bool RestoreDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RestoreDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property RestoreDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RestoreDirectory { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示该对话框在关闭前是否将目录还原为之前选定的目录。</summary>
        <value>
          <see langword="true" /> 如果对话框中当前将目录还原为之前选定的目录如果用户在搜索文件; 的过程中更改了目录否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:System.Windows.Forms.OpenFileDialog>实现<xref:System.Windows.Forms.FileDialog>并说明了创建、 设置的属性，以及显示的对话框。 该示例使用<xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A>属性以确保当对话框关闭时，还原之前选定的目录。 该示例需要的窗体具有<xref:System.Windows.Forms.Button>在其上放置和<xref:System.IO>命名空间添加到它。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要设置的属性。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      </Docs>
    </Member>
    <Member MemberName="RunDialog">
      <MemberSignature Language="C#" Value="protected override bool RunDialog (IntPtr hWndOwner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool RunDialog(native int hWndOwner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RunDialog (hWndOwner As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool RunDialog(IntPtr hWndOwner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWndOwner" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWndOwner">一个值，表示通用对话框所有者窗口的窗口句柄。</param>
        <summary>指定通用对话框。</summary>
        <returns>如果可以打开文件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法提供的实现<xref:System.Windows.Forms.CommonDialog.RunDialog%2A>，当文件对话框的用户时，将调用时会调用<xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>。  
  
 在派生类中<xref:System.Windows.Forms.OpenFileDialog>和<xref:System.Windows.Forms.SaveFileDialog>无效文件名<xref:System.Exception>可以引发。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowHelp">
      <MemberSignature Language="C#" Value="public bool ShowHelp { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHelp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowHelp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowHelp { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示文件对话框中是否显示“帮助”按钮。</summary>
        <value>如果对话框包含帮助按钮，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.Control.HelpRequested>用户单击时引发事件**帮助**按钮。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportMultiDottedExtensions">
      <MemberSignature Language="C#" Value="public bool SupportMultiDottedExtensions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportMultiDottedExtensions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportMultiDottedExtensions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportMultiDottedExtensions { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置对话框是否支持显示和保存具有多个文件扩展名的文件。</summary>
        <value>如果对话框支持多个文件扩展名，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有时用户必须打开和保存使用多个文件扩展名的文件。 例如，应用程序清单使用的文件[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]复杂的文件名称扩展中的部署技术结束日期"。 exe.manifest"。 此属性设置为`true`使你能够设置<xref:System.Windows.Forms.FileDialog.Filter%2A>多点扩展的属性。  
  
 如果<xref:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions%2A>是`false`，并将分配的多点扩展<xref:System.Windows.Forms.FileDialog.Filter%2A>，如派生控件<xref:System.Windows.Forms.SaveFileDialog>将只使用在字符串中的最后一个扩展。 例如，".manifest"将使用而不是"。 exe.manifest"。  
  
   
  
## Examples  
 下面的代码示例将文件扩展名保存"。 data.txt"。 此代码示例要求你的应用程序主机<xref:System.Windows.Forms.SaveFileDialog>名为`saveFileDialog1`和<xref:System.Windows.Forms.Button>名为`button1`。  
  
 [!code-csharp[SupportMultiDottedExtensions#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SupportMultiDottedExtensions/CS/Form1.cs#1)]
 [!code-vb[SupportMultiDottedExtensions#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SupportMultiDottedExtensions/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置文件对话框标题。</summary>
        <value>文件对话框标题。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 该字符串放置在对话框中的标题栏中。 如果标题是空字符串，系统将使用默认标题，即"另存为"打开"。  
  
   
  
## Examples  
 下面的代码示例演示如何初始化<xref:System.Windows.Forms.OpenFileDialog>，则设置<xref:System.Windows.Forms.FileDialog.Title%2A>和<xref:System.Windows.Forms.FileDialog.Filter%2A>属性，并允许用户选择多个文件，通过设置<xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A?displayProperty=nameWithType>属性为 true。 若要运行此示例中，粘贴以下代码中一个窗体包含<xref:System.Windows.Forms.OpenFileDialog>名为`OpenFileDialog1`和<xref:System.Windows.Forms.Button>名为`fileButton`。 调用`InitializeOpenFileDialog`窗体的构造函数中的方法或`Load`方法。 该示例还要求`Click`事件`Button`控件连接到示例中定义的事件处理程序。  
  
 [!code-cpp[System.Windows.Forms.FileDialog#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#6)]
 [!code-csharp[System.Windows.Forms.FileDialog#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#6)]
 [!code-vb[System.Windows.Forms.FileDialog#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要设置文件对话框标题。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>提供此对象的字符串版本。</summary>
        <returns>此对象的字符串版本。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateNames">
      <MemberSignature Language="C#" Value="public bool ValidateNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateNames As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateNames { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示对话框是否只接受有效的 Win32 文件名。</summary>
        <value>如果对话框只接受有效 Win32 文件名，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果编辑控件包含任何内容，但空间当用户单击**确定**，对话框中返回的文件名，是否这是否是有效。 没有默认扩展插件将添加到文本。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要设置的属性。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
  </Members>
</Type>