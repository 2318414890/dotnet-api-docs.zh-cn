<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd78769c002ec6164dd33b8ddba8cc01deb5a7b9" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48704549" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为传送数据提供与格式无关的机制。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IDataObject`接口由<xref:System.Windows.Forms.Clipboard>类和拖放操作中。  
  
 类中实现时<xref:System.Windows.Forms.IDataObject>方法允许用户以多种格式的类的实例中存储数据。 将数据存储在多个格式增加目标应用程序，您可能不知道，它的格式要求，可以检索存储的数据的可能性。 若要将数据存储中的实例<xref:System.Windows.Forms.IDataObject>，调用<xref:System.Windows.Forms.IDataObject.SetData%2A>方法并指定数据格式以`format`参数。 设置`autoConvert`参数`false`如果您不希望存储的数据会在检索时转换为另一种格式。 调用<xref:System.Windows.Forms.IDataObject.SetData%2A>上的一个实例多次<xref:System.Windows.Forms.IDataObject>以多种格式存储数据。  
  
 检索存储的数据从<xref:System.Windows.Forms.IDataObject>通过调用<xref:System.Windows.Forms.IDataObject.GetData%2A>方法并指定数据格式中`format`参数。 设置`autoConvert`参数`false`以检索存储在指定的格式的数据。 若要将存储的数据转换为指定的格式，将设置`autoConvert`到`true`，或不使用`autoConvert`。  
  
 若要确定中存储的数据的格式<xref:System.Windows.Forms.IDataObject>，使用以下<xref:System.Windows.Forms.IDataObject>方法。  
  
-   调用<xref:System.Windows.Forms.IDataObject.GetFormats%2A>方法来检索的数组中的所有格式的有可用的数据。 设置`autoConvert`参数`false`获取仅在其中存储数据的格式。 若要获取数据存在的所有格式，请设置`autoConvert`到`true`，或不使用此参数。  
  
-   调用<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>方法，以确定是否可在特定的格式存储的数据。 如果不希望存储的数据转换为指定的格式，则设置`autoConvert`参数`false`。  
  
 请参阅<xref:System.Windows.Forms.DataObject>此接口的实现的类。 请参阅<xref:System.Windows.Forms.DataFormats>预定义的类<xref:System.Windows.Forms.Clipboard>数据格式。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>检索与指定的数据格式关联的数据。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">要检索的数据的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <summary>检索与指定的数据格式关联的数据。</summary>
        <returns>与指定格式关联的数据，或为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此方法不能在指定的格式中查找数据，它将尝试将数据转换为格式。 如果数据无法转换为指定的格式，此方法返回`null`。  
  
 若要确定数据是否相关联，或可以转换为一种格式，请调用<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>之前调用<xref:System.Windows.Forms.IDataObject.GetData%2A>。 调用<xref:System.Windows.Forms.IDataObject.GetFormats%2A>有关的此实例中存储的数据的有效格式的列表。  
  
> [!NOTE]
>  如果存储时已指定，允许进行转换，并且请求的格式与存储格式兼容，数据可以转换为其他格式。 例如，存储为 Unicode 可以转换为文本的数据。  
  
 此方法的实现，请参阅<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>类，该类实现`IDataObject,`若要演示了如何使用`GetData`方法。 该方法用于检索中存储的数据`myDataObject`，这与`Text`格式。 该示例假定已创建<xref:System.Windows.Forms.Form>名为`Form1`和一个<xref:System.Windows.Forms.TextBox>名为`textBox1`。  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">
          <see cref="T:System.Type" /> 表示要检索的数据的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <summary>检索与指定的类类型格式关联的数据。</summary>
        <returns>与指定格式关联的数据，或为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此方法不能在指定的格式中查找数据，它将尝试将数据转换为格式。 如果数据无法转换为指定的格式，此方法返回`null`。  
  
 若要确定数据是否相关联，或可以转换为一种格式，请调用<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>之前调用<xref:System.Windows.Forms.IDataObject.GetData%2A>。 调用<xref:System.Windows.Forms.IDataObject.GetFormats%2A>有关的此实例中存储的数据的有效格式的列表。  
  
> [!NOTE]
>  如果存储时已指定，允许进行转换，并且请求的格式与存储格式兼容，数据可以转换为其他格式。 例如，存储为 Unicode 可以转换为文本的数据。  
  
 此方法的实现，请参阅<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>类，该类实现`IDataObject`，以演示了如何使用`GetData`方法。 该方法用于检索中存储的数据`myObject`，这是与特定类型关联`myType`。 在消息框中显示的检索到的数据类型。 该示例假定已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">要检索的数据的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <param name="autoConvert">将数据转换成指定格式，值为 <see langword="true" />；反之，值为 <see langword="false" />。</param>
        <summary>检索与指定数据格式相关联的数据，并使用一个布尔值确定是否将数据转换成该格式。</summary>
        <returns>与指定格式关联的数据，或为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`autoConvert`参数是`true`和此方法找不到指定的格式的数据，它会尝试将数据转换为格式。 如果数据无法转换为指定的格式，或存储数据时`autoConvert`参数设置为`false`，此方法返回`null`。  
  
 如果`autoConvert`参数是`false`，此方法返回数据中指定的格式，或`null`如果找不到此格式中的没有数据。  
  
 若要确定数据是否相关联，或可以转换为一种格式，请调用<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>之前调用<xref:System.Windows.Forms.IDataObject.GetData%2A>。 调用<xref:System.Windows.Forms.IDataObject.GetFormats%2A>有关的此实例中存储的数据的有效格式的列表。  
  
> [!NOTE]
>  如果存储时已指定，允许进行转换，并且请求的格式与存储格式兼容，数据可以转换为其他格式。 例如，存储为 Unicode 可以转换为文本的数据。  
  
 此方法的实现，请参阅<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>类，该类实现`IDataObject`，以演示了如何使用`GetData`方法。 该示例检索中存储的数据`DataObject`，并使用`autoConvert`参数来指定是否要转换的数据格式。 首先，`myDataObject`使用文本数据创建。 然后此示例尝试两次检索的数据。 它可以在首次尝试中，来指定作为一个字符串，并设置其格式`autoConvert`参数`false`。 此试用版失败，并且结果显示在消息框标记为"消息 #1。" 在第二个试用版，该示例检索与相同的数据`autoConvert`参数设置为`true`。 此试用版成功，并且结果显示在消息框标记为"Message #2。 该示例假定你已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定此实例中存储的数据是否与指定的格式关联。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">要检查的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <summary>确定此实例中存储的数据是否与指定的格式关联，或是否可以转换成指定的格式。</summary>
        <returns>如果此实例中存储的数据与指定的格式关联，或者可以转换成指定的格式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法来确定此中是否存在一种格式<xref:System.Windows.Forms.DataObject>之前调用<xref:System.Windows.Forms.IDataObject.GetData%2A>。 调用<xref:System.Windows.Forms.IDataObject.GetFormats%2A>此实例中可用的格式。  
  
> [!NOTE]
>  如果存储时已指定，允许进行转换，并且请求的格式与存储格式兼容，数据可以转换为其他格式。 例如，存储为 Unicode 可以转换为文本的数据。  
  
 此方法的实现，请参阅<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>类，该类实现`IDataObject`，以演示了如何使用`GetDataPresent`方法。 首先，它创建使用字符串的数据对象和`Text`格式。 然后它将验证数据是否处在`Text`设置格式，并在消息框中显示结果。 该示例假定你已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">
          <see cref="T:System.Type" /> 表示要检查的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <summary>确定此实例中存储的数据是否与指定的格式关联，或是否可以转换成指定的格式。</summary>
        <returns>如果此实例中存储的数据与指定的格式关联，或者可以转换成指定的格式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法来确定此中是否存在一种格式<xref:System.Windows.Forms.DataObject>之前调用<xref:System.Windows.Forms.IDataObject.GetData%2A>。 调用<xref:System.Windows.Forms.IDataObject.GetFormats%2A>此实例中可用的格式。  
  
> [!NOTE]
>  如果存储时已指定，允许进行转换，并且请求的格式与存储格式兼容，数据可以转换为其他格式。 例如，存储为 Unicode 可以转换为文本的数据。  
  
 此方法的实现，请参阅<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>类，该类实现`IDataObject`，以演示了如何使用`GetDataPresent`方法。 首先，创建一个组件 (`myComponent`) 并将其存储在数据对象中 (`myDataObject`)。 然后它会检查是否将指定的数据存储在`myDataObject`。 如果测试的计算结果`true`，它在消息框中显示结果，并在文本框中显示的数据类型。 此示例假定已创建<xref:System.Windows.Forms.Form>名为`Form1`和一个<xref:System.Windows.Forms.TextBox>名为`textBox1`。  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">要检查的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <param name="autoConvert">值为 <see langword="true" /> 时，确定此实例中存储的数据是否可以转换成指定的格式；值为 <see langword="false" /> 时，检查数据的格式是否为指定的格式。</param>
        <summary>确定该实例中存储的数据是否与指定格式关联，同时使用一个布尔值确定是否将数据转换成此格式。</summary>
        <returns>如果数据采用指定的格式，或者可以转换成指定的格式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法来确定此中是否存在一种格式<xref:System.Windows.Forms.DataObject>之前调用<xref:System.Windows.Forms.IDataObject.GetData%2A>。 调用<xref:System.Windows.Forms.IDataObject.GetFormats%2A>此实例中可用的格式。  
  
 此方法返回`true`时：  
  
-   `autoConvert`参数是`true`和数据的格式可以转换为适当的格式。  
  
-   `autoConvert`参数是`false`和数据的适当格式。  
  
 此方法返回`false`时：  
  
-   `autoConvert`参数是`true`和此方法找不到数据中指定的格式，并且它不能将数据转换为指定的格式，或存储数据时`autoConvert`设置为`false`。  
  
-   `autoConvert`参数是`false`，并且数据不存在指定的格式中的此实例中。  
  
> [!NOTE]
>  如果存储时已指定，允许进行转换，并且请求的格式与存储格式兼容，数据可以转换为其他格式。 例如，存储为 Unicode 可以转换为文本的数据。  
  
 此方法的实现，请参阅<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>类，该类实现`IDataObject`，以演示了如何使用`GetDataPresent`方法。 首先，它创建的数据对象 (`myDataObject`) 使用字符串和`Text`格式。 然后它将查询与相关联的数据对象`Text`格式，与`autoConvert`参数设置为`false`。 此试用版失败，并且结果显示在消息框标记为"消息 #1。" 在第二个试用版，它会设置`autoConvert`参数`true`。 此试用版成功，并且结果显示在消息框标记为"Message #2。 该示例假定你已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回存储在此实例中的数据所关联的或可以转换为的所有格式的列表。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回存储在此实例中的数据所关联的或可以转换为的所有格式的列表。</summary>
        <returns>一组名称，表示此对象中存储的数据所支持的所有格式列表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法以获取支持的数据格式，然后才能调用<xref:System.Windows.Forms.IDataObject.GetData%2A>方法。 请参阅<xref:System.Windows.Forms.DataFormats>的预定义格式的类。  
  
> [!NOTE]
>  如果存储时已指定，允许进行转换，并且请求的格式与存储格式兼容，数据可以转换为其他格式。 例如，存储为 Unicode 可以转换为文本的数据。  
  
 此方法的实现，请参阅<xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>类，该类实现`IDataObject`，以演示了如何使用`GetFormats`方法。 首先，它创建的数据对象 (`myDataObject`) 使用字符串和`Text`格式。 然后它检索所有的数据格式和数据对象中的数据转换格式，并在消息框中显示生成的列表。 此示例假定你已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert">值为 <see langword="true" /> 时，检索存储在此实例中的数据所关联的或可以转换成的所有格式；值为 <see langword="false" /> 时，仅检索本机数据格式。</param>
        <summary>获取该实例中存储的数据所关联或可转换到的所有格式的列表，同时使用一个布尔值确定是检索数据可转换到的所有格式，还是只检索本机数据格式。</summary>
        <returns>一组名称，表示此对象中存储的数据所支持的所有格式列表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法以获取支持的数据格式，然后才能调用<xref:System.Windows.Forms.IDataObject.GetData%2A>方法。 请参阅<xref:System.Windows.Forms.DataFormats>的预定义格式的类。  
  
> [!NOTE]
>  如果存储时已指定，允许进行转换，并且请求的格式与存储格式兼容，数据可以转换为其他格式。 例如，存储为 Unicode 可以转换为文本的数据。  
  
 此方法的实现，请参阅<xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>类，该类实现`IDataObject`，以演示了如何使用`GetFormats`方法。 首先，它创建的数据对象 (`myDataObject`) 使用字符串和`UnicodeText`格式。 然后，它使两个查询来获取与数据关联的格式。 在第一个查询中，它会设置`autoConvert`参数`false`： 在这种情况下，返回仅的本机格式数据。 在第二个查询中，它会设置`autoConvert`参数`true`，以便它所获取的格式，包括数据可以转换为的格式列表。 在每种情况下，所得到的列表显示在消息框中。 此示例假定你已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>存储此实例中的指定数据及其关联格式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">要存储的数据。</param>
        <summary>使用此格式的数据类存储此实例中的指定数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 格式被派生自数据类。  
  
 会在检索时，存储使用此方法的数据可以转换为兼容格式。  
  
 此方法的实现，请参阅<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>类，该类实现`IDataObject`，以演示了如何使用`SetData`方法。 首先，创建一个组件 (`myComponent`) 并将其存储在数据对象中 (`myDataObject`)。 然后它会检查是否指定的数据存储在数据对象，并在消息框中显示结果。 该示例假定你已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">与数据关联的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <param name="data">要存储的数据。</param>
        <summary>存储此实例中的指定数据及其关联格式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不知道目标应用程序的格式，您可以使用此方法的多种格式存储数据。  
  
 会在检索时，存储使用此方法的数据可以转换为兼容格式。  
  
 此方法的实现，请参阅<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>类，该类实现`IDataObject`，以演示了如何使用`SetData`方法。 首先，它创建的数据对象 (`myDataObject`)，并将字符串存储在对象指定`UnicodeText`格式。 然后它将检索该数据存储在对象指定`Text`格式，以便将数据转换为`Text`格式。 在消息框中显示结果。 此示例假定你已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">表示与数据关联的格式的 <see cref="T:System.Type" />。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <param name="data">要存储的数据。</param>
        <summary>存储此实例中的指定数据及其关联类类型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不知道目标应用程序的格式，您可以使用此方法的多种格式存储数据。  
  
 会在检索时，存储使用此方法的数据可以转换为兼容格式。  
  
 此方法的实现，请参阅<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>类，该类实现`IDataObject`，以演示了如何使用`SetData`方法。 首先，创建一个组件 (`myComponent`) 并将其存储在数据对象中 (`myDataObject`)，并使用`myType`指定数据格式。 然后它会检查是否指定类型的数据存储在对象，并在消息框中显示结果。 该示例假定你已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">与数据关联的格式。 请参见 <see cref="T:System.Windows.Forms.DataFormats" /> 以获取预定义的格式。</param>
        <param name="autoConvert">如果允许将数据转换成另一格式，值为 <see langword="true" />；否则，值为 <see langword="false" />。</param>
        <param name="data">要存储的数据。</param>
        <summary>在该实例中存储指定的数据及其关联格式，同时使用一个布尔值指定数据能否转换成另一格式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不知道目标应用程序的格式，您可以使用此方法的多种格式存储数据。  
  
 此方法的实现，请参阅<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 此示例使用<xref:System.Windows.Forms.DataObject>类，该类实现`IDataObject`，以演示了如何使用`SetData`方法。 首先，它创建的数据对象 (`myDataObject`)，并将存储`UnicodeText`字符串中，使用`autoConvert`参数设置为`false`。 然后，它检索的对象中存储的数据与相关联的格式，并在消息框中显示结果。 与数据关联的唯一格式是`UnicodeText`格式。 此示例假定你已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>