<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f798670405d97d29d6e135b97f2adb39d702dfd5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30649751" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供将键击发送到应用程序的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.SendKeys>发送键击和击键组合到活动的应用程序。 此类无法实例化。 将击键发送到的类，并立即继续执行程序的流，请使用<xref:System.Windows.Forms.SendKeys.Send%2A>。 若要等待启动的键击任何进程，请使用<xref:System.Windows.Forms.SendKeys.SendWait%2A>。  
  
 每个键是由一个或多个字符表示。 若要指定单个键盘字符，使用该字符本身。 例如，若要表示字母 A，请将"A"的字符串传递给方法。 若要表示多个字符，附加到它之前每增加一个字符。 若要表示字母 A、 B 和 C，请将参数指定为"ABC"。  
  
 加号 （+）、 脱字号 (^)、 百分号 （%）、 波形符 （~） 和括号 （） 具有特殊含义到<xref:System.Windows.Forms.SendKeys>。 若要指定这些字符之一，请将其括在大括号 （{}） 内。 例如，若要指定加号，使用"{+}"。 若要指定大括号字符、 使用"{{}"和"{}}"。 方括号 ([]) 具有到没有特殊含义<xref:System.Windows.Forms.SendKeys>，但你必须将它们括在大括号中。 在其他应用程序，方括号有可能会很明显，动态数据交换 (DDE) 发生时具有特殊含义。  
  
> [!CAUTION]
>  如果你的应用程序旨在用于全球各种键盘，使用 <xref:System.Windows.Forms.SendKeys.Send%2A> 可能会产生不可预知的结果，应当避免。  
  
 若要指定在按下一个键，如 ENTER 或选项卡上，以及密钥表示操作，而不是字符，不显示的字符使用下表中的代码。  
  
|键|代码|  
|---------|----------|  
|退格符|{退格符}，{BS} 或 {BKSP}|  
|中断|{BREAK}|  
|大写锁定|{CAPSLOCK}|  
|DEL 或删除|{删除} 或 {DEL}|  
|向下键|{DOWN}|  
|End|{END}|  
|Enter|{输入} 或 ~|  
|Esc|{ESC}|  
|帮助|{HELP}|  
|Home|{HOME}|  
|单元或插入|{插入} 或 {单元}|  
|向左键|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|打印屏幕|{PRTSC}（保留供将来使用）|  
|向右键|{RIGHT}|  
|SCROLL LOCK|{SCROLLLOCK}|  
|Tab|{TAB}|  
|向上键|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|键盘添加|{ADD}|  
|数字键盘减号|{SUBTRACT}|  
|数字键盘乘号|{乘}|  
|数字键盘除号|{DIVIDE}|  
  
 若要指定结合 SHIFT、 CTRL 和 ALT 键的任意组合的密钥，在前面使用一个或多个以下的代码的键代码。  
  
|键|代码|  
|---------|----------|  
|SHIFT|+|  
|CTRL|^|  
|ALT|%|  
  
 若要指定 SHIFT、 CTRL 和 ALT 的任意组合当按下了几个其他键按住，将这些密钥的代码在括号中。 例如，若要指定以按住 SHIFT 并按下 E 和 C，使用"+ (EC)"。 若要指定以按住 SHIFT 并按 E 下跟 C 而无需 shift 键，使用"+ EC"。  
  
 若要指定重复键，使用窗体 {密钥号}。 你必须放置键和数字之间留一个空格。 例如，{左 42} 表示 42 时间; 同时按左箭头键{h 10} 意味着的按 H 10 倍。  
  
> [!NOTE]
>  由于没有激活其他应用程序的托管的方法，你可以使用当前应用程序中的此类，或者使用本机 Windows 方法，如`FindWindow`和`SetForegroundWindow`、 将焦点强制上其他应用程序。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> 类已更新为 .NET Framework 3.0，从而可用于在 Windows Vista 上运行的应用程序。 Windows Vista 增强的安全性（称为用户帐户控件或 UAC）可避免以前的实现按预期运行。  
>   
>  <xref:System.Windows.Forms.SendKeys> 类容易遭受某些开发人员不得不解决的计时问题。 更新后的实现仍然容易遇到计时问题，但速度稍微快一些，并且可能需要更改解决方法。 <xref:System.Windows.Forms.SendKeys> 类先尝试使用以前的实现，失败后再使用新的实现。 因此， <xref:System.Windows.Forms.SendKeys> 类在不同操作系统上的运行方式可能不同。 此外，当 <xref:System.Windows.Forms.SendKeys> 类使用新的实现时， <xref:System.Windows.Forms.SendKeys.SendWait%2A> 方法不会等到消息被处理后才将其发送至其他进程。  
>   
>  如果如论使用何种操作系统，你的应用程序均依赖于一致的行为，则可通过将以下应用程序设置添加至 app.config 文件强制执行 <xref:System.Windows.Forms.SendKeys> 类以使用新的实现。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  若要强制执行 <xref:System.Windows.Forms.SendKeys> 类以使用以前的实现，请改用 `"JournalHook"` 值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.SendKeys.Send%2A> 方法。 若要运行该示例，将粘贴下面的代码在一个称为 form1 窗体包含一个按钮调用 Button1。 请确保单击事件与此示例中其事件处理方法关联。 按钮控件的<xref:System.Windows.Forms.Control.TabIndex%2A>属性应设置为 0。 当运行示例时，双击窗体触发该按钮的 click 事件。  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>处理消息队列中当前的所有 Windows 消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.SendKeys.Flush%2A>要等待的时间要处理的键击和其他操作系统的消息的消息队列的应用程序。 这是等效于调用<xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType>直到没有任何要处理的多个密钥。  
  
> [!NOTE]
>  由于没有激活其他应用程序的托管的方法，你可以使用当前应用程序中的此类，或者使用本机 Windows 方法，如`FindWindow`和`SetForegroundWindow`、 将焦点强制上其他应用程序。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">要发送的击键字符串。</param>
        <summary>向活动应用程序发送击键。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个键是由一个或多个字符表示。 若要指定单个键盘字符，使用该字符本身。 例如，若要表示字母 A，请将"A"的字符串传递给方法。 若要表示多个字符，附加到它之前每增加一个字符。 若要表示字母 A、 B 和 C，请将参数指定为"ABC"。  
  
 加号 （+）、 脱字号 (^)、 百分号 （%）、 波形符 （~） 和括号 （） 具有特殊含义到<xref:System.Windows.Forms.SendKeys>。 若要指定这些字符之一，请将其括在大括号 （{}） 内。 例如，若要指定加号，使用"{+}"。 若要指定大括号字符、 使用"{{}"和"{}}"。 方括号 ([]) 具有到没有特殊含义<xref:System.Windows.Forms.SendKeys>，但你必须将它们括在大括号中。 在其他应用程序，方括号有可能会很明显，动态数据交换 (DDE) 发生时具有特殊含义。  
  
> [!CAUTION]
>  如果你的应用程序旨在用于全球各种键盘，使用 <xref:System.Windows.Forms.SendKeys.Send%2A> 可能会产生不可预知的结果，应当避免。  
  
 若要指定在按下一个键，如 ENTER 或选项卡上，以及密钥表示操作，而不是字符，不显示的字符使用下表中的代码。  
  
|键|代码|  
|---------|----------|  
|退格符|{退格符}，{BS} 或 {BKSP}|  
|中断|{BREAK}|  
|大写锁定|{CAPSLOCK}|  
|DEL 或删除|{删除} 或 {DEL}|  
|向下键|{DOWN}|  
|End|{END}|  
|Enter|{输入} 或 ~|  
|Esc|{ESC}|  
|帮助|{HELP}|  
|Home|{HOME}|  
|单元或插入|{插入} 或 {单元}|  
|向左键|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|打印屏幕|{PRTSC}（保留供将来使用）|  
|向右键|{RIGHT}|  
|SCROLL LOCK|{SCROLLLOCK}|  
|Tab|{TAB}|  
|向上键|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|键盘添加|{ADD}|  
|数字键盘减号|{SUBTRACT}|  
|数字键盘乘号|{乘}|  
|数字键盘除号|{DIVIDE}|  
  
 若要指定结合 SHIFT、 CTRL 和 ALT 键的任意组合的密钥，在前面使用一个或多个以下的代码的键代码。  
  
|键|代码|  
|---------|----------|  
|SHIFT|+|  
|CTRL|^|  
|ALT|%|  
  
 若要指定 SHIFT、 CTRL 和 ALT 的任意组合当按下了几个其他键按住，将这些密钥的代码在括号中。 例如，若要指定以按住 SHIFT 并按下 E 和 C，使用"+ (EC)"。 若要指定以按住 SHIFT 并按 E 下跟 C 而无需 shift 键，使用"+ EC"。  
  
 若要指定重复键，使用窗体 {密钥号}。 你必须放置键和数字之间留一个空格。 例如，{左 42} 表示 42 时间; 同时按左箭头键{h 10} 意味着的按 H 10 倍。  
  
> [!NOTE]
>  由于没有激活其他应用程序的托管的方法，你可以使用当前应用程序中的此类，或者使用本机 Windows 方法，如`FindWindow`和`SetForegroundWindow`、 将焦点强制上其他应用程序。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> 类已更新为 .NET Framework 3.0，从而可用于在 Windows Vista 上运行的应用程序。 Windows Vista 增强的安全性（称为用户帐户控件或 UAC）可避免以前的实现按预期运行。  
>   
>  <xref:System.Windows.Forms.SendKeys> 类容易遭受某些开发人员不得不解决的计时问题。 更新后的实现仍然容易遇到计时问题，但速度稍微快一些，并且可能需要更改解决方法。 <xref:System.Windows.Forms.SendKeys> 类先尝试使用以前的实现，失败后再使用新的实现。 因此， <xref:System.Windows.Forms.SendKeys> 类在不同操作系统上的运行方式可能不同。 此外，当 <xref:System.Windows.Forms.SendKeys> 类使用新的实现时， <xref:System.Windows.Forms.SendKeys.SendWait%2A> 方法不会等到消息被处理后才将其发送至其他进程。  
>   
>  如果如论使用何种操作系统，你的应用程序均依赖于一致的行为，则可通过将以下应用程序设置添加至 app.config 文件强制执行 <xref:System.Windows.Forms.SendKeys> 类以使用新的实现。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  若要强制执行 <xref:System.Windows.Forms.SendKeys> 类以使用以前的实现，请改用 `"JournalHook"` 值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.SendKeys.Send%2A>方法。若要运行该示例，将粘贴下面的代码在一个称为 form1 窗体包含一个按钮调用 Button1。 请确保单击事件与此示例中其事件处理方法关联。 按钮控件的<xref:System.Windows.Forms.Control.TabIndex%2A>属性应设置为 0。 当运行示例时，双击窗体触发该按钮的 click 事件。  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">没有可向其发送击键的活动应用程序。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keys" /> 并不表示有效击键</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">对于非托管代码调用此方法。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">要发送的击键字符串。</param>
        <summary>向活动应用程序发送给定的键，然后等待消息被处理。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.SendKeys.SendWait%2A>来向活动应用程序发送击键或的击键组合并等待击键消息被处理。 此方法可用于将击键发送到应用程序并等待通过击键完成启动任何进程。 这可能很重要，如果在你的应用程序可以继续之前，必须完成其他应用程序。  
  
> [!NOTE]
>  由于没有激活其他应用程序的托管的方法，你可以使用当前应用程序中的此类，或者使用本机 Windows 方法，如`FindWindow`和`SetForegroundWindow`、 将焦点强制上其他应用程序。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> 类已更新为 .NET Framework 3.0，从而可用于在 Windows Vista 上运行的应用程序。 Windows Vista 增强的安全性（称为用户帐户控件或 UAC）可避免以前的实现按预期运行。  
>   
>  <xref:System.Windows.Forms.SendKeys> 类容易遭受某些开发人员不得不解决的计时问题。 更新后的实现仍然容易遇到计时问题，但速度稍微快一些，并且可能需要更改解决方法。 <xref:System.Windows.Forms.SendKeys> 类先尝试使用以前的实现，失败后再使用新的实现。 因此， <xref:System.Windows.Forms.SendKeys> 类在不同操作系统上的运行方式可能不同。 此外，当 <xref:System.Windows.Forms.SendKeys> 类使用新的实现时， <xref:System.Windows.Forms.SendKeys.SendWait%2A> 方法不会等到消息被处理后才将其发送至其他进程。  
>   
>  如果如论使用何种操作系统，你的应用程序均依赖于一致的行为，则可通过将以下应用程序设置添加至 app.config 文件强制执行 <xref:System.Windows.Forms.SendKeys> 类以使用新的实现。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  若要强制执行 <xref:System.Windows.Forms.SendKeys> 类以使用以前的实现，请改用 `"JournalHook"` 值。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">对于非托管代码调用此方法。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>