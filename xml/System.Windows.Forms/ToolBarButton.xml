<Type Name="ToolBarButton" FullName="System.Windows.Forms.ToolBarButton">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="23cc095b7dd2742244997f4f9f9606ea67bf5985" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37507545" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ToolBarButton : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ToolBarButton extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ToolBarButton" />
  <TypeSignature Language="VB.NET" Value="Public Class ToolBarButton&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ToolBarButton : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type ToolBarButton = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ToolBarButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一个 Windows 工具栏按钮。 尽管 <see cref="T:System.Windows.Forms.ToolStripButton" /> 替换并扩展了早期版本的 <see cref="T:System.Windows.Forms.ToolBarButton" /> 控件，但也可以选择保留 <see cref="T:System.Windows.Forms.ToolBarButton" /> 以备向后兼容性和将来使用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ToolBarButton> 控件为父级<xref:System.Windows.Forms.ToolBar>控件。 要设置创建工具栏按钮后的常见属性是<xref:System.Windows.Forms.ToolBarButton.Text%2A>和<xref:System.Windows.Forms.ToolBarButton.ImageIndex%2A>。 设置<xref:System.Windows.Forms.ToolBarButton.Text%2A>的按钮以显示文本下方或右侧的图像的属性。 若要通过创建将图像分配给按钮<xref:System.Windows.Forms.ImageList>，将其分配给<xref:System.Windows.Forms.ToolBar.ImageList%2A>属性工具栏; 然后将分配到的映像索引值<xref:System.Windows.Forms.ToolBarButton.ImageIndex%2A>按钮的属性。  
  
 若要更改分配给工具栏的工具栏按钮的外观，请设置<xref:System.Windows.Forms.ToolBar.Appearance%2A>父工具栏控件的属性。 `ToolBarAppearance.Flat`外观使按钮为平面外观。 在鼠标指针移到按钮的外观变为三维上。 按钮分隔符将显示为线，而不是当按钮具有平面外观时，按钮之间的空格。 如果<xref:System.Windows.Forms.ToolBar.Appearance%2A>属性设置为`ToolBarAppearance.Normal`、 凸起和三维，显示的按钮和分隔符将显示为在按钮之间间隙。  
  
 可以将分配<xref:System.Windows.Forms.ContextMenu>向按钮如果<xref:System.Windows.Forms.ToolBarButton.Style%2A>属性设置为`ToolBarButtonStyle.DropDown`。 单击该按钮，将显示已分配的菜单。  
  
 若要创建的集合<xref:System.Windows.Forms.ToolBarButton>控件以显示有关<xref:System.Windows.Forms.ToolBar>，使用单独添加按钮<xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A>方法的<xref:System.Windows.Forms.ToolBar.Buttons%2A>属性。 或者，可以添加多个工具栏按钮使用<xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A>方法。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Windows.Forms.ToolBar>和三个<xref:System.Windows.Forms.ToolBarButton>控件。 工具栏按钮分配给按钮集合、 集合分配给工具栏和工具栏添加到窗体。 上<xref:System.Windows.Forms.ToolBar.ButtonClick>工具栏上，事件<xref:System.Windows.Forms.ToolBarButtonClickEventArgs.Button%2A>属性的<xref:System.Windows.Forms.ToolBarButtonClickEventArgs>计算和适当的对话框打开。 此代码需要<xref:System.Windows.Forms.Form>、 一个<xref:System.Windows.Forms.OpenFileDialog>即<xref:System.Windows.Forms.SaveFileDialog>，和一个<xref:System.Windows.Forms.PrintDialog>所有已创建。  
  
 [!code-cpp[Classic ToolBar.ToolBar Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBar Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBar Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBar Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBar Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBar Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ToolBar" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="T:System.Windows.Forms.ImageList" />
    <altmember cref="T:System.Windows.Forms.ToolTip" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.ToolBarButton" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ToolBarButton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBarButton.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ToolBarButton();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.ToolBarButton" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个新创建的<xref:System.Windows.Forms.ToolBarButton>没有默认值<xref:System.Windows.Forms.ToolBarButton.Text%2A>或<xref:System.Drawing.Image>分配给它。 按钮的默认样式为`ToolBarButtonStyle.PushButton`。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Windows.Forms.ToolBar>和三个<xref:System.Windows.Forms.ToolBarButton>控件，将这些按钮分配到工具栏，并设置几个按钮的通用属性。 此代码需要<xref:System.Windows.Forms.MenuItem>， <xref:System.Windows.Forms.ImageList>，<xref:System.Windows.Forms.ToolTip>和一个<xref:System.Windows.Forms.Form>已创建并<xref:System.Windows.Forms.ImageList>至少有一个<xref:System.Drawing.Image>分配给它。  
  
 [!code-cpp[Classic ToolBarButton.Style Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBarButton.Style Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBarButton.Style Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ToolBar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ToolBarButton (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBarButton.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ToolBarButton(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ToolBarButton : string -&gt; System.Windows.Forms.ToolBarButton" Usage="new System.Windows.Forms.ToolBarButton text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要在新的 <see cref="T:System.Windows.Forms.ToolBarButton" /> 上显示的文本。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.ToolBarButton" /> 类的新实例，并在按钮上显示分配的文本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新创建<xref:System.Windows.Forms.ToolBarButton>不具有<xref:System.Drawing.Image>分配给它。 按钮的默认样式为<xref:System.Windows.Forms.ToolBarButtonStyle.PushButton>。 `text`参数分配给<xref:System.Windows.Forms.ToolBarButton.Text%2A>属性和新的工具栏按钮控件上显示。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Windows.Forms.ToolBar>和三个<xref:System.Windows.Forms.ToolBarButton>控件，将这些按钮分配到工具栏，并设置几个按钮的通用属性。 此代码需要<xref:System.Windows.Forms.MenuItem>， <xref:System.Windows.Forms.ImageList>，<xref:System.Windows.Forms.ToolTip>和一个<xref:System.Windows.Forms.Form>已创建并<xref:System.Windows.Forms.ImageList>至少有一个<xref:System.Drawing.Image>分配给它。  
  
 [!code-cpp[Classic ToolBarButton.Style Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBarButton.Style Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBarButton.Style Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ToolBar" />
        <altmember cref="P:System.Windows.Forms.ToolBarButton.Text" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBarButton.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="toolBarButton.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.Windows.Forms.ToolBarButton" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法由公共`Dispose`方法和<xref:System.Object.Finalize%2A>方法。 `Dispose` 调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A> 调用`Dispose`与`disposing`设置为`false`。  
  
 当`disposing`参数为 true 时，此方法释放任何托管对象所持有的所有资源，此<xref:System.Windows.Forms.ToolBarButton>的引用。 此方法调用每个引用对象的 `Dispose` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> 可以多次调用由其他对象。重写时<see langword="Dispose(Boolean)" />小心不要引用已经释放的早期调用中的对象<see langword="Dispose" />。详细了解如何实现<see langword="Dispose(Boolean)" />，请参阅 [实现 Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)。有关详细信息<see langword="Dispose" />并<see cref="M:System.Object.Finalize" />，请参阅 [清理了非托管 Resources](~/docs/standard/garbage-collection/unmanaged.md) 和 [重写 Finalize 方法] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DropDownMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Menu DropDownMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Menu DropDownMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.DropDownMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property DropDownMenu As Menu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Menu ^ DropDownMenu { System::Windows::Forms::Menu ^ get(); void set(System::Windows::Forms::Menu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DropDownMenu : System.Windows.Forms.Menu with get, set" Usage="System.Windows.Forms.ToolBarButton.DropDownMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Menu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要显示在下拉工具栏按钮中的菜单。</summary>
        <value>要显示在下拉工具栏按钮中的 <see cref="T:System.Windows.Forms.ContextMenu" />。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以指定<xref:System.Windows.Forms.ContextMenu>单击下拉列表按钮时显示。 此属性不使用，除非<xref:System.Windows.Forms.ToolBarButton.Style%2A>属性值设置为<xref:System.Windows.Forms.ToolBarButtonStyle.DropDownButton?displayProperty=nameWithType>。  
  
> [!NOTE]
>  尽管<xref:System.Windows.Forms.ToolBarButton.DropDownMenu%2A>属性被定义为<xref:System.Windows.Forms.Menu>类型，您必须将其分配<xref:System.Windows.Forms.ContextMenu>，才能正确显示。 如果要创建您自己<xref:System.Windows.Forms.MenuItem>派生的类必须将分配到该对象<xref:System.Windows.Forms.ContextMenu>，并将分配<xref:System.Windows.Forms.ContextMenu>到<xref:System.Windows.Forms.ToolBarButton.DropDownMenu%2A>属性。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Windows.Forms.ToolBar>和三个<xref:System.Windows.Forms.ToolBarButton>控件，将这些按钮分配到工具栏，并设置几个按钮的通用属性。 此代码需要<xref:System.Windows.Forms.ImageList>，<xref:System.Windows.Forms.ToolTip>和一个<xref:System.Windows.Forms.Form>已创建并<xref:System.Windows.Forms.ImageList>至少有一个<xref:System.Drawing.Image>分配给它。  
  
 [!code-cpp[Classic ToolBarButton.Style Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBarButton.Style Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBarButton.Style Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">分配的对象不是 <see cref="T:System.Windows.Forms.ContextMenu" />。</exception>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.ToolBarButton.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否启用此按钮。</summary>
        <value>如果启用此按钮，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.ToolBarButton.Enabled%2A>属性设置为`false`，不能单击工具栏按钮，并更改按钮的外观。 <xref:System.Drawing.Image>和<xref:System.Windows.Forms.ToolBarButton.Text%2A>分配给此按钮会显示为灰色。如果图像或文本有多个颜色，它们显示在为单一的灰色。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageIndex">
      <MemberSignature Language="C#" Value="public int ImageIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ImageIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.ImageIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property ImageIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ImageIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ImageIndex : int with get, set" Usage="System.Windows.Forms.ToolBarButton.ImageIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ImageIndexConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置分配给按钮的图像的索引值。</summary>
        <value>分配给工具栏按钮的 <see cref="T:System.Drawing.Image" /> 的索引值。 默认值为 -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ToolBarButton.ImageIndex%2A>值引用中的图像的索引的值<xref:System.Windows.Forms.ImageList>分配给父<xref:System.Windows.Forms.ToolBar>控件。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Windows.Forms.ToolBar>和三个<xref:System.Windows.Forms.ToolBarButton>控件，将这些按钮分配到工具栏，并设置几个按钮的通用属性。 此代码需要<xref:System.Windows.Forms.MenuItem>， <xref:System.Windows.Forms.ImageList>，<xref:System.Windows.Forms.ToolTip>和一个<xref:System.Windows.Forms.Form>已创建并<xref:System.Windows.Forms.ImageList>至少有一个<xref:System.Drawing.Image>分配给它。  
  
 [!code-cpp[Classic ToolBarButton.Style Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBarButton.Style Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBarButton.Style Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">所分配的值小于 -1。</exception>
        <altmember cref="T:System.Windows.Forms.ToolBar" />
        <altmember cref="T:System.Windows.Forms.ImageList" />
      </Docs>
    </Member>
    <Member MemberName="ImageKey">
      <MemberSignature Language="C#" Value="public string ImageKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.ImageKey" />
      <MemberSignature Language="VB.NET" Value="Public Property ImageKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ImageKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ImageKey : string with get, set" Usage="System.Windows.Forms.ToolBarButton.ImageKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ImageKeyConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置分配给此按钮的图像的名称。</summary>
        <value>分配给此工具栏按钮的 <see cref="T:System.Drawing.Image" /> 的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ToolBarButton.ImageKey%2A>值指示的图像<xref:System.Windows.Forms.ImageList>分配给父<xref:System.Windows.Forms.ToolBar>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="T:System.Windows.Forms.ToolBar" />
        <altmember cref="P:System.Windows.Forms.ToolBar.ImageList" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.ToolBarButton.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>按钮的名称。</summary>
        <value>按钮的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用按钮名称作为键来检索<xref:System.Windows.Forms.ToolBarButton>从<xref:System.Windows.Forms.ToolBar.Buttons%2A>的集合<xref:System.Windows.Forms.ToolBar>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolBar Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolBar Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As ToolBar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ToolBar ^ Parent { System::Windows::Forms::ToolBar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.ToolBar" Usage="System.Windows.Forms.ToolBarButton.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取向其分配工具栏按钮的工具栏控件。</summary>
        <value>向其分配 <see cref="T:System.Windows.Forms.ToolBar" /> 的 <see cref="T:System.Windows.Forms.ToolBarButton" /> 控件。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.ToolBar" />
      </Docs>
    </Member>
    <Member MemberName="PartialPush">
      <MemberSignature Language="C#" Value="public bool PartialPush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PartialPush" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.PartialPush" />
      <MemberSignature Language="VB.NET" Value="Public Property PartialPush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PartialPush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PartialPush : bool with get, set" Usage="System.Windows.Forms.ToolBarButton.PartialPush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示切换式工具栏按钮是否为部分按下状态。</summary>
        <value>如果切换式工具栏按钮为部分按下状态，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.ToolBarButton.PartialPush%2A>设置为`true`，工具栏按钮显示为具有灰其人脸。 此外观会不同于为灰色的外观时<xref:System.Windows.Forms.ToolBarButton.Enabled%2A>属性设置为`false`由于部分按下的外观将对为整个按钮表面。 此属性无任何效果，除非<xref:System.Windows.Forms.ToolBarButtonStyle>设置为`ToggleButton`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ToolBarButton.Pushed%2A>，和<xref:System.Windows.Forms.ToolBarButton.PartialPush%2A>属性。 若要运行该示例，请将以下代码粘贴在一个窗体，其中包含<xref:System.Windows.Forms.RichTextBox>控件调用`RichTextBox1`。调用`InitializeToolBar`窗体的构造函数中的方法或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.ToolBarButtonExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ToolBarButtonExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ToolBarButtonExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ToolBarButtonExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ToolBarButtonExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ToolBarButtonExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ToolBarButtonStyle" />
      </Docs>
    </Member>
    <Member MemberName="Pushed">
      <MemberSignature Language="C#" Value="public bool Pushed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Pushed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.Pushed" />
      <MemberSignature Language="VB.NET" Value="Public Property Pushed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Pushed { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Pushed : bool with get, set" Usage="System.Windows.Forms.ToolBarButton.Pushed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示切换式工具栏按钮当前是否处于按下状态。</summary>
        <value>如果切换式工具栏按钮当前处于按下状态，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.ToolBarButton.Pushed%2A>设置为`true`，工具栏按钮将呈凹陷状或嵌入相对于其他按钮的状态显示。 此属性无任何效果，除非<xref:System.Windows.Forms.ToolBarButtonStyle>设置为`ToggleButton`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ToolBarButton.Pushed%2A>，和<xref:System.Windows.Forms.ToolBarButton.PartialPush%2A>属性。 若要运行该示例，请将以下代码粘贴在一个窗体，其中包含<xref:System.Windows.Forms.RichTextBox>控件调用`RichTextBox1`。 调用`InitializeToolBar`窗体的构造函数中的方法或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.ToolBarButtonExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ToolBarButtonExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ToolBarButtonExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ToolBarButtonExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ToolBarButtonExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ToolBarButtonExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ToolBarButtonStyle" />
      </Docs>
    </Member>
    <Member MemberName="Rectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Rectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Rectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.Rectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle Rectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.Rectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.ToolBarButton.Rectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工具栏按钮的边框。</summary>
        <value>工具栏按钮的边界 <see cref="T:System.Drawing.Rectangle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.ToolBar>和当前按钮均<xref:System.Windows.Forms.ToolBarButton.Visible%2A>，则此属性检索中当前包含按钮的边框。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ToolBar" />
        <altmember cref="P:System.Windows.Forms.ToolBarButton.Visible" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ToolBarButtonStyle Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ToolBarButtonStyle Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As ToolBarButtonStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ToolBarButtonStyle Style { System::Windows::Forms::ToolBarButtonStyle get(); void set(System::Windows::Forms::ToolBarButtonStyle value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Forms.ToolBarButtonStyle with get, set" Usage="System.Windows.Forms.ToolBarButton.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolBarButtonStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置工具栏按钮的样式。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ToolBarButtonStyle" /> 值之一。 默认值为 <see langword="ToolBarButtonStyle.PushButton" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果按钮<xref:System.Windows.Forms.ToolBarButton.Style%2A>设置为<xref:System.Windows.Forms.ToolBarButtonStyle.DropDownButton>可以指定<xref:System.Windows.Forms.MenuItem>按下拉按钮时显示。 如果样式设置为`ToolBarButtonStyle.Separator`，工具栏按钮将显示为按钮分隔符而不是一个按钮。 `ToolBarButtonStyle.ToggleButton`样式会导致该工具栏按钮充当切换按钮; 它可以是在中打开或关闭状态。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Windows.Forms.ToolBar>和三个<xref:System.Windows.Forms.ToolBarButton>控件，将这些按钮分配到工具栏，并设置几个按钮的通用属性。 此代码需要<xref:System.Windows.Forms.MenuItem>， <xref:System.Windows.Forms.ImageList>，<xref:System.Windows.Forms.ToolTip>和一个<xref:System.Windows.Forms.Form>已创建并<xref:System.Windows.Forms.ImageList>至少有一个<xref:System.Drawing.Image>分配给它。  
  
 [!code-cpp[Classic ToolBarButton.Style Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBarButton.Style Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBarButton.Style Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">分配的值不是 <see cref="T:System.Windows.Forms.ToolBarButtonStyle" /> 值之一。</exception>
        <altmember cref="T:System.Windows.Forms.ToolBarButtonStyle" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.ToolBarButton.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含有关工具栏按钮的数据的对象。</summary>
        <value>包含有关工具栏按钮的数据的 <see cref="T:System.Object" />。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 检索或分配与工具栏按钮当前关联的数据。 任何<xref:System.Object>派生的类型可以分配给此属性。 如果此属性设置通过 Windows 窗体设计器中，可以分配纯文本。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ToolBarButton.Pushed%2A>， <xref:System.Windows.Forms.ToolBarButton.PartialPush%2A>，和<xref:System.Windows.Forms.ToolBarButton.Tag%2A>属性。 若要运行该示例，请将以下代码粘贴在一个窗体，其中包含<xref:System.Windows.Forms.RichTextBox>控件调用`RichTextBox1`。 调用`InitializeToolBar`窗体的构造函数中的方法或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.ToolBarButtonExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ToolBarButtonExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ToolBarButtonExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ToolBarButtonExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ToolBarButtonExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ToolBarButtonExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.ToolBarButton.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置显示在工具栏按钮上的文本。</summary>
        <value>显示在工具栏按钮上的文本。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认的文本属性值为空字符串 ("") 创建具有控件才<xref:System.Windows.Forms.ToolBar.%23ctor%2A>接受文本字符串作为参数的构造函数。 工具栏按钮上文本的方向由<xref:System.Windows.Forms.ToolBar.TextAlign%2A>属性的按钮的父<xref:System.Windows.Forms.ToolBar>，它可以设置为其中一个<xref:System.Windows.Forms.ToolBarTextAlign>枚举值。 方向为相对于分配给按钮的图像。 如果没有图像分配给此按钮，将有空间留下一个工具栏按钮的图面上。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Windows.Forms.ToolBar>和三个<xref:System.Windows.Forms.ToolBarButton>控件，将这些按钮分配到工具栏，并设置几个按钮的通用属性。 此代码需要<xref:System.Windows.Forms.MenuItem>， <xref:System.Windows.Forms.ImageList>，<xref:System.Windows.Forms.ToolTip>和一个<xref:System.Windows.Forms.Form>已创建并<xref:System.Windows.Forms.ImageList>至少有一个<xref:System.Drawing.Image>分配给它。  
  
 [!code-cpp[Classic ToolBarButton.Style Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBarButton.Style Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBarButton.Style Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Image" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipText">
      <MemberSignature Language="C#" Value="public string ToolTipText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ToolTipText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.ToolTipText" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTipText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ToolTipText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTipText : string with get, set" Usage="System.Windows.Forms.ToolBarButton.ToolTipText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置显示为该按钮的工具提示的文本。</summary>
        <value>当鼠标指针在工具栏按钮上移动时所显示的文本。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要启用的工具提示文本显示，当鼠标指针移动到按钮上方时，设置<xref:System.Windows.Forms.ToolBar.ShowToolTips%2A>属性的按钮的父<xref:System.Windows.Forms.ToolBar>到`true`。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Windows.Forms.ToolBar>和三个<xref:System.Windows.Forms.ToolBarButton>控件，将这些按钮分配到工具栏，并设置几个按钮的通用属性。 此代码需要<xref:System.Windows.Forms.MenuItem>， <xref:System.Windows.Forms.ImageList>，<xref:System.Windows.Forms.ToolTip>和一个<xref:System.Windows.Forms.Form>已创建并<xref:System.Windows.Forms.ImageList>至少有一个<xref:System.Drawing.Image>分配给它。  
  
 [!code-cpp[Classic ToolBarButton.Style Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBarButton.Style Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBarButton.Style Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBarButton.Style Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ToolBar.ShowToolTips" />
        <altmember cref="T:System.Windows.Forms.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBarButton.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="toolBarButton.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回表示 <see cref="T:System.Windows.Forms.ToolBarButton" /> 控件的字符串。</summary>
        <returns>表示当前 <see cref="T:System.Windows.Forms.ToolBarButton" /> 的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ToolBarButton.ToString%2A>方法返回包含类型和值的字符串<xref:System.Windows.Forms.ToolBarButton.Style%2A>和<xref:System.Windows.Forms.ToolBarButton.Text%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBarButton.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Windows.Forms.ToolBarButton.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示工具栏按钮是否可见。</summary>
        <value>如果工具栏按钮是可见的，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果工具栏按钮不可见，它将不会显示在工具栏中，并因此不能接收用户输入。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>