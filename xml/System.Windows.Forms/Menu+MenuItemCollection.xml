<Type Name="Menu+MenuItemCollection" FullName="System.Windows.Forms.Menu+MenuItemCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="293648035c1869d38c9eb8df46d017bf7b332271" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48715664" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Menu.MenuItemCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit Menu/MenuItemCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Menu.MenuItemCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class Menu.MenuItemCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public: ref class Menu::MenuItemCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type Menu.MenuItemCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 <see cref="T:System.Windows.Forms.MenuItem" /> 对象集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类表示的集合<xref:System.Windows.Forms.MenuItem>中存储的对象<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.ContextMenu>，或<xref:System.Windows.Forms.MenuItem>。 有关<xref:System.Windows.Forms.MainMenu>和<xref:System.Windows.Forms.ContextMenu>类，该集合表示控件的整个菜单结构。 有关<xref:System.Windows.Forms.MenuItem>类，此集合表示与关联的子菜单项的列表<xref:System.Windows.Forms.MenuItem>。  
  
 <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>和<xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A>方法，可以添加和从集合中移除单个菜单项。 此外可以使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Clear%2A>方法从集合中移除所有菜单项。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItemCollection (System.Windows.Forms.Menu owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Menu owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.#ctor(System.Windows.Forms.Menu)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As Menu)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItemCollection(System::Windows::Forms::Menu ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Menu.MenuItemCollection : System.Windows.Forms.Menu -&gt; System.Windows.Forms.Menu.MenuItemCollection" Usage="new System.Windows.Forms.Menu.MenuItemCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="owner">拥有该集合的 <see cref="T:System.Windows.Forms.Menu" />。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类需要将此集合关联的派生的类<xref:System.Windows.Forms.Menu>，如<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.ContextMenu>，或<xref:System.Windows.Forms.MenuItem>类。 由于你必须指定与此集合关联的菜单，无法创建多个菜单项集合并将其与一个菜单，根据需要关联。 若要切换与菜单关联的菜单项，必须清除的项的集合，并添加要向集合显示的菜单项。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MainMenu" />
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将新 <see cref="T:System.Windows.Forms.MenuItem" /> 添加到集合中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem Add (string caption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem Add(string caption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (caption As String) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ Add(System::String ^ caption);" />
      <MemberSignature Language="F#" Value="abstract member Add : string -&gt; System.Windows.Forms.MenuItem&#xA;override this.Add : string -&gt; System.Windows.Forms.MenuItem" Usage="menuItemCollection.Add caption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caption" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="caption">菜单项的标题。</param>
        <summary>将具有指定标题的新 <see cref="T:System.Windows.Forms.MenuItem" /> 添加到当前菜单的末尾。</summary>
        <returns>表示将添加到集合的菜单项的 <see cref="T:System.Windows.Forms.MenuItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:System.Windows.Forms.MenuItem>只能包含一个菜单中一次，并且无法多次添加到同一个菜单。 若要重用<xref:System.Windows.Forms.MenuItem>在多个菜单中，使用<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>方法的<xref:System.Windows.Forms.MenuItem>类。 若要删除<xref:System.Windows.Forms.MenuItem>之前添加，请使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A>方法。  
  
   
  
## Examples  
 下面的代码示例使用派生的类<xref:System.Windows.Forms.MainMenu>若要创建主菜单中， `mainMenu1`，，具有两个<xref:System.Windows.Forms.MenuItem>对象添加到其<xref:System.Windows.Forms.Menu.MenuItems%2A>集合。 该代码，然后将分配`mainMenu1`到<xref:System.Windows.Forms.Form.Menu%2A>属性的<xref:System.Windows.Forms.Form>。 此示例需要在此示例中定义的代码是位于与窗体中。  
  
 [!code-cpp[Classic Menu.MenuItemCollection.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.Forms.MenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.Forms.MenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (item As MenuItem) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(System::Windows::Forms::MenuItem ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Windows.Forms.MenuItem -&gt; int&#xA;override this.Add : System.Windows.Forms.MenuItem -&gt; int" Usage="menuItemCollection.Add item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="item">要添加的 <see cref="T:System.Windows.Forms.MenuItem" />。</param>
        <summary>将以前创建的 <see cref="T:System.Windows.Forms.MenuItem" /> 添加到当前菜单的末尾。</summary>
        <returns>从零开始的索引，该项存储在集合中的此索引位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:System.Windows.Forms.MenuItem>只能包含一个菜单中一次，并且无法多次添加到同一个菜单。 若要重用<xref:System.Windows.Forms.MenuItem>在多个菜单中，使用<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>方法的<xref:System.Windows.Forms.MenuItem>类。 若要删除<xref:System.Windows.Forms.MenuItem>之前添加，请使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A>方法。  
  
 此版本的<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法，可添加之前创建<xref:System.Windows.Forms.MenuItem>对象到末尾的菜单项集合。  
  
   
  
## Examples  
 下面的代码示例创建派生类的实例<xref:System.Windows.Forms.MainMenu>，并添加<xref:System.Windows.Forms.MenuItem>到其集合<xref:System.Windows.Forms.MenuItem>对象。 此示例需要在此示例中定义的方法是位于窗体的类中，通过该窗体类中的方法调用。  
  
 [!code-cpp[Classic Menu.MenuItems Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItems Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItems Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItems Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (int index, System.Windows.Forms.MenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(int32 index, class System.Windows.Forms.MenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.Int32,System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (index As Integer, item As MenuItem) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(int index, System::Windows::Forms::MenuItem ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Add : int * System.Windows.Forms.MenuItem -&gt; int&#xA;override this.Add : int * System.Windows.Forms.MenuItem -&gt; int" Usage="menuItemCollection.Add (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="index">添加新项的位置。</param>
        <param name="item">要添加的 <see cref="T:System.Windows.Forms.MenuItem" />。</param>
        <summary>在菜单项集合中的指定索引位置添加以前创建的 <see cref="T:System.Windows.Forms.MenuItem" />。</summary>
        <returns>从零开始的索引，该项存储在集合中的此索引位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:System.Windows.Forms.MenuItem>只能包含一个菜单中一次，并且无法多次添加到同一个菜单。 若要重用<xref:System.Windows.Forms.MenuItem>在多个菜单中，使用<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>方法的<xref:System.Windows.Forms.MenuItem>类。 若要删除<xref:System.Windows.Forms.MenuItem>之前添加，请使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A>方法。  
  
 此版本的<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法，可添加之前创建<xref:System.Windows.Forms.MenuItem>到集合中的特定索引位置的对象。 任何<xref:System.Windows.Forms.MenuItem>当前位于该索引，以及所有<xref:System.Windows.Forms.MenuItem>后该索引的对象移动到集合中的下一个最低索引。  
  
   
  
## Examples  
 下面的代码示例创建派生类的实例<xref:System.Windows.Forms.MainMenu>，并添加<xref:System.Windows.Forms.MenuItem>到其集合的对象<xref:System.Windows.Forms.MenuItem>项集合中的菜单中的特定位置处的对象。 此示例需要在此示例中定义的方法是位于窗体的类中，通过该窗体类中的方法调用。  
  
 [!code-cpp[Classic Menu.MenuItemCollection.Add4 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.Add4 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add4 Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.Add4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">所添加的 <see cref="T:System.Windows.Forms.MenuItem" /> 已经在使用。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> 参数中所提供的索引大于集合的大小。</exception>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem Add (string caption, EventHandler onClick);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem Add(string caption, class System.EventHandler onClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (caption As String, onClick As EventHandler) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ Add(System::String ^ caption, EventHandler ^ onClick);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * EventHandler -&gt; System.Windows.Forms.MenuItem&#xA;override this.Add : string * EventHandler -&gt; System.Windows.Forms.MenuItem" Usage="menuItemCollection.Add (caption, onClick)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caption" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="caption">菜单项的标题。</param>
        <param name="onClick">表示事件处理程序的 <see cref="T:System.EventHandler" />，当该用户单击该菜单项或某个用户按该菜单项的加速键或快捷键时将调用该处理程序。</param>
        <summary>将具有指定标题和 <see cref="T:System.Windows.Forms.MenuItem" /> 事件的指定事件处理程序的新 <see cref="E:System.Windows.Forms.MenuItem.Click" /> 添加到当前菜单的末尾。</summary>
        <returns>表示将添加到集合的菜单项的 <see cref="T:System.Windows.Forms.MenuItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:System.Windows.Forms.MenuItem>只能包含一个菜单中一次，并且无法多次添加到同一个菜单。 若要重用<xref:System.Windows.Forms.MenuItem>在多个菜单中，使用<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>方法的<xref:System.Windows.Forms.MenuItem>类。 若要删除<xref:System.Windows.Forms.MenuItem>之前添加，请使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A>方法。  
  
 此版本的<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法，可指定的标题的菜单项和一个委托来处理<xref:System.Windows.Forms.MenuItem.Click>事件。 可以使用此版本的<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法，如果应用程序已具有一个事件处理程序以处理<xref:System.Windows.Forms.MenuItem.Click>事件。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.MenuItem.Click>不会引发事件的<xref:System.Windows.Forms.MenuItem>包含子菜单项。  
  
   
  
## Examples  
 下面的代码示例使用派生的类<xref:System.Windows.Forms.MainMenu>若要创建主菜单中， `mainMenu1`，，具有两个<xref:System.Windows.Forms.MenuItem>对象添加到其<xref:System.Windows.Forms.Menu.MenuItems%2A>集合。 该代码使用此版本的<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法定义的事件处理程序<xref:System.Windows.Forms.MenuItem.Click>事件的第二个菜单项添加到集合。 该代码，然后将分配`mainMenu1`到<xref:System.Windows.Forms.Form.Menu%2A>属性的<xref:System.Windows.Forms.Form>。 此示例需要在此示例中定义的代码所在的窗体中。  
  
 [!code-cpp[Classic Menu.MenuItemCollection.Add1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.Add1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add1 Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.Add1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem Add (string caption, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem Add(string caption, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String,System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (caption As String, items As MenuItem()) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ Add(System::String ^ caption, cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MenuItem&#xA;override this.Add : string * System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MenuItem" Usage="menuItemCollection.Add (caption, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caption" Type="System.String" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="caption">菜单项的标题。</param>
        <param name="items">该 <see cref="T:System.Windows.Forms.MenuItem" /> 将要包含的一组 <see cref="T:System.Windows.Forms.MenuItem" /> 对象。</param>
        <summary>将具有指定标题、<see cref="T:System.Windows.Forms.MenuItem" /> 事件处理程序和项的新 <see cref="E:System.Windows.Forms.MenuItem.Click" /> 添加到该菜单的末尾。</summary>
        <returns>表示将添加到集合的菜单项的 <see cref="T:System.Windows.Forms.MenuItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:System.Windows.Forms.MenuItem>只能包含一个菜单中一次，并且无法多次添加到同一个菜单。 若要重用<xref:System.Windows.Forms.MenuItem>在多个菜单中，使用<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>方法的<xref:System.Windows.Forms.MenuItem>类。 若要删除<xref:System.Windows.Forms.MenuItem>之前添加，请使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A>方法。  
  
 此版本的<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法，可指定的标题的菜单项和一个委托，它将处理其<xref:System.Windows.Forms.MenuItem.Click>事件。 可以使用此版本的<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法，如果应用程序已具有一个事件处理程序以处理<xref:System.Windows.Forms.MenuItem.Click>事件。 此版本的方法还允许您指定的数组之前创建<xref:System.Windows.Forms.MenuItem>你想要添加到集合的对象。 可以使用此功能以重用现有<xref:System.Windows.Forms.MenuItem>对象使用克隆<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>方法。 如果`items`参数不为空或`null`，则<xref:System.Windows.Forms.MenuItem>添加到集合将包含子菜单项。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.MenuItem.Click>不会引发事件的<xref:System.Windows.Forms.MenuItem>包含子菜单项。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.AddRange(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRange(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : System.Windows.Forms.MenuItem[] -&gt; unit&#xA;override this.AddRange : System.Windows.Forms.MenuItem[] -&gt; unit" Usage="menuItemCollection.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">表示要添加到集合的菜单项的一组 <see cref="T:System.Windows.Forms.MenuItem" /> 对象。</param>
        <summary>将以前创建的一组 <see cref="T:System.Windows.Forms.MenuItem" /> 对象添加到集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用方法来快速添加一组之前创建<xref:System.Windows.Forms.MenuItem>而不是手动添加每个集合的对象<xref:System.Windows.Forms.MenuItem>集合使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法。 如果集合已包含<xref:System.Windows.Forms.MenuItem>对象，调用此方法将添加新<xref:System.Windows.Forms.MenuItem>到集合末尾的对象。  
  
   
  
## Examples  
 下面的代码示例创建一个数组和副本<xref:System.Windows.Forms.Menu.MenuItemCollection>对象从两个<xref:System.Windows.Forms.MenuItem>数组中的对象。 该示例然后将复制的数组<xref:System.Windows.Forms.MenuItem>该控件集合中的对象<xref:System.Windows.Forms.ContextMenu>名为`contextMenu1`。 此示例需要有两个<xref:System.Windows.Forms.MenuItem>包含名为的子菜单项的对象`menuItem1`和`menuItem2`。  
  
 [!code-cpp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="menuItemCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从菜单项集合中移除所有 <see cref="T:System.Windows.Forms.MenuItem" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于清除整个集合从一个菜单的菜单项。 若要从集合中移除单个菜单项，请使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A>方法。 若要添加新<xref:System.Windows.Forms.MenuItem>对象到集合中，使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法。  
  
   
  
## Examples  
 在此示例中，创建主菜单中， `myMainMenu`，以两个<xref:System.Windows.Forms.MenuItem>对象，`File`和`Edit`。 `File`菜单包含三个子菜单项， `New`， `Open`，和`Exit`。 使用`Clear`方法中，删除所有<xref:System.Windows.Forms.MenuItem>中的对象`File`菜单集合。 此程序需要已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[ClearItems#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ClearItems/CPP/clearitems.cpp#1)]
 [!code-csharp[ClearItems#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ClearItems/CS/clearitems.cs#1)]
 [!code-vb[ClearItems#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClearItems/VB/clearitems.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.MenuItem value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.MenuItem value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Contains(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As MenuItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::MenuItem ^ value);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.MenuItem -&gt; bool" Usage="menuItemCollection.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="value">要在集合中查找的 <see cref="T:System.Windows.Forms.MenuItem" />。</param>
        <summary>确定指定的 <see cref="T:System.Windows.Forms.MenuItem" /> 是否是集合的成员。</summary>
        <returns>如果 <see cref="T:System.Windows.Forms.MenuItem" /> 是集合的成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可确定是否<xref:System.Windows.Forms.MenuItem>是在尝试执行操作前集合的成员<xref:System.Windows.Forms.MenuItem>。 可以使用此方法以确认<xref:System.Windows.Forms.MenuItem>已添加到或仍是集合的成员。  
  
   
  
## Examples  
 在此示例中，创建主菜单中， `myMainMenu`，以两个<xref:System.Windows.Forms.MenuItem>对象，`File`和`Edit`。 `File`菜单包含三个子菜单项， `New`， `Open`，和`Exit`。 通过使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Contains%2A>方法，可以检查以查看是否`File`菜单集合包含的项`Open`。 如果该项存在，请在文本框中显示结果。 此程序需要已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[ContainsItems#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ContainsItems/CPP/containsitems.cpp#1)]
 [!code-csharp[ContainsItems#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ContainsItems/CS/containsitems.cs#1)]
 [!code-vb[ContainsItems#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ContainsItems/VB/containsitems.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="menuItemCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">要查找的项的名称。</param>
        <summary>确定集合是否包含具有指定键的项。</summary>
        <returns>如果集合包含具有指定键的项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Menu.Name%2A>属性对应的键<xref:System.Windows.Forms.MenuItem>中<xref:System.Windows.Forms.Menu.MenuItemCollection>。  
  
 密钥的比较不区分大小写。 如果`key`参数是`null`或空字符串，<xref:System.Windows.Forms.Menu.MenuItemCollection.ContainsKey%2A>返回 `false.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (dest As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ dest, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="menuItemCollection.CopyTo (dest, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">目标数组。</param>
        <param name="index">目标数组中的索引，存储从此处开始。</param>
        <summary>将整个集合复制到现有数组中，从该数组内的指定位置开始复制。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此方法将合并<xref:System.Windows.Forms.MenuItem>从多个集合合并为一个数组对象。 此功能，可方便地组合两个或多个组中使用的菜单项<xref:System.Windows.Forms.ContextMenu>或<xref:System.Windows.Forms.MainMenu>。  
  
   
  
## Examples  
 下面的代码示例创建一个数组和副本<xref:System.Windows.Forms.Menu.MenuItemCollection>对象从两个<xref:System.Windows.Forms.MenuItem>数组中的对象。 该示例然后将复制的数组<xref:System.Windows.Forms.MenuItem>该控件集合中的对象<xref:System.Windows.Forms.ContextMenu>名为`contextMenu1`。 此示例需要有两个<xref:System.Windows.Forms.MenuItem>包含名为的子菜单项的对象`menuItem1`和`menuItem2`。  
  
 [!code-cpp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.Menu.MenuItemCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，通过该值指示集合中 <see cref="T:System.Windows.Forms.MenuItem" /> 对象的总数。</summary>
        <value>集合中 <see cref="T:System.Windows.Forms.MenuItem" /> 对象的数目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Count`属性包含的数<xref:System.Windows.Forms.MenuItem>分配给集合的对象。 可以使用`Count`属性值作为一个循环来循环访问集合的上限。 请注意，集合的索引值是一个从零开始的索引，因此你必须从减去 1 的循环变量。 如果不考虑为此，您将超过集合的上限，并引发异常。  
  
   
  
## Examples  
 下面的代码示例演示如何创建主菜单中， `myMainMenu`，其中一个<xref:System.Windows.Forms.MenuItem>， `File`，，具有三个子菜单项： `New`， `Open`，并`Exit`。 使用`Count`属性，可以计算中的对象数`File`菜单，并在消息框中显示此数字。 此示例需要已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[CountProperty#1](~/samples/snippets/cpp/VS_Snippets_Winforms/CountProperty/CPP/countitems.cpp#1)]
 [!code-csharp[CountProperty#1](~/samples/snippets/csharp/VS_Snippets_Winforms/CountProperty/CS/countitems.cs#1)]
 [!code-vb[CountProperty#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CountProperty/VB/countitems.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MenuItem[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Find(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (key As String, searchAllChildren As Boolean) As MenuItem()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ Find(System::String ^ key, bool searchAllChildren);" />
      <MemberSignature Language="F#" Value="member this.Find : string * bool -&gt; System.Windows.Forms.MenuItem[]" Usage="menuItemCollection.Find (key, searchAllChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">要搜索的菜单项名称。</param>
        <param name="searchAllChildren">若要搜索子菜单项，则为 <see langword="true" />，否则为 <see langword="false" />。</param>
        <summary>查找具有指定键的项，还可以选择搜索子菜单项</summary>
        <returns>一个 <see cref="T:System.Windows.Forms.MenuItem" /> 对象数组，它的 <see cref="P:System.Windows.Forms.Menu.Name" /> 属性与指定 <paramref name="key" /> 相匹配。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 密钥的比较不区分大小写。 如果`key`参数是`null`或空字符串，或没有匹配项，<xref:System.Windows.Forms.Menu.MenuItemCollection.Find%2A>返回一个空数组。  
  
 <xref:System.Windows.Forms.Menu.Name%2A>属性对应的键<xref:System.Windows.Forms.MenuItem>中<xref:System.Windows.Forms.Menu.MenuItemCollection>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 为 <see langword="null" /> 或空字符串。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="menuItemCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回可用于循环访问菜单项集合的枚举数。</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" />，表示菜单项集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.MenuItem value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.MenuItem value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.IndexOf(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As MenuItem) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Forms::MenuItem ^ value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Forms.MenuItem -&gt; int" Usage="menuItemCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="value">要在集合中查找的 <see cref="T:System.Windows.Forms.MenuItem" />。</param>
        <summary>检索集合中特定项的索引。</summary>
        <returns>集合中项的从零开始的索引（如果找到）；否则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何创建主菜单中， `myMainMenu`，以两个<xref:System.Windows.Forms.MenuItem>对象，`File`和`Edit`。 `File`菜单包含三个子菜单项： `New`， `Open`，和`Exit`。 通过使用<xref:System.Windows.Forms.Menu.MenuItemCollection.IndexOf%2A>方法，可以检索的索引`Exit`中的项`File`菜单集合，然后将其值显示在消息框。 此示例需要已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[IndexOf#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[IndexOf#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IndexOf/CS/indexof.cs#1)]
 [!code-vb[IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.IndexOfKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : string -&gt; int&#xA;override this.IndexOfKey : string -&gt; int" Usage="menuItemCollection.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">要搜索的菜单项名称。</param>
        <summary>查找具有指定键的菜单项的第一个匹配项的索引。</summary>
        <returns>具有指定键的第一个菜单项的从零开始的索引。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.Menu.MenuItemCollection.IndexOfKey%2A>项的调用，最后一个索引将首先，检查的键的匹配项，但如果没有匹配项，则搜索开始的集合的开始处返回。  
  
 <xref:System.Windows.Forms.Menu.Name%2A>属性对应的键<xref:System.Windows.Forms.MenuItem>中<xref:System.Windows.Forms.Menu.MenuItemCollection>。  
  
 密钥的比较不区分大小写。 如果`key`参数是`null`或空字符串，或没有匹配项，<xref:System.Windows.Forms.Menu.MenuItemCollection.IndexOfKey%2A>返回-1。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.Menu.MenuItemCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示集合是否为只读。</summary>
        <value>如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取集合中的项。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.MenuItem Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(index As Integer) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::MenuItem ^ default[int] { System::Windows::Forms::MenuItem ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Forms.MenuItem" Usage="System.Windows.Forms.Menu.MenuItemCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">集合中 <see cref="T:System.Windows.Forms.MenuItem" /> 的索引位置。</param>
        <summary>检索集合中指定索引位置的 <see cref="T:System.Windows.Forms.MenuItem" />。</summary>
        <value>位于指定位置的 <see cref="T:System.Windows.Forms.MenuItem" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要将分配<xref:System.Windows.Forms.MenuItem>对象到特定位置，或从其检索<xref:System.Windows.Forms.Menu.MenuItemCollection>，可以引用具有特定索引值的集合对象。 索引值<xref:System.Windows.Forms.Menu.MenuItemCollection>是从零开始的索引。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="index" /> 参数小于零。  
  
或 
<paramref name="index" /> 参数大于集合中的菜单项数，且菜单项集合不是 <see langword="null" />。</exception>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItemCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.MenuItem Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(key As String) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::MenuItem ^ default[System::String ^] { System::Windows::Forms::MenuItem ^ get(System::String ^ key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Windows.Forms.MenuItem" Usage="System.Windows.Forms.Menu.MenuItemCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">要从集合中检索的项的名称。</param>
        <summary>获取集合中具有指定键的项。</summary>
        <value>具有指定键的 <see cref="T:System.Windows.Forms.MenuItem" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Menu.Name%2A>属性对应的键<xref:System.Windows.Forms.MenuItem>中<xref:System.Windows.Forms.Menu.MenuItemCollection>。  
  
 密钥的比较不区分大小写。 如果`key`参数是`null`或空字符串，<xref:System.Windows.Forms.Menu.MenuItemCollection.Item%2A>返回 `null.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (System.Windows.Forms.MenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.Windows.Forms.MenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (item As MenuItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Windows::Forms::MenuItem ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.Windows.Forms.MenuItem -&gt; unit&#xA;override this.Remove : System.Windows.Forms.MenuItem -&gt; unit" Usage="menuItemCollection.Remove item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="item">要移除的 <see cref="T:System.Windows.Forms.MenuItem" />。</param>
        <summary>从菜单项集合中移除指定的 <see cref="T:System.Windows.Forms.MenuItem" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.MenuItem>已从菜单项集合，所有后续的菜单项将上移集合中的一个位置。 可以使用此版本的`Remove`若要删除特定<xref:System.Windows.Forms.MenuItem>从使用的引用集合<xref:System.Windows.Forms.MenuItem>要删除。 如果不具有对引用<xref:System.Windows.Forms.MenuItem>你想要删除，你可以使用接受索引对应于作为参数，此方法的其他版本<xref:System.Windows.Forms.MenuItem>要删除。  
  
   
  
## Examples  
 下面的代码示例演示如何创建主菜单中， `myMainMenu`，以两个<xref:System.Windows.Forms.MenuItem>对象，`File`和`Edit`。 `File`菜单包含三个子菜单项： `New`， `Open`，和`Exit`。 使用`Remove`方法，删除`Open`项从`File`菜单集合。 此示例需要已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[RemoveMenuItems#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RemoveMenuItems/CPP/removeitems.cpp#1)]
 [!code-csharp[RemoveMenuItems#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RemoveMenuItems/CS/removeitems.cs#1)]
 [!code-vb[RemoveMenuItems#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RemoveMenuItems/VB/removeitems.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="menuItemCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要移除的 <see cref="T:System.Windows.Forms.MenuItem" /> 的索引。</param>
        <summary>从菜单项集合的指定索引位置移除 <see cref="T:System.Windows.Forms.MenuItem" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.MenuItem>已从菜单项集合，所有后续的菜单项将上移集合中的一个位置。  
  
   
  
## Examples  
 下面的代码示例演示如何创建主菜单中， `myMainMenu`，以两个<xref:System.Windows.Forms.MenuItem>对象，`File`和`Edit`。 `File`菜单包含三个子菜单项： `New`， `Open`，和`Exit`。 通过使用`RemoveAt`方法，删除`Exit`项从`File`菜单集合使用索引号。 此示例需要已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[RemoveAt#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RemoveAt/CPP/removeat.cpp#1)]
 [!code-csharp[RemoveAt#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RemoveAt/CS/removeat.cs#1)]
 [!code-vb[RemoveAt#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RemoveAt/VB/removeat.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.RemoveByKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveByKey (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveByKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member RemoveByKey : string -&gt; unit&#xA;override this.RemoveByKey : string -&gt; unit" Usage="menuItemCollection.RemoveByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">要移除的菜单项名称。</param>
        <summary>从集合中移除具有指定键的菜单项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Menu.Name%2A>属性对应的键<xref:System.Windows.Forms.MenuItem>中<xref:System.Windows.Forms.Menu.MenuItemCollection>。  
  
 密钥的比较不区分大小写。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
        <value>在所有情况下均为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.Forms.Menu.MenuItemCollection> 实例强制转换为 <xref:System.Collections.ICollection> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
        <value>可用于同步对 <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" /> 的访问的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.Forms.Menu.MenuItemCollection> 实例强制转换为 <xref:System.Collections.ICollection> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要添加到集合中的 <see cref="T:System.Windows.Forms.MenuItem" />。</param>
        <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Add(System.Object)" />。</summary>
        <returns>插入 <see cref="T:System.Windows.Forms.MenuItem" /> 的位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.Forms.Menu.MenuItemCollection> 实例强制转换为 <xref:System.Collections.IList> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要在集合中定位的对象。</param>
        <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</summary>
        <returns>如果指定的对象是集合中的 <see cref="T:System.Windows.Forms.MenuItem" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.Forms.Menu.MenuItemCollection> 实例强制转换为 <xref:System.Collections.IList> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要在集合中查找的 <see cref="T:System.Windows.Forms.MenuItem" />。</param>
        <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</summary>
        <returns>如果 <paramref name="value" /> 是集合中的 <see cref="T:System.Windows.Forms.MenuItem" />，则为从零开始的索引；否则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.Forms.Menu.MenuItemCollection> 实例强制转换为 <xref:System.Collections.IList> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">从零开始的索引，应在该位置插入 <see cref="T:System.Windows.Forms.MenuItem" />。</param>
        <param name="value">要插入到 <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" /> 的 <see cref="T:System.Windows.Forms.MenuItem" />。</param>
        <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.Forms.Menu.MenuItemCollection> 实例强制转换为 <xref:System.Collections.IList> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsFixedSize" />。</summary>
        <value>在所有情况下均为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.Forms.Menu.MenuItemCollection> 实例强制转换为 <xref:System.Collections.IList> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要获取的元素的索引(索引从零开始)。</param>
        <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.Item(System.Int32)" />。</summary>
        <value>位于指定索引处的 <see cref="T:System.Windows.Forms.MenuItem" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.Forms.Menu.MenuItemCollection> 实例强制转换为 <xref:System.Collections.IList> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要移除的 <see cref="T:System.Windows.Forms.MenuItem" />。</param>
        <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Remove(System.Object)" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Windows.Forms.Menu.MenuItemCollection> 实例强制转换为 <xref:System.Collections.IList> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>