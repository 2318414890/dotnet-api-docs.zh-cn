<Type Name="Menu" FullName="System.Windows.Forms.Menu">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9e09e44ab74ca8c9493ddc32d1c4c733564d9b59" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30649881" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Menu : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Menu extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Menu" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Menu&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Menu abstract : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示所有菜单的基本功能。 虽然 <see cref="T:System.Windows.Forms.ToolStripDropDown" /> 和 <see cref="T:System.Windows.Forms.ToolStripDropDownMenu" /> 取代了以前版本的 <see cref="T:System.Windows.Forms.Menu" /> 控件并向其中添加了功能，但是也可选择保留 <see cref="T:System.Windows.Forms.Menu" /> 以备向后兼容和供将来使用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类是适用于基<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.MenuItem>，和<xref:System.Windows.Forms.ContextMenu>类。 无法创建此类的实例。 应用程序 consist 的菜单<xref:System.Windows.Forms.MenuItem>对象。 这些可以包含其他<xref:System.Windows.Forms.MenuItem>对象，表示子菜单项。 <xref:System.Windows.Forms.MenuItem>对象可以存储在<xref:System.Windows.Forms.MainMenu>以显示为窗体的整个菜单结构或<xref:System.Windows.Forms.ContextMenu>用于显示快捷菜单。 此类提供的所有菜单类通用功能。  
  
 与很多个基类，不同<xref:System.Windows.Forms.Menu>类使用其派生的类定义许多其属性。 如果你将你的菜单在多文档界面 (MDI) 应用程序，则可以使用<xref:System.Windows.Forms.Menu.MdiListItem%2A>属性指定<xref:System.Windows.Forms.MenuItem>你的应用程序中显示打开的 MDI 子窗体的列表。 <xref:System.Windows.Forms.Menu.MenuItems%2A>属性包含的列表<xref:System.Windows.Forms.MenuItem>菜单类中存储的对象。 有关<xref:System.Windows.Forms.MainMenu>或<xref:System.Windows.Forms.ContextMenu>，此属性包含所有<xref:System.Windows.Forms.MenuItem>显示对象。 有关<xref:System.Windows.Forms.MenuItem>、<xref:System.Windows.Forms.Menu.MenuItems%2A>属性表示与之关联的子菜单项。  
  
 除了为所有派生的菜单类提供的属性<xref:System.Windows.Forms.Menu>类还提供了方法，如<xref:System.Windows.Forms.Menu.CloneMenu%2A>和<xref:System.Windows.Forms.Menu.MergeMenu%2A>，使您能够从现有的菜单，创建新的菜单，还将合并两个菜单结构在一起。  
  
 <xref:System.Windows.Forms.Menu>类还定义了嵌套的类<xref:System.Windows.Forms.Menu.MenuItemCollection>。 此类定义的集合<xref:System.Windows.Forms.MenuItem>使用对象<xref:System.Windows.Forms.Menu.MenuItems%2A>属性。 你可以使用的方法<xref:System.Windows.Forms.Menu.MenuItemCollection>类来添加和删除菜单项从<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.ContextMenu>，或<xref:System.Windows.Forms.MenuItem>。  
  
   
  
## Examples  
 下面的代码示例使用派生的类中， <xref:System.Windows.Forms.MenuItem>，若要创建窗体的菜单结构。 该示例代码将添加<xref:System.Windows.Forms.MenuItem>表示顶级菜单项，用于选择字体大小，将子菜单项添加到它，然后将两个子菜单项添加到表示应用程序中的大型和小型字体选择该菜单项。 该示例需要有<xref:System.Windows.Forms.MainMenu>对象名为`mainMenu1`和第四个<xref:System.Windows.Forms.MenuItem>对象命名的`menuItem1`， `menuItem2`， `menuItem3`，和`menuItem4`。  
  
 [!code-cpp[Classic Menu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu Example/CS/source.cs#1)]
 [!code-vb[Classic Menu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MainMenu" />
    <altmember cref="T:System.Windows.Forms.ContextMenu" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Menu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Menu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">
          <see cref="T:System.Windows.Forms.MenuItem" /> 类型的数组，包含要添加到菜单的对象。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Menu" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于<xref:System.Windows.Forms.Menu>仅支持一个抽象类继承的类可以调用菜单构造函数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="protected internal void CloneMenu (System.Windows.Forms.Menu menuSrc);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void CloneMenu(class System.Windows.Forms.Menu menuSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.CloneMenu(System.Windows.Forms.Menu)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub CloneMenu (menuSrc As Menu)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void CloneMenu(System::Windows::Forms::Menu ^ menuSrc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSrc" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="menuSrc">要复制的 <see cref="T:System.Windows.Forms.Menu" />。</param>
        <summary>复制作为参数被传递到当前 <see cref="T:System.Windows.Forms.Menu" /> 的 <see cref="T:System.Windows.Forms.Menu" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将复制的整个列表<xref:System.Windows.Forms.MenuItem>对象 (存储在<xref:System.Windows.Forms.Menu>中传递到`menuSrc`) 到当前菜单。 可以使用此方法在派生类中克隆<xref:System.Windows.Forms.MenuItem>对象。 然后可以由其他类派生自重用它们<xref:System.Windows.Forms.Menu>，如<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.ContextMenu>，和<xref:System.Windows.Forms.MenuItem>。  
  
   
  
## Examples  
 此示例将创建主菜单中， `mainMenu1`，有三个菜单项： `File`， `Edit`，和`View`。 然后，它使用<xref:System.Windows.Forms.Menu.CloneMenu%2A>方法以复制`mainMenu1`到`mainMenu2`。 然后，克隆菜单上是分配给窗体，并显示。 此程序要求你已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[CloneMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/CloneMenu/CPP/form1.cpp#1)]
 [!code-csharp[CloneMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/CloneMenu/CS/form1.cs#1)]
 [!code-vb[CloneMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CloneMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="T:System.Windows.Forms.MainMenu" />
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected virtual IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual IntPtr CreateMenuHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Windows.Forms.Menu" /> 的新句柄。</summary>
        <returns>如果该方法成功，则为菜单的句柄；否则为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于操作与非托管代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>处置由 <see cref="T:System.Windows.Forms.Menu" /> 占用的资源（内存除外）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 <xref:System.Windows.Forms.Menu.Dispose%2A> 后，应调用 <xref:System.Windows.Forms.Menu>。 <xref:System.Windows.Forms.Menu.Dispose%2A> 方法使 <xref:System.Windows.Forms.Menu> 处于不可用状态。 在调用<xref:System.Windows.Forms.Menu.Dispose%2A>，必须释放对所有引用<xref:System.Windows.Forms.Menu>以便可以通过垃圾回收回收其占用的内存。  
  
> [!NOTE]
>  每次释放对 <xref:System.Windows.Forms.Menu.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Windows.Forms.Menu>。 否则为资源<xref:System.Windows.Forms.Menu>是使用不会被释放之前垃圾集合调用<xref:System.Windows.Forms.Menu>对象的析构函数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindHandle">
      <MemberSignature Language="C#" Value="public const int FindHandle = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 FindHandle = (0)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Menu.FindHandle" />
      <MemberSignature Language="VB.NET" Value="Public Const FindHandle As Integer  = 0" />
      <MemberSignature Language="C++ CLI" Value="public: int FindHandle = 0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>指定 <see cref="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" /> 方法应搜索一个句柄。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMenuItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem FindMenuItem (int type, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MenuItem FindMenuItem(int32 type, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMenuItem (type As Integer, value As IntPtr) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::MenuItem ^ FindMenuItem(int type, IntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Int32" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="type">要用于查找 <see cref="T:System.Windows.Forms.MenuItem" /> 的项的类型。</param>
        <param name="value">用于查找 <see cref="T:System.Windows.Forms.MenuItem" /> 的项。</param>
        <summary>获取 <see cref="T:System.Windows.Forms.MenuItem" />，它包含指定的值。</summary>
        <returns>匹配值的 <see cref="T:System.Windows.Forms.MenuItem" />；否则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要搜索<xref:System.Windows.Forms.MenuItem>使用句柄，传入<xref:System.Windows.Forms.Menu.FindHandle>字段作为类型，然后的句柄<xref:System.Windows.Forms.MenuItem>你想要查找的值。  
  
 要搜索<xref:System.Windows.Forms.MenuItem>中使用快捷方式，将传递<xref:System.Windows.Forms.Menu.FindShortcut>字段的快捷方式值类型，以及<xref:System.Windows.Forms.MenuItem>你想要查找的值。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">使控件可以调用此方法。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FindMergePosition">
      <MemberSignature Language="C#" Value="protected int FindMergePosition (int mergeOrder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance int32 FindMergePosition(int32 mergeOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.FindMergePosition(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function FindMergePosition (mergeOrder As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; int FindMergePosition(int mergeOrder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="mergeOrder">要合并的菜单项的合并顺序位置。</param>
        <summary>返回菜单项应插入菜单的位置。</summary>
        <returns>菜单项应插入菜单的位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 菜单项的合并顺序指定如果菜单结构，将假定此菜单项的相对位置<xref:System.Windows.Forms.MenuItem>包含在与另一个合并。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindShortcut">
      <MemberSignature Language="C#" Value="public const int FindShortcut = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 FindShortcut = (1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Menu.FindShortcut" />
      <MemberSignature Language="VB.NET" Value="Public Const FindShortcut As Integer  = 1" />
      <MemberSignature Language="C++ CLI" Value="public: int FindShortcut = 1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>指定 <see cref="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" /> 方法应搜索一个快捷方式。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ContextMenu GetContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ContextMenu GetContextMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.GetContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextMenu () As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ContextMenu ^ GetContextMenu();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取包含该菜单的 <see cref="T:System.Windows.Forms.ContextMenu" />。</summary>
        <returns>包含该菜单的 <see cref="T:System.Windows.Forms.ContextMenu" />。 默认值为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于获取对引用<xref:System.Windows.Forms.ContextMenu>中包含此菜单。 此属性返回`null`如果菜单未包含在<xref:System.Windows.Forms.ContextMenu>。 发生这种情况中包含菜单上<xref:System.Windows.Forms.MenuItem>或<xref:System.Windows.Forms.MainMenu>，或如果菜单未包含在任何菜单。 你可以使用此属性，以确定是否当前正在使用一个菜单，以及确定的位置。  
  
   
  
## Examples  
 在此示例中，你使用<xref:System.Windows.Forms.Menu.GetContextMenu%2A>方法来获取对包含的快捷菜单的引用`menuItem1`或`menuItem2`，并在消息框中显示的快捷菜单信息。 以编程方式创建具有以下两项的快捷菜单`New`和`Open`。 您然后通过添加功能对这些项创建相应的事件处理程序。 当运行示例时，可以告诉你为了显示的快捷菜单右键单击该表单的消息框。 然后，单击菜单项时，你将收到另一个消息，告知哪一项单击后，并包含的快捷菜单上显示的信息。 此示例需要你已创建<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[GetContextMenu2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetContextMenu2/CPP/form1.cpp#1)]
 [!code-csharp[GetContextMenu2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetContextMenu2/CS/form1.cs#1)]
 [!code-vb[GetContextMenu2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetContextMenu2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.GetMainMenu" />
      </Docs>
    </Member>
    <Member MemberName="GetMainMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MainMenu GetMainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MainMenu GetMainMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.GetMainMenu" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMainMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::MainMenu ^ GetMainMenu();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取包含该菜单的 <see cref="T:System.Windows.Forms.MainMenu" />。</summary>
        <returns>包含该菜单的 <see cref="T:System.Windows.Forms.MainMenu" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于获取对引用<xref:System.Windows.Forms.MainMenu>目前位于此菜单。 此属性返回`null`如果菜单未包含在<xref:System.Windows.Forms.MainMenu>。 发生这种情况中包含菜单上<xref:System.Windows.Forms.MenuItem>或<xref:System.Windows.Forms.ContextMenu>，或如果菜单未包含在任何菜单。 你可以使用此属性，以确定是否当前正在使用一个菜单，以及确定的位置。  
  
   
  
## Examples  
 此示例声明<xref:System.Windows.Forms.MainMenu>， `mainMenu1`，和四个菜单项， `menuItem1`， `menuItem2`， `menuItem3`，和`menuItem4`。 仅第三个菜单项被添加到`mainMenu1`进行显示。 程序然后检查是否`menuItem3`正在使用中，即`true`，并确定使用它的形式。 标签文本用于显示的窗体中承载的名称<xref:System.Windows.Forms.MainMenu>。 如果更改为所测试的菜单项目`menuItem4`，条件计算结果为`false`因为`menuItem4`从未使用过。 此示例需要你已创建了<xref:System.Windows.Forms.Form>名为`MyForm`包括<xref:System.Windows.Forms.Label>名为`label1`。  
  
 [!code-cpp[GetMainMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetMainMenu/CPP/form1.cpp#1)]
 [!code-csharp[GetMainMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetMainMenu/CS/form1.cs#1)]
 [!code-vb[GetMainMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetMainMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.GetContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示菜单的窗口句柄的值。</summary>
        <value>菜单的 HMENU 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可用于获取执行特殊操作到此类或其派生的类提供的功能之外的菜单的菜单的句柄。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsParent">
      <MemberSignature Language="C#" Value="public virtual bool IsParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.IsParent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsParent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsParent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，通过该值指示此菜单是否包含任何菜单项。 此属性是只读的。</summary>
        <value>
          如果此菜单包含 <see cref="T:System.Windows.Forms.MenuItem" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用此方法以确定是否有任何<xref:System.Windows.Forms.MenuItem>对象均分配到此菜单。 这相当于检查`null`中<xref:System.Windows.Forms.Menu.MenuItems%2A>属性。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Windows.Forms.MainMenu>包含两个<xref:System.Windows.Forms.MenuItem>对象。 然后，它使用<xref:System.Windows.Forms.Menu.IsParent%2A>属性来确定是否`mainMenu1`包含菜单项。 如果条件的计算结果`true`，它将设置<xref:System.Windows.Forms.MainMenu.RightToLeft%2A>属性`true`并将绑定到的主菜单<xref:System.Windows.Forms.Form>。 此示例要求你拥有<xref:System.Windows.Forms.Form>创建命名为`Form1`。  
  
 [!code-cpp[IsParent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IsParent/CPP/form1.cpp#1)]
 [!code-csharp[IsParent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IsParent/CS/form1.cs#1)]
 [!code-vb[IsParent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IsParent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于操作与非托管代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName="MdiListItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem MdiListItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.MenuItem MdiListItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MdiListItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MdiListItem As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MenuItem ^ MdiListItem { System::Windows::Forms::MenuItem ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，通过该值指示用于显示多文档界面 (MDI) 子窗体列表的 <see cref="T:System.Windows.Forms.MenuItem" />。</summary>
        <value>表示菜单项（显示应用程序中打开的 MDI 子窗体列表）的 <see cref="T:System.Windows.Forms.MenuItem" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用此属性以确定是否<xref:System.Windows.Forms.MenuItem>尚未指定要在 MDI 应用程序中显示打开的子窗口的列表。 使用特定<xref:System.Windows.Forms.MenuItem>MDI 列表，将设置<xref:System.Windows.Forms.MenuItem.MdiList%2A>中的属性<xref:System.Windows.Forms.MenuItem>用于。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MdiList" />
      </Docs>
    </Member>
    <Member MemberName="MenuItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Menu.MenuItemCollection MenuItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Menu/MenuItemCollection MenuItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MenuItems As Menu.MenuItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Menu::MenuItemCollection ^ MenuItems { System::Windows::Forms::Menu::MenuItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Menu+MenuItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，通过该值指示与菜单关联的 <see cref="T:System.Windows.Forms.MenuItem" /> 对象的集合。</summary>
        <value>表示存储在菜单中的 <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" /> 对象列表的 <see cref="T:System.Windows.Forms.MenuItem" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可用于获取对的当前存储在菜单中的菜单项列表的引用。 有关<xref:System.Windows.Forms.MainMenu>和<xref:System.Windows.Forms.ContextMenu>对象，<xref:System.Windows.Forms.Menu.MenuItems%2A>属性包含在控件中的整个菜单结构。 有关<xref:System.Windows.Forms.MenuItem>类，<xref:System.Windows.Forms.Menu.MenuItems%2A>属性包含与关联的子菜单项的列表<xref:System.Windows.Forms.MenuItem>。 与对 （此属性提供） 的菜单的菜单项的集合的引用，你可以添加和删除菜单项、 确定的菜单项总数以及清除集合中的菜单项的列表。 有关维护一个菜单的菜单项集合的详细信息，请参阅<xref:System.Windows.Forms.Menu.MenuItemCollection?displayProperty=nameWithType>文档。  
  
   
  
## Examples  
 下面的代码示例创建的派生类中，实例<xref:System.Windows.Forms.MainMenu>，并将添加<xref:System.Windows.Forms.MenuItem>对象向其集合<xref:System.Windows.Forms.MenuItem>对象。 此示例需要在此示例中定义的方法是位于窗体的类和由该窗体类中方法调用。  
  
 [!code-cpp[Classic Menu.MenuItems Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItems Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItems Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItems Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MainMenu" />
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="T:System.Windows.Forms.Menu.MenuItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public virtual void MergeMenu (System.Windows.Forms.Menu menuSrc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MergeMenu(class System.Windows.Forms.Menu menuSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MergeMenu(System.Windows.Forms.Menu)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub MergeMenu (menuSrc As Menu)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void MergeMenu(System::Windows::Forms::Menu ^ menuSrc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSrc" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="menuSrc">其菜单项与当前菜单的菜单项合并的 <see cref="T:System.Windows.Forms.Menu" />。</param>
        <summary>将一个菜单的 <see cref="T:System.Windows.Forms.MenuItem" /> 对象与当前菜单合并。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将合并<xref:System.Windows.Forms.MenuItem>对象从一个与当前菜单的菜单。 <xref:System.Windows.Forms.MenuItem> 对象的值根据进行合并<xref:System.Windows.Forms.MenuItem.MergeType%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.MenuItem.MergeOrder%2A?displayProperty=nameWithType>属性。  
  
 合并带有那些其活动的 MDI 子窗体的多文档界面 (MDI) 父窗体菜单通常为了菜单合并。 这是由.NET Framework 公共语言运行时自动执行。 例如，如果一个 MDI 父窗体包含一组用于处理文件的菜单和 MDI 子窗体还具有与文件相关的菜单项，菜单集将自动合并为单个文件菜单设置在 MDI 父窗体中显示的子窗体时。  
  
 你可以使用<xref:System.Windows.Forms.Menu.MergeMenu%2A>方法如果你正在合并两个不是 MDI 应用程序的一部分的菜单结构。 可以通过调用此实现<xref:System.Windows.Forms.MainMenu>或<xref:System.Windows.Forms.ContextMenu>类以合并两个或多个对象派生自<xref:System.Windows.Forms.Menu>。  
  
 合并两个<xref:System.Windows.Forms.MenuItem>对象，请使用<xref:System.Windows.Forms.MenuItem.MergeMenu%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 此示例将创建两个菜单：`mainMenu1`和`mainMenu2`。 第一个菜单包含一个<xref:System.Windows.Forms.MenuItem>， `File`，和第二个包含一个<xref:System.Windows.Forms.MenuItem>， `Edit`。 使用<xref:System.Windows.Forms.Menu.MergeMenu%2A>方法，`mainMenu2`与合并`mainMenu1`。 显示时，`mainMenu1`将包含两个菜单项`File`和`Edit`。 此示例需要你已创建了<xref:System.Windows.Forms.Form>名为`Form1`。  
  
 [!code-cpp[MergeMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MergeMenu/CPP/form1.cpp#1)]
 [!code-csharp[MergeMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MergeMenu/CS/form1.cs#1)]
 [!code-vb[MergeMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MergeMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">它已尝试将菜单与自己合并在一起。</exception>
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.Menu" /> 的名称。</summary>
        <value>一个表示名称的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在设计时，此属性设置为该控件的编程标识符。 但是，此属性没有任何影响在控件上在运行时。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">通过引用传递的 <see cref="T:System.Windows.Forms.Message" />，它表示要处理的窗口消息。</param>
        <param name="keyData">
          <see cref="T:System.Windows.Forms.Keys" /> 值之一，表示要处理的键。</param>
        <summary>处理命令键。</summary>
        <returns>
          如果字符已由控件处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与控件关联的用户定义的数据。</summary>
        <value>表示数据的对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回表示 <see cref="T:System.String" /> 控件的 <see cref="T:System.Windows.Forms.Menu" />。</summary>
        <returns>一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Windows.Forms.Menu" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Menu.ToString%2A>方法返回<xref:System.String>，包括类型和中的项的数目<xref:System.Windows.Forms.Menu.MenuItems%2A>的控件属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>