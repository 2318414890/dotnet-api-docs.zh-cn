<Type Name="ListBox" FullName="System.Windows.Forms.ListBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc917b2a7f8b2af139eda389b53d4d2098c00aea" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36519100" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListBox : System.Windows.Forms.ListControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListBox extends System.Windows.Forms.ListControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListBox" />
  <TypeSignature Language="VB.NET" Value="Public Class ListBox&#xA;Inherits ListControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListBox : System::Windows::Forms::ListControl" />
  <TypeSignature Language="F#" Value="type ListBox = class&#xA;    inherit ListControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ListControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("SelectedValue")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示用于显示项列表的 Windows 控件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox>控制，你可以向用户可以通过单击选择的用户显示的项的列表。 A<xref:System.Windows.Forms.ListBox>控件可以提供一个或多个选择使用<xref:System.Windows.Forms.ListBox.SelectionMode%2A>属性。 <xref:System.Windows.Forms.ListBox>还提供了<xref:System.Windows.Forms.ListBox.MultiColumn%2A>属性以支持的项的项而不是直接垂直列表的列中显示。 与此操作，该控件可以显示更多可见项和用户不再需要滚动到某项。  
  
 通常，Windows 会处理绘制要在中显示的项的任务<xref:System.Windows.Forms.ListBox>。 你可以使用<xref:System.Windows.Forms.ListBox.DrawMode%2A>属性，并处理<xref:System.Windows.Forms.ListBox.MeasureItem>和<xref:System.Windows.Forms.ListBox.DrawItem>事件以便您可以重写绘制 Windows 自动提供和自己绘制项。 你可以使用所有者描述<xref:System.Windows.Forms.ListBox>控件以显示在列表中的高度可变的项、 图像或不同的颜色或每个项的文本的字体。 <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>属性， <xref:System.Windows.Forms.ListBox.GetItemHeight%2A>，和<xref:System.Windows.Forms.ListBox.GetItemRectangle%2A>还有助于在绘制自己的项目。  
  
 显示和选择功能，除了<xref:System.Windows.Forms.ListBox>还提供功能，您可以有效地将项添加到<xref:System.Windows.Forms.ListBox>并查找的项列表中的文本。 <xref:System.Windows.Forms.ListBox.BeginUpdate%2A>和<xref:System.Windows.Forms.ListBox.EndUpdate%2A>方法使你能够添加大量的项到<xref:System.Windows.Forms.ListBox>而无需每次都重新绘制控件项添加到列表。 <xref:System.Windows.Forms.ListBox.FindString%2A>和<xref:System.Windows.Forms.ListBox.FindStringExact%2A>方法使你能够搜索包含特定的搜索字符串的列表中的项。  
  
 <xref:System.Windows.Forms.ListBox.Items%2A>， <xref:System.Windows.Forms.ListBox.SelectedItems%2A>，和<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>属性提供对由三个集合的访问<xref:System.Windows.Forms.ListBox>。 下表概述了使用的三个集合<xref:System.Windows.Forms.ListBox>控件内及其用法。  
  
|集合类|使用中 <xref:System.Windows.Forms.ListBox>|  
|----------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Windows.Forms.ListBox.ObjectCollection>|包含中包含的所有项<xref:System.Windows.Forms.ListBox>控件。|  
|<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>|包含选定项的集合，这是包含的项的子集在<xref:System.Windows.Forms.ListBox>控件。|  
|<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>|包含一套所选的索引，这是索引的子集的<xref:System.Windows.Forms.ListBox.ObjectCollection>。 这些索引指定选定项。|  
  
 以下三个示例显示三个索引的集合<xref:System.Windows.Forms.ListBox>类支持。  
  
 下表显示如何的示例<xref:System.Windows.Forms.ListBox.ObjectCollection>中存储的项<xref:System.Windows.Forms.ListBox>示例中其所选内容状态以及<xref:System.Windows.Forms.ListBox>。  
  
|索引|项|列表框中选择状态|  
|-----------|----------|----------------------------------------|  
|0|object1|未选定|  
|1|object2|已选定|  
|2|object3|未选定|  
|3|object4|已选定|  
|4|object5|已选定|  
  
 基于<xref:System.Windows.Forms.ListBox.ObjectCollection>上表中所示，此表显示如何<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>将出现。  
  
|索引|项|  
|-----------|----------|  
|0|object2|  
|1|object4|  
|2|object5|  
  
 基于<xref:System.Windows.Forms.ListBox.ObjectCollection>上表中所示，此表显示如何<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>将出现。  
  
|索引|项的索引|  
|-----------|-------------------|  
|0|1|  
|1|3|  
|2|4|  
  
 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>类使你能够将项添加到<xref:System.Windows.Forms.ListBox>。 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法可以接受任何对象时向其中添加成员<xref:System.Windows.Forms.ListBox>。 当一个对象将被添加到<xref:System.Windows.Forms.ListBox>，该控件使用中定义的文本<xref:System.Object.ToString%2A>对象方法除非内对象的成员名中指定<xref:System.Windows.Forms.ListControl.DisplayMember%2A>属性。 除了使用添加项目<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>类还可以添加项使用<xref:System.Windows.Forms.ListControl.DataSource%2A>属性<xref:System.Windows.Forms.ListControl>类。  
  
> [!NOTE]
>  如果你有<xref:System.Windows.Forms.ListBox>， <xref:System.Windows.Forms.ComboBox>，或<xref:System.Windows.Forms.CheckedListBox>必须在基的 Windows 窗体和想要修改这些控件派生的 Windows 窗体中的字符串集合，这些基本的 Windows 窗体中的控件的字符串集合为空。 如果不为空字符串集合，这些变为只读派生另一个 Windows 窗体时。  
  
   
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Windows.Forms.ListBox>列中显示多个项，并且可以有多个项在控件的列表中选择的控件。 该示例的代码添加到 50 个项<xref:System.Windows.Forms.ListBox>使用<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>类，然后选择三个项从列表使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。 然后，该代码显示中的值<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>集合，通过<xref:System.Windows.Forms.ListBox.SelectedItems%2A>属性，与<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>，直到<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>属性。 此示例需要的代码是位于并从调用<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.ListBox" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Windows.Forms.ListBox>列中显示多个项，并且可以有多个项在控件的列表中选择的控件。 该示例的代码添加到 50 个项<xref:System.Windows.Forms.ListBox>使用<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>类，然后选择三个项从列表使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。 然后，该代码显示中的值<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>集合，通过<xref:System.Windows.Forms.ListBox.SelectedItems%2A>属性，与<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>，直到<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>属性。 此示例需要的代码是位于并从调用<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddItemsCore">
      <MemberSignature Language="C#" Value="protected virtual void AddItemsCore (object[] value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddItemsCore(object[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.AddItemsCore(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddItemsCore (value As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddItemsCore(cli::array &lt;System::Object ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddItemsCore : obj[] -&gt; unit&#xA;override this.AddItemsCore : obj[] -&gt; unit" Usage="listBox.AddItemsCore value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated.  There is no replacement.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="value">对象数组。</param>
        <summary>此成员已过时，且无替代项。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowSelection">
      <MemberSignature Language="C#" Value="protected override bool AllowSelection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.AllowSelection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property AllowSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool AllowSelection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowSelection : bool" Usage="System.Windows.Forms.ListBox.AllowSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Windows.Forms.ListBox" /> 当前是否启用了列表项的选择。</summary>
        <value>如果 <see cref="T:System.Windows.Forms.SelectionMode" /> 不是 <see cref="F:System.Windows.Forms.SelectionMode.None" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListBox.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件的背景色。</summary>
        <value>表示控件背景色的 <see cref="T:System.Drawing.Color" />。 默认为 <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> 属性的值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImage : System.Drawing.Image with get, set" Usage="System.Windows.Forms.ListBox.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>此属性与此类无关。</summary>
        <value>窗体的背景图像。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageChanged : EventHandler " Usage="member this.BackgroundImageChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在标签的 <see cref="P:System.Windows.Forms.ListBox.BackgroundImage" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.ListBox.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>按照 <see cref="T:System.Windows.Forms.ListBox" /> 枚举中的定义获取或设置 <see cref="T:System.Windows.Forms.ImageLayout" /> 的背景图像布局。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageLayout" /> 的值之一。 值为 <see langword="Center" />、<see langword="None" />、<see langword="Stretch" />、<see langword="Tile" /> 或 <see langword="Zoom" />。 默认值为 <see langword="Center" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此类无关。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的枚举值不存在。</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.ListBox.BackgroundImageLayout" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberSignature Language="F#" Value="member this.BeginUpdate : unit -&gt; unit" Usage="listBox.BeginUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当向 <see cref="T:System.Windows.Forms.ListBox" /> 中一次添加一个项时，通过防止该控件绘图来维护性能，直到调用 <see cref="M:System.Windows.Forms.ListBox.EndUpdate" /> 方法为止。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 添加到多个项的首选的方法<xref:System.Windows.Forms.ListBox>是使用<xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>类 (通过<xref:System.Windows.Forms.ListBox.Items%2A>属性<xref:System.Windows.Forms.ListBox>)。 这使您可以向单个操作中的列表添加项的数组。 但是，如果你想要添加项时使用一个<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>类，可以使用<xref:System.Windows.Forms.ListBox.BeginUpdate%2A>方法，以防止重新绘制控件<xref:System.Windows.Forms.ListBox>每次向列表添加项。 完成向列表添加项的任务后，请调用<xref:System.Windows.Forms.ListBox.EndUpdate%2A>方法，以使<xref:System.Windows.Forms.ListBox>重绘窗体。 这种方法添加项可以防止闪烁的绘制<xref:System.Windows.Forms.ListBox>大量的项添加到列表时。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Windows.Forms.ListBox.BeginUpdate%2A>和<xref:System.Windows.Forms.ListBox.EndUpdate%2A>方法添加到五千项时<xref:System.Windows.Forms.ListBox>。 此示例需要<xref:System.Windows.Forms.ListBox>控件，名为`listBox1`，已添加到<xref:System.Windows.Forms.Form>与，放置在窗体中并从其调用此方法。  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.EndUpdate" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BorderStyle : System.Windows.Forms.BorderStyle with get, set" Usage="System.Windows.Forms.ListBox.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Windows.Forms.ListBox" /> 四周绘制的边框的类型。</summary>
        <value>
          <see cref="T:System.Windows.Forms.BorderStyle" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">该值不是 <see cref="T:System.Windows.Forms.BorderStyle" /> 值之一。</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="ClearSelected">
      <MemberSignature Language="C#" Value="public void ClearSelected ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearSelected() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ClearSelected" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearSelected ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearSelected();" />
      <MemberSignature Language="F#" Value="member this.ClearSelected : unit -&gt; unit" Usage="listBox.ClearSelected " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取消选择 <see cref="T:System.Windows.Forms.ListBox" /> 中的所有项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法等效于设置<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>属性为负一 (-1)。 此方法可用于快速取消选择列表中的所有项。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>具有属性<xref:System.Windows.Forms.ListBox.TopIndex%2A>属性以将当前所选的项移动到中的显示区域的项列表的顶部<xref:System.Windows.Forms.ListBox>。 该示例还演示了如何删除使用项<xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType>类，以及如何清除所有项选择使用<xref:System.Windows.Forms.ListBox.ClearSelected%2A>方法。 代码首先移动当前选定的项<xref:System.Windows.Forms.ListBox>到列表的顶部。 然后，代码中移除当前选定项之前的所有项并清除中的所有选择<xref:System.Windows.Forms.ListBox>。 此示例需要<xref:System.Windows.Forms.ListBox>包含项添加到窗体和项是当前在中选择<xref:System.Windows.Forms.ListBox>。  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Windows.Forms.ListBox" /> 控件时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidth">
      <MemberSignature Language="C#" Value="public int ColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ColumnWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ColumnWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ColumnWidth : int with get, set" Usage="System.Windows.Forms.ListBox.ColumnWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置多列 <see cref="T:System.Windows.Forms.ListBox" /> 中列的宽度。</summary>
        <value>控件中每列的宽度（以像素为单位）。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你将值设置为零 (0) 时，默认宽度将分配给每个列。 如果<xref:System.Windows.Forms.ListBox>是多列<xref:System.Windows.Forms.ListBox>，此属性返回列表中的每个列的当前宽度。 你可以使用此属性以确保，在多列中的每个列<xref:System.Windows.Forms.ListBox>可以对各个项进行正确显示。  
  
   
  
## Examples  
 下面的代码示例演示一个简单的两个列<xref:System.Windows.Forms.ListBox>。  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">给此属性分配一个小于零的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateItemCollection">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ListBox.ObjectCollection CreateItemCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.ListBox/ObjectCollection CreateItemCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.CreateItemCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateItemCollection () As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::ListBox::ObjectCollection ^ CreateItemCollection();" />
      <MemberSignature Language="F#" Value="abstract member CreateItemCollection : unit -&gt; System.Windows.Forms.ListBox.ObjectCollection&#xA;override this.CreateItemCollection : unit -&gt; System.Windows.Forms.ListBox.ObjectCollection" Usage="listBox.CreateItemCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建项集合的新实例。</summary>
        <returns>表示新项集合的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>您可以在你提供用于存储你的项的不同集合的派生类中替代此。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.ListBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取创建控件句柄时所需要的创建参数。</summary>
        <value>
          <see cref="T:System.Windows.Forms.CreateParams" />，包含创建控件的句柄时所需的创建参数。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于操作与非托管代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CustomTabOffsets">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.IntegerCollection CustomTabOffsets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/IntegerCollection CustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomTabOffsets As ListBox.IntegerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::IntegerCollection ^ CustomTabOffsets { System::Windows::Forms::ListBox::IntegerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomTabOffsets : System.Windows.Forms.ListBox.IntegerCollection" Usage="System.Windows.Forms.ListBox.CustomTabOffsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+IntegerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.ListBox" /> 中的项之间的制表符的宽度。</summary>
        <value>表示制表符宽度的整数的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 整数数组包含升序排序的选项卡空格。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultItemHeight">
      <MemberSignature Language="C#" Value="public const int DefaultItemHeight = 13;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 DefaultItemHeight = (13)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.DefaultItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultItemHeight As Integer  = 13" />
      <MemberSignature Language="C++ CLI" Value="public: int DefaultItemHeight = 13;" />
      <MemberSignature Language="F#" Value="val mutable DefaultItemHeight : int" Usage="System.Windows.Forms.ListBox.DefaultItemHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>13</MemberValue>
      <Docs>
        <summary>为所有者描述的 <see cref="T:System.Windows.Forms.ListBox" /> 指定默认项高度。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.ListBox.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取控件的默认大小。</summary>
        <value>控件的默认 <see cref="T:System.Drawing.Size" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawItemEventHandler ^ DrawItem;" />
      <MemberSignature Language="F#" Value="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " Usage="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在所有者绘制的 <see cref="T:System.Windows.Forms.ListBox" /> 的可视方位更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件由一个所有者绘制<xref:System.Windows.Forms.ListBox>。 事件才会引发时<xref:System.Windows.Forms.ListBox.DrawMode%2A>属性设置为`DrawMode.OwnerDrawFixed`或`DrawMode.OwnerDrawVariable`。 你可以使用此事件来执行绘制项所需的任务<xref:System.Windows.Forms.ListBox>。 如果你拥有一个可变大小的项 (时<xref:System.Windows.Forms.ListBox.DrawMode%2A>属性设置为`DrawMode.OwnerDrawVariable`)，在绘制某一项前,<xref:System.Windows.Forms.ListBox.MeasureItem>引发事件。 你可以创建的事件处理程序<xref:System.Windows.Forms.ListBox.MeasureItem>事件，以指定要绘制事件处理程序中的项的大小<xref:System.Windows.Forms.ListBox.DrawItem>事件。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何创建所有者描述<xref:System.Windows.Forms.ListBox>项。 该代码使用<xref:System.Windows.Forms.ListBox.DrawMode%2A>属性指定绘制的项固定大小和<xref:System.Windows.Forms.ListBox.DrawItem>事件以执行到每个项的绘制<xref:System.Windows.Forms.ListBox>。 该示例代码使用的属性和方法<xref:System.Windows.Forms.DrawItemEventArgs>类作为参数传递给事件处理程序来绘制项。 此示例需要<xref:System.Windows.Forms.ListBox>控件称为`listBox1`已添加到窗体，<xref:System.Windows.Forms.ListBox.DrawItem>由示例代码中定义的事件处理程序处理事件。 该示例还要求项已添加到<xref:System.Windows.Forms.ListBox>包括"Apple"、"橙色"和"Plum"按此顺序的文本。  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DrawMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DrawMode DrawMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DrawMode DrawMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DrawMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DrawMode As DrawMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DrawMode DrawMode { System::Windows::Forms::DrawMode get(); void set(System::Windows::Forms::DrawMode value); };" />
      <MemberSignature Language="F#" Value="member this.DrawMode : System.Windows.Forms.DrawMode with get, set" Usage="System.Windows.Forms.ListBox.DrawMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件的绘图模式。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DrawMode" /> 值之一，表示用于绘制控件的项的模式。 默认值为 <see langword="DrawMode.Normal" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何创建所有者描述<xref:System.Windows.Forms.ListBox>项。 该代码使用<xref:System.Windows.Forms.ListBox.DrawMode%2A>属性指定绘制的项固定大小和<xref:System.Windows.Forms.ListBox.DrawItem>事件以执行到每个项的绘制<xref:System.Windows.Forms.ListBox>。 该示例代码使用的属性和方法<xref:System.Windows.Forms.DrawItemEventArgs>类作为参数传递给事件处理程序来绘制项。 此示例需要<xref:System.Windows.Forms.ListBox>控件称为`listBox1`已添加到窗体，<xref:System.Windows.Forms.ListBox.DrawItem>由示例代码中定义的事件处理程序处理事件。 该示例还要求项已添加到<xref:System.Windows.Forms.ListBox>包括"Apple"、"橙色"和"Plum"按此顺序的文本。  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">分配给属性的值不是 <see cref="T:System.Windows.Forms.DrawMode" /> 枚举的成员。</exception>
        <exception cref="T:System.ArgumentException">多列 <see cref="T:System.Windows.Forms.ListBox" /> 的高度不能变化。</exception>
        <altmember cref="T:System.Windows.Forms.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberSignature Language="F#" Value="member this.EndUpdate : unit -&gt; unit" Usage="listBox.EndUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在 <see cref="M:System.Windows.Forms.ListBox.BeginUpdate" /> 方法挂起绘制后，该方法恢复绘制 <see cref="T:System.Windows.Forms.ListBox" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将项添加到的首选的方式<xref:System.Windows.Forms.ListBox>是使用<xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>类 (通过<xref:System.Windows.Forms.ListBox.Items%2A>属性<xref:System.Windows.Forms.ListBox>)。 这使您可以一次向列表添加项的数组。 但是，如果你想要添加项时使用一个<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>类，可以使用<xref:System.Windows.Forms.ListBox.BeginUpdate%2A>方法，以防止重新绘制控件<xref:System.Windows.Forms.ListBox>每次向列表添加项。 完成向列表添加项的任务后，请调用<xref:System.Windows.Forms.ListBox.EndUpdate%2A>方法，以使<xref:System.Windows.Forms.ListBox>重绘窗体。 这种方法添加项可以防止闪烁的绘制<xref:System.Windows.Forms.ListBox>大量的项添加到列表时。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Windows.Forms.ListBox.BeginUpdate%2A>和<xref:System.Windows.Forms.ListBox.EndUpdate%2A>方法添加到五千项时<xref:System.Windows.Forms.ListBox>。 此示例需要<xref:System.Windows.Forms.ListBox>控件，名为`listBox1`，已添加到<xref:System.Windows.Forms.Form>与，放置在窗体中并从其调用此方法。  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.BeginUpdate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindString">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>查找 <see cref="T:System.Windows.Forms.ListBox" /> 中以指定字符串开始的第一个项。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindString (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindString(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.FindString : string -&gt; int" Usage="listBox.FindString s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要搜索的文本。</param>
        <summary>查找 <see cref="T:System.Windows.Forms.ListBox" /> 中以指定字符串开始的第一个项。</summary>
        <returns>找到的第一个项的从零开始的索引；如果找不到匹配项，则返回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法执行的搜索不区分大小写。 搜索查找与指定的搜索字符串参数，部分匹配的单词`s`。 此方法可用于搜索与指定的字符串匹配的第一项。 然后，你可以执行任务，例如删除通过使用包含搜索文本的项<xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A>方法或更改项的文本。 一旦你找到指定的文本，如果你想要搜索的文本中的其他实例<xref:System.Windows.Forms.ListBox>，你可以使用的版本<xref:System.Windows.Forms.ListBox.FindString%2A>指定内的起始索引为提供一个参数的方法<xref:System.Windows.Forms.ListBox>。 如果你想要执行搜索而不是部分匹配的确切的单词匹配，则使用<xref:System.Windows.Forms.ListBox.FindStringExact%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.FindString%2A>方法搜索中的字符串的第一个实例<xref:System.Windows.Forms.ListBox>。 如果未找到项时与搜索字符串相匹配<xref:System.Windows.Forms.ListBox.FindString%2A>返回-1 值，该示例显示<xref:System.Windows.Forms.MessageBox>。 如果匹配的搜索文本找到的项，该示例使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法来选择中的项<xref:System.Windows.Forms.ListBox>。  
  
 [!code-cpp[ListBox.FindString2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="s" /> 参数的值小于 -1，或者大于或等于项的计数。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindString (s As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindString(System::String ^ s, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.FindString : string * int -&gt; int" Usage="listBox.FindString (s, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">要搜索的文本。</param>
        <param name="startIndex">项的从零开始的索引，该项在要搜索的第一个项之前。 设置为负一 (-1) 以从控件的开始处进行搜索。</param>
        <summary>查找 <see cref="T:System.Windows.Forms.ListBox" /> 中以指定字符串开始的第一个项。 搜索从特定的起始索引处开始。</summary>
        <returns>找到的第一个项的从零开始的索引；如果找不到匹配项，则返回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法执行的搜索不区分大小写。 搜索查找与指定的搜索字符串参数，部分匹配的单词`s`。 你可以使用此方法要搜索匹配项的列表中指定的起始索引处的指定的字符串的第一项<xref:System.Windows.Forms.ListBox>。 然后，你可以执行任务，例如删除通过使用包含搜索文本的项<xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A>方法或更改项的文本。 使用此方法的未指定起始索引版本建立调用之后，通常使用此方法。 在列表中找到的初始项后, 此方法通常用于通过指定中的索引位置查找进一步的搜索文本实例`startIndex`的搜索文本的第一个找到实例之后的项的参数。 如果你想要执行搜索而不是部分匹配的确切的单词匹配，则使用<xref:System.Windows.Forms.ListBox.FindStringExact%2A>方法。  
  
> [!NOTE]
>  当搜索到达底部<xref:System.Windows.Forms.ListBox>，它将继续按自上而下的搜索<xref:System.Windows.Forms.ListBox>回由指定的项`startIndex`参数。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.FindString%2A>方法搜索中的项的搜索文本的所有实例<xref:System.Windows.Forms.ListBox>。 此示例使用的版本<xref:System.Windows.Forms.ListBox.FindString%2A>方法，可用于指定从其执行中的所有项持续搜索的起始搜索索引<xref:System.Windows.Forms.ListBox>。 该示例还演示如何确定何时<xref:System.Windows.Forms.ListBox.FindString%2A>方法开始后到达要阻止的递归搜索的项列表的底部，从列表的顶部搜索。 在找到项后<xref:System.Windows.Forms.ListBox>，它们使用选择<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。  
  
 [!code-cpp[ListBox.FindString#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> 参数或者小于零，或者大于或等于 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> 类的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> 属性的值。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindStringExact">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>查找 <see cref="T:System.Windows.Forms.ListBox" /> 中第一个精确匹配指定字符串的项。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindStringExact (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindStringExact(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.FindStringExact : string -&gt; int" Usage="listBox.FindStringExact s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要搜索的文本。</param>
        <summary>查找 <see cref="T:System.Windows.Forms.ListBox" /> 中第一个精确匹配指定字符串的项。</summary>
        <returns>找到的第一个项的从零开始的索引；如果找不到匹配项，则返回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法执行的搜索不区分大小写。 搜索查找完全匹配的搜索字符串参数中指定的词语`s`。 此方法可用于搜索与指定的字符串匹配的第一项。 然后，你可以执行任务，例如删除通过使用包含搜索文本的项<xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A>方法或更改项的文本。 一旦你找到指定的文本，如果你想要搜索的文本中的其他实例<xref:System.Windows.Forms.ListBox>，你可以使用的版本<xref:System.Windows.Forms.ListBox.FindStringExact%2A>指定内的起始索引为提供一个参数的方法<xref:System.Windows.Forms.ListBox>。 如果你想要执行而不是确切的单词匹配的部分单词搜索，使用<xref:System.Windows.Forms.ListBox.FindString%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.FindStringExact%2A?displayProperty=nameWithType>方法搜索<xref:System.Windows.Forms.ListBox>与指定的字符串完全匹配的项的控件。 如果不找到与搜索字符串匹配的任何项<xref:System.Windows.Forms.ListBox.FindStringExact%2A>返回-1 值，该示例显示<xref:System.Windows.Forms.MessageBox>。 如果匹配的搜索文本找到的项，该示例使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法来选择中的项<xref:System.Windows.Forms.ListBox>。  
  
 [!code-cpp[ListBox.FindStringExact#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindStringExact (s As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindStringExact(System::String ^ s, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.FindStringExact : string * int -&gt; int" Usage="listBox.FindStringExact (s, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">要搜索的文本。</param>
        <param name="startIndex">项的从零开始的索引，该项在要搜索的第一个项之前。 设置为负一 (-1) 以从控件的开始处进行搜索。</param>
        <summary>查找 <see cref="T:System.Windows.Forms.ListBox" /> 中第一个精确匹配指定字符串的项。 搜索从特定的起始索引处开始。</summary>
        <returns>找到的第一个项的从零开始的索引；如果找不到匹配项，则返回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法执行的搜索不区分大小写。 搜索查找与指定的搜索字符串参数，完全匹配的单词`s`。 你可以使用此方法要搜索匹配项的列表中指定的起始索引处的指定的字符串的第一项<xref:System.Windows.Forms.ListBox>。 然后，你可以执行任务，例如删除包含搜索文本使用的项<xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A>方法或更改项的文本。 使用此方法的未指定起始索引版本建立调用之后，通常使用此方法。 在列表中找到的初始项后, 此方法通常用于通过指定中的索引位置查找进一步的搜索文本实例`startIndex`的搜索文本的第一个找到实例之后的项的参数。 如果你想要执行而不是确切的单词匹配的部分单词搜索，使用<xref:System.Windows.Forms.ListBox.FindString%2A>方法。  
  
> [!NOTE]
>  当搜索到达底部<xref:System.Windows.Forms.ListBox>，它将继续按自上而下的搜索<xref:System.Windows.Forms.ListBox>回由指定的项`startIndex`参数。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.FindStringExact%2A>方法搜索中的所有项<xref:System.Windows.Forms.ListBox>与指定的都搜索文本完全匹配。 此示例使用的版本<xref:System.Windows.Forms.ListBox.FindStringExact%2A>方法，可用于指定从其执行中的所有项持续搜索的起始搜索索引<xref:System.Windows.Forms.ListBox>。 该示例还演示如何确定何时<xref:System.Windows.Forms.ListBox.FindStringExact%2A>方法开始后到达的项，以防止的递归搜索列表的底部，从列表的顶部搜索。 在找到项后<xref:System.Windows.Forms.ListBox>，它们使用选择<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。  
  
 [!code-cpp[ListBox.FindStringExact2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> 参数或者小于零，或者大于或等于 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> 类的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> 属性的值。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font with get, set" Usage="System.Windows.Forms.ListBox.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件显示的文字的字体。</summary>
        <value>要应用于由控件显示的文本的 <see cref="T:System.Drawing.Font" />。 默认为 <see cref="P:System.Windows.Forms.Control.DefaultFont" /> 属性的值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListBox.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件的前景色。</summary>
        <value>控件的前景 <see cref="T:System.Drawing.Color" />。 默认为 <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> 属性的值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemHeight">
      <MemberSignature Language="C#" Value="public int GetItemHeight (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetItemHeight(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemHeight (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetItemHeight(int index);" />
      <MemberSignature Language="F#" Value="member this.GetItemHeight : int -&gt; int" Usage="listBox.GetItemHeight index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要返回其高度的项的从零开始的索引。</param>
        <summary>返回 <see cref="T:System.Windows.Forms.ListBox" /> 中某项的高度。</summary>
        <returns>指定的项的高度，以像素为单位。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.ListBox.DrawMode%2A>属性未设置为`DrawMode.OwnerDrawVariable`，索引参数的值被忽略，因为标准中的所有项<xref:System.Windows.Forms.ListBox>大小相同。 你可以使用此属性，当你使用一个所有者绘制<xref:System.Windows.Forms.ListBox>来确定内的任何项的大小<xref:System.Windows.Forms.ListBox>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 参数值小于零或大于项的计数。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetItemRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRectangle (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRectangle(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemRectangle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRectangle (index As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRectangle(int index);" />
      <MemberSignature Language="F#" Value="member this.GetItemRectangle : int -&gt; System.Drawing.Rectangle" Usage="listBox.GetItemRectangle index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要返回其边框的项的从零开始的索引。</param>
        <summary>返回 <see cref="T:System.Windows.Forms.ListBox" /> 中的项的边框。</summary>
        <returns>
          <see cref="T:System.Drawing.Rectangle" />，表示指定项的边框。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果中指定的项`index`参数不可见，此方法返回的矩形将位于控件的可见部分之外。 此方法可用于确定的大小和位置列表中的项。 若要获取的项的高度，尤其是一个高度可变的所有者描述的列表项，你可以使用<xref:System.Windows.Forms.ListBox.GetItemHeight%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 参数或者小于零，或者大于或等于 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> 类的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> 属性的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetScaledBounds">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Drawing.Rectangle GetScaledBounds(valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetScaledBounds (bounds As Rectangle, factor As SizeF, specified As BoundsSpecified) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Drawing::Rectangle GetScaledBounds(System::Drawing::Rectangle bounds, System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.GetScaledBounds : System.Drawing.Rectangle * System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; System.Drawing.Rectangle" Usage="listBox.GetScaledBounds (bounds, factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="bounds">指定要在显示器边界中检索的区域的 <see cref="T:System.Drawing.Rectangle" />。</param>
        <param name="factor">控件边界的高度和宽度。</param>
        <param name="specified">
          <see cref="T:System.Windows.Forms.BoundsSpecified" /> 值之一，指定在定义控件大小和位置时要使用的控件边界。</param>
        <summary>检索 <see cref="T:System.Windows.Forms.ListBox" /> 在其中进行缩放的边界。</summary>
        <returns>一个表示控件缩放边界的 <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox>类重写<xref:System.Windows.Forms.Control.GetScaledBounds%2A?displayProperty=nameWithType>方法，以确保请求的高度比例进行调整而不是当前的高度。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelected">
      <MemberSignature Language="C#" Value="public bool GetSelected (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetSelected(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetSelected(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSelected (index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetSelected(int index);" />
      <MemberSignature Language="F#" Value="member this.GetSelected : int -&gt; bool" Usage="listBox.GetSelected index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">项的从零开始的索引，根据该索引确定该项是否被选定。</param>
        <summary>返回一个值，该值指示是否选定了指定的项。</summary>
        <returns>如果当前在 <see cref="T:System.Windows.Forms.ListBox" /> 中选定了指定的项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此方法来快速确定指定的项是否处于选定状态。 当需要时多选中特定项执行特定操作时，此方法很有用<xref:System.Windows.Forms.ListBox>选择。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.GetSelected%2A>方法来确定中的哪些项<xref:System.Windows.Forms.ListBox>才能选择未选定的项，并取消选择选定项选择。 该示例还演示了如何使用<xref:System.Windows.Forms.ListBox.SelectionMode%2A>属性来启用<xref:System.Windows.Forms.ListBox>若要有多个选择项，并使用<xref:System.Windows.Forms.ListBox.Sorted%2A>属性来演示如何在中的项进行排序<xref:System.Windows.Forms.ListBox>自动。 此示例需要<xref:System.Windows.Forms.ListBox>命名`listBox1`，已添加到窗体，`InitializeMyListBox`示例中定义的方法调用从<xref:System.Windows.Forms.Form.Load>窗体的事件。  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 参数或者小于零，或者大于或等于 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> 类的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> 属性的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="HorizontalExtent">
      <MemberSignature Language="C#" Value="public int HorizontalExtent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HorizontalExtent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalExtent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HorizontalExtent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalExtent : int with get, set" Usage="System.Windows.Forms.ListBox.HorizontalExtent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.ListBox" /> 的水平滚动条可滚动的宽度。</summary>
        <value>水平滚动条可滚动控件的宽度，以像素为单位。 默认值为零。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性只报告有用的值，如果<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>属性设置为`true`。 如果宽度<xref:System.Windows.Forms.ListBox>小于此属性，则水平滚动条在水平滚动项的值<xref:System.Windows.Forms.ListBox>。 如果宽度<xref:System.Windows.Forms.ListBox>等于或大于此值，将会隐藏水平滚动条。 此属性的值不会通过动态更新<xref:System.Windows.Forms.ListBox>。 当此属性很有用的项<xref:System.Windows.Forms.ListBox>是所有者描述。 例如，如果所有者描述的项<xref:System.Windows.Forms.ListBox>是 200 像素宽，但<xref:System.Windows.Forms.ListBox>为 60 个像素宽，<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>属性需要将设置为 200 以滚动到控件的可见区域的项的右边缘。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>和<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>属性，以显示水平滚动条的显示中的所有项文本<xref:System.Windows.Forms.ListBox>控件。 此示例还使用<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>属性以确保项未部分显示的大小由于<xref:System.Windows.Forms.ListBox>控件。 此示例需要<xref:System.Windows.Forms.ListBox>控件，名为`listBox1`，已添加到表单。  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollbar">
      <MemberSignature Language="C#" Value="public bool HorizontalScrollbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HorizontalScrollbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalScrollbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HorizontalScrollbar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalScrollbar : bool with get, set" Usage="System.Windows.Forms.ListBox.HorizontalScrollbar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否在控件中显示水平滚动条。</summary>
        <value>如果为 <see langword="true" />，则在控件中显示水平滚动条；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>属性确定是否<xref:System.Windows.Forms.ListBox>应显示水平滚动栏时中的项的宽度<xref:System.Windows.Forms.ListBox>超出控件的右边缘。 当此属性设置为`true`，则会基于中的项的宽度自动显示滚动条<xref:System.Windows.Forms.ListBox>。 如果<xref:System.Windows.Forms.ListBox>是一个所有者绘制<xref:System.Windows.Forms.ListBox>，以便正确地显示水平滚动条，必须设置<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>和<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>属性，以显示水平滚动条的显示中的所有项文本<xref:System.Windows.Forms.ListBox>控件。 此示例还使用<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>属性以确保项未部分显示的大小由于<xref:System.Windows.Forms.ListBox>控件。 此示例需要<xref:System.Windows.Forms.ListBox>控件，名为`listBox1`，已添加到表单。  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexFromPoint">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回指定坐标处的项的从零开始的索引。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexFromPoint (p As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexFromPoint(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="member this.IndexFromPoint : System.Drawing.Point -&gt; int" Usage="listBox.IndexFromPoint p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">
          <see cref="T:System.Drawing.Point" /> 对象，包含用于获取项索引的坐标。</param>
        <summary>返回指定坐标处的项的从零开始的索引。</summary>
        <returns>在指定坐标处找到的项的从零开始的索引；如果找不到匹配项，则返回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可确定哪一项位于控件内的特定位置。 你可以使用此方法来确定哪些项列表中的选择了当用户右键单击<xref:System.Windows.Forms.ListBox>。 可以确定光标的位置，并将其传递给`p`参数<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法来确定用户的哪一项之前通过右键单击鼠标。 然后可以为用户提供任务和基于特定项的功能来显示快捷菜单。  
  
   
  
## Examples  
 下面的代码示例演示如何执行拖放操作使用<xref:System.Windows.Forms.ListBox>包含用于放到项的控件<xref:System.Windows.Forms.RichTextBox>控件。 表单集的构造函数<xref:System.Windows.Forms.RichTextBox.AllowDrop%2A>属性`true`启用拖放操作中发生<xref:System.Windows.Forms.RichTextBox>。 该示例使用<xref:System.Windows.Forms.Control.MouseDown>事件<xref:System.Windows.Forms.ListBox>启动拖动操作，通过调用<xref:System.Windows.Forms.Control.DoDragDrop%2A>方法。 该示例使用<xref:System.Windows.Forms.Control.DragEnter>事件来确定是否项拖放到<xref:System.Windows.Forms.RichTextBox>是有效的数据类型。 <xref:System.Windows.Forms.Control.DragDrop>事件执行拖动的项到实际删除<xref:System.Windows.Forms.RichTextBox>内当前光标位置处的控件<xref:System.Windows.Forms.RichTextBox>。 此示例需要<xref:System.Windows.Forms.Control.DragDrop>和<xref:System.Windows.Forms.Control.DragEnter>事件已连接到示例中定义的事件处理程序。  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexFromPoint (x As Integer, y As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexFromPoint(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.IndexFromPoint : int * int -&gt; int" Usage="listBox.IndexFromPoint (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">要搜索的位置的 x 坐标。</param>
        <param name="y">要搜索的位置的 y 坐标。</param>
        <summary>返回指定坐标处的项的从零开始的索引。</summary>
        <returns>在指定坐标处找到的项的从零开始的索引；如果找不到匹配项，则返回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可确定哪一项位于控件内的特定位置。 你可以使用此方法来确定哪些项列表中的选择了当用户右键单击<xref:System.Windows.Forms.ListBox>。 可以确定光标的位置，并将其传递给`x`和`y`参数<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法来确定用户的哪一项之前通过右键单击鼠标。 然后可以为用户提供任务和基于特定项的功能来显示快捷菜单。  
  
   
  
## Examples  
 下面的代码示例演示如何执行拖放操作使用<xref:System.Windows.Forms.ListBox>包含用于放到项的控件<xref:System.Windows.Forms.RichTextBox>控件。 表单集的构造函数<xref:System.Windows.Forms.RichTextBox.AllowDrop%2A>属性`true`启用拖放操作中发生<xref:System.Windows.Forms.RichTextBox>。 该示例使用<xref:System.Windows.Forms.Control.MouseDown>事件<xref:System.Windows.Forms.ListBox>启动拖动操作，通过调用<xref:System.Windows.Forms.Control.DoDragDrop%2A>方法。 该示例使用<xref:System.Windows.Forms.Control.DragEnter>事件来确定是否项拖放到<xref:System.Windows.Forms.RichTextBox>是有效的数据类型。 <xref:System.Windows.Forms.Control.DragDrop>事件执行拖动的项到实际删除<xref:System.Windows.Forms.RichTextBox>内当前光标位置处的控件<xref:System.Windows.Forms.RichTextBox>。 此示例需要<xref:System.Windows.Forms.Control.DragDrop>和<xref:System.Windows.Forms.Control.DragEnter>事件已连接到示例中定义的事件处理程序。  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntegralHeight">
      <MemberSignature Language="C#" Value="public bool IntegralHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IntegralHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.IntegralHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property IntegralHeight As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IntegralHeight { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IntegralHeight : bool with get, set" Usage="System.Windows.Forms.ListBox.IntegralHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示控件是否应调整大小以避免只显示项的局部。</summary>
        <value>如果该控件调整大小以便不显示不完整的项，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当此属性设置为`true`，该控件自动调整大小以确保不部分显示项。 如果你想要维护的原始大小<xref:System.Windows.Forms.ListBox>基于窗体的空间要求，将此属性设置为`false`。  
  
 默认情况下，<xref:System.Windows.Forms.ListBox>和<xref:System.Windows.Forms.CheckedListBox>大小是这样的： 它们仅显示整个项目。 如果你想<xref:System.Windows.Forms.ListBox>或<xref:System.Windows.Forms.CheckedListBox>若要完全填充的停靠的区域，设置<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>到`false`。 这将使控件以完全填充区域，但没有完全显示的最后一项。  
  
 如果<xref:System.Windows.Forms.ListBox>不包含任何项，此属性不起作用。  
  
> [!NOTE]
>  整体高度基于高度<xref:System.Windows.Forms.ListBox>，而不是工作区的高度。 因此，当<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>属性设置`true`，项仍可部分显示是否显示滚动条。  
  
> [!NOTE]
>  如果<xref:System.Windows.Forms.ListBox.DrawMode%2A>属性设置为`DrawMode.OwnerDrawVariable`，此属性不起作用。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>和<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>属性，以显示水平滚动条的显示中的所有项文本<xref:System.Windows.Forms.ListBox>控件。 此示例还使用<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>属性以确保项未部分显示的大小由于<xref:System.Windows.Forms.ListBox>控件。 此示例需要<xref:System.Windows.Forms.ListBox>控件，名为`listBox1`，已添加到表单。  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ItemHeight">
      <MemberSignature Language="C#" Value="public virtual int ItemHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ItemHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ItemHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ItemHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ItemHeight : int with get, set" Usage="System.Windows.Forms.ListBox.ItemHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(13)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.ListBox" /> 中项的高度。</summary>
        <value>控件中项的高度（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Forms.ListBox.DrawMode%2A>属性设置为`DrawMode.OwnerDrawFixed`，所有项都具有高度相同。 当<xref:System.Windows.Forms.ListBox.DrawMode%2A>属性设置为`DrawMode.OwnerDrawVariable`、<xref:System.Windows.Forms.ListBox.ItemHeight%2A>属性指定添加到每个项的高度<xref:System.Windows.Forms.ListBox>。 由于为所有者描述的列表中每一项可以具有不同的高度，你可以使用<xref:System.Windows.Forms.ListBox.GetItemHeight%2A>方法以获取中特定项的高度<xref:System.Windows.Forms.ListBox>。 如果你使用<xref:System.Windows.Forms.ListBox.ItemHeight%2A>属性<xref:System.Windows.Forms.ListBox>可变高度的项，此属性将返回第一项高度控件中。  
  
 最大高度<xref:System.Windows.Forms.ListBox>项是 255 像素。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Windows.Forms.ListBox.ItemHeight" /> 属性被设置为小于 0 或大于 255 像素。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.ObjectCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/ObjectCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::ObjectCollection ^ Items { System::Windows::Forms::ListBox::ObjectCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Windows.Forms.ListBox.ObjectCollection" Usage="System.Windows.Forms.ListBox.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.ListBox" /> 的项。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />，表示 <see cref="T:System.Windows.Forms.ListBox" /> 中的项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性使您能够获取对当前存储中的项列表的引用<xref:System.Windows.Forms.ListBox>。 通过此引用，可以将项添加、 删除项，并获取集合中项的计数。 有关可以与项集合执行的任务的详细信息，请参阅<xref:System.Windows.Forms.ListBox.ObjectCollection>类参考主题。  
  
 您还可以操作的项<xref:System.Windows.Forms.ListBox>使用<xref:System.Windows.Forms.ListControl.DataSource%2A>属性。 如果你使用<xref:System.Windows.Forms.ListControl.DataSource%2A>属性将项添加到<xref:System.Windows.Forms.ListBox>，你可以查看中的项<xref:System.Windows.Forms.ListBox>使用<xref:System.Windows.Forms.ListBox.Items%2A>属性，但你无法添加或使用的方法从列表中删除项<xref:System.Windows.Forms.ListBox.ObjectCollection>。  
  
   
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Windows.Forms.ListBox>列中显示多个项，并且可以有多个项在控件的列表中选择的控件。 该示例的代码添加到 50 个项<xref:System.Windows.Forms.ListBox>使用<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>类，然后选择三个项从列表使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。 然后，该代码显示中的值<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>集合 (通过<xref:System.Windows.Forms.ListBox.SelectedItems%2A>属性) 和<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>(通过<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>属性)。 此示例需要的代码是位于并从调用<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MeasureItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MeasureItem As MeasureItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MeasureItemEventHandler ^ MeasureItem;" />
      <MemberSignature Language="F#" Value="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " Usage="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>创建所有者描述的 <see cref="T:System.Windows.Forms.ListBox" /> 和确定列表项的大小时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以创建的事件处理程序以指定的大小绘制之前，项将成为此事件<xref:System.Windows.Forms.ListBox.DrawItem>事件。 事件才会引发时<xref:System.Windows.Forms.ListBox.DrawMode%2A>属性设置为<xref:System.Windows.Forms.DrawMode.OwnerDrawVariable>。  
  
 最大有效高度<xref:System.Windows.Forms.ListBox>项是 255 像素。 设置<xref:System.Windows.Forms.MeasureItemEventArgs.ItemHeight%2A>属性<xref:System.Windows.Forms.MeasureItemEventArgs>到大于 255 时处理此事件可能产生意外的结果的值。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示一个所有者绘制<xref:System.Windows.Forms.ListBox>通过设置<xref:System.Windows.Forms.ListBox.DrawMode%2A>属性<xref:System.Windows.Forms.DrawMode.OwnerDrawVariable>和处理<xref:System.Windows.Forms.ListBox.DrawItem>和<xref:System.Windows.Forms.ListBox.MeasureItem>事件。 它还演示如何设置<xref:System.Windows.Forms.ListBox.BorderStyle%2A>和<xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A>属性，并使用<xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A>方法。  
  
 若要运行此示例，请将其粘贴在导入的空窗体<xref:System.Drawing>命名空间和<xref:System.Windows.Forms>命名空间。 调用`InitializeOwnerDrawnListBox`从窗体的构造函数或<xref:System.Windows.Forms.Form.Load>事件处理方法。  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.ItemHeight" />
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseClick;" />
      <MemberSignature Language="F#" Value="member this.MouseClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户使用鼠标指针单击 <see cref="T:System.Windows.Forms.ListBox" /> 控件时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiColumn">
      <MemberSignature Language="C#" Value="public bool MultiColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiColumn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.MultiColumn" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiColumn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiColumn { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MultiColumn : bool with get, set" Usage="System.Windows.Forms.ListBox.MultiColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Forms.ListBox" /> 是否支持多列。</summary>
        <value>如果 <see cref="T:System.Windows.Forms.ListBox" /> 支持多个列，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 多列<xref:System.Windows.Forms.ListBox>将项放在尽可能多的列所需不必进行垂直滚动。 用户可以使用键盘导航到不是当前可见的列。 设置<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>属性`true`以显示水平滚动条，使用户能够滚动到的可见区域中当前未显示的列<xref:System.Windows.Forms.ListBox>。 值<xref:System.Windows.Forms.ListBox.ColumnWidth%2A>属性确定每个列的宽度。  
  
   
  
## Examples  
 下面的代码示例演示一个简单的两个列<xref:System.Windows.Forms.ListBox>。  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">多列 <see cref="T:System.Windows.Forms.ListBox" /> 的高度不能变化。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
        <altmember cref="P:System.Windows.Forms.ListBox.ColumnWidth" />
      </Docs>
    </Member>
    <Member MemberName="NoMatches">
      <MemberSignature Language="C#" Value="public const int NoMatches = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NoMatches = (-1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.NoMatches" />
      <MemberSignature Language="VB.NET" Value="Public Const NoMatches As Integer  = -1" />
      <MemberSignature Language="C++ CLI" Value="public: int NoMatches = -1;" />
      <MemberSignature Language="F#" Value="val mutable NoMatches : int" Usage="System.Windows.Forms.ListBox.NoMatches" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>指定在搜索过程中没有找到匹配项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回此常量<xref:System.Windows.Forms.ListBox.FindString%2A>， <xref:System.Windows.Forms.ListBox.FindStringExact%2A>，和<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法在搜索中找到匹配的值时。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChangeUICues">
      <MemberSignature Language="C#" Value="protected override void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChangeUICues(class System.Windows.Forms.UICuesEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnChangeUICues (e As UICuesEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnChangeUICues(System::Windows::Forms::UICuesEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnChangeUICues : System.Windows.Forms.UICuesEventArgs -&gt; unit" Usage="listBox.OnChangeUICues e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.UICuesEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.UICuesEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected override void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDataSourceChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDataSourceChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDataSourceChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnDataSourceChanged : EventArgs -&gt; unit" Usage="listBox.OnDataSourceChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ListControl.DataSourceChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayMemberChanged">
      <MemberSignature Language="C#" Value="protected override void OnDisplayMemberChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDisplayMemberChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDisplayMemberChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDisplayMemberChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDisplayMemberChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnDisplayMemberChanged : EventArgs -&gt; unit" Usage="listBox.OnDisplayMemberChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ListControl.DisplayMemberChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit&#xA;override this.OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit" Usage="listBox.OnDrawItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DrawItemEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ListBox.DrawItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListBox.OnDrawItem%2A>方法还允许派生的类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何创建所有者描述<xref:System.Windows.Forms.ListBox>项。 该代码使用<xref:System.Windows.Forms.ListBox.DrawMode%2A>属性指定绘制的项固定大小和<xref:System.Windows.Forms.ListBox.DrawItem>事件以执行到每个项的绘制<xref:System.Windows.Forms.ListBox>。 该示例代码使用的属性和方法<xref:System.Windows.Forms.DrawItemEventArgs>类作为参数传递给事件处理程序来绘制项。 此示例需要<xref:System.Windows.Forms.ListBox>控件称为`listBox1`已添加到窗体，<xref:System.Windows.Forms.ListBox.DrawItem>由示例代码中定义的事件处理程序处理事件。 该示例还要求项已添加到<xref:System.Windows.Forms.ListBox>包括"Apple"、"橙色"和"Plum"按此顺序的文本。  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnFontChanged : EventArgs -&gt; unit" Usage="listBox.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.FontChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="listBox.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>指定已创建窗口句柄的时间，以便可以设置列宽和其他特征。 继承类应调用 <see langword="base.OnHandleCreated" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="listBox.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>被重写以确保正确设置和清除项。 继承控件应调用 <see langword="base.OnHandleDestroyed" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMeasureItem (e As MeasureItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMeasureItem(System::Windows::Forms::MeasureItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit&#xA;override this.OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit" Usage="listBox.OnMeasureItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.MeasureItemEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ListBox.MeasureItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListBox.OnMeasureItem%2A>方法还允许派生的类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnParentChanged : EventArgs -&gt; unit" Usage="listBox.OnParentChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.ParentChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnResize : EventArgs -&gt; unit" Usage="listBox.OnResize e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.Resize" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSelectedIndexChanged : EventArgs -&gt; unit" Usage="listBox.OnSelectedIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedValueChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedValueChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedValueChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedValueChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedValueChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedValueChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSelectedValueChanged : EventArgs -&gt; unit" Usage="listBox.OnSelectedValueChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.ListBox.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>此属性与此类无关。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.Padding" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.ListBox.Padding" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberSignature Language="F#" Value="member this.Paint : System.Windows.Forms.PaintEventHandler " Usage="member this.Paint : System.Windows.Forms.PaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在绘制 <see cref="T:System.Windows.Forms.ListBox" /> 控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredHeight">
      <MemberSignature Language="C#" Value="public int PreferredHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PreferredHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.PreferredHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PreferredHeight { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredHeight : int" Usage="System.Windows.Forms.ListBox.PreferredHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.ListBox" /> 中所有项的组合高度。</summary>
        <value>控件中所有项的组合高度（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性使您能够确定窗体高度，<xref:System.Windows.Forms.ListBox>需要进行大小调整到，为了在列表中显示可用的每个项并避免显示垂直滚动条。 如果中的项量<xref:System.Windows.Forms.ListBox>大，则使用的值的控件的大小调整<xref:System.Windows.Forms.ListBox.PreferredHeight%2A>属性可能会导致<xref:System.Windows.Forms.ListBox>进行大小调整窗体在客户端区之外或<xref:System.Windows.Forms.ListBox>容器。  
  
   
  
## Examples  
 下面的代码示例演示如何设置<xref:System.Windows.Forms.Control.Size%2A>属性<xref:System.Windows.Forms.ListBox>基于值<xref:System.Windows.Forms.ListBox.PreferredHeight%2A>属性，以便显示中的所有项<xref:System.Windows.Forms.ListBox>无需使用滚动条。 此示例需要<xref:System.Windows.Forms.ListBox>控件，名为`listBox1`，已添加到表单。  
  
 [!code-cpp[ListBox.PreferredHeight#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.PreferredHeight/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.PreferredHeight#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.PreferredHeight/CS/form1.cs#1)]
 [!code-vb[ListBox.PreferredHeight#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.PreferredHeight/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Height" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberSignature Language="F#" Value="override this.Refresh : unit -&gt; unit" Usage="listBox.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>强制控件使其工作区无效并立即重绘自己和任何子控件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItem">
      <MemberSignature Language="C#" Value="protected override void RefreshItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RefreshItem : int -&gt; unit" Usage="listBox.RefreshItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要刷新的元素的从零开始的索引。</param>
        <summary>刷新指定索引处的项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.ListControl.DisplayMember%2A>属性是组和分配给数据源中的属性<xref:System.Windows.Forms.ListControl.DisplayMember%2A>更改，将使用<xref:System.Windows.Forms.ListBox.RefreshItem%2A>方法来更新中的值<xref:System.Windows.Forms.ListBox>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItems">
      <MemberSignature Language="C#" Value="protected override void RefreshItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItems();" />
      <MemberSignature Language="F#" Value="override this.RefreshItems : unit -&gt; unit" Usage="listBox.RefreshItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>刷新所有 <see cref="T:System.Windows.Forms.ListBox" /> 项并为其检索新字符串。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RescaleConstantsForDpi">
      <MemberSignature Language="C#" Value="protected override void RescaleConstantsForDpi (int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RescaleConstantsForDpi(int32 deviceDpiOld, int32 deviceDpiNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RescaleConstantsForDpi(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RescaleConstantsForDpi (deviceDpiOld As Integer, deviceDpiNew As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="F#" Value="override this.RescaleConstantsForDpi : int * int -&gt; unit" Usage="listBox.RescaleConstantsForDpi (deviceDpiOld, deviceDpiNew)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceDpiOld" Type="System.Int32" />
        <Parameter Name="deviceDpiNew" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="deviceDpiOld">更改前的 DPI 值。</param>
        <param name="deviceDpiNew">更改后的 DPI 值。</param>
        <summary>发生 DPI 更改时，提供用于重新缩放控件的常数。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public override void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetBackColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResetBackColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResetBackColor();" />
      <MemberSignature Language="F#" Value="override this.ResetBackColor : unit -&gt; unit" Usage="listBox.ResetBackColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="P:System.Windows.Forms.Control.BackColor" /> 属性重置为其默认值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public override void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetForeColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResetForeColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResetForeColor();" />
      <MemberSignature Language="F#" Value="override this.ResetForeColor : unit -&gt; unit" Usage="listBox.ResetForeColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="P:System.Windows.Forms.Control.ForeColor" /> 属性重置为其默认值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.ListBox.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示由控件显示的文本是否从右向左显示。</summary>
        <value>
          <see cref="T:System.Windows.Forms.RightToLeft" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性使你菜单以支持写入从右到左的语言。 当此属性设置为`true`，项文本显示从右到左而不是从左到右的方法的默认值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected override void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ScaleControl (factor As SizeF, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ScaleControl(System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.ScaleControl : System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="listBox.ScaleControl (factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="factor">控件高度和宽度的缩放因子。</param>
        <param name="specified">一个 <see cref="T:System.Windows.Forms.BoundsSpecified" /> 值，指定在定义控件的大小和位置时要使用的控件边界。</param>
        <summary>缩放控件的位置、大小、空白和边距。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAlwaysVisible">
      <MemberSignature Language="C#" Value="public bool ScrollAlwaysVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollAlwaysVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ScrollAlwaysVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollAlwaysVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScrollAlwaysVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollAlwaysVisible : bool with get, set" Usage="System.Windows.Forms.ListBox.ScrollAlwaysVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否任何时候都显示垂直滚动条。</summary>
        <value>如果应始终显示垂直滚动条，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A>属性指示是否始终显示垂直滚动条，即使中的项的数目<xref:System.Windows.Forms.ListBox>不需要显示垂直滚动条。 默认情况下，<xref:System.Windows.Forms.ListBox>在有足够一定要显示的项时，只显示垂直滚动条。 对于多列<xref:System.Windows.Forms.ListBox>、<xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A>属性指示是否显示水平滚动条。 垂直滚动条计算机对于多列而不考虑此属性的值将永远不会显示<xref:System.Windows.Forms.ListBox>。  
  
   
  
## Examples  
 下面的代码示例演示一个所有者绘制<xref:System.Windows.Forms.ListBox>通过设置<xref:System.Windows.Forms.ListBox.DrawMode%2A>属性`OwnerDrawVariable`值和处理<xref:System.Windows.Forms.ListBox.DrawItem>和<xref:System.Windows.Forms.ListBox.MeasureItem>事件。 它还演示如何设置<xref:System.Windows.Forms.ListBox.BorderStyle%2A>和<xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A>属性，并使用<xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A>方法。  
  
 若要运行此示例，请将其粘贴在导入的空窗体<xref:System.Drawing>命名空间和<xref:System.Windows.Forms>命名空间。 调用`InitializeOwnerDrawnListBox`从窗体的构造函数或<xref:System.Windows.Forms.Form.Load>事件处理方法。  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public override int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndex" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int SelectedIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedIndex : int with get, set" Usage="System.Windows.Forms.ListBox.SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.ListBox" /> 中当前选定项的从零开始的索引。</summary>
        <value>当前选定项的从零开始的索引。 如果未选定任何项，则返回值为负一 (-1)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于标准<xref:System.Windows.Forms.ListBox>，你可以使用此属性来确定在选定的项的索引<xref:System.Windows.Forms.ListBox>。 如果<xref:System.Windows.Forms.ListBox.SelectionMode%2A>属性<xref:System.Windows.Forms.ListBox>设置为`SelectionMode.MultiSimple`或`SelectionMode.MultiExtended`(指示多选<xref:System.Windows.Forms.ListBox>) 并在列表中选择多个项目，此属性可以返回任意选定项的索引。  
  
 若要检索包含的所有索引的集合在多重选择中选择项目<xref:System.Windows.Forms.ListBox>，使用<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>属性。 如果你想要获取中当前选定的项<xref:System.Windows.Forms.ListBox>，使用<xref:System.Windows.Forms.ListBox.SelectedItem%2A>属性。 此外，你可以使用<xref:System.Windows.Forms.ListBox.SelectedItems%2A>属性来获取多个选定内容中所有选定的项目<xref:System.Windows.Forms.ListBox>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>具有属性<xref:System.Windows.Forms.ListBox.TopIndex%2A>属性以将当前所选的项移动到中的显示区域的项列表的顶部<xref:System.Windows.Forms.ListBox>。 该示例还演示了如何删除使用项<xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType>类，以及如何清除所有项选择使用<xref:System.Windows.Forms.ListBox.ClearSelected%2A>方法。 代码首先移动当前选定的项<xref:System.Windows.Forms.ListBox>到列表的顶部。 然后，代码中移除当前选定项之前的所有项并清除中的所有选择<xref:System.Windows.Forms.ListBox>。 此示例需要<xref:System.Windows.Forms.ListBox>包含项添加到窗体和项是当前在中选择<xref:System.Windows.Forms.ListBox>。  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的值小于 -1，或者大于或等于项的计数。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Windows.Forms.ListBox.SelectionMode" /> 属性设置为 <see langword="None" />。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.SelectedIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedIndexChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectedIndexChanged : EventHandler " Usage="member this.SelectedIndexChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="P:System.Windows.Forms.ListBox.SelectedIndex" /> 属性或 <see cref="P:System.Windows.Forms.ListBox.SelectedIndices" /> 集合更改后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以创建此事件来确定一个事件处理程序中的所选的索引<xref:System.Windows.Forms.ListBox>已更改。 这一点可能很有用，当您需要在基于中的当前选择其他控件中显示信息时<xref:System.Windows.Forms.ListBox>。 可以使用此事件的事件处理程序以加载其他控件中的信息。  
  
 如果<xref:System.Windows.Forms.ListBox.SelectionMode%2A>属性设置为<xref:System.Windows.Forms.SelectionMode.MultiSimple?displayProperty=nameWithType>或<xref:System.Windows.Forms.SelectionMode.MultiExtended?displayProperty=nameWithType>，对进行任何更改<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>集合，包括删除某个项从所选内容，将引发此事件。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>事件来搜索并选择在不同的一项<xref:System.Windows.Forms.ListBox>控件。 该示例使用<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>事件来确定何时中的选定的项<xref:System.Windows.Forms.ListBox>更改。 然后，代码示例将读取的项使用的文本<xref:System.Windows.Forms.ListBox.SelectedItem%2A>属性和调用<xref:System.Windows.Forms.ListBox.FindString%2A>方法在其他<xref:System.Windows.Forms.ListBox>使用返回的文本<xref:System.Windows.Forms.ListBox.SelectedItem%2A>中第一个<xref:System.Windows.Forms.ListBox>。 如果另一部分中找到的项<xref:System.Windows.Forms.ListBox>，选定了项。 此示例要求将两个<xref:System.Windows.Forms.ListBox>控件，名为`listBox1`和`listBox2`，已添加到窗体，同时<xref:System.Windows.Forms.ListBox>控件包含相同的项。 该示例还要求该示例中定义的事件处理方法已连接到<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>事件`listBox1`。  
  
 [!code-cpp[ListBox.SelectedIndexChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedIndices As ListBox.SelectedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::SelectedIndexCollection ^ SelectedIndices { System::Windows::Forms::ListBox::SelectedIndexCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedIndices : System.Windows.Forms.ListBox.SelectedIndexCollection" Usage="System.Windows.Forms.ListBox.SelectedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个集合，该集合包含 <see cref="T:System.Windows.Forms.ListBox" /> 中所有当前选定项的从零开始的索引。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" />，包含控件中当前选定项的索引。 如果当前没有选定的项，则返回空 <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 选择的多个<xref:System.Windows.Forms.ListBox>，此属性返回一个包含在中选择的所有项的索引的集合<xref:System.Windows.Forms.ListBox>。 对于单选择<xref:System.Windows.Forms.ListBox>，此属性返回一个包含单个元素包含在唯一选定的项的索引的集合<xref:System.Windows.Forms.ListBox>。 有关如何操作的集合的项的详细信息，请参阅<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>。  
  
 <xref:System.Windows.Forms.ListBox>类提供多种方式来引用所选的项目。 而不是使用<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>属性来获取当前选定项的索引位置中单项选择<xref:System.Windows.Forms.ListBox>，你可以使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>属性。 如果你想要获取中当前选定的项<xref:System.Windows.Forms.ListBox>，而不是项的索引位置，使用<xref:System.Windows.Forms.ListBox.SelectedItem%2A>属性。 此外，你可以使用<xref:System.Windows.Forms.ListBox.SelectedItems%2A>属性，如果你想要获取多个选定内容中所有选定的项目<xref:System.Windows.Forms.ListBox>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.FindString%2A>方法搜索中的项的搜索文本的所有实例<xref:System.Windows.Forms.ListBox>。 此示例使用的版本<xref:System.Windows.Forms.ListBox.FindString%2A>方法，可用于指定从其执行中的所有项持续搜索的起始搜索索引<xref:System.Windows.Forms.ListBox>。 该示例还演示如何确定何时<xref:System.Windows.Forms.ListBox.FindString%2A>方法开始后到达要阻止的递归搜索的项列表的底部，从列表的顶部搜索。 在找到项后<xref:System.Windows.Forms.ListBox>，它们使用选择<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。  
  
 [!code-cpp[ListBox.FindString#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public object SelectedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SelectedItem { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedItem : obj with get, set" Usage="System.Windows.Forms.ListBox.SelectedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.ListBox" /> 中的当前选定项。</summary>
        <value>表示控件中当前选定内容的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于标准<xref:System.Windows.Forms.ListBox>，你可以使用此属性来确定在选定了哪个项<xref:System.Windows.Forms.ListBox>。 如果<xref:System.Windows.Forms.ListBox.SelectionMode%2A>属性<xref:System.Windows.Forms.ListBox>设置为`SelectionMode.MultiSimple`或`SelectionMode.MultiExtended`(指示多选<xref:System.Windows.Forms.ListBox>) 并在列表中选择多个项，则此属性可以返回任意选定的项。  
  
 若要检索包含多个选定内容中的所有选定的项的集合<xref:System.Windows.Forms.ListBox>，使用<xref:System.Windows.Forms.ListBox.SelectedItems%2A>属性。 如果你想要获取在当前选定项的索引位置<xref:System.Windows.Forms.ListBox>，使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>属性。 此外，你可以使用<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>属性来获取多选中的所有所选的索引<xref:System.Windows.Forms.ListBox>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>事件来搜索并选择在不同的一项<xref:System.Windows.Forms.ListBox>控件。 该示例使用<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>事件来确定何时中的选定的项<xref:System.Windows.Forms.ListBox>更改。 然后，代码示例将读取的项使用的文本<xref:System.Windows.Forms.ListBox.SelectedItem%2A>属性和调用<xref:System.Windows.Forms.ListBox.FindString%2A>方法在其他<xref:System.Windows.Forms.ListBox>使用返回的文本<xref:System.Windows.Forms.ListBox.SelectedItem%2A>中第一个<xref:System.Windows.Forms.ListBox>。 如果另一部分中找到的项<xref:System.Windows.Forms.ListBox>，选定了项。 此示例要求将两个<xref:System.Windows.Forms.ListBox>控件，名为`listBox1`和`listBox2`，已添加到窗体，同时<xref:System.Windows.Forms.ListBox>控件包含相同的项。 该示例还要求该示例中定义的事件处理方法已连接到<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>事件`listBox1`。  
  
 [!code-cpp[ListBox.SelectedIndexChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedObjectCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedObjectCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedItems As ListBox.SelectedObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::SelectedObjectCollection ^ SelectedItems { System::Windows::Forms::ListBox::SelectedObjectCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedItems : System.Windows.Forms.ListBox.SelectedObjectCollection" Usage="System.Windows.Forms.ListBox.SelectedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含 <see cref="T:System.Windows.Forms.ListBox" /> 中当前选定项的集合。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListBox.SelectedObjectCollection" />，包含控件中的当前选定项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 选择的多个<xref:System.Windows.Forms.ListBox>，此属性返回包含在中选择的所有项的集合<xref:System.Windows.Forms.ListBox>。 对于单选择<xref:System.Windows.Forms.ListBox>，此属性返回一个包含单个元素包含在唯一选定的项的集合<xref:System.Windows.Forms.ListBox>。 有关如何操作的集合的项的详细信息，请参阅<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>。  
  
 <xref:System.Windows.Forms.ListBox>类提供多种方式来引用所选的项目。 而不是使用<xref:System.Windows.Forms.ListBox.SelectedItems%2A>属性来获取单项选择中的当前选定的项<xref:System.Windows.Forms.ListBox>，你可以使用<xref:System.Windows.Forms.ListBox.SelectedItem%2A>属性。 如果你想要获取中当前选定的项的索引位置<xref:System.Windows.Forms.ListBox>，而不是针对项本身，使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>属性。 此外，你可以使用<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>属性，如果你想要获取所有选定项的索引位置中多选<xref:System.Windows.Forms.ListBox>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.SelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SelectionMode SelectionMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectionMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SelectionMode As SelectionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::SelectionMode SelectionMode { System::Windows::Forms::SelectionMode get(); void set(System::Windows::Forms::SelectionMode value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionMode : System.Windows.Forms.SelectionMode with get, set" Usage="System.Windows.Forms.ListBox.SelectionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Windows.Forms.ListBox" /> 中选择项所用的方法。</summary>
        <value>
          <see cref="T:System.Windows.Forms.SelectionMode" /> 值之一。 默认值为 <see langword="SelectionMode.One" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.SelectionMode%2A>属性使您能够确定在多少个项<xref:System.Windows.Forms.ListBox>可以一次选择用户和用户如何建立多个选择。 当<xref:System.Windows.Forms.ListBox.SelectionMode%2A>属性设置为`SelectionMode.MultiExtended`、 按下 shift 键并单击鼠标或按 SHIFT 和箭头键 （向上箭头、 向下箭头、 向左键和向右箭头） 之一扩展到当前项从以前选择的项选择范围. 按住 ctrl 键并单击鼠标选择或取消选择列表中的项。 当属性设置为`SelectionMode.MultiSimple`、 鼠标单击或按空格键选择或取消选择列表中的项。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.GetSelected%2A>方法来确定中的哪些项<xref:System.Windows.Forms.ListBox>才能选择未选定的项，并取消选择选定项选择。 该示例还演示了如何使用<xref:System.Windows.Forms.ListBox.SelectionMode%2A>属性来启用<xref:System.Windows.Forms.ListBox>若要有多个选择项，并使用<xref:System.Windows.Forms.ListBox.Sorted%2A>属性来演示如何在中的项进行排序<xref:System.Windows.Forms.ListBox>自动。 此示例需要<xref:System.Windows.Forms.ListBox>命名`listBox1`，已添加到窗体，`InitializeMyListBox`示例中定义的方法调用从<xref:System.Windows.Forms.Form.Load>窗体的事件。  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">分配的值不是 <see cref="T:System.Windows.Forms.SelectionMode" /> 值之一。</exception>
        <altmember cref="T:System.Windows.Forms.SelectionMode" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetBoundsCore (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetBoundsCore(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="listBox.SetBoundsCore (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">控件的新 <see cref="P:System.Windows.Forms.Control.Left" /> 属性值。</param>
        <param name="y">控件的新 <see cref="P:System.Windows.Forms.Control.Top" /> 属性值。</param>
        <param name="width">控件的新 <see cref="P:System.Windows.Forms.Control.Width" /> 属性值。</param>
        <param name="height">控件的新 <see cref="P:System.Windows.Forms.Control.Height" /> 属性值。</param>
        <param name="specified">
          <see cref="T:System.Windows.Forms.BoundsSpecified" /> 值的按位组合。</param>
        <summary>设置 <see cref="T:System.Windows.Forms.ListBox" /> 控件的指定边界。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 高度<xref:System.Windows.Forms.ListBox>控制增加和减少了的倍数<xref:System.Windows.Forms.ListBox.ItemHeight%2A>属性。 如果高度是一个数字，不是的倍数<xref:System.Windows.Forms.ListBox.ItemHeight%2A>的高度<xref:System.Windows.Forms.ListBox>将更改的最大倍数而小于高度。  
  
 通常情况下，随其当前值一起传递的参数对应于指定的参数中未包括的边界。 例如， `height`， `width`，或`x`或`y`属性<xref:System.Windows.Forms.Control.Location%2A>可以随对控件的当前实例的引用传递属性。 但是，所有传入的值遵守并应用于控件。  
  
 `specified`参数表示元素的控件<xref:System.Windows.Forms.Control.Bounds%2A>更改你的应用程序。 例如，如果你更改<xref:System.Windows.Forms.Control.Size%2A>的控件，`specified`参数值是<xref:System.Windows.Forms.BoundsSpecified.Size>。 但是，如果<xref:System.Windows.Forms.Control.Size%2A>在响应中调整<xref:System.Windows.Forms.Control.Dock%2A>要设置属性`specified`参数值是<xref:System.Windows.Forms.BoundsSpecified.None>。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />在派生类中，一定要调用基类的<see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />方法，以强制要更改的控件的边界。派生的类可以添加到的大小限制<see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetItemCore">
      <MemberSignature Language="C#" Value="protected override void SetItemCore (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemCore(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemCore(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItemCore (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItemCore(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.SetItemCore : int * obj -&gt; unit" Usage="listBox.SetItemCore (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">对象的数组索引。</param>
        <param name="value">对象。</param>
        <summary>在派生类中设置具有指定索引的对象。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItemsCore">
      <MemberSignature Language="C#" Value="protected override void SetItemsCore (System.Collections.IList value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemsCore(class System.Collections.IList value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemsCore(System.Collections.IList)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItemsCore (value As IList)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItemsCore(System::Collections::IList ^ value);" />
      <MemberSignature Language="F#" Value="override this.SetItemsCore : System.Collections.IList -&gt; unit" Usage="listBox.SetItemsCore value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="value">要插入控件中的对象的数组。</param>
        <summary>清除 <see cref="T:System.Windows.Forms.ListBox" /> 的内容，并向控件中添加指定项。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSelected">
      <MemberSignature Language="C#" Value="public void SetSelected (int index, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelected(int32 index, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetSelected(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSelected (index As Integer, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSelected(int index, bool value);" />
      <MemberSignature Language="F#" Value="member this.SetSelected : int * bool -&gt; unit" Usage="listBox.SetSelected (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">
          <see cref="T:System.Windows.Forms.ListBox" /> 中要选择或清除对其选定的项的从零开始的索引。</param>
        <param name="value">如果为 <see langword="true" />，则选择指定的项；否则为 <see langword="false" />。</param>
        <summary>选择或清除对 <see cref="T:System.Windows.Forms.ListBox" /> 中指定项的选定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用此属性在多选中设置的项选择范围<xref:System.Windows.Forms.ListBox>。 若要单项选择中选择一项<xref:System.Windows.Forms.ListBox>，使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Windows.Forms.ListBox>列中显示多个项，并且可以有多个项在控件的列表中选择的控件。 该示例的代码添加到 50 个项<xref:System.Windows.Forms.ListBox>使用<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>类，然后选择三个项从列表使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。 然后，该代码显示中的值<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>集合 (通过<xref:System.Windows.Forms.ListBox.SelectedItems%2A>属性) 和<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>(通过<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>属性)。 此示例需要的代码是位于并从调用<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定索引位于有效值范围之外。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListBox.SelectionMode" /> 属性已设置为 <see langword="None" />。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="protected virtual void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Sort" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Sort();" />
      <MemberSignature Language="F#" Value="abstract member Sort : unit -&gt; unit&#xA;override this.Sort : unit -&gt; unit" Usage="listBox.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>对 <see cref="T:System.Windows.Forms.ListBox" /> 中的项排序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.Sort%2A> 强制回收后，将每个项添加回发到自身，如果<xref:System.Windows.Forms.ListBox.Sorted%2A>属性是`true`。 每个项会插入到正确的位置。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.Sort%2A>方法。 此示例演示从继承<xref:System.Windows.Forms.ListBox>类并重写<xref:System.Windows.Forms.ListBox.Sort%2A>中派生的类来执行用户定义的排序方法。 若要运行此示例中的空窗体粘贴以下代码。  
  
 [!code-cpp[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>你可以提供自己的排序例程派生类中重写此方法。访问的重写结果<see cref="M:System.Windows.Forms.ListBox.Sort" />方法通过设置<see cref="P:System.Windows.Forms.ListBox.Sorted" />属性<see langword="true" />。当将项添加到<see cref="T:System.Windows.Forms.ListBox" />，它是第一次的项进行排序，然后添加新项更加高效。</para>
        </block>
        <altmember cref="P:System.Windows.Forms.ListBox.Sorted" />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public bool Sorted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sorted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Sorted" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Sorted { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Sorted : bool with get, set" Usage="System.Windows.Forms.ListBox.Sorted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Forms.ListBox" /> 中的项是否按字母顺序排序。</summary>
        <value>如果排序控件中的项，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.ListBox.Sorted%2A>属性进行自动排序字符串按字母顺序在<xref:System.Windows.Forms.ListBox>。 将项目添加到一个经过排序<xref:System.Windows.Forms.ListBox>，项目被移动到已排序的列表中的适当位置。 当将项添加到<xref:System.Windows.Forms.ListBox>，它是第一次的项进行排序，然后添加新项更加高效。  
  
 A<xref:System.Windows.Forms.ListBox>与其<xref:System.Windows.Forms.ListBox.Sorted%2A>设置为`true`不应绑定到数据使用<xref:System.Windows.Forms.ListControl.DataSource%2A>属性。 显示排序中的数据绑定<xref:System.Windows.Forms.ListBox>，你应将绑定到支持排序的数据源并具有提供的排序的数据源。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.GetSelected%2A>方法来确定中的哪些项<xref:System.Windows.Forms.ListBox>才能选择未选定的项，并取消选择选定项选择。 该示例还演示了如何使用<xref:System.Windows.Forms.ListBox.SelectionMode%2A>属性来启用<xref:System.Windows.Forms.ListBox>若要有多个选择项，并使用<xref:System.Windows.Forms.ListBox.Sorted%2A>属性来演示如何在中的项进行排序<xref:System.Windows.Forms.ListBox>自动。 此示例需要<xref:System.Windows.Forms.ListBox>命名`listBox1`，已添加到窗体，`InitializeMyListBox`示例中定义的方法调用从<xref:System.Windows.Forms.Form.Load>窗体的事件。  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.ListBox.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或搜索 <see cref="T:System.Windows.Forms.ListBox" /> 中当前选定项的文本。</summary>
        <value>控件中当前选定项的文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当此属性的值设置为一个字符串值，<xref:System.Windows.Forms.ListBox>中项的搜索<xref:System.Windows.Forms.ListBox>的匹配指定的文本，并且选择的项。 你还可以使用此属性来确定中当前选定的项<xref:System.Windows.Forms.ListBox>。 如果<xref:System.Windows.Forms.ListBox.SelectionMode%2A>属性<xref:System.Windows.Forms.ListBox>设置为`SelectionMode.MultiExtended`，此属性返回的第一个选定项的文本。 如果<xref:System.Windows.Forms.ListBox.SelectionMode%2A>属性<xref:System.Windows.Forms.ListBox>未设置为`SelectionMode.None`，此属性返回的第一个选定项的文本。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler " Usage="member this.TextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.ListBox.Text" /> 属性更改时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopIndex">
      <MemberSignature Language="C#" Value="public int TopIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TopIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.TopIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TopIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TopIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TopIndex : int with get, set" Usage="System.Windows.Forms.ListBox.TopIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.ListBox" /> 中第一个可见项的索引。</summary>
        <value>控件中第一个可见项的从零开始的索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最初，使用的索引位置的项零 (0) 位于设置的可见区域的顶部<xref:System.Windows.Forms.ListBox>。 如果内容<xref:System.Windows.Forms.ListBox>已经滚动，另一个项目可能会在控件的显示区域的顶部。 你可以使用此属性获取中的索引<xref:System.Windows.Forms.ListBox.ObjectCollection>为<xref:System.Windows.Forms.ListBox>在控件的可见区域的顶部当前所处的项。 你还可以使用此属性来定位控件的可见区域的顶部列表中的项。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>具有属性<xref:System.Windows.Forms.ListBox.TopIndex%2A>属性以将当前所选的项移动到中的显示区域的项列表的顶部<xref:System.Windows.Forms.ListBox>。 该示例还演示了如何删除使用项<xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType>类，以及如何清除所有项选择使用<xref:System.Windows.Forms.ListBox.ClearSelected%2A>方法。 代码首先移动当前选定的项<xref:System.Windows.Forms.ListBox>到列表的顶部。 然后，代码中移除当前选定项之前的所有项并清除中的所有选择<xref:System.Windows.Forms.ListBox>。 此示例需要<xref:System.Windows.Forms.ListBox>包含项添加到窗体和项是当前在中选择<xref:System.Windows.Forms.ListBox>。  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="listBox.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回 <see cref="T:System.Windows.Forms.ListBox" /> 的字符串表示形式。</summary>
        <returns>一个字符串，它描述控件类型、<see cref="T:System.Windows.Forms.ListBox" /> 控件中的项计数，如果该计数不为 0，则还描述 <see cref="T:System.Windows.Forms.ListBox" /> 中第一项的 Text 属性。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCustomTabOffsets">
      <MemberSignature Language="C#" Value="public bool UseCustomTabOffsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseCustomTabOffsets" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCustomTabOffsets As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCustomTabOffsets { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseCustomTabOffsets : bool with get, set" Usage="System.Windows.Forms.ListBox.UseCustomTabOffsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，它指示 <see cref="T:System.Windows.Forms.ListBox" /> 在通过使用 <see cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" /> 整数数组绘制字符串时是否识别并展开制表符。</summary>
        <value>如果 <see cref="T:System.Windows.Forms.ListBox" /> 识别并展开制表符，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      </Docs>
    </Member>
    <Member MemberName="UseTabStops">
      <MemberSignature Language="C#" Value="public bool UseTabStops { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseTabStops" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseTabStops" />
      <MemberSignature Language="VB.NET" Value="Public Property UseTabStops As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseTabStops { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseTabStops : bool with get, set" Usage="System.Windows.Forms.ListBox.UseTabStops" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Forms.ListBox" /> 在绘制其字符串时是否可识别和展开制表符。</summary>
        <value>如果控件可展开制表符，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Windows.Forms.ListBox>显示带有制表符的项。  
  
 [!code-cpp[ListBox.UseTabStops#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.UseTabStops/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.UseTabStops#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.UseTabStops/CS/form1.cs#1)]
 [!code-vb[ListBox.UseTabStops#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.UseTabStops/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于操作与非托管代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WmReflectCommand">
      <MemberSignature Language="C#" Value="protected virtual void WmReflectCommand (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WmReflectCommand(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WmReflectCommand(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WmReflectCommand (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WmReflectCommand(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WmReflectCommand :  -&gt; unit&#xA;override this.WmReflectCommand :  -&gt; unit" Usage="listBox.WmReflectCommand m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">顶级窗口发送到 <see cref="T:System.Windows.Forms.Message" /> 控件的 <see cref="T:System.Windows.Forms.ListBox" />。</param>
        <summary>处理 <see cref="T:System.Windows.Forms.ListView" /> 控件从顶级窗口中接收的命令消息。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc :  -&gt; unit" Usage="listBox.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">一个 Windows 消息对象。</param>
        <summary>列表的窗口过程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 继承类可以重写此处可添加额外的功能，但应调用<xref:System.Windows.Forms.ListBox.WndProc%2A>基本类，以确保列表继续正常工作的方法。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于操作与非托管代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>