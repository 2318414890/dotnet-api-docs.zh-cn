<Type Name="CatalogPartCollection" FullName="System.Web.UI.WebControls.WebParts.CatalogPartCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="277fb34684370b6b938807b17e08074eccf1e46d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30590751" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CatalogPartCollection : System.Collections.ReadOnlyCollectionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CatalogPartCollection extends System.Collections.ReadOnlyCollectionBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CatalogPartCollection&#xA;Inherits ReadOnlyCollectionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class CatalogPartCollection sealed : System::Collections::ReadOnlyCollectionBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Collections.ReadOnlyCollectionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 控件的集合，这些控件用于提供最终用户可添加到网页的 Web 服务器控件目录。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>类是只读集合的<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件，通常由<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>区域用来跟踪的一套<xref:System.Web.UI.WebControls.WebParts.CatalogPart>区域包含的控件。  
  
 当 Web 部件页进入目录模式时，该区域创建一个新<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象组成<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件。 每个<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件的集合中可以包含零个或多个 Web 服务器控件，可用的服务器控件目录中的窗体中显示了这些对引用。  
  
 你可以创建<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>的为你自己的编程使用，例如，你需要执行大量操作的一组时的控件集合<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件。 即使<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象是只读的你可以以编程方式更改到集合中引用的基础控件。  
  
   
  
## Examples  
 下面的代码示例演示的几种用法<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>类。 有于此代码示例的四个部分：  
  
-   一个用户控件，使你能够更改 Web 部件页面上的显示模式。  
  
-   自定义的类<xref:System.Web.UI.WebControls.WebParts.WebPart>控件名为`TextDisplayWebPart`，该网页中引用，而包含在一个<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件。  
  
-   引用的网页`TextDisplayWebPart`控件，则包含<xref:System.Web.UI.WebControls.WebParts.CatalogZone>具有两个控件<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件从该区域，在设置声明的 Web 部件控件和包含事件驱动的代码来创建和操作<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象。  
  
-   在浏览器中加载时的代码示例的工作原理的说明。  
  
 下面的代码示例的第一部分是用户控件。 用户控件的源代码来自于另一个主题。 对于此代码示例正常工作，你需要获取该用户控件从.ascx 文件[演练： 在 Web 部件页面上更改显示模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)主题，并在此代码示例的.aspx 页所在的文件夹中的文件的位置。  
  
 下面的代码示例的第二个部分是`TextDisplayWebPart`控件。 若要运行的代码示例，必须编译此源代码。 你可以显式编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以在站点的 App_Code 文件夹中，其中它将动态编译运行时将源代码。 有关演示的编译这两种方法的演练，请参阅[演练： 开发和使用自定义 Web 服务器控件](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。 请注意该控件具有名为的属性`ContentText`; 此属性保留用户在文本框中输入的值。  
  
 [!code-csharp[WebParts_CatalogPartCollection_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/textdisplaywebpart.cs#3)]
 [!code-vb[WebParts_CatalogPartCollection_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/textdisplaywebpart.vb#3)]  
  
 下面的代码示例的第三部分是网页。 请注意，`<asp:catalogzone>`页元素包含两个声明<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件。 这些控件成为自定义的一部分<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>时创建的对象`Button1_Click`方法执行。 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>控件包含已之前关闭由用户在运行时的 Web 服务器控件。 中的控件<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>控件可以添加回页面。 <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>控件包含自定义声明`TextDisplayWebPart`控件。 目录模式页面时，用户可以为添加`TextDisplayWebPart`控制到页，以便它可在普通浏览模式中。  
  
 [!code-aspx-csharp[WebParts_CatalogPartCollection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/catalogpartcollectioncs.aspx#1)]
 [!code-aspx-vb[WebParts_CatalogPartCollection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/catalogpartcollectionvb.aspx#1)]  
  
 当加载浏览器中时，你可以将页切换到目录模式下通过选择**目录**中**显示模式**下拉列表控件。 你可以添加自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>控件添加到页上通过选择它旁边的复选框并单击**添加**。 单击**关闭**来返回到浏览模式的页。 在控件上你刚添加，如果你单击谓词菜单 （标题栏中显示的向下箭头），然后单击**关闭**，从页面中删除该控件并将其添加到<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>控件。 使页返回到目录模式，并单击**页目录**链接可查看的内容<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>控件。 请注意，现在关闭的控件显示存在。 单击**显示 CatalogPart 属性**按钮访问<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象，并显示所包含的某些属性<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>包含区域<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件通常是创建控件<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象，通过<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A>方法。 但是，你也可以创建你自己<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>编程有其他用途的对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatalogPartCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogPartCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CatalogPartCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> 类的新的空实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.%23ctor%2A>构造函数初始化的空实例<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>类。 内部使用此构造函数重载<xref:System.Web.UI.WebControls.WebParts.CatalogZone>类在其<xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A>方法来创建一个空集合对象。 然后，区域创建的所有实例<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件在子区域模板中，声明并使用集合的内部方法来添加它们。  
  
 不能使用此重载<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.%23ctor%2A>构造函数来创建的新实例<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>并添加<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件添加到它。 你必须使用的其他重载之一<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.%23ctor%2A>构造函数相反。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatalogPartCollection (System.Collections.ICollection catalogParts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ICollection catalogParts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogPartCollection.#ctor(System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (catalogParts As ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CatalogPartCollection(System::Collections::ICollection ^ catalogParts);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalogParts" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="catalogParts">
          <see cref="T:System.Collections.ICollection" /> 控件的 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />。</param>
        <summary>通过传入 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> 控件的 <see cref="T:System.Collections.ICollection" /> 集合，初始化 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.%23ctor%2A>构造函数初始化的实例<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>类，并传入的集合<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件。 这是一个重载<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.%23ctor%2A>可用于创建一个新的构造函数<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象，并添加<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件添加到它。  
  
 尽管<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>该构造函数创建的实例为只读，则仍可以访问个人<xref:System.Web.UI.WebControls.WebParts.CatalogPart>以编程方式控制集合中并调用其属性和方法。  
  
 使用此构造函数的一个常见方案是如果你想要执行批处理操作时的整个集<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件，如更改内容、 外观或一组相关的项的位置。  
  
   
  
## Examples  
 下面的代码示例演示如何创建自定义<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>，并执行批处理操作，若要更改单个<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控制集合中，即使它是只读的也是如此。 有关所需要运行该示例的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>类概述主题。  
  
 中的代码`Button1_Click`方法创建<xref:System.Collections.ArrayList>对象，将添加两个<xref:System.Web.UI.WebControls.WebParts.CatalogPart>网页中的对象，控制，然后创建一个新<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象使用<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.%23ctor%2A>构造函数。 它还演示了如何可以对基础进行批处理更改<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件，即使集合本身是只读的也是如此。 该代码循环访问集合中，更新<xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>的每个控件的属性。  
  
 [!code-csharp[WebParts_CatalogPartCollection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/catalogpartcollectioncs.aspx#2)]
 [!code-vb[WebParts_CatalogPartCollection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/catalogpartcollectionvb.aspx#2)]  
  
 当加载浏览器中时，你可以将页切换到目录模式下通过选择**目录**中**显示模式**下拉列表控件。 单击**显示 CatalogPart 属性**按钮访问<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象，并显示所包含的某些属性<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件。 此外，如果将鼠标指针的边框内的标题文本上<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>控件，你可以看到已添加到控件中，单击 （说明会显示工具提示） 按钮时的新说明文本。 如果你单击**页目录**链接以显示<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>控件，你会发现它还具有已更新的说明。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatalogPartCollection (System.Web.UI.WebControls.WebParts.CatalogPartCollection existingCatalogParts, System.Collections.ICollection catalogParts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.WebParts.CatalogPartCollection existingCatalogParts, class System.Collections.ICollection catalogParts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogPartCollection.#ctor(System.Web.UI.WebControls.WebParts.CatalogPartCollection,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (existingCatalogParts As CatalogPartCollection, catalogParts As ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CatalogPartCollection(System::Web::UI::WebControls::WebParts::CatalogPartCollection ^ existingCatalogParts, System::Collections::ICollection ^ catalogParts);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="existingCatalogParts" Type="System.Web.UI.WebControls.WebParts.CatalogPartCollection" />
        <Parameter Name="catalogParts" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="existingCatalogParts">某个区域中现有 <see cref="T:System.Collections.ICollection" /> 控件的一个 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />。</param>
        <param name="catalogParts">其他 <see cref="T:System.Collections.ICollection" /> 控件的一个 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />。</param>
        <summary>通过传入某个区域中现有 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> 控件的 <see cref="T:System.Collections.ICollection" /> 集合以及其他控件集合，初始化 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Web.UI.WebControls.WebParts.CatalogPart catalogPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Web.UI.WebControls.WebParts.CatalogPart catalogPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Contains(System.Web.UI.WebControls.WebParts.CatalogPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Web::UI::WebControls::WebParts::CatalogPart ^ catalogPart);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalogPart" Type="System.Web.UI.WebControls.WebParts.CatalogPart" />
      </Parameters>
      <Docs>
        <param name="catalogPart">要对其进行检查以确定是否位于集合中的 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />。</param>
        <summary>返回一个值，该值指示集合中是否存在特定控件。</summary>
        <returns>一个布尔值，该值指示集合中是否存在特定控件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Contains%2A>方法使您能够确定是否特定<xref:System.Web.UI.WebControls.WebParts.CatalogPart>对象属于<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象。  
  
   
  
## Examples  
 下面的代码示例演示如何决定是否特定<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件为属于<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象。 有关所需要运行该示例的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>类概述主题。  
  
 中的代码`Button1_Click`方法创建一个新<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象名为`myParts`。 该方法使用<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Contains%2A>方法来确定是否`PageCatalogPart1`控制存在，并且如果是这样，检索的控件和更改的属性值。  
  
 [!code-csharp[WebParts_CatalogPartCollection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/catalogpartcollectioncs.aspx#2)]
 [!code-vb[WebParts_CatalogPartCollection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/catalogpartcollectionvb.aspx#2)]  
  
 当加载浏览器中时，你可以将页切换到目录模式下通过选择**目录**中**显示模式**下拉列表控件。 添加自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>控件添加到页上通过选择它旁边的复选框并单击**添加**。 单击**关闭**来返回到浏览模式的页。 在控件上你刚添加，如果你单击谓词菜单 （标题栏中显示的向下箭头），然后单击**关闭**，从页面中删除该控件并将其添加到<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>控件。 使页返回到目录模式，并单击**页目录**链接可查看的内容<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>控件。 请注意，已向其添加你关闭的控件。 单击**显示 CatalogPart 属性**按钮访问<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象，并显示所包含的某些属性<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件。 选择中包含的服务器控件旁边的复选框<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>控件中，单击**添加**以将其添加回页面，然后单击**关闭**来返回到浏览模式的页。 单击再次在控件中，谓词菜单，然后请注意，现在关闭谓词会已被删除。 中的代码已移除`Button1_Click`方法时使用它<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Contains%2A>方法来检查`PageCatalogPart1`，并将其<xref:System.Web.UI.WebControls.WebParts.WebPart.AllowClose%2A>属性`false`。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Web.UI.WebControls.WebParts.CatalogPart[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Web.UI.WebControls.WebParts.CatalogPart[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogPartCollection.CopyTo(System.Web.UI.WebControls.WebParts.CatalogPart[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As CatalogPart(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Web::UI::WebControls::WebParts::CatalogPart ^&gt; ^ array, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Web.UI.WebControls.WebParts.CatalogPart[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 对象的数组，用于包含复制的集合。</param>
        <param name="index">在数组中放置集合内容的起始点。</param>
        <summary>将集合复制到 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 对象的数组。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.CopyTo%2A>方法很有用，当你想要组合可以包含一个自定义数组<xref:System.Web.UI.WebControls.WebParts.CatalogPart>中控制<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象或这些控件的子集。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.CatalogPartCollection Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.CatalogPartCollection Empty" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As CatalogPartCollection " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::CatalogPartCollection ^ Empty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>引用集合的一个空的静态只读实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 静态、 只读的、 空实例<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>可减少内存使用量情况下，要空集合的实例通过方法返回正确的对象类型或与另一个对象实例进行比较，但不是需要将成员添加到实例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Web.UI.WebControls.WebParts.CatalogPart catalogPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Web.UI.WebControls.WebParts.CatalogPart catalogPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogPartCollection.IndexOf(System.Web.UI.WebControls.WebParts.CatalogPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Web::UI::WebControls::WebParts::CatalogPart ^ catalogPart);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalogPart" Type="System.Web.UI.WebControls.WebParts.CatalogPart" />
      </Parameters>
      <Docs>
        <param name="catalogPart">作为集合成员的 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />。</param>
        <summary>返回集合中特定成员的位置。</summary>
        <returns>作为 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 成员的 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.IndexOf%2A>方法很有用，如果你有多个<xref:System.Web.UI.WebControls.WebParts.CatalogPart>上 Web 部件页，并且你的控件需要查找集合中的特定控件。  
  
   
  
## Examples  
 下面的代码示例演示如何确定的一个成员的位置<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>使用进行收集其<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.IndexOf%2A>属性。 有关所需要运行该示例的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>类概述主题。  
  
 中的代码`Button1_Click`方法创建一个新<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象名为`myParts`。 该方法使用<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.IndexOf%2A>要检索的位置属性<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>控制，，然后调整控件上的属性值。  
  
 [!code-csharp[WebParts_CatalogPartCollection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/catalogpartcollectioncs.aspx#2)]
 [!code-vb[WebParts_CatalogPartCollection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/catalogpartcollectionvb.aspx#2)]  
  
 加载浏览器中后，你可以通过将页切换到目录模式选择**目录**中**显示模式**下拉列表控件。 单击**显示 CatalogPart 属性**按钮访问<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象，并显示所包含的某些属性<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件。 单击**页目录**链接以显示的内容<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>控件。 请注意，它有只有一个标题和没有边框，因为其<xref:System.Web.UI.WebControls.WebParts.WebPart.ChromeType%2A>属性值已更改为<xref:System.Web.UI.WebControls.WebParts.PartChromeType.TitleOnly>中使用的代码<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.IndexOf%2A>属性来检索控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>根据位置或唯一标识符返回集合中的特定成员。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.CatalogPart this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.CatalogPart Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As CatalogPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::CatalogPart ^ default[int] { System::Web::UI::WebControls::WebParts::CatalogPart ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">集合中特定 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 的索引。</param>
        <summary>基于集合中的位置获取或设置集合的成员。</summary>
        <value>位于集合中指定索引处的 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item%2A>索引器允许你访问基础<xref:System.Web.UI.WebControls.WebParts.CatalogPart>中控制<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象的索引，并更改其属性值或调用方法。  
  
   
  
## Examples  
 下面的代码示例演示如何访问的成员<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象使用其索引。 有关所需要运行该示例的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>类概述主题。  
  
 中的代码`Button1_Click`方法创建一个新<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象名为`myParts`。 请注意，该方法使用<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item%2A>索引器以从集合的第一个成员中检索信息。  
  
 [!code-csharp[WebParts_CatalogPartCollection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/catalogpartcollectioncs.aspx#2)]
 [!code-vb[WebParts_CatalogPartCollection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/catalogpartcollectionvb.aspx#2)]  
  
 当加载浏览器中时，你可以将页切换到目录模式下通过选择**目录**中**显示模式**下拉列表控件。 单击**显示 CatalogPart 属性**按钮访问<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象，并显示所包含的某些属性<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件。 中的可用服务器控件的计数<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>控件通过使用获取<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item%2A>中的索引器`Button1_Click`方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.CatalogPart this[string id] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.CatalogPart Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(id As String) As CatalogPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::CatalogPart ^ default[System::String ^] { System::Web::UI::WebControls::WebParts::CatalogPart ^ get(System::String ^ id); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">集合中特定 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 的唯一标识符。</param>
        <summary>基于唯一字符串标识符返回集合的成员。</summary>
        <value>集合中 ID 等于 <paramref name="id" /> 的值的第一个 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item%2A>索引器允许你访问基础<xref:System.Web.UI.WebControls.WebParts.CatalogPart>中控制<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象使用的字符串标识符。 尽管<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象是只读的你可以更改属性值或索引器访问的基础控件上调用方法。  
  
   
  
## Examples  
 下面的代码示例演示如何访问的成员<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象使用其字符串 ID 值。 有关所需要运行该示例的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>类概述主题。  
  
 中的代码`Button1_Click`方法创建一个新<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象名为`myParts`。 该方法使用<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item%2A>索引器以检索其信息<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>控件，这是集合的第二个成员。  
  
 [!code-csharp[WebParts_CatalogPartCollection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/catalogpartcollectioncs.aspx#2)]
 [!code-vb[WebParts_CatalogPartCollection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/catalogpartcollectionvb.aspx#2)]  
  
 当加载浏览器中时，你可以将页切换到目录模式下通过选择**目录**中**显示模式**下拉列表控件。 单击**显示 CatalogPart 属性**按钮访问<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>对象，并显示所包含的某些属性<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件。 中的可用服务器控件的计数<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>控件通过使用获取<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item%2A>中的索引器`Button1_Click`方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>