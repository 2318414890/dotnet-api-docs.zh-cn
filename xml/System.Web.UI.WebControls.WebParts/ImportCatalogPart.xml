<Type Name="ImportCatalogPart" FullName="System.Web.UI.WebControls.WebParts.ImportCatalogPart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2f80e66bc8d3ebeabe5166a52a57859a7cfffdeb" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37743924" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ImportCatalogPart : System.Web.UI.WebControls.WebParts.CatalogPart" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImportCatalogPart extends System.Web.UI.WebControls.WebParts.CatalogPart" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImportCatalogPart&#xA;Inherits CatalogPart" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImportCatalogPart sealed : System::Web::UI::WebControls::WebParts::CatalogPart" />
  <TypeSignature Language="F#" Value="type ImportCatalogPart = class&#xA;    inherit CatalogPart" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.CatalogPart</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>导入 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件（或其他用作 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的 ASP.NET 服务器控件）的说明文件，以便用户可以使用预定义的设置将控件添加到网页中。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件使用户能够导入说明文件，用于描述设置<xref:System.Web.UI.WebControls.WebParts.WebPart>控件或用户想要将添加到的服务器控件<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域。  
  
 用户导入一个说明文件之后,<xref:System.Web.UI.WebControls.WebParts.WebPart>在文件中引用的控件出现在<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控制和用户可以将控件添加到页。  
  
 描述文件不是控件本身相同。 它是一个 XML 文件的末尾。Web 部件扩展并包含名称/值对-主要属性值-描述的控件的状态。 说明文件创建根据指定的 XML 格式，如本主题中所述[Web 部件控制描述文件](http://msdn.microsoft.com/library/480992e4-8fc7-43f8-bffc-ae97bbdfe5b8)。  
  
 用于描述文件引用的控件，它既可以编译到程序集，也可以是用户控件的.ascx 文件中定义。 在任一情况下，在导入的说明文件中引用的控件必须存在承载尝试导入控件的网页的 Web 服务器上。 描述文件引用包含该控件的控件名称和程序集 （或文件） 并说明文件包含影响控件的属性值、 外观和行为的设置。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件使用户能够共享控件上的设置。 为复杂控件可以具有许多属性和设置。 例如，在一家大型公司，自定义内的典型的 intranet 站点<xref:System.Web.UI.WebControls.WebParts.WebPart>控件可能包含多个保存值特定于用户的环境，例如其数据库连接、 部门信息等的属性。 该控件还可能包含多个会影响其外观的属性。 一个用户无法对特定站点上的控件进行个性化设置和使其正常工作、 导出说明文件进行控制，以及然后与其他用户，用户可以导入的文件完全配置的控件添加到其他 intranet 共享说明文件允许其进行个性化的站点。 只要编译的程序集或包含控件的用户控件文件存在承载其站点的 Web 服务器上，用户可以将控件添加到其他网站。  
  
 依据用户导入说明文件 （并且因此控制及其关联的服务器） 到 Web 页的机制是<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，页面开发人员必须将添加到 Web 页。 当用户切换到目录显示模式页面<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件随即显示，并且用户可以浏览到此控件。他们想要导入到服务器控件对应的 web 部件说明文件。 以下用户界面和提供的说明<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，用户便可将所需的服务器控件添加到 Web 页中，使用其外观和完全导入的说明文件中配置为指定的属性。  
  
 之前<xref:System.Web.UI.WebControls.WebParts.WebPart>控件的说明文件可以导入，用户必须先创建 （导出） 文件基于现有<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 可以为一个控件导出说明文件，如果满足以下条件：  
  
-   该控件具有使用标记的属性`Personalizable`属性。  
  
-   将 Web.config 文件`enableExport`属性设置为值`true`上`<webParts>`元素。  
  
-   开发人员设置的值<xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>属性的默认值以外的值在控件上<xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.None>，该值禁止导出。 如果<xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>属性值设置为<xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.NonSensitiveData>，任何属性，其中包含<xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A>参数与`Personalizable`属性不会导出时用户导出说明文件。 这使控件开发人员，以防止敏感数据，如连接字符串，在某些情况下被导出。  
  
 用户可以导出一个通过单击出现在谓词菜单的控件，并按照的说明保存导出谓词启用为导出的控件。Web 部件控件的说明文件。 然后，其他用户可以导入此文件来配置其自己的控件的实例。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类包含多个属性。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>属性包含有关用户的说明文本，在浏览以找到说明文件时。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>属性包含作为导入控件的标签中显示的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>包含导入控件说明时出错时显示的文本。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>属性重写基属性，以分配的默认标题<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控制如果开发人员不会分配一个标题。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>属性包含为在用户单击可以上载说明文件中，按钮文本和<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>属性包含上传过程的说明。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类还包含几个唯一的方法。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法检索<xref:System.Web.UI.WebControls.WebParts.WebPartDescription>每个对象<xref:System.Web.UI.WebControls.WebParts.WebPart>控制在目录中，从而使<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件来显示有关每个服务器控件的信息，而无需创建它的一个实例。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法获取的特定实例<xref:System.Web.UI.WebControls.WebParts.WebPart>控制，根据传递给方法的说明。  
  
 有一些与使用相关的固有风险<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 例如，通过用于导入的 description 文件中导入你的 Web 应用程序的恶意数据的可能性。 如果有人将恶意脚本代码放作为说明文件中的字符串属性的值，则当用户导入说明文件，并将引用的服务器控件添加到 Web 页时，就可能会执行该脚本。 若要导入带有恶意数据说明文件的风险降至最低，服务器控件，具有字符串类型属性应始终对属性数据进行编码。 另一种风险涉及通过说明文件导入类型 (请参阅[Web 部件控制描述文件](http://msdn.microsoft.com/library/480992e4-8fc7-43f8-bffc-ae97bbdfe5b8))。 恶意用户无法提交请求以加载到多个程序集<xref:System.AppDomain>，从而导致过多所占用的内存量。  
  
 若要避免与导入相关的风险，您可以禁用该功能完全不使用导入功能或<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 或者，可以限制哪些用户有权访问该控件。 无法执行此操作，以编程方式使用角色管理 (请参阅[使用角色管理授权](http://msdn.microsoft.com/library/01954ce4-39a2-487f-8153-a69f6f6f3195))。 例如，页面加载时，您无法测试以查看用户是否属于特定角色时，如管理员角色。 如果用户是角色中，你可以以编程方式添加<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>到该用户的页控件。 此外可以使用声明性方法来限制的一组用户可以使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。  无法在 web 页包含目录中放置两个<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件： 一个用于可以导入的用户，另一个用于那些不能。 可以导入的用户的区域将包含<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 区域本身无法放置在<xref:System.Web.UI.WebControls.LoginView>控件，这使您可以限制到区域中控件的使用，仅那些经过身份验证，用户或您指定的角色。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控制以声明方式和以编程方式在网页上。 该示例包含四个部分：  
  
-   用户控件，可用于更改 Web 部件页上的显示模式。  
  
-   包含的 Web 页面<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件和一个<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。  
  
-   源代码文件包含两个自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
-   该示例时加载的页面在浏览器工作原理的说明。  
  
 此代码示例的第一个部分是使用户能够更改网页上的显示模式的用户控件。 您应将以下源代码放在一个文件并将其命名 Displaymodemenucs.ascx 或 Displaymodemenuvb.ascx （具体取决于哪种语言使用）。 有关详细信息显示在此控件模式和对源代码的说明，请参见[演练： 在 Web 部件页上更改显示模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/DisplayModeMenuCS.ascx#7)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/DisplayModeMenuVB.ascx#7)]  
  
 代码示例的第二部分是 Web 页。 在页面的顶部是两个`register`指令、 用户控件和包含两个自定义的已编译组件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 请注意，页面都有对的声明性引用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，嵌套在适当的层次结构的声明性的元素。 还要注意几个属性值分配以声明方式在`<asp:importcatalogpart>`元素。 此外，`Button1_Click`方法上更新的属性值数目<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。  
  
 在页面的<xref:System.Web.UI.WebControls.WebParts.WebPartZone>控件、 两个自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>控件声明。 `<aspSample:userinfowebpart>`控件具有`exportmode="all"`上它的属性。 此属性需要使用户能够导出该控件，然后由其他用户想要导入控件使用此说明文件导入的描述文件。  
  
> [!NOTE]
>  若要启用 Web 部件应用程序导出导入的用户<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，还必须启用 Web 应用程序中的导出功能，通过添加`enableExport="true"`属性为`<webParts>`元素 (即子`<system.web>`元素) 的 Web.config 文件中。 默认情况下禁用导出，因此如果尚未为应用程序启用导出，编辑 Web.config 文件，并立即执行操作。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#1)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#1)]  
  
 代码示例的第三个部分是为两个源代码<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 请注意，这些控件上的某些属性标有`WebBrowsable`属性。 这使<xref:System.Web.UI.WebControls.WebParts.PropertyGridEditorPart>控件为用户编辑这些属性在控件处于编辑模式时动态生成用户界面 (UI)。 属性也会标记与`WebDisplayName`属性，指定在编辑用户界面中每个控件旁边显示的标签的文本。 若要运行的代码示例，必须编译此源代码。 可以显式对其进行编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以将源代码放在你网站的 App_Code 文件夹中，其中它将被动态编译在运行时。 此代码示例使用动态编译。 有关演示这两种方法编译的演练，请参阅[演练： 开发和使用自定义 Web 服务器控件](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 调用自定义控件`TextDisplayWebPart`与网页上引用`<aspSample:TextDisplayWebPart>`元素。 其他控件，名为`UserInfoWebPart`，也被声明在网页上最初，但将删除它更高版本才能演示导入控件的描述文件的功能。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/userinfowebpart.vb#6)]  
  
 现在运行的代码示例。 加载浏览器中的网页。 第一步是编辑`UserInfoWebPart`控件。 使用**显示模式**下拉列表控件，然后选择**编辑**切换到编辑模式的页。 单击的谓词菜单`UserInfoWebPart`控件 （标题栏中的向下箭头），并单击**编辑**。 编辑 UI 出现时，多个编辑控件将显示下面`UserInfoWebPart`控件，可以用于编辑的字段值。 编辑某些字段，请单击**确定**，然后使用**显示模式**返回页后，可以浏览模式下的下拉列表。  
  
 第二步是导出。Web 部件描述文件`UserInfoWebPart`控件。 单击 （由标题栏中的向下箭头），在自定义控件上的谓词菜单，然后单击**导出**。 按照说明进行操作以保存。Web 部件控件的说明文件。 现在关闭网页，并编辑网页源代码编辑器中。 删除`<aspSample:userinfowebpart>`控制声明元素，然后保存并关闭文件。 (执行此步骤的模拟的用户还没有`UserInfoWebPart`控件，以便可以导入页上的控件)。  
  
 加载 Web 页，再次在浏览器中。 `UserInfoWebPart`控件不应出现，因为已删除了它。 使用**显示模式**下拉列表控件，然后选择**目录**以切换到目录模式的页面。 在中<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件中，单击**浏览**按钮，并浏览到。Web 部件文件所创建的然后单击**上传**按钮。 对控件的引用应显示有一个它旁边的复选框。 选择该复选框，然后单击**添加**控件添加到页面。  
  
 虽然在此视图中的页中，单击**更新 ImportCatalogPart**靠近底部的页后，可以看到以编程方式更新上的属性值数目的效果的按钮<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 单击按钮后，观察如何在 UI 中更改的各种属性。  
  
 最后，单击**关闭**退出目录模式并返回页后，可以浏览模式。 `UserInfoWebPart`控件现在应显示在页中，包含先前导出时的值。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.PageCatalogPart" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImportCatalogPart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ImportCatalogPart();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.%23ctor%2A>构造函数是默认值; 没有构造函数声明中<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类，因此没有特殊任务执行时创建类的新实例。 .NET Framework 在内部使用构造函数创建类的实例。  
  
 通常情况下将不需要使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.%23ctor%2A>构造函数以编程方式在自己的代码。 控件的使用目的是页面开发人员将其添加到页面以声明方式在设计时。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BrowseHelpText">
      <MemberSignature Language="C#" Value="public string BrowseHelpText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BrowseHelpText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText" />
      <MemberSignature Language="VB.NET" Value="Public Property BrowseHelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BrowseHelpText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BrowseHelpText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一条文本消息，该消息指示用户浏览至一个说明文件的位置。</summary>
        <value>包含文本消息的字符串。 默认值是一条由 .NET Framework 提供的、特定于区域性的消息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>属性为用户提供他们也必须执行过程中将导入的控件添加第一件事的简单概述： 通过在路径中键入或浏览到该文件提供说明文件的位置。 提供此属性的自定义值的典型原因是如果你提供的特殊说明对于用户，例如特定的网络共享到的用户应浏览到说明文件。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>属性以声明方式和以编程方式。 有关完整的代码以及运行该示例中，所需的说明，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类概述。  
  
 在下面的代码段，请注意，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>控件以声明方式设置属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在本部分中的代码，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>以编程方式分配属性值。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当在浏览器页面加载时，可以使用**显示模式**要选择的下拉列表控件**目录模式**并切换到目录模式的页面。 使用目录模式和上载说明文件中的页面，请注意各种用户界面 (UI) 中显示的文本字符串<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 如果单击**上载说明文件**按钮，几个属性在 UI 中的文本已更改，包括的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected internal override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub CreateChildControls ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void CreateChildControls();" />
      <MemberSignature Language="F#" Value="override this.CreateChildControls : unit -&gt; unit" Usage="importCatalogPart.CreateChildControls " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultButton">
      <MemberSignature Language="C#" Value="public override string DefaultButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultButton" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property DefaultButton As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DefaultButton { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultButton : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用户界面 (UI) 上视为默认按钮的按钮，该按钮用于在呈现包含它的窗体时接收焦点。 此属性不应在网页开发人员代码中调用。</summary>
        <value>一个字符串，包含接收 <see cref="T:System.Web.UI.WebControls.Button" /> 控件中的默认焦点的 <see cref="T:System.Web.UI.WebControls.Panel" /> 的 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的代码将重写基属性继承自<xref:System.Web.UI.WebControls.Panel>类设计器中隐藏该属性并防止它受主题影响。 尽管它是公共的此属性设置此控件的默认呈现的 Web 部件控件在内部使用，不应由页面开发人员使用。  
  
 无法通过主题或样式表主题设置此属性。 有关详细信息，请参阅<xref:System.Web.UI.ThemeableAttribute>并[ASP.NET 主题和外观](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Panel.DefaultButton" />
      </Docs>
    </Member>
    <Member MemberName="GetAvailableWebPartDescriptions">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAvailableWebPartDescriptions () As WebPartDescriptionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Web::UI::WebControls::WebParts::WebPartDescriptionCollection ^ GetAvailableWebPartDescriptions();" />
      <MemberSignature Language="F#" Value="override this.GetAvailableWebPartDescriptions : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection" Usage="importCatalogPart.GetAvailableWebPartDescriptions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回目录中可用 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的说明的集合。</summary>
        <returns>一个 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection" />，它包含目录中每个控件的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法提供实现的抽象基方法中声明为<xref:System.Web.UI.WebControls.WebParts.CatalogPart>类。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法返回在目录中的每个控件的说明信息。 请注意，对于<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，可以有一个服务器控件目录中一次，即使方法会起作用，如果有多个控件。  
  
 一个<xref:System.Web.UI.WebControls.WebParts.WebPartDescription>对象是包含有关的基本信息的对象<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，包括其 ID，对该控件，并继承自的几个重要属性的值的对象引用<xref:System.Web.UI.WebControls.WebParts.Part>类，如<xref:System.Web.UI.WebControls.WebParts.Part.Title%2A>和<xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法将会提升性能。 创建目录后，它需要一些信息，包括标题、 说明、 图标 （如果存在） 和一个 id。 每个控件 而不是无需创建要获取此信息，每个控件的实例<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>区域创建一个目录调用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法，并在调用返回仅控件而不是实例的说明信息控件。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>在网页上的方法。 该示例包含四个部分：  
  
-   用户控件，可用于更改 Web 部件页上的显示模式。  
  
-   包含的 Web 页面<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件和一个<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，以及使用的代码<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法。  
  
-   源代码文件包含两个自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
-   该示例时加载的页面在浏览器工作原理的说明。  
  
 此代码示例的第一个部分是使用户能够更改网页上的显示模式的用户控件。 您应将以下源代码放在一个文件并将其命名 Displaymodemenucs.ascx 或 Displaymodemenuvb.ascx （具体取决于哪种语言使用）。 有关详细信息显示在此控件模式和对源代码的说明，请参见[演练： 在 Web 部件页上更改显示模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/DisplayModeMenuCS.ascx#7)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/DisplayModeMenuVB.ascx#7)]  
  
 代码示例的第二部分是 Web 页。 在页面的顶部是两个`register`指令、 用户控件和包含两个自定义的已编译组件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 这两种控件中页的标记以声明方式引用。 上的声明性引用<xref:System.Web.UI.WebControls.WebParts.WebPart>控件 (同时开头`aspSample`前缀)，请注意，每个都`exportMode="all"`属性添加到它。 此属性，可导出。Web 部件控件，将在更高版本中使用，以将控件导入到一个页面的步骤说明文件。  
  
> [!NOTE]
>  若要启用 Web 部件应用程序导出导入的用户<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，还必须启用 Web 应用程序中的导出功能，通过添加`enableExport="true"`属性为`<webParts>`元素 (即子`<system.web>`元素) 的 Web.config 文件中。 默认情况下禁用导出，因此如果尚未为应用程序启用导出，编辑 Web.config 文件，并立即执行操作。  
  
 Web 页还提供的声明性引用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，嵌套在适当的层次结构的声明性的元素。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法调用的代码内`Button1_Click`方法。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/ImportCatalogPart_GetCS.aspx#1)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/ImportCatalogPart_GetVB.aspx#1)]  
  
 代码示例的第三个部分是为两个源代码<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 若要运行的代码示例，必须编译此源代码。 可以显式对其进行编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以将源代码放在你网站的 App_Code 文件夹中，其中它将被动态编译在运行时。 此代码示例使用动态编译。 有关演示这两种方法编译的演练，请参阅[演练： 开发和使用自定义 Web 服务器控件](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/userinfowebpart.vb#6)]  
  
 现在运行的代码示例。 加载浏览器中的网页。 第一步是导出。每个 web 部件说明文件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件 (有关`TextDisplayWebPart`以及`UserInfoWebPart`控件)。 对于每个控件，单击 （由标题栏中的向下箭头），在控件上的谓词菜单然后单击**导出**。 按照说明进行操作以保存。Web 部件控件的说明文件。 你已导出的每个控件的说明文件后，关闭网页，并编辑页面源文件在编辑器中。 删除`<aspSample:userinfowebpart>`和`<aspSample:textdisplaywebpart>`控制声明元素，然后保存并关闭文件。 （您执行此步骤，若要模拟不尚没有这些控件，因此可以导入页上的控件的用户）。  
  
 加载 Web 页，再次在浏览器中。 使用**显示模式**下拉列表控件，然后选择**目录**以切换到目录模式的页面。 在中<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件中，单击**浏览**按钮，浏览到。你创建的 web 部件文件选择一个，然后单击**上传**按钮。 对控件的引用应显示有一个它旁边的复选框。 选择该复选框，然后单击**添加**控件添加到页面。 重复此过程的其他控件。  
  
 虽然在此视图中的页中，单击**获取 web 部件说明**靠近底部的页后，可以看到以编程方式访问的效果的按钮<xref:System.Web.UI.WebControls.WebParts.WebPartDescription>对象中当前加载的控件说明<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 用于访问说明的详细信息，该方法中找到`Button1_Click`的页面源文件中，方法是<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法。 标签在按钮的下面显示了有关控件的基本详细信息。  
  
 添加后的第一个控件，请重复该过程以将第二个控件添加到页。 最后，单击**关闭**退出目录模式并返回页后，可以浏览模式。 这两个自定义控件现在应出现在页中，包含先前导出说明文件时所具有的值。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)" />
      </Docs>
    </Member>
    <Member MemberName="GetWebPart">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.WebParts.WebPart GetWebPart (System.Web.UI.WebControls.WebParts.WebPartDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.WebControls.WebParts.WebPart GetWebPart(class System.Web.UI.WebControls.WebParts.WebPartDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetWebPart (description As WebPartDescription) As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Web::UI::WebControls::WebParts::WebPart ^ GetWebPart(System::Web::UI::WebControls::WebParts::WebPartDescription ^ description);" />
      <MemberSignature Language="F#" Value="override this.GetWebPart : System.Web.UI.WebControls.WebParts.WebPartDescription -&gt; System.Web.UI.WebControls.WebParts.WebPart" Usage="importCatalogPart.GetWebPart description" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.Web.UI.WebControls.WebParts.WebPartDescription" />
      </Parameters>
      <Docs>
        <param name="description">
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" />，包含控件的详细信息。</param>
        <summary>根据传入方法的说明值，返回对 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的引用。</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件，它的说明与 <paramref name="description" /> 中的值匹配。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法返回对引用<xref:System.Web.UI.WebControls.WebParts.WebPart>控制其说明的详细信息的值匹配<xref:System.Web.UI.WebControls.WebParts.WebPartDescription>对象传递给该方法。 通常情况下，此方法使用连同<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A>方法，用于检索目录中的控件的说明。 各个<xref:System.Web.UI.WebControls.WebParts.WebPart>控件可以然后检索或操作根据需要通过传递单个<xref:System.Web.UI.WebControls.WebParts.WebPartDescription>对象添加到<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>在网页上的方法。 该示例包含四个部分：  
  
-   用户控件，可用于更改 Web 部件页上的显示模式。  
  
-   包含的 Web 页面<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件和一个<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，以及使用的代码<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法。  
  
-   源代码文件包含两个自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
-   该示例时加载的页面在浏览器工作原理的说明。  
  
 此代码示例的第一个部分是使用户能够更改网页上的显示模式的用户控件。 您应将以下源代码放在一个文件并将其命名 Displaymodemenucs.ascx 或 Displaymodemenuvb.ascx （具体取决于哪种语言使用）。 有关详细信息显示在此控件模式和对源代码的说明，请参见[演练： 在 Web 部件页上更改显示模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/DisplayModeMenuCS.ascx#7)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/DisplayModeMenuVB.ascx#7)]  
  
 代码示例的第二部分是 Web 页。 在页面的顶部是两个`register`指令、 用户控件和包含两个自定义的已编译组件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 这两种控件中页的标记以声明方式引用。 上的声明性引用<xref:System.Web.UI.WebControls.WebParts.WebPart>控件 (同时开头`aspSample`前缀)，请注意，每个都`exportMode="all"`属性添加到它。 此属性，可导出。Web 部件控件，将在更高版本中使用，以将控件导入到一个页面的步骤说明文件。  
  
> [!NOTE]
>  若要启用 Web 部件应用程序导出导入的用户<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，还必须启用 Web 应用程序中的导出功能，通过添加`enableExport="true"`属性为`<webParts>`元素 (即子`<system.web>`元素) 的 Web.config 文件中。 默认情况下禁用导出，因此如果尚未为应用程序启用导出，编辑 Web.config 文件，并立即执行操作。  
  
 Web 页还提供的声明性引用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，嵌套在适当的层次结构的声明性的元素。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法调用的代码内`Button2_Click`方法。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/ImportCatalogPart_GetCS.aspx#1)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/ImportCatalogPart_GetVB.aspx#1)]  
  
 代码示例的第三个部分是为两个源代码<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 若要运行的代码示例，必须编译此源代码。 可以显式对其进行编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以将源代码放在你网站的 App_Code 文件夹中，其中它将被动态编译在运行时。 此代码示例使用动态编译。 有关演示这两种方法编译的演练，请参阅[演练： 开发和使用自定义 Web 服务器控件](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/userinfowebpart.vb#6)]  
  
 现在运行的代码示例。 加载浏览器中的网页。 第一步是导出。每个 web 部件说明文件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件 (有关`TextDisplayWebPart`以及`UserInfoWebPart`控件)。 对于每个控件，单击 （由标题栏中的向下箭头），在控件上的谓词菜单然后单击**导出**。 按照说明进行操作以保存。Web 部件控件的说明文件。 你已导出的每个控件的说明文件后，关闭网页，并编辑页面源文件在编辑器中。 删除`<aspSample:userinfowebpart>`和`<aspSample:textdisplaywebpart>`控制声明元素，然后保存并关闭文件。 （您执行此步骤，若要模拟不尚没有这些控件，因此可以导入页上的控件的用户）。  
  
 加载 Web 页，再次在浏览器中。 使用**显示模式**下拉列表控件，然后选择**目录**以切换到目录模式的页面。 在中<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件中，单击**浏览**按钮，浏览到。你创建的 web 部件文件选择一个，然后单击**上传**按钮。 对控件的引用应显示有一个它旁边的复选框。 控件说明上传到<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件中，单击**使用 GetWebPart**靠近页面底部的按钮。 这将演示调用的效果<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法，并将其传递给当前加载的控件说明<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 请注意，关联的服务器控件即可立即添加到网页，用户无需单击**添加**按钮。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法，在调用`Button2_Click`方法的页面源文件中，将返回<xref:System.Web.UI.WebControls.WebParts.WebPart>中加载的当前描述关联控件<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 下一步<xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A>调用方法时，和<xref:System.Web.UI.WebControls.WebParts.WebPart>控件直接添加到页。 此示例演示如何添加控件以编程方式从<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件无需用户干预。  
  
 添加后的第一个控件，请重复该过程以将第二个控件添加到页。 最后，单击**关闭**退出目录模式并返回页后，可以浏览模式。 这两个自定义控件现在应出现在页中，包含先前导出说明文件时所具有的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="description" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="description" /> 不是可用的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" /> 值。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions" />
      </Docs>
    </Member>
    <Member MemberName="ImportedPartLabelText">
      <MemberSignature Language="C#" Value="public string ImportedPartLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImportedPartLabelText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText" />
      <MemberSignature Language="VB.NET" Value="Public Property ImportedPartLabelText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ImportedPartLabelText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ImportedPartLabelText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当用户导入一个说明文件后显示的文本，该文本说明或描述导入控件目录中的相应导入控件。</summary>
        <value>包含标签的文本的字符串。 默认值是一条由 .NET Framework 提供的、特定于区域性的消息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>属性通常用于包含描述中包含的控件的较短的常规标志<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>属性以声明方式和以编程方式。 有关完整的代码以及运行该示例中，所需的说明，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类概述。  
  
 在下面的代码段，请注意，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>控件以声明方式设置属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在本部分中的代码，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>以编程方式分配属性值。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当在浏览器页面加载时，可以使用**显示模式**要选择的下拉列表控件**目录模式**并切换到目录模式的页面。 使用目录模式和上载说明文件中的页面，请注意各种用户界面 (UI) 中显示的文本字符串<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 如果单击**上载说明文件**按钮，几个属性在 UI 中的文本已更改，包括的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected internal override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub LoadControlState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void LoadControlState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadControlState : obj -&gt; unit" Usage="importCatalogPart.LoadControlState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="importCatalogPart.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartImportErrorLabelText">
      <MemberSignature Language="C#" Value="public string PartImportErrorLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PartImportErrorLabelText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText" />
      <MemberSignature Language="VB.NET" Value="Public Property PartImportErrorLabelText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PartImportErrorLabelText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PartImportErrorLabelText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一条错误消息，该信息在导入过程中发生错误时显示。</summary>
        <value>包含标签的文本的字符串。 默认值是一条由 .NET Framework 提供的、特定于区域性的消息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>属性可用于通知用户，如果某些问题或错误发生时的页面尝试导入说明文件。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>属性以声明方式和以编程方式。 有关完整的代码以及运行该示例中，所需的说明，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类概述。  
  
 在下面的代码段，请注意，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>控件以声明方式设置属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在本部分中的代码，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>以编程方式分配属性值。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当在浏览器页面加载时，可以使用**显示模式**要选择的下拉列表控件**目录模式**并切换到目录模式的页面。 使用目录模式和上载说明文件中的页面，请注意各种用户界面 (UI) 中显示的文本字符串<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 如果单击**上载说明文件**按钮，几个属性在 UI 中的文本已更改，包括的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="importCatalogPart.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected internal override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RenderContents (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RenderContents(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.RenderContents : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="importCatalogPart.RenderContents writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected internal override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function SaveControlState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Object ^ SaveControlState();" />
      <MemberSignature Language="F#" Value="override this.SaveControlState : unit -&gt; obj" Usage="importCatalogPart.SaveControlState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public override string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" /> 控件的标题栏中显示的标题。</summary>
        <value>用作控件标题的字符串。 默认值是 Web 部件控件集提供的、计算出的控件名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>属性值显示在标题栏的<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控制控制在目录模式中可见。 当控件在页面中声明时，可以通过设置属性的值`Title`属性。 如果未提供标题的值，则特定于区域性的默认值用于描述此控件允许用户编辑的属性的类型。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>属性以声明方式和以编程方式。 有关完整的代码以及运行该示例中，所需的说明，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类概述。  
  
 在下面的代码段，请注意，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>控件以声明方式设置属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在本部分中的代码，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>以编程方式分配属性值。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当在浏览器页面加载时，可以使用**显示模式**要选择的下拉列表控件**目录模式**并切换到目录模式的页面。 使用目录模式和上载说明文件中的页面，请注意各种用户界面 (UI) 中显示的文本字符串<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 如果单击**上载说明文件**按钮，几个属性在 UI 中的文本已更改，包括的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadButtonText">
      <MemberSignature Language="C#" Value="public string UploadButtonText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UploadButtonText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText" />
      <MemberSignature Language="VB.NET" Value="Public Property UploadButtonText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UploadButtonText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UploadButtonText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.Button" /> 控件的文本，该控件初始化说明文件的上载。</summary>
        <value>用作 <see cref="T:System.Web.UI.WebControls.Button" /> 的文本的字符串。 该默认值是一个由 Web 部件控件集提供的、特定于区域性的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>属性提供的文本<xref:System.Web.UI.WebControls.Button>启动上传过程的控制。 向此属性，或如果分配自定义文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>属性，文本应清楚用户正在上载说明文件。 文本不应发表的文章或表示上传过程实际上上载该控件本身。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>属性以声明方式和以编程方式。 有关完整的代码以及运行该示例中，所需的说明，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类概述。  
  
 在下面的代码段，请注意，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>控件以声明方式设置属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在本部分中的代码，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>以编程方式分配属性值。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当在浏览器页面加载时，可以使用**显示模式**要选择的下拉列表控件**目录模式**并切换到目录模式的页面。 使用目录模式和上载说明文件中的页面，请注意各种用户界面 (UI) 中显示的文本字符串<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 如果单击**上载说明文件**按钮，几个属性在 UI 中的文本已更改，包括的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadHelpText">
      <MemberSignature Language="C#" Value="public string UploadHelpText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UploadHelpText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText" />
      <MemberSignature Language="VB.NET" Value="Public Property UploadHelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UploadHelpText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UploadHelpText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一条文本消息，该消息告诉用户如何上载说明文件。</summary>
        <value>用作用户上载说明文件时的提示的字符串。 该默认值是一个由 Web 部件控件集提供的、特定于区域性的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>属性提供的简短句子或短语的用户，告知他们单击按钮上, 传说明文件的说明。 向此属性，或如果分配自定义文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>属性，文本应清楚用户正在上载说明文件。 文本不应发表的文章或表示上传过程实际上上载该控件本身。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>属性以声明方式和以编程方式。 有关完整的代码以及运行该示例中，所需的说明，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类概述。  
  
 在下面的代码段，请注意，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>控件以声明方式设置属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在本部分中的代码，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>以编程方式分配属性值。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当在浏览器页面加载时，可以使用**显示模式**要选择的下拉列表控件**目录模式**并切换到目录模式的页面。 使用目录模式和上载说明文件中的页面，请注意各种用户界面 (UI) 中显示的文本字符串<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 如果单击**上载说明文件**按钮，几个属性在 UI 中的文本已更改，包括的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>