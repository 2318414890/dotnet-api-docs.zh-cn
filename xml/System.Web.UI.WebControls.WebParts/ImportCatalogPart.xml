<Type Name="ImportCatalogPart" FullName="System.Web.UI.WebControls.WebParts.ImportCatalogPart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17bfe4fc2991ca45ffb31cad133a61b48da42cfa" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30591091" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ImportCatalogPart : System.Web.UI.WebControls.WebParts.CatalogPart" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImportCatalogPart extends System.Web.UI.WebControls.WebParts.CatalogPart" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImportCatalogPart&#xA;Inherits CatalogPart" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImportCatalogPart sealed : System::Web::UI::WebControls::WebParts::CatalogPart" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.CatalogPart</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>导入 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件（或其他用作 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的 ASP.NET 服务器控件）的说明文件，以便用户可以使用预定义的设置将控件添加到网页中。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件使用户能够导入描述设置的描述文件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件或用户想要将添加到的服务器控件<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域。  
  
 用户导入的描述文件后,<xref:System.Web.UI.WebControls.WebParts.WebPart>文件中引用的控件出现在<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，并且用户可以将控件添加到页。  
  
 描述文件不是与该控件本身相同。 它是结尾的 XML 文件。Web 部件扩展和包含名称/值对-主要属性的值，用于描述控件的状态。 说明文件创建根据指定的 XML 格式，如主题所述[Web 部件控件说明文件](http://msdn.microsoft.com/library/480992e4-8fc7-43f8-bffc-ae97bbdfe5b8)。  
  
 描述文件引用的控件，它也可以编译成一个程序集，也可以是.ascx 文件中定义的用户控件。 在任一情况下，所引用的导入的说明文件中的控件必须在承载尝试导入该控件的网页的 Web 服务器上。 描述文件引用包含该控件，该控件名称和程序集 （或文件） 并说明文件包含影响控件的属性值、 外观和行为的设置。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件使用户可以共享控件上的设置。 为复杂控件可以具有许多属性和设置。 例如，在大型公司，自定义内的典型 intranet 站点<xref:System.Web.UI.WebControls.WebParts.WebPart>控件可能包含多个保存值特定于用户的环境，如其数据库连接、 部门信息等的属性。 该控件还可能包含多个会影响其外观的属性。 一个用户无法个性化特定站点上的控件和使其正常工作，导出该控件的描述文件，然后与其他用户，用户可以导入完全配置的控件添加到其他 intranet 的文件共享描述文件允许其进行个性化的站点。 只要编译的程序集或包含控件的用户控件文件存在承载其站点的 Web 服务器上，用户可以将控件添加到其他网站。  
  
 依据用户导入的描述文件 （并且因此其关联的服务器控件） 到网页的机制是<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>页开发人员必须添加到网页上的控件。 当用户将页切换到目录的显示模式，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件随即显示，并且用户可以浏览到此控件。他们想要导入对应的服务器控件的 web 部件说明文件。 以下 UI 和提供说明<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，用户是能够将所需的服务器控件添加到 Web 页中，使用它的外观和完全导入的描述文件中配置为指定的属性。  
  
 之前<xref:System.Web.UI.WebControls.WebParts.WebPart>控件的说明文件可以导入，用户必须首先创建 （导出） 文件基于现有<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 可以为一个控件导出的描述文件，如果满足以下条件：  
  
-   在控件有使用标记的属性`Personalizable`属性。  
  
-   将 Web.config 文件`enableExport`属性值设置为`true`上`<webParts>`元素。  
  
-   开发人员设置的值<xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>上的默认值以外的值的控件属性<xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.None>，该值禁止导出。 如果<xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>属性值设置为<xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.NonSensitiveData>，任何属性，它包含<xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A>参数`Personalizable`当用户导出的描述文件属性不会导出。 这使控件开发人员，以防止敏感数据，如连接字符串，在某些情况下导出。  
  
 用户可以导出已导出为启用通过单击出现在谓词菜单的控件，并按照说明进行操作以保存导出谓词的控件。Web 部件控件的说明文件。 然后，其他用户可以导入该文件来配置其自己的控件实例。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类包含多个属性。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>属性包含文本替换为有关用户说明，当用户浏览到说明文件。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>属性包含用作导入的控件的标签中显示的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>包含如果导入的控件说明时，就会出错，则显示的文本。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>属性重写基属性，以分配的默认标题<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控制如果开发人员不会分配一个标题。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>属性包含用户单击以上载描述文件中，按钮文本和<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>属性包含上载过程的说明。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类还包含几种的唯一方法。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法检索<xref:System.Web.UI.WebControls.WebParts.WebPartDescription>每个对象<xref:System.Web.UI.WebControls.WebParts.WebPart>在目录中，这样的控件<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件来显示有关每个服务器控件的信息，而无需创建它的实例。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法获取的特定实例<xref:System.Web.UI.WebControls.WebParts.WebPart>基于传递给方法的说明的控制。  
  
 有一些与使用相关联的固有风险<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 一个示例是通过用于导入的描述文件中导入 Web 应用程序的恶意数据的可能性。 如果有人作为描述文件中的字符串属性的值将放恶意脚本代码，则当用户导入描述文件，并将引用的服务器控件添加到网页上，就可能执行该脚本。 若要导入带有恶意数据的描述文件的风险降至最低，具有字符串类型属性的服务器控件应始终对属性数据进行编码。 另一个风险涉及通过说明文件导入类型 (请参阅[Web 部件控件说明文件](http://msdn.microsoft.com/library/480992e4-8fc7-43f8-bffc-ae97bbdfe5b8))。 恶意用户无法提交请求以加载到多个程序集<xref:System.AppDomain>，这会导致过多的内存正在使用中。  
  
 若要避免与导入相关联的风险，你可以禁用该功能完全不使用的导入功能或<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 或者，可以限制哪些用户有权访问控件。 你无法执行此操作，以编程方式使用角色管理 (请参阅[使用角色管理授权](http://msdn.microsoft.com/library/01954ce4-39a2-487f-8153-a69f6f6f3195))。 例如，加载页时你无法测试以查看用户是否位于某一特定角色，例如管理员角色。 如果用户是角色中，你可以以编程方式添加<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>到该用户的页的控件。 你可以使用声明性方法来限制可以使用的用户集<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。  在你 web 页中包含目录，你可以放置两个<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件： 一个用于可以导入的用户，一个的用户的用户不能。 将包含的用户可以导入区域<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 无法内放置的区域本身当中<xref:System.Web.UI.WebControls.LoginView>控件，从而使你能限制到区域中的控件使用过这些身份验证的用户或你指定的角色。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控制以声明方式和以编程方式在网页上。 该示例包含四个部分：  
  
-   一个用户控件，使你能够更改 Web 部件页面上的显示模式。  
  
-   网页包含<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件和<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。  
  
-   源代码文件包含两个自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
-   该示例的工作原理时加载浏览器中说明。  
  
 此代码示例的第一部分是使用户能够更改在网页上的显示模式的用户控件。 你应将以下源代码放在一个文件并将其命名 Displaymodemenucs.ascx 或 Displaymodemenuvb.ascx （具体取决于哪种语言使用）。 有关详细信息显示在此控件模式和源代码的说明，请参见[演练： 在 Web 部件页面上更改显示模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/DisplayModeMenuCS.ascx#7)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/DisplayModeMenuVB.ascx#7)]  
  
 下面的代码示例的第二部分是网页。 在页面顶部是两个卡`register`指令、 用户控件和已编译包含两个自定义的组件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 请注意，该页有以声明方式引用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，嵌套在适当的层次结构的声明性的元素。 还要注意几个属性值分配以声明方式在`<asp:importcatalogpart>`元素。 此外，`Button1_Click`方法上更新的属性值数目<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。  
  
 在页的<xref:System.Web.UI.WebControls.WebParts.WebPartZone>控件、 两个自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>声明控件。 `<aspSample:userinfowebpart>`控件具有`exportmode="all"`在其上的属性。 此属性需要以使用户可以导出该控件，然后由其他想要导入使用描述文件的控件的用户导入的描述文件。  
  
> [!NOTE]
>  若要启用要导出的描述文件的 Web 部件应用程序的用户<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，还必须启用 Web 应用程序中的导出功能，通过添加`enableExport="true"`属性设为`<webParts>`元素 (即子`<system.web>`元素) 的 Web.config 文件中。 导出在默认情况下处于禁用状态，因此如果尚未为你的应用程序启用导出，编辑 Web.config 文件，并立即执行操作。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#1)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#1)]  
  
 下面的代码示例的第三部分是对这两个源代码<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 请注意，这些控件的某些属性标记有`WebBrowsable`属性。 这使<xref:System.Web.UI.WebControls.WebParts.PropertyGridEditorPart>控件为了让用户能够编辑这些属性，当控件处于编辑模式中动态生成的用户界面 (UI)。 属性也会标记与`WebDisplayName`特性，来指定的编辑 UI 中每个控件旁边显示的标签文本。 若要运行的代码示例，必须编译此源代码。 你可以显式编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以在站点的 App_Code 文件夹中，其中它将动态编译运行时将源代码。 此代码示例使用动态编译。 有关演示的编译这两种方法的演练，请参阅[演练： 开发和使用自定义 Web 服务器控件](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 自定义控件调用`TextDisplayWebPart`上包含的 Web 页面引用`<aspSample:TextDisplayWebPart>`元素。 其他控件，调用`UserInfoWebPart`，也被声明在网页上最初，尽管你将删除它更高版本来演示导入控件的描述文件的能力。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/userinfowebpart.vb#6)]  
  
 现在运行的代码示例。 加载 Web 页的浏览器中。 第一步是编辑`UserInfoWebPart`控件。 使用**显示模式**下拉列表控件，然后选择**编辑**切换页后，可以编辑模式。 单击的谓词菜单`UserInfoWebPart`控件 （在标题栏中的向下箭头），，然后单击**编辑**。 编辑 UI 出现时，下面列出了多个编辑控件`UserInfoWebPart`可用于编辑其字段值的控件。 编辑某些字段，请单击**确定**，然后使用**显示模式**下拉列表来返回到浏览模式的页。  
  
 第二步是导出。Web 部件描述文件`UserInfoWebPart`控件。 单击 （由标题栏中的向下箭头），自定义控件上的谓词菜单，然后单击**导出**。 按照说明进行操作以保存。Web 部件控件的说明文件。 现在关闭网页，并编辑页面源文件在编辑器中。 删除`<aspSample:userinfowebpart>`控件声明元素，然后保存并关闭文件。 (你执行此步骤的目的模拟尚不具有的用户`UserInfoWebPart`控件，以便可以将控件导入到页)。  
  
 加载再次在浏览器中的网页。 `UserInfoWebPart`控件不应出现，因为您将其删除。 使用**显示模式**下拉列表控件，然后选择**目录**将页切换到目录模式。 在<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件中，单击**浏览**按钮，并浏览到。Web 部件文件所创建的然后单击**上载**按钮。 对控件的引用应显示它旁边的复选框。 选择该复选框，然后单击**添加**将控件添加到页。  
  
 当你在此视图中的页上，单击**更新 ImportCatalogPart**页后，可以查看以编程方式在更新大量的属性值的效果底部附近的按钮<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 单击按钮后，观察的各种属性在 UI 中的更改方式。  
  
 最后，单击**关闭**退出目录模式，返回页后，可以浏览模式。 `UserInfoWebPart`控件现在应显示在页中，包含时前面导出的值。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.PageCatalogPart" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImportCatalogPart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ImportCatalogPart();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.%23ctor%2A>构造函数是默认值; 没有构造函数声明中<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类，因此没有特殊的任务不会执行创建类的新实例时。 .NET Framework 内部使用构造函数来创建类的实例。  
  
 通常不将需要使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.%23ctor%2A>构造函数以编程方式在你自己的代码。 控件的预期的用途是供网页开发人员将其添加到页面以声明方式在设计时。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BrowseHelpText">
      <MemberSignature Language="C#" Value="public string BrowseHelpText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BrowseHelpText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText" />
      <MemberSignature Language="VB.NET" Value="Public Property BrowseHelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BrowseHelpText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一条文本消息，该消息指示用户浏览至一个说明文件的位置。</summary>
        <value>包含文本消息的字符串。 默认值是一条由 .NET Framework 提供的、特定于区域性的消息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>属性提供了用户，他们必须执行过程中添加导入的控件的第一个操作的简单概述： 路径中键入或浏览到该文件通过提供的描述文件，位置。 提供此属性的自定义值的典型原因是如果你具有的用户，例如特定的网络共享到它们应浏览以查找的描述文件的特殊说明。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>属性以声明方式和以编程方式。 有关完整的代码和运行示例时，所需的说明，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类概述。  
  
 在下面的代码段，请注意，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>控件以声明方式设置属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在此部分的代码，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>以编程方式分配属性值。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当加载浏览器中时，你可以使用**显示模式**要选择的下拉列表控件**目录模式**并将页切换到目录模式。 与目录模式和上载的描述文件中的页，注意各种用户界面 (UI) 中显示的文本字符串有关<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 如果你单击**上载说明文件**按钮，几个属性在 UI 中的文本已更改，包括的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected internal override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub CreateChildControls ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void CreateChildControls();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultButton">
      <MemberSignature Language="C#" Value="public override string DefaultButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultButton" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property DefaultButton As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DefaultButton { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用户界面 (UI) 上视为默认按钮的按钮，该按钮用于在呈现包含它的窗体时接收焦点。 此属性不应在网页开发人员代码中调用。</summary>
        <value>一个字符串，包含接收 <see cref="T:System.Web.UI.WebControls.Button" /> 控件中的默认焦点的 <see cref="T:System.Web.UI.WebControls.Panel" /> 的 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的代码重写继承自基属性<xref:System.Web.UI.WebControls.Panel>类设计器中隐藏该属性，并防止它所影响主题。 尽管它是公共的此属性由 Web 部件控件集对于此控件的默认呈现内部使用，但不可用于页开发人员。  
  
 无法通过主题或样式表主题设置此属性。 有关详细信息，请参阅<xref:System.Web.UI.ThemeableAttribute>和[ASP.NET 主题和皮肤](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Panel.DefaultButton" />
      </Docs>
    </Member>
    <Member MemberName="GetAvailableWebPartDescriptions">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAvailableWebPartDescriptions () As WebPartDescriptionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Web::UI::WebControls::WebParts::WebPartDescriptionCollection ^ GetAvailableWebPartDescriptions();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回目录中可用 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的说明的集合。</summary>
        <returns>一个 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection" />，它包含目录中每个控件的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法提供一个实现抽象的基方法声明中<xref:System.Web.UI.WebControls.WebParts.CatalogPart>类。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法返回目录中的每个控件的说明信息。 请注意，对于<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控制，可能存在只有一台服务器控件在目录中一次，即使该方法将工作好像有多个控件。  
  
 A<xref:System.Web.UI.WebControls.WebParts.WebPartDescription>对象是包含有关的基本信息的对象<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，包括其 ID，对该控件，并继承自的几个重要属性的值的对象引用<xref:System.Web.UI.WebControls.WebParts.Part>类，如<xref:System.Web.UI.WebControls.WebParts.Part.Title%2A>和<xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法可以提高性能。 创建目录时，它需要包含，包括标题、 说明、 一个图标 （如果存在） 和一个 id。 每个控件有关的一些信息 而不是无需创建要获取此信息，每个控件实例<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>区域创建一个目录调用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法，并且调用返回仅控件，而不是实例的说明信息控件。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>在网页上的方法。 该示例包含四个部分：  
  
-   一个用户控件，使你能够更改 Web 部件页面上的显示模式。  
  
-   网页包含<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件和<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，以及使用的代码<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法。  
  
-   源代码文件包含两个自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
-   该示例的工作原理时加载浏览器中说明。  
  
 此代码示例的第一部分是使用户能够更改在网页上的显示模式的用户控件。 你应将以下源代码放在一个文件并将其命名 Displaymodemenucs.ascx 或 Displaymodemenuvb.ascx （具体取决于哪种语言使用）。 有关详细信息显示在此控件模式和源代码的说明，请参见[演练： 在 Web 部件页面上更改显示模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/DisplayModeMenuCS.ascx#7)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/DisplayModeMenuVB.ascx#7)]  
  
 下面的代码示例的第二部分是网页。 在页面顶部是两个卡`register`指令、 用户控件和已编译包含两个自定义的组件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 这两种控件中的页面的标记以声明方式引用。 在对的声明性引用<xref:System.Web.UI.WebControls.WebParts.WebPart>控件 (同时开头`aspSample`前缀)，请注意，每个都`exportMode="all"`属性添加到它。 此属性，可以导出。Web 部件说明文件以控制，这将在更高版本中使用，来单步到页中导入该控件。  
  
> [!NOTE]
>  若要启用要导出的描述文件的 Web 部件应用程序的用户<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，还必须启用 Web 应用程序中的导出功能，通过添加`enableExport="true"`属性设为`<webParts>`元素 (即子`<system.web>`元素) 的 Web.config 文件中。 导出在默认情况下处于禁用状态，因此如果尚未为你的应用程序启用导出，编辑 Web.config 文件，并立即执行操作。  
  
 Web 页还提供了对的声明性引用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，嵌套在适当的层次结构的声明性的元素。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法调用的代码内`Button1_Click`方法。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/ImportCatalogPart_GetCS.aspx#1)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/ImportCatalogPart_GetVB.aspx#1)]  
  
 下面的代码示例的第三部分是对这两个源代码<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 若要运行的代码示例，必须编译此源代码。 你可以显式编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以在站点的 App_Code 文件夹中，其中它将动态编译运行时将源代码。 此代码示例使用动态编译。 有关演示的编译这两种方法的演练，请参阅[演练： 开发和使用自定义 Web 服务器控件](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/userinfowebpart.vb#6)]  
  
 现在运行的代码示例。 加载 Web 页的浏览器中。 第一步是导出。每个 web 部件说明文件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件 (有关`TextDisplayWebPart`和`UserInfoWebPart`控件)。 对于每个控件，单击 （由标题栏中的向下箭头），该控件上的谓词菜单然后单击**导出**。 按照说明进行操作以保存。Web 部件控件的说明文件。 你已导出的每个控件的描述文件后，关闭 Web 页上，并编辑页面源文件在编辑器中。 删除`<aspSample:userinfowebpart>`和`<aspSample:textdisplaywebpart>`控制声明元素，然后保存并关闭文件。 （你执行此步骤的目的模拟尚不具有这些控件，以便可以将控件导入到页面的用户）。  
  
 加载再次在浏览器中的网页。 使用**显示模式**下拉列表控件，然后选择**目录**将页切换到目录模式。 在<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件中，单击**浏览**按钮，浏览到。你创建的 web 部件文件选择一个，然后单击**上载**按钮。 对控件的引用应显示它旁边的复选框。 选择该复选框，然后单击**添加**将控件添加到页。 为另一个控件重复此过程。  
  
 当你在此视图中的页上，单击**获取 web 部件说明**页后，可以查看以编程方式访问的效果底部附近的按钮<xref:System.Web.UI.WebControls.WebParts.WebPartDescription>对象中当前加载的控件说明<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 用于访问说明的详细信息，该方法中找到`Button1_Click`页面源文件中，方法是<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>方法。 在按钮的下面标签显示有关控件的基本详细信息。  
  
 在添加后的第一个控件，重复此过程以将第二个控件添加到页。 最后，单击**关闭**退出目录模式，返回页后，可以浏览模式。 这两个自定义控件现在应显示在页中，包含前面导出说明文件时所具有的值。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)" />
      </Docs>
    </Member>
    <Member MemberName="GetWebPart">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.WebParts.WebPart GetWebPart (System.Web.UI.WebControls.WebParts.WebPartDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.WebControls.WebParts.WebPart GetWebPart(class System.Web.UI.WebControls.WebParts.WebPartDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetWebPart (description As WebPartDescription) As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Web::UI::WebControls::WebParts::WebPart ^ GetWebPart(System::Web::UI::WebControls::WebParts::WebPartDescription ^ description);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.Web.UI.WebControls.WebParts.WebPartDescription" />
      </Parameters>
      <Docs>
        <param name="description">
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" />，包含控件的详细信息。</param>
        <summary>根据传入方法的说明值，返回对 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的引用。</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件，它的说明与 <paramref name="description" /> 中的值匹配。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法返回对引用<xref:System.Web.UI.WebControls.WebParts.WebPart>其说明详细信息匹配的值的控件<xref:System.Web.UI.WebControls.WebParts.WebPartDescription>对象传递给方法。 通常情况下，此方法使用连同<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A>方法，用于检索的目录中的控件说明。 单个<xref:System.Web.UI.WebControls.WebParts.WebPart>控件然后可以检索或操作根据需要通过传递单个<xref:System.Web.UI.WebControls.WebParts.WebPartDescription>对象添加到<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>在网页上的方法。 该示例包含四个部分：  
  
-   一个用户控件，使你能够更改 Web 部件页面上的显示模式。  
  
-   网页包含<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件和<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，以及使用的代码<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法。  
  
-   源代码文件包含两个自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
-   该示例的工作原理时加载浏览器中说明。  
  
 此代码示例的第一部分是使用户能够更改在网页上的显示模式的用户控件。 你应将以下源代码放在一个文件并将其命名 Displaymodemenucs.ascx 或 Displaymodemenuvb.ascx （具体取决于哪种语言使用）。 有关详细信息显示在此控件模式和源代码的说明，请参见[演练： 在 Web 部件页面上更改显示模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/DisplayModeMenuCS.ascx#7)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/DisplayModeMenuVB.ascx#7)]  
  
 下面的代码示例的第二部分是网页。 在页面顶部是两个卡`register`指令、 用户控件和已编译包含两个自定义的组件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 这两种控件中的页面的标记以声明方式引用。 在对的声明性引用<xref:System.Web.UI.WebControls.WebParts.WebPart>控件 (同时开头`aspSample`前缀)，请注意，每个都`exportMode="all"`属性添加到它。 此属性，可以导出。Web 部件说明文件以控制，这将在更高版本中使用，来单步到页中导入该控件。  
  
> [!NOTE]
>  若要启用要导出的描述文件的 Web 部件应用程序的用户<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，还必须启用 Web 应用程序中的导出功能，通过添加`enableExport="true"`属性设为`<webParts>`元素 (即子`<system.web>`元素) 的 Web.config 文件中。 导出在默认情况下处于禁用状态，因此如果尚未为你的应用程序启用导出，编辑 Web.config 文件，并立即执行操作。  
  
 Web 页还提供了对的声明性引用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件，嵌套在适当的层次结构的声明性的元素。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法调用的代码内`Button2_Click`方法。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/ImportCatalogPart_GetCS.aspx#1)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/ImportCatalogPart_GetVB.aspx#1)]  
  
 下面的代码示例的第三部分是对这两个源代码<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 若要运行的代码示例，必须编译此源代码。 你可以显式编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以在站点的 App_Code 文件夹中，其中它将动态编译运行时将源代码。 此代码示例使用动态编译。 有关演示的编译这两种方法的演练，请参阅[演练： 开发和使用自定义 Web 服务器控件](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/userinfowebpart.vb#6)]  
  
 现在运行的代码示例。 加载 Web 页的浏览器中。 第一步是导出。每个 web 部件说明文件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件 (有关`TextDisplayWebPart`和`UserInfoWebPart`控件)。 对于每个控件，单击 （由标题栏中的向下箭头），该控件上的谓词菜单然后单击**导出**。 按照说明进行操作以保存。Web 部件控件的说明文件。 你已导出的每个控件的描述文件后，关闭 Web 页上，并编辑页面源文件在编辑器中。 删除`<aspSample:userinfowebpart>`和`<aspSample:textdisplaywebpart>`控制声明元素，然后保存并关闭文件。 （你执行此步骤的目的模拟尚不具有这些控件，以便可以将控件导入到页面的用户）。  
  
 加载再次在浏览器中的网页。 使用**显示模式**下拉列表控件，然后选择**目录**将页切换到目录模式。 在<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件中，单击**浏览**按钮，浏览到。你创建的 web 部件文件选择一个，然后单击**上载**按钮。 对控件的引用应显示它旁边的复选框。 现在的控件说明上载到<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件中，单击**使用 GetWebPart**附近页面底部的按钮。 这将演示调用的效果<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法并传递到它在当前加载的控件说明<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 请注意，关联的服务器控件即可立即添加到 Web 页中，用户无需单击**添加**按钮。 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>方法，在调用`Button2_Click`页面源文件中，方法将返回<xref:System.Web.UI.WebControls.WebParts.WebPart>与当前加载到中的说明关联的控件<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 下一步<xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A>调用方法时，与<xref:System.Web.UI.WebControls.WebParts.WebPart>控件直接添加到页面。 此示例演示如何以编程方式从控件添加<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>无需用户干预的控件。  
  
 在添加后的第一个控件，重复此过程以将第二个控件添加到页。 最后，单击**关闭**退出目录模式，返回页后，可以浏览模式。 这两个自定义控件现在应显示在页中，包含前面导出说明文件时所具有的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="description" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="description" /> 不是可用的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" /> 值。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions" />
      </Docs>
    </Member>
    <Member MemberName="ImportedPartLabelText">
      <MemberSignature Language="C#" Value="public string ImportedPartLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImportedPartLabelText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText" />
      <MemberSignature Language="VB.NET" Value="Public Property ImportedPartLabelText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ImportedPartLabelText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当用户导入一个说明文件后显示的文本，该文本说明或描述导入控件目录中的相应导入控件。</summary>
        <value>包含标签的文本的字符串。 默认值是一条由 .NET Framework 提供的、特定于区域性的消息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>属性通常用于包含描述中包含的控件的较短的常规标志<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>属性以声明方式和以编程方式。 有关完整的代码和运行示例时，所需的说明，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类概述。  
  
 在下面的代码段，请注意，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>控件以声明方式设置属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在此部分的代码，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>以编程方式分配属性值。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当加载浏览器中时，你可以使用**显示模式**要选择的下拉列表控件**目录模式**并将页切换到目录模式。 与目录模式和上载的描述文件中的页，注意各种用户界面 (UI) 中显示的文本字符串有关<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 如果你单击**上载说明文件**按钮，几个属性在 UI 中的文本已更改，包括的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected internal override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub LoadControlState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void LoadControlState(System::Object ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartImportErrorLabelText">
      <MemberSignature Language="C#" Value="public string PartImportErrorLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PartImportErrorLabelText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText" />
      <MemberSignature Language="VB.NET" Value="Public Property PartImportErrorLabelText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PartImportErrorLabelText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一条错误消息，该信息在导入过程中发生错误时显示。</summary>
        <value>包含标签的文本的字符串。 默认值是一条由 .NET Framework 提供的、特定于区域性的消息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>属性可用于向页面尝试导入的描述文件时出现某些问题或错误的情况下发出通知用户。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>属性以声明方式和以编程方式。 有关完整的代码和运行示例时，所需的说明，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类概述。  
  
 在下面的代码段，请注意，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>控件以声明方式设置属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在此部分的代码，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>以编程方式分配属性值。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当加载浏览器中时，你可以使用**显示模式**要选择的下拉列表控件**目录模式**并将页切换到目录模式。 与目录模式和上载的描述文件中的页，注意各种用户界面 (UI) 中显示的文本字符串有关<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 如果你单击**上载说明文件**按钮，几个属性在 UI 中的文本已更改，包括的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected internal override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RenderContents (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RenderContents(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected internal override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function SaveControlState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Object ^ SaveControlState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public override string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" /> 控件的标题栏中显示的标题。</summary>
        <value>用作控件标题的字符串。 默认值是 Web 部件控件集提供的、计算出的控件名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>的标题栏中显示属性值<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控制在目录模式可见控件时。 当控件被声明在页中时，你可以通过使用设置属性的值`Title`属性。 如果未提供标题的值，特定于区域性的默认值用于描述此控件允许用户编辑的属性的类型。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>属性以声明方式和以编程方式。 有关完整的代码和运行示例时，所需的说明，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类概述。  
  
 在下面的代码段，请注意，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>控件以声明方式设置属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在此部分的代码，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>以编程方式分配属性值。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当加载浏览器中时，你可以使用**显示模式**要选择的下拉列表控件**目录模式**并将页切换到目录模式。 与目录模式和上载的描述文件中的页，注意各种用户界面 (UI) 中显示的文本字符串有关<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 如果你单击**上载说明文件**按钮，几个属性在 UI 中的文本已更改，包括的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadButtonText">
      <MemberSignature Language="C#" Value="public string UploadButtonText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UploadButtonText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText" />
      <MemberSignature Language="VB.NET" Value="Public Property UploadButtonText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UploadButtonText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.Button" /> 控件的文本，该控件初始化说明文件的上载。</summary>
        <value>用作 <see cref="T:System.Web.UI.WebControls.Button" /> 的文本的字符串。 该默认值是一个由 Web 部件控件集提供的、特定于区域性的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>属性提供的文本<xref:System.Web.UI.WebControls.Button>启动上载过程的控件。 如果你自定义将文本分配到此属性，或<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>属性，文本应进行清除用户正在上载的描述文件。 文本不应假设或表示上载过程实际上上载该控件本身。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>属性以声明方式和以编程方式。 有关完整的代码和运行示例时，所需的说明，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类概述。  
  
 在下面的代码段，请注意，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>控件以声明方式设置属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在此部分的代码，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>以编程方式分配属性值。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当加载浏览器中时，你可以使用**显示模式**要选择的下拉列表控件**目录模式**并将页切换到目录模式。 与目录模式和上载的描述文件中的页，注意各种用户界面 (UI) 中显示的文本字符串有关<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 如果你单击**上载说明文件**按钮，几个属性在 UI 中的文本已更改，包括的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadHelpText">
      <MemberSignature Language="C#" Value="public string UploadHelpText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UploadHelpText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText" />
      <MemberSignature Language="VB.NET" Value="Public Property UploadHelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UploadHelpText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一条文本消息，该消息告诉用户如何上载说明文件。</summary>
        <value>用作用户上载说明文件时的提示的字符串。 该默认值是一个由 Web 部件控件集提供的、特定于区域性的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>属性提供的简短句子或短语的用户，告知他们单击一个按钮，用于上载描述文件的说明。 如果你自定义将文本分配到此属性，或<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>属性，文本应进行清除用户正在上载的描述文件。 文本不应假设或表示上载过程实际上上载该控件本身。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>属性以声明方式和以编程方式。 有关完整的代码和运行示例时，所需的说明，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>类概述。  
  
 在下面的代码段，请注意，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>控件以声明方式设置属性值。  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 在此部分的代码，<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>以编程方式分配属性值。  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 当加载浏览器中时，你可以使用**显示模式**要选择的下拉列表控件**目录模式**并将页切换到目录模式。 与目录模式和上载的描述文件中的页，注意各种用户界面 (UI) 中显示的文本字符串有关<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 如果你单击**上载说明文件**按钮，几个属性在 UI 中的文本已更改，包括的文本<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>