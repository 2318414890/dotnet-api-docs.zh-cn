<Type Name="GenericWebPart" FullName="System.Web.UI.WebControls.WebParts.GenericWebPart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9a3c29e22c6462b54fca489aff43e64ce4abbfed" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30591241" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class GenericWebPart : System.Web.UI.WebControls.WebParts.WebPart" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GenericWebPart extends System.Web.UI.WebControls.WebParts.WebPart" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />
  <TypeSignature Language="VB.NET" Value="Public Class GenericWebPart&#xA;Inherits WebPart" />
  <TypeSignature Language="C++ CLI" Value="public ref class GenericWebPart : System::Web::UI::WebControls::WebParts::WebPart" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.WebPart</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>对不是 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件的服务器控件进行包装，使其在运行时与真正的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件具有相同的外观和行为。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>存在控件为服务器控件不提供的运行时包装<xref:System.Web.UI.WebControls.WebParts.WebPart>控制，以便可以在 Web 部件页及应用程序中使用此类控件。 当开发人员添加服务器控件-如用户控件、 ASP.NET 服务器控件或现有的自定义控件-<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>控件，<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件自动换行的服务器控件在运行时使它们可能会表现出相同为 true，则功能<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
 下表比较和对照<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件和<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
|<xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 控件|<xref:System.Web.UI.WebControls.WebParts.WebPart> 控件|  
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|  
|存在，无法为服务器控件不<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，通过 Web 部件功能，因此该任何 ASP.NET，在 Web 部件应用程序可以参与自定义或用户控件。|存在是为了创建具有本机内置的 Web 部件功能的自定义 ASP.NET 控件。 这包括个性化、 连接、 导入和导出和拖放功能。|  
|永远不会在页面的标记中声明。 仅在运行时，包装服务器控件并为包装的控件 （或子控件） 提供的完整功能存在<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。|可以声明中的页面的标记在设计时，如 ASP.NET 服务器控件，只不过在中声明<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域。|  
|包括并将其子控件集成到 Web 部件个性化处理，以便它可以充当真正<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 此自动发生，这可使开发人员能够使用 Web 部件应用程序中的服务器控件和用户控件更加简单。|将自动包含在 Web 部件个性化过程。|  
|可以在运行时以编程方式访问 (通过使用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A>方法并传递给它的子服务器控件)，类似于真正<xref:System.Web.UI.WebControls.WebParts.WebPart>控件或标准的 ASP.NET 控件。|可以访问以编程方式在运行时，与标准的 ASP.NET 控件一样。|  
  
 用户得益于<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控制，因为它提供了一致的用户体验。 所有服务器控件可以都进行功能上相当于<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，然后将具有的相同的一致的用户界面 (UI) 元素，例如谓词、 图标、 标题和标头。 开发人员受益于<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控制，因为它将使它们能够重复使用现有的用户控件和 Web 部件应用程序中的服务器控件。  
  
> [!NOTE]
>  当创建 Web 部件页时，则不需要执行任何操作即可启用现有的用户控件或自定义控件进行包装<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件。 只需将添加到服务器或用户控件<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域，以编程方式或通过声明中页面的标记，并自动设置的 Web 部件控件将包装您的控件与<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>在运行时的对象。  
  
 因为服务器控件，都将置于<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域进行包装<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件在运行时，开发人员可以使用普通的服务器和用户控件完全就像它们是<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 请注意，如果你声明自定义控件，继承自基类<xref:System.Web.UI.Control>类内<xref:System.Web.UI.WebControls.WebParts.WebPartZone>，这些控件无法支持的内部函数使用<xref:System.Web.UI.WebControls.WebParts.WebPart>属性。 因此，您無法宣告<xref:System.Web.UI.WebControls.WebParts.IWebPart>属性对此类控件，其中包括属性，例如<xref:System.Web.UI.WebControls.WebParts.IWebPart.Title%2A>属性和<xref:System.Web.UI.WebControls.WebParts.IWebPart.Description%2A>属性。 与此相反，其他类型的服务器控件 (如<xref:System.Web.UI.WebControls.WebParts.WebPart>控件、 用户控件和继承的自定义控件<xref:System.Web.UI.WebControls.WebControl>) 可以声明这些属性，因为它们支持 expando 属性的使用。  
  
 Expando 属性是实际的字符串，可以添加到类动态作为属性，通过<xref:System.Web.UI.IAttributeAccessor>接口。 这些控件可实现此接口，包括<xref:System.Web.UI.WebControls.WebControl>类及其子级，可以使用 expando 属性。 因为基<xref:System.Web.UI.Control>类不支持 expando 属性，继承自的自定义控件时<xref:System.Web.UI.Control>类放置在<xref:System.Web.UI.WebControls.WebParts.WebPartZone>和使用已包装<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件在运行时，Web 部件控件集不能内部函数中动态添加<xref:System.Web.UI.WebControls.WebParts.IWebPart>到自定义控件的属性。 在这种情况下有两种选择。 你可以使用自定义控件，而无需<xref:System.Web.UI.WebControls.WebParts.IWebPart>属性，也可以实现<xref:System.Web.UI.WebControls.WebParts.IWebPart>在自定义控件中，使其可以使用属性的接口。  
  
 作为举例说明如何控件继承<xref:System.Web.UI.WebControls.WebControl>可以使用<xref:System.Web.UI.WebControls.WebParts.IWebPart>属性，如果你声明一个 ASP.NET<xref:System.Web.UI.WebControls.Calendar>页面的标记中的控件 (在<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域) 在设计时，即使此控件不会继承从<xref:System.Web.UI.WebControls.WebParts.WebPart>类，并且不以本机方式包含<xref:System.Web.UI.WebControls.WebParts.WebPart>成员，你可以仍将其完全相同<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 你可以声明<xref:System.Web.UI.WebControls.WebParts.WebPart>在日历上的属性控制，如<xref:System.Web.UI.WebControls.WebParts.IWebPart.Title%2A>， <xref:System.Web.UI.WebControls.WebParts.IWebPart.Description%2A>，和其他人。 在运行时，可以使用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A>方法，它返回<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件，可动态包装日历控件中，并使用它以编程方式就像与<xref:System.Web.UI.WebControls.WebParts.WebPart>控制，有权访问所有相同属性、 事件和方法。  
  
 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件具有使您可以访问其基础的服务器控件的关键属性：<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.ChildControl%2A>属性。 此属性允许开发人员能够以编程方式访问服务器控件。 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.ChildControl%2A>还使用属性<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控件以从子控件，访问个性化数据以及执行授权，如果<xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>属性设置。  
  
 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件具有多个其他属性，所有这些重写继承自基类的属性<xref:System.Web.UI.WebControls.WebParts.WebPart>类。 如前所述，你可以使用这些属性与任何子控件，以便它可以充当<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 一个重要的属性是<xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>属性; 它将确定是否可导出的所有属性，或只有标记为非敏感，可以导出。 面向用户界面的属性继承自<xref:System.Web.UI.WebControls.WebParts.WebPart>类，如<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.CatalogIconImageUrl%2A>， <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Description%2A>， <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Height%2A>， <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Title%2A>， <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.TitleUrl%2A>，和<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Width%2A>，可以是任何服务器控件的声明性标记中设置置于<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域。  
  
 中的重要方法<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>类包括<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.CreateControlCollection%2A>方法，创建与关联的控件 （包括子控件） 的集合<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件，与<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Render%2A>方法，该委托到的所有呈现方法已包装的子控件。 在构造函数<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>类保护，并且旨在供内部使用或用于扩展性方案。  
  
 有用于处理一些其他有用见解<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件。 如果你想要设置中的重写属性的默认值<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>类，你的用户控件或自定义服务器控件可以实现<xref:System.Web.UI.WebControls.WebParts.IWebPart>和<xref:System.Web.UI.WebControls.WebParts.IWebActionable>接口，并重写其成员。 在运行时，<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件将获取子控件实现接口的实现的属性及其值。 如果您的控件定义的任何属性作为可个性化 (通过使用`Personalizable`元数据属性)，则<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件自动使这些属性在运行时，可个性化属性一样的个性化上<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
 如果你想要为您的控件提供 Web 部件的编辑功能，你可以实施<xref:System.Web.UI.WebControls.WebParts.IWebEditable>接口。 在运行时，当<xref:System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts%2A>调用方法时，<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件的代码<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.WebBrowsableObject%2A>属性将调入相同的属性在子控件中，并使用子控件的实现来创建关联的自定义<xref:System.Web.UI.WebControls.WebParts.EditorPart>控件。  
  
   
  
## Examples  
 下面的代码示例演示如何<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件自动换行不是一个服务器控件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件在运行时。  
  
 下面的代码示例的第一部分包含 Web 部件页包含两个<xref:System.Web.UI.WebControls.WebParts.WebPartZone>控件。 每个区域内是一个标准的 ASP.NET 服务器控件。 因为这些控件位于<xref:System.Web.UI.WebControls.WebParts.WebPartZone>区域，它们将自动换行与<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控制当编译页。 因此，你可以声明<xref:System.Web.UI.WebControls.WebParts.WebPart>类上这些控件的属性。 如果您单击加载在浏览器中，页后**显示所有属性值**按钮，详细信息的每个控件显示在标签。 若要显示如何<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件的工作原理，<xref:System.Web.UI.WebControls.Calendar>第一个区域中的控件具有某些<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>.aspx 页面中，声明性标记中设置属性而<xref:System.Web.UI.WebControls.BulletedList>控件不。 加载页面后，请注意这两个控件的属性值中的差异，并且两者都父<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件。  
  
 [!code-aspx-csharp[WebParts_GenericWebPart_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/CS/genericwebpartcs.aspx#1)]
 [!code-aspx-vb[WebParts_GenericWebPart_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/VB/genericwebpartvb.aspx#1)]  
  
 下面的代码示例的第二部分显示的分部类的访问的某些属性<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>以编程方式控制。 请注意，在`Page_Load`方法，<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A>方法用于检索的运行时实例<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>包装服务器控件的控件。 此方法获取对父级的引用的<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件使您能够以编程方式与普通的服务器或用户控件，就好像<xref:System.Web.UI.WebControls.WebParts.WebPart>控件在运行时。  
  
 [!code-csharp[WebParts_GenericWebPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/CS/genericwebpart.cs#3)]
 [!code-vb[WebParts_GenericWebPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/VB/genericwebpart.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>有几个情况下有必要继承<see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />类。 一个此类情况下将为开发人员想要实现的构造函数中的某些自定义操作时<see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />创建控件。 例如，你可能想要存储之外控件集合中的某个位置的子控件<see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />类。 如果从继承<see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />类，你还需要从继承<see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />类并重写其<see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(System.Web.UI.Control)" />方法，以使其能够创建自定义控件。</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal GenericWebPart (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.GenericWebPart.#ctor(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; GenericWebPart(System::Web::UI::Control ^ control);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">成为 <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> 控件实例的子控件的服务器控件。</param>
        <summary>通过传入对成为子控件的控件的引用来初始化 <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> 控件的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.%23ctor%28System.Web.UI.Control%29>构造函数由调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制在其<xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A>方法，以初始化的实例<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>通过传入对子服务器控件的引用的控件。 后<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>创建对象，你可以引用子控件使用<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.ChildControl%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> 的类型为 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />。  
  
 \- 或 -  
  
 <paramref name="control" /> 具有 <see langword="null" /> 或空的 <see cref="P:System.Web.UI.Control.ID" /> 属性。  
  
 \- 或 -  
  
 <paramref name="control" /> 已被输出缓存。</exception>
      </Docs>
    </Member>
    <Member MemberName="CatalogIconImageUrl">
      <MemberSignature Language="C#" Value="public override string CatalogIconImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CatalogIconImageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.GenericWebPart.CatalogIconImageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CatalogIconImageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CatalogIconImageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置图像的 URL，该图像在控件目录中表示一个 <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> 控件。</summary>
        <value>表示图像的 URL 的字符串，该图像用于在目录中表示控件。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web 部件应用程序通常提供的用户可以添加到页面的控件的一个目录 （或列表）。 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.CatalogIconImageUrl%2A>控件上的属性包含对出现在目录中表示的控件的图像的 URL。 此属性重写基属性，以便你可以访问的子控件上的属性，就像它是真正的<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
 可以通过编程方式来以及对 Web 网页、 的声明性标记控件设置属性的值。 若要提供默认值的属性，每次使用控件时，可以实现<xref:System.Web.UI.WebControls.WebParts.IWebPart>接口。  
  
   
  
## Examples  
 下面的代码示例演示如何声明和以编程方式使用<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.CatalogIconImageUrl%2A>属性。 在示例部分中找到该示例的完整源代码<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>概述主题。  
  
 下面的代码示例的第一部分演示如何<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.CatalogIconImageUrl%2A>属性中的服务器控件以声明方式设置<xref:System.Web.UI.WebControls.WebParts.WebPartZone>控件。  
  
 [!code-aspx-csharp[WebParts_GenericWebPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/CS/genericwebpartcs.aspx#2)]
 [!code-aspx-vb[WebParts_GenericWebPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/VB/genericwebpartvb.aspx#2)]  
  
 下面的代码示例的第二部分演示了当用户单击时以编程方式访问属性的值的方法**显示所有属性值**按钮。  
  
 [!code-csharp[WebParts_GenericWebPart_Overview#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/CS/genericwebpart.cs#4)]
 [!code-vb[WebParts_GenericWebPart_Overview#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/VB/genericwebpart.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildControl">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control ChildControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control ChildControl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.GenericWebPart.ChildControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChildControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ ChildControl { System::Web::UI::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对子控件的引用，该子控件在运行时将由 <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> 控件包装。</summary>
        <value>引用被包装的子控件的 <see cref="T:System.Web.UI.Control" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.ChildControl%2A>属性提供了一种能够访问子控件由包装<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件。 例如，<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控件使用<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.ChildControl%2A>属性以从子控件提取个性化数据。  
  
   
  
## Examples  
 下面的代码示例演示如何以编程方式使用的<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.ChildControl%2A>属性。 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.ChildControl%2A>属性以编程方式访问，以检索的子控件有关的信息<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件。 在示例部分中找到该示例的完整源代码<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>概述主题。  
  
 [!code-csharp[WebParts_GenericWebPart_Overview#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/CS/genericwebpart.cs#4)]
 [!code-vb[WebParts_GenericWebPart_Overview#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/VB/genericwebpart.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected internal override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.GenericWebPart.CreateChildControls" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub CreateChildControls ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void CreateChildControls();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>由 ASP.NET 页框架调用，以通知服务器控件在准备回发或呈现时使用基于撰写的实现来创建其所包含任何子控件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.GenericWebPart.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重写基方法，以创建由 <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> 控件所包装的子控件组成的只读集合。</summary>
        <returns>一个包含子控件的 <see cref="T:System.Web.UI.ControlCollection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.CreateControlCollection%2A>方法创建的私有只读集合，其中包含的子控件的单个控件的<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件。 此集合在创建，以便开发人员不能手动添加到其他控件<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件。  
  
 如果你想要创建自定义<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件而不向专用集合添加的子控件，您可以从其中<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>类，请替代<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.%23ctor%2A>构造函数，并提供用于存储子控件的不同方法所引用的<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.ChildControl%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Control.CreateControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="CreateEditorParts">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.WebParts.EditorPartCollection CreateEditorParts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.WebControls.WebParts.EditorPartCollection CreateEditorParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.GenericWebPart.CreateEditorParts" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateEditorParts () As EditorPartCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Web::UI::WebControls::WebParts::EditorPartCollection ^ CreateEditorParts();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.EditorPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回自定义 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> 控件的集合，这些控件可用于在 <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> 控件的子控件处于编辑模式时对其进行编辑。</summary>
        <returns>一个 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection" />，其中包含与服务器控件关联的自定义 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> 控件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.CreateEditorParts%2A>控件进入编辑显示模式时调用方法。 此方法重写继承自基方法<xref:System.Web.UI.WebControls.WebParts.WebPart>类，因为的情况下<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件，它是正在编辑，未子控件<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件本身。 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.CreateEditorParts%2A>方法将强制转换到的子控件<xref:System.Web.UI.WebControls.WebParts.IWebEditable>接口，使控件能够对其进行编辑。  
  
 此重写的方法是一种使不派生自的服务器控件<xref:System.Web.UI.WebControls.WebParts.WebPart>类-包括 ASP.NET 服务器控件和自定义服务器控件-要编辑作为普通<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public override string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.GenericWebPart.Description" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一条短语，该短语在服务器控件的工具提示和目录中用来概述该控件的作用。</summary>
        <value>字符串，简要概述控件的功能。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Description%2A>属性值通常用于为提供的服务器控件的列表的目录中的控件的描述性字符串，并为工具提示控件的标题栏中。 当用户将鼠标指针定位控件的标题栏中的标题文本上时，对属性的内容将显示在工具提示。  
  
 此属性重写基属性，以便你可以访问的子控件上的属性，就像它是真正的<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
 可以通过编程方式来以及对 Web 网页、 的声明性标记控件设置属性的值。 若要提供默认值的属性，每次使用控件时，可以实现<xref:System.Web.UI.WebControls.WebParts.IWebPart>接口。  
  
   
  
## Examples  
 下面的代码示例演示如何声明和以编程方式使用<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Description%2A>属性。 在示例部分中找到该示例的完整源代码<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>概述主题。  
  
 下面的代码示例的第一部分演示如何<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Description%2A>属性中的服务器控件以声明方式设置<xref:System.Web.UI.WebControls.WebParts.WebPartZone>控件。  
  
 [!code-aspx-csharp[WebParts_GenericWebPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/CS/genericwebpartcs.aspx#2)]
 [!code-aspx-vb[WebParts_GenericWebPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/VB/genericwebpartvb.aspx#2)]  
  
 下面的代码示例的第二部分演示如何访问属性以编程方式在标签中显示其值。  
  
 [!code-csharp[WebParts_GenericWebPart_Overview#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/CS/genericwebpart.cs#4)]
 [!code-vb[WebParts_GenericWebPart_Overview#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/VB/genericwebpart.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.Unit Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit Height" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.GenericWebPart.Height" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Height As Unit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::Unit Height { System::Web::UI::WebControls::Unit get(); void set(System::Web::UI::WebControls::Unit value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件的高度（以像素为单位）。</summary>
        <value>一个指示控件高度的 <see cref="T:System.Web.UI.WebControls.Unit" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性重写基属性，以便你可以获取或设置子控件上的高度，就像它是真正的<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Height" />
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public override sealed string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.GenericWebPart.ID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件的 ID。 此值是不可继承的。</summary>
        <value>包含控件 ID 的字符串。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Control.ID" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.GenericWebPart.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">表示在客户端上呈现 HTML 内容的输出流的 <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>将对控件内容的呈现委托给子控件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtitle">
      <MemberSignature Language="C#" Value="public override string Subtitle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Subtitle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.GenericWebPart.Subtitle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Subtitle As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Subtitle { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个字符串，该字符串与 <see cref="P:System.Web.UI.WebControls.WebParts.GenericWebPart.Title" /> 属性值连接即形成控件的完整标题。</summary>
        <value>作为控件副标题的字符串。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Subtitle%2A>属性 （可选） 若要返回将追加到您的自定义的标准副标题字符串<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件的标题。  
  
 此属性重写基属性，以便你可以访问的子控件上的属性，就像它是真正的<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
 如果你实现<xref:System.Web.UI.WebControls.WebParts.IWebPart.Subtitle%2A>用户控件或自定义控件，若要提供默认值中的属性，将自动设置的 Web 部件控件将其附加到控件的值<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Title%2A>属性在运行时创建一个完整的标题。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.IWebPart.Subtitle" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public override string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.GenericWebPart.Title" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> 控件的标题。</summary>
        <value>一个表示部件控件的标题的字符串。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过设置部件控件的标题栏中的可见标题文本<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Title%2A>属性。  
  
 如果未提供控件的标题的 Web 部件控件集自动计算要用作标题的默认字符串。 有关详情，请参阅<xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A>。 另外，还有可能提供追加到的标题字符串默认副标题。 有关详细信息，请参阅<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Subtitle%2A>。  
  
 此属性重写基属性，以便你可以访问的子控件上的属性，就像它是真正的<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
 可以通过编程方式来以及对 Web 网页、 的声明性标记控件设置属性的值。 若要提供默认值的属性，每次使用控件时，可以实现<xref:System.Web.UI.WebControls.WebParts.IWebPart>接口。  
  
   
  
## Examples  
 下面的代码示例演示如何声明和以编程方式使用<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Title%2A>属性。 在示例部分中找到该示例的完整源代码<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>概述主题。  
  
 下面的代码示例的第一部分演示如何<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Title%2A>属性中的服务器控件以声明方式设置<xref:System.Web.UI.WebControls.WebParts.WebPartZone>控件。  
  
 [!code-aspx-csharp[WebParts_GenericWebPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/CS/genericwebpartcs.aspx#2)]
 [!code-aspx-vb[WebParts_GenericWebPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/VB/genericwebpartvb.aspx#2)]  
  
 下面的代码示例的第二部分演示如何访问属性以编程方式在标签中显示其值。  
  
 [!code-csharp[WebParts_GenericWebPart_Overview#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/CS/genericwebpart.cs#4)]
 [!code-vb[WebParts_GenericWebPart_Overview#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/VB/genericwebpart.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.Part.Title" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.IWebPart.Title" />
      </Docs>
    </Member>
    <Member MemberName="TitleIconImageUrl">
      <MemberSignature Language="C#" Value="public override string TitleIconImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TitleIconImageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.GenericWebPart.TitleIconImageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property TitleIconImageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TitleIconImageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置图像的 URL，该图像用于在 <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> 控件自身的标题栏中表示该控件。</summary>
        <value>表示图像的 URL 的字符串。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart.TitleIconImageUrl%2A>属性使您能够将与图标关联<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件。 该图标将显示在控件的标题栏中。 为了确保主题一致性，应用程序开发人员通常使此图标类似于表示 Web 部件控件的目录中的控件的图像 (中引用的映像<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.CatalogIconImageUrl%2A>属性)。  
  
 它实现的 Web 部件控件集，一样<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.TitleIconImageUrl%2A>属性可由最终用户更改控件的标题栏中显示的图标的图像进行个性化设置。  
  
 此属性重写基属性，以便你可以访问的子控件上的属性，就像它是真正的<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
 可以通过编程方式来以及对 Web 网页、 的声明性标记控件设置属性的值。 若要提供默认值的属性，每次使用控件时，可以实现<xref:System.Web.UI.WebControls.WebParts.IWebPart>接口。  
  
   
  
## Examples  
 下面的代码示例演示如何声明和以编程方式使用<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.TitleIconImageUrl%2A>属性。 在示例部分中找到该示例的完整源代码<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>概述主题。  
  
 下面的代码示例的第一部分演示如何<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.TitleIconImageUrl%2A>属性中的服务器控件以声明方式设置<xref:System.Web.UI.WebControls.WebParts.WebPartZone>控件。  
  
 [!code-aspx-csharp[WebParts_GenericWebPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/CS/genericwebpartcs.aspx#2)]
 [!code-aspx-vb[WebParts_GenericWebPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/VB/genericwebpartvb.aspx#2)]  
  
 下面的代码示例的第二部分演示如何访问属性以编程方式在标签中显示其值。  
  
 [!code-csharp[WebParts_GenericWebPart_Overview#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/CS/genericwebpart.cs#4)]
 [!code-vb[WebParts_GenericWebPart_Overview#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/VB/genericwebpart.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleUrl">
      <MemberSignature Language="C#" Value="public override string TitleUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TitleUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.GenericWebPart.TitleUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property TitleUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TitleUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置有关 <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> 控件补充信息的 URL。</summary>
        <value>一个字符串，表示有关 <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> 控件更多信息的 URL。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将分配到的 URL 时<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.TitleUrl%2A>属性，该控件的标题将变为链接。 此属性提供便利的方法，让最终用户可以访问控件的相关的其他信息。 其他信息可以包括版权数据、 联系人数据有关的控件，创建者或控件的用途的摘要详细信息。  
  
 此属性重写基属性，以便你可以访问的子控件上的属性，就像它是真正的<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
 可以通过编程方式来以及对 Web 网页、 的声明性标记控件设置属性的值。 若要提供默认值的属性，每次使用控件时，可以实现<xref:System.Web.UI.WebControls.WebParts.IWebPart>接口。  
  
   
  
## Examples  
 下面的代码示例演示如何声明和以编程方式使用<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.TitleUrl%2A>属性。 在示例部分中找到该示例的完整源代码<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>概述主题。  
  
 下面的代码示例的第一部分演示如何<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.TitleUrl%2A>属性中的服务器控件以声明方式设置<xref:System.Web.UI.WebControls.WebParts.WebPartZone>控件。  
  
 [!code-aspx-csharp[WebParts_GenericWebPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/CS/genericwebpartcs.aspx#2)]
 [!code-aspx-vb[WebParts_GenericWebPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/VB/genericwebpartvb.aspx#2)]  
  
 下面的代码示例的第二部分演示如何访问属性以编程方式在标签中显示其值。  
  
 [!code-csharp[WebParts_GenericWebPart_Overview#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/CS/genericwebpart.cs#4)]
 [!code-vb[WebParts_GenericWebPart_Overview#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_GenericWebPart_Overview/VB/genericwebpart.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Verbs">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.WebParts.WebPartVerbCollection Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartVerbCollection Verbs" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.GenericWebPart.Verbs" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Verbs As WebPartVerbCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::WebParts::WebPartVerbCollection ^ Verbs { System::Web::UI::WebControls::WebParts::WebPartVerbCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与 <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> 控件关联的自定义谓词的集合。</summary>
        <value>一个 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerbCollection" />，其中包含与 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> 控件关联的自定义 <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> 对象。 默认值为 <see cref="F:System.Web.UI.WebControls.WebParts.WebPartVerbCollection.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 谓词派生自<xref:System.Web.UI.WebControls.WebParts.WebPartVerb>类，并提供用户界面 (UI) 操作，用户可对执行<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件。 通常情况下，在作为按钮、 链接或菜单项的用户界面中表示谓词。 有标准谓词用于打开、 关闭、 编辑和最小化控件与用于导出的定义控件或加载的帮助文件的其他谓词。 中不包括这些谓词<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Verbs%2A>集合，因为该集合包含仅自定义的谓词。  
  
 此属性重写基属性，以便你可以访问的子控件上的属性，就像它是真正的<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 如果子控件实现<xref:System.Web.UI.WebControls.WebParts.IWebActionable>界面并因此重写其<xref:System.Web.UI.WebControls.WebParts.IWebActionable.Verbs%2A?displayProperty=nameWithType>属性，<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件使用的子控件的实现时<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Verbs%2A?displayProperty=nameWithType>属性调用上<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件。  
  
 如果创建自定义谓词并将其添加到<xref:System.Web.UI.WebControls.WebParts.WebPart.Verbs%2A>集合，然后就可以访问通过编程方式从谓词<xref:System.Web.UI.WebControls.WebParts.GenericWebPart.Verbs%2A>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.IWebActionable.Verbs" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.Verbs" />
      </Docs>
    </Member>
    <Member MemberName="WebBrowsableObject">
      <MemberSignature Language="C#" Value="public override object WebBrowsableObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object WebBrowsableObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.GenericWebPart.WebBrowsableObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property WebBrowsableObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ WebBrowsableObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对子控件的引用，以使该控件可由自定义 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> 控件进行编辑。</summary>
        <value>一个 <see cref="T:System.Object" />，其中包括 <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> 控件的子控件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果子控件实现<xref:System.Web.UI.WebControls.WebParts.IWebEditable>接口，并重写其<xref:System.Web.UI.WebControls.WebParts.IWebEditable.WebBrowsableObject%2A>属性，当用户选择的控件的编辑，<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>控件将调入子控制通过<xref:System.Web.UI.WebControls.WebParts.IWebEditable.WebBrowsableObject%2A>属性，并使用子控件的实现<xref:System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts%2A>方法。 此机制允许不是服务器或用户控件<xref:System.Web.UI.WebControls.WebParts.WebPart>控制使用关联的自定义工作<xref:System.Web.UI.WebControls.WebParts.EditorPart>Web 部件应用程序中的控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.IWebEditable.WebBrowsableObject" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.WebBrowsableObject" />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.Unit Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit Width" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.GenericWebPart.Width" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Width As Unit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::Unit Width { System::Web::UI::WebControls::Unit get(); void set(System::Web::UI::WebControls::Unit value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件的宽度（以像素为单位）。</summary>
        <value>一个指示控件宽度的 <see cref="T:System.Web.UI.WebControls.Unit" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性重写基属性，以便你可以获取或设置子控件上的宽度，就像它是真正的<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Width" />
      </Docs>
    </Member>
  </Members>
</Type>