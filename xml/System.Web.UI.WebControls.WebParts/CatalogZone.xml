<Type Name="CatalogZone" FullName="System.Web.UI.WebControls.WebParts.CatalogZone">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="79c0c966fb9465678c7f5249f6196fa4c0aa4d5a" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39812983" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CatalogZone : System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CatalogZone extends System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.CatalogZone" />
  <TypeSignature Language="VB.NET" Value="Public Class CatalogZone&#xA;Inherits CatalogZoneBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class CatalogZone : System::Web::UI::WebControls::WebParts::CatalogZoneBase" />
  <TypeSignature Language="F#" Value="type CatalogZone = class&#xA;    inherit CatalogZoneBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.CatalogZoneBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>用作 Web 部件控件集内的主控件，用于在网页中承载 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 控件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Web 部件控件集，区域是包含 Web 部件控件的网页上的区域。 Web 部件区域创建的一个区域控件，它是一种类型的<xref:System.Web.UI.WebControls.CompositeControl>设计为包含其他控件。 区域的主要功能是它包含的控件进行布局，并为这些控件提供常见的用户界面 (UI)。 有关区域和如何在 Web 部件应用程序中使用的常规信息，请参阅基<xref:System.Web.UI.WebControls.WebParts.WebZone>类，并[Web 部件控件集概述](http://msdn.microsoft.com/library/ff0149e4-695a-401a-8cda-53df6d7d2668)。  
  
 Web 部件控件的一个重要功能是它们根据其首选项，允许最终用户修改 （或个性化） 网页，并为将来的浏览器会话保存其个性化的设置。 修改 Web 部件页的一个方面包括能够添加<xref:System.Web.UI.WebControls.WebParts.WebPart>控件或其他服务器控件添加到 Web 部件页。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件提供的列表或目录的用户可以添加到页面的控件。  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件是一个 Web 部件控件集内的基本控件。 它派生<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>类和大部分其行为继承自该类。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>类实质上是将添加到类的基类实现区域模板的<xref:System.Web.UI.ITemplate>接口。 区域模板使开发人员能够以声明方式添加<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件以页持久性格式中的区域。  
  
> [!IMPORTANT]
>  一个<xref:System.Web.UI.WebControls.WebParts.CatalogZone>区域只能包含<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件，并与之相反，<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件可以驻留在派生的区域仅<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>类，如<xref:System.Web.UI.WebControls.WebParts.CatalogZone>。  
  
 一个<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件仅当用户切换网页到目录显示模式变为可见 (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>)。 目录可以包含多种类型的<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件。 每个<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件是一种包含用户可添加到页面的服务器控件的容器。 <xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件根据其包含的服务器控件的来源不同而有所不同。 下表总结了<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控制提供包含与 Web 部件控件集以及，每个控件，哪种服务器控制它。  
  
|控件|描述|  
|-------------|-----------------|  
|<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>|维护对已关闭的页的控件的引用。 这些控件可以由用户重新打开 （添加的回页面）。|  
|<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>|包含对在 Web 页的标记中的 Web 部件目录中声明的控件的引用。 这些控件可以由用户添加到 Web 页。|  
|<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>|提供用户界面，用户可以上传的定义文件 (与 XML 文件。Web 部件扩展并包含指定的格式的状态信息） 来控制对目录，以便该控件可以添加到 Web 页。|  
  
 因为<xref:System.Web.UI.WebControls.WebParts.CatalogZone>类将仅在区域模板添加到其基类的行为，它具有几个成员。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A>构造函数是默认构造函数; 使用它，您可以初始化的新实例<xref:System.Web.UI.WebControls.WebParts.CatalogZone>类。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A>属性获取或设置一个引用，<xref:System.Web.UI.ITemplate>对象，其中包含该区域的控件。 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A>方法至关重要。 它将重写基方法，以创建集合的所有<xref:System.Web.UI.WebControls.WebParts.CatalogPart>区域模板中包含的控件。  
  
> [!NOTE]
>  中的按钮<xref:System.Web.UI.WebControls.WebParts.CatalogZone>UI 需要客户端脚本才能正常工作。 如果在浏览器中禁用了脚本，用户将无法执行操作通过<xref:System.Web.UI.WebControls.WebParts.CatalogZone>UI。  
  
## <a name="accessibility"></a>可访问性  
 默认情况下，此控件呈现的标记可能不符合可访问性标准，如 Web 内容辅助功能准则 1.0 (WCAG) 优先级为 1 指导原则。 有关此控件的辅助功能支持的详细信息，请参阅[ASP.NET 控件和可访问性](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0)。  
  
   
  
## Examples  
 下面的代码示例演示如何声明和以编程方式使用<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件。 代码示例包含四个部分：  
  
-   使你能够更改的用户控件在网页上显示模式。  
  
-   自定义的文件的源代码<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控制和自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>目录导入并添加到 Web 页控件。  
  
-   声明用户控件和自定义 Web 页<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件。  
  
-   如何运行该示例的说明。  
  
 此代码示例的第一个部分是使用户能够更改网页上的显示模式的用户控件。 有关详细信息显示在此控件模式和对源代码的说明，请参见[演练： 在 Web 部件页上更改显示模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_CatalogZone_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/displaymodemenucs.ascx#7)]
 [!code-aspx-vb[WebParts_CatalogZone_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/displaymodemenuvb.ascx#7)]  
  
 代码示例的第二部分包含自定义代码<xref:System.Web.UI.WebControls.WebParts.CatalogZone>和<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 代码<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件演示了如何从继承<xref:System.Web.UI.WebControls.WebParts.CatalogZone>类，并通过在构造函数中设置一些默认属性值来自定义其属性。 源代码还演示了如何创建自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>类名为`TextDisplayWebPart`。 这是与关联的控件。您将此代码示例的一部分导入的 web 部件说明文件。 使用导入说明文件后<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件在网页上，你将能够添加`TextDisplayWebPart`到页上，完全指定预配置描述文件中的控件。  
  
 若要运行的代码示例，必须编译此源代码。 可以显式对其进行编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以将源代码放在你网站的 App_Code 文件夹中，其中它将被动态编译在运行时。 此代码示例使用动态编译，因此如果你想要运行该示例通过这种方式，命名的源代码文件，并将其添加到 Web 应用程序的根目录下的 App_Code 子文件夹。 有关演示这两种方法编译的演练，请参阅[演练： 开发和使用自定义 Web 服务器控件](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_CatalogZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogSamples.cs#1)]
 [!code-vb[WebParts_CatalogZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogSamples.vb#1)]  
  
 代码示例的第三部分是包含的控件的网页。 它包含`Register`指令用于用户控件，以及另一个用于与自定义控件的源文件。 请注意，在第二个指令，它没有命名程序集，因为该示例不使用程序集，它使用动态编译 App_Code 子文件夹中放置的源代码。 Web 页面声明<xref:System.Web.UI.WebControls.WebParts.WebPartZone>控件，并在其子`<zonetemplate>`元素中，声明<xref:System.Web.UI.WebControls.BulletedList>控件。 虽然这是标准的 ASP.NET 控件，它将不完整的 Web 部件功能在运行时，因为<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控件中放置任何服务器控件的包装<xref:System.Web.UI.WebControls.WebParts.WebPartZone>与<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>对象，以便其他服务器控件都可以参与 Web部分应用程序。 在此区域中还声明是自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>名为控件`TextDisplayWebPart`。 请注意，此控件具有的属性`ExportMode="All"`在其上声明。 这使您可以导出。包含该控件，可以由其他用户将预配置的控件添加到其他 Web 页面导入的属性值的 web 部件说明文件。  
  
> [!NOTE]
>  若要启用 Web 部件应用程序导出导入的用户<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，还必须启用 Web 应用程序中的导出功能，通过添加`enableExport="true"`属性为`<webParts>`元素 (即子`<system.web>`元素) 的 Web.config 文件中。 默认情况下禁用导出，因此如果尚未启用应用程序的导出，编辑 Web.config 文件，并立即执行操作。  
  
 该网页还声明自定义<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件并在该`<zonetemplate>`元素，其中包含<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 用户将使用此控件在运行时导入。自定义 web 部件说明文件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
 [!code-aspx-csharp[WebParts_CatalogZone_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogzonecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZone_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogzonevb.aspx#2)]  
  
 现在运行的代码示例。 加载浏览器中的网页。 第一步是导出。Web 部件描述文件`TextDisplayWebPart`控件。 单击 （由标题栏中的向下箭头），在自定义控件上的谓词菜单，然后单击**导出**。 按照说明保存该控件的说明文件。 打开。Web 部件说明文件在编辑器中，并编辑 title 属性文本的值。 查找`<property>`具有属性的元素`name="Title"`，并编辑包含开始和结束之间的标题文本`<property>`标记。 现在关闭网页，并编辑网页源代码编辑器中。 删除`<aspSample:TextDisplayWebPart>`控制声明元素，然后保存并关闭文件。  
  
 加载 Web 页，再次在浏览器中。 `TextDisplayWebPart`控件不应出现，因为已删除了它。 使用**显示模式**下拉列表控件，然后选择**目录**以切换到目录模式的页面。 请注意，自定义<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件将出现，以及<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>控件。 单击**浏览**按钮以找到。为导出的 web 部件说明文件`TextDisplayWebPart`控件。 可以单击**上传**，选择导入的控件旁边的复选框，然后单击**添加**以将其添加到页面。 单击**关闭目录**以将页返回到正常浏览模式。 导入控件现在应显示在页上，并且该控件的标题栏中显示的标题应添加到的标题文本。Web 部件说明文件。  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Web.AspNetHostingPermission">用于在宿主环境中进行操作。 要求值：<see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />；权限值：<see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" />。</permission>
    <block subset="none" type="overrides">
      <para>您可以创建自定义<see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" />如果想要更好地控制呈现和目录 UI 行为的类。如果不需要提供的功能后，若要添加的控件的用户<see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />控制以声明方式，则可以直接从继承<see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" />类。如果你确实想要使控件能够以声明方式添加，比较简单的方法是从继承<see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" />类，因为它提供了基本区域模板。如果继承自<see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" />类，可以重写<see cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />方法，并使用要添加自定义的方法<see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />控件添加到<see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />，如果希望更好地控制以编程方式添加自定义<see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />控件对您的区域.</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatalogZone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CatalogZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件实现区域模板中，通常以声明方式使用和很少需要创建的类使用的新实例<xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A>构造函数。 但是，如果从继承<xref:System.Web.UI.WebControls.WebParts.CatalogZone>类，以创建自定义区域，您可能希望使用构造函数初始化它的一些属性值和自定义其外观。  
  
   
  
## Examples  
 下面的代码示例演示如何以编程方式将<xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A>构造函数在自定义<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件。 构造函数用于初始化控件的一些默认属性值。 下面的代码演示了自定义<xref:System.Web.UI.WebControls.WebParts.CatalogZone>顶部附近，声明了构造函数的类。 有关完整的代码以及设置和运行示例时，所需的说明，请参阅示例部分中的<xref:System.Web.UI.WebControls.WebParts.CatalogZone>类概述。  
  
 [!code-csharp[WebParts_CatalogZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogSamples.cs#1)]
 [!code-vb[WebParts_CatalogZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogSamples.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCatalogParts">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateCatalogParts () As CatalogPartCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::WebParts::CatalogPartCollection ^ CreateCatalogParts();" />
      <MemberSignature Language="F#" Value="override this.CreateCatalogParts : unit -&gt; System.Web.UI.WebControls.WebParts.CatalogPartCollection" Usage="catalogZone.CreateCatalogParts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建区域中声明的每个 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 类型的实例。</summary>
        <returns>一个 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />，引用区域中所有的 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 控件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A>方法是一个关键方法，因为当用户切换到目录显示模式的一个页面，此方法创建所有<xref:System.Web.UI.WebControls.WebParts.CatalogPart>构成 Web 部件目录的控件。  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A>中的方法<xref:System.Web.UI.WebControls.WebParts.CatalogZone>类提供与 Web 部件控件集可以创建继承自任何服务器控件<xref:System.Web.UI.WebControls.WebParts.CatalogPart>类。 因此，如果创建自定义<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件并将其声明中的页面上<xref:System.Web.UI.WebControls.WebParts.CatalogZone>控件，当用户切换到目录模式的页面时，此方法将创建您的控件。  
  
 但是，出于各种原因您可能希望控制通过<xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A>方法。 您可能希望其创建仅某些<xref:System.Web.UI.WebControls.WebParts.CatalogPart>控件。 例如，假设您创建一组自定义<xref:System.Web.UI.WebControls.WebParts.CatalogPart>具有一致的外观和属于单个产品或组织的控件。 如果你想要限制为在目录中，使用这些自定义控件的页面开发人员则应继承自<xref:System.Web.UI.WebControls.WebParts.CatalogZone>类中重写<xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A>方法，并允许创建只有控件的自定义控件的类型相同的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当前的 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 控件没有 ID。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts" />
      </Docs>
    </Member>
    <Member MemberName="ZoneTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ZoneTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ZoneTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ZoneTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ ZoneTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ZoneTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.WebParts.CatalogZone))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Web.UI.TemplateInstance(System.Web.UI.TemplateInstance.Single)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个模板，用于在 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 控件中以页持久性格式包含子控件。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，作为区域中子控件的容器。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A>属性引用类型的模板<xref:System.Web.UI.ITemplate>用于包含<xref:System.Web.UI.WebControls.WebParts.CatalogPart>区域中的控件。 区域模板使页面开发人员能够声明<xref:System.Web.UI.WebControls.WebParts.CatalogPart>他们想要使用的持久性格式，而无需以编程方式创建的所有控件的控件。  
  
 Set 访问器<xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A>属性调用<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts%2A>方法，这会强制的集合<xref:System.Web.UI.WebControls.WebParts.CatalogPart>在区域模板中声明要刷新的页面的控件。 这可确保由区域所引用的控件集合保持最新，每当用户更改实际声明模板中的页上的控件。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果你想要创建自定义<see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" />区域，但您计划创建<see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />以编程方式控制，而不是允许页面开发人员将其声明，您不需要区域模板支持，并可以直接从继承<see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" />类。</para>
        </block>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
      </Docs>
    </Member>
  </Members>
</Type>