<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b0446877e077410dd38d404d92e2614023a53094" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30590831" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="578b9-101">定义连接点对象，该对象允许服务器控件作为提供者，以形成与使用者的连接。</span>
      <span class="sxs-lookup">
        <span data-stu-id="578b9-101">Defines a connection point object that enables a server control acting as a provider to form a connection with a consumer.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="578b9-102">在两个服务器控件之间的每个 Web 部件连接，每个控件必须具有 （以及其他要求） 关联的连接点对象，使它可连接到另一个控件并可提供或使用数据，具体取决于是否控件指定为提供程序或连接的使用者。</span><span class="sxs-lookup"><span data-stu-id="578b9-102">In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection.</span></span> <span data-ttu-id="578b9-103">A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象通常包含控件可以如何连接到另一个控件，它可以共享的数据的类型的详细信息。</span><span class="sxs-lookup"><span data-stu-id="578b9-103">A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share.</span></span> <span data-ttu-id="578b9-104">对于作为连接中的提供程序的控件，其连接点必须是<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象。</span><span class="sxs-lookup"><span data-stu-id="578b9-104">For a control acting as the provider in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span> <span data-ttu-id="578b9-105">有关 Web 部件连接和连接点的详细信息，请参阅下面的另请参阅部分中列出的主题。</span><span class="sxs-lookup"><span data-stu-id="578b9-105">For details on Web Parts connections and connection points, see the topics listed in the See Also section below.</span></span>  
  
 <span data-ttu-id="578b9-106">若要创建<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象，将需要执行几个步骤：</span><span class="sxs-lookup"><span data-stu-id="578b9-106">To create a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, several steps are required:</span></span>  
  
1.  <span data-ttu-id="578b9-107">创建用户界面。</span><span class="sxs-lookup"><span data-stu-id="578b9-107">Create an interface.</span></span> <span data-ttu-id="578b9-108">当与使用者提供程序共享数据时，它会以通过获取接口的实例并将该实例返回给使用者。</span><span class="sxs-lookup"><span data-stu-id="578b9-108">When a provider shares data with a consumer, it does so by getting an instance of an interface, and returning that instance to a consumer.</span></span>  
  
2.  <span data-ttu-id="578b9-109">提供程序中实现的接口。</span><span class="sxs-lookup"><span data-stu-id="578b9-109">Implement the interface in a provider.</span></span> <span data-ttu-id="578b9-110">A<xref:System.Web.UI.WebControls.WebParts.WebPart>或其他服务器控件 (任何类型的服务器控件中<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域可用) 将提供程序必须实现的第一步中创建的接口。</span><span class="sxs-lookup"><span data-stu-id="578b9-110">A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) that will be the provider must implement the interface created in the first step.</span></span>  
  
3.  <span data-ttu-id="578b9-111">标识一个回调方法。</span><span class="sxs-lookup"><span data-stu-id="578b9-111">Identify a callback method.</span></span> <span data-ttu-id="578b9-112">在提供程序方法必须标识为要建立连接的回调方法。</span><span class="sxs-lookup"><span data-stu-id="578b9-112">A method in the provider must be identified as the callback method to establish a connection.</span></span> <span data-ttu-id="578b9-113">此方法返回给使用者实现的接口的实例。</span><span class="sxs-lookup"><span data-stu-id="578b9-113">This method returns an instance of the implemented interface to a consumer.</span></span> <span data-ttu-id="578b9-114">标识提供程序中的回调方法的 Web 部件方法是将添加`ConnectionProvider`元数据属性 (由定义<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>类) 返回的接口实例的方法。</span><span class="sxs-lookup"><span data-stu-id="578b9-114">The Web Parts approach for identifying a callback method in the provider is to add a `ConnectionProvider` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> class) to the method that returns the interface instance.</span></span> <span data-ttu-id="578b9-115">添加属性后，所需的唯一参数是要使用的提供程序连接点的显示名称。</span><span class="sxs-lookup"><span data-stu-id="578b9-115">When the attribute is added, the only required parameter is a display name to use for the provider connection point.</span></span> <span data-ttu-id="578b9-116">可选参数也可以添加，例如连接点的 ID。</span><span class="sxs-lookup"><span data-stu-id="578b9-116">Optional parameters can also be added, such as an ID for the connection point.</span></span>  
  
 <span data-ttu-id="578b9-117">控件具有已配置为提供者后，该控件可以参与 （假设使用者控制了类似配置并且可用） 的连接。</span><span class="sxs-lookup"><span data-stu-id="578b9-117">After a control has been equipped to act as a provider, the control can participate in connections (assuming that a consumer control is similarly equipped and available).</span></span> <span data-ttu-id="578b9-118">若要创建的网页上的标记的静态声明性的连接，开发人员可以使用`<asp:webpartconnection>`元素。</span><span class="sxs-lookup"><span data-stu-id="578b9-118">To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="578b9-119">如果`ConnectionProvider`标识回叫方法的提供程序源代码中的属性指定的 ID 的连接点，则该值必须分配给`ProviderConnectionPointID`属性中`<asp:webpartconnection>`页面上的元素。</span><span class="sxs-lookup"><span data-stu-id="578b9-119">If the `ConnectionProvider` attribute in the provider source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page.</span></span> <span data-ttu-id="578b9-120">开发人员可能会指定提供程序连接点的 ID 的原因之一是提供者控件中是否存在多个连接点。</span><span class="sxs-lookup"><span data-stu-id="578b9-120">One reason that a developer might specify an ID for a provider connection point is if there are multiple connection points in the provider control.</span></span> <span data-ttu-id="578b9-121">如果没有为提供程序控件中的提供程序连接点指定 ID，值没有要分配给`ProviderConnectionPointID`属性页中，因为将使用从获取的默认值创建连接<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>字段。</span><span class="sxs-lookup"><span data-stu-id="578b9-121">If an ID is not specified for the provider connection point in the provider control, a value does not have to be assigned to the `ProviderConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.</span></span>  
  
 <span data-ttu-id="578b9-122">若要在代码中创建的连接，开发人员必须创建一个新<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象通过调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法并向其传递提供程序管理，以及的 ID 或索引定义的 ID<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>提供程序控件中的对象。</span><span class="sxs-lookup"><span data-stu-id="578b9-122">To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method and passing to it the ID of the provider control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object in the provider control.</span></span> <span data-ttu-id="578b9-123">返回<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象，对提供程序控件的引用以及对使用者控件和相应的引用<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象，都传递给<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法来创建一个新<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>对象。</span><span class="sxs-lookup"><span data-stu-id="578b9-123">The returned <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, along with a reference to the provider control, a reference to the consumer control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.</span></span>  
  
 <span data-ttu-id="578b9-124">开发人员可以使用提供程序连接点，以声明方式或以编程方式建立连接的一部分，但用户可以与提供程序连接点建立连接通过用户界面 (UI) 还进行交互。</span><span class="sxs-lookup"><span data-stu-id="578b9-124">Although developers can use provider connection points as part of establishing connections either declaratively or programmatically, users can also interact with provider connection points to establish connections through the user interface (UI).</span></span> <span data-ttu-id="578b9-125">如果开发人员声明<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控件在网页上，它提供对用户创建连接的运行时用户界面。</span><span class="sxs-lookup"><span data-stu-id="578b9-125">If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections.</span></span> <span data-ttu-id="578b9-126">如果用户选择为通过单击建立连接的起始点的使用者控制其连接谓词 （它们还可以选择提供程序; 没有任何区别中生成连接），在 UI 中，他们将看到具有的下拉列表控件可用的提供程序连接点 （或如果有多个快照的点） 的显示名称。</span><span class="sxs-lookup"><span data-stu-id="578b9-126">If users choose the consumer control as the starting point for establishing the connection by clicking its connect verb (they could also choose the provider; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display name of the available provider connection point (or points if there are multiple ones).</span></span> <span data-ttu-id="578b9-127">用户必须选择提供程序连接点创建连接。</span><span class="sxs-lookup"><span data-stu-id="578b9-127">Users must select a provider connection point to create a connection.</span></span>  
  
 <span data-ttu-id="578b9-128">A<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象将直接与一个特定的提供程序相关联，并将连接的详细信息存储在继承自基类的属性<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类。</span><span class="sxs-lookup"><span data-stu-id="578b9-128">A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object associates directly with a specific provider control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="578b9-129">例如，在继承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性，提供程序连接点保存的提供程序返回的接口的类型。</span><span class="sxs-lookup"><span data-stu-id="578b9-129">For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a provider connection point keeps the type of interface returned by the provider.</span></span> <span data-ttu-id="578b9-130">如果提供程序和中都使用相同的连接的使用者接口类型，这些控件是兼容并能够建立直接连接。</span><span class="sxs-lookup"><span data-stu-id="578b9-130">If the provider and consumer in a connection both work with the same interface type, the controls are compatible and capable of forming a direct connection.</span></span> <span data-ttu-id="578b9-131">如果提供程序和使用者不能具有相同的接口类型，它们是不兼容，并且必须使用<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>要转换的提供程序连接点对象<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>值转换为使用者可以使用的类型。</span><span class="sxs-lookup"><span data-stu-id="578b9-131">If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> value into a type that the consumer can work with.</span></span> <span data-ttu-id="578b9-132">另一个重要的继承的属性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>属性，它提供一个友好名称以显示在 UI 中供用户选择提供程序连接点时创建连接。</span><span class="sxs-lookup"><span data-stu-id="578b9-132">Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a provider connection point when creating connections.</span></span> <span data-ttu-id="578b9-133">显示名称是必需的参数，开发人员添加时`ConnectionProvider`属性设为提供者控件中的回调方法。</span><span class="sxs-lookup"><span data-stu-id="578b9-133">The display name is the required parameter when developers add a `ConnectionProvider` attribute to the callback method in a provider control.</span></span> <span data-ttu-id="578b9-134">继承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>属性也十分有用，因为上述，由于其提供的唯一标识符的提供程序连接点的事件中某个提供程序具有多个连接点。</span><span class="sxs-lookup"><span data-stu-id="578b9-134">The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a provider connection point in the event that a provider has multiple connection points.</span></span> <span data-ttu-id="578b9-135">一个提供程序可以有多个<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象定义中，然后在此情况下，当开发人员将添加`ConnectionProvider`属性到方法时，它们应指定一个要区分每个连接点的 ID 值。</span><span class="sxs-lookup"><span data-stu-id="578b9-135">A provider can have multiple <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionProvider` attribute to a method, they should specify an ID value to distinguish each connection point.</span></span> <span data-ttu-id="578b9-136">另一个值得注意的继承的属性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性，用于指示提供程序连接点是否可以同时连接到多个使用者。</span><span class="sxs-lookup"><span data-stu-id="578b9-136">One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a provider connection point can connect simultaneously to multiple consumers.</span></span> <span data-ttu-id="578b9-137">此属性值是`true`默认情况下，提供程序连接点 (而它默认为`false`的使用者连接点)。</span><span class="sxs-lookup"><span data-stu-id="578b9-137">This property value is `true` by default for provider connection points (whereas it defaults to `false` for consumer connection points).</span></span>  
  
 <span data-ttu-id="578b9-138"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>类会将多个唯一的方法添加到成员它继承自<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类。</span><span class="sxs-lookup"><span data-stu-id="578b9-138">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="578b9-139"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法检索回调方法将返回给使用者的接口的实例。</span><span class="sxs-lookup"><span data-stu-id="578b9-139">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method retrieves an instance of the interface that the callback method will return to consumers.</span></span> <span data-ttu-id="578b9-140"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>方法检索属于的现有连接的其他消费者接口，但不是接口用于建立连接。</span><span class="sxs-lookup"><span data-stu-id="578b9-140">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method retrieves additional consumer interfaces that are part of an existing connection, but are not the interfaces used to establish the connection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="578b9-141">下面的代码示例演示如何以声明方式创建连接，以编程方式，或通过用户界面，每种情况中都使用的提供程序连接点的简单。</span><span class="sxs-lookup"><span data-stu-id="578b9-141">The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.</span></span>  
  
 <span data-ttu-id="578b9-142">该示例包含四个部分：</span><span class="sxs-lookup"><span data-stu-id="578b9-142">The example has four parts:</span></span>  
  
-   <span data-ttu-id="578b9-143">用户控件，使你能够更改 Web 部件页面上显示模式。</span><span class="sxs-lookup"><span data-stu-id="578b9-143">A user control that enables you to change the Web Parts display mode on a page.</span></span>  
  
-   <span data-ttu-id="578b9-144">源接口和两个代码<xref:System.Web.UI.WebControls.WebParts.WebPart>控制充当提供程序和连接的使用者。</span><span class="sxs-lookup"><span data-stu-id="578b9-144">Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.</span></span>  
  
-   <span data-ttu-id="578b9-145">网页上承载的控件和运行的代码示例。</span><span class="sxs-lookup"><span data-stu-id="578b9-145">A Web page to host all the controls and run the code example.</span></span>  
  
-   <span data-ttu-id="578b9-146">如何运行该示例页的说明。</span><span class="sxs-lookup"><span data-stu-id="578b9-146">An explanation of how to run the example page.</span></span>  
  
 <span data-ttu-id="578b9-147">此代码示例的第一部分是使用户能够更改在网页上的显示模式的用户控件。</span><span class="sxs-lookup"><span data-stu-id="578b9-147">The first part of this code example is the user control that enables users to change display modes on a Web page.</span></span> <span data-ttu-id="578b9-148">将以下源代码保存到一个.ascx 文件中，将其分配到的文件名称`Src`属性`Register`指令为此用户控件，即托管的 Web 页面顶部附近。</span><span class="sxs-lookup"><span data-stu-id="578b9-148">Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page.</span></span> <span data-ttu-id="578b9-149">有关详细信息显示在此控件模式和源代码的说明，请参见[演练： 在 Web 部件页面上更改显示模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。</span><span class="sxs-lookup"><span data-stu-id="578b9-149">For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 <span data-ttu-id="578b9-150">下面的代码示例的第二部分是接口和控件的源代码。</span><span class="sxs-lookup"><span data-stu-id="578b9-150">The second part of the code example is the source code for the interface and controls.</span></span> <span data-ttu-id="578b9-151">源文件包含名为一个简单的界面`IZipCode`。</span><span class="sxs-lookup"><span data-stu-id="578b9-151">The source file contains a simple interface named `IZipCode`.</span></span> <span data-ttu-id="578b9-152">此外，还有<xref:System.Web.UI.WebControls.WebParts.WebPart>类名为`ZipCodeWebPart`，实现接口，并充当提供程序控制。</span><span class="sxs-lookup"><span data-stu-id="578b9-152">There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control.</span></span> <span data-ttu-id="578b9-153">其`ProvideIZipCode`方法是实现接口的唯一成员的回调方法。</span><span class="sxs-lookup"><span data-stu-id="578b9-153">Its `ProvideIZipCode` method is the callback method that implements the interface's only member.</span></span> <span data-ttu-id="578b9-154">方法只返回接口的实例。</span><span class="sxs-lookup"><span data-stu-id="578b9-154">The method simply returns an instance of the interface.</span></span> <span data-ttu-id="578b9-155">请注意，该方法将标有`ConnectionProvider`其元数据中的属性。</span><span class="sxs-lookup"><span data-stu-id="578b9-155">Note that the method is marked with a `ConnectionProvider` attribute in its metadata.</span></span> <span data-ttu-id="578b9-156">这是用于将方法标识为提供程序的连接点的回调方法的机制。</span><span class="sxs-lookup"><span data-stu-id="578b9-156">This is the mechanism for identifying the method as the callback method for the provider's connection point.</span></span> <span data-ttu-id="578b9-157">其他<xref:System.Web.UI.WebControls.WebParts.WebPart>类命名为`WeatherWebPart`，并且它可作为连接的使用者。</span><span class="sxs-lookup"><span data-stu-id="578b9-157">The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection.</span></span> <span data-ttu-id="578b9-158">此类具有一个名为方法`GetZipCode`获取的实例`IZipCode`从提供者控件的接口。</span><span class="sxs-lookup"><span data-stu-id="578b9-158">This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control.</span></span> <span data-ttu-id="578b9-159">请注意，此方法作为使用者的连接点方法标记为`ConnectionConsumer`其元数据中的属性。</span><span class="sxs-lookup"><span data-stu-id="578b9-159">Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.</span></span> <span data-ttu-id="578b9-160">这是用于标识使用者控件中的连接点方法的机制。</span><span class="sxs-lookup"><span data-stu-id="578b9-160">This is the mechanism for identifying the connection point method in the consumer control.</span></span>  
  
 <span data-ttu-id="578b9-161">若要运行的代码示例，必须编译此源代码。</span><span class="sxs-lookup"><span data-stu-id="578b9-161">For the code example to run, you must compile this source code.</span></span> <span data-ttu-id="578b9-162">你可以显式编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。</span><span class="sxs-lookup"><span data-stu-id="578b9-162">You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache.</span></span> <span data-ttu-id="578b9-163">或者，您可以在站点的 App_Code 文件夹中，其中它将动态编译运行时将源代码。</span><span class="sxs-lookup"><span data-stu-id="578b9-163">Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time.</span></span> <span data-ttu-id="578b9-164">此代码示例使用动态编译。</span><span class="sxs-lookup"><span data-stu-id="578b9-164">This code example uses dynamic compilation.</span></span> <span data-ttu-id="578b9-165">有关演示如何编译的演练，请参阅[演练： 开发和使用自定义 Web 服务器控件](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。</span><span class="sxs-lookup"><span data-stu-id="578b9-165">For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).</span></span>  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 <span data-ttu-id="578b9-166">下面的代码示例的第三部分是网页。</span><span class="sxs-lookup"><span data-stu-id="578b9-166">The third part of the code example is the Web page.</span></span> <span data-ttu-id="578b9-167">顶部附近是`Register`指令用于注册构成该连接，自定义控件和用户控件，使用户能够更改显示在页面上的模式。</span><span class="sxs-lookup"><span data-stu-id="578b9-167">Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page.</span></span> <span data-ttu-id="578b9-168">以声明方式内创建连接本身`<staticconnections>`页面上的元素。</span><span class="sxs-lookup"><span data-stu-id="578b9-168">The connection itself is created declaratively within the `<staticconnections>` element on the page.</span></span> <span data-ttu-id="578b9-169">此示例演示创建连接的一种方式-注意`ProviderConnectionPointID`属性中`<asp:webpartconnection>`元素。</span><span class="sxs-lookup"><span data-stu-id="578b9-169">This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="578b9-170">你还可以以编程方式; 创建连接有关执行此操作的代码位于`Button1_Click`方法。</span><span class="sxs-lookup"><span data-stu-id="578b9-170">You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method.</span></span> <span data-ttu-id="578b9-171">在这种情况下，<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>创建对象，然后传递到创建实际的连接的方法。</span><span class="sxs-lookup"><span data-stu-id="578b9-171">In this case, a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object is created and then passed to a method that creates the actual connection.</span></span> <span data-ttu-id="578b9-172">是否以声明方式或以编程方式创建连接，连接点必须始终指定与提供程序和使用者。</span><span class="sxs-lookup"><span data-stu-id="578b9-172">Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer.</span></span> <span data-ttu-id="578b9-173">`Button2_Click`方法访问<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象提供程序和使用者，并将其属性值的一些写入到页中的标签。</span><span class="sxs-lookup"><span data-stu-id="578b9-173">The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 <span data-ttu-id="578b9-174">加载浏览器中后，单击**连接点详细信息**按钮。</span><span class="sxs-lookup"><span data-stu-id="578b9-174">After you load the page in a browser, click the **Connection Point Details** button.</span></span> <span data-ttu-id="578b9-175">显示有关在声明性的连接中建立的提供程序和使用者连接点的信息。</span><span class="sxs-lookup"><span data-stu-id="578b9-175">Information about the provider and consumer connection points established in the declarative connection appears.</span></span> <span data-ttu-id="578b9-176">接下来，使用**显示模式**下拉列表控件切换到页连接模式。</span><span class="sxs-lookup"><span data-stu-id="578b9-176">Next, use the **Display Mode** drop-down control to switch the page into connect mode.</span></span> <span data-ttu-id="578b9-177">上的谓词菜单**邮政编码使用者**<xref:System.Web.UI.WebControls.WebParts.WebPart>控件 （由标题栏中的向下箭头），单击连接谓词。</span><span class="sxs-lookup"><span data-stu-id="578b9-177">On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb.</span></span> <span data-ttu-id="578b9-178">自动创建用户界面出现，连接`<asp:connectionszone>`页面中声明的控件。</span><span class="sxs-lookup"><span data-stu-id="578b9-178">The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page.</span></span> <span data-ttu-id="578b9-179">这是另一种创建连接 （通过用户界面），以及前面所述的声明性和编程方法。</span><span class="sxs-lookup"><span data-stu-id="578b9-179">This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier.</span></span> <span data-ttu-id="578b9-180">单击**断开连接**按钮以终止现有的静态连接。</span><span class="sxs-lookup"><span data-stu-id="578b9-180">Click the **Disconnect** button to terminate the existing static connection.</span></span> <span data-ttu-id="578b9-181">单击**创建提供程序连接**链接。</span><span class="sxs-lookup"><span data-stu-id="578b9-181">Click the **Create a Connection to a Provider** link.</span></span> <span data-ttu-id="578b9-182">UI 现在显示一个下拉列表控件，其中列出了提供程序连接点的显示名称。</span><span class="sxs-lookup"><span data-stu-id="578b9-182">The UI now displays a drop-down control that lists the provider connection point display name.</span></span> <span data-ttu-id="578b9-183">在下拉列表中，选择连接点，然后单击**连接**以完成连接。</span><span class="sxs-lookup"><span data-stu-id="578b9-183">Select the connection point in the drop-down list, and then click **Connect** to complete the connection.</span></span> <span data-ttu-id="578b9-184">接下来，单击**断开连接**试。</span><span class="sxs-lookup"><span data-stu-id="578b9-184">Next, click **Disconnect** again.</span></span> <span data-ttu-id="578b9-185">然后，单击**动态连接**按钮以编程方式创建连接。</span><span class="sxs-lookup"><span data-stu-id="578b9-185">Then, click the **Dynamic Connection** button to create a connection programmatically.</span></span> <span data-ttu-id="578b9-186">使用**显示模式**控件来返回到浏览模式的页。</span><span class="sxs-lookup"><span data-stu-id="578b9-186">Use the **Display Mode** control to return the page to browse mode.</span></span> <span data-ttu-id="578b9-187">单击**连接点详细信息**按钮再次，以便一次指示提供程序连接点对象有关的详细信息。</span><span class="sxs-lookup"><span data-stu-id="578b9-187">Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.</span></span>  
  
 <span data-ttu-id="578b9-188">此示例已经演示了建立连接并使用提供程序连接点通过三种方式： 在 Web 页标记; 中声明静态连接在使用的代码中创建的连接<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象和通过连接 UI 用户创建的连接。</span><span class="sxs-lookup"><span data-stu-id="578b9-188">The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object; and a connection created by a user through the connection UI.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">
          <span data-ttu-id="578b9-189">提供者控件中的方法，该方法将接口实例返回给使用者以建立连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-189">The method in the provider control that returns an interface instance to consumers to establish a connection.</span>
          </span>
        </param>
        <param name="interfaceType">
          <span data-ttu-id="578b9-190">提供者提供给使用者的接口的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-190">The <see cref="T:System.Type" /> of the interface that the provider serves to consumers.</span>
          </span>
        </param>
        <param name="controlType">
          <span data-ttu-id="578b9-191">与提供者连接点相关联的提供者控件的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-191">The <see cref="T:System.Type" /> of the provider control with which the provider connection point is associated.</span>
          </span>
        </param>
        <param name="displayName">
          <span data-ttu-id="578b9-192">在连接用户界面 (UI) 中向用户显示的提供者连接点的友好显示名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-192">A friendly display name for the provider connection point that appears to users in the connection user interface (UI).</span>
          </span>
        </param>
        <param name="id">
          <span data-ttu-id="578b9-193">提供者连接点的唯一标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-193">A unique identifier for the provider connection point.</span>
          </span>
        </param>
        <param name="allowsMultipleConnections">
          <span data-ttu-id="578b9-194">一个布尔值，指示提供者连接点是否可以同时与多个使用者保持连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-194">A Boolean value indicating whether the provider connection point can have multiple simultaneous connections with consumers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="578b9-195">初始化 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-195">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="578b9-196"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>构造函数<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>类只需调用基构造函数，传递到它的各种参数，并初始化的基类。</span><span class="sxs-lookup"><span data-stu-id="578b9-196">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.</span></span>  
  
 <span data-ttu-id="578b9-197">基类构造函数检查大量的连接点的参数，并可能会引发几个例外。</span><span class="sxs-lookup"><span data-stu-id="578b9-197">The base class constructor checks a number of the parameters for a connection point and can throw several exceptions.</span></span> <span data-ttu-id="578b9-198">有关可能的异常的列表，请参阅异常部分。</span><span class="sxs-lookup"><span data-stu-id="578b9-198">For a list of possible exceptions, see the Exceptions section.</span></span>  
  
 <span data-ttu-id="578b9-199">你可以调用<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>构造函数来创建你自己的实例<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>类。</span><span class="sxs-lookup"><span data-stu-id="578b9-199">You can call the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class.</span></span> <span data-ttu-id="578b9-200">但是，在你所在只需建立的连接并不扩展类的情况下，应调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法从提供程序返回现有的连接点对象。</span><span class="sxs-lookup"><span data-stu-id="578b9-200">However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method to return an existing connection point object from a provider.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="578b9-201">下面的代码示例演示如何从派生<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>类来创建自定义提供程序连接点。</span><span class="sxs-lookup"><span data-stu-id="578b9-201">The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.</span></span>  
  
 <span data-ttu-id="578b9-202">代码示例包含三个部分：</span><span class="sxs-lookup"><span data-stu-id="578b9-202">The code example has three parts:</span></span>  
  
-   <span data-ttu-id="578b9-203">包含提供程序的源文件<xref:System.Web.UI.WebControls.WebParts.WebPart>控制，请使用者<xref:System.Web.UI.WebControls.WebParts.WebPart>控制和自定义<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象。</span><span class="sxs-lookup"><span data-stu-id="578b9-203">A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span>  
  
-   <span data-ttu-id="578b9-204">承载静态连接中的控件的网页。</span><span class="sxs-lookup"><span data-stu-id="578b9-204">A Web page that hosts the controls in a static connection.</span></span>  
  
-   <span data-ttu-id="578b9-205">如何运行此代码示例的说明。</span><span class="sxs-lookup"><span data-stu-id="578b9-205">An explanation of how to run the example code.</span></span>  
  
 <span data-ttu-id="578b9-206">下面的代码示例的第一部分是提供程序和使用者的源<xref:System.Web.UI.WebControls.WebParts.WebPart>控件和自定义<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>名为的类`TableProviderConnectionPoint`。</span><span class="sxs-lookup"><span data-stu-id="578b9-206">The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`.</span></span> <span data-ttu-id="578b9-207">请注意，构造函数的`TableProviderConnectionPoint`类调用基构造函数，将其传递所需的参数，如参数部分中所示。</span><span class="sxs-lookup"><span data-stu-id="578b9-207">Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section.</span></span> <span data-ttu-id="578b9-208">此外请注意，在`TableProviderWebPart`类，`GetConnectionInterface`方法指定为连接的回调方法和`ConnectionProvider`属性声明自定义`TableProviderConnectionPoint`作为参数。</span><span class="sxs-lookup"><span data-stu-id="578b9-208">Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter.</span></span> <span data-ttu-id="578b9-209">此示例演示如何创建自定义提供程序连接点，然后将其与提供程序控件相关联。</span><span class="sxs-lookup"><span data-stu-id="578b9-209">This demonstrates how to create a custom provider connection point and then associate it with a provider control.</span></span> <span data-ttu-id="578b9-210">此示例假定，时动态编译的源代码，因此应将源代码文件放在 Web 应用程序的 App_Code 子文件夹。</span><span class="sxs-lookup"><span data-stu-id="578b9-210">This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.</span></span>  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 <span data-ttu-id="578b9-211">下面的代码示例的第二部分是承载静态的 Web 部件连接中的自定义控件的网页。</span><span class="sxs-lookup"><span data-stu-id="578b9-211">The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection.</span></span> <span data-ttu-id="578b9-212">页的顶部是`Register`指令，用于声明一个前缀和自定义控件的命名空间。</span><span class="sxs-lookup"><span data-stu-id="578b9-212">At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls.</span></span> <span data-ttu-id="578b9-213">使用声明连接`<asp:webpartconnection>`元素，提供程序和使用者的控件中声明`<asp:webpartzone>`元素。</span><span class="sxs-lookup"><span data-stu-id="578b9-213">The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.</span></span>  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 <span data-ttu-id="578b9-214">加载浏览器中的页。</span><span class="sxs-lookup"><span data-stu-id="578b9-214">Load the page in a browser.</span></span> <span data-ttu-id="578b9-215">已在控件之间的连接存在，并且使用者显示的数据从提供程序，因为连接被声明为页中的静态连接。</span><span class="sxs-lookup"><span data-stu-id="578b9-215">The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="578b9-216">
            <paramref name="callbackMethod" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-216">
              <paramref name="callbackMethod" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="578b9-217">\- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-217">\- or -</span>
          </span>
          <span data-ttu-id="578b9-218">
            <paramref name="interfaceType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-218">
              <paramref name="interfaceType" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="578b9-219">\- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-219">\- or -</span>
          </span>
          <span data-ttu-id="578b9-220">
            <paramref name="controlType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-220">
              <paramref name="controlType" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="578b9-221">\- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-221">\- or -</span>
          </span>
          <span data-ttu-id="578b9-222">
            <paramref name="displayName" /> 为 <see langword="null" /> 或空字符串 ("")。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-222">
              <paramref name="displayName" /> is <see langword="null" /> or an empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="578b9-223">
            <paramref name="controlType" /> 与提供程序控件（或从提供程序控件派生的有效类）的类型不同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-223">
              <paramref name="controlType" /> is not the same type as the provider control (or a valid class derived from it).</span>
          </span>
        </exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">
          <span data-ttu-id="578b9-224">在 Web 部件连接中用作提供者的控件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-224">The control acting as the provider in a Web Parts connection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="578b9-225">调用提供者控件中的回调方法，该方法获取一个接口实例以便返回给使用者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-225">Invokes the callback method in a provider control that gets an interface instance to return to consumers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="578b9-226">一个 <see cref="T:System.Object" />，它是提供者返回给使用者的接口实例，该接口用于建立连接。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-226">An <see cref="T:System.Object" /> that is an instance of the interface a provider returns to consumers to establish a connection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="578b9-227">此方法是用来建立连接的接口的实例的提供程序控件从返回对象。</span><span class="sxs-lookup"><span data-stu-id="578b9-227">This method returns an object from the provider control that is an instance of the interface used to establish a connection.</span></span> <span data-ttu-id="578b9-228">对象的类型将是接口的实现的类型。</span><span class="sxs-lookup"><span data-stu-id="578b9-228">The type of the object will be the type of the implemented interface.</span></span> <span data-ttu-id="578b9-229">例如，实现中控件的一组 Web 部件连接的两个接口<xref:System.Web.UI.WebControls.WebParts.IWebPartField>和<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>。</span><span class="sxs-lookup"><span data-stu-id="578b9-229">For example, two interfaces that are implemented for connections in the Web Parts control set are <xref:System.Web.UI.WebControls.WebParts.IWebPartField> and <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</span></span> <span data-ttu-id="578b9-230">当<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法调用<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象，如果关联的提供程序实现这些接口之一，返回的对象将相同的类型。</span><span class="sxs-lookup"><span data-stu-id="578b9-230">When the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, if the associated provider implements one of these interfaces, the returned object will be of the same type.</span></span>  
  
 <span data-ttu-id="578b9-231"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法由调用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>对象时连接正在激活。</span><span class="sxs-lookup"><span data-stu-id="578b9-231">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated.</span></span> <span data-ttu-id="578b9-232">这是一个关键步骤实际发起的连接并开始过程，从而使两个控件共享数据。</span><span class="sxs-lookup"><span data-stu-id="578b9-232">This is a critical step that actually initiates a connection and begins the process that enables two controls to share data.</span></span>  
  
 <span data-ttu-id="578b9-233">连接中的使用者控件必须能够使用相同类型的接口作为提供程序。</span><span class="sxs-lookup"><span data-stu-id="578b9-233">The consumer control in a connection must be able to work with the same type of interface as the provider.</span></span> <span data-ttu-id="578b9-234">如果不存在，会不兼容的控件和<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象必须用于建立连接。</span><span class="sxs-lookup"><span data-stu-id="578b9-234">If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="578b9-235">
            <paramref name="control" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-235">
              <paramref name="control" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">
          <span data-ttu-id="578b9-236">在 Web 部件连接中用作提供者的控件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-236">The control acting as the provider in a Web Parts connection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="578b9-237">获取受提供者连接点支持的辅助接口的可选集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-237">Gets an optional collection of secondary interfaces that can be supported by a provider connection point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="578b9-238">其他接口的 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />，这些接口由用作提供者的控件提供。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b9-238">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> of additional interfaces provided by the control acting as a provider.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="578b9-239">提供程序连接点对象始终具有一个默认接口，用于与使用者建立连接。</span><span class="sxs-lookup"><span data-stu-id="578b9-239">A provider connection point object always has a default interface that is used to establish a connection with consumers.</span></span> <span data-ttu-id="578b9-240">通过调用检索默认接口的实例<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象。</span><span class="sxs-lookup"><span data-stu-id="578b9-240">An instance of the default interface is retrieved by calling the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method on a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.</span></span>  
  
 <span data-ttu-id="578b9-241">但是，某些提供程序控件将实现多个接口来作为连接的一部分提供给使用者。</span><span class="sxs-lookup"><span data-stu-id="578b9-241">However, some provider controls will implement multiple interfaces to provide to consumers as part of a connection.</span></span> <span data-ttu-id="578b9-242">这些接口，不使用默认模板用于建立连接，称为辅助接口。</span><span class="sxs-lookup"><span data-stu-id="578b9-242">These interfaces, which are not the default ones used to establish a connection, are called secondary interfaces.</span></span> <span data-ttu-id="578b9-243"><xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>方法可以返回就像对辅助接口的引用集合<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法返回对默认接口的引用。</span><span class="sxs-lookup"><span data-stu-id="578b9-243">The <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> method provides a way to return a collection of references to the secondary interfaces, just as the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> method returns a reference to the default interface.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="578b9-244">
              <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />中的方法<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />类包含没有实现; 它将返回空辅助接口的集合。</span>
            <span class="sxs-lookup">
              <span data-stu-id="578b9-244">The <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> method in the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class contains no implementation; it returns an empty collection of secondary interfaces.</span>
            </span>
            <span data-ttu-id="578b9-245">若要实现此方法，你必须从继承<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />类，并重写此方法，使之返回一组特定的辅助接口。</span>
            <span class="sxs-lookup">
              <span data-stu-id="578b9-245">To implement this method, you must inherit from the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class, and override this method, returning from it a specific set of secondary interfaces.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>