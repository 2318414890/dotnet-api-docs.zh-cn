<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="575da1e985d2a34222cb6c445b73da8de19944c0" /><Meta Name="ms.sourcegitcommit" Value="2982b8c4cce02c2542285fcaf172f7544d6b80bc" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/09/2019" /><Meta Name="ms.locfileid" Value="59352311" /></Metadata><TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定义连接点对象，该对象允许服务器控件作为提供者，以形成与使用者的连接。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在两个服务器控件之间每个 Web 部件连接中，每个控件必须具有 （还有其他要求） 关联的连接点对象，使它连接到另一个控件，并能够提供或使用数据，具体取决于控件指定为该提供程序或使用者的连接。 一个<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象通常包含有关如何控制可以连接到另一个控件和可共享的数据类型的详细信息。 对于作为连接中提供的控件，其连接点必须是<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象。 有关 Web 部件连接和连接点的详细信息，请参阅下面的另请参见部分中列出的主题。  
  
 若要创建<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象，则需要几个步骤：  
  
1.  创建一个接口。 当与使用者提供程序共享数据时，它会通过获取接口的实例并将该实例返回给使用者。  
  
2.  在提供程序中实现的接口。 一个<xref:System.Web.UI.WebControls.WebParts.WebPart>或其他服务器控件 (任何类型的服务器控件中<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域可用) 将提供程序必须实现第一步中创建的接口。  
  
3.  标识一个回调方法。 提供程序中的方法必须标识为要建立的连接的回调方法。 此方法返回给使用者实现的接口的实例。 Web 部件方法，以确定提供程序中的回调方法将添加`ConnectionProvider`元数据特性 (由定义<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>类) 到接口实例返回的方法。 添加属性后，所需的唯一参数时要使用的提供者连接点的显示名称。 可选参数还可以添加，如连接点的 ID。  
  
 控件具有已配置为提供者后，该控件可以参与连接 （假定使用者控制了类似配置并且可用）。 若要在 Web 页面的标记中创建的静态声明性连接，开发人员可以使用`<asp:webpartconnection>`元素。 如果`ConnectionProvider`属性标识的回调方法提供程序源代码中指定的 ID 的连接点，则必须将该值分配给`ProviderConnectionPointID`属性中`<asp:webpartconnection>`页面上的元素。 开发人员可能会指定提供者连接点的 ID 的原因之一是提供者控件中是否有多个连接点。 如果没有为提供者控件中的提供程序连接点指定一个 ID，一个值，无需分配给`ProviderConnectionPointID`属性页中，因为该连接将使用从获取的默认值创建<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>字段。  
  
 若要在代码中创建的连接，开发人员必须创建一个新<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象通过调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法，并将其传递给提供程序控件，以及 ID 或索引的定义的 ID<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>提供者控件中的对象。 返回<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象，对提供者控件的引用以及对使用者控件和相应的引用<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象，同时传递给<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法来创建一个新<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>对象。  
  
 虽然开发人员可以使用提供者连接点，以声明方式或以编程方式建立连接的过程，用户还可以与提供者连接点建立连接通过用户界面 (UI) 交互。 如果开发人员声明<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控件在网页上，它提供了用户创建连接的运行时 UI。 如果用户选择的使用者控件作为起点来建立连接，通过单击其连接谓词 （它们还可以选择提供程序; 没有任何区别中生成连接），他们将在 UI 中看到的下拉列表控件可用的提供程序连接点 （或如果有多个工具的点） 的显示名称。 用户必须选择要创建的连接提供者连接点。  
  
 一个<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象将直接与一个特定的提供程序相关联，并将连接的详细信息存储在它继承自基类的属性<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类。 例如，在继承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性提供者连接点保存的提供程序返回的接口的类型。 如果提供程序和中均使用相同的连接使用者接口类型，这些控件是兼容并能建立直接连接。 如果提供程序和使用者不能使用相同的接口类型，它们是不兼容，并且必须使用<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象将提供者连接点<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>到使用者可以使用的类型的值。 另一个重要的继承的属性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>属性，它提供一个友好名称以供用户选择的提供程序连接用户界面中显示点创建连接时。 显示名称是必需的参数，当开发人员添加`ConnectionProvider`属性提供者控件中的回调方法。 继承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>属性也很有用，如上所述，因为它提供者连接点提供的唯一标识符，在的提供程序具有多个连接点。 一个提供程序可以有多个<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象定义中，然后在此情况下，当开发人员添加`ConnectionProvider`属性的方法，它们应指定一个 ID 值来区分每个连接点。 另一个值得注意的继承的属性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性，用于指示提供者连接点是否可以同时连接到多个使用者。 此属性的值是`true`默认情况下，为提供者连接点 (而它将默认为`false`的使用者连接点)。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>类会将多个唯一的方法添加到成员它继承自<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法检索回调方法将返回给使用者的接口的实例。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>方法检索其他使用者接口属于的现有连接，但不是接口用于建立连接。  
  
   
  
## Examples  
 下面的代码示例显示了以声明方式创建连接，以编程方式或通过用户界面，每种情况中都使用的提供者连接点的简单方法。  
  
 该示例包含四个部分：  
  
-   使你能够更改 Web 部件的用户控件在页面上显示模式。  
  
-   源接口和两个代码<xref:System.Web.UI.WebControls.WebParts.WebPart>控件作为提供程序和使用者的连接。  
  
-   若要托管的所有控件和运行的代码示例网页。  
  
-   如何运行示例页的说明。  
  
 此代码示例的第一个部分是使用户能够更改网页上的显示模式的用户控件。 将以下源代码保存到.ascx 文件，将其分配到的文件名称`Src`属性的`Register`指令对该用户控件，即托管的 Web 页面的顶部附近。 有关详细信息显示在此控件模式和对源代码的说明，请参见[演练：更改显示模式同时适用于 Web 部件页](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 代码示例的第二部分是为接口和控件的源代码。 源代码文件包含一个简单的接口名为`IZipCode`。 此外，还有<xref:System.Web.UI.WebControls.WebParts.WebPart>类名为`ZipCodeWebPart`的实现接口，并充当提供者控件。 其`ProvideIZipCode`方法是实现接口的唯一成员的回调方法。 该方法只需返回接口的实例。 请注意，该方法标记与`ConnectionProvider`其元数据中的属性。 这是用于标识提供者连接点的回调方法作为该方法的机制。 另<xref:System.Web.UI.WebControls.WebParts.WebPart>类命名为`WeatherWebPart`，并充当使用者的连接。 此类有一个名为方法`GetZipCode`获取的实例`IZipCode`从提供者控件的接口。 请注意，此方法标记为与使用者的连接点方法`ConnectionConsumer`其元数据中的属性。 这是用于标识使用者控件中的连接点方法的机制。  
  
 若要运行的代码示例，必须编译此源代码。 可以显式对其进行编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以将源代码放在你网站的 App_Code 文件夹中，其中它将被动态编译在运行时。 此代码示例使用动态编译。 有关演示如何编译的演练，请参阅[演练：开发和使用自定义 Web 服务器控件](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 代码示例的第三部分是 Web 页。 顶部附近是`Register`指令用于注册的自定义控件形成连接，并使用户能够更改的用户控件在页面上显示模式。 以声明方式内创建连接本身`<staticconnections>`页上的元素。 此示例演示创建连接的一种方法-请注意`ProviderConnectionPointID`属性中`<asp:webpartconnection>`元素。 此外可以以编程方式; 创建连接执行该操作的代码位于`Button1_Click`方法。 在这种情况下，<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象是创建并随后传递到创建实际的连接的方法。 是否以声明方式或以编程方式创建的连接，连接点必须始终指定提供程序和使用者。 `Button2_Click`方法访问<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象提供程序和使用者，并将一些其属性值写入到页中的标签。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 加载浏览器中的页面后，单击**连接点的详细信息**按钮。 有关建立在声明性的连接中的提供程序和使用者连接点的信息将出现。 接下来，使用**显示模式**下拉列表控件切换到页连接模式。 上的谓词菜单**ZIP Code 使用者**<xref:System.Web.UI.WebControls.WebParts.WebPart>控件 （由标题栏中的向下箭头表示），单击连接谓词。 UI 显示方式，连接会自动创建`<asp:connectionszone>`页面中声明的控件。 这是另一种方式创建的连接 （通过用户界面），以及前面所述的声明性和编程方法。 单击**断开连接**按钮来终止现有的静态连接。 单击**创建提供程序的连接**链接。 UI 现在显示一个下拉列表控件，其中列出了提供程序连接点的显示名称。 在下拉列表中，选择连接点，然后单击**Connect**以完成连接。 接下来，单击**断开连接**试。 然后，单击**动态连接**按钮以编程方式创建的连接。 使用**显示模式**控件以返回页后，可以浏览模式。 单击**点连接的详细信息**按钮同样，若要一次指示提供者连接点对象有关的详细信息。  
  
 建立的连接并使用以下三种方式提供者连接点演示了示例： 在 Web 页面标记; 中声明静态连接在使用的代码中创建的连接<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象和由用户通过连接用户界面创建的连接。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Web 部件连接概述</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">提供者控件中的方法，该方法将接口实例返回给使用者以建立连接。</param>
        <param name="interfaceType">提供者提供给使用者的接口的 <see cref="T:System.Type" />。</param>
        <param name="controlType">与提供者连接点相关联的提供者控件的 <see cref="T:System.Type" />。</param>
        <param name="displayName">在连接用户界面 (UI) 中向用户显示的提供者连接点的友好显示名称。</param>
        <param name="id">提供者连接点的唯一标识符。</param>
        <param name="allowsMultipleConnections">一个布尔值，指示提供者连接点是否可以同时与多个使用者保持连接。</param>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>构造函数<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>类只需调用基构造函数中，将传递给它的各种参数和初始化类的基类。  
  
 基类构造函数检查连接点的参数编号，并可能会引发几个例外情况。 有关可能的异常的列表，请参阅异常部分。  
  
 您可以调用<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A>构造函数创建的实例<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>类。 但是，在你所在只需建立的连接并不扩展类的情况下，应调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法从提供程序返回现有的连接点对象。  
  
   
  
## Examples  
 下面的代码示例演示如何从派生<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>类，以创建自定义提供程序连接点。  
  
 代码示例包含三个部分：  
  
-   包含提供程序的源文件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，使用者<xref:System.Web.UI.WebControls.WebParts.WebPart>控制和自定义<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象。  
  
-   承载静态连接中的控件的网页。  
  
-   如何运行此代码示例的说明。  
  
 代码示例的第一部分是提供程序和使用者的源<xref:System.Web.UI.WebControls.WebParts.WebPart>控件和自定义<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>类，名为`TableProviderConnectionPoint`。 请注意，构造函数的`TableProviderConnectionPoint`类会调用基构造函数，并向其传递所需的参数的 Parameters 节中所示。 此外请注意，在`TableProviderWebPart`类，`GetConnectionInterface`方法指定为回调方法，对于连接，并`ConnectionProvider`特性声明自定义`TableProviderConnectionPoint`作为参数。 此示例演示如何创建自定义提供程序连接点，然后将其与提供者控件关联。 此示例假定，动态编译的源代码，因此应将源代码文件放在 Web 应用程序的 App_Code 子文件夹中。  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 代码示例的第二部分是承载静态 Web 部件连接中的自定义控件的网页。 在页面的顶部是`Register`指令，用于声明前缀和自定义控件的命名空间。 使用声明连接`<asp:webpartconnection>`元素，并提供者和使用者控件中声明`<asp:webpartzone>`元素。  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 在浏览器页面加载。 已在控件之间的连接存在，并使用者显示的数据提供程序，因为连接已声明为页中的静态连接。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="interfaceType" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="controlType" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="displayName" /> 为 <see langword="null" /> 或空字符串 ("")。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" /> 与提供程序控件（或从提供程序控件派生的有效类）的类型不同。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Web 部件控件</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">在 Web 部件连接中用作提供者的控件。</param>
        <summary>调用提供者控件中的回调方法，该方法获取一个接口实例以便返回给使用者。</summary>
        <returns>一个 <see cref="T:System.Object" />，它是提供者返回给使用者的接口实例，该接口用于建立连接。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回一个对象是用来建立连接的接口的实例的提供者控件中。 对象的类型将是接口的实现的类型。 例如，为连接 Web 部件控件集所实现的两个接口<xref:System.Web.UI.WebControls.WebParts.IWebPartField>和<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>。 当<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>上调用方法<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象，如果关联的提供程序实现这些接口之一，返回的对象将属于相同的类型。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法由调用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>对象时激活的连接。 这是实际启动的连接并开始过程，使两个控件能够共享数据的关键步骤。  
  
 在连接中的使用者控件必须能够与相同类型的接口作为提供程序。 如果未显示，控件的不兼容和<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象必须用于建立连接。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">在 Web 部件连接中用作提供者的控件。</param>
        <summary>获取受提供者连接点支持的辅助接口的可选集合。</summary>
        <returns>其他接口的 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />，这些接口由用作提供者的控件提供。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 提供者连接点对象始终具有一个默认接口，用于建立与使用者的连接。 通过调用检索默认接口的实例<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象。  
  
 但是，某些提供程序控件将实现多个接口向使用者提供的连接的一部分。 这些接口，不是默认的用于建立连接，称为辅助接口。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>方法提供了一种方法，就像返回到的辅助接口的引用的集合<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法返回的默认接口的引用。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />中的方法<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />类不包含任何实现; 它将返回空集合的辅助接口。 若要实现此方法，则必须从<see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />类，并重写此方法，使之返回一组特定的辅助接口。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>