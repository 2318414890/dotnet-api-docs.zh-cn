<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cd78a1f3ef930919223c519dad4ba41ea2113649" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51914495" /></Metadata><TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e1f33-101">定义连接点对象，该对象允许服务器控件作为使用者，以建立与提供者的连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-101">Defines a connection point object that enables a server control acting as a consumer to form a connection with a provider.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1f33-102">在两个服务器控件之间每个 Web 部件连接中，每个控件必须具有 （还有其他要求） 关联的连接点对象，使它连接到另一个控件，并能够提供或使用数据，具体取决于控件指定为该提供程序或使用者的连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-102">In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection.</span></span> <span data-ttu-id="e1f33-103">一个<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象通常包含有关如何控制可以连接到另一个控件和可共享的数据类型的详细信息。</span><span class="sxs-lookup"><span data-stu-id="e1f33-103">A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share.</span></span> <span data-ttu-id="e1f33-104">对于作为连接中的使用者的控件，其连接点必须是<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。</span><span class="sxs-lookup"><span data-stu-id="e1f33-104">For a control acting as the consumer in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.</span></span> <span data-ttu-id="e1f33-105">在 Web 部件连接和连接点上的信息，请参阅下面的另请参见部分中列出的主题。</span><span class="sxs-lookup"><span data-stu-id="e1f33-105">For details on Web Parts connections and connection points, read the topics listed in the See Also section below.</span></span>  
  
 <span data-ttu-id="e1f33-106">若要创建<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象，则需要几个步骤：</span><span class="sxs-lookup"><span data-stu-id="e1f33-106">To create a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, several steps are required:</span></span>  
  
1.  <span data-ttu-id="e1f33-107">启用使用者控件以引用接口实例。</span><span class="sxs-lookup"><span data-stu-id="e1f33-107">Enable a consumer control to reference an interface instance.</span></span> <span data-ttu-id="e1f33-108">一个<xref:System.Web.UI.WebControls.WebParts.WebPart>或其他服务器控件 (将添加到的服务器任何的控件类型<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域可用) 必须能够使用特定的接口实例中的数据。</span><span class="sxs-lookup"><span data-stu-id="e1f33-108">A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control that will be added to a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) must be able to consume data from a specific interface instance.</span></span> <span data-ttu-id="e1f33-109">该控件无需实现接口;仅提供程序必须实现它。</span><span class="sxs-lookup"><span data-stu-id="e1f33-109">The control need not implement the interface; only the provider must implement it.</span></span> <span data-ttu-id="e1f33-110">使用者也可以使用确切的接口类型由提供程序提供服务或者，如果不是，请<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象可用于数据从提供程序的接口类型转换为使用者所理解的类型。</span><span class="sxs-lookup"><span data-stu-id="e1f33-110">The consumer can either work with the exact interface type served by a provider or, if it does not, a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object can be used to transform data from a provider's interface type to a type understood by the consumer.</span></span> <span data-ttu-id="e1f33-111">启用使用者的典型方法是声明一个私有字段来包含所需的接口类型的引用。</span><span class="sxs-lookup"><span data-stu-id="e1f33-111">A typical way to enable a consumer is to declare a private field to contain a reference to the desired interface type.</span></span>  
  
2.  <span data-ttu-id="e1f33-112">标识一个回调方法。</span><span class="sxs-lookup"><span data-stu-id="e1f33-112">Identify a callback method.</span></span> <span data-ttu-id="e1f33-113">使用者中的方法必须标识为要与该提供程序建立连接的回调方法。</span><span class="sxs-lookup"><span data-stu-id="e1f33-113">A method in the consumer must be identified as the callback method to establish a connection with the provider.</span></span> <span data-ttu-id="e1f33-114">此方法检索提供程序实现，并分配它向私有字段 （例如） 创建第一步中的接口的实例。</span><span class="sxs-lookup"><span data-stu-id="e1f33-114">This method retrieves an instance of the interface that the provider implements, and assigns it to (for example) the private field created in the first step.</span></span> <span data-ttu-id="e1f33-115">Web 部件方法，以确定使用者中的回调方法将添加`ConnectionConsumer`元数据特性 (由定义<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>类) 到接收接口实例的方法。</span><span class="sxs-lookup"><span data-stu-id="e1f33-115">The Web Parts approach for identifying a callback method in the consumer is to add a `ConnectionConsumer` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> class) to the method that receives the interface instance.</span></span> <span data-ttu-id="e1f33-116">添加属性后，所需的唯一参数是要用于使用者连接点的显示名称。</span><span class="sxs-lookup"><span data-stu-id="e1f33-116">When the attribute is added, the only required parameter is a display name to use for the consumer connection point.</span></span> <span data-ttu-id="e1f33-117">此外可添加可选参数，例如 id。</span><span class="sxs-lookup"><span data-stu-id="e1f33-117">Optional parameters can also be added, such as an ID.</span></span>  
  
3.  <span data-ttu-id="e1f33-118">过程和输出接口实例中的数据。</span><span class="sxs-lookup"><span data-stu-id="e1f33-118">Process and output the data from the interface instance.</span></span> <span data-ttu-id="e1f33-119">根据需要对数据执行任何内部处理，并且然后通常使用者控件将呈现到页的数据。</span><span class="sxs-lookup"><span data-stu-id="e1f33-119">Perform any internal processing as needed on the data, and then typically a consumer control will render the data to the page.</span></span> <span data-ttu-id="e1f33-120">执行此操作的常用方法是重写控件的<xref:System.Web.UI.Control.OnPreRender%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e1f33-120">A common way of doing this is to override the control's <xref:System.Web.UI.Control.OnPreRender%2A> method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="e1f33-121">在过程同步请求，使用者应请求数据直接从提供程序期间或之后立刻<xref:System.Web.UI.Control.PreRender>事件。</span><span class="sxs-lookup"><span data-stu-id="e1f33-121">During a synchronous request, a consumer should request data directly from the provider during or immediately after the <xref:System.Web.UI.Control.PreRender> event.</span></span> <span data-ttu-id="e1f33-122">在异步请求，如果提供程序的回调不会调用方法的任意位置在呈现期间，开发人员可以假定没有数据已发送到使用者。</span><span class="sxs-lookup"><span data-stu-id="e1f33-122">During an asynchronous request, if the provider's callback method is not called at any point during rendering, the developer can assume that no data was sent to the consumer.</span></span>  
  
 <span data-ttu-id="e1f33-123">控件具有已配置为使用者后，该控件可以参与连接 （假设提供者控件也配置并且可用）。</span><span class="sxs-lookup"><span data-stu-id="e1f33-123">After a control has been equipped to act as a consumer, the control can participate in connections (assuming that a provider control is also equipped and available).</span></span> <span data-ttu-id="e1f33-124">若要在 Web 页面的标记中创建的静态声明性连接，开发人员可以使用`<asp:webpartconnection>`元素。</span><span class="sxs-lookup"><span data-stu-id="e1f33-124">To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="e1f33-125">如果`ConnectionConsumer`属性标识的回调方法的使用者源代码中指定的 ID 的连接点，则必须将该值分配给`ConsumerConnectionPointID`属性中`<asp:webpartconnection>`页面上的元素。</span><span class="sxs-lookup"><span data-stu-id="e1f33-125">If the `ConnectionConsumer` attribute in the consumer source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page.</span></span> <span data-ttu-id="e1f33-126">开发人员可以指定使用者连接点的 ID 的原因是在使用者控件中定义的多个连接点。</span><span class="sxs-lookup"><span data-stu-id="e1f33-126">A reason that a developer might specify an ID for a consumer connection point is if there are multiple connection points defined in the consumer control.</span></span> <span data-ttu-id="e1f33-127">如果没有为使用者控件中的使用者连接点指定一个 ID，一个值，无需分配给`ConsumerConnectionPointID`属性页中，因为该连接将使用从获取的默认值创建<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>字段。</span><span class="sxs-lookup"><span data-stu-id="e1f33-127">If an ID is not specified for the consumer connection point in the consumer control, a value does not have to be assigned to the `ConsumerConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.</span></span>  
  
 <span data-ttu-id="e1f33-128">若要在代码中创建的连接，开发人员必须创建一个新<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象通过调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>方法，并将其传递给使用者控件，以及 ID 或索引的定义的 ID<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>的使用者控件中的对象。</span><span class="sxs-lookup"><span data-stu-id="e1f33-128">To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method and passing to it the ID of the consumer control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object in the consumer control.</span></span> <span data-ttu-id="e1f33-129">返回<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象，对使用者控件的引用以及对提供者控件和相应的引用<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象，同时传递给<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法来创建一个新<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>对象。</span><span class="sxs-lookup"><span data-stu-id="e1f33-129">The returned <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, along with a reference to the consumer control, a reference to the provider control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.</span></span>  
  
 <span data-ttu-id="e1f33-130">虽然开发人员可以使用使用者连接点，以声明方式或以编程方式建立连接的过程，还可以进行用户交互的使用者连接点建立连接通过用户界面 (UI)。</span><span class="sxs-lookup"><span data-stu-id="e1f33-130">Although developers can use consumer connection points as part of establishing connections either declaratively or programmatically, users can also interact with consumer connection points to establish connections through the user interface (UI).</span></span> <span data-ttu-id="e1f33-131">如果开发人员声明<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控件在网页上，它提供了用户创建连接的运行时 UI。</span><span class="sxs-lookup"><span data-stu-id="e1f33-131">If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections.</span></span> <span data-ttu-id="e1f33-132">如果用户选择的提供者控件作为起点来建立连接，通过单击其连接谓词 （它们还可以选择使用者; 没有任何区别中生成连接），他们将在 UI 中看到的下拉列表控件显示名称提供使用者连接点 （或如果有多个工具的点） 提供程序可以发送到的数据。</span><span class="sxs-lookup"><span data-stu-id="e1f33-132">If users choose the provider control as the starting point for establishing the connection by clicking its connect verb (they could also choose the consumer; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display names of the available consumer connection point (or points if there are multiple ones) that the provider can send the data to.</span></span> <span data-ttu-id="e1f33-133">用户必须选择使用者连接点来建立连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-133">Users must select a consumer connection point to establish a connection.</span></span>  
  
 <span data-ttu-id="e1f33-134">一个<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象将直接与一个特定的使用者控件，相关联，并将连接的详细信息存储在它继承自基类的属性<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类。</span><span class="sxs-lookup"><span data-stu-id="e1f33-134">A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object associates directly with a specific consumer control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="e1f33-135">例如，在继承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性，使用者连接点保存的接口，它使用的类型。</span><span class="sxs-lookup"><span data-stu-id="e1f33-135">For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a consumer connection point keeps the type of interface it uses.</span></span> <span data-ttu-id="e1f33-136">如果提供程序和连接中的使用者都能理解的接口类型，这些控件是兼容并能建立直接连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-136">If the provider and consumer in a connection both understand the interface type, the controls are compatible and capable of forming a direct connection.</span></span> <span data-ttu-id="e1f33-137">如果提供程序和使用者不能使用相同的接口类型，它们是不兼容，并且必须使用<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象将提供者连接点<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>到使用者可以使用的类型的属性。</span><span class="sxs-lookup"><span data-stu-id="e1f33-137">If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property into a type that the consumer can work with.</span></span> <span data-ttu-id="e1f33-138">另一个重要的继承的属性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>属性，它提供一个友好名称以供用户选择使用者连接用户界面中显示点创建连接时。</span><span class="sxs-lookup"><span data-stu-id="e1f33-138">Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a consumer connection point when creating connections.</span></span> <span data-ttu-id="e1f33-139">显示名称是必需的参数，当开发人员添加`ConnectionConsumer`属性为使用者控件中的回调方法。</span><span class="sxs-lookup"><span data-stu-id="e1f33-139">The display name is the required parameter when developers add a `ConnectionConsumer` attribute to the callback method in a consumer control.</span></span> <span data-ttu-id="e1f33-140">继承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>属性也很有用，如上所述，因为它的使用者连接点提供的唯一标识符，在的使用者具有多个连接点。</span><span class="sxs-lookup"><span data-stu-id="e1f33-140">The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a consumer connection point in the event that a consumer has multiple connection points.</span></span> <span data-ttu-id="e1f33-141">使用者可以有多个<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象定义中，然后在此情况下，当开发人员添加`ConnectionConsumer`属性的方法，它们应指定一个 ID 值来区分每个连接点。</span><span class="sxs-lookup"><span data-stu-id="e1f33-141">A consumer can have multiple <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionConsumer` attribute to a method, they should specify an ID value to distinguish each connection point.</span></span> <span data-ttu-id="e1f33-142">另一个值得注意的继承的属性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性，用于指示使用者连接点是否可以同时连接到多个提供程序。</span><span class="sxs-lookup"><span data-stu-id="e1f33-142">One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a consumer connection point can connect simultaneously to multiple providers.</span></span> <span data-ttu-id="e1f33-143">此属性的值是`false`默认情况下，使用者连接点 (而它将默认为`true`的提供者连接点)。</span><span class="sxs-lookup"><span data-stu-id="e1f33-143">This property value is `false` by default for consumer connection points (whereas it defaults to `true` for provider connection points).</span></span>  
  
 <span data-ttu-id="e1f33-144"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>类会将多个唯一的方法添加到成员它继承自<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类。</span><span class="sxs-lookup"><span data-stu-id="e1f33-144">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class.</span></span> <span data-ttu-id="e1f33-145"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>方法将调用从提供程序检索接口实例的使用者的自己定义回调方法。</span><span class="sxs-lookup"><span data-stu-id="e1f33-145">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method invokes the consumer's own defined callback method to retrieve the interface instance from the provider.</span></span> <span data-ttu-id="e1f33-146"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>方法返回一个布尔值，该值指示连接点是否能够建立连接，基于相关联的使用者控件的当前状态。</span><span class="sxs-lookup"><span data-stu-id="e1f33-146">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method returns a Boolean value that indicates whether the connection point is able to establish connections, based on the current state of the associated consumer control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1f33-147">下面的代码示例显示了以声明方式创建连接，以编程方式或通过用户界面，每种情况中都使用的使用者连接点的简单方法。</span><span class="sxs-lookup"><span data-stu-id="e1f33-147">The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.</span></span>  
  
 <span data-ttu-id="e1f33-148">该示例包含四个部分：</span><span class="sxs-lookup"><span data-stu-id="e1f33-148">The example has four parts:</span></span>  
  
-   <span data-ttu-id="e1f33-149">使你能够更改 Web 部件的用户控件在页面上显示模式。</span><span class="sxs-lookup"><span data-stu-id="e1f33-149">A user control that enables you to change the Web Parts display mode on a page.</span></span>  
  
-   <span data-ttu-id="e1f33-150">源接口和两个代码<xref:System.Web.UI.WebControls.WebParts.WebPart>控件作为提供程序和使用者的连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-150">Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.</span></span>  
  
-   <span data-ttu-id="e1f33-151">若要托管的所有控件和运行的代码示例网页。</span><span class="sxs-lookup"><span data-stu-id="e1f33-151">A Web page to host all the controls and run the code example.</span></span>  
  
-   <span data-ttu-id="e1f33-152">如何运行示例页的说明。</span><span class="sxs-lookup"><span data-stu-id="e1f33-152">An explanation of how to run the example page.</span></span>  
  
 <span data-ttu-id="e1f33-153">此代码示例的第一个部分是使用户能够更改网页上的显示模式的用户控件。</span><span class="sxs-lookup"><span data-stu-id="e1f33-153">The first part of this code example is the user control that enables users to change display modes on a Web page.</span></span> <span data-ttu-id="e1f33-154">将以下源代码保存到.ascx 文件，将其分配到的文件名称`Src`属性的`Register`指令对该用户控件，即托管的 Web 页面的顶部附近。</span><span class="sxs-lookup"><span data-stu-id="e1f33-154">Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page.</span></span> <span data-ttu-id="e1f33-155">有关详细信息显示在此控件模式和对源代码的说明，请参见[演练： 在 Web 部件页上更改显示模式](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。</span><span class="sxs-lookup"><span data-stu-id="e1f33-155">For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 <span data-ttu-id="e1f33-156">代码示例的第二部分是为接口和控件的源代码。</span><span class="sxs-lookup"><span data-stu-id="e1f33-156">The second part of the code example is the source code for the interface and controls.</span></span> <span data-ttu-id="e1f33-157">源代码文件包含一个简单的接口名为`IZipCode`。</span><span class="sxs-lookup"><span data-stu-id="e1f33-157">The source file contains a simple interface named `IZipCode`.</span></span> <span data-ttu-id="e1f33-158">此外，还有<xref:System.Web.UI.WebControls.WebParts.WebPart>类名为`ZipCodeWebPart`的实现接口，并充当提供者控件。</span><span class="sxs-lookup"><span data-stu-id="e1f33-158">There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control.</span></span> <span data-ttu-id="e1f33-159">另<xref:System.Web.UI.WebControls.WebParts.WebPart>类命名为`WeatherWebPart`，并充当使用者的连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-159">The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection.</span></span> <span data-ttu-id="e1f33-160">此类有一个名为方法`GetZipCode`获取的实例`IZipCode`从提供者控件的接口。</span><span class="sxs-lookup"><span data-stu-id="e1f33-160">This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control.</span></span> <span data-ttu-id="e1f33-161">请注意，此方法标记为与使用者的连接点方法`ConnectionConsumer`其元数据中的属性。</span><span class="sxs-lookup"><span data-stu-id="e1f33-161">Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.</span></span> <span data-ttu-id="e1f33-162">这是用于标识使用者控件中的连接点方法的机制。</span><span class="sxs-lookup"><span data-stu-id="e1f33-162">This is the mechanism for identifying the connection point method in the consumer control.</span></span>  
  
 <span data-ttu-id="e1f33-163">若要运行的代码示例，必须编译此源代码。</span><span class="sxs-lookup"><span data-stu-id="e1f33-163">For the code example to run, you must compile this source code.</span></span> <span data-ttu-id="e1f33-164">可以显式对其进行编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。</span><span class="sxs-lookup"><span data-stu-id="e1f33-164">You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache.</span></span> <span data-ttu-id="e1f33-165">或者，您可以将源代码放在你网站的 App_Code 文件夹中，其中它将被动态编译在运行时。</span><span class="sxs-lookup"><span data-stu-id="e1f33-165">Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time.</span></span> <span data-ttu-id="e1f33-166">此代码示例使用动态编译。</span><span class="sxs-lookup"><span data-stu-id="e1f33-166">This code example uses dynamic compilation.</span></span> <span data-ttu-id="e1f33-167">有关演示如何编译的演练，请参阅[演练： 开发和使用自定义 Web 服务器控件](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。</span><span class="sxs-lookup"><span data-stu-id="e1f33-167">For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).</span></span>  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 <span data-ttu-id="e1f33-168">代码示例的第三部分是 Web 页。</span><span class="sxs-lookup"><span data-stu-id="e1f33-168">The third part of the code example is the Web page.</span></span> <span data-ttu-id="e1f33-169">顶部附近是`Register`指令用于注册的自定义控件形成连接，并使用户能够更改的用户控件在页面上显示模式。</span><span class="sxs-lookup"><span data-stu-id="e1f33-169">Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page.</span></span> <span data-ttu-id="e1f33-170">以声明方式内创建连接本身`<staticconnections>`页上的元素。</span><span class="sxs-lookup"><span data-stu-id="e1f33-170">The connection itself is created declaratively within the `<staticconnections>` element on the page.</span></span> <span data-ttu-id="e1f33-171">此示例演示创建连接的一种方法-请注意`ConsumerConnectionPointID`属性中`<asp:webpartconnection>`元素。</span><span class="sxs-lookup"><span data-stu-id="e1f33-171">This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element.</span></span> <span data-ttu-id="e1f33-172">此外可以以编程方式; 创建连接执行该操作的代码位于`Button1_Click`方法。</span><span class="sxs-lookup"><span data-stu-id="e1f33-172">You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method.</span></span> <span data-ttu-id="e1f33-173">在这种情况下，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象是创建并随后传递到创建实际的连接的方法。</span><span class="sxs-lookup"><span data-stu-id="e1f33-173">In this case, a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is created and then passed to a method that creates the actual connection.</span></span> <span data-ttu-id="e1f33-174">是否以声明方式或以编程方式创建的连接，连接点必须始终指定提供程序和使用者。</span><span class="sxs-lookup"><span data-stu-id="e1f33-174">Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer.</span></span> <span data-ttu-id="e1f33-175">`Button2_Click`方法访问<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象提供程序和使用者，并将一些其属性值写入到页中的标签。</span><span class="sxs-lookup"><span data-stu-id="e1f33-175">The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.</span></span>  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 <span data-ttu-id="e1f33-176">加载浏览器中的页面后，单击**连接点的详细信息**按钮。</span><span class="sxs-lookup"><span data-stu-id="e1f33-176">After you load the page in a browser, click the **Connection Point Details** button.</span></span> <span data-ttu-id="e1f33-177">有关建立在声明性的连接中的提供程序和使用者连接点的信息将出现。</span><span class="sxs-lookup"><span data-stu-id="e1f33-177">Information about the provider and consumer connection points established in the declarative connection appears.</span></span> <span data-ttu-id="e1f33-178">接下来，使用**显示模式**下拉列表控件切换到页连接模式。</span><span class="sxs-lookup"><span data-stu-id="e1f33-178">Next, use the **Display Mode** drop-down control to switch the page into connect mode.</span></span> <span data-ttu-id="e1f33-179">上的谓词菜单**ZIP 代码提供程序**<xref:System.Web.UI.WebControls.WebParts.WebPart>控件 （由标题栏中的向下箭头表示），单击连接谓词。</span><span class="sxs-lookup"><span data-stu-id="e1f33-179">On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb.</span></span> <span data-ttu-id="e1f33-180">UI 显示方式，连接会自动创建`<asp:connectionszone>`页面中声明的控件。</span><span class="sxs-lookup"><span data-stu-id="e1f33-180">The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page.</span></span> <span data-ttu-id="e1f33-181">这是另一种方式创建的连接 （通过用户界面），以及前面所述的声明性和编程方法。</span><span class="sxs-lookup"><span data-stu-id="e1f33-181">This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier.</span></span> <span data-ttu-id="e1f33-182">单击**断开连接**按钮来终止现有的静态连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-182">Click the **Disconnect** button to terminate the existing static connection.</span></span> <span data-ttu-id="e1f33-183">单击**创建连接到使用者**链接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-183">Click the **Create a Connection to a Consumer** link.</span></span> <span data-ttu-id="e1f33-184">UI 现在显示一个下拉列表控件，其中列出了使用者连接点的显示名称。</span><span class="sxs-lookup"><span data-stu-id="e1f33-184">The UI now displays a drop-down control that lists the consumer connection point display name.</span></span> <span data-ttu-id="e1f33-185">在下拉列表中，选择连接点，然后单击**Connect**以完成连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-185">Select the connection point in the drop-down list, and then click **Connect** to complete the connection.</span></span> <span data-ttu-id="e1f33-186">接下来，单击**断开连接**试。</span><span class="sxs-lookup"><span data-stu-id="e1f33-186">Next, click **Disconnect** again.</span></span> <span data-ttu-id="e1f33-187">单击**动态连接**按钮以编程方式创建的连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-187">Click the **Dynamic Connection** button to create a connection programmatically.</span></span> <span data-ttu-id="e1f33-188">使用**显示模式**控件以返回页后，可以浏览模式。</span><span class="sxs-lookup"><span data-stu-id="e1f33-188">Use the **Display Mode** control to return the page to browse mode.</span></span> <span data-ttu-id="e1f33-189">单击**点连接的详细信息**同样，按钮，以指示有关的详细信息的使用者连接点对象一次的详细信息。</span><span class="sxs-lookup"><span data-stu-id="e1f33-189">Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.</span></span>  
  
 <span data-ttu-id="e1f33-190">建立连接和使用者连接点使用以下三种方式演示了示例： 在 Web 页面标记; 中声明静态连接在使用的代码中创建的连接<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象和由用户通过连接用户界面创建的连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-190">The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object; and a connection created by a user through the connection UI.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308"><span data-ttu-id="e1f33-191">ASP.NET Web 部件页</span><span class="sxs-lookup"><span data-stu-id="e1f33-191">ASP.NET Web Parts Pages</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b"><span data-ttu-id="e1f33-192">Web 部件连接概述</span><span class="sxs-lookup"><span data-stu-id="e1f33-192">Web Parts Connections Overview</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod"><span data-ttu-id="e1f33-193">使用者控件中的方法，该方法将接口实例返回给使用者以建立连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-193">The method in the consumer control that returns an interface instance to consumers to establish a connection.</span></span></param>
        <param name="interfaceType"><span data-ttu-id="e1f33-194">使用者从提供者接收的接口的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="e1f33-194">The <see cref="T:System.Type" /> of the interface that the consumer receives from a provider.</span></span></param>
        <param name="controlType"><span data-ttu-id="e1f33-195">使用者连接点所关联的使用者控件的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="e1f33-195">The <see cref="T:System.Type" /> of the consumer control with which the consumer connection point is associated.</span></span></param>
        <param name="displayName"><span data-ttu-id="e1f33-196">在连接用户界面 (UI) 中向用户显示的使用者连接点的友好显示名称。</span><span class="sxs-lookup"><span data-stu-id="e1f33-196">A friendly display name for the consumer connection point that appears to users in the connection user interface (UI).</span></span></param>
        <param name="id"><span data-ttu-id="e1f33-197">使用者连接点的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="e1f33-197">A unique identifier for the consumer connection point.</span></span></param>
        <param name="allowsMultipleConnections"><span data-ttu-id="e1f33-198">一个布尔值，指示使用者连接点是否可同时拥有与提供者的多个连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-198">A Boolean value indicating whether the consumer connection point can have multiple simultaneous connections with providers.</span></span></param>
        <summary><span data-ttu-id="e1f33-199">初始化 <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e1f33-199">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1f33-200"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A>构造函数<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>类只需调用基构造函数中，将传递给它的各种参数和初始化类的基类。</span><span class="sxs-lookup"><span data-stu-id="e1f33-200">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.</span></span>  
  
 <span data-ttu-id="e1f33-201">基类构造函数检查连接点的参数编号，并可能会引发几个例外情况。</span><span class="sxs-lookup"><span data-stu-id="e1f33-201">The base class constructor checks a number of the parameters for a connection point and can throw several exceptions.</span></span> <span data-ttu-id="e1f33-202">有关可能的异常的列表，请参阅异常部分。</span><span class="sxs-lookup"><span data-stu-id="e1f33-202">For a list of possible exceptions, see the Exceptions section.</span></span>  
  
 <span data-ttu-id="e1f33-203">您可以调用<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A>构造函数创建的实例<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>类。</span><span class="sxs-lookup"><span data-stu-id="e1f33-203">You can call the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class.</span></span> <span data-ttu-id="e1f33-204">但是，在你所在只需建立的连接并不扩展类的情况下，应调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>方法从提供程序返回一个连接点对象。</span><span class="sxs-lookup"><span data-stu-id="e1f33-204">However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method to return a connection point object from a provider.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1f33-205">下面的代码示例演示如何从派生<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>类，以创建自定义提供程序连接点。</span><span class="sxs-lookup"><span data-stu-id="e1f33-205">The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.</span></span>  
  
 <span data-ttu-id="e1f33-206">代码示例包含三个部分：</span><span class="sxs-lookup"><span data-stu-id="e1f33-206">The code example has three parts:</span></span>  
  
-   <span data-ttu-id="e1f33-207">包含提供程序的源文件<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，使用者<xref:System.Web.UI.WebControls.WebParts.WebPart>控制和自定义<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。</span><span class="sxs-lookup"><span data-stu-id="e1f33-207">A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.</span></span>  
  
-   <span data-ttu-id="e1f33-208">承载静态连接中的控件的网页。</span><span class="sxs-lookup"><span data-stu-id="e1f33-208">A Web page that hosts the controls in a static connection.</span></span>  
  
-   <span data-ttu-id="e1f33-209">如何运行此代码示例的说明。</span><span class="sxs-lookup"><span data-stu-id="e1f33-209">An explanation of how to run the example code.</span></span>  
  
 <span data-ttu-id="e1f33-210">代码示例的第一部分是提供程序和使用者的源<xref:System.Web.UI.WebControls.WebParts.WebPart>控件和自定义<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>类，名为`TableConsumerConnectionPoint`。</span><span class="sxs-lookup"><span data-stu-id="e1f33-210">The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`.</span></span> <span data-ttu-id="e1f33-211">请注意，构造函数的`TableConsumerConnectionPoint`类会调用基构造函数，并向其传递所需的参数的 Parameters 节中所示。</span><span class="sxs-lookup"><span data-stu-id="e1f33-211">Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section.</span></span> <span data-ttu-id="e1f33-212">此外请注意，在`TableConsumer`类，`SetConnectionInterface`方法指定为回调方法，对于连接，并`ConnectionConsumer`特性声明自定义`TableConsumerConnectionPoint`作为参数。</span><span class="sxs-lookup"><span data-stu-id="e1f33-212">Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter.</span></span> <span data-ttu-id="e1f33-213">此示例演示如何创建自定义使用者连接点，然后将其与使用者控件关联。</span><span class="sxs-lookup"><span data-stu-id="e1f33-213">This demonstrates how to create a custom consumer connection point and then associate it with a consumer control.</span></span> <span data-ttu-id="e1f33-214">此示例假定，动态编译的源代码，因此应将源代码文件放在 Web 应用程序的 App_Code 子文件夹中。</span><span class="sxs-lookup"><span data-stu-id="e1f33-214">This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.</span></span>  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 <span data-ttu-id="e1f33-215">代码示例的第二部分是承载静态 Web 部件连接中的自定义控件的网页。</span><span class="sxs-lookup"><span data-stu-id="e1f33-215">The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection.</span></span> <span data-ttu-id="e1f33-216">在页面的顶部是`Register`指令，用于声明前缀和自定义控件的命名空间。</span><span class="sxs-lookup"><span data-stu-id="e1f33-216">At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls.</span></span> <span data-ttu-id="e1f33-217">使用声明连接`<asp:webpartconnection>`元素，并提供者和使用者控件中声明`<asp:webpartzone>`元素。</span><span class="sxs-lookup"><span data-stu-id="e1f33-217">The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.</span></span>  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 <span data-ttu-id="e1f33-218">在浏览器页面加载。</span><span class="sxs-lookup"><span data-stu-id="e1f33-218">Load the page in a browser.</span></span> <span data-ttu-id="e1f33-219">已在控件之间的连接存在，并使用者显示的数据提供程序，因为连接已声明为页中的静态连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-219">The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e1f33-220"><paramref name="callbackMethod" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e1f33-220"><paramref name="callbackMethod" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e1f33-221">\- 或 -</span><span class="sxs-lookup"><span data-stu-id="e1f33-221">\- or -</span></span> 
 <span data-ttu-id="e1f33-222"><paramref name="interfaceType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e1f33-222"><paramref name="interfaceType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e1f33-223">\- 或 -</span><span class="sxs-lookup"><span data-stu-id="e1f33-223">\- or -</span></span> 
 <span data-ttu-id="e1f33-224"><paramref name="controlType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e1f33-224"><paramref name="controlType" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e1f33-225">\- 或 -</span><span class="sxs-lookup"><span data-stu-id="e1f33-225">\- or -</span></span> 
 <span data-ttu-id="e1f33-226"><paramref name="displayName" /> 为 <see langword="null" /> 或空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="e1f33-226"><paramref name="displayName" /> is <see langword="null" /> or an empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e1f33-227"><paramref name="controlType" /> 与使用者控件（或从使用者控件派生的有效类）的类型不同。</span><span class="sxs-lookup"><span data-stu-id="e1f33-227"><paramref name="controlType" /> is not the same type as the consumer control (or a valid class derived from it).</span></span></exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308"><span data-ttu-id="e1f33-228">ASP.NET Web 部件页</span><span class="sxs-lookup"><span data-stu-id="e1f33-228">ASP.NET Web Parts Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="e1f33-229">与使用者连接点相关联的使用者控件。</span><span class="sxs-lookup"><span data-stu-id="e1f33-229">The consumer control associated with a consumer connection point.</span></span></param>
        <param name="data"><span data-ttu-id="e1f33-230">从提供者控件返回的接口实例。</span><span class="sxs-lookup"><span data-stu-id="e1f33-230">The interface instance returned from a provider control.</span></span></param>
        <summary><span data-ttu-id="e1f33-231">调用使用者控件中的回调方法，并从提供者控件检索接口实例。</span><span class="sxs-lookup"><span data-stu-id="e1f33-231">Invokes the callback method in a consumer control and retrieves the interface instance from a provider control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1f33-232">此方法从包含数据的使用者控件的提供程序接收接口实例。</span><span class="sxs-lookup"><span data-stu-id="e1f33-232">This method receives an interface instance from a provider that contains data for the consumer control.</span></span>  
  
 <span data-ttu-id="e1f33-233"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>方法由调用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>对象时激活的连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-233">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated.</span></span> <span data-ttu-id="e1f33-234">这是属于启动的连接和启用共享数据的两个控件的一个关键步骤。</span><span class="sxs-lookup"><span data-stu-id="e1f33-234">This is a critical step that is part of initiating a connection and enabling two controls to share data.</span></span>  
  
 <span data-ttu-id="e1f33-235">在连接中的使用者控件必须能够与相同类型的接口作为提供程序。</span><span class="sxs-lookup"><span data-stu-id="e1f33-235">The consumer control in a connection must be able to work with the same type of interface as the provider.</span></span> <span data-ttu-id="e1f33-236">如果未显示，控件的不兼容和<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象必须用于建立连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-236">If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e1f33-237"><paramref name="control" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e1f33-237"><paramref name="control" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="e1f33-238">与 <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> 相关联的使用者控件。</span><span class="sxs-lookup"><span data-stu-id="e1f33-238">The consumer control associated with the <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</span></span></param>
        <param name="secondaryInterfaces"><span data-ttu-id="e1f33-239">参与连接的任何辅助接口的 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />。</span><span class="sxs-lookup"><span data-stu-id="e1f33-239">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> of any secondary interfaces that participate in a connection.</span></span></param>
        <summary><span data-ttu-id="e1f33-240">确定使用者连接点当前能否建立连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-240">Determines whether a consumer connection point is currently capable of establishing a connection.</span></span></summary>
        <returns><span data-ttu-id="e1f33-241">如果连接点当前可建立连接，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e1f33-241"><see langword="true" /> if a connection point can currently establish a connection; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="e1f33-242">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e1f33-242">The default is <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1f33-243"><xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>方法的实现始终返回`true`中的所有用例<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>类。</span><span class="sxs-lookup"><span data-stu-id="e1f33-243">The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method as implemented always returns `true` in all cases for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class.</span></span> <span data-ttu-id="e1f33-244">此方法的目的是让它检查的状态`control`并`secondaryInterfaces`在某些关键点，以确定是否<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象是目前能够创建连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-244">The intent for this method is to have it check on the state of `control` and `secondaryInterfaces` at certain critical points to determine whether a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is presently able to create a connection.</span></span>  
  
 <span data-ttu-id="e1f33-245">可以有方案其中`control`处于状态可能会使其无法建立连接，或在何处`secondaryInterfaces`必须存在才可以形成连接。</span><span class="sxs-lookup"><span data-stu-id="e1f33-245">There can be scenarios where `control` is in a state that would make it impossible to form a connection, or where `secondaryInterfaces` must exist before a connection can be formed.</span></span> <span data-ttu-id="e1f33-246">在这种情况下，开发人员可以继承<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>类，并重写<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>方法，并提供一个自定义实现，以确定何时准备好支持连接的连接点。</span><span class="sxs-lookup"><span data-stu-id="e1f33-246">In such cases, developers can inherit from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, and override the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method, providing a custom implementation to determine when the connection point is ready to support connections.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>