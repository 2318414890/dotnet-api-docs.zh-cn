<Type Name="IWebPartTable" FullName="System.Web.UI.WebControls.WebParts.IWebPartTable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e5ad3e6c37dcb69e948b4f8d2c0ae35427b384e4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30589821" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWebPartTable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWebPartTable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.IWebPartTable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWebPartTable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWebPartTable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>使用整个数据表定义一个用于连接两个服务器控件的提供者接口。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此接口是用于与 Web 部件连接而设计的。 在 Web 部件连接中，两个驻留在的服务器控件<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域建立连接和共享数据，使用一个控件充当使用者和中充当提供程序的其他控件。 共享 Web 部件连接中的数据的机制是接口实例，该提供程序提供给使用者通过回调方法。 若要建立连接，使用者和提供程序必须同时使用相同的接口类型的共享数据。 如果使用者不能识别提供方发送的接口类型，则仍可能通过转换器连接控件 (<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象)，将转换到类型提供程序发送的接口实例的使用者识别。 有关连接的详细信息，请参阅<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>和[Web 部件连接概述](http://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b)。  
  
 <xref:System.Web.UI.WebControls.WebParts.IWebPartTable>接口是随附的 Web 部件控件集用作用于创建基于数据的表的连接的标准接口的提供程序接口。 你还可以创建自定义接口，以用于 Web 部件连接，但在许多数据驱动 Web 应用程序，十分有用来创建基于相同的字段的连接 (有关详细信息，请参阅<xref:System.Web.UI.WebControls.WebParts.IWebPartField>接口)，行 (有关详细信息，请参阅<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>接口），或从数据源的表。 在典型的连接，<xref:System.Web.UI.WebControls.WebParts.WebPart>控制操作，因为提供程序将实现<xref:System.Web.UI.WebControls.WebParts.IWebPartTable>接口，并为特殊的回调方法中的使用者提供接口的实例。 例如，提供程序可能会实施<xref:System.Web.UI.WebControls.WebParts.IWebPartTable>包含财务性能数据的表的接口。 另一个<xref:System.Web.UI.WebControls.WebParts.WebPart>控件充当使用者将定义用于接收接口实例中，无法提取数据并呈现图表以显示所生成的信息的特殊方法。  
  
 <xref:System.Web.UI.WebControls.WebParts.IWebPartTable>接口具有两个公开的成员。 <xref:System.Web.UI.WebControls.WebParts.IWebPartTable.Schema%2A>属性返回有关封装在数据表的架构信息<xref:System.ComponentModel.PropertyDescriptorCollection>对象。 <xref:System.Web.UI.WebControls.WebParts.IWebPartTable.GetTableData%2A>方法声明 （如提供程序控件） 的实现器用于检索接口实例的表数据时调用回调方法的方法。  
  
   
  
## Examples  
 下面的代码示例演示如何创建使用的两个控件之间的静态连接<xref:System.Web.UI.WebControls.WebParts.IWebPartTable>接口。 代码示例包含三个部分：  
  
-   两个自定义的源代码<xref:System.Web.UI.WebControls.WebParts.WebPart>可以形成连接使用的控件<xref:System.Web.UI.WebControls.WebParts.IWebPartTable>接口，其中一个控件充当提供程序和另一个充当使用者。  
  
-   网页上承载的控件和声明中的持久性格式的静态连接。  
  
-   示例代码运行时，会发生什么情况的说明。  
  
 下面的代码示例的第一部分是两个自定义控件的源代码。 首先实现的提供程序是代码<xref:System.Web.UI.WebControls.WebParts.IWebPartTable>接口。 为了简单起见，在示例中，提供程序使用一些数据，而不是连接到数据库中创建一个表。 `GetConnectionInterface`方法用作提供程序的连接点，接口实例返回给使用者的回调方法。 它可以与使用者，来检索从名为其方法中的提供程序接口实例`SetConnectionInterface`，这将标有`ConnectionConsumer`属性。 在中检索的接口，使用者，实例后其`OnPreRender`方法，调用的实现<xref:System.Web.UI.WebControls.WebParts.IWebPartTable.GetTableData%2A>提供程序，检索实际数据并将其写入到页中的方法。  
  
 若要运行的代码示例，必须编译此源代码。 你可以显式编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以在站点的 App_Code 文件夹中，其中它将动态编译运行时将源代码。 此代码示例使用动态编译。 有关演示如何编译的演练，请参阅[演练： 开发和使用自定义 Web 服务器控件](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_IWebPartTable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPartTable_Overview/CS/ITableSample.cs#2)]
 [!code-vb[WebParts_IWebPartTable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPartTable_Overview/VB/ITableSample.vb#2)]  
  
 下面的代码示例的第二部分是声明了静态连接和主机控件的网页。 页面顶部附近是`Register`声明 App_Code 目录中包含的源代码的命名空间的指令。 使用声明连接`<asp:webpartconnection>`元素。 在中声明的自定义的使用者和提供程序控件`<zonetemplate>`中的元素`<asp:webpartzone>`元素，它需要它们才能进行连接 (两者必须驻留在继承自的区域内<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>类)。  
  
 [!code-aspx-csharp[WebParts_IWebPartRow_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPartRow_Overview/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[WebParts_IWebPartRow_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPartRow_Overview/VB/defaultvb.aspx#1)]  
  
 加载浏览器中的页。 使用者控件将显示从指定的表，它提供者的实例通过提供的数据<xref:System.Web.UI.WebControls.WebParts.IWebPartTable>接口。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.IWebPartField" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.IWebPartRow" />
  </Docs>
  <Members>
    <Member MemberName="GetTableData">
      <MemberSignature Language="C#" Value="public void GetTableData (System.Web.UI.WebControls.WebParts.TableCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTableData(class System.Web.UI.WebControls.WebParts.TableCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IWebPartTable.GetTableData(System.Web.UI.WebControls.WebParts.TableCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTableData (callback As TableCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTableData(System::Web::UI::WebControls::WebParts::TableCallback ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Web.UI.WebControls.WebParts.TableCallback" />
      </Parameters>
      <Docs>
        <param name="callback">一个 <see cref="T:System.Web.UI.WebControls.WebParts.TableCallback" /> 委托，包含接收数据的方法的地址。</param>
        <summary>返回表的数据，该表正由接口用作两个 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件之间的连接基础。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法来检索接口所传递的数据表值。 提供程序实现此方法，并使用者调用它的点时使用者准备好处理或呈现数据。  
  
   
  
## Examples  
 下面的代码示例演示实现和利用<xref:System.Web.UI.WebControls.WebParts.IWebPartTable.GetTableData%2A>方法。 完整的示例所示的类概览<xref:System.Web.UI.WebControls.WebParts.IWebPartTable>接口。 提供者控件实现<xref:System.Web.UI.WebControls.WebParts.IWebPartTable.GetTableData%2A>方法，从而将数据返回指定表中。 使用者控件调用<xref:System.Web.UI.WebControls.WebParts.IWebPartTable.GetTableData%2A>方法在其`OnPreRender`方法，以便此数据的值可以写入页。  
  
 [!code-csharp[WebParts_IWebPartTable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPartTable_Overview/CS/ITableSample.cs#2)]
 [!code-vb[WebParts_IWebPartTable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPartTable_Overview/VB/ITableSample.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schema">
      <MemberSignature Language="C#" Value="public System.ComponentModel.PropertyDescriptorCollection Schema { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.PropertyDescriptorCollection Schema" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IWebPartTable.Schema" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Schema As PropertyDescriptorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::PropertyDescriptorCollection ^ Schema { System::ComponentModel::PropertyDescriptorCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于在两个 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 控件之间共享数据的数据表的架构信息。</summary>
        <value>描述数据的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性提供有关中的数据的属性信息<xref:System.Web.UI.WebControls.WebParts.IWebPartTable>实例。 通过所引用的架构之间没有隐式协定<xref:System.Web.UI.WebControls.WebParts.IWebPartTable.Schema%2A>属性和表中的数据。 协定是，对于每个<xref:System.ComponentModel.PropertyDescriptor>对象在<xref:System.Web.UI.WebControls.WebParts.IWebPartTable.Schema%2A>属性，可以调用<xref:System.ComponentModel.PropertyDescriptor.GetValue%2A>表数据，以获取一列或表的某一行中的值的元素。  
  
   
  
## Examples  
 下面的代码示例演示实现和利用<xref:System.Web.UI.WebControls.WebParts.IWebPartTable.Schema%2A>属性。 完整的示例所示的类概览<xref:System.Web.UI.WebControls.WebParts.IWebPartTable>接口。 提供者控件实现<xref:System.Web.UI.WebControls.WebParts.IWebPartTable.Schema%2A>属性。 然后，使用者控件在其`RenderContents`方法时，查询<xref:System.Web.UI.WebControls.WebParts.IWebPartTable.Schema%2A>属性来检索有关表的信息，如表数据写入页。  
  
 [!code-csharp[WebParts_IWebPartTable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPartTable_Overview/CS/ITableSample.cs#2)]
 [!code-vb[WebParts_IWebPartTable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPartTable_Overview/VB/ITableSample.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.PropertyDescriptorCollection" />
      </Docs>
    </Member>
  </Members>
</Type>