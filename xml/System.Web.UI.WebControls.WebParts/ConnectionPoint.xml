<Type Name="ConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="933a91474069425f37e5a116c1e3cdb3be8d6f67" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36585344" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ConnectionPoint extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConnectionPoint abstract" />
  <TypeSignature Language="F#" Value="type ConnectionPoint = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Serves as the base class for defining connection point objects that enable the consumer control and the provider control in a Web Parts connection to share data.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个 Web 部件连接由两个共享数据的服务器控件组成： 一个控件是使用者，另一个是提供程序。 Web 部件连接中和连接对象本身的基本组件的讨论，请参阅<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>类概述。 每个 Web 部件连接需要连接点。 提供程序和使用者控件都必须具有至少一个定义<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>可以共享包含如何控件可以与另一个控件的数据类型将其连接的详细信息的对象 （其中每个可根据需要多个连接点）。 在实际的连接中，提供程序具有其自己的连接点对象类型 (派生自基本<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类)、 一个<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>实例和使用者具有其自己的对象，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>实例。  
  
 若要创建的提供程序连接点，开发人员必须添加到的提供程序将返回向使用者的实现的接口实例的回调方法。 它们必须标记与源代码中的回调方法`ConnectionProvider`代码属性 (请参阅<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>类)。 同样，若要创建使用者连接点，开发人员必须将方法添加到使用者来接收接口实例，并且它们必须标记该方法以`ConnectionConsumer`属性 (请参阅<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>类)。  
  
 当开发人员创建连接到 Web 页上时，则可以创建为静态或动态连接它们。 在 Web 页的标记中声明静态连接。 当声明静态连接时，开发人员可以将指定的使用者和提供程序使用的连接点，应将值赋给`ProviderConnectionPointID`和`ConsumerConnectionPointID`属性内`<asp:webpartconnection>`元素标记。 这种方法是特别有用，如果有多个连接点定义中的使用者和提供程序控件中，因为它允许静态连接以确定要用于连接的连接点。  
  
 由开发人员的代码或由用户通过提供用户界面 (UI) 中，以编程方式创建动态连接<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控件。 若要在代码中创建的连接，开发人员必须获取的实例<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>对象通过调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控件。 它们可以调用此方法之前，开发人员必须对使用者和提供程序服务器控件和及其各自的连接点对象的引用。 若要获取的连接点对引用的提供程序和使用者控件，开发人员第一次调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>和<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控件。 这些方法返回适当的连接点对象，反过来可以传递到方法，以创建连接。  
  
 当提供者和使用者的连接点对象均使用相同类型的接口，它们是兼容，并且可以构成直接连接来共享数据。 如果它们不能使用相同的接口类型、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象必须用于将转换为类型使用者可用于从提供程序接口实例。  
  
 抽象<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类提供由使用者和提供程序的控件共享的连接点的基本详细信息。 多个属性包含这些详细信息。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性指示连接点可以参与多个连接一次。 默认情况下，提供程序连接点可以参与多个连接，并使用者连接点不能。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>属性指示与连接点关联的服务器控件的类型。 请注意该不但<xref:System.Web.UI.WebControls.WebParts.WebPart>控件可以形成连接; 所有服务器控件，无论是 ASP.NET 控件、 一个自定义控件或用户控件，可以都启用参与连接，如果置于<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>属性提供可以用于帮助创建连接的用户的 UI 中显示的连接点的友好名称。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>属性将作为连接点对象本身的字符串标识符。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性指示哪种类型的接口实例的连接点理解。 由给定的连接点是否提供或使用该接口的实例是<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>或<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>该类具有一个方法。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>方法返回一个布尔值，该值指示是否当前能够参与连接的连接点。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类还具有一个公共字段， <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>。 此字段包含用来标识连接中的默认连接点的值。  
  
> [!NOTE]
>  指定连接点方法具有只有一个所需的参数的属性`displayName`，因此可以创建默认连接点属性，无需指定一个 id。 在这种情况下，<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>字段提供要使用的基值。  
  
   
  
## Examples  
 下面的代码示例演示创建包含所需的 Web 部件连接<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象。 因为<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类是一个抽象基类，实例及其子类-<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>-是以形成连接所使用的实际对象。  
  
 该示例包含四个部分：  
  
-   用户控件，使你能够更改 Web 部件页面上显示模式。  
  
-   源接口和两个代码<xref:System.Web.UI.WebControls.WebParts.WebPart>控制充当提供程序和连接的使用者。  
  
-   网页上承载的控件和运行的代码示例。  
  
-   如何运行该示例页的说明。  
  
 此代码示例的第一部分是使用户能够更改在网页上的显示模式的用户控件。 将以下源代码保存到一个.ascx 文件中，将其分配到的文件名称`Src`属性`Register`指令为此用户控件，即托管的 Web 页面顶部附近。 有关详细信息显示在此控件模式和源代码的说明，请参见[演练： 在 Web 部件页面上更改显示模式](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 下面的代码示例的第二部分是接口和控件的源代码。 源文件包含名为一个简单的界面`IZipCode`。 此外，还有<xref:System.Web.UI.WebControls.WebParts.WebPart>类名为`ZipCodeWebPart`，实现接口，并充当提供程序控制。 其`ProvideIZipCode`方法是实现接口的唯一成员的回调方法。 方法只返回接口的实例。 请注意，该方法将标有`ConnectionProvider`其元数据中的属性。 这是用于将方法标识为提供程序的连接点的回调方法的机制。 其他<xref:System.Web.UI.WebControls.WebParts.WebPart>类命名为`WeatherWebPart`，并且它可作为连接的使用者。 此类具有一个名为方法`GetZipCode`获取的实例`IZipCode`从提供者控件的接口。 请注意，此方法作为使用者的连接点方法标记为`ConnectionConsumer`其元数据中的属性。 这是用于标识使用者控件中的连接点方法的机制。  
  
 若要运行的代码示例，必须编译此源代码。 你可以显式编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以在站点的 App_Code 文件夹中，其中它将动态编译运行时将源代码。 此代码示例使用动态编译。 有关演示如何编译的演练，请参阅[演练： 开发和使用自定义 Web 服务器控件](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 下面的代码示例的第三部分是网页。 顶部附近是`Register`指令用于注册构成该连接，自定义控件和用户控件，使用户能够更改显示在页面上的模式。 以声明方式内创建连接本身`<staticconnections>`页面上的元素。 你还可以以编程方式; 创建连接执行该操作的代码包含在`Button1_Click`方法。 是否以声明方式或以编程方式创建连接，连接点必须始终指定与提供程序和使用者。 `Button2_Click`方法访问<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象提供程序和使用者，并将其属性值的一些写入到页中的标签。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 加载浏览器中后，单击**连接点详细信息**按钮。 显示有关在声明性的连接中建立的提供程序和使用者连接点的信息。 接下来，使用**显示模式**下拉列表控件切换到页连接模式。 谓词菜单中的其中一个<xref:System.Web.UI.WebControls.WebParts.WebPart>控件 （由标题栏中的向下箭头），单击连接谓词。 自动创建用户界面出现，连接`<asp:connectionszone>`页面中声明的控件。 单击**断开连接**按钮以终止现有的连接。 使用**显示模式**控件来返回到浏览模式的页。 接下来，单击**动态连接**按钮以编程方式创建连接。 单击**连接点详细信息**按钮再次，指示两个连接点对象有关的详细信息。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  </Docs>
  <Members>
    <Member MemberName="AllowsMultipleConnections">
      <MemberSignature Language="C#" Value="public bool AllowsMultipleConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsMultipleConnections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowsMultipleConnections As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsMultipleConnections { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowsMultipleConnections : bool" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether a connection point supports multiple simultaneous connections.</summary>
        <value>
          <see langword="true" /> 如果连接点支持多个连接;否则为<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 对象具有其<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性值设置为`true`(通过<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>类)，这是因为 Web 部件控件的默认设置启用多个使用者建立连接的提供程序连接点。  
  
 与此相反，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象具有其<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性值设置为`false`(通过<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>类) 因为 Web 部件控件集默认情况下允许使用者连接点来建立与在一个提供程序的连接时间。  
  
 你可以更改通过分配到不同的值有关的多个连接的默认行为<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=nameWithType>属性 （对于提供程序） 或<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=nameWithType>对两个属性 （对于使用者）<xref:System.Attribute>用于连接属性的类。 如果启用了使用者连接点在同一时间连接到多个提供程序，你的代码必须处理的任何生成的同步问题。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性同时<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。 此代码示例演示只有 Web 页包含的代码访问您的属性。有关所需要运行该示例的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类概述。  
  
 中的代码`Button2_Click`网页访问方法<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>在每个连接点上的属性对象，并将写入一个标签的每个值。 通过单击执行代码**连接点详细信息**按钮后在浏览器中加载页面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ControlType">
      <MemberSignature Language="C#" Value="public Type ControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ControlType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ControlType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ControlType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ControlType : Type" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Type" /> of the server control with which a connection point is associated.</summary>
        <value>A<see cref="T:System.Type" />表示的控件类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>属性通常是<xref:System.Web.UI.WebControls.WebParts.WebPart>类型。 但是，因为任何类型的用户控件或服务器控件可以参与连接，如果已正确启用并放入<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域，<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>属性可以返回以下类型之一的其他服务器控件以及。  
  
 在服务器控件时不<xref:System.Web.UI.WebControls.WebParts.WebPart>控件都将置于<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域，它们的包装与<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>对象在运行时，因此它们可以用作<xref:System.Web.UI.WebControls.WebParts.WebPart>控制和参与连接。 但在连接中，当涉及此类控件时<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>属性值不返回<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>键入; 它将返回的一种<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>对象的子控件，这是服务器或用户控件的类型。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>属性同时<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。 此代码示例演示只有 Web 页包含的代码访问您的属性。有关所需要运行该示例的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类概述。  
  
 中的代码`Button2_Click`网页访问方法<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>在每个连接点上的属性对象，并将写入一个标签的每个值。 通过单击执行代码**连接点详细信息**按钮后在浏览器中加载页面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="DefaultID">
      <MemberSignature Language="C#" Value="public static readonly string DefaultID;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultID" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultID As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ DefaultID;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultID : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents a string used to identify the default connection point within a collection of connection points associated with a server control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当创建连接点时，有可能在使用者或提供程序的源代码中指定的连接点的 ID<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，并使用<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>或<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>属性。 但是，属性添加到源代码中的连接点`ID`参数是可选的。 如果在属性中，在未指定 ID<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>字段提供用于标识默认连接点的字符串。  
  
 如果使用者或提供程序的控件中定义多个连接点，则需要指定每个连接点的 ID，以便创建连接时可以区分连接点。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a string that serves as a friendly display name to represent a connection point in the user interface (UI).</summary>
        <value>包含的友好显示名称的字符串<see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要创建 Web 部件连接中，连接的提供程序和使用者控件必须每个指定至少一个连接点，使他们能够进行通信和共享数据的方法。 若要标识这些连接点方法，开发人员时，可指定属性上的所选的方法。 在提供程序，`ConnectionProvider`属性设置在所选的回调方法和使用者，`ConnectionConsumer`接收包含从提供程序的数据接口的实例的方法上设置特性。 对于以上两种属性，始终是必需的无论声明的重载以创建该特性的一个参数是`displayName`参数。 开发人员必须分配要用作连接点的友好显示名称的字符串，该字符串将成为的值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>属性。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> UI 中的网页上显示属性值，当用户创建连接。 例如，当<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控件添加到页上，它为创建一个 UI 控件之间创建连接的用户。 用户将页切换为连接的显示模式，并单击连接谓词后<xref:System.Web.UI.WebControls.WebParts.WebPart>控制，UI 显示方式的连接。 可以参与连接每个控件列出在 UI 中，且每个控件旁边的下拉列表控件，显示其可用的连接点的友好名称。 用户必须选择至少一个连接点才能建立连接。 连接点列表中显示的值从获得<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>属性。 如果开发人员构建自定义 UI 创建连接，他们可以使用<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>中类似的方式来提供一个友好名称，表示连接点的属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetEnabled">
      <MemberSignature Language="C#" Value="public virtual bool GetEnabled (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetEnabled(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool GetEnabled(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetEnabled : System.Web.UI.Control -&gt; bool&#xA;override this.GetEnabled : System.Web.UI.Control -&gt; bool" Usage="connectionPoint.GetEnabled control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control that is associated with a connection point.</param>
        <summary>Returns a value that indicates whether a connection point can participate in connections.</summary>
        <returns>
          <see langword="true" /> if the control can create a connection point to participate in a connection; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>基类中的方法<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类始终返回`true`，但派生的类可以重写该方法以返回`true`或`false`在不同时间基于状态`control`。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>方法同时<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。 此代码示例演示只有 Web 页包含的代码访问您的属性。有关所需要运行该示例的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类概述。  
  
 中的代码`Button2_Click`网页访问方法<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>方法上每个连接点对象，并将写入一个标签的每个值。 通过单击执行代码**连接点详细信息**按钮后在浏览器中加载页面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ID : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a string that contains the identifier for a connection point.</summary>
        <value>包含连接点的标识符的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当开发人员声明<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>或<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>属性上的控件的源代码中的方法，以便该方法可以用作连接点，它不需要声明`ID`连接点属性的参数。 唯一必需的特性是`displayName`参数。 默认 ID 分配给连接点，则使用的值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>字段。  
  
 如果在作为连接点正在使用的控件中没有只有一个方法，则不必指定连接点的 ID。 如果有多个方法指定为连接点，则必须指定每个; 的 ID否则，将引发异常。 通过给每个连接点分配一个 ID，你还能够指定声明在网页中的连接或在代码中创建它们时要使用的连接点。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>属性同时<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。 此代码示例演示只有 Web 页包含的代码访问您的属性。有关所需要运行该示例的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类概述。  
  
 中的代码`Button2_Click`网页访问方法<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>在每个连接点上的属性对象，并将写入一个标签的每个值。 通过单击执行代码**连接点详细信息**按钮后在浏览器中加载页面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      </Docs>
    </Member>
    <Member MemberName="InterfaceType">
      <MemberSignature Language="C#" Value="public Type InterfaceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type InterfaceType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InterfaceType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ InterfaceType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InterfaceType : Type" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the interface used by a connection point.</summary>
        <value>A<see cref="T:System.Type" />相对应的提供或由控件占用的接口类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性指示哪种类型的接口的连接点使用。 这可以帮助以确定两个控件是否兼容，并且能够形成连接。 如果提供程序连接点<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>不同于使用者连接点<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>，则这两个控件将不兼容 （这意味着，它们不能直接连接而无需转换器），和一个<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象必须用于建立连接。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性同时<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。 此代码示例演示只有 Web 页包含的代码访问您的属性。有关所需要运行该示例的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类概述。  
  
 中的代码`Button2_Click`网页访问方法<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>在每个连接点上的属性对象，并将写入一个标签的每个值。 通过单击执行代码**连接点详细信息**按钮后在浏览器中加载页面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
  </Members>
</Type>