<Type Name="ConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8533d1bcb2037288a1d1f3165cc140cabc83d902" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51907113" /></Metadata><TypeSignature Language="C#" Value="public abstract class ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ConnectionPoint extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConnectionPoint abstract" />
  <TypeSignature Language="F#" Value="type ConnectionPoint = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>用作定义连接点对象的基类，这些对象使 Web 部件连接中的使用者控件和提供者控件可以共享数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个 Web 部件连接共享数据的两个服务器控件组成： 一个控件是使用者，另一个是提供程序。 Web 部件连接中，并连接对象本身的基本组件的讨论，请参阅<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>类概述。 每个 Web 部件连接需要连接点。 提供程序和使用者控件都必须定义至少一个<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>可以共享 （其中每个可以根据需要有多个连接点） 的对象，其中包含有关如何控制可以与另一个控件的数据类型将其连接的详细信息。 在实际连接中，提供程序具有其自己的连接点对象类型 (派生自基本<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类)、 一个<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>实例和使用者都有其自己的对象，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>实例。  
  
 若要创建提供者连接点，开发人员必须将一个回调方法添加到将实现的接口实例返回给使用者的提供程序。 它们必须标记中使用的源代码的回调方法`ConnectionProvider`code 属性 (请参阅<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>类)。 同样，若要创建使用者连接点，开发人员必须将方法添加到使用者接收接口实例，并且它们必须标记该方法以`ConnectionConsumer`属性 (请参阅<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>类)。  
  
 当开发人员创建在网页上的连接时，则他们可以创建静态或动态连接。 在 Web 页面的标记中声明静态连接。 当声明静态连接时，开发人员可以将指定的使用者和提供程序使用的连接点，应分配到的值`ProviderConnectionPointID`并`ConsumerConnectionPointID`属性内`<asp:webpartconnection>`元素标记。 这种方法是特别有用，如果有多个连接点定义中的使用者和提供程序控件，因为它可以使静态连接来标识要用于连接的连接点。  
  
 开发人员的代码或通过用户界面 (UI) 提供的用户，以编程方式创建动态连接<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控件。 若要在代码中创建的连接，开发人员必须获取的实例<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>对象通过调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控件。 它们可以调用此方法之前，开发人员必须具有对使用者和提供程序服务器控件和其各自的连接点对象的引用。 若要获取对连接点的引用的提供程序和使用者控件，开发人员首次调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>并<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>上的方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控件。 这些方法返回相应的连接点对象，又可以传递给创建的连接方法。  
  
 当提供程序的和使用者的连接点对象均使用相同类型的接口，它们是兼容，可以形成共享数据的直接连接。 如果不使用相同的接口类型，<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象必须用于从提供程序到使用者可以使用的类型的接口实例转换。  
  
 抽象<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类提供了由使用者和提供程序控件共享的连接点的基本详细信息。 多个属性包含这些详细信息。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性指示连接点是否可以参与多个连接一次。 默认情况下，提供者连接点可以参与多个连接，并且不能使用者连接点。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>属性指示连接点与关联的服务器控件的类型。 请注意，并非仅<xref:System.Web.UI.WebControls.WebParts.WebPart>控件可以形成连接; 任何服务器控件，无论是 ASP.NET 控件、 自定义控件或用户控件，可以启用参与连接，如果放置在<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>属性提供了可以显示在 UI 中可帮助用户对于要创建连接的连接点的友好名称。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>属性将充当自己的连接点对象的字符串标识符。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性指示哪些类型的接口实例的连接点能够理解。 由给定的连接点是否提供或使用该接口的实例是否是<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>或<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类具有一种方法。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>方法返回一个布尔值，该值指示是否当前能够参与连接的连接点。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类还具有一个公共字段， <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>。 此字段包含用来标识连接中的默认连接点的值。  
  
> [!NOTE]
>  指定方法具有一个必需的参数的连接点的属性`displayName`，因此可以创建默认连接点的属性，而无需指定一个 id。 在这种情况下，<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>字段提供要使用的基础值。  
  
   
  
## Examples  
 下面的代码示例演示如何创建包含所需的 Web 部件连接<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象。 因为<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类是一个抽象基类，其子类-中的实例<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>-是用于形成连接的实际对象。  
  
 该示例包含四个部分：  
  
-   使你能够更改 Web 部件的用户控件在页面上显示模式。  
  
-   源接口和两个代码<xref:System.Web.UI.WebControls.WebParts.WebPart>控件作为提供程序和使用者的连接。  
  
-   若要托管的所有控件和运行的代码示例网页。  
  
-   如何运行示例页的说明。  
  
 此代码示例的第一个部分是使用户能够更改网页上的显示模式的用户控件。 将以下源代码保存到.ascx 文件，将其分配到的文件名称`Src`属性的`Register`指令对该用户控件，即托管的 Web 页面的顶部附近。 有关详细信息显示在此控件模式和对源代码的说明，请参见[演练： 在 Web 部件页上更改显示模式](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 代码示例的第二部分是为接口和控件的源代码。 源代码文件包含一个简单的接口名为`IZipCode`。 此外，还有<xref:System.Web.UI.WebControls.WebParts.WebPart>类名为`ZipCodeWebPart`的实现接口，并充当提供者控件。 其`ProvideIZipCode`方法是实现接口的唯一成员的回调方法。 该方法只需返回接口的实例。 请注意，该方法标记与`ConnectionProvider`其元数据中的属性。 这是用于标识提供者连接点的回调方法作为该方法的机制。 另<xref:System.Web.UI.WebControls.WebParts.WebPart>类命名为`WeatherWebPart`，并充当使用者的连接。 此类有一个名为方法`GetZipCode`获取的实例`IZipCode`从提供者控件的接口。 请注意，此方法标记为与使用者的连接点方法`ConnectionConsumer`其元数据中的属性。 这是用于标识使用者控件中的连接点方法的机制。  
  
 若要运行的代码示例，必须编译此源代码。 可以显式对其进行编译，并将生成的程序集放在网站的 Bin 文件夹或全局程序集缓存中。 或者，您可以将源代码放在你网站的 App_Code 文件夹中，其中它将被动态编译在运行时。 此代码示例使用动态编译。 有关演示如何编译的演练，请参阅[演练： 开发和使用自定义 Web 服务器控件](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)。  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 代码示例的第三部分是 Web 页。 顶部附近是`Register`指令用于注册的自定义控件形成连接，并使用户能够更改的用户控件在页面上显示模式。 以声明方式内创建连接本身`<staticconnections>`页上的元素。 此外可以以编程方式; 创建连接执行该操作的代码包含在`Button1_Click`方法。 是否以声明方式或以编程方式创建的连接，连接点必须始终指定提供程序和使用者。 `Button2_Click`方法访问<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象提供程序和使用者，并将一些其属性值写入到页中的标签。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 加载浏览器中的页面后，单击**连接点的详细信息**按钮。 有关建立在声明性的连接中的提供程序和使用者连接点的信息将出现。 接下来，使用**显示模式**下拉列表控件切换到页连接模式。 其中一个的谓词菜单上<xref:System.Web.UI.WebControls.WebParts.WebPart>控件 （由标题栏中的向下箭头表示），单击连接谓词。 UI 显示方式，连接会自动创建`<asp:connectionszone>`页面中声明的控件。 单击**断开连接**按钮来终止现有连接。 使用**显示模式**控件以返回页后，可以浏览模式。 接下来，单击**动态连接**按钮以编程方式创建的连接。 单击**点连接的详细信息**按钮再次，指示两个连接点对象有关的详细信息。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <related type="Article" href="https://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b">Web 部件连接概述</related>
    <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web 部件页</related>
  </Docs>
  <Members>
    <Member MemberName="AllowsMultipleConnections">
      <MemberSignature Language="C#" Value="public bool AllowsMultipleConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsMultipleConnections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowsMultipleConnections As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsMultipleConnections { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowsMultipleConnections : bool" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个指示连接点是否支持多个并发连接的值。</summary>
        <value>如果连接点支持多个连接，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 对象具有其<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性值设置为`true`(通过<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>类)，因为默认情况下设置 Web 部件控件启用窗体连接到多个使用者提供者连接点。  
  
 与此相反，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象具有其<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性值设置为`false`(通过<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>类) 因为默认情况下设置的 Web 部件控件可让使用者连接点来建立在只有一个提供程序的连接时间。  
  
 你可以通过将分配到不同的值与多个连接的默认行为<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=nameWithType>属性 （对于提供程序） 或<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=nameWithType>对两个属性 （对于使用者）<xref:System.Attribute>用于连接属性的类。 如果启用了使用者连接点，同时连接到多个提供程序，你的代码必须处理任何导致的同步问题。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性上都<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。 此代码示例显示了仅包含网页的代码来访问您的属性。运行该示例所需的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类概述。  
  
 中的代码`Button2_Click`方法的 Web 页面访问<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性上每个连接点对象，并将每个值写入到一个标签。 通过单击执行代码**连接点的详细信息**按钮后在浏览器中加载页面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web 部件页</related>
      </Docs>
    </Member>
    <Member MemberName="ControlType">
      <MemberSignature Language="C#" Value="public Type ControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ControlType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ControlType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ControlType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ControlType : Type" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取连接点与之关联的服务器控件的 <see cref="T:System.Type" />。</summary>
        <value>表示控件类型的 <see cref="T:System.Type" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>属性通常是<xref:System.Web.UI.WebControls.WebParts.WebPart>类型。 但是，由于任何类型的用户控件或服务器控件可以参与连接，如果它已正确启用并放入<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域，<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>属性可返回这些其他服务器控件类型之一。  
  
 在服务器控件时，不是<xref:System.Web.UI.WebControls.WebParts.WebPart>控件都将置于<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域，它们的包装与<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>对象在运行时以便他们可以充当<xref:System.Web.UI.WebControls.WebParts.WebPart>控制并参与连接。 但当涉及到在连接中，此类控件<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>属性值不会返回<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>类型; 它将返回的类型<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>对象的子控件，它是服务器或用户控件的类型。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>属性上都<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。 此代码示例显示了仅包含网页的代码来访问您的属性。运行该示例所需的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类概述。  
  
 中的代码`Button2_Click`方法的 Web 页面访问<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>属性上每个连接点对象，并将每个值写入到一个标签。 通过单击执行代码**连接点的详细信息**按钮后在浏览器中加载页面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web 部件页</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultID">
      <MemberSignature Language="C#" Value="public static readonly string DefaultID;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultID" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultID As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ DefaultID;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultID : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示一个字符串，该字符串用于标识与服务器控件关联的连接点集合中的默认连接点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建连接点时，就可以在使用者或提供程序的源代码中指定的连接点的 ID<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，并使用<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>或<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>属性。 但是，属性添加到源代码中的连接点`ID`参数是可选的。 如果在属性中，未指定 ID<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>字段提供了一个字符串，用于标识默认连接点。  
  
 如果多个连接点定义中的使用者或提供程序控件，则有必要指定每个连接点的 ID，以便创建连接时可以区分连接点。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个字符串，该字符串用作在用户界面 (UI) 中表示连接点的友好显示名称。</summary>
        <value>一个字符串，包含 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> 对象的友好显示名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要创建 Web 部件连接中，连接的提供程序和使用者控件必须每个指定至少一个连接点，使他们能够进行通信和共享数据的方法。 若要标识这些连接点方法，开发人员所选方法上指定一个属性。 在提供程序，`ConnectionProvider`属性设置在所选的回调方法中，并在使用者，`ConnectionConsumer`接收包含从提供程序的数据的接口的实例的方法上设置属性。 对于这两个特性，始终是必需的而不考虑哪个重载声明以创建该特性的一个参数是`displayName`参数。 开发人员必须将分配要用作连接点的友好显示名称的字符串，该字符串将成为的值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>属性。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>用户创建连接时，Web 页的 UI 中显示的属性值。 例如，当<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控件添加到页上，它创建的用户控件之间创建连接用户界面。 在用户切换到连接显示模式的一个页面，并单击连接谓词后<xref:System.Web.UI.WebControls.WebParts.WebPart>控制，用户界面出现的连接。 可以参与连接的每个控件在 UI 中，列出，每个控件旁边显示其可用的连接点的友好名称的下拉列表控件。 用户必须选择至少一个连接点建立的连接。 连接点的列表中显示的值从获取<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>属性。 如果开发人员构建自定义 UI，用于创建连接，他们可以使用<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>中类似的方式来提供表示连接点的友好名称的属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web 部件页</related>
      </Docs>
    </Member>
    <Member MemberName="GetEnabled">
      <MemberSignature Language="C#" Value="public virtual bool GetEnabled (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetEnabled(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool GetEnabled(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetEnabled : System.Web.UI.Control -&gt; bool&#xA;override this.GetEnabled : System.Web.UI.Control -&gt; bool" Usage="connectionPoint.GetEnabled control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">一个与连接点关联的 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 或其他服务器控件。</param>
        <summary>返回一个指示连接点是否可以参与连接的值。</summary>
        <returns>如果控件可以创建连接点来参与连接，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>基类中的方法<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类始终返回`true`，但派生的类可以重写此方法应返回`true`或`false`在不同的时间基于状态的`control`。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>方法上都<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。 此代码示例显示了仅包含网页的代码来访问您的属性。运行该示例所需的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类概述。  
  
 中的代码`Button2_Click`方法的 Web 页面访问<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>方法在每个连接点对象，并将每个值写入到一个标签。 通过单击执行代码**连接点的详细信息**按钮后在浏览器中加载页面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web 部件页</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ID : string" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含连接点的标识符的字符串。</summary>
        <value>包含连接点的标识符的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当开发人员声明<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>或<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>属性上的控件的源代码中的方法，以便该方法可以用作连接点，它不需要声明`ID`连接点的属性的参数。 所需的唯一属性是`displayName`参数。 默认 ID 分配给连接点，使用中的值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>字段。  
  
 如果正在使用作为连接点的控件中只有一个方法，则不必指定连接点的 ID。 如果有多个方法指定为连接点，则必须指定每个; 的 ID否则，将引发异常。 通过为每个连接点分配一个 ID，您还可指定哪些声明在网页中的连接或在代码中创建它们时要使用的连接点。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>属性上都<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。 此代码示例显示了仅包含网页的代码来访问您的属性。运行该示例所需的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类概述。  
  
 中的代码`Button2_Click`方法的 Web 页面访问<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>属性上每个连接点对象，并将每个值写入到一个标签。 通过单击执行代码**连接点的详细信息**按钮后在浏览器中加载页面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web 部件页</related>
      </Docs>
    </Member>
    <Member MemberName="InterfaceType">
      <MemberSignature Language="C#" Value="public Type InterfaceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type InterfaceType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InterfaceType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ InterfaceType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InterfaceType : Type" Usage="System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取连接点所使用的接口的类型。</summary>
        <value>与控件所提供或使用的接口类型相对应的 <see cref="T:System.Type" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性指示连接点所使用的接口类型。 这可以帮助确定两个控件都兼容，并能够形成连接。 如果提供者连接点<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>不同于使用者连接点<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>，则两个控件是不兼容 （这意味着，它们不能直接连接而无需转换器），和一个<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象必须用于建立连接。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性上都<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>和<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。 此代码示例显示了仅包含网页的代码来访问您的属性。运行该示例所需的完整代码，请参阅示例部分<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类概述。  
  
 中的代码`Button2_Click`方法的 Web 页面访问<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性上每个连接点对象，并将每个值写入到一个标签。 通过单击执行代码**连接点的详细信息**按钮后在浏览器中加载页面。  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Web 部件页</related>
      </Docs>
    </Member>
  </Members>
</Type>