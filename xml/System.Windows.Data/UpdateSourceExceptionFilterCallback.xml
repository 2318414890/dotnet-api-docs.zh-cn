<Type Name="UpdateSourceExceptionFilterCallback" FullName="System.Windows.Data.UpdateSourceExceptionFilterCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b715c214c4452338e4dca1c03eb939da6f68b56c" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51910010" /></Metadata><TypeSignature Language="C#" Value="public delegate object UpdateSourceExceptionFilterCallback(object bindExpression, Exception exception);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed UpdateSourceExceptionFilterCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.UpdateSourceExceptionFilterCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function UpdateSourceExceptionFilterCallback(bindExpression As Object, exception As Exception) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ UpdateSourceExceptionFilterCallback(System::Object ^ bindExpression, Exception ^ exception);" />
  <TypeSignature Language="F#" Value="type UpdateSourceExceptionFilterCallback = delegate of obj * Exception -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="bindExpression" Type="System.Object" />
    <Parameter Name="exception" Type="System.Exception" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="bindExpression">出现异常的对象。</param>
    <param name="exception">遇到的异常。</param>
    <summary>表示处理绑定源值更新过程中引发的异常的方法。 它必须与 <see cref="T:System.Windows.Controls.ExceptionValidationRule" /> 一起使用。</summary>
    <returns>通常为下列某项的对象： 
 <list type="table"><listheader><term> “值” 
 </term><description> 描述 
 </description></listheader><item><term><see langword="null" /></term><description> 忽略任何异常。 默认行为（如果没有 <see cref="T:System.Windows.Data.UpdateSourceExceptionFilterCallback" />）是对异常创建 <see cref="T:System.Windows.Controls.ValidationError" /> 并将其添加到绑定元素的 <see cref="P:System.Windows.Controls.Validation.Errors" /> 集合。  
  
 </description></item><item><term> 任何对象 
 </term><description> 创建 <see cref="T:System.Windows.Controls.ValidationError" /> 对象，并将 <see cref="P:System.Windows.Controls.ValidationError.ErrorContent" /> 设置为此对象。  
  
将 <see cref="T:System.Windows.Controls.ValidationError" /> 对象添加到绑定元素的 <see cref="P:System.Windows.Controls.Validation.Errors" /> 集合中。  
  
 </description></item><item><term> 一个 <see cref="T:System.Windows.Controls.ValidationError" /> 对象 
 </term><description> 将 <see cref="T:System.Windows.Data.BindingExpression" /> 或 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 对象设置为 <see cref="P:System.Windows.Controls.ValidationError.BindingInError" />。 将 <see cref="T:System.Windows.Controls.ValidationError" /> 对象添加到绑定元素的 <see cref="P:System.Windows.Controls.Validation.Errors" /> 集合中。  
  
 </description></item></list></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您具有相关联<xref:System.Windows.Controls.ExceptionValidationRule>与你<xref:System.Windows.Data.Binding>对象具有要使用的选项<xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>属性来设置此回调以提供用于处理异常的自定义逻辑。 绑定引擎都会更新绑定源值时遇到任何异常，则将调用此回调。  
  
 如果<xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>中未指定<xref:System.Windows.Data.Binding>，绑定引擎就会创建<xref:System.Windows.Controls.ValidationError>与该异常并将其添加到<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType>的绑定元素集合。  
  
   
  
## Examples  
 <xref:System.Windows.Controls.TextBox.Text%2A>属性的以下<xref:System.Windows.Controls.TextBox>被数据绑定到源属性`Age3`类型的`int`。 <xref:System.Windows.Controls.ExceptionValidationRule>检查 （如当用户输入一个值，不能转换为整数） 的源属性更新过程中引发的异常。  
  
 [!code-xaml[BindValidation#tbExceptionFilter](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#tbexceptionfilter)]  
  
 必须提供自定义逻辑来处理这些异常的选项。 下面的示例演示如何使用<xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>属性来设置<xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>:  
  
 [!code-csharp[BindValidation#filtercallback](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#filtercallback)]  
  
 以下是示例实现<xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>:  
  
 [!code-csharp[BindValidation#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#handler)]  
  
 有关完整示例，请参阅[绑定验证示例](https://go.microsoft.com/fwlink/?LinkID=159972)。  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Data.MultiBinding.UpdateSourceExceptionFilter" />
  </Docs>
</Type>