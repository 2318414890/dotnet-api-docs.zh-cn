<Type Name="BindingBase" FullName="System.Windows.Data.BindingBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2b0972572674a7ab5b1708117612a7d87dba9416" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55348873" /></Metadata><TypeSignature Language="C#" Value="public abstract class BindingBase : System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract BindingBase extends System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BindingBase&#xA;Inherits MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingBase abstract : System::Windows::Markup::MarkupExtension" />
  <TypeSignature Language="F#" Value="type BindingBase = class&#xA;    inherit MarkupExtension" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Markup.MarkupExtension</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Modifiability=System.Windows.Modifiability.Unmodifiable, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.MarkupExtensionReturnType(typeof(System.Object))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义 <see cref="T:System.Windows.Data.Binding" />、<see cref="T:System.Windows.Data.PriorityBinding" /> 和 <see cref="T:System.Windows.Data.MultiBinding" /> 类的公共特性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为<xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=nameWithType>方法密封的自定义绑定类派生自<xref:System.Windows.Data.BindingBase>不能正确作为[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]标记扩展。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BindingGroupName">
      <MemberSignature Language="C#" Value="public string BindingGroupName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BindingGroupName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.BindingGroupName" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroupName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BindingGroupName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroupName : string with get, set" Usage="System.Windows.Data.BindingBase.BindingGroupName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此绑定所属的 <see cref="T:System.Windows.Data.BindingGroup" /> 的名称。</summary>
        <value>此绑定所属的 <see cref="T:System.Windows.Data.BindingGroup" /> 的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Data.BindingBase.BindingGroupName%2A>未设置，该绑定属于<xref:System.Windows.Data.BindingGroup>仅当绑定的源和<xref:System.Windows.FrameworkElement.DataContext%2A>具有的父元素的<xref:System.Windows.Data.BindingGroup>是相同的对象。  
  
 如果<xref:System.Windows.Data.BindingBase.BindingGroupName%2A>设置为一个值，该绑定属于<xref:System.Windows.Data.BindingGroup>如果满足以下条件：  
  
-   <xref:System.Windows.Data.BindingGroup.Name%2A>的<xref:System.Windows.Data.BindingGroup>和<xref:System.Windows.Data.BindingBase.BindingGroupName%2A>是否相等。  
  
-   <xref:System.Windows.Data.BindingGroup>所属的父元素的绑定的目标元素。  
  
 如果<xref:System.Windows.Data.BindingBase.BindingGroupName%2A>设置为`null`，则绑定从不是一部分<xref:System.Windows.Data.BindingGroup>。  
  
 可以包含具有不同的源的绑定<xref:System.Windows.FrameworkElement.DataContext%2A>具有的父元素的<xref:System.Windows.Data.BindingGroup>通过设置<xref:System.Windows.Data.BindingGroup.Name%2A>的<xref:System.Windows.Data.BindingGroup>和<xref:System.Windows.Data.BindingBase.BindingGroupName%2A>属性绑定到相同的值。  您可以排除具有相同的源的绑定<xref:System.Windows.FrameworkElement.DataContext%2A>具有的父元素的<xref:System.Windows.Data.BindingGroup>通过设置<xref:System.Windows.Data.BindingGroup.Name%2A>的<xref:System.Windows.Data.BindingGroup>和<xref:System.Windows.Data.BindingBase.BindingGroupName%2A>属性绑定到不同的值。  
  
   
  
## Examples  
 下面的示例是检查用户是否已设置为相等的值的两个对象的属性的应用程序的一部分。 第一个示例创建两个<xref:System.Windows.Controls.TextBox>控件，其中每个被数据绑定到不同的源：第一个绑定<xref:System.Windows.Controls.TextBox>属于<xref:System.Windows.Data.BindingGroup>因为<xref:System.Windows.Controls.TextBox>继承<xref:System.Windows.FrameworkElement.DataContext%2A>和<xref:System.Windows.Data.BindingGroup>从其父级 <xref:System.Windows.Controls.StackPanel>  
  
 在第二个绑定<xref:System.Windows.Controls.TextBox>属于<xref:System.Windows.Data.BindingGroup>因为<xref:System.Windows.Data.BindingGroup.Name%2A>的<xref:System.Windows.Data.BindingGroup>并<xref:System.Windows.Data.BindingBase.BindingGroupName%2A>的<xref:System.Windows.Data.Binding>均设置为`bindingGroup`。  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupName](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupname)]  
[!code-xaml[BindingGroupSnippets#ValidationAdornerSite](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#validationadornersite)]  
  
 下面的示例演示<xref:System.Windows.Controls.ValidationRule>的上一个示例使用。  在中<xref:System.Windows.Controls.ValidationRule.Validate%2A>方法，此示例获取的每个源对象<xref:System.Windows.Data.BindingGroup>，并检查是否相等的对象的属性。  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public int Delay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Delay" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.Delay" />
      <MemberSignature Language="VB.NET" Value="Public Property Delay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Delay { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Delay : int with get, set" Usage="System.Windows.Data.BindingBase.Delay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置更新位于目标更改上的值之后的绑定源前要等待的时间（毫秒）。</summary>
        <value>在更新绑定资源之前要等待的时间（以毫秒为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当您使用绑定更新绑定源属性的值在目标上发生更改时，您设置<xref:System.Windows.Data.Binding.Mode%2A>属性设置为<xref:System.Windows.Data.BindingMode.TwoWay>并<xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>到<xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged>。  在这种情况下，你可以使用<xref:System.Windows.Data.BindingBase.Delay%2A>属性指定是否应更改目标时，何时更新源之间的时间延迟。  当你想要使用户能够更改源对象的属性，但不希望每次更改可立即提交到源时，这很有用。  例如，假设您有被数据双向绑定到数据对象的属性的文本框。  当用户更改的值在文本框中时，源获取更新。  若要启用此方案中，您可以设置<xref:System.Windows.Data.Binding.Mode%2A>上的属性<xref:System.Windows.Data.Binding>到<xref:System.Windows.Data.BindingMode.TwoWay>并<xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>到<xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged>。  若要避免每次击键更新的源对象，设置<xref:System.Windows.Data.BindingBase.Delay%2A>为合理的值会导致要更新仅因为用户已停止键入经过这段时间后的绑定的属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FallbackValue">
      <MemberSignature Language="C#" Value="public object FallbackValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FallbackValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.FallbackValue" />
      <MemberSignature Language="VB.NET" Value="Public Property FallbackValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FallbackValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FallbackValue : obj with get, set" Usage="System.Windows.Data.BindingBase.FallbackValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当绑定无法返回值时要使用的值。</summary>
        <value>默认值为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果绑定成功返回的值：  
  
1.  已成功解析绑定源的路径。  
  
2.  值转换器，如果有的话，就能够转换生成的值。  
  
3.  生成的值是绑定目标 （目标） 属性的有效值。  
  
 如果 1 和 2 返回<xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=nameWithType>，目标属性设置的值为<xref:System.Windows.Data.BindingBase.FallbackValue%2A>，如果有可用。 如果没有任何<xref:System.Windows.Data.BindingBase.FallbackValue%2A>，使用目标属性的默认值。  
  
 值<xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=nameWithType>不被视为成功的返回值。  
  
<a name="xamlTextUsage_FallbackValue"></a>   
## <a name="xaml-text-usage"></a>XAML 文本使用情况  
  
```  
<object FallbackValue="fallbackValue" />  
```  
  
 **-或者-**  
  
```  
<object>  
  <object.FallbackValue>  
    fallbackValue  
    </object.FallbackValue>  
</object>  
```  
  
<a name="xamlValues_FallbackValue"></a>   
## <a name="xaml-values"></a>XAML 值  
 *fallbackValue*  
 属性或对象元素值的类型与目标属性相同。 请参阅 XAML 使用情况信息的该类型的文档。 该类型可能会或可能不支持特性语法为它的值，或可能或可能不支持对象元素语法 （它需要对该类型的默认构造函数）。 目标属性类型将因此会影响您使用的值的语法<xref:System.Windows.Data.BindingBase.FallbackValue%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public override sealed object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="override this.ProvideValue : IServiceProvider -&gt; obj" Usage="bindingBase.ProvideValue serviceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">可为标记扩展提供服务的对象。 可以为 <see langword="null" />；</param>
        <summary>返回一个应在应用了此绑定和扩展的属性上设置的对象。</summary>
        <returns>要在绑定目标属性上设置的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此实现中提供了通过绑定的基本语法支持[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]为所有提供的实用的派生的类 (<xref:System.Windows.Data.Binding>， <xref:System.Windows.Data.PriorityBinding>，和<xref:System.Windows.Data.MultiBinding>)。  
  
 <xref:System.Windows.Data.BindingBase>类实现此方法应返回一个表达式对象，它的绑定结果。 属性绑定的工作原理是针对给定<xref:System.Windows.DependencyProperty>上给定<xref:System.Windows.DependencyObject>。 这两条信息传输的查询<xref:System.Windows.Markup.IProvideValueTarget>上的实现`serviceProvider`，后者[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)][!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]读取器将分析绑定过程可用。 此基类实现都负责检查是否存在有效<xref:System.Windows.DependencyProperty>和<xref:System.Windows.DependencyObject>。 如果找到这些返回的绑定表达式的实际实现将转到各种派生类中，通过让基类调用内部的抽象方法实现。 否则，该扩展返回的绑定对象本身。 返回绑定本身导致类型不匹配错误，但这不应该在正常情况下发生。  
  
> [!IMPORTANT]
>  因为通过绑定语法[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]中实现此方法依赖于实现内部重写，因为<xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=nameWithType>本身密封类，派生的自定义绑定类<xref:System.Windows.Data.BindingBase>不能正确作为[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]标记扩展。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeFallbackValue">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeFallbackValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeFallbackValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingBase.ShouldSerializeFallbackValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeFallbackValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeFallbackValue();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeFallbackValue : unit -&gt; bool" Usage="bindingBase.ShouldSerializeFallbackValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个值，该值指示序列化进程是否应当对此类的实例的 <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> 有效属性值进行序列化。</summary>
        <returns>如果应当序列化 <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTargetNullValue">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTargetNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTargetNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTargetNullValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTargetNullValue();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTargetNullValue : unit -&gt; bool" Usage="bindingBase.ShouldSerializeTargetNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个值，该值指示是否应序列化 <see cref="P:System.Windows.Data.BindingBase.TargetNullValue" /> 属性。</summary>
        <returns>如果 <see cref="P:System.Windows.Data.BindingBase.TargetNullValue" /> 属性应被序列化，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringFormat">
      <MemberSignature Language="C#" Value="public string StringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.StringFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property StringFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StringFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StringFormat : string with get, set" Usage="System.Windows.Data.BindingBase.StringFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个字符串，该字符串指定如果绑定值显示为字符串，应如何设置该绑定的格式。</summary>
        <value>一个字符串，该字符串指定如果绑定值显示为字符串，应如何设置该绑定的格式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingBase.StringFormat%2A> 可以是预定义、 撰写的或自定义字符串格式。 有关字符串格式的详细信息，请参阅[格式设置类型](~/docs/standard/base-types/formatting-types.md)。  
  
 如果您设置<xref:System.Windows.Data.Binding.Converter%2A>并<xref:System.Windows.Data.BindingBase.StringFormat%2A>属性，该转换器首先，应用于数据值，然后<xref:System.Windows.Data.BindingBase.StringFormat%2A>应用。  
  
 当您将设置<xref:System.Windows.Data.BindingBase.StringFormat%2A>上<xref:System.Windows.Data.Binding>为复合字符串格式时，可以指定只有一个参数。  
  
 当你使用<xref:System.Windows.Data.MultiBinding>，则<xref:System.Windows.Data.BindingBase.StringFormat%2A>仅当该属性设置上应用属性<xref:System.Windows.Data.MultiBinding>。  值<xref:System.Windows.Data.BindingBase.StringFormat%2A>设置对任何子<xref:System.Windows.Data.Binding>忽略的对象。  中的复合字符串格式的参数数量不能超过数量的子<xref:System.Windows.Data.Binding>中的对象<xref:System.Windows.Data.MultiBinding>。  
  
 当你使用<xref:System.Windows.Data.PriorityBinding>，可以设置<xref:System.Windows.Data.BindingBase.StringFormat%2A>上<xref:System.Windows.Data.PriorityBinding>，和 / 或子绑定对象上。  如果<xref:System.Windows.Data.BindingBase.StringFormat%2A>绑定，它子组应用，则使用值。  如果<xref:System.Windows.Data.BindingBase.StringFormat%2A>未在应用时，子绑定上设置<xref:System.Windows.Data.BindingBase.StringFormat%2A>的<xref:System.Windows.Data.PriorityBinding>如果将其设置应用。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Windows.Data.BindingBase.StringFormat%2A>属性来转换`Price`，即<xref:System.Double>，为一个字符串，表示一种货币。  
  
 [!code-xaml[ContentStringSnippets#Binding](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentStringSnippets/CSharp/Window1.xaml#binding)]  
  
 下面的示例使用<xref:System.Windows.Data.BindingBase.StringFormat%2A>上的属性<xref:System.Windows.Data.MultiBinding>生成一个字符串，包含`Description`并`Price`中每一项<xref:System.Windows.Controls.ListBox>。  
  
 [!code-xaml[ContentStringSnippets#MultiBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentStringSnippets/CSharp/Window1.xaml#multibinding)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetNullValue">
      <MemberSignature Language="C#" Value="public object TargetNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.TargetNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetNullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetNullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetNullValue : obj with get, set" Usage="System.Windows.Data.BindingBase.TargetNullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当源的值为 <see langword="null" /> 时在目标中使用的值。</summary>
        <value>当源的值为 <see langword="null" /> 时在目标中使用的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_TargetNullValue"></a>   
## <a name="xaml-text-usage"></a>XAML 文本使用情况  
  
```  
<object TargetNullValue="nullValue" />  
```  
  
 **-或者-**  
  
```  
<object>  
  <object.TargetNullValue>  
    nullValue  
    </object.TargetNullValue>  
</object>  
```  
  
<a name="xamlValues_TargetNullValue"></a>   
## <a name="xaml-values"></a>XAML 值  
 *nullValue*  
 属性或对象元素值的类型与目标属性相同。 请参阅 XAML 使用情况信息的该类型的文档。 该类型可能会或可能不支持特性语法为它的值，或可能或可能不支持对象元素语法 （它需要对该类型的默认构造函数）。  
  
   
  
## Examples  
 以下示例将绑定<xref:System.Windows.Controls.TextBox>到对象的属性。  如果该属性是`null`，则<xref:System.Windows.Controls.TextBox>显示"请输入一个字符串。"  
  
 [!code-xaml[BindingGroupSnippets#TargetNullValue](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#targetnullvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>