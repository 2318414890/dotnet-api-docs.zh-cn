<Type Name="BindingOperations" FullName="System.Windows.Data.BindingOperations">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4601fcaf8f086826132c17425f722a0180d270b0" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52236434" /></Metadata><TypeSignature Language="C#" Value="public static class BindingOperations" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit BindingOperations extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingOperations" />
  <TypeSignature Language="VB.NET" Value="Public Class BindingOperations" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingOperations abstract sealed" />
  <TypeSignature Language="F#" Value="type BindingOperations = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供用于操作绑定的静态方法，包括 <see cref="T:System.Windows.Data.Binding" />、<see cref="T:System.Windows.Data.MultiBinding" /> 和 <see cref="T:System.Windows.Data.PriorityBinding" /> 对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类公开一组充当数据绑定的帮助器操作的静态方法。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AccessCollection">
      <MemberSignature Language="C#" Value="public static void AccessCollection (System.Collections.IEnumerable collection, Action accessMethod, bool writeAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AccessCollection(class System.Collections.IEnumerable collection, class System.Action accessMethod, bool writeAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.AccessCollection(System.Collections.IEnumerable,System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AccessCollection (collection As IEnumerable, accessMethod As Action, writeAccess As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AccessCollection(System::Collections::IEnumerable ^ collection, Action ^ accessMethod, bool writeAccess);" />
      <MemberSignature Language="F#" Value="static member AccessCollection : System.Collections.IEnumerable * Action * bool -&gt; unit" Usage="System.Windows.Data.BindingOperations.AccessCollection (collection, accessMethod, writeAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
        <Parameter Name="accessMethod" Type="System.Action" />
        <Parameter Name="writeAccess" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="collection">要访问的集合。</param>
        <param name="accessMethod">集合中要执行的操作。</param>
        <param name="writeAccess">如果 <paramref name="accessMethod" /> 将写入收集，则为<see langword="true" />；否则，为 <see langword="false" />。</param>
        <summary>提供对集合的访问权限，方法是使用异步机制，该机制在应用程序调用 EnableCollectionSynchronization 时指定。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearAllBindings">
      <MemberSignature Language="C#" Value="public static void ClearAllBindings (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearAllBindings(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.ClearAllBindings(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearAllBindings (target As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearAllBindings(System::Windows::DependencyObject ^ target);" />
      <MemberSignature Language="F#" Value="static member ClearAllBindings : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.Data.BindingOperations.ClearAllBindings target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">要从中删除绑定的对象。</param>
        <summary>从指定的 <see cref="T:System.Windows.DependencyObject" /> 删除所有绑定，包括类型 <see cref="T:System.Windows.Data.Binding" />、<see cref="T:System.Windows.Data.MultiBinding" /> 和 <see cref="T:System.Windows.Data.PriorityBinding" /> 的绑定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的对象不是数据绑定，则此方法无效。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">如果 <paramref name="target" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ClearBinding">
      <MemberSignature Language="C#" Value="public static void ClearBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.ClearBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearBinding (target As DependencyObject, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member ClearBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; unit" Usage="System.Windows.Data.BindingOperations.ClearBinding (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">要从中删除绑定的对象。</param>
        <param name="dp">要从中删除绑定的依赖属性。</param>
        <summary>如果存在，则从属性中删除绑定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果给定的属性数据绑定与<xref:System.Windows.Data.Binding>， <xref:System.Windows.Data.PriorityBinding>，或<xref:System.Windows.Data.MultiBinding>，此方法中删除相应的绑定表达式和还原到前任何本地值的属性的值通过绑定设置。  
  
 如果给定的属性不是数据绑定，则此方法无效。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 参数不能为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CollectionRegistering">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt; CollectionRegistering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.CollectionRegisteringEventArgs&gt; CollectionRegistering" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.BindingOperations.CollectionRegistering" />
      <MemberSignature Language="VB.NET" Value="Public Shared Event CollectionRegistering As EventHandler(Of CollectionRegisteringEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler&lt;System::Windows::Data::CollectionRegisteringEventArgs ^&gt; ^ CollectionRegistering;" />
      <MemberSignature Language="F#" Value="member this.CollectionRegistering : EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt; " Usage="member this.CollectionRegistering : System.EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当数据绑定系统注意到集合时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionViewRegistering">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt; CollectionViewRegistering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.CollectionViewRegisteringEventArgs&gt; CollectionViewRegistering" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.BindingOperations.CollectionViewRegistering" />
      <MemberSignature Language="VB.NET" Value="Public Shared Event CollectionViewRegistering As EventHandler(Of CollectionViewRegisteringEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler&lt;System::Windows::Data::CollectionViewRegisteringEventArgs ^&gt; ^ CollectionViewRegistering;" />
      <MemberSignature Language="F#" Value="member this.CollectionViewRegistering : EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt; " Usage="member this.CollectionViewRegistering : System.EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当数据绑定系统注意到集合视图时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void DisableCollectionSynchronization (System.Collections.IEnumerable collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisableCollectionSynchronization(class System.Collections.IEnumerable collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.DisableCollectionSynchronization(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DisableCollectionSynchronization (collection As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DisableCollectionSynchronization(System::Collections::IEnumerable ^ collection);" />
      <MemberSignature Language="F#" Value="static member DisableCollectionSynchronization : System.Collections.IEnumerable -&gt; unit" Usage="System.Windows.Data.BindingOperations.DisableCollectionSynchronization collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="collection">要从中移除同步访问的集合。</param>
        <summary>移除指定的集合注册的同步。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisconnectedSource">
      <MemberSignature Language="C#" Value="public static object DisconnectedSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property object DisconnectedSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingOperations.DisconnectedSource" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DisconnectedSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Object ^ DisconnectedSource { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisconnectedSource : obj" Usage="System.Windows.Data.BindingOperations.DisconnectedSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当项容器从可视化树中移除时，获取替换 <see cref="P:System.Windows.FrameworkElement.DataContext" /> 的对象。</summary>
        <value>当从可视化树中移除一个项容器时，一个对象替换了 <see cref="P:System.Windows.FrameworkElement.DataContext" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性，如果您需要处理<xref:System.Windows.FrameworkElement.DataContext%2A>的项容器。  项容器是显示中的项的 UI 元素<xref:System.Windows.Controls.ItemsControl>。  当<xref:System.Windows.Controls.ItemsControl>是数据绑定到集合时，项容器为每个项生成。  在某些情况下，会从可视化树中删除项容器。  其中删除一个项容器的两种典型情况是从基础集合删除项的时间和当在上启用虚拟化<xref:System.Windows.Controls.ItemsControl>。  在这些情况下，<xref:System.Windows.FrameworkElement.DataContext%2A>项容器的属性将设置为<xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A>属性应检查是否<xref:System.Windows.FrameworkElement.DataContext%2A>等于<xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A>访问之前<xref:System.Windows.FrameworkElement.DataContext%2A>中<xref:System.Windows.FrameworkElement.DataContextChanged>项事件容器。 有关项容器和虚拟化的详细信息，请参阅中的备注部分<xref:System.Windows.Controls.VirtualizingStackPanel>类。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnableCollectionSynchronization">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使 <see cref="T:System.Windows.Data.CollectionView" /> 对象能够参与对多个线程上使用的集合的同步访问。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

WPF 应用程序可以显示的数据使用集合<xref:System.Windows.Controls.ItemsControl>或其子类之一 (<xref:System.Windows.Controls.ListBox>， <xref:System.Windows.Controls.DataGrid>， <xref:System.Windows.Controls.TreeView>， <xref:System.Windows.Controls.ListView>，等等。)。 WPF 通道对通过子类的集合的所有其访问<xref:System.Windows.Data.CollectionView>。 同时<xref:System.Windows.Controls.ItemsControl>并<xref:System.Windows.Data.CollectionView>在其上具有线程关联<xref:System.Windows.Controls.ItemsControl>创建的这意味着，使用不同的线程上禁止的将引发异常。 实际上，此限制适用于集合。
 
您可能想要在多个线程上使用的集合。   例如，你想要更新集合 （添加或删除项目），"数据收集"线程上时，"用户界面"线程上显示结果，以便 UI 保持响应时数据收集发生的情况。 在这种情况下，您有责任确保对集合的同步 （"线程安全的"） 访问。   这通常是使用简单的锁定机制或更复杂的同步机制如信号灯，重置事件，等等。  而必须同步对集合的应用程序的访问，还必须从 WPF 保证该访问权限 (特别是<xref:System.Windows.Data.CollectionView>) 参与相同的同步机制。  为此，可调用 <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> 方法。
 
若要使用多个线程上的集合，其中之一是 UI 线程拥有<xref:System.Windows.Controls.ItemsControl>，应用程序具有下列职责：

1. 选择同步机制。

1. 同步应用程序中对使用该机制的集合的所有访问。

1. 调用<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A>来告知 WPF 的机制。

   - 必须在 UI 线程上进行调用。

   - 在调用之前使用不同的线程上的集合或附加到的集合前必须出现<xref:System.Windows.Controls.ItemsControl>，取二者中较更高版本。

   - 调用<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)>重载，如果使用简单的锁定机制; 调用<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)>重载如果使用更复杂的机制。

1. 确保对集合和通知所做的更改的更改 (通过<xref:System.Collections.Specialized.INotifyCollectionChanged>) 是原子; 不能从其他线程访问可以人工干预。  （这通常是免费。 For instance，<xref:System.Collections.ObjectModel.ObservableCollection%601>保证此操作，前提是同步受保护的所有更改。)

1. 如果调用 <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>，调用也必须在 UI 线程上发生。

1. 如果你想要在多个 UI 线程上使用同一个集合，则必须调用<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A>(和<xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>，如果需要) 单独在每个 UI 线程上。

1. 避免死锁。  这是已应用程序的责任后它选择使用同步，但它还必须考虑到帐户 WPF 参与同步，如下一段中所述。

反过来，WPF 提供以下行为：

- <xref:System.Windows.Data.CollectionView>访问集合并使用给定的同步机制。

- <xref:System.Windows.Data.CollectionView>维护用于集合中的"卷影副本"，在 UI 线程上。

- <xref:System.Windows.Data.CollectionView.CollectionChanged> 事件队列最长可到达 （在任何线程上）。

- 挂起的事件应用于以异步方式在 UI 线程上的卷影副本时能够执行此操作。

- <xref:System.Windows.Data.CollectionView>不会直接使用任何其他同步机制对应用程序可见。 这是 WPF 的方法帮助避免发生死锁 （请参阅上一项 7）。   

净效果是，可以更改任何线程上的集合，这些更改最终显示在<xref:System.Windows.Controls.ItemsControl>时在 UI 线程有时间"赶上"。  实现已被优化以从饱和 UI 线程并在耗尽对普通用户输入的响应线程更改流动到 UI 线程保持背景的速率限制。

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void EnableCollectionSynchronization (System.Collections.IEnumerable collection, object lockObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableCollectionSynchronization(class System.Collections.IEnumerable collection, object lockObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableCollectionSynchronization (collection As IEnumerable, lockObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableCollectionSynchronization(System::Collections::IEnumerable ^ collection, System::Object ^ lockObject);" />
      <MemberSignature Language="F#" Value="static member EnableCollectionSynchronization : System.Collections.IEnumerable * obj -&gt; unit" Usage="System.Windows.Data.BindingOperations.EnableCollectionSynchronization (collection, lockObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
        <Parameter Name="lockObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="collection">需同步访问的集合。</param>
        <param name="lockObject">访问集合时要锁定的对象。</param>
        <summary>通过使用简单的锁定机制，使 <see cref="T:System.Windows.Data.CollectionView" /> 对象能够参与对多个线程上使用的集合的同步访问。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

WPF 应用程序可以显示的数据使用集合<xref:System.Windows.Controls.ItemsControl>或其子类之一 (<xref:System.Windows.Controls.ListBox>， <xref:System.Windows.Controls.DataGrid>， <xref:System.Windows.Controls.TreeView>， <xref:System.Windows.Controls.ListView>，等等。)。 WPF 通道对通过子类的集合的所有其访问<xref:System.Windows.Data.CollectionView>。 同时<xref:System.Windows.Controls.ItemsControl>并<xref:System.Windows.Data.CollectionView>在其上具有线程关联<xref:System.Windows.Controls.ItemsControl>创建的这意味着，使用不同的线程上禁止的将引发异常。 实际上，此限制适用于集合。
 
您可能想要在多个线程上使用的集合。   例如，你想要更新集合 （添加或删除项目），"数据收集"线程上时，"用户界面"线程上显示结果，以便 UI 保持响应时数据收集发生的情况。 在这种情况下，你有责任确保同步对集合和从 WPF 保证该访问权限访问设置 （"线程安全的"） (特别是<xref:System.Windows.Data.CollectionView>) 参与相同的同步机制。 通过调用<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)>方法，您可以执行此操作通过使用简单的锁定机制。 
 
若要使用多个线程上的集合，其中之一是 UI 线程拥有<xref:System.Windows.Controls.ItemsControl>，必须执行以下操作：

1. 实例化要锁定时访问该集合的对象。

1. 通过锁定该对象同步应用程序中对集合的所有访问。

1. 调用<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)>若要使用简单的锁定机制来告知 WPF。

   - 必须在 UI 线程上进行调用。

   - 在调用之前使用不同的线程上的集合或附加到的集合前必须出现<xref:System.Windows.Controls.ItemsControl>，取二者中较更高版本。

1. 确保对集合和通知所做的更改的更改 (通过<xref:System.Collections.Specialized.INotifyCollectionChanged>) 是原子; 不能从其他线程访问可以人工干预。  （这通常是免费。 For instance，<xref:System.Collections.ObjectModel.ObservableCollection%601>保证此操作，前提是同步受保护的所有更改。)

1. 如果调用 <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>，调用也必须在 UI 线程上发生。

1. 如果你想要在多个 UI 线程上使用同一个集合，则必须调用<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A>(和<xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>，如果需要) 单独在每个 UI 线程上。

1. 避免死锁。  这是已应用程序的责任，一旦它选择使用同步，但它还必须考虑到帐户在同步过程中的 WPF 的参与。 （请参阅详细信息，下面。）

反过来，WPF 提供以下行为：

- <xref:System.Windows.Data.CollectionView>访问使用锁定机制的集合。

- <xref:System.Windows.Data.CollectionView>维护用于集合中的"卷影副本"，在 UI 线程上。

- <xref:System.Windows.Data.CollectionView.CollectionChanged> 事件队列最长可到达 （在任何线程上）。

- 挂起的事件应用于以异步方式在 UI 线程上的卷影副本时能够执行此操作。

- <xref:System.Windows.Data.CollectionView>将不能直接使用任何其他同步机制对应用程序可见。 这是 WPF 的方法帮助避免发生死锁 （请参阅上一项 7）。   

净效果是，可以更改任何线程上的集合，这些更改最终显示在<xref:System.Windows.Controls.ItemsControl>时在 UI 线程有时间"赶上"。  实现已被优化以从饱和 UI 线程并在耗尽对普通用户输入的响应线程更改流动到 UI 线程保持背景的速率限制。
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void EnableCollectionSynchronization (System.Collections.IEnumerable collection, object context, System.Windows.Data.CollectionSynchronizationCallback synchronizationCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableCollectionSynchronization(class System.Collections.IEnumerable collection, object context, class System.Windows.Data.CollectionSynchronizationCallback synchronizationCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableCollectionSynchronization (collection As IEnumerable, context As Object, synchronizationCallback As CollectionSynchronizationCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableCollectionSynchronization(System::Collections::IEnumerable ^ collection, System::Object ^ context, System::Windows::Data::CollectionSynchronizationCallback ^ synchronizationCallback);" />
      <MemberSignature Language="F#" Value="static member EnableCollectionSynchronization : System.Collections.IEnumerable * obj * System.Windows.Data.CollectionSynchronizationCallback -&gt; unit" Usage="System.Windows.Data.BindingOperations.EnableCollectionSynchronization (collection, context, synchronizationCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
        <Parameter Name="context" Type="System.Object" />
        <Parameter Name="synchronizationCallback" Type="System.Windows.Data.CollectionSynchronizationCallback" />
      </Parameters>
      <Docs>
        <param name="collection">需同步访问的集合。</param>
        <param name="context">传递给回调的对象。</param>
        <param name="synchronizationCallback">每当需要访问集合时，就会调用的回调。 可用于确保集合一次被一个线程访问。</param>
        <summary>通过使用机制而不是简单的锁定，使 <see cref="T:System.Windows.Data.CollectionView" /> 对象能够参与对多个线程上使用的集合的同步访问。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

WPF 应用程序可以显示的数据使用集合<xref:System.Windows.Controls.ItemsControl>或其子类之一 (<xref:System.Windows.Controls.ListBox>， <xref:System.Windows.Controls.DataGrid>， <xref:System.Windows.Controls.TreeView>， <xref:System.Windows.Controls.ListView>，等等。)。 WPF 通道对通过子类的集合的所有其访问<xref:System.Windows.Data.CollectionView>。 同时<xref:System.Windows.Controls.ItemsControl>并<xref:System.Windows.Data.CollectionView>在其上具有线程关联<xref:System.Windows.Controls.ItemsControl>创建的这意味着，使用不同的线程上禁止的将引发异常。 实际上，此限制适用于集合。
 
您可能想要在多个线程上使用的集合。   例如，你想要更新集合 （添加或删除项目），"数据收集"线程上时，"用户界面"线程上显示结果，以便 UI 保持响应时数据收集发生的情况。 在这种情况下，你有责任确保同步对集合和从 WPF 保证该访问权限访问设置 （"线程安全的"） (特别是<xref:System.Windows.Data.CollectionView>) 参与相同的同步机制。 通过调用<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)>方法，您可以执行此操作通过使用同步机制，例如信号量、 重置事件，等等。  若要使用多个线程上的集合，其中之一是 UI 线程拥有<xref:System.Windows.Controls.ItemsControl>，必须执行以下操作：

1. 选择同步机制。

1. 同步应用程序中对使用该机制的集合的所有访问。

1. 调用<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)>重载来告知 WPF 使用机制而不是简单的锁定。

   - 必须在 UI 线程上进行调用。

   - 在调用之前使用不同的线程上的集合或附加到的集合前必须出现<xref:System.Windows.Controls.ItemsControl>，取二者中较更高版本。

1. 确保对集合和通知所做的更改的更改 (通过<xref:System.Collections.Specialized.INotifyCollectionChanged>) 是原子; 不能从其他线程访问可以人工干预。  （这通常是免费。 For instance，<xref:System.Collections.ObjectModel.ObservableCollection%601>保证此操作，前提是同步受保护的所有更改。)

1. 如果调用 <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>，调用也必须在 UI 线程上发生。

1. 如果你想要在多个 UI 线程上使用同一个集合，则必须调用<xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A>(和<xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>，如果需要) 单独在每个 UI 线程上。

1. 避免死锁。  这是已应用程序的责任，一旦它选择使用同步，但它还必须考虑到帐户在同步过程中的 WPF 的参与。 （请参阅详细信息，下面。）

反过来，WPF 提供以下行为：

- <xref:System.Windows.Data.CollectionView>访问集合，通过调用已注册<xref:System.Windows.Data.CollectionSynchronizationCallback>使用以下参数：

   - `collection`： 感兴趣的集合。
   - `context`： 已注册的上下文对象。
   - `accessMethod`： 执行实际访问的委托。
   - `writeAccess`:`true`如果委托将修改集合;`false`否则为。

   你<xref:System.Windows.Data.CollectionSynchronizationCallback>应建立同步对集合 (使用`context`对象和`writeAccess`值，根据需要)，调用`accessMethod`，然后发布同步。

- <xref:System.Windows.Data.CollectionView>维护用于集合中的"卷影副本"，在 UI 线程上。

- <xref:System.Windows.Data.CollectionView.CollectionChanged> 事件队列最长可到达 （在任何线程上）。

- 挂起的事件应用于以异步方式在 UI 线程上的卷影副本时能够执行此操作。

- <xref:System.Windows.Data.CollectionView>将不能直接使用任何其他同步机制对应用程序可见。 这是 WPF 的方法帮助避免发生死锁 （请参阅上一项 7）。   

净效果是，可以更改任何线程上的集合，这些更改最终显示在<xref:System.Windows.Controls.ItemsControl>时在 UI 线程有时间"赶上"。  实现已被优化以从饱和 UI 线程并在耗尽对普通用户输入的响应线程更改流动到 UI 线程保持背景的速率限制。

 `context`参数是任意对象传递给`callback`。 可以使用它来确定用于控制对访问的同步机制`collection`。 `Context` 可以是`null`。  
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.Binding GetBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.Binding GetBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBinding (target As DependencyObject, dp As DependencyProperty) As Binding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::Binding ^ GetBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.Binding" Usage="System.Windows.Data.BindingOperations.GetBinding (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.Binding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的对象。</param>
        <param name="dp">从中检索绑定的绑定目标属性。</param>
        <summary>检索在指定属性上设置的 <see cref="T:System.Windows.Data.Binding" /> 对象。</summary>
        <returns>给定属性上设置的 <see cref="T:System.Windows.Data.Binding" /> 对象，或 <see langword="null" />（如果尚未设置 <see cref="T:System.Windows.Data.Binding" /> 对象）。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 参数不能为 null。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingBase">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingBase GetBindingBase (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingBase GetBindingBase(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingBase (target As DependencyObject, dp As DependencyProperty) As BindingBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingBase ^ GetBindingBase(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetBindingBase : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingBase" Usage="System.Windows.Data.BindingOperations.GetBindingBase (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的对象。</param>
        <param name="dp">要从中检索 <see cref="T:System.Windows.Data.BindingBase" /> 对象的绑定目标属性。</param>
        <summary>检索在指定属性上设置的 <see cref="T:System.Windows.Data.BindingBase" /> 对象。</summary>
        <returns>给定属性上设置的 <see cref="T:System.Windows.Data.BindingBase" /> 对象，或 <see langword="null" />（如果尚未设置绑定对象）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingBase>类是用于公共基类<xref:System.Windows.Data.Binding>， <xref:System.Windows.Data.PriorityBinding>，和<xref:System.Windows.Data.MultiBinding>类。 可以使用<xref:System.Windows.Data.BindingOperations.GetBinding%2A>， <xref:System.Windows.Data.BindingOperations.GetPriorityBinding%2A>，和<xref:System.Windows.Data.BindingOperations.GetMultiBinding%2A>方法如果您事先知道的它绑定类型的属性上设置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 参数不能为 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingExpression (target As DependencyObject, dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetBindingExpression : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="System.Windows.Data.BindingOperations.GetBindingExpression (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的绑定目标对象。</param>
        <param name="dp">要从中检索 <see cref="T:System.Windows.Data.BindingExpression" /> 对象的绑定目标属性。</param>
        <summary>返回 <see cref="T:System.Windows.Data.BindingExpression" /> 对象，该对象与指定对象的指定绑定目标属性相关联。</summary>
        <returns>与给定属性相关联的 <see cref="T:System.Windows.Data.BindingExpression" /> 对象；如果不存在，则为 <see langword="null" />。 如果在属性上设置了 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 对象，则返回 <see cref="P:System.Windows.Data.PriorityBindingExpression.ActiveBindingExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingExpression>对象维护的绑定源和绑定目标之间的连接。 你可以获取<xref:System.Windows.Data.BindingExpression>对象通过调用此静态方法或通过调用<xref:System.Windows.FrameworkElement.GetBindingExpression%2A>方法在数据绑定<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>对象。  
  
   
  
## Examples  
 下面的示例演示如何实现<xref:System.Windows.Controls.Primitives.ButtonBase.Click>使用事件处理程序<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A>方法来获取<xref:System.Windows.Data.BindingExpression>，然后调用<xref:System.Windows.Data.BindingExpression.DataItem%2A>属性来访问绑定源对象。  
  
 <xref:System.Windows.Controls.TextBlock> `SavingsText`绑定目标对象和<xref:System.Windows.Controls.TextBlock.Text%2A>是绑定目标属性。  
  
 [!code-csharp[DirectionalBinding#OnRentRaise](~/samples/snippets/csharp/VS_Snippets_Wpf/DirectionalBinding/CSharp/Page1.xaml.cs#onrentraise)]
 [!code-vb[DirectionalBinding#OnRentRaise](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DirectionalBinding/VisualBasic/DirectionalBinding.vb#onrentraise)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 参数不能为 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpressionBase">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpressionBase GetBindingExpressionBase (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpressionBase GetBindingExpressionBase(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingExpressionBase (target As DependencyObject, dp As DependencyProperty) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpressionBase ^ GetBindingExpressionBase(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetBindingExpressionBase : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpressionBase" Usage="System.Windows.Data.BindingOperations.GetBindingExpressionBase (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的对象。</param>
        <param name="dp">要从中检索 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 对象的绑定目标属性。</param>
        <summary>检索在指定属性上设置的 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 对象。</summary>
        <returns>给定属性上设置的 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 对象，或 <see langword="null" />（如果尚未设置绑定对象）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingExpressionBase>类是用于公共基类<xref:System.Windows.Data.BindingExpression>， <xref:System.Windows.Data.PriorityBindingExpression>，和<xref:System.Windows.Data.MultiBindingExpression>类。 可以使用<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A>， <xref:System.Windows.Data.BindingOperations.GetPriorityBindingExpression%2A>，和<xref:System.Windows.Data.BindingOperations.GetMultiBindingExpression%2A>方法如果您事先知道的属性上设置的绑定的类型。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 参数不能为 null。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetMultiBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.MultiBinding GetMultiBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.MultiBinding GetMultiBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMultiBinding (target As DependencyObject, dp As DependencyProperty) As MultiBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::MultiBinding ^ GetMultiBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetMultiBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.MultiBinding" Usage="System.Windows.Data.BindingOperations.GetMultiBinding (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.MultiBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的对象。</param>
        <param name="dp">从中检索绑定的绑定目标属性。</param>
        <summary>检索在指定属性上设置的 <see cref="T:System.Windows.Data.MultiBinding" /> 对象。</summary>
        <returns>给定属性上设置的 <see cref="T:System.Windows.Data.MultiBinding" /> 对象，或 <see langword="null" />（如果尚未设置 <see cref="T:System.Windows.Data.MultiBinding" /> 对象）。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 参数不能为 null。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetMultiBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.MultiBindingExpression GetMultiBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.MultiBindingExpression GetMultiBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetMultiBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMultiBindingExpression (target As DependencyObject, dp As DependencyProperty) As MultiBindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::MultiBindingExpression ^ GetMultiBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetMultiBindingExpression : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.MultiBindingExpression" Usage="System.Windows.Data.BindingOperations.GetMultiBindingExpression (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.MultiBindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的绑定目标对象。</param>
        <param name="dp">要从中检索 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 对象的绑定目标属性。</param>
        <summary>返回 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 对象，该对象与指定对象的指定绑定目标属性相关联。</summary>
        <returns>与给定属性相关联的 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 对象；如果不存在，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与给定属性相关联的 <xref:System.Windows.Data.MultiBindingExpression> 对象；如果不存在，则为 `null`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 参数不能为 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetPriorityBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.PriorityBinding GetPriorityBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.PriorityBinding GetPriorityBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPriorityBinding (target As DependencyObject, dp As DependencyProperty) As PriorityBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::PriorityBinding ^ GetPriorityBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetPriorityBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.PriorityBinding" Usage="System.Windows.Data.BindingOperations.GetPriorityBinding (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.PriorityBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的对象。</param>
        <param name="dp">从中检索绑定的绑定目标属性。</param>
        <summary>检索在指定属性上设置的 <see cref="T:System.Windows.Data.PriorityBinding" /> 对象。</summary>
        <returns>给定属性上设置的 <see cref="T:System.Windows.Data.PriorityBinding" /> 对象，或 <see langword="null" />（如果尚未设置 <see cref="T:System.Windows.Data.PriorityBinding" /> 对象）。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 参数不能为 null。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetPriorityBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.PriorityBindingExpression GetPriorityBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.PriorityBindingExpression GetPriorityBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetPriorityBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPriorityBindingExpression (target As DependencyObject, dp As DependencyProperty) As PriorityBindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::PriorityBindingExpression ^ GetPriorityBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member GetPriorityBindingExpression : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.Data.PriorityBindingExpression" Usage="System.Windows.Data.BindingOperations.GetPriorityBindingExpression (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.PriorityBindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的绑定目标对象。</param>
        <param name="dp">要从中检索 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 对象的绑定目标属性。</param>
        <summary>返回 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 对象，该对象与指定对象的指定绑定目标属性相关联。</summary>
        <returns>与给定属性相关联的 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 对象；如果不存在，则为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> 和 <paramref name="dp" /> 参数不能为 <see langword="null" />。</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetSourceUpdatingBindingGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingGroup&gt; GetSourceUpdatingBindingGroups (System.Windows.DependencyObject root);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Data.BindingGroup&gt; GetSourceUpdatingBindingGroups(class System.Windows.DependencyObject root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSourceUpdatingBindingGroups (root As DependencyObject) As ReadOnlyCollection(Of BindingGroup)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Data::BindingGroup ^&gt; ^ GetSourceUpdatingBindingGroups(System::Windows::DependencyObject ^ root);" />
      <MemberSignature Language="F#" Value="static member GetSourceUpdatingBindingGroups : System.Windows.DependencyObject -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingGroup&gt;" Usage="System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups root" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingGroup&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="root">获取绑定组所用的根 <see cref="T:System.Windows.UIElement" />。  此方法返回与此元素或其后代元素相关的 <see cref="T:System.Windows.Data.BindingGroup" /> 对象。</param>
        <summary>获取所有无效值或没有进行源更新的目标值的 <see cref="T:System.Windows.Data.BindingGroup" /> 对象。</summary>
        <returns><see cref="T:System.Windows.Data.BindingGroup" /> 对象的集合，这些对象与指定的元素关联，并具有无效值，或尚未更新资源的目标值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`root`是`null`，<xref:System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups%2A>返回所有<xref:System.Windows.Data.BindingGroup>无效或未更新的对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSourceUpdatingBindings">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingExpressionBase&gt; GetSourceUpdatingBindings (System.Windows.DependencyObject root);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Data.BindingExpressionBase&gt; GetSourceUpdatingBindings(class System.Windows.DependencyObject root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetSourceUpdatingBindings(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSourceUpdatingBindings (root As DependencyObject) As ReadOnlyCollection(Of BindingExpressionBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Data::BindingExpressionBase ^&gt; ^ GetSourceUpdatingBindings(System::Windows::DependencyObject ^ root);" />
      <MemberSignature Language="F#" Value="static member GetSourceUpdatingBindings : System.Windows.DependencyObject -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingExpressionBase&gt;" Usage="System.Windows.Data.BindingOperations.GetSourceUpdatingBindings root" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingExpressionBase&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="root">获取绑定组所用的根 <see cref="T:System.Windows.UIElement" />。  此方法返回与此元素或其后代元素相关的 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 对象。</param>
        <summary>获取所有无效值或没有进行源更新的目标值的 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 对象。</summary>
        <returns><see cref="T:System.Windows.Data.BindingExpressionBase" /> 对象的集合，这些对象与指定的元素关联，并具有无效值，或尚未更新资源的目标值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`root`是`null`，<xref:System.Windows.Data.BindingOperations.GetSourceUpdatingBindings%2A>返回所有<xref:System.Windows.Data.BindingExpressionBase>无效或未更新的对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDataBound">
      <MemberSignature Language="C#" Value="public static bool IsDataBound (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDataBound(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.IsDataBound(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDataBound (target As DependencyObject, dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDataBound(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="static member IsDataBound : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; bool" Usage="System.Windows.Data.BindingOperations.IsDataBound (target, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target"><paramref name="dp" /> 所在的对象。</param>
        <param name="dp">要检查的依赖项属性。</param>
        <summary>返回一个值，该值指示指定的属性当前是否是数据绑定的。</summary>
        <returns>如果指定的属性为数据绑定的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">如果 <paramref name="target" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.SetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetBinding (target As DependencyObject, dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="static member SetBinding : System.Windows.DependencyObject * System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="System.Windows.Data.BindingOperations.SetBinding (target, dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="target">绑定的绑定目标。</param>
        <param name="dp">绑定的目标属性。</param>
        <param name="binding">描述绑定的 <see cref="T:System.Windows.Data.BindingBase" /> 对象。</param>
        <summary>创建 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 的新实例，并将其与指定的绑定目标属性关联。</summary>
        <returns>为指定的属性创建且与之相关联的 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 的实例。 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 类是 <see cref="T:System.Windows.Data.BindingExpression" />、<see cref="T:System.Windows.Data.MultiBindingExpression" /> 和 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 的基类。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法创建的新实例<xref:System.Windows.Data.BindingExpressionBase>并将该实例与给定对象的给定的依赖项属性关联。 此方法是将绑定附加到的任意方法<xref:System.Windows.DependencyObject>，可能不会公开其自己的 SetBinding 方法。  
  
   
  
## Examples  
 下面的示例演示如何使用此方法将绑定设置。 在此示例中，`myNewBindDef`是<xref:System.Windows.Data.Binding>描述绑定的对象。 绑定目标是`myDateText`，实例<xref:System.Windows.Controls.TextBlock>类。  
  
 [!code-csharp[BindConversion#BOSetBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/BindConversion/CSharp/Window1.xaml.cs#bosetbinding)]
 [!code-vb[BindConversion#BOSetBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindConversion/visualbasic/window1.xaml.vb#bosetbinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="binding" /> 参数不能为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>