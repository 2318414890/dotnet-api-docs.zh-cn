<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DynamicObject.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5048b7221c8f650af7e40e1fc748386ee05216b4b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">048b7221c8f650af7e40e1fc748386ee05216b4b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Dynamic.DynamicObject">
          <source>Provides a base class for specifying dynamic behavior at run time.</source>
          <target state="translated">提供用于在运行时指定动态行为的基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Dynamic.DynamicObject">
          <source>This class must be inherited from; you cannot instantiate it directly.</source>
          <target state="translated">必须继承此类；不能直接对其进行实例化。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>The <ph id="ph1">`DynamicObject`</ph> class enables you to define which operations can be performed on dynamic objects and how to perform those operations.</source>
          <target state="translated"><ph id="ph1">`DynamicObject`</ph>类使你能够定义可以对动态对象执行哪些操作以及如何执行这些操作。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</source>
          <target state="translated">例如，你可以定义当你尝试获取或设置对象属性、 调用方法，或执行如加法和乘法的标准数学运算时，会发生什么情况。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>This class can be useful if you want to create a more convenient protocol for a library.</source>
          <target state="translated">此类可以是你想要创建用于库的更方便协议的情况下很有用。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For example, if users of your library have to use syntax like <ph id="ph1">`Scriptobj.SetProperty("Count", 1)`</ph>, you can provide the ability to use much simpler syntax, like <ph id="ph2">`scriptobj.Count = 1`</ph>.</source>
          <target state="translated">例如，如果你的库的用户必须使用类似的语法<ph id="ph1">`Scriptobj.SetProperty("Count", 1)`</ph>，你可以提供的功能，使用更简单的语法，如<ph id="ph2">`scriptobj.Count = 1`</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>You cannot directly create an instance of the <ph id="ph1">`DynamicObject`</ph> class.</source>
          <target state="translated">你无法直接创建的实例<ph id="ph1">`DynamicObject`</ph>类。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>To implement the dynamic behavior, you may want to inherit from the <ph id="ph1">`DynamicObject`</ph> class and override necessary methods.</source>
          <target state="translated">若要实现的动态行为，你可能想要从其继承<ph id="ph1">`DynamicObject`</ph>类并重写所需的方法。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For example, if you need only operations for setting and getting properties, you can override just the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods.</source>
          <target state="translated">例如，如果你需要的设置和获取属性的唯一操作，您可以只覆盖<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>In C#, to enable dynamic behavior for instances of classes derived from the <ph id="ph1">`DynamicObject`</ph> class, you must use the <ph id="ph2">`dynamic`</ph> keyword.</source>
          <target state="translated">在 C# 中，若要启用动态行为的类的实例派生自<ph id="ph1">`DynamicObject`</ph>类，你必须使用<ph id="ph2">`dynamic`</ph>关键字。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For more information, see <bpt id="p1">[</bpt>Using Type dynamic<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>.</source>
          <target state="translated">有关更多信息，请参见<bpt id="p1">[</bpt>使用类型 dynamic<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>In Visual Basic, dynamic operations are supported by late binding.</source>
          <target state="translated">在 Visual Basic，后期绑定支持动态操作。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For more information, see <bpt id="p1">[</bpt>Early and Late Binding<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>早期绑定和后期绑定<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>The following code example demonstrates how to create an instance of a class that is derived from the <ph id="ph1">`DynamicObject`</ph> class.</source>
          <target state="translated">下面的代码示例演示如何创建派生自的类的实例<ph id="ph1">`DynamicObject`</ph>类。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>You can also add your own members to classes derived from the <ph id="ph1">`DynamicObject`</ph> class.</source>
          <target state="translated">此外可以向派生自的类添加你自己的成员<ph id="ph1">`DynamicObject`</ph>类。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>If your class defines properties and also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</source>
          <target state="translated">如果您的类定义属性，而且还将重写<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>方法，动态语言运行时 (DLR) 第一次使用语言联编程序来查找有关静态的类中的属性定义。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>If there is no such property, the DLR calls the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method.</source>
          <target state="translated">如果没有这样的属性，DLR 调用<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>The <ph id="ph1">`DynamicObject`</ph> class implements the DLR interface <ph id="ph2">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, which enables you to share instances of the <ph id="ph3">`DynamicObject`</ph> class between languages that support the DLR interoperability model.</source>
          <target state="translated"><ph id="ph1">`DynamicObject`</ph>类可实现 DLR 接口<ph id="ph2">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>，从而使你可以共享的实例<ph id="ph3">`DynamicObject`</ph>支持 DLR 互操作性模型的语言之间的类。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For example, you can create an instance of the <ph id="ph1">`DynamicObject`</ph> class in C# and then pass it to an IronPython function.</source>
          <target state="translated">例如，可以创建的实例<ph id="ph1">`DynamicObject`</ph>类在 C# 中，并将其传递给 IronPython 函数。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For more information, see <bpt id="p1">[</bpt>Dynamic Language Runtime Overview<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>动态语言运行时概述<ept id="p1">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <ph id="ph1">&lt;xref:System.Dynamic.ExpandoObject&gt;</ph> class.</source>
          <target state="translated">如果你有一个简单的方案中，您需要的对象，但仅可以添加和删除成员在运行时，不需要定义特定操作和不具有静态成员，可使用<ph id="ph1">&lt;xref:System.Dynamic.ExpandoObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> interface.</source>
          <target state="translated">如果你有更高级的方案，你需要在其中定义动态参与互操作性协议，或者你需要管理 DLR 快速动态调度缓存的对象，创建您自己的实现<ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph> (<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph> in Visual Basic), you can write <ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>.</source>
          <target state="translated">假设你想要提供替代语法访问值在字典中，编写的因此<ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph>(<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph>在 Visual Basic 中)，你可以编写<ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>Also, you want this syntax to be case-insensitive, so that <ph id="ph1">`sampleDictionary.Text`</ph> is equivalent to <ph id="ph2">`sampleDictionary.text`</ph>.</source>
          <target state="translated">此外，你想要不区分大小写，此语法，以便<ph id="ph1">`sampleDictionary.Text`</ph>等效于<ph id="ph2">`sampleDictionary.text`</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicDictionary`</ph> class, which is derived from the <ph id="ph2">`DynamicObject`</ph> class.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">`DynamicDictionary`</ph>类，该类派生自<ph id="ph2">`DynamicObject`</ph>类。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>The <ph id="ph1">`DynamicDictionary`</ph> class contains an object of the <ph id="ph2">`Dictionary&lt;string, object&gt;`</ph> type (<ph id="ph3">`Dictionary(Of String, Object)`</ph> in Visual Basic) to store the key-value pairs, and overrides the <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to support the new syntax.</source>
          <target state="translated"><ph id="ph1">`DynamicDictionary`</ph>类包含的对象<ph id="ph2">`Dictionary&lt;string, object&gt;`</ph>类型 (<ph id="ph3">`Dictionary(Of String, Object)`</ph>在 Visual Basic 中) 来存储键 / 值对，并重写<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>和<ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>方法，以支持新的语法。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>It also provides a <ph id="ph1">`Count`</ph> property, which shows how many dynamic properties the dictionary contains.</source>
          <target state="translated">它还提供了<ph id="ph1">`Count`</ph>属性，用于显示多少动态属性字典包含。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Dynamic.DynamicObject">
          <source>For more examples, see <bpt id="p1">[</bpt>Creating Wrappers with DynamicObject<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=169008)</ept> on the C# Frequently Asked Questions blog.</source>
          <target state="translated">有关更多示例，请参阅<bpt id="p1">[</bpt>DynamicObject 与创建包装<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=169008)</ept>C# 常见问题博客上。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>Enables derived types to initialize a new instance of the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> type.</source>
          <target state="translated">使派生的类型可以初始化 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类型的新实例。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>You cannot directly create an instance of the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">你无法直接创建的实例<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>To implement dynamic behavior, you have to inherit from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class and override necessary methods.</source>
          <target state="translated">若要实现动态行为，你必须从继承<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类并重写所需的方法。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>In C#, to enable dynamic behavior for instances of the classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class, you must use the <ph id="ph2">`dynamic`</ph> keyword.</source>
          <target state="translated">在 C# 中，若要启用动态行为的类的实例派生自<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类，你必须使用<ph id="ph2">`dynamic`</ph>关键字。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>For more information, see <bpt id="p1">[</bpt>Using Type dynamic<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>.</source>
          <target state="translated">有关更多信息，请参见<bpt id="p1">[</bpt>使用类型 dynamic<ept id="p1">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>In Visual Basic, dynamic operations are supported by late binding.</source>
          <target state="translated">在 Visual Basic，后期绑定支持动态操作。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>For more information, see <bpt id="p1">[</bpt>Early and Late Binding<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>早期绑定和后期绑定<ept id="p1">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.#ctor">
          <source>The following code example demonstrates how to create an instance of classes that are derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何创建派生自的类的实例<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
          <source>Returns the enumeration of all dynamic member names.</source>
          <target state="translated">返回所有动态成员名称的枚举。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
          <source>A sequence that contains dynamic member names.</source>
          <target state="translated">一个包含动态成员名称的序列。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
          <source>This method exists for debugging purposes only.</source>
          <target state="translated">此方法存在仅用于调试目的。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The expression that represents <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> to dispatch to the dynamic virtual methods.</source>
          <target state="translated">表示要调度到动态虚方法的 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> 的表达式。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
          <source>Provides a <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> that dispatches to the dynamic virtual methods.</source>
          <target state="translated">提供调度到动态虚方法的 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
          <source>The object can be encapsulated inside another <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> to provide custom behavior for individual actions.</source>
          <target state="translated">可以将该对象封装到另一个 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> 中，以便为各个不同操作提供自定义行为。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
          <source>This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</source>
          <target state="translated">此方法支持语言实现器的动态语言运行时基础结构，不应从代码直接使用。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
          <source>An object of the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicMetaObject" /&gt;</ph> 类型的对象。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Provides information about the binary operation.</source>
          <target state="translated">提供有关二元运算的信息。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Operation<ept id="p1">&lt;/c&gt;</ept> property returns an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> object.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Operation<ept id="p1">&lt;/c&gt;</ept> 属性返回 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>sum = first + second<ept id="p1">&lt;/c&gt;</ept> statement, where <bpt id="p2">&lt;c&gt;</bpt>first<ept id="p2">&lt;/c&gt;</ept> and <bpt id="p3">&lt;c&gt;</bpt>second<ept id="p3">&lt;/c&gt;</ept> are derived from the <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> class, <bpt id="p4">&lt;c&gt;</bpt>binder.Operation<ept id="p4">&lt;/c&gt;</ept> returns <bpt id="p5">&lt;c&gt;</bpt>ExpressionType.Add<ept id="p5">&lt;/c&gt;</ept>.</source>
          <target state="translated">例如，对于 <bpt id="p1">&lt;c&gt;</bpt>sum = first + second<ept id="p1">&lt;/c&gt;</ept> 语句（其中，<bpt id="p2">&lt;c&gt;</bpt>first<ept id="p2">&lt;/c&gt;</ept> 和 <bpt id="p3">&lt;c&gt;</bpt>second<ept id="p3">&lt;/c&gt;</ept> 派生自 <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> 类），<bpt id="p4">&lt;c&gt;</bpt>binder.Operation<ept id="p4">&lt;/c&gt;</ept> 返回 <bpt id="p5">&lt;c&gt;</bpt>ExpressionType.Add<ept id="p5">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The right operand for the binary operation.</source>
          <target state="translated">二元运算的右操作数。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>sum = first + second<ept id="p1">&lt;/c&gt;</ept> statement, where <bpt id="p2">&lt;c&gt;</bpt>first<ept id="p2">&lt;/c&gt;</ept> and <bpt id="p3">&lt;c&gt;</bpt>second<ept id="p3">&lt;/c&gt;</ept> are derived from the <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> class, <bpt id="p4">&lt;c&gt;</bpt>arg<ept id="p4">&lt;/c&gt;</ept> is equal to <bpt id="p5">&lt;c&gt;</bpt>second<ept id="p5">&lt;/c&gt;</ept>.</source>
          <target state="translated">例如，对于 <bpt id="p1">&lt;c&gt;</bpt>sum = first + second<ept id="p1">&lt;/c&gt;</ept> 语句（其中，<bpt id="p2">&lt;c&gt;</bpt>first<ept id="p2">&lt;/c&gt;</ept> 和 <bpt id="p3">&lt;c&gt;</bpt>second<ept id="p3">&lt;/c&gt;</ept> 派生自 <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> 类），<bpt id="p4">&lt;c&gt;</bpt>arg<ept id="p4">&lt;/c&gt;</ept> 等于 <bpt id="p5">&lt;c&gt;</bpt>second<ept id="p5">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The result of the binary operation.</source>
          <target state="translated">二元运算的结果。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Provides implementation for binary operations.</source>
          <target state="translated">提供二元运算的实现。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类派生的类可以重写此方法，以便为诸如加法和乘法这样的运算指定动态行为。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果此方法返回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，则该语言的运行时联编程序将决定行为。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how binary operations should be performed for a dynamic object.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类可以重写此方法以指定应如何对动态对象执行二元运算。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果该方法没有覆盖，语言运行时联编程序确定的行为。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>This method is called when you have binary operations such as addition or multiplication.</source>
          <target state="translated">当您使用例如加法或乘法的二元运算时，调用此方法。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>For example, if the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph> method is overridden, it is automatically invoked for statements like <ph id="ph2">`sum = first + second`</ph> or <ph id="ph3">`multiply = first*second`</ph>, where <ph id="ph4">`first`</ph> is derived from the <ph id="ph5">`DynamicObject`</ph> class.</source>
          <target state="translated">例如，如果<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph>方法被重写，它将自动调用语句等<ph id="ph2">`sum = first + second`</ph>或<ph id="ph3">`multiply = first*second`</ph>，其中<ph id="ph4">`first`</ph>派生自<ph id="ph5">`DynamicObject`</ph>类。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>You can get information about the type of the binary operation by using the <ph id="ph1">`Operation`</ph> property of the <ph id="ph2">`binder`</ph> parameter.</source>
          <target state="translated">可以使用来获取有关类型的二元运算信息<ph id="ph1">`Operation`</ph>属性<ph id="ph2">`binder`</ph>参数。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>If your dynamic object is used only in C# and Visual Basic, the <ph id="ph1">`binder.Operation`</ph> property can have one of the following values from the <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType&gt;</ph> enumeration.</source>
          <target state="translated">如果仅在 C# 和 Visual Basic 中使用动态对象<ph id="ph1">`binder.Operation`</ph>属性可以具有中的以下值之一<ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>However, in other languages such as IronPython or IronRuby, you can have other values.</source>
          <target state="translated">但是，在 IronPython 或 IronRuby 等其他语言，可以有其他值。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>C#</source>
          <target state="translated">C#</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Visual Basic</source>
          <target state="translated">Visual Basic</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An addition operation without overflow checking, for numeric operands.</source>
          <target state="translated">不针对数值操作数溢出检查的加法运算。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An addition compound assignment operation without overflow checking, for numeric operands.</source>
          <target state="translated">不进行溢出检查，针对数值操作数加法复合赋值运算。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise <ph id="ph1">`AND`</ph> operation.</source>
          <target state="translated">按位<ph id="ph1">`AND`</ph>操作。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise <ph id="ph1">`AND`</ph> compound assignment operation.</source>
          <target state="translated">按位<ph id="ph1">`AND`</ph>复合赋值运算。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An arithmetic division operation.</source>
          <target state="translated">算术除法运算。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An arithmetic division compound assignment operation.</source>
          <target state="translated">除的算术复合赋值运算。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise <ph id="ph1">`XOR`</ph> operation.</source>
          <target state="translated">按位<ph id="ph1">`XOR`</ph>操作。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise <ph id="ph1">`XOR`</ph> compound assignment operation.</source>
          <target state="translated">按位<ph id="ph1">`XOR`</ph>复合赋值运算。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A "greater than" comparison.</source>
          <target state="translated">"大于"的比较。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A "greater than or equal to" comparison.</source>
          <target state="translated">"大于或等于"比较。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise left-shift operation.</source>
          <target state="translated">按位左移运算。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise left-shift compound assignment operation.</source>
          <target state="translated">按位左移复合赋值操作。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A "less than" comparison.</source>
          <target state="translated">"小于"比较。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A "less than or equal to" comparison.</source>
          <target state="translated">"小于或等于"比较。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An arithmetic remainder operation.</source>
          <target state="translated">算术余数运算。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An arithmetic remainder compound assignment operation.</source>
          <target state="translated">算术余数复合赋值运算。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A multiplication operation without overflow checking, for numeric operands.</source>
          <target state="translated">不进行溢出检查，针对数值操作数乘法运算。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A multiplication compound assignment operation without overflow checking, for numeric operands.</source>
          <target state="translated">不进行溢出检查，针对数值操作数的乘法复合赋值运算。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>An inequality comparison.</source>
          <target state="translated">不是相等比较。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise or logical <ph id="ph1">`OR`</ph> operation.</source>
          <target state="translated">按位或逻辑<ph id="ph1">`OR`</ph>操作。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise or logical <ph id="ph1">`OR`</ph> compound assignment.</source>
          <target state="translated">按位或逻辑<ph id="ph1">`OR`</ph>复合赋值。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A mathematical operation of raising a number to a power.</source>
          <target state="translated">对数进行幂运算的数学运算。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise right-shift operation.</source>
          <target state="translated">按位右移运算。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A bitwise right-shift compound assignment operation.</source>
          <target state="translated">按位右移复合赋值操作。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A subtraction operation without overflow checking, for numeric operands.</source>
          <target state="translated">不进行溢出检查，针对数值操作数的减法运算。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>A subtraction compound assignment operation without overflow checking, for numeric operands.</source>
          <target state="translated">不进行溢出检查，针对数值操作数的减法复合赋值运算。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>To implement <ph id="ph1">`OrElse`</ph> (<ph id="ph2">`a || b`</ph>) and <ph id="ph3">`AndAlso`</ph> (<ph id="ph4">`a &amp;&amp; b`</ph>) operations for dynamic objects in C#, you may want to implement both the <ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph> method and the <ph id="ph6">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph> method.</source>
          <target state="translated">若要实现<ph id="ph1">`OrElse`</ph>(<ph id="ph2">`a || b`</ph>) 和<ph id="ph3">`AndAlso`</ph>(<ph id="ph4">`a &amp;&amp; b`</ph>) 的 C# 中的动态对象操作来说，你可能想要实现<ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph>方法和<ph id="ph6">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The <ph id="ph1">`OrElse`</ph> operation consists of the unary <ph id="ph2">`IsTrue`</ph> operation and the binary <ph id="ph3">`Or`</ph> operation.</source>
          <target state="translated"><ph id="ph1">`OrElse`</ph>操作包含一元<ph id="ph2">`IsTrue`</ph>操作和二进制<ph id="ph3">`Or`</ph>操作。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The <ph id="ph1">`Or`</ph> operation is performed only if the result of the <ph id="ph2">`IsTrue`</ph> operation is <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Or`</ph>仅当执行操作的结果<ph id="ph2">`IsTrue`</ph>操作<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The <ph id="ph1">`AndAlso`</ph> operation consists of the unary <ph id="ph2">`IsFalse`</ph> operation and the binary <ph id="ph3">`And`</ph> operation.</source>
          <target state="translated"><ph id="ph1">`AndAlso`</ph>操作包含一元<ph id="ph2">`IsFalse`</ph>操作和二进制<ph id="ph3">`And`</ph>操作。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The <ph id="ph1">`And`</ph> operation is performed only if the result of the <ph id="ph2">`IsFalse`</ph> operation is <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`And`</ph>仅当执行操作的结果<ph id="ph2">`IsFalse`</ph>操作<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</source>
          <target state="translated">假定您需要数据结构，用于存储文本和数值表示形式的数字，并且你想要定义基本的数学运算，如加法和减法为此类数据。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicNumber`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">`DynamicNumber`</ph>类，该类派生自<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source><ph id="ph1">`DynamicNumber`</ph> overrides the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph> method to enable mathematical operations.</source>
          <target state="translated"><ph id="ph1">`DynamicNumber`</ph> 重写<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph>方法，以使数学运算。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>It also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to enable access to the elements.</source>
          <target state="translated">它还将重写<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>使对元素的访问的方法。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>In this example, only addition and subtraction operations are supported.</source>
          <target state="translated">在此示例中，支持仅加法和减法运算。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <source>If you try to write a statement like <ph id="ph1">`resultNumber = firstNumber*secondNumber`</ph>, a run-time exception is thrown.</source>
          <target state="translated">如果尝试编写类似的语句<ph id="ph1">`resultNumber = firstNumber*secondNumber`</ph>，会引发一个运行时异常。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>Provides information about the conversion operation.</source>
          <target state="translated">提供有关转换运算的信息。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Type<ept id="p1">&lt;/c&gt;</ept> property provides the type to which the object must be converted.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Type<ept id="p1">&lt;/c&gt;</ept> 属性提供必须将对象转换为的类型。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>For example, for the statement <bpt id="p1">&lt;c&gt;</bpt>(String)sampleObject<ept id="p1">&lt;/c&gt;</ept> in C# (<bpt id="p2">&lt;c&gt;</bpt>CType(sampleObject, Type)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic), where <bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> is an instance of the class derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p4">&lt;c&gt;</bpt>binder.Type<ept id="p4">&lt;/c&gt;</ept> returns the <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> type.</source>
          <target state="translated">例如，对于 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>(String)sampleObject<ept id="p1">&lt;/c&gt;</ept> 语句（在 Visual Basic 中为 <bpt id="p2">&lt;c&gt;</bpt>CType(sampleObject, Type)<ept id="p2">&lt;/c&gt;</ept>，其中 <bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> 是派生自 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类的类的实例），<bpt id="p4">&lt;c&gt;</bpt>binder.Type<ept id="p4">&lt;/c&gt;</ept> 返回 <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> 类型。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Explicit<ept id="p1">&lt;/c&gt;</ept> property provides information about the kind of conversion that occurs.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Explicit<ept id="p1">&lt;/c&gt;</ept> 属性提供有关所发生转换的类型的信息。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>It returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> for explicit conversion and <ph id="ph2">&lt;see langword="false" /&gt;</ph> for implicit conversion.</source>
          <target state="translated">对于显式转换，它返回 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；对于隐式转换，它返回 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>The result of the type conversion operation.</source>
          <target state="translated">类型转换运算的结果。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>Provides implementation for type conversion operations.</source>
          <target state="translated">提供类型转换运算的实现。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类派生的类可以重写此方法，以便为将某个对象从一种类型转换为另一种类型的运算指定动态行为。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果此方法返回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，则该语言的运行时联编程序将决定行为。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how a type conversion should be performed for a dynamic object.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类可以重写此方法以指定应如何执行类型转换为动态对象。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果该方法没有覆盖，语言运行时联编程序确定的行为。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</source>
          <target state="translated">在 C# 中，如果重写此方法，它被自动调用时必须显式或隐式转换，如下面的代码示例中所示。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>In Visual Basic, only explicit conversion is supported.</source>
          <target state="translated">在 Visual Basic 中，支持仅显式转换。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>If you override this method, you call it by using the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A&gt;</ph> or <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A&gt;</ph> functions.</source>
          <target state="translated">如果你重写此方法，则调用它通过使用<ph id="ph1">&lt;xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A&gt;</ph>或<ph id="ph2">&lt;xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A&gt;</ph>函数。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</source>
          <target state="translated">假定您需要数据结构，用于存储文本和数值表示形式的数字，并且你想要定义的此数据结构转换的字符串和整数。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicNumber`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">`DynamicNumber`</ph>类，该类派生自<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source><ph id="ph1">`DynamicNumber`</ph> overrides the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryConvert%2A&gt;</ph> method to enable type conversion.</source>
          <target state="translated"><ph id="ph1">`DynamicNumber`</ph> 重写<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryConvert%2A&gt;</ph>方法，以使类型转换。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>It also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to enable access to the data elements.</source>
          <target state="translated">它还将重写<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>方法以允许对数据元素的访问。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>In this example, only conversion to strings and integers is supported.</source>
          <target state="translated">在此示例中，支持仅转换为字符串和整数。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <source>If you try to convert an object to any other type, a run-time exception is thrown.</source>
          <target state="translated">如果你尝试将对象转换为任何其他类型，则会引发一个运行时异常。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>Provides information about the initialization operation.</source>
          <target state="translated">提供有关初始化操作的信息。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>The arguments that are passed to the object during initialization.</source>
          <target state="translated">初始化期间传递给对象的参数。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>new SampleType(100)<ept id="p1">&lt;/c&gt;</ept> operation, where <bpt id="p2">&lt;c&gt;</bpt>SampleType<ept id="p2">&lt;/c&gt;</ept> is the type derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>args[0]<ept id="p3">&lt;/c&gt;</ept> is equal to 100.</source>
          <target state="translated">例如，对于 <bpt id="p1">&lt;c&gt;</bpt>new SampleType(100)<ept id="p1">&lt;/c&gt;</ept>（其中 <bpt id="p2">&lt;c&gt;</bpt>SampleType<ept id="p2">&lt;/c&gt;</ept> 是派生自 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类的类型），<bpt id="p3">&lt;c&gt;</bpt>args[0]<ept id="p3">&lt;/c&gt;</ept> 等于 100。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>The result of the initialization.</source>
          <target state="translated">初始化的结果。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>Provides the implementation for operations that initialize a new instance of a dynamic object.</source>
          <target state="translated">为初始化动态对象的新实例的操作提供实现。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>This method is not intended for use in C# or Visual Basic.</source>
          <target state="translated">不应将此方法用于 C# 或 Visual Basic。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果此方法返回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，则该语言的运行时联编程序将决定行为。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how a new instance of the dynamic object should be initialized.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类可以重写此方法以指定应如何初始化动态对象的新实例。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果该方法没有覆盖，语言运行时联编程序确定的行为。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.</source>
          <target state="translated">C# 和 Visual Basic 编译器永远不会发出代码以使用此方法，因为它们不支持第一类的类型。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <source>This method is intended for languages that support the initialization of dynamic objects by using syntax like <ph id="ph1">`dynamic new`</ph>.</source>
          <target state="translated">此方法适用于支持通过使用类似的语法的动态对象的初始化的语言<ph id="ph1">`dynamic new`</ph>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>Provides information about the deletion.</source>
          <target state="translated">提供有关删除的信息。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>The indexes to be deleted.</source>
          <target state="translated">要删除的索引。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>Provides the implementation for operations that delete an object by index.</source>
          <target state="translated">为按索引删除对象的操作提供实现。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>This method is not intended for use in C# or Visual Basic.</source>
          <target state="translated">不应将此方法用于 C# 或 Visual Basic。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果此方法返回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，则该语言的运行时联编程序将决定行为。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how a value that has a specified index should be deleted.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类可以重写此方法以指定应如何删除具有指定的索引的值。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果该方法没有覆盖，语言运行时联编程序确定的行为。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</source>
          <target state="translated">C# 和 Visual Basic 编译器永远不会发出代码以使用此方法，因为它们不支持这种类型的操作。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <source>This method is intended for languages that support syntax for deleting objects by index, such as <ph id="ph1">`del sampleObject[1,2]`</ph> in Python.</source>
          <target state="translated">此方法适用于支持语法，如按索引删除对象的语言<ph id="ph1">`del sampleObject[1,2]`</ph>Python 中。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>Provides information about the deletion.</source>
          <target state="translated">提供有关删除的信息。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>Provides the implementation for operations that delete an object member.</source>
          <target state="translated">为删除对象成员的操作提供实现。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>This method is not intended for use in C# or Visual Basic.</source>
          <target state="translated">不应将此方法用于 C# 或 Visual Basic。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果此方法返回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，则该语言的运行时联编程序将决定行为。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how an object member should be deleted.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类可以重写此方法以指定应如何删除对象成员。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>When this method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果此方法没有覆盖，语言运行时联编程序确定的行为。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</source>
          <target state="translated">C# 和 Visual Basic 编译器永远不会发出代码以使用此方法，因为它们不支持这种类型的操作。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <source>This method is intended for languages that support syntax for deleting members, such as <ph id="ph1">`del sampleObject.SampleMember`</ph> in Python.</source>
          <target state="translated">此方法适用于支持用于删除成员，如语法的语言<ph id="ph1">`del sampleObject.SampleMember`</ph>Python 中。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>Provides information about the operation.</source>
          <target state="translated">提供有关该操作的信息。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>The indexes that are used in the operation.</source>
          <target state="translated">该操作中使用的索引。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>sampleObject[3]<ept id="p1">&lt;/c&gt;</ept> operation in C# (<bpt id="p2">&lt;c&gt;</bpt>sampleObject(3)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic), where <bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> is derived from the <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> class, <bpt id="p4">&lt;c&gt;</bpt>indexes[0]<ept id="p4">&lt;/c&gt;</ept> is equal to 3.</source>
          <target state="translated">例如，对于 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>sampleObject[3]<ept id="p1">&lt;/c&gt;</ept> 操作（在 Visual Basic 中为 <bpt id="p2">&lt;c&gt;</bpt>sampleObject(3)<ept id="p2">&lt;/c&gt;</ept>，其中 <bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> 派生自 <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> 类），<bpt id="p4">&lt;c&gt;</bpt>indexes[0]<ept id="p4">&lt;/c&gt;</ept> 等于 3。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>The result of the index operation.</source>
          <target state="translated">索引操作的结果。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>Provides the implementation for operations that get a value by index.</source>
          <target state="translated">为按索引获取值的操作提供实现。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for indexing operations.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类派生的类可以重写此方法，以便为索引操作指定动态行为。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果此方法返回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，则该语言的运行时联编程序将决定行为。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>(In most cases, a run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发运行时异常。）</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how getting a value by index should be performed for a dynamic object.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类可以重写此方法以指定如何按索引获取的值应为执行的动态对象。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果该方法没有覆盖，语言运行时联编程序确定的行为。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>(In most cases, a run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发运行时异常。）</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>If this method is overridden, it is automatically invoked when you have an operation like <ph id="ph1">`sampleObject[3]`</ph> in C# or <ph id="ph2">`sampleObject(3)`</ph> in Visual Basic, where <ph id="ph3">`sampleObject`</ph> is derived from the <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">如果重写此方法，它将自动调用时具有类似的操作<ph id="ph1">`sampleObject[3]`</ph>在 C# 或<ph id="ph2">`sampleObject(3)`</ph>Visual Basic、 where<ph id="ph3">`sampleObject`</ph>派生自<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>Assume that you want to create an object in which properties can be accessed either by names such as <ph id="ph1">`Property0`</ph>, <ph id="ph2">`Property1`</ph>, and so on, or by index, so that, for example, <ph id="ph3">`sampleObject.Property0`</ph> is equivalent to <ph id="ph4">`sampleObject[0]`</ph> in C# or <ph id="ph5">`sampleObject(0)`</ph> in Visual Basic.</source>
          <target state="translated">假设你想要创建的对象属性可以访问通过名称如<ph id="ph1">`Property0`</ph>， <ph id="ph2">`Property1`</ph>，依此类推，或索引，以便，例如，<ph id="ph3">`sampleObject.Property0`</ph>等效于<ph id="ph4">`sampleObject[0]`</ph>在 C# 或<ph id="ph5">`sampleObject(0)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`SampleDynamicObject`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">`SampleDynamicObject`</ph>类，该类派生自<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>The <ph id="ph1">`SampleDynamicObject`</ph> class contains an object of the <ph id="ph2">`Dictionary&lt;string, object&gt;`</ph> type (<ph id="ph3">`Dictionary(Of String, Object)`</ph> in Visual Basic) to store the key-value pairs.</source>
          <target state="translated"><ph id="ph1">`SampleDynamicObject`</ph>类包含的对象<ph id="ph2">`Dictionary&lt;string, object&gt;`</ph>类型 (<ph id="ph3">`Dictionary(Of String, Object)`</ph>在 Visual Basic 中) 来存储键 / 值对。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source><ph id="ph1">`SampleDynamicObject`</ph> overrides the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TrySetIndex%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject.TryGetIndex%2A&gt;</ph> methods to enable access by index.</source>
          <target state="translated"><ph id="ph1">`SampleDynamicObject`</ph> 重写<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TrySetIndex%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Dynamic.DynamicObject.TryGetIndex%2A&gt;</ph>方法以按索引允许访问。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <source>It overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to enable access by property name.</source>
          <target state="translated">它将重写<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>方法以按属性名称中允许访问。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>Provides information about the object that called the dynamic operation.</source>
          <target state="translated">提供有关调用了动态操作的对象的信息。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Name<ept id="p1">&lt;/c&gt;</ept> property provides the name of the member on which the dynamic operation is performed.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Name<ept id="p1">&lt;/c&gt;</ept> 属性提供针对其执行动态操作的成员的名称。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>Console.WriteLine(sampleObject.SampleProperty)<ept id="p1">&lt;/c&gt;</ept> statement, where <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> is an instance of the class derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>binder.Name<ept id="p3">&lt;/c&gt;</ept> returns "SampleProperty".</source>
          <target state="translated">例如，对于<bpt id="p1">&lt;c&gt;</bpt> Console.WriteLine(sampleObject.SampleProperty)<ept id="p1">&lt;/c&gt;</ept> 语句（其中 <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> 是派生自 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类的类的实例），<bpt id="p3">&lt;c&gt;</bpt>binder.Name<ept id="p3">&lt;/c&gt;</ept> 返回“SampleProperty”。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.IgnoreCase<ept id="p1">&lt;/c&gt;</ept> property specifies whether the member name is case-sensitive.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.IgnoreCase<ept id="p1">&lt;/c&gt;</ept> 属性指定成员名称是否区分大小写。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>The result of the get operation.</source>
          <target state="translated">获取操作的结果。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>For example, if the method is called for a property, you can assign the property value to <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">例如，如果为某个属性调用该方法，则可以将该属性值赋给 <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>Provides the implementation for operations that get member values.</source>
          <target state="translated">为获取成员值的操作提供实现。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类派生的类可以重写此方法，以便为诸如获取属性值这样的操作指定动态行为。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果此方法返回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，则该语言的运行时联编程序将决定行为。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>(In most cases, a run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发运行时异常。）</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that get member values should be performed for a dynamic object.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类可以重写此方法以指定应如何对动态对象执行操作用于获取的成员值。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果该方法没有覆盖，语言运行时联编程序确定的行为。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>(In most cases, a run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发运行时异常。）</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>This method is called when you have statements like <ph id="ph1">`Console.WriteLine(sampleObject.SampleProperty)`</ph>, where <ph id="ph2">`sampleObject`</ph> is an instance of the class derived from the <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">当你有这样的语句时调用此方法<ph id="ph1">`Console.WriteLine(sampleObject.SampleProperty)`</ph>，其中<ph id="ph2">`sampleObject`</ph>是派生自的类的实例<ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>You can also add your own members to classes derived from the <ph id="ph1">`DynamicObject`</ph> class.</source>
          <target state="translated">此外可以向派生自的类添加你自己的成员<ph id="ph1">`DynamicObject`</ph>类。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>If your class defines properties and also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</source>
          <target state="translated">如果您的类定义属性，而且还将重写<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>方法，动态语言运行时 (DLR) 第一次使用语言联编程序来查找有关静态的类中的属性定义。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>If there is no such property, the DLR calls the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method.</source>
          <target state="translated">如果没有这样的属性，DLR 调用<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph> (<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph> in Visual Basic), you can write <ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>.</source>
          <target state="translated">假设你想要提供替代语法访问值在字典中，编写的因此<ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph>(<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph>在 Visual Basic 中)，你可以编写<ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>Also, this syntax must be case-insensitive, so that <ph id="ph1">`sampleDictionary.Text`</ph> is equivalent to <ph id="ph2">`sampleDictionary.text`</ph>.</source>
          <target state="translated">此外，此语法必须不区分大小写，以便<ph id="ph1">`sampleDictionary.Text`</ph>等效于<ph id="ph2">`sampleDictionary.text`</ph>。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicDictionary`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">`DynamicDictionary`</ph>类，该类派生自<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>The <ph id="ph1">`DynamicDictionary`</ph> class contains an object of the <ph id="ph2">`Dictionary&lt;string, object&gt;`</ph> type (<ph id="ph3">`Dictionary(Of String, Object)`</ph> in Visual Basic) to store the key-value pairs, and overrides the <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to support the new syntax.</source>
          <target state="translated"><ph id="ph1">`DynamicDictionary`</ph>类包含的对象<ph id="ph2">`Dictionary&lt;string, object&gt;`</ph>类型 (<ph id="ph3">`Dictionary(Of String, Object)`</ph>在 Visual Basic 中) 来存储键 / 值对，并重写<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>和<ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>方法，以支持新的语法。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <source>It also provides a <ph id="ph1">`Count`</ph> property, which shows how many dynamic properties the dictionary contains.</source>
          <target state="translated">它还提供了<ph id="ph1">`Count`</ph>属性，用于显示多少动态属性字典包含。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>Provides information about the invoke operation.</source>
          <target state="translated">提供有关调用操作的信息。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>The arguments that are passed to the object during the invoke operation.</source>
          <target state="translated">调用操作期间传递给对象的参数。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>sampleObject(100)<ept id="p1">&lt;/c&gt;</ept> operation, where <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> is derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>args[0]<ept id="p3">&lt;/c&gt;</ept> is equal to 100.</source>
          <target state="translated">例如，对于 <bpt id="p1">&lt;c&gt;</bpt>sampleObject(100)<ept id="p1">&lt;/c&gt;</ept> 操作（其中 <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> 派生自 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类），<bpt id="p3">&lt;c&gt;</bpt>args[0]<ept id="p3">&lt;/c&gt;</ept> 等于 100。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>The result of the object invocation.</source>
          <target state="translated">对象调用的结果。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>Provides the implementation for operations that invoke an object.</source>
          <target state="translated">为调用对象的操作提供实现。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类派生的类可以重写此方法，以便为诸如调用对象或委托这样的操作指定动态行为。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果此方法返回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，则该语言的运行时联编程序将决定行为。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类可以重写此方法以指定应如何对动态对象执行调用对象的操作。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果该方法没有覆盖，语言运行时联编程序确定的行为。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>(In most cases, a run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发运行时异常。）</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>If this method is overridden, it is automatically invoked when you have an operation like <ph id="ph1">`sampleObject(100)`</ph>, where <ph id="ph2">`sampleObject`</ph> is derived from the <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">如果重写此方法，它将自动调用时具有类似的操作<ph id="ph1">`sampleObject(100)`</ph>，其中<ph id="ph2">`sampleObject`</ph>派生自<ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>The operation for invoking an object is supported in C# but not in Visual Basic.</source>
          <target state="translated">在 C#，但在 Visual Basic 中不支持调用对象的操作。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like <ph id="ph1">`sampleObject(100)`</ph>.</source>
          <target state="translated">Visual Basic 编译器永远不会发出代码来使用此方法，而 Visual Basic 语言不支持类似的语法<ph id="ph1">`sampleObject(100)`</ph>。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>Assume that you need a data structure to store textual and numeric representations of numbers.</source>
          <target state="translated">假定您需要数据结构，用于存储数字的文本和数值表达式。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</source>
          <target state="translated">你想要能够单独指定每个属性的值，并还能够初始化单个语句中的所有属性。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicNumber`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">`DynamicNumber`</ph>类，该类派生自<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source><ph id="ph1">`DynamicNumber`</ph> overrides the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryInvoke%2A&gt;</ph> method to enable initialization of all properties at one time.</source>
          <target state="translated"><ph id="ph1">`DynamicNumber`</ph> 重写<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryInvoke%2A&gt;</ph>方法，以使所有属性的初始化一次。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <source>It also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to enable access to individual object properties.</source>
          <target state="translated">它还将重写<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>使可访问单独的对象属性的方法。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>Provides information about the dynamic operation.</source>
          <target state="translated">提供有关动态操作的信息。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Name<ept id="p1">&lt;/c&gt;</ept> property provides the name of the member on which the dynamic operation is performed.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Name<ept id="p1">&lt;/c&gt;</ept> 属性提供针对其执行动态操作的成员的名称。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>For example, for the statement <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleMethod(100)<ept id="p1">&lt;/c&gt;</ept>, where <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> is an instance of the class derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>binder.Name<ept id="p3">&lt;/c&gt;</ept> returns "SampleMethod".</source>
          <target state="translated">例如，对于 <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleMethod(100)<ept id="p1">&lt;/c&gt;</ept>语句（其中 <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> 是派生自 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类的类的实例），<bpt id="p3">&lt;c&gt;</bpt>binder.Name<ept id="p3">&lt;/c&gt;</ept> 返回“SampleMethod”。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.IgnoreCase<ept id="p1">&lt;/c&gt;</ept> property specifies whether the member name is case-sensitive.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.IgnoreCase<ept id="p1">&lt;/c&gt;</ept> 属性指定成员名称是否区分大小写。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>The arguments that are passed to the object member during the invoke operation.</source>
          <target state="translated">调用操作期间传递给对象成员的参数。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>For example, for the statement <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleMethod(100)<ept id="p1">&lt;/c&gt;</ept>, where <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> is derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>args[0]<ept id="p3">&lt;/c&gt;</ept> is equal to 100.</source>
          <target state="translated">例如，对于 <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleMethod(100)<ept id="p1">&lt;/c&gt;</ept>语句（其中 <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> 派生自 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类），<bpt id="p3">&lt;c&gt;</bpt>args[0]<ept id="p3">&lt;/c&gt;</ept> 等于 100。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>The result of the member invocation.</source>
          <target state="translated">成员调用的结果。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>Provides the implementation for operations that invoke a member.</source>
          <target state="translated">为调用成员的操作提供实现。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations such as calling a method.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类派生的类可以重写此方法，以便为诸如调用方法这样的操作指定动态行为。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果此方法返回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，则该语言的运行时联编程序将决定行为。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类可以重写此方法以指定应如何对动态对象执行操作，以调用对象成员。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果该方法没有覆盖，语言运行时联编程序确定的行为。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>If this method is overridden, it is automatically invoked when you perform an operation like <ph id="ph1">`sampleObject.SampleMethod(100)`</ph>, where <ph id="ph2">`sampleObject`</ph> is derived from the <ph id="ph3">`DynamicObject`</ph> class.</source>
          <target state="translated">如果重写此方法，它将自动调用时执行类似操作<ph id="ph1">`sampleObject.SampleMethod(100)`</ph>，其中<ph id="ph2">`sampleObject`</ph>派生自<ph id="ph3">`DynamicObject`</ph>类。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>You can also add your own methods to classes that are derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">此外可以向派生自的类添加你自己的方法<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>For example, if you override the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.</source>
          <target state="translated">例如，如果你重写<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph>方法，动态调度系统首先会尝试确定类中是否存在指定的方法。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>If it does not find the method, it uses the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph> implementation.</source>
          <target state="translated">如果找不到该方法，它将使用<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>This method does not support <ph id="ph1">`ref`</ph> and <ph id="ph2">`out`</ph> parameters.</source>
          <target state="translated">此方法不支持<ph id="ph1">`ref`</ph>和<ph id="ph2">`out`</ph>参数。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>All parameters in the <ph id="ph1">`args`</ph> array are passed by value.</source>
          <target state="translated">中的所有参数<ph id="ph1">`args`</ph>数组通过值传递。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph> (<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph> in Visual Basic), you can write <ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>.</source>
          <target state="translated">假设你想要提供替代语法访问值在字典中，编写的因此<ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph>(<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph>在 Visual Basic 中)，你可以编写<ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>Also, you want to be able to call all the standard dictionary methods on this dictionary.</source>
          <target state="translated">此外，你想要能够对此字典调用所有标准字典方法。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicDictionary`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">`DynamicDictionary`</ph>类，该类派生自<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>The <ph id="ph1">`DynamicDictionary`</ph> class contains an object of the <ph id="ph2">`Dictionary&lt;string, object&gt;`</ph> type (<ph id="ph3">`Dictionary(Of String, Object)`</ph> in Visual Basic) to store the key-value pairs.</source>
          <target state="translated"><ph id="ph1">`DynamicDictionary`</ph>类包含的对象<ph id="ph2">`Dictionary&lt;string, object&gt;`</ph>类型 (<ph id="ph3">`Dictionary(Of String, Object)`</ph>在 Visual Basic 中) 来存储键 / 值对。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>It overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph> method to support methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class and overrides the <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to support the new syntax.</source>
          <target state="translated">它将重写<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph>方法，以支持的方法<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>类，并重写<ph id="ph3">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>方法，以支持新的语法。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <source>It also provides a <ph id="ph1">`Print`</ph> method, which prints out all dictionary keys and values.</source>
          <target state="translated">它还提供了<ph id="ph1">`Print`</ph>方法，打印出所有字典键和值。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>Provides information about the operation.</source>
          <target state="translated">提供有关该操作的信息。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>The indexes that are used in the operation.</source>
          <target state="translated">该操作中使用的索引。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>sampleObject[3] = 10<ept id="p1">&lt;/c&gt;</ept> operation in C# (<bpt id="p2">&lt;c&gt;</bpt>sampleObject(3) = 10<ept id="p2">&lt;/c&gt;</ept> in Visual Basic), where <bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> is derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p4">&lt;c&gt;</bpt>indexes[0]<ept id="p4">&lt;/c&gt;</ept> is equal to 3.</source>
          <target state="translated">例如，对于 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>sampleObject[3] = 10<ept id="p1">&lt;/c&gt;</ept>操作（Visual Basic 中为 <bpt id="p2">&lt;c&gt;</bpt>sampleObject(3) = 10<ept id="p2">&lt;/c&gt;</ept>，其中 <bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> 派生自 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类），<bpt id="p4">&lt;c&gt;</bpt>indexes[0]<ept id="p4">&lt;/c&gt;</ept> 等于 3。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>The value to set to the object that has the specified index.</source>
          <target state="translated">要为具有指定索引的对象设置的值。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>sampleObject[3] = 10<ept id="p1">&lt;/c&gt;</ept> operation in C# (<bpt id="p2">&lt;c&gt;</bpt>sampleObject(3) = 10<ept id="p2">&lt;/c&gt;</ept> in Visual Basic), where <bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> is derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p4">&lt;c&gt;</bpt>value<ept id="p4">&lt;/c&gt;</ept> is equal to 10.</source>
          <target state="translated">例如，对于 C# 中的 <bpt id="p1">&lt;c&gt;</bpt>sampleObject[3] = 10<ept id="p1">&lt;/c&gt;</ept> 操作（Visual Basic 中为 <bpt id="p2">&lt;c&gt;</bpt>sampleObject(3) = 10<ept id="p2">&lt;/c&gt;</ept>，其中 <bpt id="p3">&lt;c&gt;</bpt>sampleObject<ept id="p3">&lt;/c&gt;</ept> 派生自 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类），<bpt id="p4">&lt;c&gt;</bpt>value<ept id="p4">&lt;/c&gt;</ept> 等于 10。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>Provides the implementation for operations that set a value by index.</source>
          <target state="translated">为按索引设置值的操作提供实现。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类派生的类可以重写此方法，以便为按指定索引访问对象的操作指定动态行为。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果此方法返回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，则该语言的运行时联编程序将决定行为。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>(In most cases, a language-specific run-time exception is thrown.</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类可以重写此方法以指定应如何对动态对象执行按索引访问的对象的操作。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果该方法没有覆盖，语言运行时联编程序确定的行为。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>If this method is overridden, it is automatically invoked when you have an operation like <ph id="ph1">`sampleObject[3] = 10`</ph> in C# or <ph id="ph2">`sampleObject(3) = 10`</ph> in Visual Basic, where <ph id="ph3">`sampleObject`</ph> is derived from the <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">如果重写此方法，它将自动调用时具有类似的操作<ph id="ph1">`sampleObject[3] = 10`</ph>在 C# 或<ph id="ph2">`sampleObject(3) = 10`</ph>Visual Basic、 where<ph id="ph3">`sampleObject`</ph>派生自<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>Assume that you want to create an object in which properties can be accessed either by names such as <ph id="ph1">`Property0`</ph>, <ph id="ph2">`Property1`</ph>, and so on, or by index, so that, for example, <ph id="ph3">`sampleObject.Property0`</ph> is equivalent to <ph id="ph4">`sampleObject[0]`</ph> in C# or <ph id="ph5">`sampleObject(0)`</ph> in Visual Basic.</source>
          <target state="translated">假设你想要创建的对象属性可以访问通过名称如<ph id="ph1">`Property0`</ph>， <ph id="ph2">`Property1`</ph>，依此类推，或索引，以便，例如，<ph id="ph3">`sampleObject.Property0`</ph>等效于<ph id="ph4">`sampleObject[0]`</ph>在 C# 或<ph id="ph5">`sampleObject(0)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>The following code example demonstrates the <ph id="ph1">`SampleDynamicObject`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">`SampleDynamicObject`</ph>类，该类派生自<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>The <ph id="ph1">`SampleDynamicObject`</ph> class contains an object of the <ph id="ph2">`Dictionary&lt;string, object&gt;`</ph> type (<ph id="ph3">`Dictionary(Of String, Object)`</ph> in Visual Basic) to store the key-value pairs.</source>
          <target state="translated"><ph id="ph1">`SampleDynamicObject`</ph>类包含的对象<ph id="ph2">`Dictionary&lt;string, object&gt;`</ph>类型 (<ph id="ph3">`Dictionary(Of String, Object)`</ph>在 Visual Basic 中) 来存储键 / 值对。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source><ph id="ph1">`SampleDynamicObject`</ph> overrides the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TrySetIndex%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject.TryGetIndex%2A&gt;</ph> methods to enable access by index.</source>
          <target state="translated"><ph id="ph1">`SampleDynamicObject`</ph> 重写<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TrySetIndex%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Dynamic.DynamicObject.TryGetIndex%2A&gt;</ph>方法以按索引允许访问。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <source>It overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to enable access by property name.</source>
          <target state="translated">它将重写<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>方法以按属性名称中允许访问。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>Provides information about the object that called the dynamic operation.</source>
          <target state="translated">提供有关调用了动态操作的对象的信息。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Name<ept id="p1">&lt;/c&gt;</ept> property provides the name of the member to which the value is being assigned.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Name<ept id="p1">&lt;/c&gt;</ept> 属性提供将该值分配到的成员的名称。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>For example, for the statement <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleProperty = "Test"<ept id="p1">&lt;/c&gt;</ept>, where <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> is an instance of the class derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>binder.Name<ept id="p3">&lt;/c&gt;</ept> returns "SampleProperty".</source>
          <target state="translated">例如，对于 <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleProperty = "Test"<ept id="p1">&lt;/c&gt;</ept> 语句（其中 <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> 是派生自 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类的类的实例），<bpt id="p3">&lt;c&gt;</bpt>binder.Name<ept id="p3">&lt;/c&gt;</ept> 返回“SampleProperty”。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.IgnoreCase<ept id="p1">&lt;/c&gt;</ept> property specifies whether the member name is case-sensitive.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.IgnoreCase<ept id="p1">&lt;/c&gt;</ept> 属性指定成员名称是否区分大小写。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>The value to set to the member.</source>
          <target state="translated">要为成员设置的值。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>For example, for <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleProperty = "Test"<ept id="p1">&lt;/c&gt;</ept>, where <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> is an instance of the class derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class, the <bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> is "Test".</source>
          <target state="translated">例如，对于 <bpt id="p1">&lt;c&gt;</bpt>sampleObject.SampleProperty = "Test"<ept id="p1">&lt;/c&gt;</ept> 语句（其中 <bpt id="p2">&lt;c&gt;</bpt>sampleObject<ept id="p2">&lt;/c&gt;</ept> 是派生自 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类的类的实例），<bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> 为“Test”。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>Provides the implementation for operations that set member values.</source>
          <target state="translated">为设置成员值的操作提供实现。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类派生的类可以重写此方法，以便为诸如设置属性值这样的操作指定动态行为。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果此方法返回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，则该语言的运行时联编程序将决定行为。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类可以重写此方法以指定应如何对动态对象执行将值设置为成员的操作。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果该方法没有覆盖，语言运行时联编程序确定的行为。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>This method is called when you have statements like <ph id="ph1">`sampleObject.SampleProperty = "Test"`</ph>, where <ph id="ph2">`sampleObject`</ph> is an instance of the class that is derived from the <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">当你有这样的语句时调用此方法<ph id="ph1">`sampleObject.SampleProperty = "Test"`</ph>，其中<ph id="ph2">`sampleObject`</ph>是派生自的类的实例<ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>You can also add your own members to classes derived from the <ph id="ph1">`DynamicObject`</ph> class.</source>
          <target state="translated">此外可以向派生自的类添加你自己的成员<ph id="ph1">`DynamicObject`</ph>类。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>If your class defines properties and also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</source>
          <target state="translated">如果您的类定义属性，而且还将重写<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>方法，动态语言运行时 (DLR) 第一次使用语言联编程序来查找有关静态的类中的属性定义。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>If there is no such property, the DLR calls the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method.</source>
          <target state="translated">如果没有这样的属性，DLR 调用<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph> (<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph> in Visual Basic), you can write <ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>.</source>
          <target state="translated">假设你想要提供替代语法访问值在字典中，编写的因此<ph id="ph1">`sampleDictionary["Text"] = "Sample text"`</ph>(<ph id="ph2">`sampleDictionary("Text") = "Sample text"`</ph>在 Visual Basic 中)，你可以编写<ph id="ph3">`sampleDictionary.Text = "Sample text"`</ph>。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>Also, this syntax must be case-insensitive, so that <ph id="ph1">`sampleDictionary.Text`</ph> is equivalent to <ph id="ph2">`sampleDictionary.text`</ph>.</source>
          <target state="translated">此外，此语法必须不区分大小写，以便<ph id="ph1">`sampleDictionary.Text`</ph>等效于<ph id="ph2">`sampleDictionary.text`</ph>。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicDictionary`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">`DynamicDictionary`</ph>类，该类派生自<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>The <ph id="ph1">`DynamicDictionary`</ph> class contains an object of the <ph id="ph2">`Dictionary&lt;string, object&gt;`</ph> type (<ph id="ph3">`Dictionary(Of String, Object)`</ph> in Visual Basic) to store the key-value pairs, and overrides the <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to support the new syntax.</source>
          <target state="translated"><ph id="ph1">`DynamicDictionary`</ph>类包含的对象<ph id="ph2">`Dictionary&lt;string, object&gt;`</ph>类型 (<ph id="ph3">`Dictionary(Of String, Object)`</ph>在 Visual Basic 中) 来存储键 / 值对，并重写<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>和<ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>方法，以支持新的语法。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <source>It also provides a <ph id="ph1">`Count`</ph> property, which shows how many dynamic properties the dictionary contains.</source>
          <target state="translated">它还提供了<ph id="ph1">`Count`</ph>属性，用于显示多少动态属性字典包含。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Provides information about the unary operation.</source>
          <target state="translated">提供有关一元运算的信息。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>binder.Operation<ept id="p1">&lt;/c&gt;</ept> property returns an <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> object.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>binder.Operation<ept id="p1">&lt;/c&gt;</ept> 属性返回 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>For example, for the <bpt id="p1">&lt;c&gt;</bpt>negativeNumber = -number<ept id="p1">&lt;/c&gt;</ept> statement, where <bpt id="p2">&lt;c&gt;</bpt>number<ept id="p2">&lt;/c&gt;</ept> is derived from the <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> class, <bpt id="p3">&lt;c&gt;</bpt>binder.Operation<ept id="p3">&lt;/c&gt;</ept> returns "Negate".</source>
          <target state="translated">例如，对于 <bpt id="p1">&lt;c&gt;</bpt>negativeNumber = -number<ept id="p1">&lt;/c&gt;</ept> 语句（其中 <bpt id="p2">&lt;c&gt;</bpt>number<ept id="p2">&lt;/c&gt;</ept> 派生自 <ph id="ph1">&lt;see langword="DynamicObject" /&gt;</ph> 类），<bpt id="p3">&lt;c&gt;</bpt>binder.Operation<ept id="p3">&lt;/c&gt;</ept> 返回“Negate”。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The result of the unary operation.</source>
          <target state="translated">一元运算的结果。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Provides implementation for unary operations.</source>
          <target state="translated">提供一元运算的实现。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Dynamic.DynamicObject" /&gt;</ph> 类派生的类可以重写此方法，以便为诸如求反、递增、递减这样的运算指定动态行为。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作成功，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>If this method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果此方法返回 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，则该语言的运行时联编程序将决定行为。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Classes derived from the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how unary operations should be performed for a dynamic object.</source>
          <target state="translated">类派生自<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类可以重写此方法以指定应如何对动态对象执行一元运算。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>When the method is not overridden, the run-time binder of the language determines the behavior.</source>
          <target state="translated">如果该方法没有覆盖，语言运行时联编程序确定的行为。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>(In most cases, a language-specific run-time exception is thrown.)</source>
          <target state="translated">（大多数情况下，将引发语言特定的运行时异常。）</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>This method is called when you have unary operations such as negation, increment, or decrement.</source>
          <target state="translated">使用一元运算，例如求反、 递增，或递减时调用此方法。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>For example, if the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph> method is overridden, this method is automatically invoked for statements like <ph id="ph2">`negativeNumber = -number`</ph>, where <ph id="ph3">`number`</ph> is derived from the <ph id="ph4">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">例如，如果<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph>方法被重写，此方法将自动调用语句等<ph id="ph2">`negativeNumber = -number`</ph>，其中<ph id="ph3">`number`</ph>派生自<ph id="ph4">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>You can get information about the type of the unary operation by using the <ph id="ph1">`Operation`</ph> property of the <ph id="ph2">`binder`</ph> parameter.</source>
          <target state="translated">你可以通过使用来获取有关一元运算的类型信息<ph id="ph1">`Operation`</ph>属性<ph id="ph2">`binder`</ph>参数。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>If your dynamic object is used only in C# and Visual Basic, the <ph id="ph1">`binder.Operation`</ph> property can have one of the following values from the <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType&gt;</ph> enumeration.</source>
          <target state="translated">如果仅在 C# 和 Visual Basic 中使用动态对象<ph id="ph1">`binder.Operation`</ph>属性可以具有中的以下值之一<ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionType&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>However, in other languages such as IronPython or IronRuby, you can have other values.</source>
          <target state="translated">但是，在 IronPython 或 IronRuby 等其他语言，可以有其他值。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>C#</source>
          <target state="translated">C#</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Visual Basic</source>
          <target state="translated">Visual Basic</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A unary decrement operation.</source>
          <target state="translated">一元递减运算。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A unary increment operation.</source>
          <target state="translated">一元递增操作。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>An arithmetic negation.</source>
          <target state="translated">算术求反。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A logical negation.</source>
          <target state="translated">逻辑求反。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A ones complement.</source>
          <target state="translated">的补数。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A false condition value.</source>
          <target state="translated">False 条件的值。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A true condition value.</source>
          <target state="translated">一个条件为真值。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>A unary plus.</source>
          <target state="translated">一元加。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>To implement <ph id="ph1">`OrElse`</ph> (<ph id="ph2">`a || b`</ph>) and <ph id="ph3">`AndAlso`</ph> (<ph id="ph4">`a &amp;&amp; b`</ph>) operations for dynamic objects in C#, you may want to implement both the <ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph> method and the <ph id="ph6">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph> method.</source>
          <target state="translated">若要实现<ph id="ph1">`OrElse`</ph>(<ph id="ph2">`a || b`</ph>) 和<ph id="ph3">`AndAlso`</ph>(<ph id="ph4">`a &amp;&amp; b`</ph>) 的 C# 中的动态对象操作来说，你可能想要实现<ph id="ph5">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph>方法和<ph id="ph6">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The <ph id="ph1">`OrElse`</ph> operation consists of the unary <ph id="ph2">`IsTrue`</ph> operation and the binary <ph id="ph3">`Or`</ph> operation.</source>
          <target state="translated"><ph id="ph1">`OrElse`</ph>操作包含一元<ph id="ph2">`IsTrue`</ph>操作和二进制<ph id="ph3">`Or`</ph>操作。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The <ph id="ph1">`Or`</ph> operation is performed only if the result of the <ph id="ph2">`IsTrue`</ph> operation is <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Or`</ph>仅当执行操作的结果<ph id="ph2">`IsTrue`</ph>操作<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The <ph id="ph1">`AndAlso`</ph> operation consists of the unary <ph id="ph2">`IsFalse`</ph> operation and the binary <ph id="ph3">`And`</ph> operation.</source>
          <target state="translated"><ph id="ph1">`AndAlso`</ph>操作包含一元<ph id="ph2">`IsFalse`</ph>操作和二进制<ph id="ph3">`And`</ph>操作。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The <ph id="ph1">`And`</ph> operation is performed only if the result of the <ph id="ph2">`IsFalse`</ph> operation is <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`And`</ph>仅当执行操作的结果<ph id="ph2">`IsFalse`</ph>操作<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</source>
          <target state="translated">假定您需要数据结构，用于存储文本和数值表示形式的数字，并且你想要定义此类数据算术求反运算。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>The following code example demonstrates the <ph id="ph1">`DynamicNumber`</ph> class, which is derived from the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">`DynamicNumber`</ph>类，该类派生自<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source><ph id="ph1">`DynamicNumber`</ph> overrides the <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph> method to enable the mathematical negation operation.</source>
          <target state="translated"><ph id="ph1">`DynamicNumber`</ph> 重写<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph>方法，以使算术求反运算。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>Is also overrides the <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods to enable access to the elements.</source>
          <target state="translated">它还会覆盖<ph id="ph1">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph>使对元素的访问的方法。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>In this example, only the mathematical negation operation is supported.</source>
          <target state="translated">在此示例中，支持仅算术求反运算。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <source>If you try to write a statement like <ph id="ph1">`negativeNumber = +number`</ph>, a run-time exception occurs.</source>
          <target state="translated">如果尝试编写类似的语句<ph id="ph1">`negativeNumber = +number`</ph>，则会发生运行时异常。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>