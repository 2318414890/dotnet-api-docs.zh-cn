<Type Name="ContentPropertyAttribute" FullName="System.Windows.Markup.ContentPropertyAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fccb72bf425ea39ebd2388db38ab8ee9c1c77e49" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32691235" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ContentPropertyAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ContentPropertyAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ContentPropertyAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ContentPropertyAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContentPropertyAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指示某种类型的哪个属性是 XAML 内容属性。 处理特性化类型的 XAML 表示形式的 XAML 子元素时，XAML 处理器会使用此信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果关联的属性<xref:System.Windows.Markup.ContentPropertyAttribute>的类型不是`string`或`object`，XAML 处理器会尝试确定的值转换技术。 对于本机类型转换，XAML 语言基元的或特定的本机转换，通过该特定的 XAML 编写器实现的是第一项检查。 下一步所查找的类型转换器。 在.NET 实现中，基于标识的类型转换器<xref:System.ComponentModel.TypeConverterAttribute>任一在成员级别或类型级别定义适用。 如果可以不标识任何值的转换，则 XAML 对象编写器通常会引发异常。  
  
 为了接受多个单个对象元素作为内容，XAML 内容属性的类型必须为集合类型受支持。  
  
 由于`Inherited=true`属性的值声明<xref:System.Windows.Markup.ContentPropertyAttribute>通常适用于所有派生类的内容属性标记。 应用空<xref:System.Windows.Markup.ContentPropertyAttribute>使派生的类由基类中删除内容的属性特性的声明 （并请注意此类具有任何内容属性）。 应用以不同方式命名<xref:System.Windows.Markup.ContentPropertyAttribute>替换继承<xref:System.Windows.Markup.ContentPropertyAttribute>替换为新。  
  
 在以前版本的.NET Framework 中，此类存在于特定于 WPF 程序集中 WindowsBase，并还具有的并行实现中 Windows Communication Foundation (WCF)。 从.NET Framework 4.0、<xref:System.Windows.Markup.ContentPropertyAttribute>位于 System.Xaml 程序集中。 有关详细信息，请参阅[类型从 WPF 迁移到 System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)。  
  
## <a name="wpf-usage-notes"></a>WPF 用法说明  
 类在 Windows Presentation Foundation (WPF) 使用的一个示例<xref:System.Windows.Markup.ContentPropertyAttribute>是<xref:System.Windows.Controls.ContentControl>，后者<xref:System.Windows.Controls.Button>类继承。  <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType>属性是由设置内容属性<xref:System.Windows.Markup.ContentPropertyAttribute>。  如果<xref:System.Windows.Controls.Button>在 XAML 中，实例化<xref:System.Windows.Controls.ContentControl.Content%2A>的<xref:System.Windows.Controls.Button>将设置为开始和结束按钮标记之间的元素。  
    
## Examples  
 下面的示例创建一个名为类`Film`具有<xref:System.Windows.Markup.ContentPropertyAttribute>应用。  名为的属性`Title`指示作为内容的属性。  
  
 [!code-csharp[MarkupSnippets#MarkupContentPropertyAttribute](~/samples/snippets/csharp/VS_Snippets_Wpf/MarkupSnippets/CSharp/Window1.xaml.cs#markupcontentpropertyattribute)]
 [!code-vb[MarkupSnippets#MarkupContentPropertyAttribute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MarkupSnippets/visualbasic/window1.xaml.vb#markupcontentpropertyattribute)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentPropertyAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ContentPropertyAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContentPropertyAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于`Inherited=true`属性的值声明<xref:System.Windows.Markup.ContentPropertyAttribute>通常适用于所有派生类的内容属性标记。 使用此签名，或应用空<xref:System.Windows.Markup.ContentPropertyAttribute>，允许派生的类，以删除内容的属性特性的声明由一个基类 （并记下此类具有任何内容属性）。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentPropertyAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContentPropertyAttribute(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">作为内容属性的属性的名称。</param>
        <summary>使用指定的名称初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 假定具有 CLR 支持，提供`name`应匹配<xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType>CLR 中的相关属性的类型系统。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.ContentPropertyAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取作为内容属性的属性的名称。</summary>
        <value>作为内容属性的属性的名称。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>