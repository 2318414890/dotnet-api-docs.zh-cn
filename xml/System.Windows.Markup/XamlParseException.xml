<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlParseException.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f7785f59cbc386e6af15aa0c6eb7b76532178de9.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7785f59cbc386e6af15aa0c6eb7b76532178de9</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.XamlParseException">
          <source>Represents the exception class for parser-specific exceptions from a WPF XAML parser.</source>
          <target state="translated">表示来自 WPF 分析器的、特定于分析器的异常的异常类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.XamlParseException">
          <source>This exception is used in XAML API or WPF XAML parser operations from .NET Framework 3.0 and .NET Framework 3.5, or for specific use of the WPF XAML parser by calling <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlReader" /&gt;</ph> API.</source>
          <target state="translated">此异常用于 .NET Framework 3.0 和 .NET Framework 3.5 中的 XAML API 或 WPF XAML 分析器操作，或者通过调用 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlReader" /&gt;</ph> API 而特别用于 WPF XAML 分析器。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph> is used only for the WPF-implemented XAML parser that performs the XAML parsing and loading for WPF applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph> 仅用于为 WPF 应用程序执行解析 / 加载 XAML 的 WPF 实现 XAML 分析器。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>Specifically, the exception is only relevant when an application targets <ph id="ph1">[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]</ph> and <ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>.</source>
          <target state="translated">具体而言，例外情况是仅当应用程序的目标时才可用<ph id="ph1">[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]</ph>和<ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>The exception can also originate from user code in run-time calls to APIs that hook up the WPF-implemented XAML parser to load XAML from within a running WPF application (for example, calls to <ph id="ph1">&lt;xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">异常也可来自对挂钩 WPF 实现 XAML 分析器从 XAML 加载内运行的 WPF 应用程序的 Api 调用，运行时中的用户代码 (例如，调用<ph id="ph1">&lt;xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>For <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Xaml.XamlParseException&gt;</ph> exception that typically reports XAML processing exceptions is defined in a different namespace (<ph id="ph3">&lt;xref:System.Xaml&gt;</ph>) and a different assembly (System.Xaml).</source>
          <target state="translated">有关<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>、<ph id="ph2">&lt;xref:System.Xaml.XamlParseException&gt;</ph>通常报告 XAML 处理异常的异常在不同的命名空间中定义 (<ph id="ph3">&lt;xref:System.Xaml&gt;</ph>) 和不同的程序集 (System.Xaml)。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>Unless you are writing an equivalent to the WPF XAML parser or working with <ph id="ph1">[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]</ph> and <ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> targeting, you generally will not throw <ph id="ph3">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph> from your own code.</source>
          <target state="translated">除非你对 WPF XAML 分析器撰写等效项或使用<ph id="ph1">[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]</ph>和<ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>目标，你通常将不会引发<ph id="ph3">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph>从你自己的代码。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>However, handling for the exception is sometimes necessary.</source>
          <target state="translated">但是，异常处理有时是必需的。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>For application scenarios, where you may want to suppress XAML parse errors, a <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event handler at the application level is one way to handle a run-time <ph id="ph3">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph>.</source>
          <target state="translated">对于应用程序方案，其中你可能想要禁止显示 XAML 分析错误， <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph>应用程序级别的事件处理程序是一种方法来处理运行时<ph id="ph3">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>Whether to suppress exceptions or let them surface to user code depends on how you design your application for purposes of loading XAML, and the trust level that you assign to the XAML your application loads.</source>
          <target state="translated">是否要取消显示异常或让他们表面到用户代码取决于如何设计应用程序以加载 XAML，并加载你的应用程序将其分配到使用 XAML 的信任级别。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Security Considerations<ept id="p1">](~/docs/framework/xaml-services/xaml-security-considerations.md)</ept> or "XAML Security" section of <bpt id="p2">[</bpt>XAML Overview (WPF)<ept id="p2">](~/docs/framework/wpf/advanced/xaml-overview-wpf.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>XAML 安全注意事项<ept id="p1">](~/docs/framework/xaml-services/xaml-security-considerations.md)</ept>或"XAML 安全性"部分<bpt id="p2">[</bpt>XAML 概述 (WPF)<ept id="p2">](~/docs/framework/wpf/advanced/xaml-overview-wpf.md)</ept>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>For pages of an application, when the <ph id="ph1">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph> is thrown, it is usually in the context of the <ph id="ph2">`InitializeComponent`</ph> call made by your page class, which is the entry point for the WPF application model's usage of the WPF XAML parser at the per-page level.</source>
          <target state="translated">应用程序的页时<ph id="ph1">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph>是引发，通常是在上下文中<ph id="ph2">`InitializeComponent`</ph>进行页面类，这是 WPF XAML 分析器在每个页级别的 WPF 应用程序模型的使用情况的入口点调用。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>Therefore another possible handling strategy is to place <ph id="ph1">`try/catch`</ph> blocks in <ph id="ph2">`InitializeComponent`</ph>.</source>
          <target state="translated">处理策略的另一种可能是将因此<ph id="ph1">`try/catch`</ph>块以<ph id="ph2">`InitializeComponent`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>However, this technique does not integrate well with templates, visual design surfaces and other generated sources that hook up <ph id="ph1">`InitializeComponent`</ph>.</source>
          <target state="translated">但是，此技术未与模板，可视化设计图面很好地集成和其他生成向上源该挂钩<ph id="ph1">`InitializeComponent`</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.XamlParseException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String)">
          <source>The exception message.</source>
          <target state="translated">异常消息。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class, using the specified exception message string.</source>
          <target state="translated">使用指定的异常消息字符串初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Contains all the information that is required to serialize or deserialize the object.</source>
          <target state="translated">包含序列化或反序列化对象所需的全部信息。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The source and destination of a serialized stream.</source>
          <target state="translated">已序列化的流的源和目标。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is used for serialization when marshaling an exception of this type across an application domain or machine boundary.</source>
          <target state="translated">封送此类型的异常处理跨应用程序域或计算机边界时，将进行序列化使用此构造函数。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)">
          <source>The exception message.</source>
          <target state="translated">异常消息。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)">
          <source>The initial exception that occurred.</source>
          <target state="translated">所发生的初始异常。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class, using the specified exception message string and inner exception.</source>
          <target state="translated">使用指定的异常消息字符串和内部异常初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception.</source>
          <target state="translated">由于前一个异常而直接导致引发的异常，应包含对前一个异常的引用。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id="ph2">`null`</ph> if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 属性返回的值与传递到构造函数中的值相同；或者，如果 <ph id="ph2">`null`</ph> 属性没有向构造函数提供内部异常值，则为 <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32)">
          <source>The exception message.</source>
          <target state="translated">异常消息。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32)">
          <source>The line number where the exception occurred.</source>
          <target state="translated">发生异常的行号。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32)">
          <source>The position in the line at which the exception occurred.</source>
          <target state="translated">行中发生异常的位置。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class, using the specified exception message string, and the specified line number and position in the line.</source>
          <target state="translated">使用指定的异常消息字符串、指定的行号以及行中的位置初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>The exception message.</source>
          <target state="translated">异常消息。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>The line number where the exception occurred.</source>
          <target state="translated">发生异常的行号。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>The position in the line at which the exception occurred.</source>
          <target state="translated">行中发生异常的位置。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>The initial exception that occurred.</source>
          <target state="translated">所发生的初始异常。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class, using the specified exception message, inner exception, line number, and position in the line.</source>
          <target state="translated">使用指定的异常消息、内部异常、行号以及行中的位置初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception.</source>
          <target state="translated">由于前一个异常而直接导致引发的异常，应包含对前一个异常的引用。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id="ph2">`null`</ph> if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 属性返回的值与传递到构造函数中的值相同；或者，如果 <ph id="ph2">`null`</ph> 属性没有向构造函数提供内部异常值，则为 <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.XamlParseException.BaseUri">
          <source>Gets base URI information when the exception is thrown.</source>
          <target state="translated">引发异常时获取基 URI 信息。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.BaseUri">
          <source>The parser context base URI.</source>
          <target state="translated">分析器上下文基 URI。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.BaseUri">
          <source>Base URI is potentially available because of parser context when the exception occurred.</source>
          <target state="translated">基本 URI 因或许可以分析器上下文时出现异常。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.BaseUri">
          <source>Knowing the base URI can be useful for debugging cases where a resource resolution error is the underlying cause.</source>
          <target state="translated">了解基 URI 可以是可用于调试的情况下，资源解析错误的根本原因。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The serialization information object to add the serialization data to.</source>
          <target state="translated">要向其添加序列化数据的序列化信息对象。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination for this serialization.</source>
          <target state="translated">此序列化的目标。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Gets the data that is required to serialize the specified object by populating the specified <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object.</source>
          <target state="translated">通过填充指定的 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 对象，获取序列化指定对象所需的数据。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.XamlParseException.GetObjectData%2A&gt;</ph> sets a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> object with all the exception object data targeted for serialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.XamlParseException.GetObjectData%2A&gt;</ph> 设置<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>用针对于序列化的所有异常对象数据的对象。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>During deserialization, the exception is reconstituted from the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> transmitted over the stream.</source>
          <target state="translated">反序列化期间，从通过流传输的 <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> 重建异常。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>for providing serialization services.</source>
          <target state="translated">用于提供序列化服务。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> Security action: <ph id="ph2">&lt;see cref="M:System.Security.PermissionSet.Demand" /&gt;</ph>.</source>
          <target state="translated">关联的枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>安全操作： <ph id="ph2">&lt;see cref="M:System.Security.PermissionSet.Demand" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.XamlParseException.KeyContext">
          <source>Gets or sets the key value of the item in a dictionary where the exception occurred.</source>
          <target state="translated">获取或设置字典中发生异常的项的键值。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.KeyContext">
          <source>The relevant XAML <ph id="ph1">&lt;see langword="x:Key" /&gt;</ph> value.</source>
          <target state="translated">相关的 XAML <ph id="ph1">&lt;see langword="x:Key" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.XamlParseException.LineNumber">
          <source>Gets the line number where the exception occurred.</source>
          <target state="translated">获取发生异常的行号。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.LineNumber">
          <source>The line number.</source>
          <target state="translated">行号。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.XamlParseException.LinePosition">
          <source>Gets the position in the line where the exception occurred.</source>
          <target state="translated">获取行中发生异常的位置。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.LinePosition">
          <source>The line position.</source>
          <target state="translated">行位置。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.XamlParseException.NameContext">
          <source>Gets or sets the XAML name of the object where the exception occurred.</source>
          <target state="translated">获取或设置发生异常的对象的 XAML 名称。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.NameContext">
          <source>The XAML name of the object.</source>
          <target state="translated">对象的 XAML 名称。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.XamlParseException.UidContext">
          <source>Gets or sets the <bpt id="p1">[</bpt>x:Uid Directive<ept id="p1">](~/docs/framework/xaml-services/x-uid-directive.md)</ept> of the object where the exception occurred.</source>
          <target state="translated">获取或设置发生异常的对象的 <bpt id="p1">[</bpt>x:Uid Directive<ept id="p1">](~/docs/framework/xaml-services/x-uid-directive.md)</ept>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.UidContext">
          <source>The value of the <ph id="ph1">&lt;see langword="Uid" /&gt;</ph> string.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Uid" /&gt;</ph> 字符串的值。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>