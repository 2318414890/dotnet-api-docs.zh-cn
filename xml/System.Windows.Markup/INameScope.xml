<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="387741b6254120f3bedc817966a2f93b51df1d15" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="0f9a8-101">针对如何在特定的 XAML 名称范围内访问元素的名称，以及如何强制该 XAML 名称范围内名称的唯一性，定义一个协定。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0f9a8-101">Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f9a8-102">由具有旨在可重用通过模板或延迟隐喻的子元素的类实现此接口。</span><span class="sxs-lookup"><span data-stu-id="0f9a8-102">This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor.</span></span> <span data-ttu-id="0f9a8-103">模板、 工厂和类似的构造必须具有唯一的 XAML 名称范围，独立于主对象图和根 XAML。</span><span class="sxs-lookup"><span data-stu-id="0f9a8-103">Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML.</span></span> <span data-ttu-id="0f9a8-104">下面的原则是，应该也没有名称冲突时创建这些子元素从对象引入到应用程序的对象图，以便 DOM 操作和依赖于的名称标识符的 XAML 引用技术可以依赖于名称在每个 XAML 名称范围中的唯一性。</span><span class="sxs-lookup"><span data-stu-id="0f9a8-104">The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.</span></span>  
  
 <span data-ttu-id="0f9a8-105">在以前版本的.NET Framework 中，此接口存在于 WindowsBase 的特定于 WPF 程序集。</span><span class="sxs-lookup"><span data-stu-id="0f9a8-105">In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="0f9a8-106">在[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，<xref:System.Windows.Markup.INameScope>位于 System.Xaml 程序集中。</span><span class="sxs-lookup"><span data-stu-id="0f9a8-106">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> is in the System.Xaml assembly.</span></span> <span data-ttu-id="0f9a8-107">有关详细信息，请参阅[类型从 WPF 迁移到 System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)。</span><span class="sxs-lookup"><span data-stu-id="0f9a8-107">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="0f9a8-108">WPF 用法说明</span><span class="sxs-lookup"><span data-stu-id="0f9a8-108">WPF Usage Notes</span></span>  
 <span data-ttu-id="0f9a8-109">此接口由 WPF 类实现<xref:System.Windows.NameScope>。</span><span class="sxs-lookup"><span data-stu-id="0f9a8-109">This interface is implemented by the WPF class <xref:System.Windows.NameScope>.</span></span> <span data-ttu-id="0f9a8-110">中的大多数 XAML 名称范围操作[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]操作方式是通过使用<xref:System.Windows.NameScope>实例，但信息有时通信的内部使用<xref:System.Windows.Markup.INameScope>引用。</span><span class="sxs-lookup"><span data-stu-id="0f9a8-110">Most XAML namescope operations in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] operate by using <xref:System.Windows.NameScope> instances, but information is occasionally communicated internally by using <xref:System.Windows.Markup.INameScope> references.</span></span>  
  
 <span data-ttu-id="0f9a8-111">使用工厂或延迟隐喻结合 XAML 表示形式的 WPF 类的示例包括<xref:System.Windows.Style>和<xref:System.Windows.FrameworkTemplate>。</span><span class="sxs-lookup"><span data-stu-id="0f9a8-111">Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <xref:System.Windows.Style> and <xref:System.Windows.FrameworkTemplate>.</span></span> <span data-ttu-id="0f9a8-112">这些实现通常依赖于从提供的接口方法的显式版本<xref:System.Windows.NameScope>类。</span><span class="sxs-lookup"><span data-stu-id="0f9a8-112">These implementations usually rely on the explicit versions of the interface methods available from the <xref:System.Windows.NameScope> class.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="0f9a8-113">发出请求的对象的名称标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f9a8-113">The name identifier for the object being requested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f9a8-114">返回具有提供的标识名称的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f9a8-114">Returns an object that has the provided identifying name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0f9a8-115">对象（如果找到）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f9a8-115">The object, if found.</span>
          </span>
          <span data-ttu-id="0f9a8-116">如果找不到该名称的对象，则返回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f9a8-116">Returns <see langword="null" /> if no object of that name was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f9a8-117">在 XAML 标记中的有效名称字符串必须匹配中所述的要求[XamlName 语法](~/docs/framework/xaml-services/xamlname-grammar.md)。</span><span class="sxs-lookup"><span data-stu-id="0f9a8-117">Valid name strings in XAML markup must match the requirements documented in [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="0f9a8-118">要注册的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f9a8-118">The name to register.</span>
          </span>
        </param>
        <param name="scopedElement">
          <span data-ttu-id="0f9a8-119">提供的 <c>name</c> 所引用的特定元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f9a8-119">The specific element that the provided <c>name</c> refers to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f9a8-120">将提供的名称注册到当前的 XAML 名称范围中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f9a8-120">Registers the provided name into the current XAML namescope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f9a8-121">不允许在 XAML 名称范围中的重复名称。</span><span class="sxs-lookup"><span data-stu-id="0f9a8-121">Duplicate names in a XAML namescope are not permitted.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="0f9a8-122">不允许重复的名称进行注册。</span>
            <span class="sxs-lookup">
              <span data-stu-id="0f9a8-122">Do not permit duplicate names to be registered.</span>
            </span>
            <span data-ttu-id="0f9a8-123">如果输入<paramref name="name" />已分配给的内部集合表示形式的 XAML 名称范围中的现有元素 (即使它是与相同<paramref name="scopedElement" />)，引发异常。</span>
            <span class="sxs-lookup">
              <span data-stu-id="0f9a8-123">If the input <paramref name="name" /> is already assigned to an existing element in the internal collection representation of the XAML namescope (even if it is the same as <paramref name="scopedElement" />), throw an exception.</span>
            </span>
            <span data-ttu-id="0f9a8-124">此外应考虑引发异常，如果提供的名称不符合[XamlName 语法](~/docs/framework/xaml-services/xamlname-grammar.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="0f9a8-124">Also consider throwing an exception if the provided name does not conform to [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="0f9a8-125">要注销的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f9a8-125">The name to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0f9a8-126">从当前的 XAML 名称范围中注销提供的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0f9a8-126">Unregisters the provided name from the current XAML namescope.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="0f9a8-127">如果输入的名称不存在，则引发异常。</span>
            <span class="sxs-lookup">
              <span data-stu-id="0f9a8-127">If the input name does not exist, throw an exception.</span>
            </span>
            <span data-ttu-id="0f9a8-128">你应删除的名称和它引用的集合表示形式的 XAML 名称范围中，从以前注册的元素，以便相同的名称无法重新注册在将来。</span>
            <span class="sxs-lookup">
              <span data-stu-id="0f9a8-128">You should remove the name and the previously registered element it refers to from the collection representation of the XAML namescope, so that the same name could potentially be registered again in the future.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>