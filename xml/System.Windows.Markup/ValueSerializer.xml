<Type Name="ValueSerializer" FullName="System.Windows.Markup.ValueSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7d0bcead4cb9eb4ed8e1e1bf4db32bff7b856e73" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57936545" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ValueSerializer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueSerializer abstract" />
  <TypeSignature Language="F#" Value="type ValueSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2137b-101">定义从对象表示形式进行序列化过程中的转换行为的抽象类。</span><span class="sxs-lookup"><span data-stu-id="2137b-101">Abstract class that defines conversion behavior for serialization from an object representation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2137b-102">一个转换器返回序列化的字符串必须无损的并且转换器必须始终返回特定值的相同字符串。</span><span class="sxs-lookup"><span data-stu-id="2137b-102">The string a converter returns for serialization must be loss-less and the converter must always return the same string for a particular value.</span></span>  <span data-ttu-id="2137b-103">如果类型转换器 (派生自<xref:System.ComponentModel.TypeConverter>) 不满足这些要求在其`ConvertTo`字符串输出的实现、 自定义<xref:System.Windows.Markup.ValueSerializer>必须声明。</span><span class="sxs-lookup"><span data-stu-id="2137b-103">If a type converter (derived from <xref:System.ComponentModel.TypeConverter>) does not meet these requirements in its `ConvertTo` implementations for string output, a custom <xref:System.Windows.Markup.ValueSerializer> must be declared.</span></span> <span data-ttu-id="2137b-104">任一<xref:System.Windows.Markup.ValueSerializer>应满足要求或 null<xref:System.Windows.Markup.ValueSerializer>应与类型相关联。</span><span class="sxs-lookup"><span data-stu-id="2137b-104">Either the <xref:System.Windows.Markup.ValueSerializer> should meet the requirements, or a null <xref:System.Windows.Markup.ValueSerializer> should be associated with the type.</span></span> <span data-ttu-id="2137b-105">一个<xref:System.Windows.Markup.ValueSerializer>是与类型关联通过应用<xref:System.Windows.Markup.ValueSerializerAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="2137b-105">A <xref:System.Windows.Markup.ValueSerializer> is associated with a type by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute.</span></span>  
  
 <span data-ttu-id="2137b-106">Null<xref:System.Windows.Markup.ValueSerializer>指示对象图中的字符串转换转换时应忽略的类型转换器。</span><span class="sxs-lookup"><span data-stu-id="2137b-106">A null <xref:System.Windows.Markup.ValueSerializer> indicates the type converter should be ignored for convert-to-string conversions from the object graph.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2137b-107">实现<xref:System.Windows.Markup.ValueSerializer>应避免引发异常。</span><span class="sxs-lookup"><span data-stu-id="2137b-107">Implementation of <xref:System.Windows.Markup.ValueSerializer> should avoid throwing exceptions.</span></span> <span data-ttu-id="2137b-108">引发的任何异常都会终止序列化。</span><span class="sxs-lookup"><span data-stu-id="2137b-108">Any exceptions thrown could terminate serialization.</span></span>  
  
 <span data-ttu-id="2137b-109"><xref:System.Windows.Markup.IValueSerializerContext> 有关<xref:System.Windows.Markup.ValueSerializer>，其 Api 类似于<xref:System.ComponentModel.ITypeDescriptorContext>为<xref:System.ComponentModel.TypeConverter>。</span><span class="sxs-lookup"><span data-stu-id="2137b-109"><xref:System.Windows.Markup.IValueSerializerContext> for a <xref:System.Windows.Markup.ValueSerializer> and its APIs is analogous to <xref:System.ComponentModel.ITypeDescriptorContext> for a <xref:System.ComponentModel.TypeConverter>.</span></span> <span data-ttu-id="2137b-110">事实上，<xref:System.Windows.Markup.IValueSerializerContext>继承<xref:System.ComponentModel.ITypeDescriptorContext>。</span><span class="sxs-lookup"><span data-stu-id="2137b-110">In fact, <xref:System.Windows.Markup.IValueSerializerContext> inherits <xref:System.ComponentModel.ITypeDescriptorContext>.</span></span> <span data-ttu-id="2137b-111">当<xref:System.Windows.Markup.ValueSerializer>调用派生的类 API 时，调用方 （通常一个序列化程序的过程） 传递可能会提供某些服务的上下文。</span><span class="sxs-lookup"><span data-stu-id="2137b-111">When a <xref:System.Windows.Markup.ValueSerializer> derived class API is called, the caller (typically a serializer process) passes a context that may provide certain services.</span></span> <span data-ttu-id="2137b-112">由于一般指南，<xref:System.Windows.Markup.ValueSerializer>不得引发异常。</span><span class="sxs-lookup"><span data-stu-id="2137b-112">Because of the general guidance that a <xref:System.Windows.Markup.ValueSerializer> must not throw exceptions.</span></span> <span data-ttu-id="2137b-113">未能从上下文中返回特定的服务必须也不引发任何异常。</span><span class="sxs-lookup"><span data-stu-id="2137b-113">Failure to return a particular service from the context must also not throw any exceptions.</span></span>  
  
 <span data-ttu-id="2137b-114">在以前版本的.NET Framework 中，此类存在于 WindowsBase 的特定于 WPF 程序集。</span><span class="sxs-lookup"><span data-stu-id="2137b-114">In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="2137b-115">在中[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，<xref:System.Windows.Markup.ValueSerializer>位于 System.Xaml 程序集中。</span><span class="sxs-lookup"><span data-stu-id="2137b-115">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ValueSerializer> is in the System.Xaml assembly.</span></span> <span data-ttu-id="2137b-116">有关详细信息，请参阅 [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)。</span><span class="sxs-lookup"><span data-stu-id="2137b-116">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlXmlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2137b-117">初始化 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="2137b-117">Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializer" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2137b-118">此构造函数的正文为空;<xref:System.Windows.Markup.ValueSerializer>类不包含任何需要初始化的值。</span><span class="sxs-lookup"><span data-stu-id="2137b-118">The body of this constructor is empty; the <xref:System.Windows.Markup.ValueSerializer> class does not contain any values that require initialization.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFromString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertFromString (value As String, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2137b-119">为转换而要计算的字符串。</span><span class="sxs-lookup"><span data-stu-id="2137b-119">The string to evaluate for conversion.</span></span></param>
        <param name="context"><span data-ttu-id="2137b-120">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="2137b-120">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="2137b-121">在派生类中重写时，确定指定的 <see cref="T:System.String" /> 能否转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</span><span class="sxs-lookup"><span data-stu-id="2137b-121">When overridden in a derived class, determines whether the specified <see cref="T:System.String" /> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</span></span></summary>
        <returns><span data-ttu-id="2137b-122">如果该值可以转换，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-122"><see langword="true" /> if the value can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2137b-123">此基实现总是返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="2137b-123">The base implementation always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertToString (value As Object, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2137b-124">要进行计算以供转换的对象。</span><span class="sxs-lookup"><span data-stu-id="2137b-124">The object to evaluate for conversion.</span></span></param>
        <param name="context"><span data-ttu-id="2137b-125">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="2137b-125">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="2137b-126">在派生类中重写时，确定指定对象是否可以转换为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-126">When overridden in a derived class, determines whether the specified object can be converted into a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="2137b-127">如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false." />。</span><span class="sxs-lookup"><span data-stu-id="2137b-127"><see langword="true" /> if the <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false." /></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2137b-128">此基实现总是返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="2137b-128">The base implementation always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromString">
      <MemberSignature Language="C#" Value="public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertFromString (value As String, context As IValueSerializerContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj&#xA;override this.ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj" Usage="valueSerializer.ConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2137b-129">要转换的字符串。</span><span class="sxs-lookup"><span data-stu-id="2137b-129">The string to convert.</span></span></param>
        <param name="context"><span data-ttu-id="2137b-130">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="2137b-130">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="2137b-131">在派生类中重写时，将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</span><span class="sxs-lookup"><span data-stu-id="2137b-131">When overridden in a derived class, converts a <see cref="T:System.String" /> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</span></span></summary>
        <returns><span data-ttu-id="2137b-132"><see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现基于提供的 <paramref name="value" /> 而支持的类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="2137b-132">A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports based on the supplied <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2137b-133">基实现始终引发异常。</span><span class="sxs-lookup"><span data-stu-id="2137b-133">The base implementation always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2137b-134">无法转换 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-134"><paramref name="value" /> cannot be converted.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="2137b-135">避免实现中引发异常。</span><span class="sxs-lookup"><span data-stu-id="2137b-135">Avoid throwing exceptions from implementations.</span></span> <span data-ttu-id="2137b-136">请参阅 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-136">See <see cref="T:System.Windows.Markup.ValueSerializer" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertToString (value As Object, context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="valueSerializer.ConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2137b-137">要转换为字符串的对象。</span><span class="sxs-lookup"><span data-stu-id="2137b-137">The object to convert into a string.</span></span></param>
        <param name="context"><span data-ttu-id="2137b-138">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="2137b-138">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="2137b-139">在派生类中重写时，将指定对象转换为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-139">When overridden in a derived class, converts the specified object to a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="2137b-140">指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="2137b-140">A string representation of the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2137b-141">基实现始终引发异常。</span><span class="sxs-lookup"><span data-stu-id="2137b-141">The base implementation always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2137b-142">无法转换 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-142"><paramref name="value" /> cannot be converted.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="2137b-143">避免实现中引发异常。</span><span class="sxs-lookup"><span data-stu-id="2137b-143">Avoid throwing exceptions from implementations.</span></span> <span data-ttu-id="2137b-144">请参阅 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-144">See <see cref="T:System.Windows.Markup.ValueSerializer" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetConvertFromException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertFromException (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertFromException(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertFromException (value As Object) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertFromException(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.GetConvertFromException : obj -&gt; Exception" Usage="valueSerializer.GetConvertFromException value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2137b-145">未能转换的对象。</span><span class="sxs-lookup"><span data-stu-id="2137b-145">The object that could not be converted.</span></span></param>
        <summary><span data-ttu-id="2137b-146">返回无法执行转换时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="2137b-146">Returns an exception to throw when a conversion cannot be performed.</span></span></summary>
        <returns><span data-ttu-id="2137b-147">用于在无法执行 <see langword="ConvertFrom" /> 转换时引发异常的 <see cref="T:System.Exception" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2137b-147">An <see cref="T:System.Exception" /> object for the exception to throw when a <see langword="ConvertFrom" /> conversion cannot be performed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2137b-148">实际`throw`关键字不调用此方法，因此典型用法是`throw GetConvertFromException`（与提供的参数）。</span><span class="sxs-lookup"><span data-stu-id="2137b-148">The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertFromException` (with parameters provided).</span></span>  
  
 <span data-ttu-id="2137b-149">返回特定异常<xref:System.InvalidOperationException>，使用`value`在异常消息中传递。</span><span class="sxs-lookup"><span data-stu-id="2137b-149">The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message.</span></span> <span data-ttu-id="2137b-150">使用情况的模式与异常中的实用程序相同<xref:System.ComponentModel.TypeConverter>。</span><span class="sxs-lookup"><span data-stu-id="2137b-150">The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConvertToException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertToException (object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertToException(object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertToException (value As Object, destinationType As Type) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertToException(System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="member this.GetConvertToException : obj * Type -&gt; Exception" Usage="valueSerializer.GetConvertToException (value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="destinationType" Type="System.Type" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2137b-151">未能转换的对象。</span><span class="sxs-lookup"><span data-stu-id="2137b-151">The object that could not be converted.</span></span></param>
        <param name="destinationType"><span data-ttu-id="2137b-152">一个类型，表示转换时尝试转换成的类型。</span><span class="sxs-lookup"><span data-stu-id="2137b-152">A type that represents the type the conversion was trying to convert to.</span></span></param>
        <summary><span data-ttu-id="2137b-153">返回无法执行转换时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="2137b-153">Returns an exception to throw when a conversion cannot be performed.</span></span></summary>
        <returns><span data-ttu-id="2137b-154">用于在无法执行 <see langword="ConvertTo" /> 转换时引发异常的 <see cref="T:System.Exception" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2137b-154">An <see cref="T:System.Exception" /> object for the exception to throw when a <see langword="ConvertTo" /> conversion cannot be performed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2137b-155">实际`throw`关键字不调用此方法，因此典型用法是`throw GetConvertToException`(使用`value`提供的参数)。</span><span class="sxs-lookup"><span data-stu-id="2137b-155">The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertToException` (with `value` parameter provided).</span></span>  
  
 <span data-ttu-id="2137b-156">返回特定异常<xref:System.InvalidOperationException>，使用`value`在异常消息中传递。</span><span class="sxs-lookup"><span data-stu-id="2137b-156">The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message.</span></span> <span data-ttu-id="2137b-157">使用情况的模式与异常中的实用程序相同<xref:System.ComponentModel.TypeConverter>。</span><span class="sxs-lookup"><span data-stu-id="2137b-157">The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSerializerFor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2137b-158">获取对象的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-158">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> for an object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor descriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="descriptor"><span data-ttu-id="2137b-159">要序列化的属性的 CLR 属性描述符。</span><span class="sxs-lookup"><span data-stu-id="2137b-159">The CLR property descriptor for the property to be serialized.</span></span></param>
        <summary><span data-ttu-id="2137b-160">通过传递属性的 CLR 属性描述符，获取为该属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-160">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for a property, by passing a CLR property descriptor for the property.</span></span></summary>
        <returns><span data-ttu-id="2137b-161">与指定的属性关联的序列化程序。</span><span class="sxs-lookup"><span data-stu-id="2137b-161">The serializer associated with the specified property.</span></span> <span data-ttu-id="2137b-162">可以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-162">May return <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2137b-163">一个<xref:System.Windows.Markup.ValueSerializer>属性，或用作属性值的类型，指示通过应用<xref:System.Windows.Markup.ValueSerializerAttribute>属性或类型声明上的属性。</span><span class="sxs-lookup"><span data-stu-id="2137b-163">A <xref:System.Windows.Markup.ValueSerializer> for a property, or for a type that is used as the value for a property, is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the property or type declaration.</span></span> <span data-ttu-id="2137b-164"><xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>方法是读取的 CLR 类型系统信息，并返回一个新的实用工具方法<xref:System.Windows.Markup.ValueSerializer>类根据在该属性，如果找到属性，或然后，如果该属性的类型上找到。</span><span class="sxs-lookup"><span data-stu-id="2137b-164">The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the property, or then if found on the property's type.</span></span> <span data-ttu-id="2137b-165">`null` 可能会返回任何此类序列化程序是否存在。</span><span class="sxs-lookup"><span data-stu-id="2137b-165">`null` might be returned if no such serializer exists.</span></span> <span data-ttu-id="2137b-166">`null` 可能还会返回如果类型或属性有意属性化使用 null 值<xref:System.Windows.Markup.ValueSerializerAttribute>。</span><span class="sxs-lookup"><span data-stu-id="2137b-166">`null` might also be returned if a type or property is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span>  
  
 <span data-ttu-id="2137b-167">另一种模式的<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>支持返回内部`TypeConverterValueSerializer`类，该类是<xref:System.Windows.Markup.ValueSerializer>包装的实现<xref:System.ComponentModel.TypeConverter>，并将转换`Convert`方法添加到`Convert*String`方法 (例如<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>使用的输入调用<xref:System.String>类型，并且将转换为<xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="2137b-167">Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span></span> <span data-ttu-id="2137b-168">这是仅在满足以下所有的情况下：</span><span class="sxs-lookup"><span data-stu-id="2137b-168">This is done only in cases where all of the following are true:</span></span>  
  
-   <span data-ttu-id="2137b-169">一个<xref:System.ComponentModel.TypeConverterAttribute>相关的属性或相关属性的类型上找到。</span><span class="sxs-lookup"><span data-stu-id="2137b-169">A <xref:System.ComponentModel.TypeConverterAttribute> is found on the relevant property, or the relevant property's type.</span></span>  
  
-   <span data-ttu-id="2137b-170">所指示<xref:System.ComponentModel.TypeConverter>可以成功构造。</span><span class="sxs-lookup"><span data-stu-id="2137b-170">The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.</span></span>  
  
-   <span data-ttu-id="2137b-171"><xref:System.ComponentModel.TypeConverter>将返回`true`有关<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>，称为引用<xref:System.String>类型。</span><span class="sxs-lookup"><span data-stu-id="2137b-171">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="2137b-172"><xref:System.ComponentModel.TypeConverter>将返回`true`有关<xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>，称为引用<xref:System.String>类型。</span><span class="sxs-lookup"><span data-stu-id="2137b-172">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="2137b-173"><xref:System.ComponentModel.TypeConverter>将返回`true`有关<xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>，称为引用<xref:System.String>类型。</span><span class="sxs-lookup"><span data-stu-id="2137b-173">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2137b-174">以下是特殊情况：<xref:System.DateTime>类型返回<xref:System.Windows.Markup.DateTimeValueSerializer>;<xref:System.String>类型返回一个内部而功能完善序列化程序 (`StringValueSerializer`)。</span><span class="sxs-lookup"><span data-stu-id="2137b-174">The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2137b-175"><paramref name="descriptor" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-175"><paramref name="descriptor" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2137b-176">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="2137b-176">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</span></span></param>
        <summary><span data-ttu-id="2137b-177">获取为指定的类型声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-177">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type.</span></span></summary>
        <returns><span data-ttu-id="2137b-178">与指定的类型关联的序列化程序。</span><span class="sxs-lookup"><span data-stu-id="2137b-178">The serializer associated with the specified type.</span></span> <span data-ttu-id="2137b-179">可以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-179">May return <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2137b-180">一个<xref:System.Windows.Markup.ValueSerializer>的类型由应用指示<xref:System.Windows.Markup.ValueSerializerAttribute>类型声明上的属性。</span><span class="sxs-lookup"><span data-stu-id="2137b-180">A <xref:System.Windows.Markup.ValueSerializer> for a type is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the type declaration.</span></span> <span data-ttu-id="2137b-181"><xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>方法是读取的 CLR 类型系统信息，并返回一个新的实用工具方法<xref:System.Windows.Markup.ValueSerializer>类，根据在该属性，如果找到指定`type`。</span><span class="sxs-lookup"><span data-stu-id="2137b-181">The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the specified `type`.</span></span> <span data-ttu-id="2137b-182">`null` 可能会返回任何此类序列化程序是否存在。</span><span class="sxs-lookup"><span data-stu-id="2137b-182">`null` might be returned if no such serializer exists.</span></span> <span data-ttu-id="2137b-183">`null` 也可能有意特性类型化 null 值会返回<xref:System.Windows.Markup.ValueSerializerAttribute>。</span><span class="sxs-lookup"><span data-stu-id="2137b-183">`null` might also be returned if a type is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span>  
  
 <span data-ttu-id="2137b-184">另一种模式的<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>支持返回内部`TypeConverterValueSerializer`类，该类是<xref:System.Windows.Markup.ValueSerializer>包装的实现<xref:System.ComponentModel.TypeConverter>，并将转换`Convert`方法添加到`Convert*String`方法 (例如<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>使用的输入调用<xref:System.String>类型，并且将转换为<xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="2137b-184">Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span></span> <span data-ttu-id="2137b-185">这是仅在满足以下所有的情况下：</span><span class="sxs-lookup"><span data-stu-id="2137b-185">This is done only in cases where all of the following are true:</span></span>  
  
-   <span data-ttu-id="2137b-186">一个<xref:System.ComponentModel.TypeConverterAttribute>上找到`type`。</span><span class="sxs-lookup"><span data-stu-id="2137b-186">A <xref:System.ComponentModel.TypeConverterAttribute> is found on `type`.</span></span>  
  
-   <span data-ttu-id="2137b-187">所指示<xref:System.ComponentModel.TypeConverter>可以成功构造。</span><span class="sxs-lookup"><span data-stu-id="2137b-187">The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.</span></span>  
  
-   <span data-ttu-id="2137b-188"><xref:System.ComponentModel.TypeConverter>将返回`true`有关<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>，称为引用<xref:System.String>类型。</span><span class="sxs-lookup"><span data-stu-id="2137b-188">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="2137b-189"><xref:System.ComponentModel.TypeConverter>将返回`true`有关<xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>，称为引用<xref:System.String>类型。</span><span class="sxs-lookup"><span data-stu-id="2137b-189">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="2137b-190"><xref:System.ComponentModel.TypeConverter>将返回`true`有关<xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>，称为引用<xref:System.String>类型。</span><span class="sxs-lookup"><span data-stu-id="2137b-190">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2137b-191">以下是特殊情况：<xref:System.DateTime>类型返回<xref:System.Windows.Markup.DateTimeValueSerializer>;<xref:System.String>类型返回一个内部而功能完善序列化程序 (`StringValueSerializer`)。</span><span class="sxs-lookup"><span data-stu-id="2137b-191">The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2137b-192"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-192"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (descriptor, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="descriptor"><span data-ttu-id="2137b-193">要序列化的属性的描述符。</span><span class="sxs-lookup"><span data-stu-id="2137b-193">Descriptor for the property to be serialized.</span></span></param>
        <param name="context"><span data-ttu-id="2137b-194">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="2137b-194">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="2137b-195">使用指定的上下文获取为指定的属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-195">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified property, using the specified context.</span></span></summary>
        <returns><span data-ttu-id="2137b-196">与指定的属性关联的序列化程序。</span><span class="sxs-lookup"><span data-stu-id="2137b-196">The serializer associated with the specified property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2137b-197">而不是仅仅依赖属性报告在 CLR 类型系统中，此重载使用`context`作为一种服务，并调用服务的实现<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="2137b-197">Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2137b-198"><xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>实现将通常也依赖于`descriptor`，但可能会实现某些上下文中的特殊行为。</span><span class="sxs-lookup"><span data-stu-id="2137b-198">The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementation would typically also rely on the `descriptor`, but might implement special behavior for certain contexts.</span></span>  
  
 <span data-ttu-id="2137b-199">当调用方具有一个可用时，应调用此方法<xref:System.Windows.Markup.IValueSerializerContext>从服务。</span><span class="sxs-lookup"><span data-stu-id="2137b-199">This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service.</span></span>  <span data-ttu-id="2137b-200">这将确保正确<xref:System.Windows.Markup.ValueSerializer>返回特定的上下文。</span><span class="sxs-lookup"><span data-stu-id="2137b-200">This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.</span></span>  
  
 <span data-ttu-id="2137b-201">如果上下文返回`null`从其<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>为您指定`descriptor`，或如果您指定的上下文是`null`，然后行为等同于调用<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29>重载。</span><span class="sxs-lookup"><span data-stu-id="2137b-201">If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> for your specified `descriptor`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2137b-202"><paramref name="descriptor" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-202"><paramref name="descriptor" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2137b-203">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="2137b-203">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</span></span></param>
        <param name="context"><span data-ttu-id="2137b-204">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="2137b-204">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="2137b-205">使用指定的上下文获取为指定的类型声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-205">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type, using the specified context.</span></span></summary>
        <returns><span data-ttu-id="2137b-206">与指定的类型关联的序列化程序。</span><span class="sxs-lookup"><span data-stu-id="2137b-206">The serializer associated with the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2137b-207">而不是仅仅依赖属性报告在 CLR 类型系统中，此重载使用`context`作为一种服务，并调用服务的实现<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="2137b-207">Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2137b-208"><xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>实现将通常也依赖于`type`，但可能会实现某些上下文中的特殊行为。</span><span class="sxs-lookup"><span data-stu-id="2137b-208">The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementation would typically also rely on the `type`, but might implement special behavior for certain contexts.</span></span>  
  
 <span data-ttu-id="2137b-209">当调用方具有一个可用时，应调用此方法<xref:System.Windows.Markup.IValueSerializerContext>从服务。</span><span class="sxs-lookup"><span data-stu-id="2137b-209">This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service.</span></span> <span data-ttu-id="2137b-210">这将确保正确<xref:System.Windows.Markup.ValueSerializer>返回特定的上下文。</span><span class="sxs-lookup"><span data-stu-id="2137b-210">This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.</span></span>  
  
 <span data-ttu-id="2137b-211">如果上下文返回`null`从其<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>为您指定`type`，或如果您指定的上下文是`null`，然后行为等同于调用<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29>重载。</span><span class="sxs-lookup"><span data-stu-id="2137b-211">If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> for your specified `type`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2137b-212"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2137b-212"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TypeReferences (value As Object, context As IValueSerializerContext) As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;&#xA;override this.TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;" Usage="valueSerializer.TypeReferences (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2137b-213">要序列化的值。</span><span class="sxs-lookup"><span data-stu-id="2137b-213">The value being serialized.</span></span></param>
        <param name="context"><span data-ttu-id="2137b-214">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="2137b-214">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="2137b-215">获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 引用的类型的枚举。</span><span class="sxs-lookup"><span data-stu-id="2137b-215">Gets an enumeration of the types referenced by the <see cref="T:System.Windows.Markup.ValueSerializer" />.</span></span></summary>
        <returns><span data-ttu-id="2137b-216">此序列化程序所转换的类型。</span><span class="sxs-lookup"><span data-stu-id="2137b-216">The types converted by this serializer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2137b-217">任何类型<xref:System.Windows.Markup.ValueSerializer>转换应包括在返回的枚举。</span><span class="sxs-lookup"><span data-stu-id="2137b-217">Any types a <xref:System.Windows.Markup.ValueSerializer> converts should be included in the returned enumeration.</span></span>  <span data-ttu-id="2137b-218">这样，以确保反序列化程序有足够的类型的信息，此序列化程序将转换的序列化程序。</span><span class="sxs-lookup"><span data-stu-id="2137b-218">This allows a serializer to ensure a de-serializer has enough information about the types this serializer converts.</span></span>  
  
 <span data-ttu-id="2137b-219">重写此方法是一个高级的方案。</span><span class="sxs-lookup"><span data-stu-id="2137b-219">Overriding this method is an advanced scenario.</span></span> <span data-ttu-id="2137b-220">重写应仅有必要如果要实现一个系统 CLR 类型系统所有者类型属性关系可用于 XAML 架构上下文不报告足够的信息。</span><span class="sxs-lookup"><span data-stu-id="2137b-220">Overriding should only be necessary if you are implementing a system where CLR type system ownertype-property relationships available to a XAML schema context do not report enough information.</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="2137b-221">WPF 用法说明</span><span class="sxs-lookup"><span data-stu-id="2137b-221">WPF Usage Notes</span></span>  
 <span data-ttu-id="2137b-222">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]属性系统实现的内部值序列化程序，以替代<xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A>因为依赖属性都有一个概念，就可以具有属性添加所有者。</span><span class="sxs-lookup"><span data-stu-id="2137b-222">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system implements an internal value serializer that overrides <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> because a dependency property has a concept that it can have added owners.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="2137b-223">表达式也具有特殊的内部处理。</span><span class="sxs-lookup"><span data-stu-id="2137b-223">expressions also have special internal handling.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>