<Type Name="ValueSerializer" FullName="System.Windows.Markup.ValueSerializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="258ed704368bcfb2f89872500ab73ca32065cf4b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39915943" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ValueSerializer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueSerializer abstract" />
  <TypeSignature Language="F#" Value="type ValueSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为从对象表示形式进行序列化定义转换行为的抽象类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个转换器返回序列化的字符串必须无损的并且转换器必须始终返回特定值的相同字符串。  如果类型转换器 (派生自<xref:System.ComponentModel.TypeConverter>) 不满足这些要求在其`ConvertTo`字符串输出的实现、 自定义<xref:System.Windows.Markup.ValueSerializer>必须声明。 任一<xref:System.Windows.Markup.ValueSerializer>应满足要求或 null<xref:System.Windows.Markup.ValueSerializer>应与类型相关联。 一个<xref:System.Windows.Markup.ValueSerializer>是与类型关联通过应用<xref:System.Windows.Markup.ValueSerializerAttribute>属性。  
  
 Null<xref:System.Windows.Markup.ValueSerializer>指示对象图中的字符串转换转换时应忽略的类型转换器。  
  
> [!IMPORTANT]
>  实现<xref:System.Windows.Markup.ValueSerializer>应避免引发异常。 引发的任何异常都会终止序列化。  
  
 <xref:System.Windows.Markup.IValueSerializerContext> 有关<xref:System.Windows.Markup.ValueSerializer>，其 Api 类似于<xref:System.ComponentModel.ITypeDescriptorContext>为<xref:System.ComponentModel.TypeConverter>。 事实上，<xref:System.Windows.Markup.IValueSerializerContext>继承<xref:System.ComponentModel.ITypeDescriptorContext>。 当<xref:System.Windows.Markup.ValueSerializer>调用派生的类 API 时，调用方 （通常一个序列化程序的过程） 传递可能会提供某些服务的上下文。 由于一般指南，<xref:System.Windows.Markup.ValueSerializer>不得引发异常。 未能从上下文中返回特定的服务必须也不引发任何异常。  
  
 在以前版本的.NET Framework 中，此类存在于 WindowsBase 的特定于 WPF 程序集。 在中[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，<xref:System.Windows.Markup.ValueSerializer>位于 System.Xaml 程序集中。 有关详细信息，请参阅[类型从 WPF 迁移到 System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlXmlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数的正文为空;<xref:System.Windows.Markup.ValueSerializer>类不包含任何需要初始化的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFromString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertFromString (value As String, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">要计算以进行转换的字符串。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>在派生类中重写时，确定指定的 <see cref="T:System.String" /> 能否转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</summary>
        <returns>如果该值可以转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此基实现总是返回 `false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertToString (value As Object, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">要进行计算以供转换的对象。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>在派生类中重写时，确定指定对象是否可以转换为 <see cref="T:System.String" />。</summary>
        <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false." />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此基实现总是返回 `false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromString">
      <MemberSignature Language="C#" Value="public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertFromString (value As String, context As IValueSerializerContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj&#xA;override this.ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj" Usage="valueSerializer.ConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">要转换的字符串。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>在派生类中重写时，将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</summary>
        <returns>
          <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现基于提供的 <paramref name="value" /> 而支持的类型的新实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基实现始终引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">无法转换 <paramref name="value" />。</exception>
        <block subset="none" type="overrides">
          <para>避免实现中引发异常。请参阅<see cref="T:System.Windows.Markup.ValueSerializer" />。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertToString (value As Object, context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="valueSerializer.ConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">要转换为字符串的对象。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>在派生类中重写时，将指定对象转换为 <see cref="T:System.String" />。</summary>
        <returns>指定对象的字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基实现始终引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">无法转换 <paramref name="value" />。</exception>
        <block subset="none" type="overrides">
          <para>避免实现中引发异常。请参阅<see cref="T:System.Windows.Markup.ValueSerializer" />。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetConvertFromException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertFromException (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertFromException(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertFromException (value As Object) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertFromException(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.GetConvertFromException : obj -&gt; Exception" Usage="valueSerializer.GetConvertFromException value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">无法转换的对象。</param>
        <summary>返回当转换无法执行时所引发的异常。</summary>
        <returns>用于在无法执行 <see langword="ConvertFrom" /> 转换时引发异常的 <see cref="T:System.Exception" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实际`throw`关键字不调用此方法，因此典型用法是`throw GetConvertFromException`（与提供的参数）。  
  
 返回特定异常<xref:System.InvalidOperationException>，使用`value`在异常消息中传递。 使用情况的模式与异常中的实用程序相同<xref:System.ComponentModel.TypeConverter>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConvertToException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertToException (object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertToException(object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertToException (value As Object, destinationType As Type) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertToException(System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="member this.GetConvertToException : obj * Type -&gt; Exception" Usage="valueSerializer.GetConvertToException (value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">无法转换的对象。</param>
        <param name="destinationType">一个类型，表示转换尝试转换为的类型。</param>
        <summary>返回当转换无法执行时所引发的异常。</summary>
        <returns>用于在无法执行 <see langword="ConvertTo" /> 转换时引发异常的 <see cref="T:System.Exception" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实际`throw`关键字不调用此方法，因此典型用法是`throw GetConvertToException`(使用`value`提供的参数)。  
  
 返回特定异常<xref:System.InvalidOperationException>，使用`value`在异常消息中传递。 使用情况的模式与异常中的实用程序相同<xref:System.ComponentModel.TypeConverter>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSerializerFor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取对象的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor descriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="descriptor">要进行序列化的属性的 CLR 属性描述符。</param>
        <summary>通过传递属性的 CLR 属性描述符，获取为该属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
        <returns>与指定属性相关联的序列化程序。 可以返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:System.Windows.Markup.ValueSerializer>属性，或用作属性值的类型，指示通过应用<xref:System.Windows.Markup.ValueSerializerAttribute>属性或类型声明上的属性。 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>方法是读取的 CLR 类型系统信息，并返回一个新的实用工具方法<xref:System.Windows.Markup.ValueSerializer>类根据在该属性，如果找到属性，或然后，如果该属性的类型上找到。 `null` 可能会返回任何此类序列化程序是否存在。 `null` 可能还会返回如果类型或属性有意属性化使用 null 值<xref:System.Windows.Markup.ValueSerializerAttribute>。  
  
 另一种模式的<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>支持返回内部`TypeConverterValueSerializer`类，该类是<xref:System.Windows.Markup.ValueSerializer>包装的实现<xref:System.ComponentModel.TypeConverter>，并将转换`Convert`方法添加到`Convert*String`方法 (例如<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>使用的输入调用<xref:System.String>类型，并且将转换为<xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>。 这是仅在满足以下所有的情况下：  
  
-   一个<xref:System.ComponentModel.TypeConverterAttribute>相关的属性或相关属性的类型上找到。  
  
-   所指示<xref:System.ComponentModel.TypeConverter>可以成功构造。  
  
-   <xref:System.ComponentModel.TypeConverter>将返回`true`有关<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>，称为引用<xref:System.String>类型。  
  
-   <xref:System.ComponentModel.TypeConverter>将返回`true`有关<xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>，称为引用<xref:System.String>类型。  
  
-   <xref:System.ComponentModel.TypeConverter>将返回`true`有关<xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>，称为引用<xref:System.String>类型。  
  
> [!NOTE]
>  以下是特殊情况：<xref:System.DateTime>类型返回<xref:System.Windows.Markup.DateTimeValueSerializer>;<xref:System.String>类型返回一个内部而功能完善序列化程序 (`StringValueSerializer`)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="descriptor" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</param>
        <summary>获取为指定的类型声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
        <returns>与指定类型相关联的序列化程序。 可以返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:System.Windows.Markup.ValueSerializer>的类型由应用指示<xref:System.Windows.Markup.ValueSerializerAttribute>类型声明上的属性。 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>方法是读取的 CLR 类型系统信息，并返回一个新的实用工具方法<xref:System.Windows.Markup.ValueSerializer>类，根据在该属性，如果找到指定`type`。 `null` 可能会返回任何此类序列化程序是否存在。 `null` 也可能有意特性类型化 null 值会返回<xref:System.Windows.Markup.ValueSerializerAttribute>。  
  
 另一种模式的<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>支持返回内部`TypeConverterValueSerializer`类，该类是<xref:System.Windows.Markup.ValueSerializer>包装的实现<xref:System.ComponentModel.TypeConverter>，并将转换`Convert`方法添加到`Convert*String`方法 (例如<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>使用的输入调用<xref:System.String>类型，并且将转换为<xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>。 这是仅在满足以下所有的情况下：  
  
-   一个<xref:System.ComponentModel.TypeConverterAttribute>上找到`type`。  
  
-   所指示<xref:System.ComponentModel.TypeConverter>可以成功构造。  
  
-   <xref:System.ComponentModel.TypeConverter>将返回`true`有关<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>，称为引用<xref:System.String>类型。  
  
-   <xref:System.ComponentModel.TypeConverter>将返回`true`有关<xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>，称为引用<xref:System.String>类型。  
  
-   <xref:System.ComponentModel.TypeConverter>将返回`true`有关<xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>，称为引用<xref:System.String>类型。  
  
> [!NOTE]
>  以下是特殊情况：<xref:System.DateTime>类型返回<xref:System.Windows.Markup.DateTimeValueSerializer>;<xref:System.String>类型返回一个内部而功能完善序列化程序 (`StringValueSerializer`)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (descriptor, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="descriptor">要进行序列化的属性的描述符。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>使用指定的上下文获取为指定的属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
        <returns>与指定属性相关联的序列化程序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 而不是仅仅依赖属性报告在 CLR 类型系统中，此重载使用`context`作为一种服务，并调用服务的实现<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>。 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>实现将通常也依赖于`descriptor`，但可能会实现某些上下文中的特殊行为。  
  
 当调用方具有一个可用时，应调用此方法<xref:System.Windows.Markup.IValueSerializerContext>从服务。  这将确保正确<xref:System.Windows.Markup.ValueSerializer>返回特定的上下文。  
  
 如果上下文返回`null`从其<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>为您指定`descriptor`，或如果您指定的上下文是`null`，然后行为等同于调用<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29>重载。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="descriptor" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="type">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>使用指定的上下文获取为指定的类型声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
        <returns>与指定类型相关联的序列化程序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 而不是仅仅依赖属性报告在 CLR 类型系统中，此重载使用`context`作为一种服务，并调用服务的实现<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>。 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>实现将通常也依赖于`type`，但可能会实现某些上下文中的特殊行为。  
  
 当调用方具有一个可用时，应调用此方法<xref:System.Windows.Markup.IValueSerializerContext>从服务。 这将确保正确<xref:System.Windows.Markup.ValueSerializer>返回特定的上下文。  
  
 如果上下文返回`null`从其<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>为您指定`type`，或如果您指定的上下文是`null`，然后行为等同于调用<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29>重载。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TypeReferences (value As Object, context As IValueSerializerContext) As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;&#xA;override this.TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;" Usage="valueSerializer.TypeReferences (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">要序列化的值。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 引用的类型的枚举。</summary>
        <returns>此序列化程序所转换的类型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 任何类型<xref:System.Windows.Markup.ValueSerializer>转换应包括在返回的枚举。  这样，以确保反序列化程序有足够的类型的信息，此序列化程序将转换的序列化程序。  
  
 重写此方法是一个高级的方案。 重写应仅有必要如果要实现一个系统 CLR 类型系统所有者类型属性关系可用于 XAML 架构上下文不报告足够的信息。  
  
## <a name="wpf-usage-notes"></a>WPF 用法说明  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]属性系统实现的内部值序列化程序，以替代<xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A>因为依赖属性都有一个概念，就可以具有属性添加所有者。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 表达式也具有特殊的内部处理。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>