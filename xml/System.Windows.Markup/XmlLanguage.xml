<Type Name="XmlLanguage" FullName="System.Windows.Markup.XmlLanguage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="949b5d2e6f4e8bbe51d550b6df6cca7d0c9978c4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30658641" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XmlLanguage" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlLanguage" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.XmlLanguageConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示供 XMAL 标记中使用的语言标记。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 语言标记可能或可能没有注册<xref:System.Globalization.CultureInfo>XAML 在其中被解释为系统上存在。  
  
 此类可用于处理值表示使用`xml:lang`在 XML 中。  
  
 在两个字符窗体或窗体连字符的语言区域设置中，可以指定语言标记。 请参阅[RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454)。  
  
 请注意，XML 规范允许的空字符串`xml:lang`，不过，不允许使用 RFC 3066; 因此，<xref:System.Windows.Markup.XmlLanguage>键入允许的值""（空属性字符串）。 默认构造<xref:System.Windows.Markup.XmlLanguage>行为就像使用构造""（空字符串）。  
  
<a name="xamlAttributeUsage_XmlLanguage"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object property="prefix"/>  
- or -  
<object property="prefix-subcode"/>  
```  
  
<a name="xamlValues_XmlLanguage"></a>   
## <a name="xaml-values"></a>XAML 值  
 *prefix*  
 语言前缀，使用的 ISO 639-1 语言前缀值。 例如"en"或者"此"。 大写的值接受并转换为小写形式。 这也可能是空的属性，""。  
  
 *subcode*  
 如果提供，前面必须是一个连字符。 然后，由 RFC 3066 定义子代码。 最常见的用法，这是最有可能正确映射到一个<xref:System.Globalization.CultureInfo>，是国家或地区代码，如"-我们"或"-hk"。 大写的值接受并转换为小写形式。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XmlLanguage Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XmlLanguage ^ Empty { System::Windows::Markup::XmlLanguage ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个静态 <see cref="T:System.Windows.Markup.XmlLanguage" /> 实例，该实例相当于 <see cref="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" /> 在语言标记为空的特性字符串的情况下创建的实例。</summary>
        <value>
          <see cref="T:System.Windows.Markup.XmlLanguage" /> 的空语言标记版本，在比较操作中使用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此值是有效<xref:System.Windows.Markup.XmlLanguage>对应于<xref:System.String.Empty?displayProperty=nameWithType>、 其<xref:System.Windows.Markup.XmlLanguage.GetEquivalentCulture%2A>结果是<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEquivalentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetEquivalentCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetEquivalentCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetEquivalentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEquivalentCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetEquivalentCulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当且仅当为该 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="T:System.Windows.Markup.XmlLanguage" /> 值注册了此类 <see cref="T:System.Globalization.CultureInfo" /> 后，才会为此 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 返回合适的等效 <see cref="T:System.Windows.Markup.XmlLanguage" /></summary>
        <returns>一个 <see cref="T:System.Globalization.CultureInfo" />，可用于将该类型作为参数的本地化-全球化 API 调用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有等效项<xref:System.Globalization.CultureInfo>可以是生成，此方法将引发异常。 如果你不希望处理的异常，调用<xref:System.Windows.Markup.XmlLanguage.GetSpecificCulture%2A>相反。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">根据对 <see cref="T:System.Globalization.CultureInfo" /> 的调用确定，提供的 <see cref="T:System.Windows.Markup.XmlLanguage" /> 不存在已注册的 <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />。</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage GetLanguage (string ietfLanguageTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.XmlLanguage GetLanguage(string ietfLanguageTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguage (ietfLanguageTag As String) As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::XmlLanguage ^ GetLanguage(System::String ^ ietfLanguageTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ietfLanguageTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ietfLanguageTag">一个 RFC 3066 语言字符串或空字符串。</param>
        <summary>根据按 RFC 3066 表示语言的字符串，返回一个 <see cref="T:System.Windows.Markup.XmlLanguage" /> 实例。</summary>
        <returns>一个新的 <see cref="T:System.Windows.Markup.XmlLanguage" />，使用提供的字符串作为其 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法实际上是构造函数。  
  
 语言字符串可以为空，否则必须符合[RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454)规则：  
  
-   第一个子标记必须仅包含[!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)]字母。  
  
-   必须在包含其他子标记[!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)]字母或数字。  
  
-   由一个连字符分隔子标记。  
  
-   每个子标记必须是 1 到 8 个字符长。  
  
-   允许不使用任何前导或尾随连字符。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ietfLanguageTag" /> 参数不能为 null。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ietfLanguageTag" /> 参数非空，但不符合 RFC 3066 中指定的语法。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSpecificCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetSpecificCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetSpecificCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetSpecificCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecificCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetSpecificCulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为此 <see cref="T:System.Globalization.CultureInfo" /> 返回最紧密相关的特定 <see cref="T:System.Windows.Markup.XmlLanguage" />。</summary>
        <returns>一个 <see cref="T:System.Globalization.CultureInfo" />，它可用于接受该类型作为参数的本地化-全球化 [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] 调用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此<xref:System.Windows.Markup.XmlLanguage>等同于<xref:System.Windows.Markup.XmlLanguage.Empty%2A?displayProperty=nameWithType>则此方法将返回<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>。  
  
 此方法找到的已注册<xref:System.Globalization.CultureInfo>匹配的最长可能前缀<xref:System.Windows.Markup.XmlLanguage>。 如果已注册<xref:System.Globalization.CultureInfo>是非特定 (<xref:System.Globalization.CultureInfo.IsNeutralCulture%2A>是`true`)，然后在调用此方法依靠<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>以便从中映射非特定于<xref:System.Globalization.CultureInfo>到特定的一个。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">没有为当前的 <see cref="T:System.Windows.Markup.XmlLanguage" /><see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 注册相关的非特定 <see cref="T:System.Globalization.CultureInfo" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取语言标记的字符串表示形式。</summary>
        <value>语言标记的字符串表示形式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 提供给此属性可能会返回最初指定的字符串的规范化的版本<xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>。  
  
 此属性也可能返回<xref:System.String.Empty>如果空字符串提供给<xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Windows.Markup.XmlLanguage" />。</summary>
        <returns>一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Windows.Markup.XmlLanguage" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这将返回<xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag%2A>的当前值<xref:System.Windows.Markup.XmlLanguage>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>