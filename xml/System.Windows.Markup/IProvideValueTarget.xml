<Type Name="IProvideValueTarget" FullName="System.Windows.Markup.IProvideValueTarget">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fe449848bcdce05ca59b27ae4a3b23e50137f9b6" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30657971" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IProvideValueTarget" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProvideValueTarget" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IProvideValueTarget" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProvideValueTarget" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProvideValueTarget" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一个服务，该服务报告标记扩展评估的情景对象和属性的关系。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.IProvideValueTarget> 表示服务报告有关对象和属性结构周围其中调用值转换器的信息。  
  
 类型转换器和标记扩展可以查询有关<xref:System.Windows.Markup.IProvideValueTarget>作为上由 XAML 对象编写器，XAML 对象编写器调用值转换行为时提供的服务上下文的服务。 有关详细信息，请参阅[类型转换器和 XAML 的标记扩展](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)和[可供类型转换器和标记扩展的上下文服务](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)。  
  
 标记扩展具体而言，一个方案其中<xref:System.Windows.Markup.IProvideValueTarget>很有用是确定标记扩展的环境用法的有效性。 例如，你的标记扩展可能会实现值延迟机制，但使用该机制仅在可能正合适的目标对象是能够在运行时使用您的延迟机制其他组件。 可以检查为返回的对象的类型系统特征<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>并确保该对象支持您延期的方法。 如果是这样，你的标记扩展返回一个值，并在你的标记扩展如果没有，引发异常，将会选取作为内部异常 XAML 对象编写器。 类似的方案保证的特定属性，通过检查类型系统特征的支持功能， <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>。  
  
 虽然 API 名称<xref:System.Windows.Markup.IProvideValueTarget>可能暗示与的关联<xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=nameWithType>，报告的信息<xref:System.Windows.Markup.IProvideValueTarget>也很有用到<xref:System.ComponentModel.TypeConverter>或<xref:System.Windows.Markup.ValueSerializer>。 A<xref:System.ComponentModel.TypeConverter>或<xref:System.Windows.Markup.ValueSerializer>通常具有比标记扩展的更多上下文，因为它们专用于特定的目标类型或目标属性，操作，因此通常可预测类型系统中态势有效性。 但是，存在其他方案。 下面是一些可能的类型转换器或标记扩展实现的方案的列表：  
  
-   获取<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>可以读取该对象上的其他属性的实例值。 请注意，此处处理你可能需要是可靠未设置的值，因为对目标对象的 XAML 成员的处理顺序可以在具有不确定性。  
  
-   获取<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>用于读取类型级别的元数据，或通过验证，所需的接口类型实现的。  
  
-   获取<xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>读取的属性元数据。  
  
 一种情况是使用<xref:System.Windows.Markup.IProvideValueTarget>到允许的对象或属性进行设置你的标记扩展的限制的信息。  
  
 然后再尝试使用服务，请确保服务本身不是`null`时返回相关的服务提供程序参数使用的上下文。  
  
> [!IMPORTANT]
>  使用服务时，它是特别重要，不能修改所引用的对象<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>属性或对象引用的其他对象。 具体而言，wpf 这些更改可能导致意外的更改，会使失效 WPF 属性系统。  
  
> [!NOTE]
>  不使用的一种<xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>若要确定精确哪种类型的标记扩展或类型转换器应返回。 这不是一种最佳做法。 返回类型应为与归一致 (<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>的标记扩展) 或模式 （类型转换器类名）。  
  
 在以前版本的.NET Framework 中，此接口存在于 WindowsBase 的特定于 WPF 程序集。 在[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，<xref:System.Windows.Markup.IProvideValueTarget>位于 System.Xaml 程序集中。 有关详细信息，请参阅[类型从 WPF 迁移到 System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)。  
  
## <a name="wpf-usage-notes"></a>WPF 用法说明  
 此服务依赖属性支持 framework 功能，如绑定。  
  
 在 WPF 中，服务由<xref:System.Windows.Markup.IProvideValueTarget>可以返回对象和属性的情况下，要从标记扩展或类型转换器返回的值取决于上下文。  
  
 <xref:System.Windows.Markup.IProvideValueTarget> 在内部实现的很大程度利用<xref:System.Windows.Data.BindingBase>，在 WPF 中实现的依赖项属性的绑定机制的类。  
  
 默认内部服务提供程序 WPF 实现<xref:System.Windows.Markup.IProvideValueTarget>的自定义标记扩展或类型转换器用法。 对象和属性报告的<xref:System.Windows.Markup.IProvideValueTarget>仅可以由内部的 WPF 服务设置。 超越此定义如何<xref:System.Windows.Markup.IProvideValueTarget>操作需要定义自己服务提供商为标记扩展和类型转换器用法实现最起码<xref:System.Windows.Markup.IProvideValueTarget>和<xref:System.Windows.Markup.IXamlTypeResolver>服务和，它是一个高级本文未介绍的方案。  
  
 Null 值<xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>或<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>并不一定意味着，无法执行操作的标记扩展或类型转换器，尽管这取决于您的实现。 示例情况中的值<xref:System.Windows.Markup.IProvideValueTarget>都为 null 时即使推出了该服务是如果你的标记扩展嵌套在另一个标记扩展，如<xref:System.Windows.Data.Binding>。 依赖于实现<xref:System.Windows.Markup.IProvideValueTarget>应始终检查 null 值，如果仅为了引发特定异常，如果该是你预期的设计。  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
    <altmember cref="T:System.Windows.Markup.MarkupExtension" />
    <altmember cref="T:System.IServiceProvider" />
  </Docs>
  <Members>
    <Member MemberName="TargetObject">
      <MemberSignature Language="C#" Value="public object TargetObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.IProvideValueTarget.TargetObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取被报告的目标对象。</summary>
        <value>被报告的目标对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的值<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>的实际引用，而不是类型系统标识符或其他标识符。 值也可以是`null`; 请参阅<xref:System.Windows.Markup.IProvideValueTarget>。  
  
> [!IMPORTANT]
>  使用服务时，它是特别重要，不能修改所引用的对象<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>处理属性或对象引用的属性不是专门值转换情况下你根据其他对象。 Wpf 具体而言，更改目标对象可能导致意外的更改，会使失效 WPF 属性系统。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public object TargetProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.IProvideValueTarget.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetProperty As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetProperty { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取正在报告的目标属性的标识符。</summary>
        <value>正在报告的目标属性的标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值也可以是`null`; 请参阅<xref:System.Windows.Markup.IProvideValueTarget>。  
  
## <a name="wpf-usage-notes"></a>WPF 用法说明  
 依赖项属性，该默认 WPF 服务可能返回<xref:System.Windows.DependencyProperty>，这样，标记扩展或类型转换器可以使用元数据。 否则，返回的对象可以是<xref:System.Reflection.PropertyInfo>CLR 属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>