<Type Name="IProvideValueTarget" FullName="System.Windows.Markup.IProvideValueTarget">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="751dd22e836a1cf2c79339b7d1f0f24ddcfa69f4" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37560205" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IProvideValueTarget" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProvideValueTarget" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IProvideValueTarget" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProvideValueTarget" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProvideValueTarget" />
  <TypeSignature Language="F#" Value="type IProvideValueTarget = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一个服务，该服务报告标记扩展评估的情景对象和属性的关系。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.IProvideValueTarget> 表示一种服务，报告有关周围其中调用值转换器的对象属性结构的信息。  
  
 类型转换器和标记扩展可以查询<xref:System.Windows.Markup.IProvideValueTarget>作为 XAML 对象编写器调用值转换行为时，XAML 对象编写器提供的服务上下文上的服务。 有关详细信息，请参阅[Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)并[Service Contexts Available to 类型转换器和标记扩展](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)。  
  
 标记扩展的具体而言，一种方案其中<xref:System.Windows.Markup.IProvideValueTarget>很有用是确定标记扩展的环境用法的有效性。 例如，您的标记扩展可能会实现值延迟机制，但使用该机制可能只是适当的目标对象是否能够在运行时使用延迟机制的其他组件。 无法检查作为返回的对象的类型系统特征<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>，并确保该对象支持您延期的方法。 如果是这样，您的标记扩展返回一个值，并且如果不是，标记扩展将引发异常，将提取作为内部异常由 XAML 对象编写器。 类似的方案确保特定属性支持一项功能，通过检查的类型系统特征<xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>。  
  
 虽然 API 名称<xref:System.Windows.Markup.IProvideValueTarget>可能暗示存在与的关联<xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=nameWithType>，报告的信息<xref:System.Windows.Markup.IProvideValueTarget>也可用于向<xref:System.ComponentModel.TypeConverter>或<xref:System.Windows.Markup.ValueSerializer>。 一个<xref:System.ComponentModel.TypeConverter>或<xref:System.Windows.Markup.ValueSerializer>通常具有比标记扩展的更多上下文，因为它们专用于特定的目标类型或目标属性，因此环境的有效性是通常可预测类型系统中。 但是，存在其他方案。 下面是一些可能由类型转换器或标记扩展实现的方案的列表：  
  
-   获取<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>读取该对象上的其他属性的实例值。 请注意，在处理在此处可能需要是可靠的取消设置的值，因为 XAML 成员的目标对象的处理顺序可以在具有不确定性。  
  
-   获取<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>读取类型级别的元数据，或若要验证的类型实现所需的接口。  
  
-   获取<xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>读取属性元数据。  
  
 一种方案是使用<xref:System.Windows.Markup.IProvideValueTarget>到哪些对象或属性允许通过标记扩展设置的限制的信息。  
  
 然后再尝试使用该服务，请确保服务本身不是`null`时返回的相关的服务提供程序参数使用的上下文。  
  
> [!IMPORTANT]
>  使用服务时，它是特别重要，不能修改引用的对象<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>属性或该对象引用的其他对象。 具体而言，WPF 的这些更改可能导致意外的更改会使失效 WPF 属性系统的。  
  
> [!NOTE]
>  不使用的类型<xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>若要确定哪个精确类型的标记扩展或类型转换器应返回。 这不是一种最佳做法。 返回类型应与属性设置一致 (<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>的标记扩展) 或模式 （该类型转换器的类名称）。  
  
 在以前版本的.NET Framework 中，此接口存在于 WindowsBase 的特定于 WPF 程序集。 在中[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，<xref:System.Windows.Markup.IProvideValueTarget>位于 System.Xaml 程序集中。 有关详细信息，请参阅[类型从 WPF 迁移到 System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)。  
  
## <a name="wpf-usage-notes"></a>WPF 用法说明  
 此服务依赖关系属性支持如绑定之类的框架功能。  
  
 在 WPF 中，该服务由<xref:System.Windows.Markup.IProvideValueTarget>可以返回对象，其中要从标记扩展或类型转换器返回的值取决于上下文的情况下的属性。  
  
 <xref:System.Windows.Markup.IProvideValueTarget> 中的内部实现很大程度利用<xref:System.Windows.Data.BindingBase>，在 WPF 中实现依赖属性的绑定机制的类。  
  
 WPF 中实现的默认内部服务提供程序<xref:System.Windows.Markup.IProvideValueTarget>的使用情况的自定义标记扩展或类型转换器。 对象和属性报告的<xref:System.Windows.Markup.IProvideValueTarget>只能通过内部 WPF 服务来设置。 此定义如何超越<xref:System.Windows.Markup.IProvideValueTarget>进行操作需要定义您自己服务实现提供程序的标记扩展和类型转换器用法最起码<xref:System.Windows.Markup.IProvideValueTarget>和<xref:System.Windows.Markup.IXamlTypeResolver>服务和，它是一种高级未在此处描述的方案。  
  
 Null 值<xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>或<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>并不一定意味着，不能充当标记扩展或类型转换器，尽管这取决于您的实现。 示例情况中的值<xref:System.Windows.Markup.IProvideValueTarget>都为 null 时即使提供服务的是如果您的标记扩展嵌套在另一个标记扩展，如<xref:System.Windows.Data.Binding>。 实现依赖于<xref:System.Windows.Markup.IProvideValueTarget>应始终检查 null 值，如果仅为了引发特定异常，如果这是您预期的设计。  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
    <altmember cref="T:System.Windows.Markup.MarkupExtension" />
    <altmember cref="T:System.IServiceProvider" />
  </Docs>
  <Members>
    <Member MemberName="TargetObject">
      <MemberSignature Language="C#" Value="public object TargetObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.IProvideValueTarget.TargetObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetObject : obj" Usage="System.Windows.Markup.IProvideValueTarget.TargetObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取被报告的目标对象。</summary>
        <value>被报告的目标对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的值<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>是实际的引用，不是类型系统标识符或其他标识符。 值也可以是`null`; 请参阅<xref:System.Windows.Markup.IProvideValueTarget>。  
  
> [!IMPORTANT]
>  使用服务时，它是特别重要，不能修改引用的对象<xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A>处理属性或属性不是专门值转换大小写，则由该对象引用其他对象。 WPF 的具体而言，更改目标对象可能导致意外的更改会使失效 WPF 属性系统的。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public object TargetProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.IProvideValueTarget.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetProperty As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetProperty { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetProperty : obj" Usage="System.Windows.Markup.IProvideValueTarget.TargetProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取正在报告的目标属性的标识符。</summary>
        <value>正在报告的目标属性的标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值也可以是`null`; 请参阅<xref:System.Windows.Markup.IProvideValueTarget>。  
  
## <a name="wpf-usage-notes"></a>WPF 用法说明  
 对于依赖项属性，该默认 WPF 服务可能返回<xref:System.Windows.DependencyProperty>，这样，标记扩展或类型转换器可以使用元数据。 否则，返回的对象可以是<xref:System.Reflection.PropertyInfo>CLR 属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>