<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MarkupExtension.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f36d9706c5d26b97dcc9537ee7078eceaf138fc8.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f36d9706c5d26b97dcc9537ee7078eceaf138fc8</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.MarkupExtension">
          <source>Provides a base class for XAML markup extension implementations that can be supported by .NET Framework XAML Services and other XAML readers and XAML writers.</source>
          <target state="translated">为可以由 .NET Framework XAML 服务及其他 XAML 读取器和 XAML 编写器支持的 XAML 标记扩展实现提供基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>Markup extensions return objects to callers, based on the input of string attribute values or markup elements in XAML.</source>
          <target state="translated">标记扩展返回到调用方使用，根据输入的字符串特性值或标记元素在 XAML 中的对象。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>Markup extensions return objects in a more sophisticated way than type converters alone can accomplish.</source>
          <target state="translated">标记扩展返回的对象不是单独的类型转换器可以完成的方式更复杂的方式。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>A XAML object writer invokes a type converter because a type or member has a type converter implementation associated with it.</source>
          <target state="translated">XAML 对象编写器调用的类型转换器，因为类型或成员具有与之关联的类型转换器实现。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>From the CLR frame of reference, this means that a type or member is <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> attributed.</source>
          <target state="translated">从 CLR 框架的引用，这意味着类型或成员是<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>特性化。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>From the XAML type system perspective, this means that a XAML type or a XAML member has a value for its <ph id="ph1">`TypeConverter`</ph> property.</source>
          <target state="translated">从 XAML 类型系统角度来看，这意味着将 XAML 类型或 XAML 成员具有的值其<ph id="ph1">`TypeConverter`</ph>属性。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>The invocation of a type converter is tied to the type or property definition, and is always invoked by XAML processing for these cases.</source>
          <target state="translated">类型转换器的调用绑定到的类型或属性的定义，并始终由 XAML 处理这些情况下调用。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>In contrast, a markup extension is more under the control of user code and user-produced markup, and can be applied whenever an application scenario demands it.</source>
          <target state="translated">与此相反，标记扩展更受控制的用户代码和用户生成的标记，并且每当应用程序方案需要它可应用。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>A markup extension can be invoked and can be used for setting different type-member values, so long as the markup extension's return type is assignable to that value.</source>
          <target state="translated">标记扩展可以调用，并且可用于设置不同的类型成员的值，只要标记扩展的返回类型是可分配给该值。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>For information on creating a custom markup extension, see <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>.</source>
          <target state="translated">有关创建自定义标记扩展的信息，请参阅<ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>For more information on markup extensions in general, see <bpt id="p1">[</bpt>Markup Extensions for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>.</source>
          <target state="translated">有关常规中的标记扩展的详细信息，请参阅<bpt id="p1">[</bpt>的标记扩展 XAML 概述<ept id="p1">](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>If you are building on WPF and using or creating markup extensions for XAML, other relevant information can be found in the topic <bpt id="p1">[</bpt>Markup Extensions and WPF XAML<ept id="p1">](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept>.</source>
          <target state="translated">如果你要生成 WPF 和使用或创建的 XAML 标记扩展，可以在主题中找到的其他相关信息<bpt id="p1">[</bpt>标记扩展和 WPF XAML<ept id="p1">](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> method of each markup extension implementation can use an <ph id="ph2">&lt;xref:System.IServiceProvider&gt;</ph> at run time that can provide context.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>的每个标记扩展实现的方法可以使用<ph id="ph2">&lt;xref:System.IServiceProvider&gt;</ph>在运行时可提供上下文。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>This  <ph id="ph1">&lt;xref:System.IServiceProvider&gt;</ph> is then queried for specific services that pass information, such as <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph>.</source>
          <target state="translated">这<ph id="ph1">&lt;xref:System.IServiceProvider&gt;</ph>然后查询对于传递信息，如的特定服务<ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>For more information on service contexts for a markup extension, see <bpt id="p1">[</bpt>Service Contexts Available to Type Converters and Markup Extensions<ept id="p1">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>.</source>
          <target state="translated">对于标记扩展使用的服务上下文的详细信息，请参阅<bpt id="p1">[</bpt>可供类型转换器和标记扩展的上下文服务<ept id="p1">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.MarkupExtension">
          <source>Derived classes should be attributed with <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph> to inform consumers of the most specific return type available from the markup extension's <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> implementation.</source>
          <target state="translated">派生的类应使用特性化<ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph>以通知从标记扩展的返回类型最具体的使用者<ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.MarkupExtension.#ctor">
          <source>Initializes a new instance of a class derived from <ph id="ph1">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph>.</source>
          <target state="translated">初始化从 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph> 派生的类的新实例。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph> abstract class does not hold any private values that require initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph>抽象类不拥有任何需要初始化的私有值。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.#ctor">
          <source>A functional markup extension should define its own public default constructor.</source>
          <target state="translated">功能的标记扩展应定义其自己的公共默认构造函数。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.#ctor">
          <source>Additionally, the markup extension should implement constructors that are appropriate for the extension's intended capabilities and markup usage.</source>
          <target state="translated">此外，标记扩展应实现适用于扩展的预期的功能和标记用法的构造函数。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.#ctor">
          <source>For more information, see <bpt id="p1">[</bpt>Markup Extensions for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>的标记扩展 XAML 概述<ept id="p1">](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>A service provider helper that can provide services for the markup extension.</source>
          <target state="translated">可为标记扩展提供服务的服务提供程序帮助程序。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.</source>
          <target state="translated">当在派生类中实现时，返回用作此标记扩展的目标属性值的对象。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>The object value to set on the property where the extension is applied.</source>
          <target state="translated">要在应用了扩展的属性上设置的对象值。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>When a XAML processor processes a type node and member value that is a markup extension, it invokes the <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> method of that markup extension and writes the result into the object graph or serialization stream.</source>
          <target state="translated">当 XAML 处理器处理是标记扩展的类型节点和成员值时，将调用<ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>此标记扩展的方法并将结果写入到的对象图或序列化流。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>The XAML object writer passes service context to each such implementation through the <ph id="ph1">`serviceProvider`</ph> parameter.</source>
          <target state="translated">XAML 对象编写器将服务上下文传递给每个此类实现通过<ph id="ph1">`serviceProvider`</ph>参数。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>See "Notes to Implementers" section for more information on how to implement <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> in a custom markup extension.</source>
          <target state="translated">有关如何实现的详细信息，请参阅"对实现者的说明"部分<ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>中自定义标记扩展。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>WPF Usage Notes</source>
          <target state="translated">WPF 用法说明</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>WPF classes that have specific interactions with markup set operations should not rely on <ph id="ph1">&lt;xref:System.Windows.Markup.IReceiveMarkupExtension&gt;</ph> for a <ph id="ph2">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> implementation.</source>
          <target state="translated">具有与标记设置操作的特定交互的 WPF 类不应依赖于<ph id="ph1">&lt;xref:System.Windows.Markup.IReceiveMarkupExtension&gt;</ph>为<ph id="ph2">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>实现。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;</ph>-attributed callbacks instead.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;</ph>-改为特性化回调。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>Common services returned by the default service provider that is typically available to a custom or existing <ph id="ph1">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph> implementation include the following primary services.</source>
          <target state="translated">返回的默认服务提供程序通常是可用于自定义的或现有的通用服务<ph id="ph1">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph>实现包括以下主要服务。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Markup.IProvideValueTarget" /&gt;</ph> reports the object reference and a property identifier from the context where the markup extension is used</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Markup.IProvideValueTarget" /&gt;</ph> 报告的对象引用和使用标记扩展的位置的上下文中的属性标识符</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Markup.IXamlTypeResolver" /&gt;</ph> exposes a service that parallels the general XAML object writing behavior that can provide a <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> based on a XAML type name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Markup.IXamlTypeResolver" /&gt;</ph> 公开服务，等同于常规的 XAML 对象编写行为可提供<ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>基于 XAML 类型名称。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>The name can optionally include a prefix for a mapped XAML namespace.</source>
          <target state="translated">名称 （可选） 可以包含映射的 XAML 命名空间的前缀。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source><ph id="ph1">&lt;see cref="T:System.Xaml.IXamlSchemaContextProvider" /&gt;</ph> exposes the active XAML schema context directly.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.IXamlSchemaContextProvider" /&gt;</ph> 直接公开活动的 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>From the reported <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>, you can obtain XAML schema context information such as how assemblies are mapped for type support, preferred prefix in assemblies, lists of each <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> in an assembly, and so on.</source>
          <target state="translated">从报告<ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>，你可以获取 XAML 架构上下文信息如如何映射程序集的类型支持，在程序集中，首选前缀列出每个<ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>中的程序集和等等。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>Other services available for more specialized markup extension scenarios include:</source>
          <target state="translated">对专用化程度的标记扩展方案提供的其他服务包括：</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>Potentially, implementations of <ph id="ph1">&lt;see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /&gt;</ph> can ignore the <ph id="ph2">&lt;paramref name="serviceProvider" /&gt;</ph> parameter.</source>
          <target state="translated">可能的实现的<ph id="ph1">&lt;see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /&gt;</ph>可以忽略<ph id="ph2">&lt;paramref name="serviceProvider" /&gt;</ph>参数。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>This is viable for some basic scenarios, where no context at all is required for returning a value.</source>
          <target state="translated">这是可行的某些基本的情况下，其中没有上下文根本是需要返回值。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>In typical usage, the .NET Framework XAML Services and the implemented XAML object writers will provide a service provider to all value converter methods that are invoked during XAML processing.</source>
          <target state="translated">在典型用法中，.NET Framework XAML 服务和实现的 XAML 对象编写器将提供所有值转换器方法，在 XAML 过程中调用的服务提供商处理。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>However, for robustness, you should provide code paths for null values both for the service provider itself and for any requested service.</source>
          <target state="translated">但是，为实现可靠性，你应提供代码路径的 null 值对于服务提供程序本身和任何请求的服务。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>Null values might occur if your markup extension is applied in a circumstance where the typical service support provided by a XAML processor infrastructure is not available.</source>
          <target state="translated">Null 值可能会出现如果标记扩展应用在以下情况中通过 XAML 处理器基础结构提供的典型的服务支持不可用。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>For more information on available services from the XAML service provider context and how to use them, see <bpt id="p1">[</bpt>Type Converters and Markup Extensions for XAML<ept id="p1">](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept>.</source>
          <target state="translated">从 XAML 服务提供程序上下文和如何使用它们的可用服务的详细信息，请参阅<bpt id="p1">[</bpt>类型转换器和 XAML 的标记扩展<ept id="p1">](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>Implementations that require a certain service to be available in order to produce a useful <ph id="ph1">&lt;see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /&gt;</ph> result are expected to throw exceptions if that service is not available.</source>
          <target state="translated">需要特定的服务必须可用才能生成有用的实现<ph id="ph1">&lt;see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /&gt;</ph>结果应引发异常，如果该服务不可用。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>The recommended exception to throw is <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">要引发的建议的异常是<ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>The implementation may also throw exceptions if one of the arguments that the custom markup extension needs in order to provide a value is null, is invalid for its data type, or does not contain a value that the markup extension is capable of processing.</source>
          <target state="translated">如果自定义标记扩展提供的值为 null，所需的自变量之一无效对于其数据类型，或不包含标记扩展是能够处理的值，实现也可能会引发异常。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
          <source>The recommended exception to throw is <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">要引发的建议的异常是<ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>