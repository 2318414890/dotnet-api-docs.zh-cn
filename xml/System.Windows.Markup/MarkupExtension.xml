<Type Name="MarkupExtension" FullName="System.Windows.Markup.MarkupExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3746808349956fe51624132285df9c875558e01e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36502589" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupExtension abstract" />
  <TypeSignature Language="F#" Value="type MarkupExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d04bf-101">为可以由 .NET Framework XAML 服务及其他 XAML 读取器和 XAML 编写器支持的 XAML 标记扩展实现提供基类。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d04bf-101">Provides a base class for XAML markup extension implementations that can be supported by .NET Framework XAML Services and other XAML readers and XAML writers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d04bf-102">标记扩展返回到调用方使用，根据输入的字符串特性值或标记元素在 XAML 中的对象。</span><span class="sxs-lookup"><span data-stu-id="d04bf-102">Markup extensions return objects to callers, based on the input of string attribute values or markup elements in XAML.</span></span> <span data-ttu-id="d04bf-103">标记扩展返回的对象不是单独的类型转换器可以完成的方式更复杂的方式。</span><span class="sxs-lookup"><span data-stu-id="d04bf-103">Markup extensions return objects in a more sophisticated way than type converters alone can accomplish.</span></span> <span data-ttu-id="d04bf-104">XAML 对象编写器调用的类型转换器，因为类型或成员具有与之关联的类型转换器实现。</span><span class="sxs-lookup"><span data-stu-id="d04bf-104">A XAML object writer invokes a type converter because a type or member has a type converter implementation associated with it.</span></span> <span data-ttu-id="d04bf-105">从 CLR 框架的引用，这意味着类型或成员是<xref:System.ComponentModel.TypeConverterAttribute>特性化。</span><span class="sxs-lookup"><span data-stu-id="d04bf-105">From the CLR frame of reference, this means that a type or member is <xref:System.ComponentModel.TypeConverterAttribute> attributed.</span></span> <span data-ttu-id="d04bf-106">从 XAML 类型系统角度来看，这意味着将 XAML 类型或 XAML 成员具有的值其`TypeConverter`属性。</span><span class="sxs-lookup"><span data-stu-id="d04bf-106">From the XAML type system perspective, this means that a XAML type or a XAML member has a value for its `TypeConverter` property.</span></span> <span data-ttu-id="d04bf-107">类型转换器的调用绑定到的类型或属性的定义，并始终由 XAML 处理这些情况下调用。</span><span class="sxs-lookup"><span data-stu-id="d04bf-107">The invocation of a type converter is tied to the type or property definition, and is always invoked by XAML processing for these cases.</span></span> <span data-ttu-id="d04bf-108">与此相反，标记扩展更受控制的用户代码和用户生成的标记，并且每当应用程序方案需要它可应用。</span><span class="sxs-lookup"><span data-stu-id="d04bf-108">In contrast, a markup extension is more under the control of user code and user-produced markup, and can be applied whenever an application scenario demands it.</span></span> <span data-ttu-id="d04bf-109">标记扩展可以调用，并且可用于设置不同的类型成员的值，只要标记扩展的返回类型是可分配给该值。</span><span class="sxs-lookup"><span data-stu-id="d04bf-109">A markup extension can be invoked and can be used for setting different type-member values, so long as the markup extension's return type is assignable to that value.</span></span>  
  
 <span data-ttu-id="d04bf-110">有关创建自定义标记扩展的信息，请参阅<xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>。</span><span class="sxs-lookup"><span data-stu-id="d04bf-110">For information on creating a custom markup extension, see <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>.</span></span> <span data-ttu-id="d04bf-111">有关常规中的标记扩展的详细信息，请参阅[的标记扩展 XAML 概述](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="d04bf-111">For more information on markup extensions in general, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</span></span> <span data-ttu-id="d04bf-112">如果你要生成 WPF 和使用或创建的 XAML 标记扩展，可以在主题中找到的其他相关信息[标记扩展和 WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)。</span><span class="sxs-lookup"><span data-stu-id="d04bf-112">If you are building on WPF and using or creating markup extensions for XAML, other relevant information can be found in the topic [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="d04bf-113"><xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>的每个标记扩展实现的方法可以使用<xref:System.IServiceProvider>在运行时可提供上下文。</span><span class="sxs-lookup"><span data-stu-id="d04bf-113">The <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of each markup extension implementation can use an <xref:System.IServiceProvider> at run time that can provide context.</span></span> <span data-ttu-id="d04bf-114">这<xref:System.IServiceProvider>然后查询对于传递信息，如的特定服务<xref:System.Windows.Markup.IProvideValueTarget>或<xref:System.Windows.Markup.IXamlTypeResolver>。</span><span class="sxs-lookup"><span data-stu-id="d04bf-114">This  <xref:System.IServiceProvider> is then queried for specific services that pass information, such as <xref:System.Windows.Markup.IProvideValueTarget> or <xref:System.Windows.Markup.IXamlTypeResolver>.</span></span> <span data-ttu-id="d04bf-115">对于标记扩展使用的服务上下文的详细信息，请参阅[可供类型转换器和标记扩展的上下文服务](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)。</span><span class="sxs-lookup"><span data-stu-id="d04bf-115">For more information on service contexts for a markup extension, see [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).</span></span>  
  
 <span data-ttu-id="d04bf-116">派生的类应使用特性化<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>以通知从标记扩展的返回类型最具体的使用者<xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>实现。</span><span class="sxs-lookup"><span data-stu-id="d04bf-116">Derived classes should be attributed with <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> to inform consumers of the most specific return type available from the markup extension's <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> implementation.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MarkupExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d04bf-117">初始化从 <see cref="T:System.Windows.Markup.MarkupExtension" /> 派生的类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d04bf-117">Initializes a new instance of a class derived from <see cref="T:System.Windows.Markup.MarkupExtension" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d04bf-118"><xref:System.Windows.Markup.MarkupExtension>抽象类不拥有任何需要初始化的私有值。</span><span class="sxs-lookup"><span data-stu-id="d04bf-118">The <xref:System.Windows.Markup.MarkupExtension> abstract class does not hold any private values that require initialization.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="d04bf-119">
            <para>功能的标记扩展应定义其自己的公共默认构造函数。此外，标记扩展应实现适用于扩展的预期的功能和标记用法的构造函数。有关详细信息，请参阅 [XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md) 标记扩展。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d04bf-119">
              <para>A functional markup extension should define its own public default constructor. Additionally, the markup extension should implement constructors that are appropriate for the extension's intended capabilities and markup usage. For more information, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public abstract object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member ProvideValue : IServiceProvider -&gt; obj" Usage="markupExtension.ProvideValue serviceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">
          <span data-ttu-id="d04bf-120">可为标记扩展提供服务的服务提供程序帮助程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d04bf-120">A service provider helper that can provide services for the markup extension.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d04bf-121">当在派生类中实现时，返回用作此标记扩展的目标属性值的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d04bf-121">When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d04bf-122">要在应用了扩展的属性上设置的对象值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d04bf-122">The object value to set on the property where the extension is applied.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d04bf-123">当 XAML 处理器处理是标记扩展的类型节点和成员值时，将调用<xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>此标记扩展的方法并将结果写入到的对象图或序列化流。</span><span class="sxs-lookup"><span data-stu-id="d04bf-123">When a XAML processor processes a type node and member value that is a markup extension, it invokes the <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of that markup extension and writes the result into the object graph or serialization stream.</span></span> <span data-ttu-id="d04bf-124">XAML 对象编写器将服务上下文传递给每个此类实现通过`serviceProvider`参数。</span><span class="sxs-lookup"><span data-stu-id="d04bf-124">The XAML object writer passes service context to each such implementation through the `serviceProvider` parameter.</span></span>  
  
 <span data-ttu-id="d04bf-125">有关如何实现的详细信息，请参阅"对实现者的说明"部分<xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>中自定义标记扩展。</span><span class="sxs-lookup"><span data-stu-id="d04bf-125">See "Notes to Implementers" section for more information on how to implement <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> in a custom markup extension.</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="d04bf-126">WPF 用法说明</span><span class="sxs-lookup"><span data-stu-id="d04bf-126">WPF Usage Notes</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d04bf-127">具有与标记设置操作的特定交互的 WPF 类不应依赖于<xref:System.Windows.Markup.IReceiveMarkupExtension>为[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]实现。</span><span class="sxs-lookup"><span data-stu-id="d04bf-127">WPF classes that have specific interactions with markup set operations should not rely on <xref:System.Windows.Markup.IReceiveMarkupExtension> for a [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implementation.</span></span> <span data-ttu-id="d04bf-128">使用<xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-改为特性化回调。</span><span class="sxs-lookup"><span data-stu-id="d04bf-128">Use <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-attributed callbacks instead.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="d04bf-129">
            <para>返回的默认服务提供程序通常是可用于自定义的或现有的通用服务<see cref="T:System.Windows.Markup.MarkupExtension" />实现包括以下主要服务。 -<see cref="T:System.Windows.Markup.IProvideValueTarget" />报告对象引用和标记扩展使用的位置的上下文中的属性标识符<see cref="T:System.Windows.Markup.IXamlTypeResolver" />公开服务，等同于常规的 XAML 对象编写行为可提供<see cref="T:System.Type" />基于 XAML类型名称。名称 （可选） 可以包含映射的 XAML 命名空间的前缀。 -<see cref="T:System.Xaml.IXamlSchemaContextProvider" />直接公开活动的 XAML 架构上下文。从报告<see cref="T:System.Xaml.XamlSchemaContext" />，你可以获取 XAML 架构上下文信息如如何映射程序集的类型支持，在程序集中，首选前缀列出每个<see cref="T:System.Xaml.XamlType" />中的程序集和等等。 的可用于更专业的标记扩展方案其他服务包括:- <see cref="T:System.Windows.Markup.IUriContext" />   
  
    -    <see cref="T:System.Xaml.IAmbientProvider" />   
  
    -    <see cref="T:System.Xaml.IDestinationTypeProvider" />   
  
    -    <see cref="T:System.Xaml.IRootObjectProvider" />   
  
    -    <see cref="T:System.Xaml.IXamlNameResolver" />   
  
    -   <see cref="T:System.Xaml.IXamlNamespaceResolver" />可能的实现的<see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />可以忽略<paramref name="serviceProvider" />参数。这是可行的某些基本的情况下，其中没有上下文根本是需要返回值。在典型用法中，.NET Framework XAML 服务和实现的 XAML 对象编写器将提供所有值转换器方法，在 XAML 过程中调用的服务提供商处理。但是，为实现可靠性，你应提供代码路径的 null 值对于服务提供程序本身和任何请求的服务。Null 值可能会出现如果标记扩展应用在以下情况中通过 XAML 处理器基础结构提供的典型的服务支持不可用。从 XAML 服务提供程序上下文和如何使用它们的可用服务的详细信息，请参阅 [类型转换器和标记扩展 XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)。需要特定的服务必须可用才能生成有用的实现<see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />结果应引发异常，如果该服务不可用。要引发的建议的异常是<see cref="T:System.InvalidOperationException" />。如果自定义标记扩展提供的值为 null，所需的自变量之一无效对于其数据类型，或不包含标记扩展是能够处理的值，实现也可能会引发异常。要引发的建议的异常是<see cref="T:System.InvalidOperationException" />。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d04bf-129">
              <para>Common services returned by the default service provider that is typically available to a custom or existing <see cref="T:System.Windows.Markup.MarkupExtension" /> implementation include the following primary services.  -   <see cref="T:System.Windows.Markup.IProvideValueTarget" /> reports the object reference and a property identifier from the context where the markup extension is used  -   <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> exposes a service that parallels the general XAML object writing behavior that can provide a <see cref="T:System.Type" /> based on a XAML type name. The name can optionally include a prefix for a mapped XAML namespace.  -   <see cref="T:System.Xaml.IXamlSchemaContextProvider" /> exposes the active XAML schema context directly. From the reported <see cref="T:System.Xaml.XamlSchemaContext" />, you can obtain XAML schema context information such as how assemblies are mapped for type support, preferred prefix in assemblies, lists of each <see cref="T:System.Xaml.XamlType" /> in an assembly, and so on.  -   Other services available for more specialized markup extension scenarios include:  -   <see cref="T:System.Windows.Markup.IUriContext" />  
  
    -   <see cref="T:System.Xaml.IAmbientProvider" />  
  
    -   <see cref="T:System.Xaml.IDestinationTypeProvider" />  
  
    -   <see cref="T:System.Xaml.IRootObjectProvider" />  
  
    -   <see cref="T:System.Xaml.IXamlNameResolver" />  
  
    -   <see cref="T:System.Xaml.IXamlNamespaceResolver" />  Potentially, implementations of <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> can ignore the <paramref name="serviceProvider" /> parameter. This is viable for some basic scenarios, where no context at all is required for returning a value.  In typical usage, the .NET Framework XAML Services and the implemented XAML object writers will provide a service provider to all value converter methods that are invoked during XAML processing. However, for robustness, you should provide code paths for null values both for the service provider itself and for any requested service. Null values might occur if your markup extension is applied in a circumstance where the typical service support provided by a XAML processor infrastructure is not available.  For more information on available services from the XAML service provider context and how to use them, see [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md).  Implementations that require a certain service to be available in order to produce a useful <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> result are expected to throw exceptions if that service is not available. The recommended exception to throw is <see cref="T:System.InvalidOperationException" />.  The implementation may also throw exceptions if one of the arguments that the custom markup extension needs in order to provide a value is null, is invalid for its data type, or does not contain a value that the markup extension is capable of processing. The recommended exception to throw is <see cref="T:System.InvalidOperationException" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.Markup.IProvideValueTarget" />
        <altmember cref="T:System.Windows.Markup.IXamlTypeResolver" />
      </Docs>
    </Member>
  </Members>
</Type>