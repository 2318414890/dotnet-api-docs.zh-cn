<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cb6251512dd75740e1b01a33ceb7e3470f3a68d1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30660621" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>使用 WPF 默认 XAML 读取器和关联的 XAML 对象编写器读取 XAML 输入并创建对象图。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同步<xref:System.Windows.Markup.XamlReader.Load%2A>方法是静态的但异步<xref:System.Windows.Markup.XamlReader.LoadAsync%2A>方法不是静态和需要的实例<xref:System.Windows.Markup.XamlReader>要使用的类。  
  
 输出`Load`方法是单个对象，它表示创建的对象树或对象图的根对象。 对象创建的关系图<xref:System.Windows.Markup.XamlReader>通常会将其添加到 WPF 应用程序在运行时的现有对象树。 否则新的对象图，被视为出于的 WPF 应用程序模型断开连接。 也就是说，不会呈现，并且不能访问使用任一对象树技巧作为应用于 WPF 应用程序的主对象树 (例如，Api <xref:System.Windows.FrameworkElement.FindName%2A>， <xref:System.Windows.LogicalTreeHelper>， <xref:System.Windows.Media.VisualTreeHelper>)。 在对象树概念的详细信息，请参阅[WPF 中的树](~/docs/framework/wpf/advanced/trees-in-wpf.md)。  
  
 <xref:System.Windows.Markup.XamlReader> 支持以下主要方案：  
  
-   **克隆对象工厂**： 没有附加机制，引用类型通常不能包含 WPF 对象树中的多个位置。 (其他机制来提供对共享支持或在 WPF 中重新使用的示例包括基于的对象<xref:System.Windows.Freezable>，或如支持通常可共享对象<xref:System.Windows.Media.Brush>，引用为中的一个项<xref:System.Windows.ResourceDictionary>。)一种方法克隆一个对象，它已在对象树是序列化对象使用<xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>。 然后将其序列化的字符串作为输入用于调用<xref:System.Windows.Markup.XamlReader.Load%2A>，并将流或<xref:System.Xml.XmlReader>作为中介。  
  
-   **构造对象基于在实时信息**： 通常还有其他方法来使用晚期绑定或用户提供的输入来更改现有对象的状态。 例如你无法使用相同的值来设置多个属性，或使用数据绑定。 但如果你有其中甚至要创建的对象的类型为仅可确定在运行时或与用户交互的方案，然后通过在生成的字符串来创建此类对象<xref:System.Windows.Markup.XamlReader.Load%2A>输入通常是有用的技术。  
  
-   **使用现有资源技术**:<xref:System.IO.Stream>类型常用于其他框架或技术用于跨应用程序边界传输数据或对象或类似情况。 然后，可以使用<xref:System.IO.Stream>技术来存储或获取最终用于你的应用程序的一部分中创建对象的 XAML 格式的数据。  
  
-   **固定文档：** 你的应用程序可能会加载以包含在 WPF 应用程序对象树和 UI 中的本地或下载 XPS 文档。  
  
> [!NOTE]
>  有时，此文档介绍对象图，而不是对象树。 严格的父-子关系不始终存在中运行的时 WPF 应用程序的运行的时对象关系，因此对象图是更广泛适用的术语。 但是，原因是 WPF 还包括两个不同的树概念化 Api (<xref:System.Windows.LogicalTreeHelper>， <xref:System.Windows.Media.VisualTreeHelper>) 树隐喻仍充分地应用到 WPF 中的大多数现实情况。 从 XAML 语言角度来看但是，对象图通常是考虑如何将对象创建超出 XAML 中，因为 XAML 语言本身并不一定指定将关系的详细信息的帮助器类方法的最佳方式到再次树状结构。  
  
## <a name="code-access-security-loose-xaml-and-xamlreader"></a>代码访问安全性、 宽松 XAML，以及 xamlreader 形式提供  
 XAML 是一种直接表示对象实例化和执行的标记语言。 因此，在 XAML 中创建的元素能够像等效的生成代码那样与系统资源（如网络访问、文件系统 IO）进行交互。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 支持[!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)]安全框架[!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)]。 这意味着在 Internet 区域中运行的 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 内容具有缩减的执行权限。 “宽松型 XAML”（由 XAML 查看器在加载时解释的非编译 XAML 的页面）和 [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] 通常在此 Internet 区域中运行，并且使用相同的权限集。  但是，加载到完全受信任的应用程序中的 XAML 与承载应用程序具有相同的系统资源访问权限。 有关详细信息，请参阅 [WPF 部分信任安全性](~/docs/framework/wpf/wpf-partial-trust-security.md)。  
  
 有关这些语句的含义<xref:System.Windows.Markup.XamlReader>是应用程序设计必须使你决定要加载的 xaml 的信任决定。 如果你要将加载不受信任的 XAML，请考虑实现你自己的沙盒技术来加载生成的对象图的方式。  
  
 <xref:System.Windows.Markup.XamlReader> 此外可以由部分信任代码调用。 在这种情况下，Internet 安全区域被应用于代码访问安全性。 如果加载的 XAML 中的任何内容无效 Internet 安全区域下，会引发一个 XAML 分析异常。 XBAP 和部分信任级别的平台的其他情况下在其中<xref:System.Windows.Markup.XamlReader>是一部分与显式的部分信任的调用的执行，获取相同的异常行为。  
  
## <a name="wpf-xaml-xaml-readerswriters-and-xaml-language-versioning"></a>WPF XAML、 XAML 读取器/编写器，和 XAML 语言版本控制  
 [!INCLUDE[xaml2009](~/includes/xaml2009-md.md)] 包括语言功能，如和。 您可以使用的签名`Load`或`Parse`来加载使用这些功能的 XAML。 但是，这些语言功能不支持针对需要标记编译的 XAML (如 XAML**页**生成 WPF 应用程序或涉及的生成操作中的标记编译任务任何 XAML 中的操作)。  
  
 WPF 类型和 WPF 技术通常支持依赖于对 WPF 内部结构的访问的概念。 例如，WPF 如何实施依赖项属性依赖于用于高效的类型成员查找内部技术。 对这些内部结构的访问通过读取和写入中提供的 Api 的 XAML<xref:System.Windows.Markup.XamlWriter>和<xref:System.Windows.Markup.XamlReader>从<xref:System.Windows.Markup>命名空间和 PresentationFramework 程序集中。 但是，较低级别 XAML 读取器和 XAML 编写器从 System.Xaml 程序集 (类基于<xref:System.Xaml.XamlReader?displayProperty=nameWithType>， <xref:System.Xaml.XamlWriter?displayProperty=nameWithType>) 不能访问到 WPF 内部结构。 从 System.Xaml 对任何特定于 WPF 程序集没有依赖关系。 无需 WPF 内部访问，System.Xaml 读取器和编写器无法正确加载或保存所有 WPF 类型基于 WPF 类型。 具体而言，System.Xaml 读取器和编写器不了解概念，如备份属性存储或 WPF 如何使用样式、 资源字典和模板的所有详细信息的 WPF 依赖项属性。 因此，你可以选择以：  
  
-   如果您正在加载 WPF 类型和/或以任何方式的 BAML 形式使用 XAML，使用 PresentationFramework XAML 读取器和 XAML 编写器。  
  
-   如果你不依赖于任何 WPF 类型或 BAML 形式的 XAML，并不将另一种特定技术的 XAML 读取器或 XAML 编写器实现的原因，特定于该框架，则使用 System.Xaml XAML 读取器和 XAML 编写器。  
  
## <a name="systemxaml-backing-implementation-in-net-4"></a>System.Xaml 支持.NET 4 中的实现  
 <xref:System.Windows.Markup.XamlReader> 是 WPF 框架级别 XAML 分析器可调用的 API 图面。 相同的基础 XAML 分析器还执行运行时 XAML 加载和分析 WPF 应用程序面向[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]和[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]。  
  
 如果你正面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、 外部 API 相同，但实施部分都基于[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]在 System.Xaml 程序集中，从而提高了许多分析 XAML 的技术和报告的方面的常规 XAML 实现。 面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]一定需要一个引用，以及实现的详细信息包括 System.Xaml，如报告的异常可能来自于 System.Xaml 定义的类型。  
  
## Examples  
 以下示例将转换<xref:System.Windows.Controls.Button>到字符串使用<xref:System.Windows.Markup.XamlWriter>类。  然后会将字符串加载回<xref:System.Windows.Controls.Button>使用静态<xref:System.Windows.Markup.XamlReader.Load%2A>方法<xref:System.Windows.Markup.XamlReader>类。  
  
 [!code-csharp[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Markup.XamlReader" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果有挂起的异步加载操作，则中止当前的异步加载操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.CancelAsync%2A> 是一个异步操作;因此，操作中止之前，可能会出现某些加载。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWpfSchemaContext () As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::XamlSchemaContext ^ GetWpfSchemaContext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个 <see cref="T:System.Xaml.XamlSchemaContext" /> 对象，该对象表示 <see cref="T:System.Windows.Markup.XamlReader" /> 的 WPF 架构上下文设置。</summary>
        <returns>一个 <see cref="T:System.Xaml.XamlSchemaContext" /> 对象，该对象表示 <see cref="T:System.Windows.Markup.XamlReader" /> 的 WPF 架构上下文设置。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>读取 XAML 输入，并返回相应对象树的根。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">要加载的 XAML，以流形式表示。</param>
        <summary>读取指定 <see cref="T:System.IO.Stream" /> 中的 XAML 输入，并返回作为相应对象树根的 <see cref="T:System.Object" />。</summary>
        <returns>所创建的对象树根处的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例将保存<xref:System.Windows.Controls.Button>到<xref:System.IO.MemoryStream>使用<xref:System.Windows.Markup.XamlWriter>类。 然后，将流加载回<xref:System.Windows.Controls.Button>使用静态<xref:System.Windows.Markup.XamlReader.Load%2A>方法<xref:System.Windows.Markup.XamlReader>类。  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XamlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xaml.XamlReader" /> 对象。 应使用输入 XAML 初始化此对象。</param>
        <summary>通过所提供的 <see cref="T:System.Xaml.XamlReader" /> 读取 XAML 输入，并返回作为相应对象树根的对象。</summary>
        <returns>已创建的对象树的根对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 输入<xref:System.Xaml.XamlReader>可以是<xref:System.Windows.Baml2006.Baml2006Reader>。 这是如何加载 BAML 在运行时，或出于本地化工具目的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">已经以 XML 形式加载了要加载的 XAML 输入的 <see cref="T:System.Xml.XmlReader" />。</param>
        <summary>读取指定 <see cref="T:System.Xml.XmlReader" /> 中的 XAML 输入，并返回作为相应对象树根的对象。</summary>
        <returns>已创建的对象树的根对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 以下示例将转换<xref:System.Windows.Controls.Button>到字符串使用<xref:System.Windows.Markup.XamlWriter>类。  然后会将字符串加载回<xref:System.Windows.Controls.Button>使用静态<xref:System.Windows.Markup.XamlReader.Load%2A>方法<xref:System.Windows.Markup.XamlReader>类。  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">包含要加载的 XAML 输入的流。</param>
        <param name="parserContext">由分析器使用的上下文信息。</param>
        <summary>读取指定 <see cref="T:System.IO.Stream" /> 中的 XAML 输入，并返回作为相应对象树根的对象。</summary>
        <returns>已创建的对象树的根对象。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="parserContext" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>读取 XAML 标记，并返回与指定标记的根对应的对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">包含要加载的 XAML 输入的流。</param>
        <summary>读取指定 <see cref="T:System.IO.Stream" /> 中的 XAML 输入，并返回相应对象树的根。</summary>
        <returns>已创建的对象树的根对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 异步的 XAML 加载操作最初将返回一个对象，它只是根对象。 异步，XAML 分析然后仍然存在，并在根目录下填充任何子对象。 这是典型的 WPF XAML 处理行为和该产品与对象生存期 WPF 概念交互相反。 中的典型 （非异步） 交互，返回一个元素并将其加载汇报之前都是包括所有子集合对象的所有属性。 该行为等同于自下而上的方法，用于创建的树的根对象所在的最后一个对象变为可用。  
  
 你通常会将返回的对象分配到 WPF 应用程序的对象树中的某个位置、 内容所知识可能仍会填入和如果作为 UI 的一部分公开的整个内容，则可能会导致增量布局更新。 为此，它是典型隔离或虚拟化从 XAML，任何以异步方式加载的对象并使用特定于应用程序逻辑或应用程序状态通知时<xref:System.Windows.Markup.XamlReader.LoadCompleted>处理。  
  
 为了使<xref:System.Windows.Markup.XamlReader.LoadAsync%2A>若要加载的 XAML 输入以异步方式，XAML 输入中的根元素必须包含的属性和值`x:SynchronousMode="Async"`。 值被视为区分大小写。 如果 XAML 输入的根不包含`x:SynchronousMode="Async"`，不会引发异常，且调用处理为同步负载 (请参阅<xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>)。  
  
 每个实例只有一个异步加载操作<xref:System.Windows.Markup.XamlReader>类可以执行一次。  如果多个异步操作，将尝试对同一个实例<xref:System.Windows.Markup.XamlReader>类<xref:System.InvalidOperationException>引发。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">对同一个 <see cref="T:System.Windows.Markup.XamlReader" /> 的多个加载操作用时挂起。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">已加载/读取了 XAML 输入的现有 <see cref="T:System.Xml.XmlReader" />。</param>
        <summary>读取指定 <see cref="T:System.Xml.XmlReader" /> 中的 XAML 输入，并返回相应对象树的根。</summary>
        <returns>已创建的对象树的根。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 异步的 XAML 加载操作最初将返回一个对象，它只是根对象。 异步，XAML 分析然后仍然存在，并在根目录下填充任何子对象。 这是典型的 WPF XAML 处理行为和该产品与对象生存期 WPF 概念交互相反。 中的典型 （非异步） 交互，返回一个元素并将其加载汇报之前都是包括所有子集合对象的所有属性。 该行为等同于自下而上的方法，用于创建的树的根对象所在的最后一个对象变为可用。  
  
 你通常会将分配给返回的对象从<xref:System.Windows.Markup.XamlReader.LoadAsync%2A>到应用程序的对象树中的某个位置，所需知识内容可能仍会填入和如果作为的一部分公开的全部内容可能会导致增量布局更新UI。 为此，它是典型隔离或虚拟化从 XAML，任何以异步方式加载的对象并使用特定于应用程序逻辑或应用程序状态通知时<xref:System.Windows.Markup.XamlReader.LoadCompleted>处理。  
  
 为了使<xref:System.Windows.Markup.XamlReader.LoadAsync%2A>若要加载的 XAML 输入以异步方式，在 XAML 标记中的根元素必须包含的属性和值`x:SynchronousMode="Async"`。 值被视为区分大小写。 如果 XAML 标记根不包含`x:SynchronousMode="Async"`，不会引发异常，且调用改为处理为同步负载 (请参阅<xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>)。  
  
 每个实例只有一个异步加载操作<xref:System.Windows.Markup.XamlReader>类可以执行一次。  如果多个异步操作，将尝试对同一个实例<xref:System.Windows.Markup.XamlReader>类<xref:System.InvalidOperationException>引发。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">对同一个 <see cref="T:System.Windows.Markup.XamlReader" /> 同时执行多个加载操作。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">包含要加载的 XAML 输入的流。</param>
        <param name="parserContext">由分析器使用的上下文信息。</param>
        <summary>读取指定 <see cref="T:System.IO.Stream" /> 中的 XAML 输入，并返回相应对象树的根。</summary>
        <returns>已创建的对象树的根。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 异步的 XAML 加载操作最初将返回一个对象，它只是根对象。 异步，XAML 分析然后仍然存在，并在根目录下填充任何子对象。 这是典型的 WPF XAML 处理行为和该产品与对象生存期 WPF 概念交互相反。 中的典型 （非异步） 交互，返回一个元素并将其加载汇报之前都是包括所有子集合对象的所有属性。 该行为等同于自下而上的方法，用于创建的树的根对象所在的最后一个对象变为可用。  
  
 你通常会将返回的对象分配到应用程序的对象树中的某个位置、 内容所知识可能仍会填入和如果作为 UI 的一部分公开的整个内容，则可能会导致增量布局更新。 为此，它是典型隔离或虚拟化从 XAML，任何以异步方式加载的对象并使用特定于应用程序逻辑或应用程序状态通知时<xref:System.Windows.Markup.XamlReader.LoadCompleted>处理。  
  
 为了使<xref:System.Windows.Markup.XamlReader.LoadAsync%2A>若要以异步方式加载标记，在 XAML 标记中的根元素必须包含的属性和值`x:SynchronousMode="Async"`。 值被视为区分大小写。 如果 XAML 标记根不包含`x:SynchronousMode="Async"`，不会引发异常，且调用处理为同步负载 (请参阅<xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>)。  
  
 每个实例只有一个异步加载操作<xref:System.Windows.Markup.XamlReader>类可以执行一次。  如果多个异步操作，将尝试对同一个实例<xref:System.Windows.Markup.XamlReader>类<xref:System.InvalidOperationException>引发。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">对同一个 <see cref="T:System.Windows.Markup.XamlReader" /> 同时执行多个加载操作。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在异步加载操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.LoadCompleted> 此外在异步加载操作中止时引发。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>读取指定文本字符串中的标记，并返回与指定标记的根对应的对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText">输入 XAML，作为单个文本字符串。</param>
        <summary>读取指定文本字符串中的 XAML 输入，并返回与指定标记的根对应的对象。</summary>
        <returns>已创建的对象树的根。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现调用<xref:System.Windows.Markup.XamlReader.Load%2A>内部后从字符串创建流。 请参阅<xref:System.Windows.Markup.XamlReader.Load%2A>有关其他信息，例如可能的异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText">输入 XAML，作为单个文本字符串。</param>
        <param name="parserContext">由分析器使用的上下文信息。</param>
        <summary>（使用指定的 <see cref="T:System.Windows.Markup.ParserContext" />）读取指定文本字符串中的 XAML 标记，并返回与指定标记的根对应的对象。</summary>
        <returns>已创建的对象树的根。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现调用<xref:System.Windows.Markup.XamlReader.Load%2A>内部后从字符串创建流。 请参阅<xref:System.Windows.Markup.XamlReader.Load%2A>有关其他信息，例如可能的异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>