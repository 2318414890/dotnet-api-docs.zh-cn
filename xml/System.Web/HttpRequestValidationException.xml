<Type Name="HttpRequestValidationException" FullName="System.Web.HttpRequestValidationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7879410d076bbc54a941e98ea9cada12d389b046" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36574402" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpRequestValidationException : System.Web.HttpException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit HttpRequestValidationException extends System.Web.HttpException" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpRequestValidationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpRequestValidationException&#xA;Inherits HttpException" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpRequestValidationException sealed : System::Web::HttpException" />
  <TypeSignature Language="F#" Value="type HttpRequestValidationException = class&#xA;    inherit HttpException" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.HttpException</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>从客户端收到作为请求数据一部分的潜在恶意输入字符串时引发的异常。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过限制并验证用户输入的 Web 应用，以防止依赖于恶意输入字符串的黑客攻击中至关重要。 跨站点脚本攻击是此类攻击的一个示例。 其他类型的恶意或不需要的数据可以先通过在请求中各种形式的输入。 通过限制的低的级别应用程序中传递的数据类型，可以防止意外事件，即使使用你代码的程序员不要将放在正确验证技术就地。  
  
 请求验证检测到潜在的恶意客户端输入，并引发此异常，中止处理请求。 请求中止可能表示试图从而危及应用程序，如跨站点脚本攻击的安全。 强烈建议你的应用程序显式检查与请求中止有关的所有输入。 但是，你可以通过设置来禁用请求验证`validateRequest`属性中的指令`false`，下面的示例中所示：  
  
 `<%@ Page validateRequest="false" %>`  
  
 若要禁用请求验证你的应用程序，必须修改或创建 Web.config 文件，你的应用程序并设置`validateRequest`属性`pages`部分到`false`，下面的示例中所示：  
  
```  
<configuration>   
  <system.web>   
    <pages validateRequest="false" />   
  </system.web>   
</configuration>   
```  
  
 若要禁用请求验证你的服务器上的所有应用程序，你可以使用此修改 Machine.config 文件。  
  
> [!NOTE]
>  强烈建议你的应用程序显式检查所有输入，它使用以及由 ASP.NET 执行请求验证。 请求验证功能无法捕捉所有攻击，尤其是那些制作专门针对你的应用程序逻辑。  
  
   
  
## Examples  
 下面的代码示例演示如何通过检查恶意用户输入<xref:System.Web.HttpRequestValidationException>。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[HttpRequestValidationException#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpRequestValidationException/CS/httprequestvalidationexception_cs.aspx#1)]
 [!code-aspx-vb[HttpRequestValidationException#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpRequestValidationException/VB/HttpRequestValidationException_VB.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>已重载。 创建 <see cref="T:System.Web.HttpRequestValidationException" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpRequestValidationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequestValidationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpRequestValidationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Web.HttpRequestValidationException" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpRequestValidationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequestValidationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpRequestValidationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpRequestValidationException : string -&gt; System.Web.HttpRequestValidationException" Usage="new System.Web.HttpRequestValidationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">描述错误的字符串。</param>
        <summary>创建具有指定错误消息的新的 <see cref="T:System.Web.HttpRequestValidationException" /> 异常。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容`message`参数用于人工可读。 调用方<xref:System.Web.HttpRequestValidationException.%23ctor%28System.String%29>构造函数需要确保`message`字符串已进行了本地化。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpRequestValidationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequestValidationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpRequestValidationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpRequestValidationException : string * Exception -&gt; System.Web.HttpRequestValidationException" Usage="new System.Web.HttpRequestValidationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">解释异常原因的错误消息。</param>
        <param name="innerException">导致当前异常的异常。 如果此参数不为 <see langword="null" />，则在处理内部异常的 <see langword="catch" /> 块中会引发当前异常。</param>
        <summary>使用指定的错误消息和内部异常（导致此异常的原因）的引用来初始化 <see cref="T:System.Web.HttpRequestValidationException" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因前一个异常而直接引发的异常应在 <xref:System.Exception.InnerException%2A> 属性中包含对前一个异常的引用。 <xref:System.Exception.InnerException%2A>属性返回相同的值传递到<xref:System.Web.HttpRequestValidationException.%23ctor%28System.String%2CSystem.Exception%29>构造函数，或`null`如果<xref:System.Exception.InnerException%2A>属性不会提供内部异常值到<xref:System.Web.HttpRequestValidationException.%23ctor%28System.String%2CSystem.Exception%29>构造函数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>