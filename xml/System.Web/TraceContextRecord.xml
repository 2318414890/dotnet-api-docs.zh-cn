<Type Name="TraceContextRecord" FullName="System.Web.TraceContextRecord">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fbe9572561b1668e9ee30f9da5dd006fda9396db" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39768516" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TraceContextRecord" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TraceContextRecord extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.TraceContextRecord" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TraceContextRecord" />
  <TypeSignature Language="C++ CLI" Value="public ref class TraceContextRecord sealed" />
  <TypeSignature Language="F#" Value="type TraceContextRecord = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示 ASP.NET 跟踪消息和任何关联数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.TraceContextRecord>对象将封装跟踪消息、 类别、 任何相关联<xref:System.Exception>，以及是否通过写入跟踪记录<xref:System.Web.TraceContext.Warn%2A?displayProperty=nameWithType>方法。  
  
 每次调用<xref:System.Web.TraceContext.Write%2A?displayProperty=nameWithType>并<xref:System.Web.TraceContext.Warn%2A?displayProperty=nameWithType>方法将生成<xref:System.Web.TraceContextRecord>添加到对象<xref:System.Web.TraceContextEventArgs.TraceRecords%2A?displayProperty=nameWithType>消息集合。 可以通过处理访问的记录集合<xref:System.Web.TraceContext.TraceFinished>事件。  
  
   
  
## Examples  
 下面的代码示例演示如何注册<xref:System.Web.TraceContextEventHandler>委托来处理<xref:System.Web.TraceContext.TraceFinished>事件。 在此示例中，`OnTraceFinished`方法访问的集合<xref:System.Web.TraceContextRecord>对象通过<xref:System.Web.TraceContextEventArgs.TraceRecords%2A>属性，循环访问它们，并将其写入到响应流。  
  
 [!code-aspx-csharp[System.Web.Trace_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_3/CS/form3cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_3/VB/form3vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.TraceContextEventArgs" />
    <altmember cref="T:System.Web.TraceContextEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TraceContextRecord (string category, string msg, bool isWarning, Exception errorInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string category, string msg, bool isWarning, class System.Exception errorInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContextRecord.#ctor(System.String,System.String,System.Boolean,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (category As String, msg As String, isWarning As Boolean, errorInfo As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TraceContextRecord(System::String ^ category, System::String ^ msg, bool isWarning, Exception ^ errorInfo);" />
      <MemberSignature Language="F#" Value="new System.Web.TraceContextRecord : string * string * bool * Exception -&gt; System.Web.TraceContextRecord" Usage="new System.Web.TraceContextRecord (category, msg, isWarning, errorInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="msg" Type="System.String" />
        <Parameter Name="isWarning" Type="System.Boolean" />
        <Parameter Name="errorInfo" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="category">接收消息的跟踪类别。</param>
        <param name="msg">跟踪消息。</param>
        <param name="isWarning">如果与 <see cref="T:System.Web.TraceContextRecord" /> 关联的方法是 <see cref="Overload:System.Web.TraceContext.Warn" /> 方法，则为 <see langword="true" />；如果跟踪方法是 <see cref="Overload:System.Web.TraceContext.Write" /> 方法，则为 <see langword="false" />。</param>
        <param name="errorInfo">包含其他错误消息的 <see cref="T:System.Exception" /> 对象。</param>
        <summary>初始化 <see cref="T:System.Web.TraceContextRecord" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次调用<xref:System.Web.TraceContext.Write%2A?displayProperty=nameWithType>并<xref:System.Web.TraceContext.Warn%2A?displayProperty=nameWithType>方法将生成<xref:System.Web.TraceContextRecord>添加到对象<xref:System.Web.TraceContextEventArgs.TraceRecords%2A?displayProperty=nameWithType>消息集合。 <xref:System.Web.TraceContext.Warn%2A>方法调用设置<xref:System.Web.TraceContextRecord.IsWarning%2A>属性设置为`true`，而<xref:System.Web.TraceContext.Write%2A>方法调用将其设置为`false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public string Category { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Category" />
      <MemberSignature Language="DocId" Value="P:System.Web.TraceContextRecord.Category" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Category As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Category { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Category : string" Usage="System.Web.TraceContextRecord.Category" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取跟踪记录的用户定义的类别。</summary>
        <value>表示跟踪记录的类别的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类别用于更好地将跟踪消息组织成可识别的组，但可以是任意字符串。 <xref:System.Web.TraceContext>类使用<xref:System.String.Empty?displayProperty=nameWithType>作为方法只能接受其默认类别`message`参数。 ASP.NET 中，将多个跟踪记录写入启用跟踪时，默认类别是"aspx.page"。  
  
   
  
## Examples  
 下面的代码示例演示如何访问<xref:System.Web.TraceContextRecord.Category%2A>的属性<xref:System.Web.TraceContextRecord>，并打印它，并为其关联的跟踪消息`Response`流。  
  
 [!code-aspx-csharp[System.Web.Trace_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_5/CS/form5cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_5/VB/form5vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorInfo">
      <MemberSignature Language="C#" Value="public Exception ErrorInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception ErrorInfo" />
      <MemberSignature Language="DocId" Value="P:System.Web.TraceContextRecord.ErrorInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorInfo As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ ErrorInfo { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorInfo : Exception" Usage="System.Web.TraceContextRecord.ErrorInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与跟踪记录关联的 <see cref="T:System.Exception" />（如果有）。</summary>
        <value>与跟踪记录关联的 <see cref="T:System.Exception" />（如果存在）或 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果正使用跟踪来调试应用程序或进行故障排除错误和异常处理，可以在跟踪记录包含异常。 <xref:System.Web.TraceContextRecord.ErrorInfo%2A>属性是`null`跟踪记录时与之一相关联<xref:System.Web.TraceContext>方法没有显式`errorInfo`提供参数或没有异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWarning">
      <MemberSignature Language="C#" Value="public bool IsWarning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWarning" />
      <MemberSignature Language="DocId" Value="P:System.Web.TraceContextRecord.IsWarning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWarning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWarning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWarning : bool" Usage="System.Web.TraceContextRecord.IsWarning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示跟踪记录是否与 <see cref="Overload:System.Web.TraceContext.Warn" /> 方法调用关联。</summary>
        <value>如果 <see cref="T:System.Web.TraceContextRecord" /> 与 <see cref="Overload:System.Web.TraceContext.Warn" /> 方法调用关联，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示了如何检查<xref:System.Web.TraceContextRecord.IsWarning%2A>的属性<xref:System.Web.TraceContextRecord>以确定是否已写入该记录包含消息<xref:System.Web.TraceContext.Warn%2A>或<xref:System.Web.TraceContext.Write%2A>方法调用。 如果跟踪记录一条警告消息，不是一条错误消息采取不同的操作。  
  
 [!code-aspx-csharp[System.Web.Trace_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_4/CS/form4cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_4/VB/form4vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Web.TraceContextRecord.Message" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Message { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="System.Web.TraceContextRecord.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用户定义的跟踪消息。</summary>
        <value>表示跟踪记录的消息的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 消息可以是任意字符串，用于写入详细的跟踪信息。 它对应于消息参数传递给<xref:System.Web.TraceContext.Write%2A?displayProperty=nameWithType>和<xref:System.Web.TraceContext.Warn%2A?displayProperty=nameWithType>方法。 可以运行时的值，消息方向，并指导你完成程序的执行或其他诊断数据的信息。  
  
   
  
## Examples  
 下面的代码示例演示如何访问<xref:System.Web.TraceContextRecord.Message%2A>的属性<xref:System.Web.TraceContextRecord>，并将其打印到`Response`流。  
  
 [!code-aspx-csharp[System.Web.Trace_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_4/CS/form4cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_4/VB/form4vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>