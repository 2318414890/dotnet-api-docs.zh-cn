<Type Name="DefaultHttpHandler" FullName="System.Web.DefaultHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="79bd77c8af8fea8edc4a0bde7adc3570900b1358" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30609241" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DefaultHttpHandler : System.Web.IHttpAsyncHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultHttpHandler extends System.Object implements class System.Web.IHttpAsyncHandler, class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.DefaultHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultHttpHandler&#xA;Implements IHttpAsyncHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultHttpHandler : System::Web::IHttpAsyncHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示默认 HTTP 处理程序的属性和方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Web.DefaultHttpHandler>请求截获已配置通过 Internet 信息服务 (IIS) 6.0 和没有显式的绑定应用于请求的扩展时，对象会截获 HTTP 管道中的传入请求。  
  
 可以通过在 IIS 6.0 中引入的通配符应用程序映射功能设置请求截获。 有关详细信息，搜索[MSDN 库](http://go.microsoft.com/fwlink/?linkid=37118)有关使用通配符应用程序映射重新映射 URL 信息。  
  
 <xref:System.Web.DefaultHttpHandler>类实现<xref:System.Web.IHttpAsyncHandler>接口，以提供异步请求处理。 有关 HTTP 处理程序的常规信息，请参阅[HTTP 处理程序和 HTTP 模块概述](http://msdn.microsoft.com/library/f540bdeb-d22e-4e1d-ba8a-fe6c9926283b)。 此外，有关详细信息，请参阅以下：  
  
-   有关创建异步的 HTTP 处理程序，请参阅[演练： 创建异步的 HTTP 处理程序](http://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9)。  
  
-   有关注册 HTTP 处理程序，请参阅[如何： 注册 HTTP 处理程序](http://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60)。  
  
 类可以派生自<xref:System.Web.DefaultHttpHandler>类以提供自定义的处理的请求。 派生自的异步 HTTP 处理程序<xref:System.Web.DefaultHttpHandler>无法重写<xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A>方法可以更改如何处理请求。  
  
 A<xref:System.Web.DefaultHttpHandler>不使用 ASP.NET 错误。 现有内容，使用 IIS 错误或 propriety ISAPI 自定义错误机制将工作保持不变。  
  
   
  
## Examples  
 下面的代码示例演示如何实现一个自定义的 HTTP 处理程序，通过从派生<xref:System.Web.DefaultHttpHandler>类。  
  
 [!code-csharp[System.Web.DefaultHttpHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/CS/source.cs#1)]
 [!code-vb[System.Web.DefaultHttpHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHttpHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultHttpHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.DefaultHttpHandler" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginProcessRequest (context As HttpContext, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">为用于服务 HTTP 请求的内部服务器对象提供引用的对象。</param>
        <param name="callback">将在完成异步方法调用时调用的方法。 如果 <c>callback</c> 为 <see langword="null" />，则不调用委托。</param>
        <param name="state">处理请求所需的所有状态数据。</param>
        <summary>启动对 HTTP 处理程序的异步调用。</summary>
        <returns>包含有关进程状态信息的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在创建时异步使用的 HTTP 处理程序，您的处理程序必须实现异步<xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A>和<xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A>asp.net 以异步方式调用的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">处理请求的前提条件未满足，被请求的文件具有 .asp 后缀或请求是通过 POST 发送的。</exception>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.Context" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与当前 <see cref="T:System.Web.DefaultHttpHandler" /> 对象关联的上下文。</summary>
        <value>一个包含当前上下文的 <see cref="T:System.Web.HttpContext" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.Context%2A>属性提供访问权限当前<xref:System.Web.HttpContext>派生类的对象。 <xref:System.Web.HttpContext>对象提供对内部函数访问<xref:System.Web.HttpApplication.Request%2A>， <xref:System.Web.HttpApplication.Response%2A>，和<xref:System.Web.HttpApplication.Server%2A>请求的属性。 有关访问的上下文信息的详细信息，请参阅<xref:System.Web.HttpContext>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="EndProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndProcessRequest (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndProcessRequest(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">一个包含有关进程状态的信息的对象。</param>
        <summary>为异步进程提供一种结束方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A>方法会引发任何异常捕获在异步过程。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteUrlHeaders">
      <MemberSignature Language="C#" Value="protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ExecuteUrlHeaders As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Specialized::NameValueCollection ^ ExecuteUrlHeaders { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要随请求一起传输的请求标头和请求值的集合。</summary>
        <value>包含请求标头和值的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.ExecuteUrlHeaders%2A>属性返回一个空集合，除非它派生自的类中填充，否则<xref:System.Web.DefaultHttpHandler>类。 添加标头将追加到然后再将请求传递到 Internet 信息服务 (IIS) 中的返回在请求中的标头的集合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReusable { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.IHttpHandler.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个布尔值，该值指示另一个请求可以使用 <see cref="T:System.Web.DefaultHttpHandler" /> 类的当前实例。</summary>
        <value>
          如果 <see cref="T:System.Web.DefaultHttpHandler" /> 是可重用的，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要显式设置<xref:System.Web.DefaultHttpHandler.IsReusable%2A>属性`true`或`false`，重写<xref:System.Web.DefaultHttpHandler.IsReusable%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnExecuteUrlPreconditionFailure">
      <MemberSignature Language="C#" Value="public virtual void OnExecuteUrlPreconditionFailure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExecuteUrlPreconditionFailure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnExecuteUrlPreconditionFailure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnExecuteUrlPreconditionFailure();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在前提条件阻止 <see cref="T:System.Web.DefaultHttpHandler" /> 对象处理请求时被调用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前提条件指定的请求标头字段中的客户端，并在 Web 服务器上进行评估。 例如，通过使用前置条件，客户端可以阻止将请求的方法 （例如，GET） 应用于资源的一个预期以外的资源。 有关详细信息，请参阅 》 中部分 14 中，"标头字段定义，"[超文本传输协议-HTTP/1.1](http://go.microsoft.com/fwlink/?LinkID=73147) World Wide Web Consortium (W3C) 网站上的规范。  
  
 <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A>时前提条件阻止调用方法<xref:System.Web.DefaultHttpHandler>从处理请求的对象。 派生类可能会重写<xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A>方法前置条件失败时引发异常。 <xref:System.Web.DefaultHttpHandler>不会引发异常<xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A>方法。  
  
 以下任一将导致前置条件失败：  
  
-   调用 <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>。  
  
-   调用 <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>。  
  
-   调用 <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>。  
  
-   更改响应的缓存策略。  
  
-   添加<xref:System.IO.Stream>对象作为筛选到<xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideExecuteUrlPath">
      <MemberSignature Language="C#" Value="public virtual string OverrideExecuteUrlPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string OverrideExecuteUrlPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OverrideExecuteUrlPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ OverrideExecuteUrlPath();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重写当前请求的目标 URL。</summary>
        <returns>要在请求中使用的被重写的 URL；如果未提供被重写的 URL，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A>方法返回`null`派生自的类中重写则<xref:System.Web.DefaultHttpHandler>类。  
  
 <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A>仅当 ASP.NET 工作进程隔离模式在运行 IIS 6.0 上和响应未修改之前调用方法<xref:System.Web.DefaultHttpHandler>调用对象。 通过以下任一操作都会修改响应：  
  
-   调用 <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>。  
  
-   调用 <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>。  
  
-   调用 <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>。  
  
-   更改响应的缓存策略。  
  
-   添加<xref:System.IO.Stream>对象作为筛选到<xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">为用于服务 HTTP 请求的内部服务器对象提供引用的对象。</param>
        <summary>使 <see cref="T:System.Web.DefaultHttpHandler" /> 对象能够处理 HTTP Web 请求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A>不应该以同步方式调用方法。 派生自的类<xref:System.Web.DefaultHttpHandler>类可以重写<xref:System.Web.DefaultHttpHandler.ProcessRequest%2A>以提供自定义的请求处理。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" /> 被同步地调用。</exception>
        <altmember cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
  </Members>
</Type>