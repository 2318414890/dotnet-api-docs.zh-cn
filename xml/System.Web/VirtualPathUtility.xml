<Type Name="VirtualPathUtility" FullName="System.Web.VirtualPathUtility">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="466ee68d7b69b803793258fd12dc6f5418956a9f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30610421" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class VirtualPathUtility" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit VirtualPathUtility extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.VirtualPathUtility" />
  <TypeSignature Language="VB.NET" Value="Public Class VirtualPathUtility" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualPathUtility abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为常见的虚拟路径操作提供实用工具方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.VirtualPathUtility>类提供了对常见操作涉及虚拟路径的实用工具方法。 有关 ASP.NET 服务器控件和服务器代码，使用 Web 应用程序根目录运算符的虚拟路径波形符 （~），通常用于而不是相对和绝对路径。 有关详细信息，请参阅[ASP.NET Web 项目路径](http://msdn.microsoft.com/library/2447f50c-b849-483c-8093-85ed53e7a5bd)。  
  
 使用<xref:System.Web.VirtualPathUtility>类时需要将相对于应用程序路径转换为绝对虚拟路径，如可能是这种情况在开发自定义 Web 服务处理程序。  
  
 绝对的虚拟路径以斜杠 （/） 开头。 相对虚拟路径是相对于应用程序根目录中，如果只是波形符 （~） 或开头颚化符和使用双反斜杠 (~\\\\) 或颚化符和斜杠标记 (~ /)。 使虚拟路径相对使得独立于应用程序路径。  
  
 可以从获取应用程序的虚拟目录<xref:System.Web.HttpRuntime.AppDomainAppVirtualPath%2A>和<xref:System.Web.HttpRequest.ApplicationPath%2A>属性。  
  
> [!NOTE]
>  <xref:System.Web.VirtualPathUtility>类不用于安全或规范化目的。 有关 Web 应用程序安全性的详细信息，请参阅[Web 应用程序安全威胁概述](http://msdn.microsoft.com/library/88d61678-f84e-4622-ae80-53128821855a)。 有关一般 URL 处理功能，请参阅<xref:System.Uri>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.VirtualPathUtility>类和一些方法。 首先，<xref:System.Web.HttpRequest.FilePath%2A>属性生成网页上的虚拟路径。 <xref:System.Web.VirtualPathUtility.GetFileName%2A>， <xref:System.Web.VirtualPathUtility.GetExtension%2A>，和<xref:System.Web.VirtualPathUtility.GetDirectory%2A>方法返回的虚拟路径相关信息。 接下来，<xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A>属性生成当前请求，这可能是从不同的虚拟路径<xref:System.Web.HttpRequest.FilePath%2A>属性，如果<xref:System.Web.HttpResponse.Redirect%2A>调用了方法。 <xref:System.Web.VirtualPathUtility.IsAbsolute%2A>， <xref:System.Web.VirtualPathUtility.IsAppRelative%2A>，和<xref:System.Web.VirtualPathUtility.ToAppRelative%2A>方法返回的虚拟路径相关信息。  
  
 [!code-aspx-csharp[System.Web.VirtualPathUtility#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.VirtualPathUtility/cs/virtualpathutilitycs.aspx#1)]
 [!code-aspx-vb[System.Web.VirtualPathUtility#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.VirtualPathUtility/vb/virtualpathutilityvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.HttpRequest" />
  </Docs>
  <Members>
    <Member MemberName="AppendTrailingSlash">
      <MemberSignature Language="C#" Value="public static string AppendTrailingSlash (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string AppendTrailingSlash(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.VirtualPathUtility.AppendTrailingSlash(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AppendTrailingSlash (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ AppendTrailingSlash(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要向其追加正斜杠的虚拟路径。</param>
        <summary>将正斜杠 (/) 追加到虚拟路径的末尾（如果尚不存在正斜杠）。</summary>
        <returns>修改后的虚拟路径。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果文本斜杠标记 （/） 存在的虚拟路径的末尾，则不会修改的虚拟路径。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.VirtualPathUtility.RemoveTrailingSlash(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string basePath, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string basePath, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.VirtualPathUtility.Combine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (basePath As String, relativePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ basePath, System::String ^ relativePath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePath" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="basePath">基路径。</param>
        <param name="relativePath">相对路径。</param>
        <summary>将一个基路径和一个相对路径进行组合。</summary>
        <returns>组合后的 <paramref name="basePath" /> 和 <paramref name="relativePath" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.VirtualPathUtility.Combine%2A>方法返回的值<xref:System.Web.HttpRuntime.AppDomainAppVirtualPath%2A>如果相对路径是完全波形符 （~） 的属性。  
  
 <xref:System.Web.VirtualPathUtility.Combine%2A>方法使用<xref:System.Web.HttpRuntime.AppDomainAppVirtualPath%2A>属性值而不是基路径中，如果以波形符和斜杠标记开头的相对路径 (~ /); 否则为<xref:System.Web.VirtualPathUtility.Combine%2A>方法使用的基路径。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="relativePath" /> 是一个物理路径。  
  
 或  
  
 <paramref name="relativePath" /> 包含一个或多个冒号。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="relativePath" /> 为 <see langword="null" /> 或空字符串。  
  
 或  
  
 <paramref name="basePath" /> 为 <see langword="null" /> 或空字符串。</exception>
        <altmember cref="P:System.Web.HttpRuntime.AppDomainAppVirtualPath" />
        <altmember cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetDirectory">
      <MemberSignature Language="C#" Value="public static string GetDirectory (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDirectory(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.VirtualPathUtility.GetDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectory (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetDirectory(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">虚拟路径。</param>
        <summary>返回虚拟路径的目录部分。</summary>
        <returns>虚拟路径中引用的目录。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`virtualPath`不根路径; 也就是说，它不等于根目录运算符 （波形符 [~]），不以开头波形符 （~），例如波形符和斜杠标记 (~ /) 或波形符和使用双反斜杠 (~ / /)，或不以斜杠标记 （/） 开头<xref:System.ArgumentException>异常 则会引发。  
  
 如果传递到的虚拟路径<xref:System.Web.VirtualPathUtility.GetDirectory%2A>方法是`"/images/image1.gif"`，则返回的目录是`"/images"`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.VirtualPathUtility.GetFileName%2A>， <xref:System.Web.VirtualPathUtility.GetExtension%2A>，和<xref:System.Web.VirtualPathUtility.GetDirectory%2A>方法。  
  
 [!code-csharp[System.Web.VirtualPathUtility#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.VirtualPathUtility/cs/virtualpathutilitycs.aspx#2)]
 [!code-vb[System.Web.VirtualPathUtility#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.VirtualPathUtility/vb/virtualpathutilityvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="virtualPath" /> 不含有根路径。  
  
 \- 或 -  
  
 <paramref name="virtualPath" /> 为 <see langword="null" /> 或空字符串。</exception>
        <altmember cref="M:System.Web.VirtualPathUtility.GetExtension(System.String)" />
        <altmember cref="M:System.Web.VirtualPathUtility.GetFileName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public static string GetExtension (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetExtension(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.VirtualPathUtility.GetExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExtension (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetExtension(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">虚拟路径。</param>
        <summary>检索虚拟路径中引用的文件的扩展名。</summary>
        <returns>文件扩展名字符串，包括句点 (.)、<see langword="null" /> 或空字符串 ("")。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果传递到的虚拟路径<xref:System.Web.VirtualPathUtility.GetExtension%2A>方法是`"/images/image1.gif"`，返回的扩展名是`".gif"`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.VirtualPathUtility.GetFileName%2A>， <xref:System.Web.VirtualPathUtility.GetExtension%2A>，和<xref:System.Web.VirtualPathUtility.GetDirectory%2A>方法。  
  
 [!code-csharp[System.Web.VirtualPathUtility#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.VirtualPathUtility/cs/virtualpathutilitycs.aspx#2)]
 [!code-vb[System.Web.VirtualPathUtility#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.VirtualPathUtility/vb/virtualpathutilityvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="virtualPath" /> 包含 <see cref="F:System.IO.Path.InvalidPathChars" /> 中定义的一个或多个无效字符。</exception>
        <altmember cref="M:System.Web.VirtualPathUtility.GetDirectory(System.String)" />
        <altmember cref="M:System.Web.VirtualPathUtility.GetFileName(System.String)" />
        <altmember cref="M:System.IO.Path.GetExtension(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetFileName">
      <MemberSignature Language="C#" Value="public static string GetFileName (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFileName(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.VirtualPathUtility.GetFileName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileName (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFileName(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">虚拟路径。</param>
        <summary>检索虚拟路径中引用的文件的文件名。</summary>
        <returns>
          <paramref name="virtualPath" /> 中的最后的目录字符后面的文件名文本；否则为最后的目录名称（如果 <paramref name="virtualPath" /> 的最后一个字符是目录字符或卷分隔符)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果传递到的虚拟路径<xref:System.Web.VirtualPathUtility.GetFileName%2A>方法是`"/images/image1.gif"`，返回的文件名是`"image1.gif"`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.VirtualPathUtility.GetFileName%2A>， <xref:System.Web.VirtualPathUtility.GetExtension%2A>，和<xref:System.Web.VirtualPathUtility.GetDirectory%2A>方法。  
  
 [!code-csharp[System.Web.VirtualPathUtility#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.VirtualPathUtility/cs/virtualpathutilitycs.aspx#2)]
 [!code-vb[System.Web.VirtualPathUtility#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.VirtualPathUtility/vb/virtualpathutilityvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="virtualPath" /> 包含 <see cref="F:System.IO.Path.InvalidPathChars" /> 中定义的一个或多个无效字符。</exception>
        <altmember cref="M:System.Web.VirtualPathUtility.GetExtension(System.String)" />
        <altmember cref="M:System.Web.VirtualPathUtility.GetDirectory(System.String)" />
        <altmember cref="M:System.IO.Path.GetFileName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsAbsolute">
      <MemberSignature Language="C#" Value="public static bool IsAbsolute (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAbsolute(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.VirtualPathUtility.IsAbsolute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAbsolute (virtualPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAbsolute(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要检查的虚拟路径。</param>
        <summary>返回一个布尔值，该值指示指定的虚拟路径是否为绝对路径，也就是以正斜杠 (/) 开头。</summary>
        <returns>
          如果 <paramref name="virtualPath" /> 是绝对路径，并且不为 <see langword="true" /> 或空字符串 ("")，则为 <see langword="null" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 虚拟路径是绝对地址，如果以斜杠 （/）。 例如，<xref:System.Web.HttpRequest.Path%2A>属性将返回绝对的虚拟路径。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.VirtualPathUtility.IsAbsolute%2A>， <xref:System.Web.VirtualPathUtility.IsAppRelative%2A>，和<xref:System.Web.VirtualPathUtility.ToAppRelative%2A>方法。  
  
 [!code-csharp[System.Web.VirtualPathUtility#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.VirtualPathUtility/cs/virtualpathutilitycs.aspx#3)]
 [!code-vb[System.Web.VirtualPathUtility#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.VirtualPathUtility/vb/virtualpathutilityvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="virtualPath" /> 为 <see langword="null" />。</exception>
        <altmember cref="P:System.Web.HttpRequest.Path" />
        <altmember cref="M:System.Web.VirtualPathUtility.IsAppRelative(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsAppRelative">
      <MemberSignature Language="C#" Value="public static bool IsAppRelative (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAppRelative(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.VirtualPathUtility.IsAppRelative(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAppRelative (virtualPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAppRelative(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要检查的虚拟路径。</param>
        <summary>返回一个布尔值，该值指示指定的虚拟路径是否为相对于应用程序的相对路径。</summary>
        <returns>
          如果 <paramref name="virtualPath" /> 相对于应用程序，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 虚拟路径可以是只需根目录运算符 （波形符 [~]），也可以开头根目录运算符。 如果`virtualPath`是`null`、<xref:System.ArgumentNullException>引发异常。 如果`virtualPath`为空字符串 ("")，则<xref:System.Web.VirtualPathUtility.IsAppRelative%2A>方法返回`false`。  
  
> [!NOTE]
>  `"~` `filename` `"` 不是有效的虚拟路径，并返回`false`为<xref:System.Web.VirtualPathUtility.IsAppRelative%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.VirtualPathUtility.IsAbsolute%2A>， <xref:System.Web.VirtualPathUtility.IsAppRelative%2A>，和<xref:System.Web.VirtualPathUtility.ToAppRelative%2A>方法。  
  
 [!code-csharp[System.Web.VirtualPathUtility#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.VirtualPathUtility/cs/virtualpathutilitycs.aspx#3)]
 [!code-vb[System.Web.VirtualPathUtility#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.VirtualPathUtility/vb/virtualpathutilityvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="virtualPath" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.Web.VirtualPathUtility.IsAbsolute(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MakeRelative">
      <MemberSignature Language="C#" Value="public static string MakeRelative (string fromPath, string toPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string MakeRelative(string fromPath, string toPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.VirtualPathUtility.MakeRelative(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeRelative (fromPath As String, toPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ MakeRelative(System::String ^ fromPath, System::String ^ toPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPath" Type="System.String" />
        <Parameter Name="toPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fromPath">要返回的相对虚拟路径的起始虚拟路径。</param>
        <param name="toPath">要返回的相对虚拟路径的结束虚拟路径。</param>
        <summary>返回从一个包含根操作符（波形符 [~]）的虚拟路径到另一个此类虚拟路径的相对虚拟路径。</summary>
        <returns>从 <paramref name="fromPath" /> 到 <paramref name="toPath" /> 的相对虚拟路径。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`fromPath`和`toPath`参数不取得 root 权限; 也就是说，它们不相等根目录运算符 （波形符 [~]），不会启动与波形符 （~），例如波形符和斜杠标记 (~ /) 或波形符和使用双反斜杠 (~ / /)，或使用的斜杠标记 （不启动/），<xref:System.ArgumentException>引发异常。  
  
 确定的相对路径不使用查询字符串参数和 URI 中使用的 HTML 定位点。  
  
 如果`fromPath`是`"/directory1/file1.aspx"`和`toPath`是`"/directory2/file2.aspx"`、<xref:System.Web.VirtualPathUtility.MakeRelative%2A>方法返回`"../directory2/file2.aspx"`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromPath" /> 不含有根路径。  
  
 \- 或 -  
  
 <paramref name="toPath" /> 不含有根路径。</exception>
        <altmember cref="M:System.Uri.MakeRelative(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveTrailingSlash">
      <MemberSignature Language="C#" Value="public static string RemoveTrailingSlash (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RemoveTrailingSlash(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.VirtualPathUtility.RemoveTrailingSlash(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveTrailingSlash (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RemoveTrailingSlash(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要移除末尾的任何正斜杠的虚拟路径。</param>
        <summary>从虚拟路径移除末尾的正斜杠 (/)。</summary>
        <returns>如果虚拟路径尚不是根目录 ("/")，则返回末尾没有正斜杠的虚拟路径；否则返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.VirtualPathUtility.RemoveTrailingSlash%2A>方法从虚拟路径的末尾移除斜杠标记 （/）。 如果已指定的虚拟路径的根目录 (`"/"`)，不执行任何操作。 如果虚拟路径`null`或空字符串 ("")，则<xref:System.Web.VirtualPathUtility.RemoveTrailingSlash%2A>方法返回`null`。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.VirtualPathUtility.AppendTrailingSlash(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToAbsolute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将虚拟路径转换为应用程序绝对路径。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToAbsolute">
      <MemberSignature Language="C#" Value="public static string ToAbsolute (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToAbsolute(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.VirtualPathUtility.ToAbsolute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToAbsolute (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToAbsolute(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要转换为应用程序相对路径的虚拟路径。</param>
        <summary>将虚拟路径转换为应用程序绝对路径。</summary>
        <returns>指定的虚拟路径的绝对路径表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序绝对路径是应用程序路径使用而不是根目录运算符 （波形符 [~]） 的位置。  
  
 如果`virtualPath`是：  
  
-   绝对，<xref:System.Web.VirtualPathUtility.ToAbsolute%2A>方法返回未更改的虚拟路径。  
  
-   相对于应用程序，<xref:System.Web.VirtualPathUtility.ToAbsolute%2A>方法将当前的应用程序虚拟目录路径追加到的开头`virtualPath`。 例如，可以从访问当前的应用程序虚拟目录路径<xref:System.Web.HttpRuntime.AppDomainAppVirtualPath%2A>属性。  
  
-   未取得 root 权限，<xref:System.Web.VirtualPathUtility.ToAbsolute%2A>方法引发<xref:System.ArgumentOutOfRangeException>异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="virtualPath" /> 不含有根路径。</exception>
        <exception cref="T:System.Web.HttpException">前导双句点 (..) 用于退出顶级目录。</exception>
        <altmember cref="P:System.Web.HttpRuntime.AppDomainAppVirtualPath" />
      </Docs>
    </Member>
    <Member MemberName="ToAbsolute">
      <MemberSignature Language="C#" Value="public static string ToAbsolute (string virtualPath, string applicationPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToAbsolute(string virtualPath, string applicationPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.VirtualPathUtility.ToAbsolute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToAbsolute (virtualPath As String, applicationPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToAbsolute(System::String ^ virtualPath, System::String ^ applicationPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="applicationPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要转换为应用程序相对路径的虚拟路径。</param>
        <param name="applicationPath">要用于将 <c>virtualPath</c> 转换为相对路径的应用程序路径。</param>
        <summary>使用指定的应用程序路径将虚拟路径转换为应用程序绝对路径。</summary>
        <returns>
          <paramref name="virtualPath" /> 的绝对虚拟路径表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.VirtualPathUtility.ToAbsolute%2A>重载<xref:System.Web.VirtualPathUtility.ToAbsolute%2A>方法使用提供的应用程序路径而不是当前的应用程序路径。  
  
 如果`virtualPath`是：  
  
-   绝对，<xref:System.Web.VirtualPathUtility.ToAbsolute%2A>方法返回未更改的虚拟路径。  
  
-   相对于应用程序，<xref:System.Web.VirtualPathUtility.ToAbsolute%2A>方法将添加`applicationPath`到的虚拟路径的开头。  
  
-   未取得 root 权限，<xref:System.Web.VirtualPathUtility.ToAbsolute%2A>方法引发<xref:System.ArgumentOutOfRangeException>异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="applicationPath" /> 不含有根路径。</exception>
        <exception cref="T:System.Web.HttpException">前导双句点 (..) 在应用程序路径中用于退出顶级目录。</exception>
        <altmember cref="P:System.Web.HttpRuntime.AppDomainAppVirtualPath" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToAppRelative">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将虚拟路径转换为应用程序相对路径。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToAppRelative">
      <MemberSignature Language="C#" Value="public static string ToAppRelative (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToAppRelative(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.VirtualPathUtility.ToAppRelative(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToAppRelative (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToAppRelative(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要转换为应用程序相对路径的虚拟路径。</param>
        <summary>使用 <see cref="P:System.Web.HttpRuntime.AppDomainAppVirtualPath" /> 属性中的应用程序虚拟路径将虚拟路径转换为应用程序相对路径。</summary>
        <returns>
          <paramref name="virtualPath" /> 的应用程序相对路径表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果应用程序的虚拟路径是`"myapp"`和虚拟路径`"/myApp/sub/default.asp"`传递到<xref:System.Web.VirtualPathUtility.ToAppRelative%2A>方法，生成的应用程序相对路径是`"~/sub/default.aspx"`。  
  
 如果`virtualPath`才会使用当前的应用程序路径、<xref:System.Web.VirtualPathUtility.ToAppRelative%2A>方法返回未更改的虚拟路径。  
  
 如果`virtualPath`是应用程序路径中，相同根目录运算符 （波形符 [~]），将返回。 例如，可以从访问当前的应用程序虚拟目录路径<xref:System.Web.HttpRuntime.AppDomainAppVirtualPath%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.VirtualPathUtility.IsAbsolute%2A>， <xref:System.Web.VirtualPathUtility.IsAppRelative%2A>，和<xref:System.Web.VirtualPathUtility.ToAppRelative%2A>方法。  
  
 [!code-csharp[System.Web.VirtualPathUtility#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.VirtualPathUtility/cs/virtualpathutilitycs.aspx#3)]
 [!code-vb[System.Web.VirtualPathUtility#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.VirtualPathUtility/vb/virtualpathutilityvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="virtualPath" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.Web.VirtualPathUtility.ToAppRelative(System.String,System.String)" />
        <altmember cref="P:System.Web.HttpRuntime.AppDomainAppVirtualPath" />
      </Docs>
    </Member>
    <Member MemberName="ToAppRelative">
      <MemberSignature Language="C#" Value="public static string ToAppRelative (string virtualPath, string applicationPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToAppRelative(string virtualPath, string applicationPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.VirtualPathUtility.ToAppRelative(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToAppRelative (virtualPath As String, applicationPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToAppRelative(System::String ^ virtualPath, System::String ^ applicationPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="applicationPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要转换为应用程序相对路径的虚拟路径。</param>
        <param name="applicationPath">要用于将 <c>virtualPath</c> 转换为相对路径的应用程序路径。</param>
        <summary>使用指定的应用程序路径将虚拟路径转换为应用程序相对路径。</summary>
        <returns>
          <paramref name="virtualPath" /> 的应用程序相对路径表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.VirtualPathUtility.ToAppRelative%2A>重载<xref:System.Web.VirtualPathUtility.ToAppRelative%2A>方法使用`applicationPath`而不是当前的应用程序路径。 如果`virtualPath`开头不`applicationPath`、<xref:System.Web.VirtualPathUtility.ToAppRelative%2A>方法返回未更改的虚拟路径。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.VirtualPathUtility.ToAppRelative(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>