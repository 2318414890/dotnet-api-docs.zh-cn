<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HttpApplicationState.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac516f2143bf2be7e6b84dc7a430caca84732d94bfd.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16f2143bf2be7e6b84dc7a430caca84732d94bfd</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Web.HttpApplicationState">
          <source>Enables sharing of global information across multiple sessions and requests within an ASP.NET application.</source>
          <target state="translated">允许共享 ASP.NET 应用程序内多个会话和请求之间的全局信息。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>An ASP.NET application is the sum of all files, pages, handlers, modules, and code within the scope of a virtual directory and its subdirectories on a single Web server.</source>
          <target state="translated">ASP.NET 应用程序是所有文件、 页、 处理程序、 模块和的作用域的虚拟目录以及在一台 Web 服务器上的及其子目录中的代码的总数。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>A single instance of an <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> class is created the first time a client requests any URL resource from within a particular ASP.NET application virtual directory.</source>
          <target state="translated">单个实例<ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>创建第一次客户端请求从特定的 ASP.NET 应用程序虚拟目录中的任何 URL 资源类。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>A separate single instance is created for each ASP.NET application on a Web server.</source>
          <target state="translated">为每个 Web 服务器上的 ASP.NET 应用程序创建单独的单个实例。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>A reference to each instance is then exposed via the intrinsic <ph id="ph1">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object.</source>
          <target state="translated">对每个实例的引用随后将通过内部函数<ph id="ph1">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>Application state is not shared across either a Web farm (in which an application is hosted across multiple servers) or a Web garden (in which an application is hosted across multiple processes on the same computer).</source>
          <target state="translated">不跨 Web 场 （在其中应用程序承载跨多个服务器） 或 Web 园 （在其中应用程序承载在同一台计算机上的多个进程之间） 共享应用程序状态。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>This type is thread safe.</source>
          <target state="translated">此类型是线程安全的。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
          <source>The name of the object to be added to the collection.</source>
          <target state="translated">要添加到集合中的对象名。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
          <source>The value of the object.</source>
          <target state="translated">对象的值。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
          <source>Adds a new object to the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated">将新的对象添加到 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 集合中。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
          <source>The following example adds two application variables named MyAppVar1 and MyAppVar2 to the Application collection.</source>
          <target state="translated">下面的示例将添加到应用程序集合中名为 MyAppVar1 和 MyAppVar2 的两个应用程序变量。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.AllKeys">
          <source>Gets the access keys in the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 集合中的访问键。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.AllKeys">
          <source>A string array of <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object names.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 对象名的字符串数组。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.AllKeys">
          <source>The following example fills a string array with all the object names in the application state collection.</source>
          <target state="translated">下面的示例填充应用程序状态集合中的所有对象名称的字符串数组。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Clear">
          <source>Removes all objects from an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 集合中移除所有对象。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Clear">
          <source>The following example removes all <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> variables from the collection.</source>
          <target state="translated">下面的示例中移除所有<ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>从集合的变量。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Contents">
          <source>Gets a reference to the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object.</source>
          <target state="translated">获取对 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 对象的引用。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Contents">
          <source>A reference to the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 对象的引用。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Contents">
          <source>This property provides compatibility with earlier versions of ASP.</source>
          <target state="translated">此属性提供与 ASP 的早期版本的兼容性。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Contents">
          <source>The following example creates a new <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> object that is used to access the object names in the application state collection.</source>
          <target state="translated">下面的示例创建一个新<ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>用于访问应用程序状态集合中的对象名称的对象。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Count">
          <source>Gets the number of objects in the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 集合中的对象数。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Count">
          <source>The number of item objects in the collection.</source>
          <target state="translated">集合中的 Item 对象数。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Count">
          <source>The default is 0.</source>
          <target state="translated">默认值为 0。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Count">
          <source>The following example executes only if the number of objects in the collection exceeds five.</source>
          <target state="translated">仅对集合中对象数超过五个时，将执行下面的示例。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="T:System.Web.HttpApplicationState">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by name or index.</source>
          <target state="translated">通过名称或索引获取 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.Int32)">
          <source>The index of the application state object.</source>
          <target state="translated">应用程序状态对象的索引。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.Int32)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by numerical index.</source>
          <target state="translated">通过数字索引获取 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.Int32)">
          <source>The object referenced by <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 所引用的对象。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Get(System.Int32)">
          <source>The following example returns the first object (index = 0) from the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> collection of the intrinsic <ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object and copies it to a new object variable.</source>
          <target state="translated">下面的示例返回的第一个对象 (索引 = 0) 从<ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>的内部函数的集合<ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph>对象，并将其复制到新的对象变量。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.String)">
          <source>The name of the object.</source>
          <target state="translated">对象的名称。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.String)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by name.</source>
          <target state="translated">通过名称获取 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.String)">
          <source>The object referenced by <ph id="ph1">&lt;paramref name="name" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 所引用的对象。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Get(System.String)">
          <source>The following example returns an object named MyAppVar1 from the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> collection of the intrinsic <ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object and copies it to a new object variable.</source>
          <target state="translated">下面的示例返回一个名为从 MyAppVar1<ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>的内部函数的集合<ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph>对象，并将其复制到新的对象变量。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
          <source>The index of the application state object.</source>
          <target state="translated">应用程序状态对象的索引。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object name by index.</source>
          <target state="translated">通过索引获取 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 对象名。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
          <source>The name under which the application state object was saved.</source>
          <target state="translated">保存应用程序状态对象所使用的名称。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
          <source>The following example returns the names of all the objects in the application state collection and stores the names in a string array.</source>
          <target state="translated">下面的示例应用程序状态集合中返回的所有对象的名称和字符串数组中存储的名称。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="T:System.Web.HttpApplicationState">
          <source>Gets access to an object in an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated">获取对 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 集合中的对象的访问。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="T:System.Web.HttpApplicationState">
          <source>This property is overloaded to allow access to an object by name or numerical index.</source>
          <target state="translated">重载该属性以允许通过名称或数字索引访问对象。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Item(System.Int32)">
          <source>The numerical index of the object in the collection.</source>
          <target state="translated">集合中对象的数字索引。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Item(System.Int32)">
          <source>Gets a single <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by index.</source>
          <target state="translated">通过索引获取单个 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Item(System.Int32)">
          <source>The object referenced by <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 所引用的对象。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Item(System.Int32)">
          <source>The following example returns the first object (index = 0) from the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> collection of the intrinsic <ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object and copies it to a new object variable.</source>
          <target state="translated">下面的示例返回的第一个对象 (索引 = 0) 从<ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>的内部函数的集合<ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph>对象，并将其复制到新的对象变量。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Item(System.String)">
          <source>The name of the object in the collection.</source>
          <target state="translated">集合中对象的名称。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Item(System.String)">
          <source>Gets the value of a single <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by name.</source>
          <target state="translated">通过名称获取单个 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 对象的值。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Item(System.String)">
          <source>The object referenced by <ph id="ph1">&lt;paramref name="name" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 所引用的对象。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Item(System.String)">
          <source>The following example returns an object named <ph id="ph1">`MyAppVar1`</ph> from the <ph id="ph2">&lt;xref:System.Web.HttpApplicationState&gt;</ph> collection of the intrinsic <ph id="ph3">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object and copies it to a new object variable.</source>
          <target state="translated">下面的示例返回一个名为<ph id="ph1">`MyAppVar1`</ph>从<ph id="ph2">&lt;xref:System.Web.HttpApplicationState&gt;</ph>的内部函数的集合<ph id="ph3">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph>对象，并将其复制到新的对象变量。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Lock">
          <source>Locks access to an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> variable to facilitate access synchronization.</source>
          <target state="translated">锁定对 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 变量的访问以促进访问同步。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Lock">
          <source>The <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> class performs automatic locking and unlocking with the <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.AllKeys%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Web.HttpApplicationState.Count%2A&gt;</ph> properties and the <ph id="ph4">&lt;xref:System.Web.HttpApplicationState.Add%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Web.HttpApplicationState.Get%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Web.HttpApplicationState.GetKey%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Web.HttpApplicationState.Remove%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph> and <ph id="ph10">&lt;xref:System.Web.HttpApplicationState.Set%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>类执行自动的锁定和解锁与<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.AllKeys%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Web.HttpApplicationState.Count%2A&gt;</ph>属性和<ph id="ph4">&lt;xref:System.Web.HttpApplicationState.Add%2A&gt;</ph>， <ph id="ph5">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Web.HttpApplicationState.Get%2A&gt;</ph>， <ph id="ph7">&lt;xref:System.Web.HttpApplicationState.GetKey%2A&gt;</ph>， <ph id="ph8">&lt;xref:System.Web.HttpApplicationState.Remove%2A&gt;</ph>，<ph id="ph9">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph>和<ph id="ph10">&lt;xref:System.Web.HttpApplicationState.Set%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Lock">
          <source>However, explicitly using the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> methods when you have a series of operations may be more efficient.</source>
          <target state="translated">但是，显式使用<ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph>时具有一系列操作的方法可能更加有效。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Lock">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> method to prevent other sessions from changing the value of two application variables until after the local session has changed them.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph>方法，以防止其他会话本地会话更改它们后更改之前的两个应用程序变量的值。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Remove(System.String)">
          <source>The name of the object to be removed from the collection.</source>
          <target state="translated">要从集合中移除的对象名。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Remove(System.String)">
          <source>Removes the named object from an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 集合中移除命名对象。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Remove(System.String)">
          <source>The following example removes one application state variable from the collection.</source>
          <target state="translated">下面的示例从集合中移除一个应用程序状态变量。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.RemoveAll">
          <source>Removes all objects from an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 集合中移除所有对象。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.RemoveAll">
          <source><ph id="ph1">&lt;xref:System.Web.HttpApplicationState.RemoveAll%2A&gt;</ph> is an internal call to <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.HttpApplicationState.RemoveAll%2A&gt;</ph> 是一个内部调用到<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.RemoveAll">
          <source>The following example removes all <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> variables from the collection.</source>
          <target state="translated">下面的示例中移除所有<ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>从集合的变量。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)">
          <source>The position in the collection of the item to remove.</source>
          <target state="translated">要删除的项在集合中的位置。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)">
          <source>Removes an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object from a collection by index.</source>
          <target state="translated">按索引从集合中移除一个 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)">
          <source>The following code example demonstrates how to insert two application variables into the collection, and then use the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph> method to remove the first variable in a custom <ph id="ph2">&lt;xref:System.Web.HttpApplicationState&gt;</ph> object.</source>
          <target state="translated">下面的代码示例演示如何插入到集合，两个应用程序变量，然后使用<ph id="ph1">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph>方法移除自定义中的第一个变量<ph id="ph2">&lt;xref:System.Web.HttpApplicationState&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
          <source>The name of the object to be updated.</source>
          <target state="translated">要更新的对象名。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
          <source>The updated value of the object.</source>
          <target state="translated">对象更新之后的值。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
          <source>Updates the value of an object in an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated">更新 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 集合中的对象值。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
          <source>The following example updates the value of an existing application state variable.</source>
          <target state="translated">下面的示例更新现有应用程序状态变量的值。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.StaticObjects">
          <source>Gets all objects declared by an <ph id="ph1">&lt;see langword="&amp;lt;object&amp;gt;" /&gt;</ph> tag where the scope is set to "Application" within the ASP.NET application.</source>
          <target state="translated">获取由 <ph id="ph1">&lt;see langword="&amp;lt;object&amp;gt;" /&gt;</ph> 标记声明的所有对象，其中范围设置为 ASP.NET 应用程序中的“Application”。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.StaticObjects">
          <source>A collection of objects on the page.</source>
          <target state="translated">页上的对象集合。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.StaticObjects">
          <source>Application objects are defined in the Global.asax file inside the <ph id="ph1">`&lt;object runat="server" scope="Application"&gt; &lt;/object&gt;`</ph> tags.</source>
          <target state="translated">在 Global.asax 文件中定义应用程序对象<ph id="ph1">`&lt;object runat="server" scope="Application"&gt; &lt;/object&gt;`</ph>标记。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.StaticObjects">
          <source>The following example gets all application objects into a <ph id="ph1">&lt;xref:System.Web.HttpStaticObjectsCollection&gt;</ph> variable and executes a routine only if the number of objects is greater than 0.</source>
          <target state="translated">下面的示例获取到的所有应用程序对象<ph id="ph1">&lt;xref:System.Web.HttpStaticObjectsCollection&gt;</ph>变量和对象的数目大于 0 的情况下，才会执行一个例程。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.UnLock">
          <source>Unlocks access to an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> variable to facilitate access synchronization.</source>
          <target state="translated">取消锁定对 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 变量的访问以促进访问同步。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.UnLock">
          <source>The <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> class performs automatic locking and unlocking with the <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.AllKeys%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Web.HttpApplicationState.Count%2A&gt;</ph> properties and the <ph id="ph4">&lt;xref:System.Web.HttpApplicationState.Add%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Web.HttpApplicationState.Get%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Web.HttpApplicationState.GetKey%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Web.HttpApplicationState.Remove%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph> and <ph id="ph10">&lt;xref:System.Web.HttpApplicationState.Set%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph>类执行自动的锁定和解锁与<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.AllKeys%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Web.HttpApplicationState.Count%2A&gt;</ph>属性和<ph id="ph4">&lt;xref:System.Web.HttpApplicationState.Add%2A&gt;</ph>， <ph id="ph5">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Web.HttpApplicationState.Get%2A&gt;</ph>， <ph id="ph7">&lt;xref:System.Web.HttpApplicationState.GetKey%2A&gt;</ph>， <ph id="ph8">&lt;xref:System.Web.HttpApplicationState.Remove%2A&gt;</ph>，<ph id="ph9">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph>和<ph id="ph10">&lt;xref:System.Web.HttpApplicationState.Set%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.UnLock">
          <source>However, explicitly using the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> methods when you have a series of operations may be more efficient.</source>
          <target state="translated">但是，显式使用<ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph>时具有一系列操作的方法可能更加有效。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.UnLock">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> method to prevent other sessions from changing the value of two application variables until after the local session has changed them.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph>方法，以防止其他会话本地会话更改它们后更改之前的两个应用程序变量的值。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>