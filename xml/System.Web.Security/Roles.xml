<Type Name="Roles" FullName="System.Web.Security.Roles">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8e4341b0577af2b91bb4cce3b802b7e04466f310" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30550791" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Roles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Roles extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Roles" />
  <TypeSignature Language="VB.NET" Value="Public Class Roles" />
  <TypeSignature Language="C++ CLI" Value="public ref class Roles abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>管理角色中的用户成员资格，以便在 ASP.NET 应用程序中进行授权检查。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 角色管理可用于管理应用程序基于组的用户使用，称为角色的授权。 通过将用户分配给角色，你可以控制对不同部分或基于角色而不是，或者除，Web 应用程序的功能的访问指定基于用户名称的授权。 例如，员工应用程序可能具有角色管理器、 员工、 控制器和等等，例如为每个角色都指定了不同的权限。  
  
 用户可以属于多个角色。 例如，如果你的站点是一个论坛，但有些用户可能正在成员和审查方的角色。 你可以定义每个角色可以在站点上，具有不同权限并在这两种角色的用户将然后具有这两个集的权限。  
  
 若要启用角色管理 ASP.NET 应用程序，使用的元素`system.web`部分应用程序的 Web.config 文件中，如以下示例所示。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
  <roleManager defaultProvider="SqlProvider"   
    enabled="true"  
    cacheRolesInCookie="true"  
    cookieName=".ASPROLES"  
    cookieTimeout="30"  
    cookiePath="/"  
    cookieRequireSSL="false"  
    cookieSlidingExpiration="true"  
    cookieProtection="All" >  
    <providers>  
      <add  
        name="SqlProvider"  
        type="System.Web.Security.SqlRoleProvider"  
        connectionStringName="SqlServices"  
        applicationName="SampleApplication" />  
      </providers>  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 Web 应用程序的配置文件中或以编程方式在代码中，你可以指定授权规则。 例如下, 一节从 Web.config 文件要求用户 （通过拒绝匿名用户），登录，然后仅允许用户要具有访问权限的管理员角色中。  
  
```  
<authorization>  
  <deny users="?" />  
  <allow roles="Administrators" />  
  <deny users="*" />  
</authorization>  
```  
  
 如果你使用`authorization`中应用程序的 Web.config 文件以指定基于角色，应用程序的用户授权部分必须提供身份验证的用户标识。 你可以通过使用 Windows 或 Forms 身份验证对用户进行身份验证。 无法将匿名用户分配到角色。 独立的或与 ASP.NET 结合使用，可以使用角色<xref:System.Web.Security.Membership>类。  
  
 若要以编程方式验证角色的成员身份，你可以使用<xref:System.Web.Security.Roles>类或<xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType>具有属性<xref:System.Web.Security.Roles.IsUserInRole%2A>方法，也可以使用<xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType>具有属性<xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=nameWithType>方法。 有关示例代码，用于以编程方式检查角色成员身份，请参阅本主题中的示例部分。  
  
 <xref:System.Web.Security.Roles>类还使你可以创建和删除角色，还可以将用户添加到或从角色中删除用户。  
  
> [!NOTE]
>  如果已配置应用程序使用<xref:System.Web.Security.WindowsTokenRoleProvider>类，不能修改角色或角色成员身份。 <xref:System.Web.Security.WindowsTokenRoleProvider>仅在 Windows 安全 classverifies 成员身份组。 在这种情况下，你必须使用 Windows 用户帐户管理，而不是 ASP.NET 角色创建和删除组和管理组成员身份。  
  
 可以将角色信息存储在多个数据源。  
  
-   你可以使用<xref:System.Web.Security.WindowsTokenRoleProvider>类，以检索其角色信息根据 Windows 组的成员身份。  
  
-   通过使用存储在 SQL Server 数据库角色信息<xref:System.Web.Security.SqlRoleProvider>类。  
  
-   如果你有现有的角色信息，或者想要存储中的角色信息和从 Windows、 授权存储或 SQL Server 以外的数据源中检索角色信息，你可以通过创建一个类继承实施自定义角色提供程序<xref:System.Web.Security.RoleProvider>抽象类。 有关详细信息，请参阅[实现角色提供程序](http://msdn.microsoft.com/library/851671ce-bf9b-43f2-aba4-bc9d28b11c7d)。  
  
 如果用户的浏览器中接受 cookie，你可以在用户计算机上的 cookie 中存储为该用户角色信息。 对于每个页请求，ASP.NET 将该用户角色信息读取 cookie。 通过减少与数据源需要检索其角色信息的通信，这可以提高应用程序性能。 如果用户的角色信息太长，若要存储在一个 cookie，ASP.NET 将只存储最近使用的角色信息在 cookie 中，然后查找作为所需的数据源中的其他角色信息。 如果用户的浏览器不支持 cookie 或禁用 cookie，则角色信息不会缓存在 cookie 中。  
  
 你可以提高缓存在 cookie 中通过指定的角色名称的可靠性<xref:System.Web.Security.Roles.CookieProtectionValue%2A>属性配置 ASP.NET 角色时。 默认值<xref:System.Web.Security.Roles.CookieProtectionValue%2A>是`All`，该加密 cookie 中的角色名称和验证的 cookie 内容没有已改变。  
  
   
  
## Examples  
 下面的示例演示配置为使用 ASP.NET 成员资格和 ASP.NET 角色和要使用的应用程序的 Web.config 文件<xref:System.Web.Security.SqlRoleProvider>将成员资格和角色的信息存储在 SQL Server 数据库。 只有管理员角色中的用户允许访问应用程序和用户进行身份验证通过 forms 身份验证。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
    <authorization>  
      <deny users="?" />  
      <allow roles="Administrators" />  
      <deny users="*" />  
    </authorization>  
  
    <membership defaultProvider="AspNetSqlProvider" userIsOnlineTimeWindow="15">  
    </membership>  
  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="true"  
      cookieSlidingExpiration="true"  
      cookieProtection="All" >  
  
      <providers>  
        <clear />  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="SampleApplication" />  
        </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 下面的代码示例以编程方式检查登录的用户是否在管理员角色允许用户查看其他用户的角色之前。  
  
  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddUsersToRole">
      <MemberSignature Language="C#" Value="public static void AddUsersToRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">一个字符串数组，其中包含要添加到指定角色的用户名。</param>
        <param name="roleName">要将指定的用户名添加到的角色。</param>
        <summary>将指定的用户添加到指定的角色中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUsersToRole%2A>方法调用默认角色提供程序将指定的用户与数据源中的指定角色关联。  
  
 如果你的应用程序使用<xref:System.Web.Security.SqlRoleProvider>类，在调用期间执行数据库更新<xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>方法将在事务内完成。 如果遇到错误，如已指定角色的用户名，事务将回滚并不执行任何更新。  
  
> [!NOTE]
>  用户名称和角色名称不能包含逗号。  
  
   
  
## Examples  
 下面的代码示例向角色中添加一个或多个用户，或从基于用户输入的角色中删除用户。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="usernames" /> 的其中一个元素为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 为空字符串或者包含逗号 (,)。  
  
 或  
  
 <paramref name="usernames" /> 中的一个元素是空字符串或包含逗号 (,)。  
  
 或  
  
 <paramref name="usernames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public static void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">一个字符串数组，其中包含要添加到指定角色的用户名。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定用户名添加到的角色的名称。</param>
        <summary>将指定的用户添加到指定的角色中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUsersToRoles%2A>方法调用默认角色提供程序将指定的用户与数据源的指定角色关联。  
  
 如果你的应用程序使用<xref:System.Web.Security.SqlRoleProvider>类，在调用期间执行数据库更新<xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>方法将在事务内完成。 如果遇到错误，如已指定角色的用户名，事务将回滚并不执行任何更新。  
  
> [!NOTE]
>  用户名称和角色名称不能包含逗号。  
  
   
  
## Examples  
 下面的代码示例将一个或多个用户添加到一个或多个角色。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/adduserstorolescs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.Roles#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/adduserstorolesvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleNames" /> 中的一个角色为 <see langword="null" />。  
  
 或  
  
 <paramref name="usernames" /> 中的一个用户为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleNames" /> 中的一个角色是空字符串或包含逗号 (,)。  
  
 或  
  
 <paramref name="usernames" /> 中的一个用户是空字符串或包含逗号 (,)。  
  
 或  
  
 <paramref name="roleNames" /> 包含重复的元素。  
  
 或  
  
 <paramref name="usernames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRole">
      <MemberSignature Language="C#" Value="public static void AddUserToRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRole(System::String ^ username, System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要添加到指定角色中的用户名。</param>
        <param name="roleName">要将指定的用户名添加到的角色。</param>
        <summary>将指定的用户添加到指定的角色中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUserToRole%2A>方法调用默认角色提供程序，来将指定的用户与数据源中的指定角色相关联。  
  
> [!NOTE]
>  用户名称和角色名称不能包含逗号。  
  
   
  
## Examples  
 下面的代码示例将用户添加到角色。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.Roles#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 为空字符串或者包含逗号 (,)。  
  
 或  
  
 <paramref name="username" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。  
  
 或  
  
 用户已分配给指定的角色。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRoles">
      <MemberSignature Language="C#" Value="public static void AddUserToRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">要添加到指定角色中的用户名。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定用户名添加到的角色。</param>
        <summary>将指定的用户添加到指定的角色中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUserToRoles%2A>方法调用默认角色提供程序，来将指定的用户与数据源中指定的角色相关联。  
  
 如果你的应用程序使用<xref:System.Web.Security.SqlRoleProvider>类，在调用期间执行数据库更新<xref:System.Web.Security.Roles.AddUserToRoles%2A>方法将在事务内完成。 如果遇到错误，如已指定角色的用户名，事务将回滚并不执行任何更新。  
  
> [!NOTE]
>  用户名称和角色名称不能包含逗号。  
  
   
  
## Examples  
 下面的代码示例将用户添加到一个或多个角色。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolescs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.Roles#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolesvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleNames" /> 中的一个角色为 <see langword="null" />。  
  
 或  
  
 <paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleNames" /> 中的一个角色是空字符串或包含逗号 (,)。  
  
 或  
  
 <paramref name="username" /> 为空字符串或者包含逗号 (,)。  
  
 或  
  
 <paramref name="roleNames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要存储和检索其角色信息的应用程序的名称。</summary>
        <value>要存储和检索其角色信息的应用程序的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.ApplicationName%2A>属性由<xref:System.Web.Security.Roles>类，以将用户和角色与不同的应用程序相关联。 这使多个应用程序使用相同的数据源而不会遇到重复的用户名称或重复的角色名称之间的冲突存储用户和角色信息。 多个 ASP.NET 应用程序可以通过指定相同的值中使用相同的数据源<xref:System.Web.Security.Roles.ApplicationName%2A>属性。 你可以设置<xref:System.Web.Security.Roles.ApplicationName%2A>属性以编程方式，你也可以设置它以声明方式为 Web 应用程序配置文件中使用`applicationName`属性。  
  
 如果使用 Web 应用程序<xref:System.Web.Security.SqlRoleProvider>类和值没有为指定`applicationName`配置文件中的属性<xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType>当前属性值<xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType>使用属性。  
  
> [!CAUTION]
>  因为所有服务的请求使用单个默认角色提供程序实例<xref:System.Web.HttpApplication>对象，您可以有多个请求并发执行，并尝试设置<xref:System.Web.Security.Roles.ApplicationName%2A>属性值。 <xref:System.Web.Security.Roles.ApplicationName%2A>属性不是线程安全的多个写操作，并不断变化<xref:System.Web.Security.Roles.ApplicationName%2A>属性值可能会导致多个用户的应用程序的意外行为。 应避免编写代码以允许用户设置<xref:System.Web.Security.Roles.ApplicationName%2A>属性，除非要求。 应用程序的示例设置<xref:System.Web.Security.Roles.ApplicationName%2A>属性可能需要是管理应用程序管理多个应用程序的角色数据。 此类应用程序应为单用户应用程序和不是 Web 应用程序。  
  
   
  
## Examples  
 下面的示例演示中的元素`system.web`的 ASP.NET 应用程序的 Web.config 文件的部分。 它指定应用程序使用<xref:System.Web.Security.SqlRoleProvider>实例并设置`applicationName`属性设为`MyApplication`。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheRolesInCookie">
      <MemberSignature Language="C#" Value="public static bool CacheRolesInCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CacheRolesInCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CacheRolesInCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CacheRolesInCookie { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前用户的角色是否已缓存在某个 Cookie 中。</summary>
        <value>
          如果当前用户的角色已缓存在某个 Cookie 中，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Web.Security.Roles.CacheRolesInCookie%2A>属性设置为`true`在 Web.config 文件中，每个用户角色信息存储在 cookie 中。 当角色管理检查以确定用户是否对特定角色中时，角色 cookie 将检查之前的角色提供程序调用以检查数据源中的角色列表。 动态更新 cookie 缓存最近已验证的角色名称。  
  
 你可以提高缓存在 cookie 中通过指定的角色名称的可靠性<xref:System.Web.Security.Roles.CookieProtectionValue%2A>属性配置 ASP.NET 角色时。 默认值<xref:System.Web.Security.Roles.CookieProtectionValue%2A>是`All`，该加密 cookie 中的角色名称和验证的 cookie 内容没有已改变。  
  
> [!NOTE]
>  由于可以脱离数据源缓存角色名称，有可能对数据源中的角色管理的更改不会反映在缓存的值。 在这种情况下，用户必须关闭并重新打开其浏览器，以清除缓存的 cookie 值。  
  
   
  
## Examples  
 下面的示例演示中的元素`system.web`的 ASP.NET 应用程序的 Web.config 文件的部分。 它指定应用程序使用<xref:System.Web.Security.SqlRoleProvider>实例并设置`cacheRolesInCookie`属性设为`true`。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
   </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieName">
      <MemberSignature Language="C#" Value="public static string CookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在其中缓存角色名称的 Cookie 的名称。</summary>
        <value>在其中缓存角色名称的 Cookie 的名称。 默认值是 .ASPXROLES。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以为你的应用程序指定在其中缓存角色 cookie 的名称，通过设置`cookieName`ASP.NET 应用程序的 Web.config 文件中的属性。 当你想要唯一标识你的应用程序的 cookie 或 cookie 共享跨多个应用程序，如域 cookie 时，这非常有用。  
  
   
  
## Examples  
 下面的示例演示中的元素`system.web`的 ASP.NET 应用程序的 Web.config 文件的部分。 它指定应用程序使用<xref:System.Web.Security.SqlRoleProvider>实例并设置`cookieName`属性。ASPROLES。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookiePath">
      <MemberSignature Language="C#" Value="public static string CookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookiePath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取缓存角色名称的 Cookie 的路径。</summary>
        <value>在其中缓存角色名称的 Cookie 的路径。 默认值是 /。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过设置你的应用程序中指定其中缓存角色的 cookie 的路径`cookiePath`ASP.NET 应用程序的 Web.config 文件中的属性。 有关 cookie 路径的详细信息，请参阅<xref:System.Web.HttpCookie.Path%2A>。  
  
   
  
## Examples  
 下面的示例演示中的元素`system.web`的 ASP.NET 应用程序的 Web.config 文件的部分。 它指定应用程序使用<xref:System.Web.Security.SqlRoleProvider>实例并设置`cookiePath`/MyApplication 属性。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieProtectionValue">
      <MemberSignature Language="C#" Value="public static System.Web.Security.CookieProtection CookieProtectionValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Security.CookieProtection CookieProtectionValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieProtectionValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieProtectionValue As CookieProtection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::CookieProtection CookieProtectionValue { System::Web::Security::CookieProtection get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.CookieProtection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个指示如何保护在 Cookie 中缓存的角色名称的值。</summary>
        <value>
          <see cref="T:System.Web.Security.CookieProtection" /> 枚举值的其中一个值指示如何保护在 Cookie 中缓存的角色名称。 默认值为 <see langword="All" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你也可以通过设置为你的应用程序指定在其中缓存角色的 cookie 保护`cookieProtection`ASP.NET 应用程序的 Web.config 文件中的属性。 `cookieProtection`属性采用<xref:System.Web.Security.CookieProtection>枚举值，该值指示是否加密角色名称，验证，同时，还是两者皆否。  
  
   
  
## Examples  
 下面的示例演示中的元素`system.web`的 ASP.NET 应用程序的 Web.config 文件的部分。 它指定应用程序使用<xref:System.Web.Security.SqlRoleProvider>实例并设置`cookieProtection`属性设为`Encrypted`。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieRequireSSL">
      <MemberSignature Language="C#" Value="public static bool CookieRequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieRequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieRequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieRequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieRequireSSL { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示角色名称 Cookie 是否需要 SSL 以便返回到服务器。</summary>
        <value>
          如果需要 SSL 以便将角色名称 Cookie 返回到服务器，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以指定是否需要 SSL （安全套接字层） 返回到你的应用程序中的服务器的角色名称 cookie，通过设置`cookieRequireSSL`ASP.NET 应用程序的 Web.config 文件中的属性。 有关详情，请参阅<xref:System.Web.HttpCookie.Secure%2A>。  
  
   
  
## Examples  
 下面的示例演示中的元素`system.web`的 ASP.NET 应用程序的 Web.config 文件的部分。 它指定应用程序使用<xref:System.Web.Security.SqlRoleProvider>实例并设置`cookieRequireSSL`到`true`。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieSlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool CookieSlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieSlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieSlidingExpiration { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示是否将要定期重置角色名称 Cookie 的到期日期和时间。</summary>
        <value>
          如果将要定期重置角色名称 Cookie 的到期日期和时间，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以指定是否角色名称 cookie 的到期日期和时间将重置使用的每个响应使用`cookieSlidingExpiration`ASP.NET 应用程序的 Web.config 文件中的属性。 如果`true`，cookie 到期时间最初将设置为当前日期和时间加上<xref:System.Web.Security.Roles.CookieTimeout%2A>以分钟为单位。 虽然用户可以继续主动使用 ASP.NET 应用程序的到期日期和时间的 cookie 将自动刷新如果没有少于一半的<xref:System.Web.Security.Roles.CookieTimeout%2A>剩余。 有关更多信息，请参见 <xref:System.Web.HttpCookie.Expires%2A> 属性。  
  
   
  
## Examples  
 下面的示例演示中的元素`system.web`的 ASP.NET 应用程序的 Web.config 文件的部分。 它指定应用程序使用<xref:System.Web.Security.SqlRoleProvider>实例并设置<xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>属性`false`。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="false"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieTimeout">
      <MemberSignature Language="C#" Value="public static int CookieTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CookieTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CookieTimeout { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取角色 Cookie 到期前的分钟数。</summary>
        <value>指定角色 Cookie 到期前的分钟数的整数。 默认值为 30 分钟。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.CookieTimeout%2A>使用属性时<xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>属性是`true`，并指定中的角色 cookie 的分钟生存时间。 若要设置<xref:System.Web.Security.Roles.CookieTimeout%2A>值时，请添加`cookieTimeout`属性设为 ASP.NET 应用程序的 Web.config 文件中的元素，并指定一个整数值。  
  
 如果<xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>是`false`，将忽略此属性。  
  
   
  
## Examples  
 下面的示例演示中的元素`system.web`的 ASP.NET 应用程序的 Web.config 文件的部分。 它指定应用程序使用<xref:System.Web.Security.SqlRoleProvider>实例并设置<xref:System.Web.Security.Roles.CookieTimeout%2A>到 30 分钟的属性。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
  <add  
    name="SqlProvider"  
    type="System.Web.Security.SqlRoleProvider"  
    connectionStringName="SqlServices"  
    applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePersistentCookie">
      <MemberSignature Language="C#" Value="public static bool CreatePersistentCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CreatePersistentCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CreatePersistentCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CreatePersistentCookie { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示角色名称 Cookie 是基于会话的还是持久性的。</summary>
        <value>
          如果角色名称 Cookie 是持久性 Cookie，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.CreatePersistentCookie%2A> ASP.NET 应用程序中使用的配置中设置了属性值`createPersistentCookie`配置元素的属性。  
  
 当`false`，角色名称 cookie 是会话 cookie 时关闭浏览器 cookie，即会丢失。 当`true`，角色名称 cookie 是多个浏览器会话中是可用的持久性 cookie。 持久性 cookie 到期日期和时间设置为当前日期和时间加上<xref:System.Web.Security.Roles.CookieTimeout%2A>以分钟为单位的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public static void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateRole(System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要创建的角色的名称。</param>
        <summary>将新的角色添加到数据源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.CreateRole%2A>方法将角色名称添加到数据源。 <xref:System.Web.Security.Roles.CreateRole%2A> 调用<xref:System.Web.Security.RoleProvider.CreateRole%2A>要将指定的角色添加到数据源的默认角色提供程序的方法。  
  
> [!NOTE]
>  角色名称不能包含逗号。  
  
   
  
## Examples  
 下面的代码示例在数据源中创建新的角色。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 是一个空字符串。  
  
 或  
  
 <paramref name="roleName" /> 包含一个逗号。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteCookie">
      <MemberSignature Language="C#" Value="public static void DeleteCookie ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCookie() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteCookie ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteCookie();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除在其中缓存角色名称的 Cookie。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteCookie%2A>方法清除用于缓存角色名称 cookie 的内容。 缓存角色名称的详细信息，请参阅<xref:System.Web.Security.Roles.CacheRolesInCookie%2A>。  
  
   
  
## Examples  
 下面的代码示例调用<xref:System.Web.Security.Roles.DeleteCookie%2A>方法来清除任何缓存角色名称，当用户登录时。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/logincs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.Roles#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/loginvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从数据源移除一个角色。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要删除的角色的名称。</param>
        <summary>从数据源移除一个角色。</summary>
        <returns>
          如果从数据源中删除 <paramref name="roleName" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteRole%2A>方法从数据源中删除角色名称。 <xref:System.Web.Security.Roles.DeleteRole%2A> 调用<xref:System.Web.Security.RoleProvider.DeleteRole%2A>要从数据源中删除指定的角色的默认角色提供程序的方法。  
  
 如果通过标识角色`roleName`参数具有一个或多个成员，则将引发异常，不会删除此角色。  
  
   
  
## Examples  
 下面的代码示例从数据源中删除角色。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          <paramref name="roleName" /> 具有一个或多个成员。  
  
 或  
  
 未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">要删除的角色的名称。</param>
        <param name="throwOnPopulatedRole">如果为 <see langword="true" />，则当 <c>roleName</c> 包含一个或多个成员时引发异常。</param>
        <summary>从数据源移除一个角色。</summary>
        <returns>
          如果从数据源中删除 <paramref name="roleName" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteRole%2A>方法从数据源中删除角色名称。 <xref:System.Web.Security.Roles.DeleteRole%2A> 调用<xref:System.Web.Security.RoleProvider.DeleteRole%2A>要从数据源中删除指定的角色的默认角色提供程序的方法。  
  
 如果`throwOnPopulatedRole`是`true`然后将引发异常，将不删除此角色，如果通过标识角色`roleName`参数具有一个或多个成员。 如果`throwOnPopulatedRole`是`false`，则它是空的还是不会删除此角色。  
  
   
  
## Examples  
 下面的代码示例从数据源中删除角色。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 是一个空字符串。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          <paramref name="roleName" /> 具有一个或多个成员且 <paramref name="throwOnPopulatedRole" /> 为 <see langword="true" />。  
  
 或  
  
 未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public static string Domain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Domain { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取角色名称 Cookie 的域的值。</summary>
        <value>角色名称 Cookie 的 <see cref="P:System.Web.HttpCookie.Domain" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Domain%2A> ASP.NET 应用程序中使用的配置中设置了属性值`domain`配置元素的属性。  
  
 如果在域属性中，配置中不指定任何值<xref:System.Web.Security.Roles.Domain%2A>属性返回`null`，角色名称 cookie 域的默认值为的行为<xref:System.Web.HttpCookie><xref:System.Web.HttpCookie.Domain%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public static bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用来指示是否为当前 Web 应用程序启用角色管理的值。</summary>
        <value>
          如果启用了角色管理，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示中的元素`system.web`的 ASP.NET 应用程序的 Web.config 文件的部分。 它指定应用程序使用<xref:System.Web.Security.SqlRoleProvider>实例并设置`enabled`属性设为`true`。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">作为搜索范围的角色。</param>
        <param name="usernameToMatch">要搜索的用户名。</param>
        <summary>获取属于指定角色的用户的列表，其中用户名包含要匹配的指定用户名。</summary>
        <returns>一个字符串数组，包含用户名与 <paramref name="usernameToMatch" /> 匹配且是指定角色的成员的所有用户的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.FindUsersInRole%2A> 在角色中返回的用户列表，其中用户名包含所提供的匹配项`usernameToMatch`已配置的`applicationName`。 例如，如果`usernameToMatch`参数设置为"用户，"则用户"user1"，"user2，""用户 3，"并返回等等。 按用户名称按字母顺序返回用户。  
  
 <xref:System.Web.Security.SqlRoleProvider>执行使用 LIKE 子句针对其搜索`usernameToMatch`参数。 像子句可以用在 SQL Server 支持任何通配符`usernameToMatch`参数值。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.FindUsersInRole%2A>方法以显示角色成员身份基于用户输入。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> 为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。  
  
 或  
  
 <paramref name="usernameToMatch" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 为空字符串或者包含逗号 (,)。  
  
 或  
  
 <paramref name="usernameToMatch" /> 是一个空字符串。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public static string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取应用程序的所有角色的列表。</summary>
        <returns>一个字符串数组，包含在应用程序的数据源中存储的所有角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetAllRoles%2A>方法调用<xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=nameWithType>要从数据源中获取所有角色的列表，为应用程序的默认角色提供程序的方法。 仅在指定的应用程序的角色<xref:System.Web.Security.Roles.ApplicationName%2A>检索属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.GetAllRoles%2A>方法获取应用程序的角色的列表，并将绑定到结果<xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType>控件。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRolesForUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取一个用户所属角色的列表。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当前登录的用户所属角色的列表。</summary>
        <returns>一个字符串数组，其中包含当前登录的用户所属的所有角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetRolesForUser%2A>方法调用<xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType>方法的默认角色提供程序，以检索从数据源当前登录的用户的角色。 当前登录的用户都由<xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType>属性的当前<xref:System.Web.HttpContext?displayProperty=nameWithType>，或通过<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>用于非 HTTP 宿主环境。 如果没有用户登录，则将引发异常。 仅在指定的应用程序的角色<xref:System.Web.Security.Roles.ApplicationName%2A>检索属性。  
  
 如果<xref:System.Web.Security.Roles.CacheRolesInCookie%2A>是`true`，然后的结果<xref:System.Web.Security.Roles.GetRolesForUser%2A>方法可能返回从角色缓存，而不是指定的角色提供程序。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.GetRolesForUser%2A>方法来检索指定用户角色的列表并将绑定到的返回的角色<xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType>控件。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">当前无登录的用户。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要为其返回角色列表的用户。</param>
        <summary>获取一个用户所属角色的列表。</summary>
        <returns>一个字符串数组，其中包含指定用户所属的所有角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetRolesForUser%2A>方法调用<xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType>方法的默认角色提供程序，以检索从数据源所属角色的用户中。 仅在指定的应用程序的角色<xref:System.Web.Security.Roles.ApplicationName%2A>检索属性。  
  
 如果`username`等同于当前登录的用户和<xref:System.Web.Security.Roles.CacheRolesInCookie%2A>是`true`，结果的<xref:System.Web.Security.Roles.GetRolesForUser%2A>方法可能返回从角色缓存而不是指定<xref:System.Web.Security.Roles.Provider%2A>。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.GetRolesForUser%2A>方法来检索指定用户角色的列表并将绑定到的返回的角色<xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType>控件。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> 包含一个逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要获取其用户列表的角色。</param>
        <summary>获取属于指定角色的用户的列表。</summary>
        <returns>一个字符串数组，其中包含指定角色拥有的所有成员的用户名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetUsersInRole%2A>方法调用<xref:System.Web.Security.RoleProvider.GetUsersInRole%2A>要检索的数据源中的角色关联的用户名称的默认角色提供程序的方法。 仅在指定的应用程序的角色<xref:System.Web.Security.Roles.ApplicationName%2A>检索属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.GetUsersInRole%2A>方法以获取特定角色中的用户的列表，并将绑定到结果<xref:System.Web.UI.WebControls.GridView>控件。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUserInRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取一个指示用户是否属于指定角色的值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要搜索的角色的名称。</param>
        <summary>获取一个值，该值指示当前登录的用户是否属于指定的角色。 API 只能在 ASP.NET 请求线程内调用，在认可的使用情况下，它是线程安全的。</summary>
        <returns>
          如果当前登录的用户属于指定的角色，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.IsUserInRole%2A>方法调用<xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=nameWithType>要确定当前登录的用户是否从应用程序的数据源中指定的角色相关联的默认角色提供程序的方法<xref:System.Web.Security.Roles.ApplicationName%2A>属性。 当前登录的用户都由<xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType>属性的当前<xref:System.Web.HttpContext?displayProperty=nameWithType>，或通过<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>用于非 HTTP 宿主环境。 如果没有用户登录，则将引发异常。 仅在指定的应用程序的角色<xref:System.Web.Security.Roles.ApplicationName%2A>检索属性。  
  
 如果<xref:System.Web.Security.Roles.CacheRolesInCookie%2A>是`true`，然后`roleName`可能比照角色缓存，而不是指定的角色提供程序。  
  
   
  
## Examples  
 下面的代码示例以编程方式检查当前登录的用户是否在管理员角色允许用户查看应用程序的角色设置之前。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> 为 <see langword="null" />。  
  
 或  
  
 当前无登录的用户。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要搜索的用户的名称。</param>
        <param name="roleName">要搜索的角色的名称。</param>
        <summary>获取一个指示指定用户是否属于指定角色的值。 API 只能在 ASP.NET 请求线程内调用，在认可的使用情况下，它是线程安全的。</summary>
        <returns>
          如果指定的用户属于指定角色，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.IsUserInRole%2A>方法调用<xref:System.Web.Security.RoleProvider.IsUserInRole%2A>要确定用户名称是否与应用程序中指定的数据源中的角色相关联的默认角色提供程序的方法<xref:System.Web.Security.Roles.ApplicationName%2A>属性。  
  
 如果`username`等同于当前登录的用户和<xref:System.Web.Security.Roles.CacheRolesInCookie%2A>属性值是`true`，`roleName`可能检查其是否为角色缓存而不是指定<xref:System.Web.Security.Roles.Provider%2A>。  
  
   
  
## Examples  
 下面的代码示例以编程方式检查用户是否在管理员角色允许用户查看应用程序的角色设置之前。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 为空字符串或者包含逗号 (,)。  
  
 或  
  
 <paramref name="username" /> 包含一个逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxCachedResults">
      <MemberSignature Language="C#" Value="public static int MaxCachedResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxCachedResults" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.MaxCachedResults" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxCachedResults As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxCachedResults { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要为用户缓存的角色名称的最大数量。</summary>
        <value>要为用户缓存的角色名称的最大数量。 默认值为 25。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.MaxCachedResults%2A>属性使用设置`maxCachedResults`配置属性。 值`maxCachedResults`配置属性必须设置为一个整数值大于零。  
  
   
  
## Examples  
 下面的示例演示中的元素`system.web`的 ASP.NET 应用程序的 Web.config 文件的部分。 它指定应用程序使用<xref:System.Web.Security.SqlRoleProvider>实例并设置`maxCachedResults`属性设为 10。  
  
```  
<roleManager  
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All"   
  maxCachedResults="10" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Provider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Provider As RoleProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProvider ^ Provider { System::Web::Security::RoleProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取应用程序的默认角色提供程序。</summary>
        <value>应用程序的默认角色提供程序，作为继承 <see cref="T:System.Web.Security.RoleProvider" /> 抽象类的类公开。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Provider%2A>属性使您能够直接引用应用程序的默认角色提供程序。 这通常用于访问自定义的成员的角色提供程序的一部分<xref:System.Web.Security.RoleProvider>抽象类。  
  
 例如，<xref:System.Web.Security.WindowsTokenRoleProvider>类包括的重载<xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A>使您能够确定用户是否在常见的 Windows 角色中使用的方法<xref:System.Security.Principal.WindowsBuiltInRole>枚举值。 对引用<xref:System.Web.Security.WindowsTokenRoleProvider>类应用程序可以通过使用来获取<xref:System.Web.Security.Roles.Provider%2A>属性并且可以强制转换为<xref:System.Web.Security.WindowsTokenRoleProvider>为了引用的<xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A>重载。  
  
 如果为应用程序配置了多个角色提供程序，则可以访问不同的角色提供程序使用<xref:System.Web.Security.Roles.Providers%2A>集合。  
  
   
  
## Examples  
 下面的代码示例将强制转换的默认角色提供程序中的作为<xref:System.Web.Security.WindowsTokenRoleProvider>并检查是否当前登录的用户为管理员角色允许用户查看应用程序的角色设置之前。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.WindowsTokenRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/CS/ViewRoles2cs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/VB/ViewRoles2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Providers As RoleProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProviderCollection ^ Providers { System::Web::Security::RoleProviderCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 ASP.NET 应用程序的角色提供程序的集合。</summary>
        <value>包含为 ASP.NET 应用程序配置的角色提供程序的 <see cref="T:System.Web.Security.RoleProviderCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Providers%2A>属性引用为应用程序启用的所有角色提供程序，包括任何提供程序添加到 Web.config 文件中。 你可以控制哪些角色提供程序是可供应用程序使用`providers`在你的应用程序的 Web.config 文件中部分的元素。  
  
 下面的示例演示一个中删除任何现有提供程序 （如那些在 Machine.config 文件中指定） 的节，并添加<xref:System.Web.Security.SqlRoleProvider>为应用程序的角色提供程序的实例。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  
  <system.web>  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="false"  
      cookieSlidingExpiration="true"  
      cookieProtection="Encrypted">  
  
      <providers>  
        <clear/>  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="MyApplication" />  
         </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 你可以获取的提供程序的强类型化的引用<xref:System.Web.Security.Roles.Providers%2A>编制角色提供程序索引按名称，然后将它强制转换为所需的类型的集合。  
  
 你可以获得有关应用程序中使用的默认提供程序的引用<xref:System.Web.Security.Roles.Provider%2A>属性。  
  
   
  
## Examples  
 下面的代码示例列出了为应用程序和它们各自的类型启用的提供程序。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/Providerscs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.Roles#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/Providersvb.aspx#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRole(System::String ^ username, System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要从指定的角色中移除的用户。</param>
        <param name="roleName">要从其中移除指定用户的角色。</param>
        <summary>从指定的角色中移除指定的用户。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUserFromRole%2A>方法调用默认角色提供程序，来从数据源中的指定角色中删除指定的用户。  
  
   
  
## Examples  
 下面的代码示例从角色删除用户。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 为空字符串或者包含逗号 (,)  
  
 <paramref name="username" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">要从指定的角色中移除的用户。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定的用户从中移除的角色的名称。</param>
        <summary>从指定的角色中移除指定的用户。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>方法调用默认角色提供程序，来从数据源的指定角色中删除指定的用户。  
  
 如果应用程序配置为使用<xref:System.Web.Security.SqlRoleProvider>类，在调用期间执行数据库更新<xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>方法将在事务内完成。 如果遇到错误，如不属于指定角色的用户名，事务将回滚并不执行任何更新。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>方法以从一个或多个角色中删除用户。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUserFromRolescs.aspx#10)]
 [!code-aspx-vb[System.Web.Security.Roles#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUserFromRolesvb.aspx#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleNames" /> 中的一个角色为 <see langword="null" />。  
  
 或  
  
 <paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleNames" /> 中的一个角色是空字符串或包含逗号 (,)。  
  
 或  
  
 <paramref name="username" /> 为空字符串或者包含逗号 (,)。  
  
 或  
  
 <paramref name="roleNames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">一个字符串数组，其中包含要从指定角色中移除的用户名。</param>
        <param name="roleName">要将指定的用户从中移除的角色的名称。</param>
        <summary>从指定的角色中移除指定的用户。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A>方法调用默认角色提供程序，来从数据源中的指定角色中删除指定的用户。  
  
 如果应用程序使用<xref:System.Web.Security.SqlRoleProvider>类，在调用期间执行数据库更新<xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>方法将在事务内完成。 如果遇到错误，如不属于指定角色的用户名，事务将回滚并不执行任何更新。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.RemoveUsersFromRole%2A>方法以从角色中删除一个或多个用户。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolecs.aspx#9)]
 [!code-aspx-vb[System.Web.Security.Roles#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolevb.aspx#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="usernames" /> 中的一个用户名为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 为空字符串或者包含逗号 (,)。  
  
 或  
  
 <paramref name="usernames" /> 中的一个用户名是空字符串或包含逗号 (,)。  
  
 或  
  
 <paramref name="usernames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">一个字符串数组，其中包含要从指定角色中移除的用户名。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定的用户从中移除的角色的名称。</param>
        <summary>移除指定角色中的指定用户名。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A>方法调用默认角色提供程序，来从数据源的指定角色中删除指定的用户。  
  
 如果应用程序使用<xref:System.Web.Security.SqlRoleProvider>类，在调用期间执行数据库更新<xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>方法将在事务内完成。 如果遇到错误，如不属于指定角色的用户名，事务将回滚并不执行任何更新。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A>方法以从一个或多个角色中删除一个或多个用户根据用户输入。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolescs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.Roles#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolesvb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleNames" /> 中指定的一个角色为 <see langword="null" />。  
  
 或  
  
 <paramref name="usernames" /> 中指定的一个用户为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleNames" /> 中指定的一个角色是空字符串或包含逗号 (,)。  
  
 或  
  
 <paramref name="usernames" /> 中指定的一个用户是空字符串或包含逗号 (,)。  
  
 或  
  
 <paramref name="roleNames" /> 包含重复的元素。  
  
 或  
  
 <paramref name="usernames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public static bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool RoleExists(System::String ^ roleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要在数据源中搜索的角色名。</param>
        <summary>获取一个值，该值指示指定的角色名称是否已存在于角色数据源中。</summary>
        <returns>
          如果角色名称已存在于数据源中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RoleExists%2A>方法调用`RoleExists`要确定角色名称是否存在应用程序中指定的数据源中的默认角色提供程序的方法<xref:System.Web.Security.Roles.ApplicationName%2A>属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.RoleExists%2A>方法来确定角色名称是否已存在之前创建该角色。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> 为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
  </Members>
</Type>