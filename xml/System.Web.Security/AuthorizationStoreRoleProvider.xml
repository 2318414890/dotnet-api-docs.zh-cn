<Type Name="AuthorizationStoreRoleProvider" FullName="System.Web.Security.AuthorizationStoreRoleProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7664a660b7c321799e51d290e875ffa92f1d34c7" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52244871" /></Metadata><TypeSignature Language="C#" Value="public class AuthorizationStoreRoleProvider : System.Web.Security.RoleProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AuthorizationStoreRoleProvider extends System.Web.Security.RoleProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.AuthorizationStoreRoleProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class AuthorizationStoreRoleProvider&#xA;Inherits RoleProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class AuthorizationStoreRoleProvider : System::Web::Security::RoleProvider" />
  <TypeSignature Language="F#" Value="type AuthorizationStoreRoleProvider = class&#xA;    inherit RoleProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Security.RoleProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>在 XML 文件中、Active Directory 中或 Active Directory 应用程序模式服务器上管理 ASP.NET 应用程序的角色成员资格信息在授权管理器策略存储区中的存储。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此类<xref:System.Web.Security.Roles>和<xref:System.Web.Security.RolePrincipal>类提供 ASP.NET 应用程序使用授权管理器存储的角色管理服务。 角色管理可用于在应用程序指定不同的授权级别。 可以使用 Microsoft 管理控制台访问的授权管理器。  
  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider>对象适用于这两个 Windows 身份验证和窗体身份验证模式。  
  
 你可以配置<xref:System.Web.Security.AuthorizationStoreRoleProvider>对象以使用本地的 XML 文件或 Active Directory 或 Active Directory 应用程序模式 (ADAM) 服务器。 使用本地文件时，连接字符串应类似下面的示例。  
  
```  
msxml://<path to xml file>  
```  
  
 如果本地文件存储在 ASP.NET Web 应用程序的目录树中，则可以使用波形符 ("~") 字符，用于指示的根目录。 例如，若要指示本地文件存储在 Web 应用程序的数据目录，会使用类似于下面的示例的连接字符串。  
  
 `msxml://~\App_Data\datafilename.xml`  
  
> [!IMPORTANT]
>  在 Web 应用程序目录中存储 XML 数据文件是潜在的安全威胁。 默认情况下，IIS 将向 Web 提供 XML 数据文件。 若要使用的本地数据文件中的 ASP.NET 应用程序时提高安全性，应存储中的数据文件`App_Data`目录。 文件存储在`App_Data`目录将不发送到 Web。  
  
 如果 Active Directory 或 ADAM 服务器将用于对策略存储区，你的连接字符串应类似于下面的示例。  
  
 `msldap://myserver/CN=MyAzManStore,OU=MyOU,DC=MyDomain,DC=MyDC,DC=Com`  
  
 在文档中列出的异常<xref:System.Web.Security.AuthorizationStoreRoleProvider>对象的方法是由引发的异常<xref:System.Web.Security.AuthorizationStoreRoleProvider>对象。 由于提供程序依赖于基础身份验证管理器运行时，<xref:System.Runtime.InteropServices.COMException>异常可能是每当引发<xref:System.Web.Security.AuthorizationStoreRoleProvider>对象将转发到身份验证管理器运行时方法调用。  
  
> [!IMPORTANT]
>  <xref:System.Web.Security.AuthorizationStoreRoleProvider>对象具有在部分信任环境中运行的以下要求：  
>   
>  当使用基于文件的策略存储区中的 ASP.NET 应用程序，由当前的信任级别授予的文件 I/O 权限确定是否读取和写入操作所允许的提供程序。 ASP.NET 应用程序必须具有读取权限，才能从策略存储区中读取数据文件，并且必须具有写入权限，以保存新的信息或更新的策略存储区中的现有信息。 默认中等信任策略文件使其应用程序目录中的 ASP.NET 应用程序读/写权限。 默认值低信任策略文件只授予读取权限在其应用程序目录中的 ASP.NET 应用程序。 此外，在其下运行 ASP.NET 应用程序的进程标识必须具有文件系统权限以读取和/或编写策略文件。  
>   
>  使用 Active Directory 或 ADAM 服务器时，ASP.NET 应用程序需要非托管代码权限，因为内部<xref:System.Web.Security.AuthorizationStoreRoleProvider>对象代码使用 COM 互操作。  
>   
>  当使用<xref:System.Web.Security.AuthorizationStoreRoleProvider>对象在 ASP.NET 外部，调用代码需要非托管代码的权限。  
  
   
  
## Examples  
 下面的代码示例显示了 Web.config 文件设置为使用<xref:System.Web.Security.AuthorizationStoreRoleProvider>用于角色管理。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="AuthorizationServices" connectionString="msxml://~\App_Data\SampleStore.xml" />  
  </connectionStrings>  
  
  <system.web>  
  
    <authentication mode="Windows" />  
    <identity impersonate="true" />  
  
    <roleManager defaultProvider="AuthorizationStoreRoleProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="false"  
      cookieSlidingExpiration="true"  
      cookieProtection="All" >  
      <providers>  
        <clear />  
          <add  
            name="AuthorizationStoreRoleProvider"  
            type="System.Web.Security.AuthorizationStoreRoleProvider"  
            connectionStringName="AuthorizationServices"  
            applicationName="SampleApplication"   
            cacheRefreshInterval="60"  
            scopeName="" />  
      </providers>  
    </roleManager>  
  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthorizationStoreRoleProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AuthorizationStoreRoleProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.%23ctor%2A>构造函数由 ASP.NET 创建的实例调用<xref:System.Web.Security.AuthorizationStoreRoleProvider>为应用程序的配置中指定的类。 此构造函数不是要在代码中使用。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public override void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.AddUsersToRoles : string[] * string[] -&gt; unit" Usage="authorizationStoreRoleProvider.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">要添加到指定的角色的用户名的字符串数组。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定用户名添加到的角色的名称。</param>
        <summary>将指定用户名添加到每个指定的角色。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles%2A>方法由调用<xref:System.Web.Security.Roles>类，以将一个或多个用户与在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器数据存储中的一个或多个角色关联。 调用此方法<xref:System.Web.Security.Roles.AddUserToRole%2A?displayProperty=nameWithType>， <xref:System.Web.Security.Roles.AddUserToRoles%2A?displayProperty=nameWithType>， <xref:System.Web.Security.Roles.AddUsersToRole%2A?displayProperty=nameWithType>，和<xref:System.Web.Security.Roles.AddUsersToRoles%2A?displayProperty=nameWithType>方法的<xref:System.Web.Security.Roles>类。  
  
   
  
## Examples  
 下面的代码示例将一个或多个用户添加到角色，或从角色中删除用户。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.AuthorizationStoreRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定的用户名之一为 <see langword="null" />。  
  
或 
指定的角色名之一为 <see langword="null" />。  
  
或 
 <paramref name="usernames" /> 为 <see langword="null" />。  
  
或 
 <paramref name="roleNames" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">指定的用户名之一为空字符串或是包含一个逗号 (,)。  
  
或 
指定的角色名之一为空字符串或是包含一个逗号 (,)。  
  
或 
 <paramref name="usernames" /> 包含重复的元素。  
  
或 
 <paramref name="roleNames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未找到已配置的 <see langword="applicationName" />。  
  
或 
未找到已配置的 <see langword="scopeName" />。  
  
或 
服务器上没有安装身份验证管理器运行时。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><see langword="connectionStringName" /> 特性引用了一个指向不存在的文件的连接字符串。</exception>
        <exception cref="T:System.Web.HttpException"><see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> 实例使用基于文件的策略存储进行配置，且当前的信任级别不允许对文件进行读访问。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public override string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要存储和检索其角色信息的授权存储应用程序的名称。</summary>
        <value>要存储和检索其角色信息的授权存储应用程序的名称。 默认值为当前 <see cref="P:System.Web.HttpRequest.ApplicationPath" /> 的 <see cref="P:System.Web.HttpContext.Request" /> 属性值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A>由<xref:System.Web.Security.AuthorizationStoreRoleProvider>若要将用户和角色关联不同的授权管理器的应用程序，使多个 ASP.NET 应用程序使用相同的授权管理器策略存储来存储而无需角色信息重复的角色名称之间发生冲突。 或者，多个 ASP.NET 应用程序可以通过指定相同的值中使用相同的策略存储区<xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A>属性。 <xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A>可以以编程方式设置属性，或者可以在设置以声明方式应用程序的 Web.config 文件中使用`applicationName`属性。  
  
 如果没有为指定值`applicationName`特性在 Web.config 文件中，则<xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType>属性值为当前<xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType>使用对象。  
  
> [!NOTE]
>  授权管理器应用程序名称不能包含"/"字符中包含<xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType>属性。 因此的默认值为<xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A>属性不能用作授权管理器应用程序名称，并在应用程序的 Web.config 文件中，您必须始终指定`applicationName`属性中`provider`元素来配置你<xref:System.Web.Security.AuthorizationStoreRoleProvider>实例。  
  
> [!CAUTION]
>  因为所有服务的请求使用单个默认角色提供程序实例<xref:System.Web.HttpApplication>对象，可以有多个请求同时执行，并尝试设置<xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A>属性值。 <xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A>属性不是线程安全的多个写入操作，且不断变化<xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A>属性值可能会导致意外行为时有多个应用程序的用户。 我们建议你避免编写代码，使用户能够设置<xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A>属性除非必要，否则。 应用程序的示例情况<xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A>属性可能需要是管理应用程序，用于管理角色的多个应用程序的数据。 此类应用程序应在单用户应用程序并不是 Web 应用程序。  
  
   
  
## Examples  
 下面的示例演示中的元素`system.web`的 ASP.NET 应用程序的 Web.config 文件部分。 指定应用程序的<xref:System.Web.Security.AuthorizationStoreRoleProvider>实例并设置<xref:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName%2A>属性设置为`MyApplication`。  
  
```  
<roleManager defaultProvider="AuthorizationStoreProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.AuthorizationStoreRoleProvider"  
      connectionStringName="AuthorizationStoreServices"   
      scopeName="MyScope"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">尝试将 <see cref="P:System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName" /> 设置为长于 256 个字符的字符串。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="CacheRefreshInterval">
      <MemberSignature Language="C#" Value="public int CacheRefreshInterval { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheRefreshInterval" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CacheRefreshInterval As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CacheRefreshInterval { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CacheRefreshInterval : int" Usage="System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取策略存储数据区的缓存刷新间隔时间（分钟数）。</summary>
        <value>缓存的策略存储区数据的刷新间隔时间（分钟数）。 默认值为 60。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public override void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.CreateRole : string -&gt; unit" Usage="authorizationStoreRoleProvider.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要创建的角色的名称。</param>
        <summary>将一个新角色添加到角色授权管理器策略存储区。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.CreateRole%2A>方法由调用<xref:System.Web.Security.Roles>类在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器数据存储区中创建一个角色。  
  
 角色名称不区分大小写。  
  
   
  
## Examples  
 下面的代码示例在授权管理器策略存储区中创建一个新的角色。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.AuthorizationStoreRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 是一个空字符串。  
  
或 
 <paramref name="roleName" /> 包含一个逗号。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未找到已配置的 <see langword="applicationName" />。  
  
或 
未找到已配置的 <see langword="scopeName" />。  
  
或 
服务器上没有安装身份验证管理器运行时。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><see langword="connectionStringName" /> 特性引用了一个指向不存在的文件的连接字符串。</exception>
        <exception cref="T:System.Web.HttpException"><see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> 实例使用基于文件的策略存储进行配置，且当前的信任级别不允许对文件进行读访问。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public override bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="override this.DeleteRole : string * bool -&gt; bool" Usage="authorizationStoreRoleProvider.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">要删除的角色的名称。</param>
        <param name="throwOnPopulatedRole">如果为 <see langword="true" />，则当 <paramref name="roleName" /> 包含一个或多个成员时将引发异常。</param>
        <summary>从授权管理器策略存储区中移除角色。</summary>
        <returns>如果角色已删除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole%2A>方法由调用<xref:System.Web.Security.Roles>类从 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器策略存储区中删除一个角色。 删除角色时，从策略存储区还删除与该角色关联的用户的列表。 不受影响数据库中的用户信息。  
  
 如果`throwOnPopulatedRole`是`true`，然后将引发异常并通过标识的角色不会删除此角色`roleName`参数具有一个或多个成员。 如果`throwOnPopulatedRole`是`false`，则将删除该角色，或不为空。  
  
   
  
## Examples  
 下面的示例从授权管理器策略存储区中删除一个角色。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.AuthorizationStoreRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 是一个空字符串。  
  
或 
 <paramref name="roleName" /> 包含一个逗号。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> 具有一个或多个成员且 <paramref name="throwOnPopulatedRole" /> 为 <see langword="true" />。  
  
或 
未找到已配置的 <see langword="applicationName" />。  
  
或 
未找到已配置的 <see langword="scopeName" />。  
  
或 
服务器上没有安装身份验证管理器运行时。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><see langword="connectionStringName" /> 特性引用了一个指向不存在的文件的连接字符串。</exception>
        <exception cref="T:System.Web.HttpException"><see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> 实例使用基于文件的策略存储进行配置，且当前的信任级别不允许对文件进行读访问。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="override this.FindUsersInRole : string * string -&gt; string[]" Usage="authorizationStoreRoleProvider.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">作为搜索范围的角色。</param>
        <param name="usernameToMatch">要搜索的用户名。</param>
        <summary>授权存储区角色提供程序不支持此方法。</summary>
        <returns>一个字符串数组，包含用户名与 <paramref name="usernameToMatch" /> 匹配且是指定角色的成员的所有用户的名称。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">调用了不受支持的方法。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public override string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="override this.GetAllRoles : unit -&gt; string[]" Usage="authorizationStoreRoleProvider.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取应用程序的所有角色的列表。</summary>
        <returns>一个字符串数组，包含在特定应用程序的授权管理器策略存储区中存储的所有角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles%2A>方法由调用<xref:System.Web.Security.Roles>类，以检索在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器策略存储区中的所有角色的列表。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.GetAllRoles%2A>方法获取的应用程序角色的列表，并将绑定到结果<xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType>控件。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.AuthorizationStoreRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">未找到已配置的 <see langword="applicationName" />。  
  
或 
未找到已配置的 <see langword="scopeName" />。  
  
或 
服务器上没有安装身份验证管理器运行时。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><see langword="connectionStringName" /> 特性引用了一个指向不存在的文件的连接字符串。</exception>
        <exception cref="T:System.Web.HttpException"><see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> 实例使用基于文件的策略存储进行配置，且当前的信任级别不允许对文件进行读访问。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public override string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="override this.GetRolesForUser : string -&gt; string[]" Usage="authorizationStoreRoleProvider.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要为其返回角色列表的用户。</param>
        <summary>获取一个用户所属角色的列表。</summary>
        <returns>一个字符串数组，其中包含指定用户所属的所有角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser%2A>方法由调用<xref:System.Web.Security.Roles>类从 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器策略存储区中检索指定的用户的角色的列表。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.GetRolesForUser%2A>方法来检索指定用户角色的列表，并将绑定到<xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType>控件。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.AuthorizationStoreRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="username" /> 包含一个逗号。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未找到已配置的 <see langword="applicationName" />。  
  
或 
未找到已配置的 <see langword="scopeName" />。  
  
或 
服务器上没有安装身份验证管理器运行时。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><see langword="connectionStringName" /> 特性引用了一个指向不存在的文件的连接字符串。</exception>
        <exception cref="T:System.Web.HttpException"><see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> 实例使用基于文件的策略存储进行配置，且当前的信任级别不允许对文件进行读访问。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.GetUsersInRole : string -&gt; string[]" Usage="authorizationStoreRoleProvider.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要获取其用户列表的角色的名称。</param>
        <summary>获取属于指定角色的用户的列表。</summary>
        <returns>一个字符串数组，其中包含指定角色拥有的所有成员的用户名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole%2A>方法由调用<xref:System.Web.Security.Roles>类来检索与在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器策略存储区中的指定角色关联的用户的列表。  
  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole%2A>方法只返回直接包含的用户名称中指定的授权管理器角色`roleName`参数。 基础授权管理器 API 调用的<xref:System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole%2A>方法不支持组扩展，因此不会返回嵌套的 NT 组、 嵌套的授权管理器组和 LDAP 查询组中包含的用户。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.GetUsersInRole%2A>方法以获取特定角色的用户的列表并将绑定到结果<xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType>控件。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.AuthorizationStoreRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 是一个空字符串。  
  
或 
 <paramref name="roleName" /> 包含一个逗号。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未找到已配置的 <see langword="applicationName" />。  
  
或 
未找到已配置的 <see langword="scopeName" />。  
  
或 
服务器上没有安装身份验证管理器运行时。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><see langword="connectionStringName" /> 特性引用了一个指向不存在的文件的连接字符串。</exception>
        <exception cref="T:System.Web.HttpException"><see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> 实例使用基于文件的策略存储进行配置，且当前的信任级别不允许对文件进行读访问。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize (name As String, config As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ config);" />
      <MemberSignature Language="F#" Value="override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="authorizationStoreRoleProvider.Initialize (name, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">要初始化的 <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> 实例的名称。</param>
        <param name="config">一个 <see cref="T:System.Collections.Specialized.NameValueCollection" />，包含角色提供程序的配置选项的名称和值。</param>
        <summary>使用 ASP.NET 应用程序的配置文件中指定的属性值初始化授权管理器角色提供程序。 此方法不能直接在代码中使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.Initialize%2A>方法初始化<xref:System.Web.Security.AuthorizationStoreRoleProvider>与属性值指定 ASP.NET 应用程序配置文件 (Web.config) 中和不应在代码中直接使用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="config" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><see langword="connectionStringName" /> 属性为空或在 [connectionStrings 元素（ASP.NET 设置架构）](https://msdn.microsoft.com/library/b6ffbb2e-a4d1-410e-8f7e-9755e92c65de)配置部分中不存在。  
  
或 
配置的 <see langword="applicationName" /> 的长度超过 256 个字符。  
  
或 
此 <see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> 实例的配置包含无法识别的特性。</exception>
        <exception cref="T:System.Web.HttpException">ASP.NET 应用程序未在 <see cref="F:System.Web.AspNetHostingPermissionLevel.Low" /> 信任级别或更高级别下运行。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public override bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.IsUserInRole : string * string -&gt; bool" Usage="authorizationStoreRoleProvider.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要搜索的用户名。</param>
        <param name="roleName">作为搜索范围的角色。</param>
        <summary>获取一个指示指定用户是否属于指定角色的值。</summary>
        <returns>如果指定的用户名属于指定角色，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole%2A>调用方法<xref:System.Web.Security.Roles>类和<xref:System.Security.Principal.IPrincipal.IsInRole%2A>方法的<xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType>属性来确定用户是否为 ASP.NET 应用程序中指定的授权管理器数据存储中的角色相关联配置文件 (Web.config)。  
  
   
  
## Examples  
 下面的代码示例以编程方式检查以查看登录的用户是否属于管理员角色允许用户查看用户角色之前。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.AuthorizationStoreRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 是一个空字符串。  
  
或 
 <paramref name="roleName" /> 包含一个逗号。  
  
或 
 <paramref name="username" /> 包含一个逗号。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未找到已配置的 <see langword="applicationName" />。  
  
或 
未找到已配置的 <see langword="scopeName" />。  
  
或 
服务器上没有安装身份验证管理器运行时。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><see langword="connectionStringName" /> 特性引用了一个指向不存在的文件的连接字符串。</exception>
        <exception cref="T:System.Web.HttpException"><see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> 实例使用基于文件的策略存储进行配置，且当前的信任级别不允许对文件进行读访问。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public override void RemoveUsersFromRoles (string[] userNames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveUsersFromRoles(string[] userNames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RemoveUsersFromRoles (userNames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ userNames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="authorizationStoreRoleProvider.RemoveUsersFromRoles (userNames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userNames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="userNames">一个字符串数组，其中包含要从指定的角色移除的用户名。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定的用户名从中移除的角色的名称。</param>
        <summary>移除指定角色中的指定用户名。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles%2A>方法由调用<xref:System.Web.Security.Roles>类，以从 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器策略存储中的一个或多个角色中删除一个或多个用户。 调用此方法<xref:System.Web.Security.Roles.RemoveUserFromRole%2A>， <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>， <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A>，和<xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A>方法的<xref:System.Web.Security.Roles>类。  
  
   
  
## Examples  
 下面的代码示例将一个或多个用户添加到角色，或从角色中删除用户。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.AuthorizationStoreRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定的用户名之一为 <see langword="null" />。  
  
或 
指定的角色名之一为 <see langword="null" />。  
  
或 
 <paramref name="userNames" /> 为 <see langword="null" />。  
  
或 
 <paramref name="roleNames" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">指定的用户名之一为空字符串或是包含一个逗号。  
  
或 
指定的角色名之一为空字符串或是包含一个逗号。  
  
或 
 <paramref name="userNames" /> 包含重复的元素。  
  
或 
 <paramref name="roleNames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未找到已配置的 <see langword="applicationName" />。  
  
或 
未找到已配置的 <see langword="scopeName" />。  
  
或 
服务器上没有安装身份验证管理器运行时。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><see langword="connectionStringName" /> 特性引用了一个指向不存在的文件的连接字符串。</exception>
        <exception cref="T:System.Web.HttpException"><see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> 实例使用基于文件的策略存储进行配置，且当前的信任级别不允许对文件进行读访问。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public override bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AuthorizationStoreRoleProvider.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.RoleExists : string -&gt; bool" Usage="authorizationStoreRoleProvider.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要在授权管理器策略存储区中搜索的角色的名称。</param>
        <summary>获取一个值，该值指示指定角色名是否已存在于授权管理器策略存储区中。</summary>
        <returns>如果角色名已存在于授权管理器策略存储区中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.RoleExists%2A>方法由调用<xref:System.Web.Security.Roles>类，以确定是否在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器数据存储区中存在的角色名称。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.RoleExists%2A>方法来确定角色名称是否已存在之前创建该角色。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.AuthorizationStoreRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 是一个空字符串。  
  
或 
 <paramref name="roleName" /> 包含一个逗号。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未找到已配置的 <see langword="applicationName" />。  
  
或 
未找到已配置的 <see langword="scopeName" />。  
  
或 
服务器上没有安装身份验证管理器运行时。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><see langword="connectionStringName" /> 特性引用了一个指向不存在的文件的连接字符串。</exception>
        <exception cref="T:System.Web.HttpException"><see cref="T:System.Web.Security.AuthorizationStoreRoleProvider" /> 实例使用基于文件的策略存储进行配置，且当前的信任级别不允许对文件进行读访问。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="ScopeName">
      <MemberSignature Language="C#" Value="public string ScopeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScopeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName" />
      <MemberSignature Language="VB.NET" Value="Public Property ScopeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScopeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ScopeName : string with get, set" Usage="System.Web.Security.AuthorizationStoreRoleProvider.ScopeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置授权存储区的范围名。</summary>
        <value>授权存储区的范围名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName%2A>属性可以使用设置`scopeName`中的提供程序实例的配置特性`providers`部分中的配置部分。  
  
> [!CAUTION]
>  因为所有服务的请求使用单个默认角色提供程序实例<xref:System.Web.HttpApplication>对象，可以有多个请求同时执行，并尝试设置<xref:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName%2A>属性值。 <xref:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName%2A>属性不是线程安全的多个写入操作，且不断变化<xref:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName%2A>属性值可能会导致意外行为时有多个应用程序的用户。 我们建议你避免编写代码，使用户能够设置<xref:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName%2A>属性除非必要，否则。 应用程序的示例情况<xref:System.Web.Security.AuthorizationStoreRoleProvider.ScopeName%2A>属性可能需要是管理应用程序，用于管理角色的多个应用程序的数据。 此类应用程序应在单用户应用程序并不是 Web 应用程序。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
  </Members>
</Type>