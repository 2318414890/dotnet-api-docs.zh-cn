<Type Name="RolePrincipal" FullName="System.Web.Security.RolePrincipal">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="67099bacb2588ff0b121301612754030c77f8f83" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30550191" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RolePrincipal : System.Security.Claims.ClaimsPrincipal, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RolePrincipal extends System.Security.Claims.ClaimsPrincipal implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.RolePrincipal" />
  <TypeSignature Language="VB.NET" Value="Public Class RolePrincipal&#xA;Inherits ClaimsPrincipal&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class RolePrincipal : System::Security::Claims::ClaimsPrincipal, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Claims.ClaimsPrincipal</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示当前 HTTP 请求的安全信息，包括角色成员资格。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RolePrincipal>对象实现<xref:System.Security.Principal.IPrincipal>接口，并在表示 HTTP 请求的当前安全上下文。  
  
 启用角色管理后 (请参阅<xref:System.Web.Security.Roles>)，则<xref:System.Web.Security.RoleManagerModule>分配<xref:System.Web.Security.RolePrincipal>对象传递给<xref:System.Web.HttpContext.User%2A>属性<xref:System.Web.HttpContext.Current%2A> <xref:System.Web.HttpContext>。  
  
 <xref:System.Web.Security.RolePrincipal>类公开为当前 HTTP 请求的安全标识和另外的角色成员身份进行检查。 如果<xref:System.Web.Security.Roles.CacheRolesInCookie%2A>是`true`，则<xref:System.Web.Security.RolePrincipal>对象管理的角色的缓存的列表和查找中已缓存的当前用户的角色成员身份列表前，然后角色<xref:System.Web.Security.Roles.Provider%2A>。 如果<xref:System.Web.Security.Roles.CacheRolesInCookie%2A>是`false`、<xref:System.Web.Security.RolePrincipal>对象始终查找使用角色提供程序的角色成员身份。  
  
 <xref:System.Web.Security.RolePrincipal>对象进行加密和解密在由标识的 cookie 中缓存的角色信息<xref:System.Web.Security.Roles.CookieName%2A>基于<xref:System.Web.Security.Roles.CookieProtectionValue%2A>。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建 <see cref="T:System.Web.Security.RolePrincipal" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RolePrincipal (System.Security.Principal.IIdentity identity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IIdentity identity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RolePrincipal.#ctor(System.Security.Principal.IIdentity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IIdentity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RolePrincipal(System::Security::Principal::IIdentity ^ identity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IIdentity" />
      </Parameters>
      <Docs>
        <param name="identity">为其创建 <see cref="T:System.Web.Security.RolePrincipal" /> 的用户标识。</param>
        <summary>为指定的 <paramref name="identity" /> 实例化一个 <see cref="T:System.Web.Security.RolePrincipal" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载<xref:System.Web.Security.RolePrincipal.%23ctor%2A>构造函数创建一个新<xref:System.Web.Security.RolePrincipal>对象并初始化它的属性值。 从由标识的 cookie 不读取缓存的角色信息<xref:System.Web.Security.Roles.CookieName%2A>属性。 <xref:System.Web.Security.RolePrincipal.ProviderName%2A>属性设置为<xref:System.Configuration.Provider.ProviderBase.Name%2A>的默认角色提供程序。  
  
 有关启用角色管理的信息，请参阅<xref:System.Web.Security.Roles>类。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:System.Web.Security.RolePrincipal>对象。 如果<xref:System.Web.Security.Roles.CacheRolesInCookie%2A>是`true`，该示例创建<xref:System.Web.Security.RolePrincipal>与从由标识 cookie 的 cookie 信息<xref:System.Web.Security.Roles.CookieName%2A>属性。  
  
 [!code-csharp[System.Web.Security.RolePrincipal#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/CS/snippetscs.aspx#2)]
 [!code-vb[System.Web.Security.RolePrincipal#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/VB/snippetsvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RolePrincipal (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RolePrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; RolePrincipal(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
        <param name="context">此序列化的目标。</param>
        <summary>使用指定 <see cref="T:System.Web.Security.RolePrincipal" /> 对象中包含的信息并使用指定的流上下文初始化 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RolePrincipal (System.Security.Principal.IIdentity identity, string encryptedTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IIdentity identity, string encryptedTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RolePrincipal.#ctor(System.Security.Principal.IIdentity,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IIdentity, encryptedTicket As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RolePrincipal(System::Security::Principal::IIdentity ^ identity, System::String ^ encryptedTicket);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IIdentity" />
        <Parameter Name="encryptedTicket" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identity">为其创建 <see cref="T:System.Web.Security.RolePrincipal" /> 的用户标识。</param>
        <param name="encryptedTicket">包含加密的角色信息的字符串。</param>
        <summary>利用指定的 <paramref name="identity" /> 中的角色信息为指定的 <paramref name="encryptedTicket" /> 实例化 <see cref="T:System.Web.Security.RolePrincipal" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载<xref:System.Web.Security.RolePrincipal.%23ctor%2A>构造函数创建一个新<xref:System.Web.Security.RolePrincipal>对象并初始化它的属性值。 读取为当前用户的角色信息从提供`encryptedTicket`和缓存使用<xref:System.Web.Security.RolePrincipal>对象。 <xref:System.Web.Security.RolePrincipal.ProviderName%2A>属性设置为<xref:System.Configuration.Provider.ProviderBase.Name%2A>的默认角色提供程序。  
  
 有关启用角色管理的信息，请参阅<xref:System.Web.Security.Roles>类。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:System.Web.Security.RolePrincipal>对象。 如果<xref:System.Web.Security.Roles.CacheRolesInCookie%2A>是`true`，该示例创建<xref:System.Web.Security.RolePrincipal>与从由标识 cookie 的 cookie 信息<xref:System.Web.Security.Roles.CookieName%2A>属性。  
  
 [!code-csharp[System.Web.Security.RolePrincipal#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/CS/snippetscs.aspx#2)]
 [!code-vb[System.Web.Security.RolePrincipal#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/VB/snippetsvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="encryptedTicket" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RolePrincipal (string providerName, System.Security.Principal.IIdentity identity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string providerName, class System.Security.Principal.IIdentity identity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RolePrincipal.#ctor(System.String,System.Security.Principal.IIdentity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerName As String, identity As IIdentity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RolePrincipal(System::String ^ providerName, System::Security::Principal::IIdentity ^ identity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerName" Type="System.String" />
        <Parameter Name="identity" Type="System.Security.Principal.IIdentity" />
      </Parameters>
      <Docs>
        <param name="providerName">用户的角色提供程序的名称。</param>
        <param name="identity">为其创建 <see cref="T:System.Web.Security.RolePrincipal" /> 的用户标识。</param>
        <summary>使用指定的 <paramref name="identity" /> 为指定的 <paramref name="providerName" /> 实例化 <see cref="T:System.Web.Security.RolePrincipal" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载<xref:System.Web.Security.RolePrincipal.%23ctor%2A>构造函数创建一个新<xref:System.Web.Security.RolePrincipal>对象并初始化它的属性值。 <xref:System.Web.Security.RolePrincipal.ProviderName%2A>属性设置中指定的值为`providerName`参数。  
  
 有关启用角色管理的信息，请参阅<xref:System.Web.Security.Roles>类。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="providerName" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="providerName" /> 引用在应用程序的配置中不存在的角色提供程序。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RolePrincipal (string providerName, System.Security.Principal.IIdentity identity, string encryptedTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string providerName, class System.Security.Principal.IIdentity identity, string encryptedTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RolePrincipal.#ctor(System.String,System.Security.Principal.IIdentity,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerName As String, identity As IIdentity, encryptedTicket As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RolePrincipal(System::String ^ providerName, System::Security::Principal::IIdentity ^ identity, System::String ^ encryptedTicket);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerName" Type="System.String" />
        <Parameter Name="identity" Type="System.Security.Principal.IIdentity" />
        <Parameter Name="encryptedTicket" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="providerName">用户的角色提供程序的名称。</param>
        <param name="identity">为其创建 <see cref="T:System.Web.Security.RolePrincipal" /> 的用户标识。</param>
        <param name="encryptedTicket">包含加密的角色信息的字符串。</param>
        <summary>使用指定的 <paramref name="identity" /> 和指定的 <paramref name="providerName" /> 中的角色信息，为指定的 <paramref name="encryptedTicket" /> 实例化 <see cref="T:System.Web.Security.RolePrincipal" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载<xref:System.Web.Security.RolePrincipal.%23ctor%2A>构造函数创建一个新<xref:System.Web.Security.RolePrincipal>对象并初始化它的属性值。 读取为当前用户的角色信息从提供`encryptedTicket`和缓存使用<xref:System.Web.Security.RolePrincipal>对象。 <xref:System.Web.Security.RolePrincipal.ProviderName%2A>属性设置中指定的值为`providerName`参数。  
  
 有关启用角色管理的信息，请参阅<xref:System.Web.Security.Roles>类。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="encryptedTicket" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="providerName" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="providerName" /> 引用在应用程序的配置中不存在的角色提供程序。</exception>
      </Docs>
    </Member>
    <Member MemberName="CachedListChanged">
      <MemberSignature Language="C#" Value="public bool CachedListChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CachedListChanged" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.RolePrincipal.CachedListChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CachedListChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CachedListChanged { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否修改了利用 <see cref="T:System.Web.Security.RolePrincipal" /> 对象缓存的角色名称的列表。</summary>
        <value>
          如果修改了利用 <see cref="T:System.Web.Security.RolePrincipal" /> 对象缓存的角色名称的列表，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RolePrincipal.CachedListChanged%2A>属性将返回`true`角色名称检索从默认角色后<xref:System.Web.Security.Roles.Provider%2A>和添加到缓存中，按<xref:System.Web.Security.RolePrincipal.GetRoles%2A>方法，或当<xref:System.Web.Security.RolePrincipal.IsInRole%2A>方法调用<xref:System.Web.Security.RoleProvider.IsUserInRole%2A>方法默认角色提供程序，然后接收的响应`true`，这会导致角色名称传递给中<xref:System.Web.Security.RolePrincipal.IsInRole%2A>方法添加到缓存。  
  
 <xref:System.Web.Security.RolePrincipal.CachedListChanged%2A>属性将还返回 true，如果<xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>设置为`true`和<xref:System.Web.Security.RolePrincipal.ExpireDate%2A>已传递，从而在新<xref:System.Web.Security.RolePrincipal.ExpireDate%2A>设置。  
  
   
  
## Examples  
 如果启用角色管理，下面的示例将显示角色缓存当前用户的信息。 有关启用角色管理的信息，请参阅<xref:System.Web.Security.Roles>类。  
  
 [!code-aspx-csharp[System.Web.Security.RolePrincipal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/CS/getroleinfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.RolePrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/VB/getroleinfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookiePath">
      <MemberSignature Language="C#" Value="public string CookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.RolePrincipal.CookiePath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CookiePath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取缓存角色名称的 Cookie 的路径。</summary>
        <value>在其中缓存角色名称的 Cookie 的路径。 默认值是 /。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RolePrincipal.CookiePath%2A>属性返回的值`cookiePath`从 ASP.NET 应用程序的 Web.config 文件的属性。 有关 cookie 路径的详细信息，请参阅<xref:System.Web.HttpCookie.Path%2A>。  
  
   
  
## Examples  
 如果启用角色管理，下面的示例将显示角色缓存当前用户的信息。 有关启用角色管理的信息，请参阅<xref:System.Web.Security.Roles>类。  
  
 [!code-aspx-csharp[System.Web.Security.RolePrincipal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/CS/getroleinfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.RolePrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/VB/getroleinfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Expired">
      <MemberSignature Language="C#" Value="public bool Expired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Expired" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.RolePrincipal.Expired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Expired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Expired { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，它指示角色 Cookie 是否已过期。</summary>
        <value>
          如果角色 Cookie 已过期，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RolePrincipal.Expired%2A>属性返回`Boolean`值，该值指示是否已过期角色 cookie 基于<xref:System.Web.Security.RolePrincipal.ExpireDate%2A>和当前日期和时间。  
  
   
  
## Examples  
 如果启用角色管理，下面的示例将显示角色缓存当前用户的信息。 有关启用角色管理的信息，请参阅<xref:System.Web.Security.Roles>类。  
  
 [!code-aspx-csharp[System.Web.Security.RolePrincipal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/CS/getroleinfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.RolePrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/VB/getroleinfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpireDate">
      <MemberSignature Language="C#" Value="public DateTime ExpireDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ExpireDate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.RolePrincipal.ExpireDate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpireDate As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime ExpireDate { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取角色 Cookie 将过期的日期和时间。</summary>
        <value>角色 Cookie 将过期的 <see cref="T:System.DateTime" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 如果启用角色管理，下面的示例将显示角色缓存当前用户的信息。 有关启用角色管理的信息，请参阅<xref:System.Web.Security.Roles>类。  
  
 [!code-aspx-csharp[System.Web.Security.RolePrincipal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/CS/getroleinfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.RolePrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/VB/getroleinfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="protected override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RolePrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
        <param name="context">此序列化的目标。</param>
        <summary>使用数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该数据是使用指定的流上下文序列化目标对象所必需的。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关更多信息，请参见 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoles">
      <MemberSignature Language="C#" Value="public string[] GetRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RolePrincipal.GetRoles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetRoles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取 <see cref="T:System.Web.Security.RolePrincipal" /> 是其成员的角色的列表。</summary>
        <returns>
          <see cref="T:System.Web.Security.RolePrincipal" /> 是其成员的角色的列表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Web.Security.Roles.CacheRolesInCookie%2A>是`true`和表示的用户为已缓存角色名称<xref:System.Web.Security.RolePrincipal>，则<xref:System.Web.Security.RolePrincipal.GetRoles%2A>方法将返回用户所在的缓存的角色名称的列表。 如果尚未缓存角色名称，则<xref:System.Web.Security.RolePrincipal.GetRoles%2A>方法将返回用户是从默认角色的成员的角色名称的列表<xref:System.Web.Security.Roles.Provider%2A>。 仅为当前的角色名称<xref:System.Web.Security.Roles.ApplicationName%2A>返回。 若要确定是否已在缓存角色名称<xref:System.Web.Security.RolePrincipal>对象，检查<xref:System.Web.Security.RolePrincipal.IsRoleListCached%2A>属性。  
  
   
  
## Examples  
 下面的代码示例显示所属角色的成员的登录的用户。  
  
 [!code-aspx-csharp[System.Web.Security.RolePrincipal#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/CS/GetRolescs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.RolePrincipal#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/VB/GetRolesvb.aspx#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          <see cref="P:System.Web.Security.RolePrincipal.Identity" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Identity">
      <MemberSignature Language="C#" Value="public override System.Security.Principal.IIdentity Identity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity Identity" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.RolePrincipal.Identity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Identity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ Identity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>为当前 HTTP 请求获取安全标识。</summary>
        <value>当前 HTTP 请求的安全标识。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RolePrincipal.Identity%2A>的<xref:System.Web.Security.RolePrincipal>对象设置时<xref:System.Web.Security.RolePrincipal>调用构造函数。  
  
   
  
## Examples  
 如果启用角色管理，下面的示例将显示角色缓存当前用户的信息。 有关启用角色管理的信息，请参阅<xref:System.Web.Security.Roles>类。  
  
 [!code-aspx-csharp[System.Web.Security.RolePrincipal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/CS/getroleinfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.RolePrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/VB/getroleinfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInRole">
      <MemberSignature Language="C#" Value="public override bool IsInRole (string role);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsInRole(string role) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RolePrincipal.IsInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsInRole (role As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsInRole(System::String ^ role);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="role" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="role">要搜索的角色。</param>
        <summary>获取一个值，该值指示由 <see cref="T:System.Web.Security.RolePrincipal" /> 表示的用户是否扮演指定的角色。</summary>
        <returns>
          如果由 <see cref="T:System.Web.Security.RolePrincipal" /> 表示的用户扮演指定的角色，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RolePrincipal.IsInRole%2A> 首先检查<xref:System.Web.Security.RolePrincipal.IsRoleListCached%2A>属性来确定是否可缓存当前用户的角色名称的列表。 如果<xref:System.Web.Security.RolePrincipal.IsRoleListCached%2A>属性是`true`，为指定的角色会检查缓存的列表。 如果<xref:System.Web.Security.RolePrincipal.IsInRole%2A>方法在缓存的列表中找到指定的角色，它将返回`true`。  
  
 如果<xref:System.Web.Security.RolePrincipal.IsInRole%2A>找不到指定的角色，它调用<xref:System.Web.Security.RoleProvider.GetRolesForUser%2A>方法的默认值<xref:System.Web.Security.Roles.Provider%2A>实例以确定用户名称是从数据源中为配置的角色相关联<xref:System.Web.Security.Roles.ApplicationName%2A>值。  
  
   
  
## Examples  
 下面的代码示例检查以确定登录的用户是否管理员角色允许用户查看用户角色之前。  
  
 [!code-aspx-csharp[System.Web.Security.RolePrincipal#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/CS/ViewRolescs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.RolePrincipal#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/VB/ViewRolesvb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          <see cref="P:System.Web.Security.RolePrincipal.Identity" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsRoleListCached">
      <MemberSignature Language="C#" Value="public bool IsRoleListCached { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRoleListCached" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.RolePrincipal.IsRoleListCached" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRoleListCached As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRoleListCached { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示用户的角色列表是否已缓存在 Cookie 中。</summary>
        <value>
          如果角色名称已缓存在 Cookie 中，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`cacheRolesInCookie`属性在 Web.config 文件中的应用设置为`true`，则为当前用户的角色名称的列表写入 cookie 时检查特定角色中的用户成员身份。 <xref:System.Web.Security.RolePrincipal.IsRoleListCached%2A>属性指示角色名称是否已写入到 cookie。 请注意，即使`cacheRolesInCookie`配置属性可能为`true`、<xref:System.Web.Security.RolePrincipal.IsRoleListCached%2A>属性不返回`true`直到角色信息已写入到 cookie 后。 如果没有相应的角色检查执行对于用户，<xref:System.Web.Security.RolePrincipal.IsRoleListCached%2A>将返回`false`。  
  
   
  
## Examples  
 如果启用角色管理，下面的示例将显示角色缓存当前用户的信息。 有关启用角色管理的信息，请参阅<xref:System.Web.Security.Roles>类。  
  
 [!code-aspx-csharp[System.Web.Security.RolePrincipal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/CS/getroleinfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.RolePrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/VB/getroleinfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IssueDate">
      <MemberSignature Language="C#" Value="public DateTime IssueDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime IssueDate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.RolePrincipal.IssueDate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IssueDate As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime IssueDate { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取发布角色 Cookie 的日期和时间。</summary>
        <value>发布角色 Cookie 的 <see cref="T:System.DateTime" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 如果启用角色管理，下面的示例将显示角色缓存当前用户的信息。 有关启用角色管理的信息，请参阅<xref:System.Web.Security.Roles>类。  
  
 [!code-aspx-csharp[System.Web.Security.RolePrincipal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/CS/getroleinfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.RolePrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/VB/getroleinfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderName">
      <MemberSignature Language="C#" Value="public string ProviderName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.RolePrincipal.ProviderName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取存储和检索用户角色信息的角色提供程序的名称。</summary>
        <value>存储和检索用户角色信息的角色提供程序的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RolePrincipal.ProviderName%2A>属性公开管理所表示的用户角色信息的角色提供程序的名称<xref:System.Web.Security.RolePrincipal>对象。 这使你可以通过访问用户的特定的角色提供程序实例<xref:System.Web.Security.Roles.Providers%2A>属性<xref:System.Web.Security.Roles>，无论是否提供程序的默认提供程序应用程序的类。 例如，你可能创建一个带方法<xref:System.Web.Security.RolePrincipal>作为输入，并返回所表示的用户角色的列表。 你可以确保相应的角色提供程序用于返回角色列表<xref:System.Web.Security.RolePrincipal>通过调用<xref:System.Web.Security.RoleProvider.GetRolesForUser%2A>方法中的角色提供程序<xref:System.Web.Security.Roles.Providers%2A>按编制索引的集合<xref:System.Web.Security.RolePrincipal.ProviderName%2A>属性值。  
  
 若要填充<xref:System.Web.Security.RolePrincipal>对象为每个请求必须使用<xref:System.Web.Security.RoleManagerModule.GetRoles>在应用程序的 Global.asax 文件中定义的事件处理程序。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDirty">
      <MemberSignature Language="C#" Value="public void SetDirty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDirty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RolePrincipal.SetDirty" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDirty ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDirty();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将缓存的角色列表标记为已被更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RolePrincipal.SetDirty%2A>方法将标记为已通过设置已更改缓存的角色列表<xref:System.Web.Security.RolePrincipal.CachedListChanged%2A>到`true`和<xref:System.Web.Security.RolePrincipal.IsRoleListCached%2A>到`false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RolePrincipal.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">此序列化的目标。</param>
        <summary>有关此成员的说明，请参阅 <see cref="M:System.Runtime.Serialization.ISerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Web.Security.RolePrincipal> 实例强制转换为 <xref:System.Runtime.Serialization.ISerializable> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToEncryptedTicket">
      <MemberSignature Language="C#" Value="public string ToEncryptedTicket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToEncryptedTicket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RolePrincipal.ToEncryptedTicket" />
      <MemberSignature Language="VB.NET" Value="Public Function ToEncryptedTicket () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToEncryptedTicket();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回利用 <see cref="T:System.Web.Security.RolePrincipal" /> 对象缓存并根据 <see cref="P:System.Web.Security.Roles.CookieProtectionValue" /> 加密的角色信息。</summary>
        <returns>利用 <see cref="T:System.Web.Security.RolePrincipal" /> 对象缓存并根据 <see cref="P:System.Web.Security.Roles.CookieProtectionValue" /> 加密的角色信息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的值<xref:System.Web.Security.RolePrincipal.ToEncryptedTicket%2A>方法存储在角色 cookie 时<xref:System.Web.Security.Roles.CacheRolesInCookie%2A>是`true`。  
  
   
  
## Examples  
 下面的代码示例将的结果<xref:System.Web.Security.RolePrincipal.ToEncryptedTicket%2A>角色 cookie 的方法。  
  
 [!code-csharp[System.Web.Security.RolePrincipal#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/CS/snippetscs.aspx#6)]
 [!code-vb[System.Web.Security.RolePrincipal#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/VB/snippetsvb.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public int Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Version" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.RolePrincipal.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Version { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取角色 Cookie 的版本号。</summary>
        <value>角色 Cookie 的版本号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 的未来版本可以通过在角色 cookie 中包含的版本号，修改角色 cookie 的格式并使用<xref:System.Web.Security.RolePrincipal.Version%2A>属性来区分不同的格式。  
  
   
  
## Examples  
 如果启用角色管理，下面的示例将显示角色缓存当前用户的信息。 有关启用角色管理的信息，请参阅<xref:System.Web.Security.Roles>类。  
  
 [!code-aspx-csharp[System.Web.Security.RolePrincipal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/CS/getroleinfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.RolePrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.RolePrincipal/VB/getroleinfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>