<Type Name="FormsAuthentication" FullName="System.Web.Security.FormsAuthentication">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99fdbeccd9e5760538fd56df9dc3fd84a77c7e7d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36597437" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FormsAuthentication" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FormsAuthentication extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.FormsAuthentication" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FormsAuthentication" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormsAuthentication sealed" />
  <TypeSignature Language="F#" Value="type FormsAuthentication = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Manages forms-authentication services for Web applications. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 窗体身份验证使用户和密码验证的 Web 应用程序不需要 Windows 身份验证。 使用窗体身份验证，用户信息存储在外部数据源，如<xref:System.Web.Security.Membership>数据库，或应用程序的配置文件中。 一旦用户进行身份验证，窗体身份验证都维护在 cookie 或 URL 中的身份验证票证，以便经过身份验证的用户不需要提供与每个请求的凭据。  
  
 通过设置启用 forms 身份验证`mode`到的配置元素的属性`Forms`。 你可以要求对应用程序的所有请求使用的配置元素为拒绝该任何的请求未知的用户，如下面的示例中所示都包含有效的用户身份验证票证。  
  
```  
<system.web>  
  <authentication mode="Forms">  
    <forms loginUrl="login.aspx" />  
  </authentication>  
  <authorization>  
    <deny users="?" />  
  </authorization>  
</system.web>  
```  
  
 在前面的示例中，应用程序的一部分的 ASP.NET 页的任何请求需要由窗体身份验证提供有效的用户名称。 如果用户名不存在，则将请求重定向到已配置<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>。  
  
 <xref:System.Web.Security.FormsAuthentication>类提供给方法和属性可以在对用户进行身份验证的应用程序中使用的访问。 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法将浏览器重定向到已配置<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>以便用户可以登录到应用程序。 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法将身份验证的用户重定向回原始请求的受保护 URL 或<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>。 也有必要使你能够管理窗体身份验证票证的方法。  
  
   
  
## Examples  
 下面的代码示例演示的 ASP.NET 应用程序使用 ASP.NET 成员资格提供程序用于表单身份验证，并要求所有用户进行身份验证的 Web.config 文件。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <add name="SqlProvider"  
          type="System.Web.Security.SqlMembershipProvider"  
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="true"  
          requiresQuestionAndAnswer="true"  
          passwordFormat="Hashed"  
          applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
 下面的代码示例演示的 ASP.NET 应用程序使用窗体身份验证和 ASP.NET 成员身份的登录页。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Web.AspNetHostingPermission">若要使用<see cref="T:System.Web.Security.FormsAuthentication" />在托管环境中的类。 要求值： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。 权限值： <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" />。</permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormsAuthentication ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormsAuthentication();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Security.FormsAuthentication" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数不应在代码中使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public static bool Authenticate (string name, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Authenticate(string name, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Authenticate(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Authenticate (name As String, password As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Authenticate(System::String ^ name, System::String ^ password);" />
      <MemberSignature Language="F#" Value="static member Authenticate : string * string -&gt; bool" Usage="System.Web.Security.FormsAuthentication.Authenticate (name, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is to use the Membership APIs, such as Membership.ValidateUser. For more information, see http://go.microsoft.com/fwlink/?LinkId=252463.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The user name.</param>
        <param name="password">The password for the user.</param>
        <summary>Validates a user name and password against credentials stored in the configuration file for an application.</summary>
        <returns>
          <see langword="true" /> if the user name and password are valid; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 身份验证方法验证应用程序配置文件的部分中存储的用户凭据。 或者，可以使用 ASP.NET 成员身份来存储用户凭据和调用<xref:System.Web.Security.MembershipProvider.ValidateUser%2A>以验证凭据。 有关详细信息，请参阅[使用成员资格管理用户](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd)。  
  
 为了提高安全性，你可以对密码进行加密存储在应用程序的配置文件，通过使用<xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A>方法。  
  
   
  
## Examples  
 下面的代码示例显示存储在应用程序的 Web.config 文件中的用户凭据。 密码值具有已进行哈希运算使用<xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A>方法。  
  
 `<authentication mode="Forms">`  
  
 `<forms loginUrl="login.aspx">`  
  
 `<credentials passwordFormat="SHA1">`  
  
 `<user name="user1"   password="27CE4CA7FBF00685AF2F617E3F5BBCAFF7B7403C" />`  
  
 `<user name="user2"   password="D108F80936F78DFDD333141EBC985B0233A30C7A" />`  
  
 `<user name="user3" password="7BDB09781A3F23885CD43177C0508B375CB1B7E9"/>`  
  
 `</credentials>`  
  
 `</forms>`  
  
 `</authentication>`  
  
 下面的代码示例演示使用登录页<xref:System.Web.Security.FormsAuthentication.Authenticate%2A>方法来验证用户凭据。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/loginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieDomain">
      <MemberSignature Language="C#" Value="public static string CookieDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieDomain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieDomain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieDomain { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieDomain : string" Usage="System.Web.Security.FormsAuthentication.CookieDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the domain of the forms-authentication cookie.</summary>
        <value>
          <see cref="P:System.Web.HttpCookie.Domain" />窗体身份验证 cookie。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.CookieDomain%2A>使用 ASP.NET 应用程序配置文件中设置属性值`domain`配置元素的属性。 <xref:System.Web.Security.FormsAuthentication.CookieDomain%2A>属性值确定<xref:System.Web.HttpCookie.Domain%2A>，cookie 将用于。  
  
   
  
## Examples  
 下面的代码示例设置`domain`Web.config 文件中的属性。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    domain="contoso.com" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieMode">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookieMode CookieMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.HttpCookieMode CookieMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieMode As HttpCookieMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::HttpCookieMode CookieMode { System::Web::HttpCookieMode get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieMode : System.Web.HttpCookieMode" Usage="System.Web.Security.FormsAuthentication.CookieMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the application is configured for cookieless forms authentication.</summary>
        <value>之一<see cref="T:System.Web.HttpCookieMode" />值，该值指示是否为无 cookie 窗体身份验证配置应用程序。 默认值为 <see cref="F:System.Web.HttpCookieMode.UseDeviceProfile" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.CookieMode%2A>属性反映的值`cookieless`配置元素的属性。 <xref:System.Web.Security.FormsAuthentication.CookieMode%2A>属性确定是否<xref:System.Web.Security.FormsAuthenticationTicket>将存储在浏览器中的会话 cookie 值，或将其存储在<xref:System.Web.HttpRequest.QueryString%2A>属性。  
  
> [!NOTE]
>  当<xref:System.Web.Security.FormsAuthenticationTicket>值存储在 URI 中，生成的 URI 的长度可能超过允许的最大长度。 这是最有可能发生时<xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>属性设置为应用程序名称和应用程序名称太长 （40 或多个字符），当用户在应用程序名称时较长，或者长<xref:System.Web.Security.FormsAuthenticationTicket.UserData%2A>字符串存储在<xref:System.Web.Security.FormsAuthenticationTicket>值。 如果生成的 URI 是太长，则 Web 服务器将返回`400 - Bad Request`错误。  
  
   
  
## Examples  
 下面的代码示例设置`cookieless`属性设为`AutoDetect`Web.config 文件中。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="AutoDetect" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieSameSite">
      <MemberSignature Language="C#" Value="public static System.Web.SameSiteMode CookieSameSite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.SameSiteMode CookieSameSite" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieSameSite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSameSite As SameSiteMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::SameSiteMode CookieSameSite { System::Web::SameSiteMode get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieSameSite : System.Web.SameSiteMode" Usage="System.Web.Security.FormsAuthentication.CookieSameSite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SameSiteMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value for the SameSite attribute of the cookie.</summary>
        <value>一个枚举值，它表示 cookie 的强制模式。 默认值为 <see cref="F:System.Web.SameSiteMode.Lax" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CookiesSupported">
      <MemberSignature Language="C#" Value="public static bool CookiesSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookiesSupported" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookiesSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiesSupported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookiesSupported { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookiesSupported : bool" Usage="System.Web.Security.FormsAuthentication.CookiesSupported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the application is configured to support cookieless forms authentication.</summary>
        <value>
          <see langword="false" /> 如果应用程序配置为支持无 cookie 窗体身份验证;否则为<see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>属性返回一个值基于<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>值和浏览器的功能。  
  
-   如果<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>属性设置为<xref:System.Web.HttpCookieMode.UseCookies>、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>属性将返回`true`。  
  
-   如果<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>属性设置为<xref:System.Web.HttpCookieMode.UseUri>、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>属性将返回`false`。  
  
-   如果<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>属性设置为<xref:System.Web.HttpCookieMode.AutoDetect>、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>属性将返回`true`如果浏览器支持 cookie，cookie 是已启用; 否则为<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>属性将返回`false`。  
  
-   如果<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>属性设置为<xref:System.Web.HttpCookieMode.UseDeviceProfile>、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>属性将返回`true`如果<xref:System.Web.HttpRequest.Browser%2A>当前<xref:System.Web.HttpContext.Request%2A>支持 cookie 和重定向使用 cookie; 否则为<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>属性将返回`false`。  
  
   
  
## Examples  
 下面的代码示例设置`cookieless`属性设为<xref:System.Web.HttpCookieMode.UseUri>Web.config 文件中。 此配置将导致<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>属性返回`false`。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseUri" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public static System.Web.Security.FormsAuthenticationTicket Decrypt (string encryptedTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.FormsAuthenticationTicket Decrypt(string encryptedTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Decrypt(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Decrypt (encryptedTicket As String) As FormsAuthenticationTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::FormsAuthenticationTicket ^ Decrypt(System::String ^ encryptedTicket);" />
      <MemberSignature Language="F#" Value="static member Decrypt : string -&gt; System.Web.Security.FormsAuthenticationTicket" Usage="System.Web.Security.FormsAuthentication.Decrypt encryptedTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.FormsAuthenticationTicket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedTicket" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="encryptedTicket">The encrypted authentication ticket.</param>
        <summary>Creates a <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> object based on the encrypted forms-authentication ticket passed to the method.</summary>
        <returns>A <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> object. If the <paramref name="encryptedTicket" /> parameter is not a valid ticket, <see langword="null" /> is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="encryptedTicket" /> is <see langword="null" />.  \- or -  <paramref name="encryptedTicket" /> is an empty string ("").  \- or -  The length of <paramref name="encryptedTicket" /> is greater than 4096 characters.  \- or -  <paramref name="encryptedTicket" /> is of an invalid format.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultUrl">
      <MemberSignature Language="C#" Value="public static string DefaultUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string DefaultUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.DefaultUrl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DefaultUrl { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUrl : string" Usage="System.Web.Security.FormsAuthentication.DefaultUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the URL that the <see cref="T:System.Web.Security.FormsAuthentication" /> class will redirect to if no redirect URL is specified.</summary>
        <value>URL 的<see cref="T:System.Web.Security.FormsAuthentication" />类将重定向到如果不指定 URL 的重定向。 默认值是"default.aspx"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>使用 ASP.NET 应用程序配置文件中设置属性值`defaultUrl`配置元素的属性。 <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>属性由<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>如果请求中包含不返回 URL 的方法。 同样，<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法将返回<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>如果请求中包含不返回 URL。  
  
   
  
## Examples  
 下面的代码示例设置`defaultUrl`Web.config 文件中的属性。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    defaultUrl="index.aspx" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCrossAppRedirects">
      <MemberSignature Language="C#" Value="public static bool EnableCrossAppRedirects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnableCrossAppRedirects" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnableCrossAppRedirects As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnableCrossAppRedirects { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EnableCrossAppRedirects : bool" Usage="System.Web.Security.FormsAuthentication.EnableCrossAppRedirects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether authenticated users can be redirected to URLs in other Web applications.</summary>
        <value>
          <see langword="true" /> 如果经过身份验证的用户可以重定向到 Url 中其他 Web 应用程序中;，否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>使用设置属性值`enableCrossAppRedirects`配置元素的属性。  
  
 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>中选中属性<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法时重定向 URL 未指向当前应用程序中的页。 如果<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>是`true`，然后执行重定向; 如果<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>是`false`，将浏览器重定向到中定义的页<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>属性。  
  
> [!NOTE]
>  当跨应用程序重定向页时，必须确保内经过身份验证的应用程序重复的配置元素中的特定属性。 有关详细信息及示例，请参阅[跨应用程序的窗体身份验证](http://msdn.microsoft.com/library/99e2f9e8-5b97-4a4d-a4ed-5f93276053b7)。  
  
> [!IMPORTANT]
>  如果允许跨应用程序重定向，你的站点容易受到攻击，将用户定向到恶意网站，但为您的网站使用的登录页。 始终验证重定向 URL 返回<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法是希望，以便你可以确保你允许重定向仅到已批准的网站的 URL。 你还必须验证重定向 URL，使用适当的协议 （HTTP 或 HTTPS）。 若要执行这些验证，可以将一个回发事件处理程序添加到您的登录页，也可以添加的处理程序<xref:System.Web.UI.WebControls.Login.LoggedIn>事件<xref:System.Web.UI.WebControls.Login>控件。  
  
   
  
## Examples  
 下面的代码示例设置`enableCrossAppRedirects`属性设为`true`ASP.NET 应用程序的 Web.config 文件中。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseUri"  
    requireSSL="true"   
    enableCrossAppRedirects="true" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableFormsAuthentication">
      <MemberSignature Language="C#" Value="public static void EnableFormsAuthentication (System.Collections.Specialized.NameValueCollection configurationData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableFormsAuthentication(class System.Collections.Specialized.NameValueCollection configurationData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.EnableFormsAuthentication(System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableFormsAuthentication (configurationData As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableFormsAuthentication(System::Collections::Specialized::NameValueCollection ^ configurationData);" />
      <MemberSignature Language="F#" Value="static member EnableFormsAuthentication : System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="System.Web.Security.FormsAuthentication.EnableFormsAuthentication configurationData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationData" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="configurationData">A name-value collection that contains values for "defaultUrl" and/or "loginUrl". The parameter can be null if there are no values for the default URL or the login URL.</param>
        <summary>Enables forms authentication.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>属性是`null`，属性设置为默认 URL 值从`configurationData`参数。 如果<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>属性是`null`，，将属性设置为从登录 URL 值`configurationData`参数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The application is not in the pre-start initialization phase.</exception>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public static string Encrypt (System.Web.Security.FormsAuthenticationTicket ticket);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Encrypt(class System.Web.Security.FormsAuthenticationTicket ticket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Encrypt(System.Web.Security.FormsAuthenticationTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Encrypt (ticket As FormsAuthenticationTicket) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Encrypt(System::Web::Security::FormsAuthenticationTicket ^ ticket);" />
      <MemberSignature Language="F#" Value="static member Encrypt : System.Web.Security.FormsAuthenticationTicket -&gt; string" Usage="System.Web.Security.FormsAuthentication.Encrypt ticket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticket" Type="System.Web.Security.FormsAuthenticationTicket" />
      </Parameters>
      <Docs>
        <param name="ticket">The <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> object with which to create the encrypted forms-authentication ticket.</param>
        <summary>Creates a string containing an encrypted forms-authentication ticket suitable for use in an HTTP cookie.</summary>
        <returns>A string containing an encrypted forms-authentication ticket.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将存储的结果<xref:System.Web.Security.FormsAuthentication.Encrypt%2A>方法中使用 cookie<xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A>属性和重定向到的 URL 用户返回从<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[FormsAuthenticationTicketClass#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationTicketClass/CS/formsauthenticationticketclasscs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationTicketClass#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationTicketClass/VB/formsauthenticationticketclassvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ticket" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FormsCookieName">
      <MemberSignature Language="C#" Value="public static string FormsCookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string FormsCookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.FormsCookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FormsCookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ FormsCookieName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormsCookieName : string" Usage="System.Web.Security.FormsAuthentication.FormsCookieName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the cookie used to store the forms-authentication ticket.</summary>
        <value>用于存储窗体身份验证票证的 cookie 名称。 默认值是"。ASPXAUTH"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A>使用 ASP.NET 应用程序配置文件中设置属性值`name`配置元素的属性。 <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A>用于引用将存储的 cookie<xref:System.Web.Security.FormsAuthenticationTicket>信息。  
  
   
  
## Examples  
 下面的代码示例设置<xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A>属性值，通过使用`name`Web.config 文件中的属性。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    name=".ASPXFORMSAUTH" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormsCookiePath">
      <MemberSignature Language="C#" Value="public static string FormsCookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string FormsCookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.FormsCookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FormsCookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ FormsCookiePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormsCookiePath : string" Usage="System.Web.Security.FormsAuthentication.FormsCookiePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the path for the forms-authentication cookie.</summary>
        <value>其中存储表单身份验证票证信息的 cookie 的路径。 默认值是"/"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>在 ASP.NET 应用程序中使用的配置文件中设置属性值`path`配置元素的属性。 <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>指定<xref:System.Web.HttpCookie.Path%2A>的 cookie 存储<xref:System.Web.Security.FormsAuthenticationTicket>信息。  
  
   
  
## Examples  
 下面的代码示例设置<xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>属性值，通过使用`path`Web.config 文件中的属性。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    path="/MyApplication" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAuthCookie">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Creates an authentication cookie for a given user name.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAuthCookie">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpCookie GetAuthCookie(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAuthCookie (userName As String, createPersistentCookie As Boolean) As HttpCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::HttpCookie ^ GetAuthCookie(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member GetAuthCookie : string * bool -&gt; System.Web.HttpCookie" Usage="System.Web.Security.FormsAuthentication.GetAuthCookie (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">The name of the authenticated user.</param>
        <param name="createPersistentCookie">
          <see langword="true" /> to create a durable cookie (one that is saved across browser sessions); otherwise, <see langword="false" />.</param>
        <summary>Creates an authentication cookie for a given user name. This does not set the cookie as part of the outgoing response, so that an application can have more control over how the cookie is issued.</summary>
        <returns>An <see cref="T:System.Web.HttpCookie" /> that contains encrypted forms-authentication ticket information. The default value for the <see cref="P:System.Web.Security.FormsAuthentication.FormsCookiePath" /> property is used.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cookie 的路径由<xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthCookie">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpCookie GetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAuthCookie (userName As String, createPersistentCookie As Boolean, strCookiePath As String) As HttpCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::HttpCookie ^ GetAuthCookie(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member GetAuthCookie : string * bool * string -&gt; System.Web.HttpCookie" Usage="System.Web.Security.FormsAuthentication.GetAuthCookie (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">The name of the authenticated user.</param>
        <param name="createPersistentCookie">
          <see langword="true" /> to create a durable cookie (one that is saved across browser sessions); otherwise, <see langword="false" />.</param>
        <param name="strCookiePath">The <see cref="P:System.Web.HttpCookie.Path" /> of the authentication cookie.</param>
        <summary>Creates an authentication cookie for a given user name. This does not set the cookie as part of the outgoing response.</summary>
        <returns>An <see cref="T:System.Web.HttpCookie" /> that contains encrypted forms-authentication ticket information.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedirectUrl">
      <MemberSignature Language="C#" Value="public static string GetRedirectUrl (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRedirectUrl(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetRedirectUrl(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRedirectUrl (userName As String, createPersistentCookie As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRedirectUrl(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member GetRedirectUrl : string * bool -&gt; string" Usage="System.Web.Security.FormsAuthentication.GetRedirectUrl (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">The name of the authenticated user.</param>
        <param name="createPersistentCookie">This parameter is ignored.</param>
        <summary>Returns the redirect URL for the original request that caused the redirect to the login page.</summary>
        <returns>A string that contains the redirect URL, or null if <paramref name="userName" /> is null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用此方法，当你想要在而不是使用应用程序代码中执行重定向<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法。  
  
 <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法返回在查询字符串中使用指定的 URL`ReturnURL`变量名称。 例如，在 URL 中`http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`、<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法返回的返回 URL `caller.aspx`。 如果`ReturnURL`变量不存在，<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法返回中的 URL<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>属性。  
  
 将浏览器重定向到登录页时，ASP.NET 会自动添加的返回 URL。  
  
 默认情况下，`ReturnUrl`变量必须引用某页在当前应用程序中。 如果`ReturnUrl`指的是在不同的应用程序或不同的服务器上的页面<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法将返回中的 URL<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>属性。 如果你想要允许使用返回的 URL 来指代当前应用程序之外的网页，则必须设置<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>属性`true`使用`enableCrossAppRedirects`配置元素的属性。  

此方法不会创建一个 cookie。
  
> [!IMPORTANT]
>  设置<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>属性`true`以允许跨应用程序重定向是一个潜在的安全威胁。 有关更多信息，请参见 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 属性。  
  
   
  
## Examples  
 下面的代码示例将重定向到的 URL 的经过身份验证的用户返回从<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[FormsAuthenticationTicketClass#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationTicketClass/CS/formsauthenticationticketclasscs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationTicketClass#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationTicketClass/VB/formsauthenticationticketclassvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashPasswordForStoringInConfigFile">
      <MemberSignature Language="C#" Value="public static string HashPasswordForStoringInConfigFile (string password, string passwordFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HashPasswordForStoringInConfigFile(string password, string passwordFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HashPasswordForStoringInConfigFile (password As String, passwordFormat As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HashPasswordForStoringInConfigFile(System::String ^ password, System::String ^ passwordFormat);" />
      <MemberSignature Language="F#" Value="static member HashPasswordForStoringInConfigFile : string * string -&gt; string" Usage="System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile (password, passwordFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is to use the Membership APIs, such as Membership.CreateUser. For more information, see http://go.microsoft.com/fwlink/?LinkId=252463.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="passwordFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="password">The password to hash.</param>
        <param name="passwordFormat">The hash algorithm to use. <c>passwordFormat</c> is a <see langword="String" /> that represents one of the <see cref="T:System.Web.Configuration.FormsAuthPasswordFormat" /> enumeration values.</param>
        <summary>Produces a hash password suitable for storing in a configuration file based on the specified password and hash algorithm.</summary>
        <returns>The hashed password.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A>方法创建一个经过哈希处理的密码值，可在时存储窗体身份验证凭据在应用程序配置文件中。  
  
 使用存储在应用程序配置文件的身份验证凭据<xref:System.Web.Security.FormsAuthentication.Authenticate%2A>方法以验证的应用程序的用户的密码。 或者，可以使用 ASP.NET 成员资格来存储用户凭据。 有关详细信息，请参阅[使用成员资格管理用户](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd)。  
  
   
  
## Examples  
 下面的代码示例采用用户名、 密码和哈希类型，并显示包含用户定义和经过哈希处理的密码的配置节。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[FormsAuthenticationHashPassword#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationHashPassword/CS/formsauthenticationhashpasswordcs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationHashPassword#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationHashPassword/VB/formsauthenticationhashpasswordvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="password" /> is <see langword="null" />  -or-  <paramref name="passwordFormat" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="passwordFormat" /> is not a valid <see cref="T:System.Web.Configuration.FormsAuthPasswordFormat" /> value.</exception>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Initialize();" />
      <MemberSignature Language="F#" Value="static member Initialize : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes the <see cref="T:System.Web.Security.FormsAuthentication" /> object based on the configuration settings for the application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.Initialize%2A>方法调用时<xref:System.Web.Security.FormsAuthenticationModule>创建的实例<xref:System.Web.Security.FormsAuthentication>类。 此方法不应在代码中调用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public static bool IsEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool" Usage="System.Web.Security.FormsAuthentication.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether forms authentication is enabled.</summary>
        <value>
          <see langword="true" /> 如果启用了窗体身份验证;否则为<see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoginUrl">
      <MemberSignature Language="C#" Value="public static string LoginUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string LoginUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.LoginUrl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LoginUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ LoginUrl { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LoginUrl : string" Usage="System.Web.Security.FormsAuthentication.LoginUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the URL for the login page that the <see cref="T:System.Web.Security.FormsAuthentication" /> class will redirect to.</summary>
        <value>该登录名的 URL 页面<see cref="T:System.Web.Security.FormsAuthentication" />类将重定向到。 默认值为"login.aspx。"</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>使用 ASP.NET 应用程序配置文件中设置属性值`loginUrl`配置元素的属性。 <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>由<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法。  
  
   
  
## Examples  
 下面的代码示例设置`loginUrl`Web.config 文件中的属性。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    defaultUrl="index.aspx" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RedirectFromLoginPage">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Redirects an authenticated user back to the originally requested URL or the default URL.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RedirectFromLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectFromLoginPage (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectFromLoginPage(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectFromLoginPage (userName As String, createPersistentCookie As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectFromLoginPage(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member RedirectFromLoginPage : string * bool -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectFromLoginPage (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">The authenticated user name.</param>
        <param name="createPersistentCookie">
          <see langword="true" /> to create a durable cookie (one that is saved across browser sessions); otherwise, <see langword="false" />.</param>
        <summary>Redirects an authenticated user back to the originally requested URL or the default URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法将重定向到在查询字符串中使用指定的 URL`ReturnURL`变量名称。 例如，在 URL 中`http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法的重定向到返回 URL `caller.aspx`。 如果`ReturnURL`变量不存在，<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法将重定向到中的 URL<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>属性。  
  
 将浏览器重定向到登录页时，ASP.NET 会自动添加的返回 URL。  
  
 默认情况下，`ReturnUrl`变量必须引用某页在当前应用程序中。 如果`ReturnUrl`指的是在不同的应用程序或不同的服务器上的页面<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法将重定向到中的 URL<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>属性。 如果你想要允许重定向到当前应用程序之外的网页，则必须设置<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>属性`true`使用`enableCrossAppRedirects`配置元素的属性。  
  
> [!IMPORTANT]
>  设置<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>属性`true`以允许跨应用程序重定向是一个潜在的安全威胁。 有关更多信息，请参见 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 属性。  
  
 如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>属性是`true`，并且`ReturnUrl`变量位于当前应用程序或<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>属性是`true`，则<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法发出身份验证票证，并将其放入默认 cookie 使用<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>方法。  
  
 如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`和重定向路径为当前应用程序中的 URL，该票证颁发重定向 URL 的一部分。 如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`，<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>是`true`，和重定向 URL 不是在当前应用程序中，页指<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法发出身份验证票证，并将其放入<xref:System.Web.HttpRequest.QueryString%2A>属性。  
  
   
  
## Examples  
 下面的代码示例将经过验证的用户重定向到最初请求的 URL 或<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>。 代码示例使用 ASP.NET 成员资格来验证用户。 有关 ASP.NET 成员资格的详细信息，请参阅[使用成员资格管理用户](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd)。  
  
> [!IMPORTANT]
>  此示例包含一个接受用户输入，这是一个潜在的安全威胁的文本框。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The return URL specified in the query string contains a protocol other than HTTP: or HTTPS:.</exception>
      </Docs>
    </Member>
    <Member MemberName="RedirectFromLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectFromLoginPage (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectFromLoginPage(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectFromLoginPage (userName As String, createPersistentCookie As Boolean, strCookiePath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectFromLoginPage(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member RedirectFromLoginPage : string * bool * string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectFromLoginPage (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">The authenticated user name.</param>
        <param name="createPersistentCookie">
          <see langword="true" /> to create a durable cookie (one that is saved across browser sessions); otherwise, <see langword="false" />.</param>
        <param name="strCookiePath">The cookie path for the forms-authentication ticket.</param>
        <summary>Redirects an authenticated user back to the originally requested URL or the default URL using the specified cookie path for the forms-authentication cookie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法将重定向到在查询字符串中使用指定的返回 URL`ReturnURL`变量名称。 例如，在 URL 中`http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法的重定向到返回 URL `caller.aspx`。 如果`ReturnURL`变量不存在，<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法将重定向到中的 URL<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>属性。  
  
 将浏览器重定向到登录页时，ASP.NET 会自动添加的返回 URL。  
  
 默认情况下，`ReturnUrl`变量必须引用某页在当前应用程序中。 如果`ReturnUrl`指的是在不同的应用程序或不同的服务器上的页面<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法将重定向到中的 URL<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>属性。 如果你想要允许重定向到当前应用程序之外的网页，则必须设置<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>属性`true`使用`enableCrossAppRedirects`配置元素的属性。  
  
> [!IMPORTANT]
>  设置<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>属性`true`以允许跨应用程序重定向是一个潜在的安全威胁。 有关更多信息，请参见 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 属性。  
  
 如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>属性是`true`，并且`ReturnUrl`变量位于当前应用程序或<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>属性是`true`，则<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法发出身份验证票证，并将其放入指定的 cookie`strCookiePath`参数使用<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>方法。  
  
 如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`和重定向路径为当前应用程序中的 URL，该票证颁发重定向 URL 的一部分。 如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`，<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>是`true`，和重定向 URL 不是在当前应用程序中，页指<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法发出身份验证票证，并将其放入<xref:System.Web.HttpRequest.QueryString%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The return URL specified in the query string contains a protocol other than HTTP: or HTTPS:.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RedirectToLoginPage">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Redirects the browser to the login URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法重定向到浏览器<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>。  
  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法并不会清除窗体身份验证 cookie。 你可以使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法结合<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法以一个用户注销并允许不同的用户可以登录。  
  
 与不同<xref:System.Web.HttpResponse.Redirect%2A?displayProperty=nameWithType>方法，此方法不通过调用结尾请求<xref:System.Web.HttpResponse.End%2A?displayProperty=nameWithType>。 这意味着遵循该代码<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法调用将运行。  
  
   
  
## Examples  
 下面的代码示例清除窗体身份验证 cookie 使用<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法然后将重定向到登录名用户页上使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RedirectToLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectToLoginPage ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectToLoginPage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectToLoginPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectToLoginPage ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectToLoginPage();" />
      <MemberSignature Language="F#" Value="static member RedirectToLoginPage : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectToLoginPage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Redirects the browser to the login URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法重定向到浏览器<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>。  
  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法并不会清除窗体身份验证 cookie。 你可以使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法结合<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法以一个用户注销并允许不同的用户可以登录。  
  
   
  
## Examples  
 下面的代码示例清除窗体身份验证 cookie 使用<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法然后将重定向到登录名用户页上使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RedirectToLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectToLoginPage (string extraQueryString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectToLoginPage(string extraQueryString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectToLoginPage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectToLoginPage (extraQueryString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectToLoginPage(System::String ^ extraQueryString);" />
      <MemberSignature Language="F#" Value="static member RedirectToLoginPage : string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectToLoginPage extraQueryString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extraQueryString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extraQueryString">The query string to include with the redirect URL.</param>
        <summary>Redirects the browser to the login URL with the specified query string.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法重定向到浏览器<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>并包括`extraQueryString`值作为<xref:System.Management.ManagementQuery.QueryString%2A>重定向 url。  
  
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法并不会清除窗体身份验证 cookie。 你可以使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法结合<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法以一个用户注销并允许不同的用户可以登录。  
  
   
  
## Examples  
 下面的代码示例清除窗体身份验证 cookie 使用<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法然后将重定向到登录名用户页上使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signout2cs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signout2vb.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenewTicketIfOld">
      <MemberSignature Language="C#" Value="public static System.Web.Security.FormsAuthenticationTicket RenewTicketIfOld (System.Web.Security.FormsAuthenticationTicket tOld);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.FormsAuthenticationTicket RenewTicketIfOld(class System.Web.Security.FormsAuthenticationTicket tOld) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RenewTicketIfOld (tOld As FormsAuthenticationTicket) As FormsAuthenticationTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::FormsAuthenticationTicket ^ RenewTicketIfOld(System::Web::Security::FormsAuthenticationTicket ^ tOld);" />
      <MemberSignature Language="F#" Value="static member RenewTicketIfOld : System.Web.Security.FormsAuthenticationTicket -&gt; System.Web.Security.FormsAuthenticationTicket" Usage="System.Web.Security.FormsAuthentication.RenewTicketIfOld tOld" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.FormsAuthenticationTicket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tOld" Type="System.Web.Security.FormsAuthenticationTicket" />
      </Parameters>
      <Docs>
        <param name="tOld">The forms-authentication ticket to update.</param>
        <summary>Conditionally updates the issue date and time and expiration date and time for a <see cref="T:System.Web.Security.FormsAuthenticationTicket" />.</summary>
        <returns>The updated <see cref="T:System.Web.Security.FormsAuthenticationTicket" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RenewTicketIfOld%2A>方法将更新的到期日期和时间所提供的<xref:System.Web.Security.FormsAuthenticationTicket>如果当前日期和时间减去<xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A>值是否大于<xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A>值减去的当前日期和时间。  
  
 使用更新的票证<xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A>属性设置为当前日期和时间与<xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A>属性设置为当前日期和时间加上原始<xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A>值减去原始<xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A>值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequireSSL">
      <MemberSignature Language="C#" Value="public static bool RequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool RequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.RequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool RequireSSL { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RequireSSL : bool" Usage="System.Web.Security.FormsAuthentication.RequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the forms-authentication cookie requires SSL in order to be returned to the server.</summary>
        <value>
          <see langword="true" /> 如果需要返回到服务器; 在窗体身份验证 cookie SSL否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.RequireSSL%2A>使用 ASP.NET 应用程序配置文件中设置属性值`requireSSL`配置元素的属性。 你可以在 Web.config 文件中为指定 ASP.NET 应用程序是否需要 SSL （安全套接字层） 来返回到服务器的窗体身份验证 cookie，通过设置`requireSSL`属性。 有关详细信息，请参阅<xref:System.Web.HttpCookie.Secure%2A>。  
  
 如果你配置建议，`requireSSL`作为`false`，还配置`slidingExpiration`作为`false`，从而缩短票证的有效时间量。  
  
   
  
## Examples  
 下面的代码示例设置`requireSSL`Web.config 文件中的属性。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    requireSSL="true"  
    path="/MyApplication" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetAuthCookie">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Creates an authentication ticket for the supplied user name and adds it to the cookies collection of the response, or to the URL if you are using cookieless authentication.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>方法： 将窗体身份验证票证添加 cookie 集合或 URL，如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`。 窗体身份验证票证提供到下一步所做的浏览器的请求的窗体身份验证信息。 使用窗体身份验证，你可以使用<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>方法时您想要对用户进行身份验证，但仍保留使用重定向对导航的控制。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetAuthCookie">
      <MemberSignature Language="C#" Value="public static void SetAuthCookie (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAuthCookie(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetAuthCookie (userName As String, createPersistentCookie As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAuthCookie(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member SetAuthCookie : string * bool -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SetAuthCookie (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">The name of an authenticated user. This does not have to map to a Windows account.</param>
        <param name="createPersistentCookie">
          <see langword="true" /> to create a persistent cookie (one that is saved across browser sessions); otherwise, <see langword="false" />.</param>
        <summary>Creates an authentication ticket for the supplied user name and adds it to the cookies collection of the response, or to the URL if you are using cookieless authentication.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>方法将添加窗体身份验证票证的 cookie 集合到或 URL 如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`。 窗体身份验证票证提供到下一步所做的浏览器的请求的窗体身份验证信息。 使用窗体身份验证，你可以使用<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>方法时您想要对用户进行身份验证，但仍保留使用重定向对导航的控制。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <see cref="P:System.Web.Security.FormsAuthentication.RequireSSL" /> is <see langword="true" /> and <see cref="P:System.Web.HttpRequest.IsSecureConnection" /> is <see langword="false" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuthCookie">
      <MemberSignature Language="C#" Value="public static void SetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetAuthCookie (userName As String, createPersistentCookie As Boolean, strCookiePath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAuthCookie(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member SetAuthCookie : string * bool * string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SetAuthCookie (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">The name of an authenticated user.</param>
        <param name="createPersistentCookie">
          <see langword="true" /> to create a durable cookie (one that is saved across browser sessions); otherwise, <see langword="false" />.</param>
        <param name="strCookiePath">The cookie path for the forms-authentication ticket.</param>
        <summary>Creates an authentication ticket for the supplied user name and adds it to the cookies collection of the response, using the supplied cookie path, or using the URL if you are using cookieless authentication.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>方法： 将窗体身份验证票证添加 cookie 集合或 URL，如果<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`。 窗体身份验证票证提供到下一步所做的浏览器的请求的窗体身份验证信息。 使用窗体身份验证，你可以使用<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>方法时您想要对用户进行身份验证，但仍保留使用重定向对导航的控制。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <see cref="P:System.Web.Security.FormsAuthentication.RequireSSL" /> is <see langword="true" /> and <see cref="P:System.Web.HttpRequest.IsSecureConnection" /> is <see langword="false" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SignOut">
      <MemberSignature Language="C#" Value="public static void SignOut ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SignOut() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SignOut" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SignOut ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SignOut();" />
      <MemberSignature Language="F#" Value="static member SignOut : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SignOut " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes the forms-authentication ticket from the browser.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法的窗体身份验证票证信息如果从中删除 cookie 或 URL<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>是`false`。 你可以使用<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法结合<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法以一个用户注销并允许不同的用户可以登录。  
  
 如果无 cookie 模式，以独占方式运行，或如果支持经过身份验证和匿名用户，你应显式控制重定向到登录页，如果需要特殊的业务逻辑，若要移除的匿名标识符后执行。  
  
 当<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法被调用时，重定向到应用程序的登录页所做的调用<xref:System.Web.HttpResponse.Redirect%2A>方法替换`endResponse`参数设置为`false`。 重定向不进行直到当前页已完成执行，以便可以运行附加代码。 如果代码不包含的显式重定向到另一页，则会将用户重定向到应用程序的配置文件中配置的登录页。  
  
 调用<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法仅删除窗体身份验证 cookie。 Web 服务器不存储有效和过期的身份验证票证以便更高版本的比较。 这使得您的网站很容易遭受重播攻击，如果恶意用户获得有效的窗体身份验证 cookie。 为了提高安全性，使用窗体身份验证 cookie 时，应执行以下操作：  
  
-   用于窗体的身份验证 cookie 设置绝对过期<xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A>属性`false`。 这就限制了可以在其中重播被劫持的 cookie 窗口。  
  
-   仅发布和接受身份验证 cookie，请通过安全套接字层 (SSL)，通过设置<xref:System.Web.Security.FormsAuthentication.RequireSSL%2A>属性`true`以及通过运行整个网站在 SSL 下。 设置<xref:System.Web.Security.FormsAuthentication.RequireSSL%2A>属性`true`可确保，ASP.NET 会永远不会将身份验证 cookie 发送到浏览器通过非 SSL 连接; 但是，客户端可能不接受该 cookie 的安全设置。 这意味着客户端可能发送的窗体身份验证 cookie 通过非 SSL 连接，从而使易受到劫持。 你可以防止客户端通过运行在 SSL 下整个网站以明文发送的窗体身份验证 cookie。  
  
-   在服务器上使用持久存储记录当用户注销该网站，以及如何将应用程序事件如<xref:System.Web.HttpApplication.PostAuthenticateRequest>事件，以确定是否当前的用户进行身份验证通过 forms 身份验证。 如果用户进行身份验证通过 forms 身份验证，并且如果持久存储中的信息指示用户已注销，立即清除身份验证 cookie，并将浏览器重定向回登录页。 成功登录后，更新存储以反映用户已登录。 当你使用此方法时，你的应用程序必须跟踪的用户的登录状态，并必须强制空闲用户注销。  
  
   
  
## Examples  
 下面的代码示例清除窗体身份验证 cookie 使用<xref:System.Web.Security.FormsAuthentication.SignOut%2A>方法然后将重定向到登录名用户页上使用<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法。  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool SlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.SlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SlidingExpiration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SlidingExpiration : bool" Usage="System.Web.Security.FormsAuthentication.SlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether sliding expiration is enabled.</summary>
        <value>
          <see langword="true" /> 如果启用相对过期机制，则否则为<see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A>使用设置属性值`slidingExpiration`配置元素的属性。  
  
 相对过期机制重置为有效的身份验证 cookie 的到期时间，如果发出请求，并且有超过一半的超时间隔已过。 如果 cookie 已过期，用户必须重新进行身份验证。 设置<xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A>属性`false`可应用的安全性通过限制提高的身份验证 cookie 的有效，时间基于配置`timeout`值。  
  
 我们建议，如果你配置`requireSSL`作为`false`，还配置`slidingExpiration`作为`false`，从而缩短票证的有效时间量。  
  
   
  
## Examples  
 下面的代码示例设置`slidingExpiration`属性设为`false`ASP.NET 应用程序的 Web.config 文件中。  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    name=".ASPXFORMSAUTH"  
    cookieless="UseCookies"  
    requireSSL="true"   
    slidingExpiration="false" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TicketCompatibilityMode">
      <MemberSignature Language="C#" Value="public static System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.TicketCompatibilityMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TicketCompatibilityMode As TicketCompatibilityMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Configuration::TicketCompatibilityMode TicketCompatibilityMode { System::Web::Configuration::TicketCompatibilityMode get(); };" />
      <MemberSignature Language="F#" Value="member this.TicketCompatibilityMode : System.Web.Configuration.TicketCompatibilityMode" Usage="System.Web.Security.FormsAuthentication.TicketCompatibilityMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.TicketCompatibilityMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether to use Coordinated Universal Time (UTC) or local time for the ticket expiration date.</summary>
        <value>一个值，该值指示是否使用协调世界时 (UTC) 还是本地时间，对于票证到期日期。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public static TimeSpan Timeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan Timeout { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan" Usage="System.Web.Security.FormsAuthentication.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the amount of time before an authentication ticket expires.</summary>
        <value>过期之前的身份验证票证的时间量。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>