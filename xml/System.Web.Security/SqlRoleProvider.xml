<Type Name="SqlRoleProvider" FullName="System.Web.Security.SqlRoleProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ce9491ab9d65f35960b0c21f3b06af305bf5600b" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52252879" /></Metadata><TypeSignature Language="C#" Value="public class SqlRoleProvider : System.Web.Security.RoleProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlRoleProvider extends System.Web.Security.RoleProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.SqlRoleProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlRoleProvider&#xA;Inherits RoleProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlRoleProvider : System::Web::Security::RoleProvider" />
  <TypeSignature Language="F#" Value="type SqlRoleProvider = class&#xA;    inherit RoleProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Security.RoleProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>对 ASP.NET 应用程序的角色成员资格信息在 SQL Server 数据库中的存储进行管理。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此类<xref:System.Web.Security.Roles>和<xref:System.Web.Security.RolePrincipal>类提供 ASP.NET 应用程序使用 SQL Server 数据库的角色管理服务。 角色管理可用于在应用程序指定不同的授权级别。  
  
 若要使用<xref:System.Web.Security.SqlRoleProvider>类，必须先创建使用的 SQL Server 数据库<xref:System.Web.Security.SqlRoleProvider>。 若要创建使用的数据库<xref:System.Web.Security.SqlRoleProvider>类中，运行`aspnet_regsql.exe`C:\WINDOWS\Microsoft.NET\Framework\ 中找到可执行文件`versionNumber`文件夹，并指定`-Ar`选项 (例如， `aspnet_regsql.exe -Ar`)。 创建的数据库称为 Aspnetdb。 或者，运行 aspnet_regsql.exe 以提升 GUI 配置模式下，选择要配置所有 ASP.NET 功能。  
  
 如果使用集成的安全性的连接字符串配置角色提供程序，ASP.NET 应用程序的进程帐户必须有权连接到 SQL Server 数据库。  
  
 使用配置 Machine.config 文件<xref:System.Web.Security.SqlRoleProvider>名为 AspNetSqlProvider 连接到本地计算机上的 SQL Server 的实例。 可以使用该提供程序，此实例，也可以指定自己的 Web.config 文件中的 ASP.NET 应用程序。 若要使用 AspNetSqlProvider 实例，指定为 AspNetSqlProvider`defaultProvider`在配置中。  
  
 你可以配置<xref:System.Web.Security.SqlRoleProvider>若要使用相同的数据库和用户信息<xref:System.Web.Security.SqlMembershipProvider>为了使用单一数据库进行身份验证和授权信息。 若要使用成员资格和角色信息的同一个数据库，运行 aspnet_regsql.exe 可执行文件并安装成员资格功能。 然后，在两个配置中指定相同的连接字符串您<xref:System.Web.Security.SqlRoleProvider>和<xref:System.Web.Security.SqlMembershipProvider>实例。 还要确保这两个提供程序实例都具有相同配置<xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>。  
  
   
  
## Examples  
 下面的示例演示配置为使用 ASP.NET 应用程序的 Web.config 文件<xref:System.Web.Security.SqlRoleProvider>对象和<xref:System.Web.Security.SqlMembershipProvider>。 该元素配置为仅允许经过身份验证的用户访问权限的管理员角色中。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="logincs.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
    <authorization>  
      <deny users="?" />  
         <allow roles="Administrators" />  
         <deny users="*" />  
    </authorization>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="15">  
      <providers>  
        <add   
          name="SqlProvider"   
          type="System.Web.Security.SqlMembershipProvider"   
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="false"  
          requiresQuestionAndAnswer="false"   
          passwordFormat="Hashed"   
          applicationName="SampleApplication" />  
      </providers>  
    </membership>  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="true"  
      cookieSlidingExpiration="true"  
      cookieProtection="All" >  
      <providers>  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"   
          applicationName="SampleApplication" />  
      </providers>  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlRoleProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlRoleProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Web.Security.SqlRoleProvider" /> 类的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlRoleProvider.%23ctor%2A>构造函数由 ASP.NET 创建的实例调用<xref:System.Web.Security.SqlRoleProvider>为应用程序的配置中指定的类。 此构造函数不是要在代码中使用。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public override void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.AddUsersToRoles : string[] * string[] -&gt; unit" Usage="sqlRoleProvider.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">要添加到指定的角色的用户名的字符串数组。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定用户名添加到的角色的名称。</param>
        <summary>将指定用户名添加到每个指定的角色。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>方法由调用<xref:System.Web.Security.Roles>类，以将一个或多个用户与在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的 SQL Server 数据库中的一个或多个角色关联。 调用此方法<xref:System.Web.Security.Roles.AddUserToRole%2A>， <xref:System.Web.Security.Roles.AddUserToRoles%2A>， <xref:System.Web.Security.Roles.AddUsersToRole%2A>，和<xref:System.Web.Security.Roles.AddUsersToRoles%2A>方法的<xref:System.Web.Security.Roles>类。  
  
 在调用期间执行数据库更新<xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>方法将在事务内完成。 如果遇到错误，如已在指定的角色的用户名，回滚事务并不执行任何更新。  
  
 如果<xref:System.Web.Security.SqlRoleProvider>用于<xref:System.Web.Security.SqlMembershipProvider>，并在数据库中不存在指定的用户名之一，用户名将自动添加到数据库。  
  
 用户名称和角色名称不能包含逗号。  
  
   
  
## Examples  
 下面的代码示例将一个或多个用户添加到角色，或从角色中删除用户。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.SqlRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" /> 中的一个角色为 <see langword="null" />。  
  
或 
<paramref name="usernames" /> 中的一个用户为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" /> 中的一个角色是空字符串或包含逗号。  
  
或 
<paramref name="usernames" /> 中的一个用户是空字符串或包含逗号。  
  
或 
<paramref name="roleNames" /> 中的一个角色的长度超过 256 个字符。  
  
或 
<paramref name="usernames" /> 中的一个用户的长度超过 256 个字符。  
  
或 
 <paramref name="roleNames" /> 包含重复的元素。  
  
或 
 <paramref name="usernames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未找到指定的一个或多个角色名。  
  
或 
未找到指定的一个或多个用户名。  
  
或 
一个或多个指定的用户名已与一个或多个指定的角色名相关联。  
  
或 
与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public override string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.SqlRoleProvider.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.SqlRoleProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要存储和检索其角色信息的应用程序的名称。</summary>
        <value>要存储和检索其角色信息的应用程序的名称。 默认值为当前 <see cref="P:System.Web.HttpRequest.ApplicationPath" /> 的 <see cref="P:System.Web.HttpContext.Request" /> 属性值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>由<xref:System.Web.Security.SqlRoleProvider>若要将用户和角色与不同的应用程序相关联。 这使多个应用程序可以使用相同的数据库存储用户和角色信息，而不重复的用户名或角色名称之间发生冲突。 多个 ASP.NET 应用程序可以通过指定相同的值中使用相同的数据库<xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>属性。 <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>可以以编程方式设置属性或者可以在 Web 应用程序使用的配置文件中以声明方式设置`applicationName`属性。  
  
 如果没有为指定值`applicationName`Web 应用程序，在配置文件中的属性，然后<xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType>属性值为当前<xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType>使用对象。  
  
> [!CAUTION]
>  因为所有服务的请求使用单个默认角色提供程序实例<xref:System.Web.HttpApplication>对象，可以有多个请求同时执行，并尝试设置<xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>属性值。 <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>属性不是线程安全的多个写入操作，且不断变化<xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>属性值可能会导致多个用户的应用程序的意外行为。 建议您避免编写代码，使用户能够设置<xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>属性除非必要，否则。 应用程序的示例情况<xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>属性可能需要是管理应用程序，用于管理角色的多个应用程序的数据。 此类应用程序应在单用户应用程序并不是 Web 应用程序。  
  
   
  
## Examples  
 下面的示例演示中的元素`system.web`的 ASP.NET 应用程序的 Web.config 文件部分。 指定应用程序的<xref:System.Web.Security.SqlRoleProvider>实例并设置<xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>属性设置为`MyApplication`。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">不具有 <see cref="P:System.Web.Security.SqlRoleProvider.ApplicationName" /> ASP.NET 承载权限的调用方尝试设置 <see cref="F:System.Web.AspNetHostingPermissionLevel.High" /> 属性。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">尝试将 <see cref="P:System.Web.Security.SqlRoleProvider.ApplicationName" /> 设置为长于 256 个字符的字符串。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public override void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.CreateRole : string -&gt; unit" Usage="sqlRoleProvider.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要创建的角色的名称。</param>
        <summary>将新的角色添加到角色数据库。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlRoleProvider.CreateRole%2A>方法由调用<xref:System.Web.Security.Roles>类在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的 SQL Server 数据库中创建角色。  
  
 角色名称的最大长度为 256 个字符。 角色名称不区分大小写。 角色名称中不允许逗号。  
  
   
  
## Examples  
 下面的代码示例数据库中创建一个新的角色。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.SqlRoleProvider>。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，用于接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号。  
  
或 
 <paramref name="roleName" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> 已在数据库中存在。  
  
或 
与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public override bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="override this.DeleteRole : string * bool -&gt; bool" Usage="sqlRoleProvider.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">要删除的角色的名称。</param>
        <param name="throwOnPopulatedRole">如果为 <see langword="true" />，则当 <paramref name="roleName" /> 包含一个或多个成员时将引发异常。</param>
        <summary>从角色数据库移除一个角色。</summary>
        <returns>若已成功删除此角色，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlRoleProvider.DeleteRole%2A>方法由调用<xref:System.Web.Security.Roles>类从 ASP.NET 应用程序的配置文件 (Web.config) 中指定的 SQL Server 数据库中删除一个角色。 删除角色时，还从数据库中删除与该角色关联的用户的列表。 不受影响数据库中的用户信息。  
  
 如果`throwOnPopulatedRole`是`true`，然后将引发异常并通过标识的角色不会删除此角色`roleName`参数具有一个或多个成员。 如果`throwOnPopulatedRole`是`false`，则将删除该角色，或不为空。  
  
   
  
## Examples  
 下面的示例从数据库中删除一个角色。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.SqlRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号。  
  
或 
 <paramref name="roleName" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> 具有一个或多个成员且 <paramref name="throwOnPopulatedRole" /> 为 <see langword="true" />。  
  
或 
与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="override this.FindUsersInRole : string * string -&gt; string[]" Usage="sqlRoleProvider.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">作为搜索范围的角色。</param>
        <param name="usernameToMatch">要搜索的用户名。</param>
        <summary>获取属于某个角色且与指定的用户名相匹配的用户名的数组。</summary>
        <returns>一个字符串数组，包含用户名与 <paramref name="usernameToMatch" /> 匹配且用户是指定角色的成员的所有用户的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlRoleProvider.FindUsersInRole%2A>调用方法<xref:System.Web.Security.Roles>类，并返回其中用户名包含所提供的匹配项的角色中的用户列表`usernameToMatch`已配置的`applicationName`。 <xref:System.Web.Security.SqlRoleProvider>用户名相匹配的搜索`usernameToMatch`使用 LIKE 关键字和支持 SQL Server 通配符字符的参数值。 例如，如果`usernameToMatch`参数设置为"user1"，则返回的用户的用户名为"user1"的成员身份信息，如果它存在。 如果`usernameToMatch`参数设置为"user %"，则返回"user1"、"user2"、"user_admin"等的用户的用户名的成员资格信息。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.FindUsersInRole%2A>方法来显示角色成员身份基于用户输入。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.Roles>。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，用于接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。  
  
或 
 <paramref name="usernameToMatch" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号。  
  
或 
 <paramref name="usernameToMatch" /> 是一个空字符串。  
  
或 
 <paramref name="roleName" /> 的长度超过 256 个字符。  
  
或 
 <paramref name="usernameToMatch" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">在数据库中找不到 <paramref name="roleName" />。  
  
或 
与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public override string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="override this.GetAllRoles : unit -&gt; string[]" Usage="sqlRoleProvider.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取应用程序的所有角色的列表。</summary>
        <returns>一个字符串数组，包含在特定应用程序的数据库中存储的所有角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlRoleProvider.GetAllRoles%2A>方法由调用<xref:System.Web.Security.Roles>类检索指定 ASP.NET 应用程序的配置文件 (Web.config) 中的 SQL Server 数据库中的所有角色的列表。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.GetAllRoles%2A>方法获取的应用程序角色的列表，并将绑定到结果<xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType>控件。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.SqlRoleProvider>。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，用于接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public override string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="override this.GetRolesForUser : string -&gt; string[]" Usage="sqlRoleProvider.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要为其返回角色列表的用户。</param>
        <summary>获取一个用户所属角色的列表。</summary>
        <returns>一个字符串数组，其中包含指定用户所属的所有角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlRoleProvider.GetRolesForUser%2A>方法由调用<xref:System.Web.Security.Roles>类从 ASP.NET 应用程序的配置文件 (Web.config) 中指定的 SQL Server 数据库中检索指定的用户的角色的列表。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.GetRolesForUser%2A>方法来检索指定用户角色的列表，并将绑定到<xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType>控件。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.SqlRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="username" /> 包含一个逗号。  
  
或 
 <paramref name="username" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.GetUsersInRole : string -&gt; string[]" Usage="sqlRoleProvider.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要获取其用户列表的角色的名称。</param>
        <summary>获取属于指定角色的用户的列表。</summary>
        <returns>一个字符串数组，其中包含指定角色拥有的所有成员的用户名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlRoleProvider.GetUsersInRole%2A>方法由调用<xref:System.Web.Security.Roles>类来检索与在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的 SQL Server 数据库中指定的角色关联的用户的列表。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.GetUsersInRole%2A>方法以获取特定角色的用户的列表并将绑定到结果<xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType>控件。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.SqlRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号。  
  
或 
 <paramref name="roleName" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">在数据库中找不到 <paramref name="rolename" />。  
  
或 
与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize (name As String, config As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ config);" />
      <MemberSignature Language="F#" Value="override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="sqlRoleProvider.Initialize (name, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">要初始化的 <see cref="T:System.Web.Security.SqlRoleProvider" /> 实例的名称。</param>
        <param name="config">一个 <see cref="T:System.Collections.Specialized.NameValueCollection" />，包含角色提供程序的配置选项的名称和值。</param>
        <summary>利用在 ASP.NET 应用程序的配置文件中指定的属性值初始化 SQL Server 角色提供程序。 此方法不能直接在代码中使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法初始化<xref:System.Web.Security.SqlRoleProvider>与属性值指定 ASP.NET 应用程序配置文件 (Web.config) 中和不应在代码中直接使用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">ASP.NET 应用程序未在 <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> 信任级别或更高级别下运行。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="config" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><see langword="connectionStringName" /> 特性为空，或者在此 <see cref="T:System.Web.Security.SqlRoleProvider" /> 实例的应用程序配置文件中不存在。  
  
或 
<see langword="applicationName" /> 特性长度超过了 256 个字符。  
  
或 
该 <see cref="T:System.Web.Security.SqlRoleProvider" /> 实例的应用程序配置文件包含无法识别的特性。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public override bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.IsUserInRole : string * string -&gt; bool" Usage="sqlRoleProvider.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要搜索的用户名。</param>
        <param name="roleName">作为搜索范围的角色。</param>
        <summary>获取一个指示指定用户是否属于指定角色的值。</summary>
        <returns>如果指定的用户名属于指定角色，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlRoleProvider.IsUserInRole%2A>调用方法<xref:System.Web.Security.Roles>类和<xref:System.Security.Principal.IPrincipal.IsInRole%2A>方法的<xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType>属性来确定用户是否为 ASP.NET 应用程序的配置文件中指定的 SQL Server 数据库中的角色相关联(Web.config)。  
  
   
  
## Examples  
 下面的代码示例以编程方式检查以查看登录的用户是否属于管理员角色允许用户查看用户角色之前。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.SqlRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。  
  
或 
 <paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号。  
  
或 
 <paramref name="username" /> 包含一个逗号。  
  
或 
 <paramref name="roleName" /> 的长度超过 256 个字符。  
  
或 
 <paramref name="username" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public override void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="sqlRoleProvider.RemoveUsersFromRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">一个字符串数组，其中包含要从指定的角色移除的用户名。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定的用户名从中移除的角色的名称。</param>
        <summary>移除指定角色中的指定用户名。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>方法由调用<xref:System.Web.Security.Roles>类，以从 ASP.NET 应用程序的配置文件 (Web.config) 中指定的 SQL Server 数据库中的一个或多个角色中删除一个或多个用户。 调用此方法<xref:System.Web.Security.Roles.RemoveUserFromRole%2A>， <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>， <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A>，和<xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A>方法的<xref:System.Web.Security.Roles>类。  
  
 在调用期间执行数据库更新<xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>在事务内完成。 如果遇到错误，例如用户名称不存在或已在指定的角色的用户名称，回滚事务并不执行任何更新。  
  
 用户名称和角色名称不能包含逗号。  
  
   
  
## Examples  
 下面的代码示例将一个或多个用户添加到角色，或从角色中删除用户。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.SqlRoleProvider>。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" /> 中的一个角色为 <see langword="null" />。  
  
或 
<paramref name="usernames" /> 中的一个用户为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" /> 中的一个角色是空字符串或包含逗号。  
  
或 
<paramref name="usernames" /> 中的一个用户是空字符串或包含逗号。  
  
或 
<paramref name="roleNames" /> 中的一个角色的长度超过 256 个字符。  
  
或 
<paramref name="usernames" /> 中的一个用户的长度超过 256 个字符。  
  
或 
 <paramref name="roleNames" /> 包含重复的元素。  
  
或 
 <paramref name="usernames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未找到指定的一个或多个用户名。  
  
或 
未找到指定的一个或多个角色名。  
  
或 
一个或多个指定的用户名未与一个或多个指定的角色名相关联。  
  
或 
与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public override bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.RoleExists : string -&gt; bool" Usage="sqlRoleProvider.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要在数据库中搜索的角色的名称。</param>
        <summary>获取一个值，该值指示指定的角色名称是否已存在于角色数据库中。</summary>
        <returns>如果角色名称已存在于数据库中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlRoleProvider.RoleExists%2A>方法由调用<xref:System.Web.Security.Roles>类来确定在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的 SQL Server 数据库中是否存在的角色名称。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Web.Security.Roles.RoleExists%2A>方法来确定角色名称是否已存在之前创建该角色。 启用角色管理的 Web.config 文件的示例，请参阅<xref:System.Web.Security.SqlRoleProvider>。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，用于接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号。  
  
或 
 <paramref name="roleName" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
  </Members>
</Type>