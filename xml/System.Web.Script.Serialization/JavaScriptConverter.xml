<Type Name="JavaScriptConverter" FullName="System.Web.Script.Serialization.JavaScriptConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="485319f71e70d94fa0f7b64c6b311c3c41bbec72" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52604969" /></Metadata><TypeSignature Language="C#" Value="public abstract class JavaScriptConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JavaScriptConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Serialization.JavaScriptConverter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class JavaScriptConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class JavaScriptConverter abstract" />
  <TypeSignature Language="F#" Value="type JavaScriptConverter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为自定义类型转换器提供抽象基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Serialization.JavaScriptConverter>类，可实现序列化和反序列化进程不本机支持的托管类型<xref:System.Web.Script.Serialization.JavaScriptSerializer>类。 此外可以使用<xref:System.Web.Script.Serialization.JavaScriptConverter>时需要更好地控制的序列化和反序列化过程。  
  
 <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A>属性指示为其自定义转换器提供转换器服务的类型。  
  
 若要指示必须通过使用自定义转换器<xref:System.Web.Script.Serialization.JavaScriptSerializer>实例，必须与实例中注册该转换器。 如果使用的<xref:System.Web.Script.Serialization.JavaScriptSerializer>直接类中，应使用<xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A>方法来注册该转换器。 否则，如果您要调用 Web 方法从 ECMAScript (JavaScript)，并且你想要使用自定义转换器，则可以通过注册添加`converters`配置文件中的元素。 有关详细信息，请参阅[如何： 配置 Microsoft Ajax 中的 ASP.NET 服务](https://msdn.microsoft.com/library/ea4fb56e-bc1d-405a-9877-00cf5e552a30)。  
  
 当<xref:System.Web.Script.Serialization.JavaScriptSerializer>实例序列化具有注册，自定义转换器的类型的序列化程序调用<xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A>方法。 同样，当<xref:System.Web.Script.Serialization.JavaScriptSerializer>实例反序列化 JavaScript 对象表示法 (JSON) 字符串，并识别 JSON 字符串中的类型具有与其关联的序列化程序调用的自定义转换器<xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A>方法。  
  
   
  
## Examples  
 下面的示例演示如何创建一个自定义转换器，用于<xref:System.Web.UI.WebControls.ListItemCollection>类。  
  
 [!code-csharp[System.Web.Script.Serialization#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#2)]
 [!code-vb[System.Web.Script.Serialization#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />，必须重写以下成员： 
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /><see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> 提供了<see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" />方法的实施者，将使用<see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />。 转换器代码必须能够获取序列化程序将传递给它，字典中包含的值，然后将该值转换为类型的对象<paramref name="T" />。 而不是重新实现自定义转换代码来实现此目的，可以调用<see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" />方法。</para></block>
    <altmember cref="T:System.Web.Configuration.Converter" />
    <related type="Article" href="https://msdn.microsoft.com/library/8290e543-7eff-47a4-aace-681f3c07229b">ASP.NET AJAX 中的 web 服务</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JavaScriptConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; JavaScriptConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public abstract object Deserialize (System.Collections.Generic.IDictionary&lt;string,object&gt; dictionary, Type type, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; dictionary, class System.Type type, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Deserialize(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ dictionary, Type ^ type, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.Collections.Generic.IDictionary&lt;string, obj&gt; * Type * System.Web.Script.Serialization.JavaScriptSerializer -&gt; obj" Usage="javaScriptConverter.Deserialize (dictionary, type, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="dictionary">作为名称/值对存储的属性数据的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 实例。</param>
        <param name="type">所生成对象的类型。</param>
        <param name="serializer"><see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> 实例。</param>
        <summary>当在派生类中重写时，将所提供的字典转换为指定类型的对象。</summary>
        <returns>反序列化的对象。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />方法循环访问中的值<paramref name="dictionary" />参数来构造中请求的类型的实例<paramref name="type" />参数。 尽管一个转换器可以直接使用来自值<paramref name="dictionary" />，我们建议使用转换器实施者<see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" />方法相反。 转换器应调用此方法的<see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" />实例可从<paramref name="serializer" />参数。  
  
<see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" />方法，转换器将从属性值传递<paramref name="dictionary" />，然后返回所需类型的值。 在某些情况下，自定义类型的转换器可能正在处理自身注册有转换器的属性 （例如，键入一个具有类型 B 的属性和类型 B 也是与自定义转换器相关联）。 在这种情况下，调用<see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" />可确保自定义转换器会以递归方式调用的字典中包含的属性数据。 当转换器循环访问字典中的所有项时，它返回目标类型的构造的实例。  
  
如果转换器反序列化期间遇到问题，则它应引发<see cref="T:System.InvalidOperationException" />描述问题的错误。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IDictionary&lt;string,object&gt; Serialize (object obj, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Serialize(object obj, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Serialize (obj As Object, serializer As JavaScriptSerializer) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Serialize(System::Object ^ obj, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : obj * System.Web.Script.Serialization.JavaScriptSerializer -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="javaScriptConverter.Serialize (obj, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="obj">要序列化的对象。</param>
        <param name="serializer">负责序列化的对象。</param>
        <summary>当在派生类中重写时，生成名称/值对的字典。</summary>
        <returns>一个对象，包含表示该对象数据的键/值对。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当为其注册自定义转换器，将类型序列化为<xref:System.Web.Script.Serialization.JavaScriptSerializer>实例调用<xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A>方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>返回值<see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />必须是<see cref="T:System.Collections.Generic.IDictionary`2" />具有零个或多个名称/值对表示要转换为 JSON 对象的数据的实例。 该转换器本身不数据序列化为 JSON。 相反，转换器会生成包含属性名称 （字符串字典的键） 和相应的属性的名称/值对的字典值 （对象在字典中的值）。 <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" />实例随后将这些数据转换为 JSON。  
  
如果转换器遇到异常，则它应引发<see cref="T:System.InvalidOperationException" />描述问题的错误。</para></block>
      </Docs>
    </Member>
    <Member MemberName="SupportedTypes">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;Type&gt; SupportedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; SupportedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SupportedTypes As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ SupportedTypes { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportedTypes : seq&lt;Type&gt;" Usage="System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当在派生类中重写时，获取受支持类型的集合。</summary>
        <value>一个实现 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的对象，用于表示转换器支持的类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A>属性列出了支持的转换器的类型。 在运行时，<xref:System.Web.Script.Serialization.JavaScriptSerializer>实例使用此属性来确定托管类型映射到其相应的自定义转换器。  
  
   
  
## Examples  
 下面的示例演示如何重写<xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A>派生类中的属性。 在此示例中，此转换器仅支持<xref:System.Web.UI.WebControls.ListItemCollection>类型。 此代码示例是为提供一个更大示例的一部分<xref:System.Web.Script.Serialization.JavaScriptConverter>类。  
  
 [!code-csharp[System.Web.Script.Serialization#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#3)]
 [!code-vb[System.Web.Script.Serialization#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /> 必须始终返回一个集合，并且集合必须包含至少一个条目。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>