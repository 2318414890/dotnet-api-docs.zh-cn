<Type Name="RC2CryptoServiceProvider" FullName="System.Security.Cryptography.RC2CryptoServiceProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="77766071034d46f7bafd9486fd7fe162a6aa1b98" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30499051" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RC2CryptoServiceProvider : System.Security.Cryptography.RC2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RC2CryptoServiceProvider extends System.Security.Cryptography.RC2" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.RC2CryptoServiceProvider" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RC2CryptoServiceProvider&#xA;Inherits RC2" />
  <TypeSignature Language="C++ CLI" Value="public ref class RC2CryptoServiceProvider sealed : System::Security::Cryptography::RC2" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.RC2</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义访问 <see cref="T:System.Security.Cryptography.RC2" /> 算法的加密服务提供程序 (CSP) 实现的包装对象。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.RC2CryptoServiceProvider>实现支持增量为 8 位的密钥长度为 40 位至 128 位。  
  
 <xref:System.Security.Cryptography.RC2CryptoServiceProvider>对象是一种块密码进行加密和解密的 8 个字节的块中的数据。  此类来填充数据最终块，如果它是不超过 8 个字节。  填充后，加密数据的长度可能大于原始纯文本。  
  
 请注意，<xref:System.Security.Cryptography.RC2CryptoServiceProvider>对象不使用 salt。  
  
> [!NOTE]
>  较新的对称加密算法，高级加密标准 (AES)，是可用的。 请考虑使用<xref:System.Security.Cryptography.Aes>算法和而不是其派生的类<xref:System.Security.Cryptography.RC2CryptoServiceProvider>类。 使用<xref:System.Security.Cryptography.RC2CryptoServiceProvider>仅为与旧的应用程序和数据的兼容性。  
  
   
  
## Examples  
 下面的代码示例进行加密，然后解密字符串。  
  
 [!code-csharp[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/CS/class1.cs#1)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RC2CryptoServiceProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RC2CryptoServiceProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RC2CryptoServiceProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Cryptography.RC2CryptoServiceProvider" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例进行加密，然后解密字符串。  
  
 [!code-csharp[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/CS/class1.cs#1)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">无法获取加密服务提供程序 (CSP)。</exception>
        <exception cref="T:System.InvalidOperationException">找到不兼容的 FIPS 算法。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDecryptor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建对称解密器对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDecryptor">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Cryptography.ICryptoTransform CreateDecryptor(unsigned int8[] rgbKey, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateDecryptor (rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ICryptoTransform ^ CreateDecryptor(cli::array &lt;System::Byte&gt; ^ rgbKey, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ICryptoTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbKey" Type="System.Byte[]" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbKey">用于对称算法的密钥。</param>
        <param name="rgbIV">用于对称算法的初始化向量。</param>
        <summary>用指定的密钥 (<see cref="T:System.Security.Cryptography.RC2" />) 和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) 创建对称的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" /> 解密器对象。</summary>
        <returns>对称 <see cref="T:System.Security.Cryptography.RC2" /> 解密器对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于解密加密的消息创建使用<xref:System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor%2A>重载具有相同参数。  
  
   
  
## Examples  
 下面的代码示例进行加密，然后解密字符串。  
  
 [!code-csharp[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/CS/class1.cs#1)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">使用了 <see cref="F:System.Security.Cryptography.CipherMode.OFB" /> 密码模式。  
  
 或  
  
 使用了反馈大小不是 8 位的 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 密码模式。  
  
 或  
  
 使用了无效的密钥大小。  
  
 或  
  
 算法密钥大小不可用。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateEncryptor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建对称加密器对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateEncryptor">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Cryptography.ICryptoTransform CreateEncryptor(unsigned int8[] rgbKey, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateEncryptor (rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ICryptoTransform ^ CreateEncryptor(cli::array &lt;System::Byte&gt; ^ rgbKey, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ICryptoTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbKey" Type="System.Byte[]" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbKey">用于对称算法的密钥。</param>
        <param name="rgbIV">用于对称算法的初始化向量。</param>
        <summary>用指定的密钥 (<see cref="T:System.Security.Cryptography.RC2" />) 和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) 创建对称的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" /> 加密器对象。</summary>
        <returns>对称 <see cref="T:System.Security.Cryptography.RC2" /> 加密器对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor%2A>重载具有相同的参数来解密此方法的结果。  
  
   
  
## Examples  
 下面的代码示例进行加密，然后解密字符串。  
  
 [!code-csharp[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/CS/class1.cs#1)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">使用了 <see cref="F:System.Security.Cryptography.CipherMode.OFB" /> 密码模式。  
  
 或  
  
 使用了反馈大小不是 8 位的 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 密码模式。  
  
 或  
  
 使用了无效的密钥大小。  
  
 或  
  
 算法密钥大小不可用。</exception>
      </Docs>
    </Member>
    <Member MemberName="EffectiveKeySize">
      <MemberSignature Language="C#" Value="public override int EffectiveKeySize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EffectiveKeySize" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property EffectiveKeySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int EffectiveKeySize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Security.Cryptography.RC2" /> 算法所用密钥的有效大小（以位为单位）。</summary>
        <value>
          <see cref="T:System.Security.Cryptography.RC2" /> 算法使用的有效密钥大小（以位为单位）。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
          <see cref="P:System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize" /> 属性被设置为 <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue" /> 属性以外的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateIV">
      <MemberSignature Language="C#" Value="public override void GenerateIV ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateIV() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GenerateIV ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GenerateIV();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>生成用于该算法的随机初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法生成一个随机<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>当未指定。  
  
   
  
## Examples  
 下面的代码示例进行加密，然后解密字符串。  
  
 [!code-csharp[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/CS/class1.cs#1)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public override void GenerateKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GenerateKey ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GenerateKey();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>生成用于该算法的随机密钥 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法时未指定生成一个随机密钥。  
  
 <xref:System.Security.Cryptography.RC2CryptoServiceProvider>实现支持增量为 8 位的密钥长度为 40 位至 128 位。  
  
   
  
## Examples  
 下面的代码示例进行加密，然后解密字符串。  
  
 [!code-csharp[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/CS/class1.cs#1)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSalt">
      <MemberSignature Language="C#" Value="public bool UseSalt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSalt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt" />
      <MemberSignature Language="VB.NET" Value="Public Property UseSalt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSalt { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定是否创建一个具有 11 字节长的零值 salt 的密钥。</summary>
        <value>
          如果应该创建具有 11 字节长的零值 salt 的密钥，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt%2A>属性允许你与使用 11 字节长的零值的 salt 的现有应用程序进行互操作。  大多数情况下，你不应使用与 salt<xref:System.Security.Cryptography.RC2CryptoServiceProvider>密钥。  
  
   
  
## Examples  
 下面的代码示例设置<xref:System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt%2A>属性`true`，然后进行加密和解密值。  
  
 [!code-cpp[Cryptography.RC2CryptoServiceProvider#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RC2CryptoServiceProvider/cpp/example.cpp#1)]
 [!code-csharp[Cryptography.RC2CryptoServiceProvider#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RC2CryptoServiceProvider/CS/example.cs#1)]
 [!code-vb[Cryptography.RC2CryptoServiceProvider#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RC2CryptoServiceProvider/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>