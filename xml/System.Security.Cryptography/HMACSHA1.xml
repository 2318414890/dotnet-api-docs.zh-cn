<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HMACSHA1.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53b671d8988b867c182c89d5f79c893f075020c72.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b671d8988b867c182c89d5f79c893f075020c72</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>Computes a Hash-based Message Authentication Code (HMAC) using the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SHA1" /&gt;</ph> hash function.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SHA1" /&gt;</ph> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> 是一种是从 SHA1 哈希函数构造，用作的 HMAC 或基于哈希的消息验证代码的加密哈希算法。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC 过程将与消息数据的机密密钥、 哈希结果与哈希函数，同样，与该密钥组合该哈希值，然后将哈希函数应用第二次。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>The output hash is 160 bits in length.</source>
          <target state="translated">输出哈希值为 160 位长度。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</source>
          <target state="translated">HMAC 可以用于确定是否通过不安全通道发送的消息已被篡改，前提是发送方和接收方共享机密密钥。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>The sender computes the hash value for the original data and sends both the original data and hash value as a single message.</source>
          <target state="translated">发件人计算原始数据的哈希值，并将原始数据和哈希值作为一条消息发送。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</source>
          <target state="translated">接收方将收到的消息哈希值重新计算，并检查计算的 HMAC 与传输的 HMAC 相匹配。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</source>
          <target state="translated">对数据或哈希值的任何更改产生不匹配，因为更改消息和重新生成正确的哈希值需要的机密密钥。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>Therefore, if the original and computed hash values match, the message is authenticated.</source>
          <target state="translated">因此，如果原始与计算所得的哈希值匹配，消息进行身份验证。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>The SHA-1 (Secure Hash Algorithm, also called SHS, Secure Hash Standard) is a cryptographic hash algorithm published by the United States Government.</source>
          <target state="translated">Sha-1 （安全哈希算法，也称为 SHS、 安全哈希标准） 是发布的美国政府的加密哈希算法。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>It produces a 160-bit hash value from an arbitrary length string.</source>
          <target state="translated">它将生成一个任意长度字符串从 160 位哈希值。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> accepts keys of any size, and produces a hash sequence that is 160 bits in length.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> 接受任何大小的密钥，并生成一个哈希序列，其中为 160 位的长度。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>The following code example shows how to sign a file by using the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> object and then how to verify the file.</source>
          <target state="translated">下面的代码示例演示如何使用文件进行签名<ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph>对象，然后如何验证该文件。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> class with a randomly generated key.</source>
          <target state="translated">使用随机生成的密钥初始化 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> 是一种是从 SHA1 哈希函数构造，用作的 HMAC 或基于哈希的消息验证代码的加密哈希算法。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC 过程将与消息数据的机密密钥、 哈希结果与哈希函数，同样，与该密钥组合该哈希值，然后将哈希函数应用第二次。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor">
          <source>The output hash is 160 bits (20 bytes) in length.</source>
          <target state="translated">输出哈希值为 160 位 （20 字节为单位） 的长度。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor">
          <source>This constructor uses a 64-byte, randomly generated key.</source>
          <target state="translated">此构造函数使用 64 字节的随机生成密钥。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>The secret key for <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> encryption.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> 加密的机密密钥。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</source>
          <target state="translated">密钥的长度不限，但如果该密钥是 64 个字节，就会经过散列处理（使用 SHA-1）以派生一个 64 个字节的密钥。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>Therefore, the recommended size of the secret key is 64 bytes.</source>
          <target state="translated">因此，建议的密钥大小为 64 个字节。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> class with the specified key data.</source>
          <target state="translated">使用指定的密钥数据初始化 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> 是一种是从 SHA1 哈希函数构造，用作的 HMAC 或基于哈希的消息验证代码的加密哈希算法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC 过程将与消息数据的机密密钥、 哈希结果与哈希函数，同样，与该密钥组合该哈希值，然后将哈希函数应用第二次。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>The output hash is 160 bits (20 bytes) in length.</source>
          <target state="translated">输出哈希值为 160 位 （20 字节为单位） 的长度。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>This constructor creates an unmanaged instance of the algorithm by using the <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1CryptoServiceProvider&gt;</ph> class.</source>
          <target state="translated">此构造函数通过使用创建算法的非托管的实例<ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1CryptoServiceProvider&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>For an example of how to use this constructor, see the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> class.</source>
          <target state="translated">有关如何使用此构造函数的示例，请参阅<ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="key" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
          <source>The secret key for <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> encryption.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> 加密的机密密钥。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
          <source>The key can be any length, but if it is more than 64 bytes long, it is hashed (using SHA-1) to derive a 64-byte key.</source>
          <target state="translated">密钥的长度不限，但如果该密钥超过 64 个字节，就会经过散列处理（使用 SHA-1）以派生一个 64 个字节的密钥。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
          <source>Therefore, the recommended size of the secret key is 64 bytes.</source>
          <target state="translated">因此，建议的密钥大小为 64 个字节。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to use the managed implementation of the SHA1 algorithm (the <ph id="ph2">&lt;see cref="T:System.Security.Cryptography.SHA1Managed" /&gt;</ph> class); <ph id="ph3">&lt;see langword="false" /&gt;</ph> to use the unmanaged implementation (the <ph id="ph4">&lt;see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /&gt;</ph> class).</source>
          <target state="translated">如果使用 SHA1 算法的托管实现（<ph id="ph2">&lt;see cref="T:System.Security.Cryptography.SHA1Managed" /&gt;</ph> 类），则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果使用非托管实现（<ph id="ph4">&lt;see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /&gt;</ph> 类），则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> class with the specified key data and a value that specifies whether to use the managed version of the SHA1 algorithm.</source>
          <target state="translated">使用指定的密钥数据和一个指定是否使用 SHA1 算法托管版本的值，来初始化 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> 类的新实例。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>