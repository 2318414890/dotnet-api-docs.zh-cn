<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HMACSHA256.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c4a95573b647579bd27a466bebd983565c9aa6c8.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4a95573b647579bd27a466bebd983565c9aa6c8</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACSHA256">
          <source>Computes a Hash-based Message Authentication Code (HMAC) by using the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SHA256" /&gt;</ph> hash function.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SHA256" /&gt;</ph> 哈希函数计算基于哈希值的消息验证代码 (HMAC)。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA256">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA256&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA-256 hash function and used as a Hash-based Message Authentication Code (HMAC).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA256&gt;</ph> 是一种加密哈希算法是 sha-256 哈希函数中构造和使用作为基于哈希的消息身份验证代码 (HMAC)。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA256">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC 过程将与消息数据的机密密钥、 哈希结果与哈希函数，同样，与该密钥组合该哈希值，然后将哈希函数应用第二次。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA256">
          <source>The output hash is 256 bits in length.</source>
          <target state="translated">输出哈希值为 256 位的长度。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA256">
          <source>An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</source>
          <target state="translated">HMAC 可以用于确定是否通过不安全通道发送的消息已被篡改，前提是发送方和接收方共享机密密钥。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA256">
          <source>The sender computes the hash value for the original data and sends both the original data and hash value as a single message.</source>
          <target state="translated">发件人计算原始数据的哈希值，并将原始数据和哈希值作为一条消息发送。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA256">
          <source>The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</source>
          <target state="translated">接收方将收到的消息哈希值重新计算，并检查计算的 HMAC 与传输的 HMAC 相匹配。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA256">
          <source>Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</source>
          <target state="translated">对数据或哈希值的任何更改产生不匹配，因为更改消息和重新生成正确的哈希值需要的机密密钥。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA256">
          <source>Therefore, if the original and computed hash values match, the message is authenticated.</source>
          <target state="translated">因此，如果原始与计算所得的哈希值匹配，消息进行身份验证。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA256">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA256&gt;</ph> accepts keys of any size, and produces a hash sequence 256 bits in length.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA256&gt;</ph> 接受任何大小的密钥，并生成哈希序列的长度的 256 位。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA256">
          <source>The following example shows how to sign a file by using the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA256&gt;</ph> object and then how to verify the file.</source>
          <target state="translated">下面的示例演示如何使用文件进行签名<ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA256&gt;</ph>对象，然后如何验证该文件。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACSHA256">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA256" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA256" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA256.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA256" /&gt;</ph> class with a randomly generated key.</source>
          <target state="translated">使用随机生成的密钥初始化 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA256" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA256.#ctor">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA256&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA-256 hash function and used as a Hash-based Message Authentication Code (HMAC).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA256&gt;</ph> 是一种加密哈希算法是 sha-256 哈希函数中构造和使用作为基于哈希的消息身份验证代码 (HMAC)。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA256.#ctor">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC 过程将与消息数据的机密密钥、 哈希结果与哈希函数，同样，与该密钥组合该哈希值，然后将哈希函数应用第二次。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA256.#ctor">
          <source>The output hash is 256 bits in length.</source>
          <target state="translated">输出哈希值为 256 位的长度。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA256.#ctor">
          <source>This constructor uses a 64-byte, randomly generated key.</source>
          <target state="translated">此构造函数使用 64 字节的随机生成密钥。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
          <source>The secret key for <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA256" /&gt;</ph> encryption.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA256" /&gt;</ph> 加密的机密密钥。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
          <source>The key can be any length.</source>
          <target state="translated">该密钥可以是任意长度。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
          <source>However, the recommended size is 64 bytes.</source>
          <target state="translated">但是建议的大小为 64 个字节。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
          <source>If the key is more than 64 bytes long, it is hashed (using SHA-256) to derive a 64-byte key.</source>
          <target state="translated">如果键的长度超过 64 个字节，将对其进行哈希运算（使用 SHA-256）以派生出一个 64 字节的密钥。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
          <source>If it is less than 64 bytes long, it is padded to 64 bytes.</source>
          <target state="translated">如果少于 64 个字节，就填充到 64 个字节。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA256" /&gt;</ph> class with the specified key data.</source>
          <target state="translated">使用指定的密钥数据初始化 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA256" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA256&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA-256 hash function and used as a Hash-based Message Authentication Code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA256&gt;</ph> 是一种是从 sha-256 哈希函数构造，用作基于哈希的消息验证代码的加密哈希算法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC 过程将与消息数据的机密密钥、 哈希结果与哈希函数，同样，与该密钥组合该哈希值，然后将哈希函数应用第二次。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
          <source>The output hash is 256 bits in length.</source>
          <target state="translated">输出哈希值为 256 位的长度。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
          <source>For an example of how to use this constructor, see the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA256&gt;</ph> class.</source>
          <target state="translated">有关如何使用此构造函数的示例，请参阅<ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA256&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="key" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>