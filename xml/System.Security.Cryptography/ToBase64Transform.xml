<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ToBase64Transform.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b09c2eccabf095e70980b37d9972ff4e92319ced.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b09c2eccabf095e70980b37d9972ff4e92319ced</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.ToBase64Transform">
          <source>Converts a <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.CryptoStream" /&gt;</ph> to base 64.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.CryptoStream" /&gt;</ph> 转换为 Base 64。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.ToBase64Transform">
          <source>Base 64 Content-Transfer-Encoding represents arbitrary bit sequences in a form that is not human readable.</source>
          <target state="translated">Base 64 内容传输编码表示用户不可窗体中的任意位序列可读。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.ToBase64Transform">
          <source>The following code example demonstrates how to use members of the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何使用的成员<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.ToBase64Transform.CanReuseTransform">
          <source>Gets a value indicating whether the current transform can be reused.</source>
          <target state="translated">获取一个值，该值指示是否可重复使用当前转换。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.CanReuseTransform">
          <source>Always <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">总是为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.CanReuseTransform">
          <source>The following code example demonstrates how to call the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.CanReuseTransform%2A&gt;</ph> property to determine if the current transform can be reused.</source>
          <target state="translated">下面的代码示例演示如何调用<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.CanReuseTransform%2A&gt;</ph>属性来确定是否可以重复使用当前转换。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.CanReuseTransform">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks">
          <source>Gets a value that indicates whether multiple blocks can be transformed.</source>
          <target state="translated">获取一个值，该值指示是否可转换多个块。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks">
          <source>Always <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">总是为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks">
          <source>In the current implementation, only one block can be transformed at a time, so this property is always <ph id="ph1">`false`</ph>.</source>
          <target state="translated">在当前实现中，只有一个块可以转换一次，因此此属性始终为<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks">
          <source>The following code example demonstrates how to call the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks%2A&gt;</ph> method to verify that multiple blocks can be transformed.</source>
          <target state="translated">下面的代码示例演示如何调用<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks%2A&gt;</ph>方法以验证可以转换多个块。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.Clear">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph>.</source>
          <target state="translated">释放由 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> 使用的所有资源。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Clear">
          <source>This method is a simple call to <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">此方法是对的简单调用<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Clear">
          <source>Calling <ph id="ph1">`Dispose`</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">调用<ph id="ph1">`Dispose`</ph>允许使用的资源<ph id="ph2">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>可以重新分配用于其他目的。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Clear">
          <source>For more information about <ph id="ph1">`Dispose`</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">有关详细信息<ph id="ph1">`Dispose`</ph>，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Clear">
          <source>The following code example demonstrates how to call the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.Clear%2A&gt;</ph> method to free up unused resources by the current transform.</source>
          <target state="translated">下面的代码示例演示如何调用<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.Clear%2A&gt;</ph>方法以释放未使用的资源的当前转换。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Clear">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.ToBase64Transform">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> class.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> 类的当前实例所使用的所有资源。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> class.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> 类的当前实例所使用的所有资源。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>.</source>
          <target state="translated">在完成使用 <ph id="ph1">`Dispose`</ph> 后，应调用 <ph id="ph2">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 方法使 <ph id="ph2">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> 处于不可用状态。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> was occupying.</source>
          <target state="translated">在调用<ph id="ph1">`Dispose`</ph>，必须释放对所有引用<ph id="ph2">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>以便垃圾回收器才能回收的内存，<ph id="ph3">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>占用。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>和<bpt id="p2">[</bpt>实现 Dispose 方法<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>.</source>
          <target state="translated">每次释放对 <ph id="ph1">`Dispose`</ph> 的最后一个引用前，均应调用 <ph id="ph2">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">否则，在垃圾回收器调用 <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> 对象的 <ph id="ph2">`Finalize`</ph> 方法之前，该对象正在使用的资源不会被释放。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">若要释放托管资源和非托管资源，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；若仅释放非托管资源，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">释放由 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> 占用的非托管资源，还可以另外再释放托管资源。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">此方法称为由公共<ph id="ph1">`Dispose()`</ph>方法和<ph id="ph2">`Finalize`</ph>方法。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the disposing parameter set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> 调用受保护<ph id="ph2">`Dispose(Boolean)`</ph>方法释放参数设置为<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)">
          <source><ph id="ph1">`Finalize`</ph> invokes <ph id="ph2">`Dispose`</ph> with disposing set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Finalize`</ph> 将释放设置为 <ph id="ph2">`Dispose`</ph>，调用 <ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> references.</source>
          <target state="translated">当 <ph id="ph1">`disposing`</ph> 参数为 <ph id="ph2">`true`</ph> 时，此方法释放该 <ph id="ph3">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> 引用的、由任何托管对象持有的全部资源。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">此方法调用每个引用对象的 <ph id="ph1">`Dispose()`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> 可以由其他对象多次调用。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">在重写<ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>，请注意不要引用在以前调用之前释放对象<ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">有关如何实现详细信息<ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>，请参阅<bpt id="p1">[</bpt>实现 Dispose 方法<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">有关详细信息<ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>和<ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.Finalize">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph>.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> 使用的非托管资源。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.ToBase64Transform.InputBlockSize">
          <source>Gets the input block size.</source>
          <target state="translated">获取输入块大小。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.InputBlockSize">
          <source>The size of the input data blocks in bytes.</source>
          <target state="translated">输入数据块的大小（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.InputBlockSize">
          <source>The input block size for this transformation is 3 bytes.</source>
          <target state="translated">此转换的输入的块大小为 3 个字节。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.InputBlockSize">
          <source>The following code example demonstrates how to call the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.InputBlockSize%2A&gt;</ph> property to retrieve the input block size of the current transform.</source>
          <target state="translated">下面的代码示例演示如何调用<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.InputBlockSize%2A&gt;</ph>属性来检索当前转换的输入的块大小。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.InputBlockSize">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.ToBase64Transform.OutputBlockSize">
          <source>Gets the output block size.</source>
          <target state="translated">获取输出块大小。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.OutputBlockSize">
          <source>The size of the output data blocks in bytes.</source>
          <target state="translated">输出数据块的大小（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.OutputBlockSize">
          <source>The output block size for this transformation is 4 bytes.</source>
          <target state="translated">此转换的输出块大小是 4 个字节。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.OutputBlockSize">
          <source>The following code example demonstrates how to call the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.OutputBlockSize%2A&gt;</ph> property to create a new byte array with the size of the output block size.</source>
          <target state="translated">下面的代码示例演示如何调用<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.OutputBlockSize%2A&gt;</ph>属性可创建新的字节数组与输出块大小的大小。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ToBase64Transform.OutputBlockSize">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The input to compute to base 64.</source>
          <target state="translated">要计算为 Base 64 的输入。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The offset into the input byte array from which to begin using data.</source>
          <target state="translated">输入字节数组中的偏移量，从该位置开始使用数据。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The number of bytes in the input byte array to use as data.</source>
          <target state="translated">输入字节数组中用作数据的字节数。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The output to which to write the result.</source>
          <target state="translated">要向其写入结果的输出。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The offset into the output byte array from which to begin writing data.</source>
          <target state="translated">输入字节数组中的偏移量，从该位置开始使用数据。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Converts the specified region of the input byte array to base 64 and copies the result to the specified region of the output byte array.</source>
          <target state="translated">将输入字节数组的指定区域转换为 Base 64，并将结果复制到输出字节数组的指定区域。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The number of bytes written.</source>
          <target state="translated">写入的字节数。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> class is a block algorithm that processes input blocks of 3 bytes and creates output blocks of 4 bytes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>类是一种将处理的 3 个字节的输入的块并创建 4 个字节的输出块的块算法。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.TransformBlock%2A&gt;</ph> method transforms an input block of 24 bits into 32 bits of character data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.TransformBlock%2A&gt;</ph>方法将的 24 位的输入的块转换为 32 位的字符数据。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>You must maintain 3 byte input boundaries to 4 byte output boundaries in order to match the block transform.</source>
          <target state="translated">为了匹配块转换，你必须维护 3 字节输入的边界对应到 4 字节输出边界。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The following code example demonstrates how to call the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.TransformBlock%2A&gt;</ph> method to iterate through <ph id="ph2">`inputBytes`</ph> transforming by <ph id="ph3">`blockSize`</ph>.</source>
          <target state="translated">下面的代码示例演示如何调用<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.TransformBlock%2A&gt;</ph>方法来循环访问<ph id="ph2">`inputBytes`</ph>来改变<ph id="ph3">`blockSize`</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> object has already been disposed.</source>
          <target state="translated">已释放当前的 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The data size is not valid.</source>
          <target state="translated">数据大小无效。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="inputBuffer" /&gt;</ph> parameter contains an invalid offset length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inputBuffer" /&gt;</ph> 参数包含无效偏移量长度。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="inputCount" /&gt;</ph> parameter contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inputCount" /&gt;</ph> 参数包含无效值。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="inputBuffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inputBuffer" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="inputBuffer" /&gt;</ph> parameter requires a non-negative number.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inputBuffer" /&gt;</ph> 参数需要非负数。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
          <source>The input to convert to base 64.</source>
          <target state="translated">要转换为 Base 64 的输入。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
          <source>The offset into the byte array from which to begin using data.</source>
          <target state="translated">字节数组中的偏移量，从该位置开始使用数据。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes in the byte array to use as data.</source>
          <target state="translated">字节数组中用作数据的字节数。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
          <source>Converts the specified region of the specified byte array to base 64.</source>
          <target state="translated">将指定字节数组的指定区域转换为 Base 64。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
          <source>The computed base 64 conversion.</source>
          <target state="translated">已计算的 Base 64 转换。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example demonstrates how to call the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock%2A&gt;</ph> method to transform the final block of data.</source>
          <target state="translated">下面的代码示例演示如何调用<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock%2A&gt;</ph>方法转换数据的最后一个块。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> object has already been disposed.</source>
          <target state="translated">已释放当前的 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ToBase64Transform" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="inputBuffer" /&gt;</ph> parameter contains an invalid offset length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inputBuffer" /&gt;</ph> 参数包含无效偏移量长度。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="inputCount" /&gt;</ph> parameter contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inputCount" /&gt;</ph> 参数包含无效值。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="inputBuffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inputBuffer" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="inputBuffer" /&gt;</ph> parameter requires a non-negative number.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inputBuffer" /&gt;</ph> 参数需要非负数。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>