<Type Name="Rfc2898DeriveBytes" FullName="System.Security.Cryptography.Rfc2898DeriveBytes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cd3ac9896d8adba5fc15cbc6580e9e102d0b902f" />
    <Meta Name="ms.sourcegitcommit" Value="e7865e39826e7aaf54da4c7042975153813a31c7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/16/2018" />
    <Meta Name="ms.locfileid" Value="31043847" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Rfc2898DeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Rfc2898DeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class Rfc2898DeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc2898DeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ba1d1-101">通过使用基于 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 的伪随机数生成器，实现基于密码的密钥派生功能 (PBKDF2)。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ba1d1-101">Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <see cref="T:System.Security.Cryptography.HMACSHA1" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba1d1-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 采用密码、 salt 值和迭代次数，，然后生成密钥对的调用通过<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span>  
  
 <span data-ttu-id="ba1d1-103">RFC 2898 包括用于从密码和 salt 创建密钥和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-103">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="ba1d1-104">PBKDF2，基于密码的密钥派生函数，可用于派生密钥使用允许键几乎不受限制的长度，以生成一个伪随机函数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-104">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="ba1d1-105"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类可以用于生成派生的密钥从是基项和其他参数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-105">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="ba1d1-106">在基于密码的密钥派生函数中，基密钥是密码和其他参数是一个 salt 值和迭代次数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-106">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="ba1d1-107">有关 PBKDF2 的详细信息，请参阅 RFC 2898"PKCS #5： 基于密码的加密规范版本 2.0 中，"可在上找到[征求意见文档网站](http://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-107">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="ba1d1-108">有关完整详细信息，请参阅部分 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-108">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ba1d1-109">切勿硬编码你的源代码中的密码。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-109">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="ba1d1-110">可以通过使用从程序集检索硬编码密码[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六进制编辑器中，或只需打开 Notepad.exe 等文本编辑器中的程序集。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-110">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba1d1-111">下面的代码示例使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes>类来创建两个相同的快捷键<xref:System.Security.Cryptography.TripleDES>类。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-111">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="ba1d1-112">然后，它将进行加密和解密使用密钥的某些数据。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-112">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ba1d1-113">初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-113">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="ba1d1-114">用于派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-114">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="ba1d1-115">用于派生密钥的密钥 salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-115">The key salt used to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba1d1-116">通过使用密码和 salt 值派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password and salt to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba1d1-117">Salt 大小必须为 8 个字节或更大。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-117">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="ba1d1-118">RFC 2898 包括用于从密码和 salt 创建密钥和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-118">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="ba1d1-119">PBKDF2，基于密码的密钥派生函数，可用于派生密钥使用允许键几乎不受限制的长度，以生成一个伪随机函数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-119">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="ba1d1-120"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类可以用于生成派生的密钥从是基项和其他参数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-120">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="ba1d1-121">在基于密码的密钥派生函数中，基密钥是密码和其他参数是一个 salt 值和迭代次数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-121">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="ba1d1-122">有关 PBKDF2 的详细信息，请参阅 RFC 2898"PKCS #5： 基于密码的加密规范版本 2.0 中，"可在上找到[征求意见文档网站](http://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-122">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="ba1d1-123">有关完整详细信息，请参阅部分 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-123">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ba1d1-124">切勿硬编码你的源代码中的密码。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-124">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="ba1d1-125">可以通过使用从程序集检索硬编码密码[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六进制编辑器中，或只需打开 Notepad.exe 等文本编辑器中的程序集。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-125">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba1d1-126">下面的代码示例使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes>类来创建两个相同的快捷键<xref:System.Security.Cryptography.TripleDES>类。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-126">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="ba1d1-127">然后，它将进行加密和解密使用密钥的某些数据。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-127">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ba1d1-128">指定的 salt 大小小于 8 字节或迭代次数小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-128">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ba1d1-129">密码或 salt 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-129">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="ba1d1-130">用于派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-130">The password used to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="ba1d1-131">你希望类生成的随机 salt 的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-131">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba1d1-132">通过使用密码和 salt 大小派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-132">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the password and salt size to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba1d1-133">Salt 大小必须为 8 个字节或更大。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-133">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="ba1d1-134">RFC 2898 包括用于从密码和 salt 创建密钥和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-134">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="ba1d1-135">PBKDF2，基于密码的密钥派生函数，可用于派生密钥使用允许键几乎不受限制的长度，以生成一个伪随机函数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-135">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="ba1d1-136"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类可以用于生成派生的密钥从是基项和其他参数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-136">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="ba1d1-137">在基于密码的密钥派生函数中，基密钥是密码和其他参数是一个 salt 值和迭代次数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-137">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="ba1d1-138">有关 PBKDF2 的详细信息，请参阅 RFC 2898"PKCS #5： 基于密码的加密规范版本 2.0 中，"可在上找到[征求意见文档网站](http://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-138">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="ba1d1-139">有关完整详细信息，请参阅部分 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-139">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ba1d1-140">切勿硬编码你的源代码中的密码。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-140">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="ba1d1-141">可以通过使用从程序集检索硬编码密码[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六进制编辑器中，或只需打开 Notepad.exe 等文本编辑器中的程序集。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-141">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ba1d1-142">指定的 salt 大小小于 8 字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-142">The specified salt size is smaller than 8 bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ba1d1-143">密码或 salt 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-143">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="ba1d1-144">用于派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-144">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="ba1d1-145">用于派生密钥的密钥 salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-145">The key salt used to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="ba1d1-146">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-146">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba1d1-147">通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-147">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba1d1-148">Salt 大小必须为 8 个字节或更大和迭代次数必须是大于零。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-148">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="ba1d1-149">建议的最小迭代数为 1000年。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-149">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="ba1d1-150">RFC 2898 包括用于从密码和 salt 创建密钥和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-150">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="ba1d1-151">PBKDF2，基于密码的密钥派生函数，可用于派生密钥使用允许键几乎不受限制的长度，以生成一个伪随机函数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-151">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="ba1d1-152"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类可以用于生成派生的密钥从是基项和其他参数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-152">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="ba1d1-153">在基于密码的密钥派生函数中，基密钥是密码和其他参数是一个 salt 值和迭代次数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-153">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="ba1d1-154">有关 PBKDF2 的详细信息，请参阅 RFC 2898"PKCS #5： 基于密码的加密规范版本 2.0 中，"可在上找到[征求意见文档网站](http://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-154">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="ba1d1-155">有关完整详细信息，请参阅部分 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-155">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ba1d1-156">切勿硬编码你的源代码中的密码。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-156">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="ba1d1-157">可以通过使用从程序集检索硬编码密码[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六进制编辑器中，或只需打开 Notepad.exe 等文本编辑器中的程序集。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-157">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ba1d1-158">指定的 salt 大小小于 8 字节或迭代次数小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-158">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ba1d1-159">密码或 salt 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-159">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="ba1d1-160">用于派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-160">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="ba1d1-161">用于派生密钥的密钥 salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-161">The key salt used to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="ba1d1-162">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-162">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba1d1-163">通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-163">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba1d1-164">Salt 大小必须为 8 个字节或更大和迭代次数必须是大于零。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-164">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="ba1d1-165">建议的最小迭代数为 1000年。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-165">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="ba1d1-166">RFC 2898 包括用于从密码和 salt 创建密钥和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-166">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="ba1d1-167">PBKDF2，基于密码的密钥派生函数，可用于派生密钥使用允许键几乎不受限制的长度，以生成一个伪随机函数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-167">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="ba1d1-168"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类可以用于生成派生的密钥从是基项和其他参数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-168">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="ba1d1-169">在基于密码的密钥派生函数中，基密钥是密码和其他参数是一个 salt 值和迭代次数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-169">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="ba1d1-170">有关 PBKDF2 的详细信息，请参阅 RFC 2898"PKCS #5： 基于密码的加密规范版本 2.0 中，"可在上找到[征求意见文档网站](http://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-170">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="ba1d1-171">有关完整详细信息，请参阅部分 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-171">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ba1d1-172">切勿硬编码你的源代码中的密码。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-172">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="ba1d1-173">可以通过使用从程序集检索硬编码密码[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六进制编辑器中，或只需打开 Notepad.exe 等文本编辑器中的程序集。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-173">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba1d1-174">下面的代码示例使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes>类来创建两个相同的快捷键<xref:System.Security.Cryptography.TripleDES>类。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-174">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="ba1d1-175">然后，它将进行加密和解密使用密钥的某些数据。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-175">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ba1d1-176">指定的 salt 大小小于 8 字节或迭代次数小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-176">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ba1d1-177">密码或 salt 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-177">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="ba1d1-178">用于派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-178">The password used to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="ba1d1-179">你希望类生成的随机 salt 的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-179">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="ba1d1-180">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-180">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba1d1-181">通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-181">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt size, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba1d1-182">Salt 大小必须为 8 个字节或更大和迭代次数必须是大于零。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-182">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="ba1d1-183">建议的最小迭代数为 1000年。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-183">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="ba1d1-184">RFC 2898 包括用于从密码和 salt 创建密钥和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-184">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="ba1d1-185">PBKDF2，基于密码的密钥派生函数，可用于派生密钥使用允许键几乎不受限制的长度，以生成一个伪随机函数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-185">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="ba1d1-186"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类可以用于生成派生的密钥从是基项和其他参数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-186">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="ba1d1-187">在基于密码的密钥派生函数中，基密钥是密码和其他参数是一个 salt 值和迭代次数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-187">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="ba1d1-188">PBKDF2 的详细信息，请参阅 RFC 2898"PKCS #5： 基于密码的加密规范版本 2.0 中，"可在上找到[征求意见文档网站](http://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-188">For more information on PBKDF2, see RFC 2898,"PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="ba1d1-189">有关完整详细信息，请参阅部分 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-189">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ba1d1-190">切勿硬编码你的源代码中的密码。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-190">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="ba1d1-191">可以通过使用从程序集检索硬编码密码[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六进制编辑器中，或只需打开 Notepad.exe 等文本编辑器中的程序集。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-191">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ba1d1-192">指定的 salt 大小小于 8 字节或迭代次数小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-192">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ba1d1-193">密码或 salt 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-193">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ba1d1-194">
            <paramref name="iterations" /> 超出范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-194">
              <paramref name="iterations" /> is out of range.</span>
          </span>
          <span data-ttu-id="ba1d1-195">此参数需要非负数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-195">This parameter requires a non-negative number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="ba1d1-196">用以派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-196">The password to use to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="ba1d1-197">用以导出密钥的密钥 salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-197">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="ba1d1-198">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-198">The number of iterations for the operation.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="ba1d1-199">用于派生密钥的哈希算法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-199">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba1d1-200">初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例，该实例使用指定的密码、salt、迭代数和哈希算法名称来派生密钥。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-200">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt, number of iterations and the hash algorithm name to derive the key.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ba1d1-201">
            <paramref name="saltSize" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-201">
              <paramref name="saltSize" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ba1d1-202">
            <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-202">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="ba1d1-203">哈希算法名称无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-203">Hash algorithm name is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="ba1d1-204">用以派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-204">The password to use to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="ba1d1-205">用以导出密钥的密钥 salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-205">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="ba1d1-206">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-206">The number of iterations for the operation.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="ba1d1-207">用于派生密钥的哈希算法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-207">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba1d1-208">初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例，该实例使用指定的密码、salt、迭代数和哈希算法名称来派生密钥。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-208">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt, number of iterations and the hash algorithm name to derive the key.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ba1d1-209">
            <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-209">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="ba1d1-210">哈希算法名称无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-210">Hash algorithm name is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="ba1d1-211">用以派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-211">The password to use to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="ba1d1-212">你希望类生成的随机 salt 的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-212">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="ba1d1-213">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-213">The number of iterations for the operation.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="ba1d1-214">用于派生密钥的哈希算法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-214">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba1d1-215">初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例，该实例使用指定的密码、salt 大小、迭代数和哈希算法名称来派生密钥。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-215">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt size, number of iterations and the hash algorithm name to derive the key.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ba1d1-216">
            <paramref name="saltSize" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-216">
              <paramref name="saltSize" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ba1d1-217">
            <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-217">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="ba1d1-218">哈希算法名称无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-218">Hash algorithm name is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname">
          <span data-ttu-id="ba1d1-219">为其导出密钥的算法名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-219">The algorithm name for which to derive the key.</span>
          </span>
        </param>
        <param name="alghashname">
          <span data-ttu-id="ba1d1-220">用于导出密钥的哈希算法名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-220">The hash algorithm name to use to derive the key.</span>
          </span>
        </param>
        <param name="keySize">
          <span data-ttu-id="ba1d1-221">要导出的密钥的大小（以位为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-221">The size of the key, in bits, to derive.</span>
          </span>
        </param>
        <param name="rgbIV">
          <span data-ttu-id="ba1d1-222">用于导出密钥的初始化向量 (IV)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-222">The initialization vector (IV) to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba1d1-223">从 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 对象导出加密密钥。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-223">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba1d1-224">导出的密钥。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-224">The derived key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba1d1-225">此函数是加密 API 函数 CryptDeriveKey() 的包装器，并旨在提供与使用加密 API 的应用程序的互操作性。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-225">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="ba1d1-226">如果`keySize`参数设置为 0 位，则将使用指定的算法的默认密钥大小。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-226">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="ba1d1-227">
            <paramref name="keySize" /> 参数不正确。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-227">The <paramref name="keySize" /> parameter is incorrect.</span>
          </span>
          <span data-ttu-id="ba1d1-228">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-228">-or-</span>
          </span>
          <span data-ttu-id="ba1d1-229">无法获取加密服务提供程序 (CSP)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-229">The cryptographic service provider (CSP) cannot be acquired.</span>
          </span>
          <span data-ttu-id="ba1d1-230">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-230">-or-</span>
          </span>
          <span data-ttu-id="ba1d1-231">
            <paramref name="algname" /> 参数不是有效的算法名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-231">The <paramref name="algname" /> parameter is not a valid algorithm name.</span>
          </span>
          <span data-ttu-id="ba1d1-232">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-232">-or-</span>
          </span>
          <span data-ttu-id="ba1d1-233">
            <paramref name="alghashname" /> 参数不是有效的哈希算法名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-233">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="ba1d1-234">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-234">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba1d1-235">释放 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类使用的非托管资源，并可以选择释放托管资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-235">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba1d1-236">此方法称为由公共`Dispose()`方法和`Finalize`方法。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-236">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="ba1d1-237">`Dispose()` 调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-237">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="ba1d1-238">`Finalize` 调用`Dispose`与`disposing`设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-238">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="ba1d1-239">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-239">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.Rfc2898DeriveBytes> references.</span></span> <span data-ttu-id="ba1d1-240">此方法调用每个引用对象的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-240">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="ba1d1-241">
              <see langword="Dispose" /> 可以由其他对象多次调用。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ba1d1-241">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="ba1d1-242">在重写<see langword="Dispose(Boolean)" />，请注意不要引用在以前调用之前释放对象<see langword="Dispose" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ba1d1-242">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="ba1d1-243">有关如何实现详细信息<see langword="Dispose(Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ba1d1-243">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="ba1d1-244">有关详细信息<see langword="Dispose" />和<see langword="Finalize" />，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ba1d1-244">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb">
          <span data-ttu-id="ba1d1-245">要生成的伪随机密钥字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-245">The number of pseudo-random key bytes to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ba1d1-246">返回此对象的伪随机密钥。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-246">Returns the pseudo-random key for this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ba1d1-247">由伪随机密钥字节组成的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-247">A byte array filled with pseudo-random key bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba1d1-248"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类通过使用基于的伪随机数生成器实现 PBKDF2 功能<xref:System.Security.Cryptography.HMACSHA1>。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-248">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class implements PBKDF2 functionality by using a pseudorandom number generator based on <xref:System.Security.Cryptography.HMACSHA1>.</span></span> <span data-ttu-id="ba1d1-249"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类用于提取密码、 salt 值和迭代次数，然后将生成密钥对的调用通过<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-249">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span> <span data-ttu-id="ba1d1-250">重复的调用此方法将不会生成相同的密钥;相反，追加的两个调用<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法替换`cb`参数值的`20`等效于调用<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法一次与`cb`的参数值`40`。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-250">Repeated calls to this method will not generate the same key; instead, appending two calls of the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method with a `cb` parameter value of `20` is the equivalent of calling the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method once with a `cb` parameter value of `40`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba1d1-251">下面的示例演示如何使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法以获取的实例的密钥<xref:System.Security.Cryptography.Rfc2898DeriveBytes>。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-251">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method to get the key for an instance of <xref:System.Security.Cryptography.Rfc2898DeriveBytes>.</span></span> <span data-ttu-id="ba1d1-252">此代码示例摘自更大的示例为提供<xref:System.Security.Cryptography.Rfc2898DeriveBytes>类。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-252">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#2](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#2)]
 [!code-csharp[rfc28981#2](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#2)]
 [!code-vb[rfc28981#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ba1d1-253">
            <paramref name="cb" /> 超出范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-253">
              <paramref name="cb" /> is out of range.</span>
          </span>
          <span data-ttu-id="ba1d1-254">此参数需要非负数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-254">This parameter requires a non-negative number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.HashAlgorithmName HashAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.HashAlgorithmName HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HashAlgorithm As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::HashAlgorithmName HashAlgorithm { System::Security::Cryptography::HashAlgorithmName get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ba1d1-255">获取或设置操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-255">Gets or sets the number of iterations for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ba1d1-256">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-256">The number of iterations for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba1d1-257">迭代次数是执行操作的次数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-257">Iteration count is the number of times an operation is performed.</span></span> <span data-ttu-id="ba1d1-258">对于此方法中，计数应大于零。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-258">For this method, the count should be greater than zero.</span></span> <span data-ttu-id="ba1d1-259">建议的最小迭代数为 1000年。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-259">The minimum recommended number of iterations is 1000.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba1d1-260">下面的示例演示如何使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A>属性显示在密钥生成过程中使用的迭代次数。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-260">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A> property to display the number of iterations used in the generation of the key.</span></span> <span data-ttu-id="ba1d1-261">此代码示例摘自更大的示例为提供<xref:System.Security.Cryptography.Rfc2898DeriveBytes>类。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-261">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#3](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#3)]
 [!code-csharp[rfc28981#3](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#3)]
 [!code-vb[rfc28981#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ba1d1-262">迭代次数小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-262">The number of iterations is less than 1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ba1d1-263">重置操作的状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-263">Resets the state of the operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba1d1-264">如果修改 salt 值或迭代计数，会自动调用此方法。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-264">This method is automatically called if the salt or iteration count is modified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba1d1-265">下面的示例显示如何使用 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-265">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> method.</span></span> <span data-ttu-id="ba1d1-266">此代码示例摘自更大的示例为提供<xref:System.Security.Cryptography.Rfc2898DeriveBytes>类。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-266">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#5](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#5)]
 [!code-csharp[rfc28981#5](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#5)]
 [!code-vb[rfc28981#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ba1d1-267">获取或设置操作的密钥 salt 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-267">Gets or sets the key salt value for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ba1d1-268">操作的密钥 salt 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-268">The key salt value for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba1d1-269">Salt，随机的一组字节，用于使未经授权的难度消息解密。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-269">Salt, a random set of bytes, is used to make unauthorized decrypting of a message more difficult.</span></span> <span data-ttu-id="ba1d1-270">字典攻击是一种攻击，攻击者尝试通过将以前计算的加密值的最可能的密钥的加密的值进行比较解密加密的消息。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-270">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="ba1d1-271">困难得多的 salt，或随机字节，密码才能密钥派生末尾简介进行这种攻击。</span><span class="sxs-lookup"><span data-stu-id="ba1d1-271">This attack is made much more difficult by the introduction of salt, or random bytes, at the end of the password before the key derivation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ba1d1-272">指定的 salt 大小小于 8 字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-272">The specified salt size is smaller than 8 bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ba1d1-273">salt 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ba1d1-273">The salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>