<Type Name="Rfc2898DeriveBytes" FullName="System.Security.Cryptography.Rfc2898DeriveBytes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="33ee2fd66fc05f288789835988a052f4e50d1055" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51877133" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Rfc2898DeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Rfc2898DeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class Rfc2898DeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc2898DeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <TypeSignature Language="F#" Value="type Rfc2898DeriveBytes = class&#xA;    inherit DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="affc7-101">通过使用基于 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 的伪随机数生成器，实现基于密码的密钥派生功能 (PBKDF2)。</span>
      <span class="sxs-lookup">
        <span data-stu-id="affc7-101">Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <see cref="T:System.Security.Cryptography.HMACSHA1" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="affc7-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 使用密码、 salt 值和迭代次数，并再生成密钥通过调用<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="affc7-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span>  
  
 <span data-ttu-id="affc7-103">RFC 2898 包括用于创建从密码和 salt 的密钥和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="affc7-103">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="affc7-104">PBKDF2，基于密码的密钥派生函数，可用于派生密钥使用的伪随机函数，允许的长度几乎没有限制，生成的键。</span><span class="sxs-lookup"><span data-stu-id="affc7-104">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="affc7-105"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类可用于生成派生的密钥来自基项和其他参数。</span><span class="sxs-lookup"><span data-stu-id="affc7-105">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="affc7-106">在基于密码的密钥派生函数中，基本密钥是密码和其他参数是 salt 值和迭代次数。</span><span class="sxs-lookup"><span data-stu-id="affc7-106">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="affc7-107">有关 PBKDF2 的详细信息，请参阅 RFC 2898 中，"PKCS #5： 基于密码的 Cryptography Specification Version 2.0 中，"上提供[征求意见文档网站](https://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="affc7-107">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](https://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="affc7-108">有关完整详细信息，请参阅部分 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="affc7-108">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="affc7-109">切勿硬编码在源代码中的密码。</span><span class="sxs-lookup"><span data-stu-id="affc7-109">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="affc7-110">可以通过使用从程序集中检索硬编码密码[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六进制编辑器中，或只需打开 Notepad.exe 等文本编辑器中的程序集。</span><span class="sxs-lookup"><span data-stu-id="affc7-110">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="affc7-111">下面的代码示例使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes>类来创建两个完全相同的密钥<xref:System.Security.Cryptography.TripleDES>类。</span><span class="sxs-lookup"><span data-stu-id="affc7-111">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="affc7-112">然后，它将进行加密和解密使用密钥的某些数据。</span><span class="sxs-lookup"><span data-stu-id="affc7-112">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/security/cryptographic-services.md">
      <span data-ttu-id="affc7-113">加密服务</span>
      <span class="sxs-lookup">
        <span data-stu-id="affc7-113">Cryptographic Services</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="affc7-114">初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-114">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * byte[] -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="affc7-115">用于派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-115">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="affc7-116">用于派生密钥的密钥 salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-116">The key salt used to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="affc7-117">通过使用密码和 salt 值派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-117">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password and salt to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="affc7-118">Salt 大小必须为 8 个字节或更大。</span><span class="sxs-lookup"><span data-stu-id="affc7-118">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="affc7-119">RFC 2898 包括用于创建从密码和 salt 的密钥和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="affc7-119">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="affc7-120">PBKDF2，基于密码的密钥派生函数，可用于派生密钥使用的伪随机函数，允许的长度几乎没有限制，生成的键。</span><span class="sxs-lookup"><span data-stu-id="affc7-120">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="affc7-121"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类可用于生成派生的密钥来自基项和其他参数。</span><span class="sxs-lookup"><span data-stu-id="affc7-121">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="affc7-122">在基于密码的密钥派生函数中，基本密钥是密码和其他参数是 salt 值和迭代次数。</span><span class="sxs-lookup"><span data-stu-id="affc7-122">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="affc7-123">有关 PBKDF2 的详细信息，请参阅 RFC 2898 中，"PKCS #5： 基于密码的 Cryptography Specification Version 2.0 中，"上提供[征求意见文档网站](https://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="affc7-123">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](https://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="affc7-124">有关完整详细信息，请参阅部分 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="affc7-124">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="affc7-125">切勿硬编码在源代码中的密码。</span><span class="sxs-lookup"><span data-stu-id="affc7-125">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="affc7-126">可以通过使用从程序集中检索硬编码密码[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六进制编辑器中，或只需打开 Notepad.exe 等文本编辑器中的程序集。</span><span class="sxs-lookup"><span data-stu-id="affc7-126">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="affc7-127">下面的代码示例使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes>类来创建两个完全相同的密钥<xref:System.Security.Cryptography.TripleDES>类。</span><span class="sxs-lookup"><span data-stu-id="affc7-127">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="affc7-128">然后，它将进行加密和解密使用密钥的某些数据。</span><span class="sxs-lookup"><span data-stu-id="affc7-128">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="affc7-129">指定的 salt 大小小于 8 字节或迭代次数小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-129">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="affc7-130">密码或 salt 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-130">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">
          <span data-ttu-id="affc7-131">加密服务</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-131">Cryptographic Services</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, saltSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="affc7-132">用于派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-132">The password used to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="affc7-133">你希望类生成的随机 salt 的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-133">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="affc7-134">通过使用密码和 salt 大小派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-134">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the password and salt size to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="affc7-135">Salt 大小必须为 8 个字节或更大。</span><span class="sxs-lookup"><span data-stu-id="affc7-135">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="affc7-136">RFC 2898 包括用于创建从密码和 salt 的密钥和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="affc7-136">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="affc7-137">PBKDF2，基于密码的密钥派生函数，可用于派生密钥使用的伪随机函数，允许的长度几乎没有限制，生成的键。</span><span class="sxs-lookup"><span data-stu-id="affc7-137">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="affc7-138"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类可用于生成派生的密钥来自基项和其他参数。</span><span class="sxs-lookup"><span data-stu-id="affc7-138">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="affc7-139">在基于密码的密钥派生函数中，基本密钥是密码和其他参数是 salt 值和迭代次数。</span><span class="sxs-lookup"><span data-stu-id="affc7-139">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="affc7-140">有关 PBKDF2 的详细信息，请参阅 RFC 2898 中，"PKCS #5： 基于密码的 Cryptography Specification Version 2.0 中，"上提供[征求意见文档网站](https://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="affc7-140">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](https://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="affc7-141">有关完整详细信息，请参阅部分 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="affc7-141">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="affc7-142">切勿硬编码在源代码中的密码。</span><span class="sxs-lookup"><span data-stu-id="affc7-142">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="affc7-143">可以通过使用从程序集中检索硬编码密码[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六进制编辑器中，或只需打开 Notepad.exe 等文本编辑器中的程序集。</span><span class="sxs-lookup"><span data-stu-id="affc7-143">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="affc7-144">指定的 salt 大小小于 8 字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-144">The specified salt size is smaller than 8 bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="affc7-145">密码或 salt 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-145">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">
          <span data-ttu-id="affc7-146">加密服务</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-146">Cryptographic Services</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : byte[] * byte[] * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="affc7-147">用于派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-147">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="affc7-148">用于派生密钥的密钥 salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-148">The key salt used to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="affc7-149">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-149">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="affc7-150">通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-150">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="affc7-151">Salt 大小必须为 8 个字节或更大和迭代次数必须是大于零。</span><span class="sxs-lookup"><span data-stu-id="affc7-151">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="affc7-152">建议的最小迭代数为 1000年。</span><span class="sxs-lookup"><span data-stu-id="affc7-152">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="affc7-153">RFC 2898 包括用于创建从密码和 salt 的密钥和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="affc7-153">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="affc7-154">PBKDF2，基于密码的密钥派生函数，可用于派生密钥使用的伪随机函数，允许的长度几乎没有限制，生成的键。</span><span class="sxs-lookup"><span data-stu-id="affc7-154">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="affc7-155"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类可用于生成派生的密钥来自基项和其他参数。</span><span class="sxs-lookup"><span data-stu-id="affc7-155">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="affc7-156">在基于密码的密钥派生函数中，基本密钥是密码和其他参数是 salt 值和迭代次数。</span><span class="sxs-lookup"><span data-stu-id="affc7-156">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="affc7-157">有关 PBKDF2 的详细信息，请参阅 RFC 2898 中，"PKCS #5： 基于密码的 Cryptography Specification Version 2.0 中，"上提供[征求意见文档网站](https://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="affc7-157">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](https://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="affc7-158">有关完整详细信息，请参阅部分 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="affc7-158">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="affc7-159">切勿硬编码在源代码中的密码。</span><span class="sxs-lookup"><span data-stu-id="affc7-159">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="affc7-160">可以通过使用从程序集中检索硬编码密码[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六进制编辑器中，或只需打开 Notepad.exe 等文本编辑器中的程序集。</span><span class="sxs-lookup"><span data-stu-id="affc7-160">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="affc7-161">指定的 salt 大小小于 8 字节或迭代次数小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-161">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="affc7-162">密码或 salt 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-162">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * byte[] * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="affc7-163">用于派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-163">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="affc7-164">用于派生密钥的密钥 salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-164">The key salt used to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="affc7-165">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-165">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="affc7-166">通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-166">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="affc7-167">Salt 大小必须为 8 个字节或更大和迭代次数必须是大于零。</span><span class="sxs-lookup"><span data-stu-id="affc7-167">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="affc7-168">建议的最小迭代数为 1000年。</span><span class="sxs-lookup"><span data-stu-id="affc7-168">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="affc7-169">RFC 2898 包括用于创建从密码和 salt 的密钥和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="affc7-169">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="affc7-170">PBKDF2，基于密码的密钥派生函数，可用于派生密钥使用的伪随机函数，允许的长度几乎没有限制，生成的键。</span><span class="sxs-lookup"><span data-stu-id="affc7-170">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="affc7-171"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类可用于生成派生的密钥来自基项和其他参数。</span><span class="sxs-lookup"><span data-stu-id="affc7-171">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="affc7-172">在基于密码的密钥派生函数中，基本密钥是密码和其他参数是 salt 值和迭代次数。</span><span class="sxs-lookup"><span data-stu-id="affc7-172">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="affc7-173">有关 PBKDF2 的详细信息，请参阅 RFC 2898 中，"PKCS #5： 基于密码的 Cryptography Specification Version 2.0 中，"上提供[征求意见文档网站](https://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="affc7-173">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](https://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="affc7-174">有关完整详细信息，请参阅部分 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="affc7-174">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="affc7-175">切勿硬编码在源代码中的密码。</span><span class="sxs-lookup"><span data-stu-id="affc7-175">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="affc7-176">可以通过使用从程序集中检索硬编码密码[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六进制编辑器中，或只需打开 Notepad.exe 等文本编辑器中的程序集。</span><span class="sxs-lookup"><span data-stu-id="affc7-176">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="affc7-177">下面的代码示例使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes>类来创建两个完全相同的密钥<xref:System.Security.Cryptography.TripleDES>类。</span><span class="sxs-lookup"><span data-stu-id="affc7-177">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="affc7-178">然后，它将进行加密和解密使用密钥的某些数据。</span><span class="sxs-lookup"><span data-stu-id="affc7-178">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="affc7-179">指定的 salt 大小小于 8 字节或迭代次数小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-179">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="affc7-180">密码或 salt 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-180">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">
          <span data-ttu-id="affc7-181">加密服务</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-181">Cryptographic Services</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * int * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, saltSize, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="affc7-182">用于派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-182">The password used to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="affc7-183">你希望类生成的随机 salt 的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-183">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="affc7-184">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-184">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="affc7-185">通过使用密码、salt 值和迭代次数派生密钥，初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-185">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt size, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="affc7-186">Salt 大小必须为 8 个字节或更大和迭代次数必须是大于零。</span><span class="sxs-lookup"><span data-stu-id="affc7-186">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="affc7-187">建议的最小迭代数为 1000年。</span><span class="sxs-lookup"><span data-stu-id="affc7-187">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="affc7-188">RFC 2898 包括用于创建从密码和 salt 的密钥和初始化向量 (IV) 的方法。</span><span class="sxs-lookup"><span data-stu-id="affc7-188">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="affc7-189">PBKDF2，基于密码的密钥派生函数，可用于派生密钥使用的伪随机函数，允许的长度几乎没有限制，生成的键。</span><span class="sxs-lookup"><span data-stu-id="affc7-189">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="affc7-190"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类可用于生成派生的密钥来自基项和其他参数。</span><span class="sxs-lookup"><span data-stu-id="affc7-190">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="affc7-191">在基于密码的密钥派生函数中，基本密钥是密码和其他参数是 salt 值和迭代次数。</span><span class="sxs-lookup"><span data-stu-id="affc7-191">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="affc7-192">PBKDF2 的详细信息，请参阅 RFC 2898 中，"PKCS #5： 基于密码的 Cryptography Specification Version 2.0 中，"上提供[征求意见文档网站](https://go.microsoft.com/fwlink/?LinkID=37119)。</span><span class="sxs-lookup"><span data-stu-id="affc7-192">For more information on PBKDF2, see RFC 2898,"PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](https://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="affc7-193">有关完整详细信息，请参阅部分 5.2，"PBKDF2，"。</span><span class="sxs-lookup"><span data-stu-id="affc7-193">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="affc7-194">切勿硬编码在源代码中的密码。</span><span class="sxs-lookup"><span data-stu-id="affc7-194">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="affc7-195">可以通过使用从程序集中检索硬编码密码[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、 使用十六进制编辑器中，或只需打开 Notepad.exe 等文本编辑器中的程序集。</span><span class="sxs-lookup"><span data-stu-id="affc7-195">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="affc7-196">指定的 salt 大小小于 8 字节或迭代次数小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-196">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="affc7-197">密码或 salt 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-197">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="affc7-198">
            <paramref name="iterations" /> 超出范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-198">
              <paramref name="iterations" /> is out of range.</span>
          </span>
          <span data-ttu-id="affc7-199">此参数需要非负数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-199">This parameter requires a non-negative number.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">
          <span data-ttu-id="affc7-200">加密服务</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-200">Cryptographic Services</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : byte[] * byte[] * int * System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations, hashAlgorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="affc7-201">用以派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-201">The password to use to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="affc7-202">用以导出密钥的密钥 salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-202">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="affc7-203">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-203">The number of iterations for the operation.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="affc7-204">用于派生密钥的哈希算法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-204">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="affc7-205">初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例，该实例使用指定的密码、salt、迭代数和哈希算法名称来派生密钥。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-205">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt, number of iterations and the hash algorithm name to derive the key.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="affc7-206">
            <paramref name="saltSize" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-206">
              <paramref name="saltSize" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="affc7-207">
            <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-207">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="affc7-208">哈希算法名称无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-208">Hash algorithm name is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * byte[] * int * System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations, hashAlgorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="affc7-209">用以派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-209">The password to use to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="affc7-210">用以导出密钥的密钥 salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-210">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="affc7-211">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-211">The number of iterations for the operation.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="affc7-212">用于派生密钥的哈希算法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-212">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="affc7-213">初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例，该实例使用指定的密码、salt、迭代数和哈希算法名称来派生密钥。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-213">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt, number of iterations and the hash algorithm name to derive the key.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="affc7-214">
            <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-214">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="affc7-215">哈希算法名称无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-215">Hash algorithm name is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, saltSize, iterations, hashAlgorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="affc7-216">用以派生密钥的密码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-216">The password to use to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="affc7-217">你希望类生成的随机 salt 的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-217">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="affc7-218">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-218">The number of iterations for the operation.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="affc7-219">用于派生密钥的哈希算法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-219">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="affc7-220">初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类的新实例，该实例使用指定的密码、salt 大小、迭代数和哈希算法名称来派生密钥。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-220">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt size, number of iterations and the hash algorithm name to derive the key.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="affc7-221">
            <paramref name="saltSize" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-221">
              <paramref name="saltSize" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="affc7-222">
            <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-222">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="affc7-223">哈希算法名称无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-223">Hash algorithm name is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberSignature Language="F#" Value="member this.CryptDeriveKey : string * string * int * byte[] -&gt; byte[]" Usage="rfc2898DeriveBytes.CryptDeriveKey (algname, alghashname, keySize, rgbIV)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname">
          <span data-ttu-id="affc7-224">为其导出密钥的算法名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-224">The algorithm name for which to derive the key.</span>
          </span>
        </param>
        <param name="alghashname">
          <span data-ttu-id="affc7-225">用于导出密钥的哈希算法名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-225">The hash algorithm name to use to derive the key.</span>
          </span>
        </param>
        <param name="keySize">
          <span data-ttu-id="affc7-226">要导出的密钥的大小（以位为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-226">The size of the key, in bits, to derive.</span>
          </span>
        </param>
        <param name="rgbIV">
          <span data-ttu-id="affc7-227">用于导出密钥的初始化向量 (IV)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-227">The initialization vector (IV) to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="affc7-228">从 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 对象导出加密密钥。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-228">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="affc7-229">导出的密钥。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-229">The derived key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="affc7-230">此函数是加密 API 函数 CryptDeriveKey() 的包装，旨在提供与使用加密 API 的应用程序的互操作性。</span><span class="sxs-lookup"><span data-stu-id="affc7-230">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="affc7-231">如果`keySize`参数设置为 0 位，使用指定的算法的默认密钥大小。</span><span class="sxs-lookup"><span data-stu-id="affc7-231">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="affc7-232">
            <paramref name="keySize" /> 参数不正确。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-232">The <paramref name="keySize" /> parameter is incorrect.</span>
          </span>
          <span data-ttu-id="affc7-233">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-233">-or-</span>
          </span>
          <span data-ttu-id="affc7-234">无法获取加密服务提供程序 (CSP)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-234">The cryptographic service provider (CSP) cannot be acquired.</span>
          </span>
          <span data-ttu-id="affc7-235">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-235">-or-</span>
          </span>
          <span data-ttu-id="affc7-236">
            <paramref name="algname" /> 参数不是有效的算法名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-236">The <paramref name="algname" /> parameter is not a valid algorithm name.</span>
          </span>
          <span data-ttu-id="affc7-237">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-237">-or-</span>
          </span>
          <span data-ttu-id="affc7-238">
            <paramref name="alghashname" /> 参数不是有效的哈希算法名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-238">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="rfc2898DeriveBytes.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="affc7-239">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-239">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="affc7-240">释放 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 类使用的非托管资源，并可以选择释放托管资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-240">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="affc7-241">调用此方法由公共`Dispose()`方法和`Finalize`方法。</span><span class="sxs-lookup"><span data-stu-id="affc7-241">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="affc7-242">`Dispose()` 调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="affc7-242">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="affc7-243">`Finalize` 调用`Dispose`与`disposing`设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="affc7-243">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="affc7-244">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="affc7-244">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.Rfc2898DeriveBytes> references.</span></span> <span data-ttu-id="affc7-245">此方法调用每个引用对象的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="affc7-245">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="affc7-246">
              <see langword="Dispose" /> 可以由其他对象多次调用。</span>
            <span class="sxs-lookup">
              <span data-stu-id="affc7-246">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="affc7-247">重写时<see langword="Dispose(Boolean)" />，请小心不要引用在早期调用之前释放对象<see langword="Dispose" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="affc7-247">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="affc7-248">有关如何实现详细信息<see langword="Dispose(Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="affc7-248">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="affc7-249">有关详细信息<see langword="Dispose" />并<see langword="Finalize" />，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="affc7-249">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : int -&gt; byte[]" Usage="rfc2898DeriveBytes.GetBytes cb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb">
          <span data-ttu-id="affc7-250">要生成的伪随机密钥字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-250">The number of pseudo-random key bytes to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="affc7-251">返回此对象的伪随机密钥。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-251">Returns the pseudo-random key for this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="affc7-252">由伪随机密钥字节组成的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-252">A byte array filled with pseudo-random key bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="affc7-253"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类使用基于的伪随机数生成器实现 PBKDF2 功能<xref:System.Security.Cryptography.HMACSHA1>。</span><span class="sxs-lookup"><span data-stu-id="affc7-253">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class implements PBKDF2 functionality by using a pseudorandom number generator based on <xref:System.Security.Cryptography.HMACSHA1>.</span></span> <span data-ttu-id="affc7-254"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>类用于提取密码、 salt 值和迭代次数，并再生成密钥对的调用通过<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="affc7-254">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span> <span data-ttu-id="affc7-255">重复的调用此方法将不会生成相同的密钥;相反，追加的两个调用<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法替换`cb`的参数值`20`等效于调用<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法一次与`cb`的参数值`40`。</span><span class="sxs-lookup"><span data-stu-id="affc7-255">Repeated calls to this method will not generate the same key; instead, appending two calls of the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method with a `cb` parameter value of `20` is the equivalent of calling the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method once with a `cb` parameter value of `40`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="affc7-256">下面的示例演示如何使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法以获取实例键<xref:System.Security.Cryptography.Rfc2898DeriveBytes>。</span><span class="sxs-lookup"><span data-stu-id="affc7-256">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method to get the key for an instance of <xref:System.Security.Cryptography.Rfc2898DeriveBytes>.</span></span> <span data-ttu-id="affc7-257">此代码示例是为提供一个更大示例的一部分<xref:System.Security.Cryptography.Rfc2898DeriveBytes>类。</span><span class="sxs-lookup"><span data-stu-id="affc7-257">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#2](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#2)]
 [!code-csharp[rfc28981#2](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#2)]
 [!code-vb[rfc28981#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="affc7-258">
            <paramref name="cb" /> 超出范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-258">
              <paramref name="cb" /> is out of range.</span>
          </span>
          <span data-ttu-id="affc7-259">此参数需要非负数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-259">This parameter requires a non-negative number.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">
          <span data-ttu-id="affc7-260">加密服务</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-260">Cryptographic Services</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.HashAlgorithmName HashAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.HashAlgorithmName HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HashAlgorithm As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::HashAlgorithmName HashAlgorithm { System::Security::Cryptography::HashAlgorithmName get(); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithm : System.Security.Cryptography.HashAlgorithmName" Usage="System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IterationCount : int with get, set" Usage="System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="affc7-261">获取或设置操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-261">Gets or sets the number of iterations for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="affc7-262">操作的迭代数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-262">The number of iterations for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="affc7-263">迭代次数是执行操作的次数。</span><span class="sxs-lookup"><span data-stu-id="affc7-263">Iteration count is the number of times an operation is performed.</span></span> <span data-ttu-id="affc7-264">对于此方法的计数应是大于零。</span><span class="sxs-lookup"><span data-stu-id="affc7-264">For this method, the count should be greater than zero.</span></span> <span data-ttu-id="affc7-265">建议的最小迭代数为 1000年。</span><span class="sxs-lookup"><span data-stu-id="affc7-265">The minimum recommended number of iterations is 1000.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="affc7-266">下面的示例演示如何使用<xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A>属性来显示使用中生成密钥的迭代次数。</span><span class="sxs-lookup"><span data-stu-id="affc7-266">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A> property to display the number of iterations used in the generation of the key.</span></span> <span data-ttu-id="affc7-267">此代码示例是为提供一个更大示例的一部分<xref:System.Security.Cryptography.Rfc2898DeriveBytes>类。</span><span class="sxs-lookup"><span data-stu-id="affc7-267">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#3](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#3)]
 [!code-csharp[rfc28981#3](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#3)]
 [!code-vb[rfc28981#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="affc7-268">迭代次数小于 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-268">The number of iterations is less than 1.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">
          <span data-ttu-id="affc7-269">加密服务</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-269">Cryptographic Services</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="rfc2898DeriveBytes.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="affc7-270">重置操作的状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-270">Resets the state of the operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="affc7-271">如果修改 salt 或迭代计数，会自动调用此方法。</span><span class="sxs-lookup"><span data-stu-id="affc7-271">This method is automatically called if the salt or iteration count is modified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="affc7-272">下面的示例显示如何使用 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="affc7-272">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> method.</span></span> <span data-ttu-id="affc7-273">此代码示例是为提供一个更大示例的一部分<xref:System.Security.Cryptography.Rfc2898DeriveBytes>类。</span><span class="sxs-lookup"><span data-stu-id="affc7-273">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#5](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#5)]
 [!code-csharp[rfc28981#5](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#5)]
 [!code-vb[rfc28981#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">
          <span data-ttu-id="affc7-274">加密服务</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-274">Cryptographic Services</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Salt : byte[] with get, set" Usage="System.Security.Cryptography.Rfc2898DeriveBytes.Salt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="affc7-275">获取或设置操作的密钥 salt 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-275">Gets or sets the key salt value for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="affc7-276">操作的密钥 salt 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-276">The key salt value for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="affc7-277">Salt，一组随机字节，用于使未经授权的消息更难解密。</span><span class="sxs-lookup"><span data-stu-id="affc7-277">Salt, a random set of bytes, is used to make unauthorized decrypting of a message more difficult.</span></span> <span data-ttu-id="affc7-278">字典攻击是一种攻击，攻击者试图通过比较以前计算的加密值的最可能的密钥的加密的值解密已加密的邮件。</span><span class="sxs-lookup"><span data-stu-id="affc7-278">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="affc7-279">这种攻击是通过要困难得多的 salt，或随机字节，末尾的密码，然后密钥派生简介。</span><span class="sxs-lookup"><span data-stu-id="affc7-279">This attack is made much more difficult by the introduction of salt, or random bytes, at the end of the password before the key derivation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="affc7-280">指定的 salt 大小小于 8 字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-280">The specified salt size is smaller than 8 bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="affc7-281">salt 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-281">The salt is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">
          <span data-ttu-id="affc7-282">加密服务</span>
          <span class="sxs-lookup">
            <span data-stu-id="affc7-282">Cryptographic Services</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>