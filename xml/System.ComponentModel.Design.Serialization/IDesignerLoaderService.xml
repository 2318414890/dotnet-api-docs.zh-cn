<Type Name="IDesignerLoaderService" FullName="System.ComponentModel.Design.Serialization.IDesignerLoaderService">
  <TypeSignature Language="C#" Value="public interface IDesignerLoaderService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDesignerLoaderService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDesignerLoaderService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDesignerLoaderService" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="29baf-101">提供一个接口，该接口可以扩展设计器加载程序以支持外部组件的异步加载。</span><span class="sxs-lookup"><span data-stu-id="29baf-101">Provides an interface that can extend a designer loader to support asynchronous loading of external components.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29baf-102">A<xref:System.ComponentModel.Design.Serialization.DesignerLoader>可以实现此接口可管理涉及外部组件的设计器加载。</span><span class="sxs-lookup"><span data-stu-id="29baf-102">A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this interface to manage designer loading that involves external components.</span></span> <span data-ttu-id="29baf-103">此接口还允许外部组件调用启动的设计图面重新加载<xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>。</span><span class="sxs-lookup"><span data-stu-id="29baf-103">This interface also allows external components to initiate a reload of the design surface by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>.</span></span> <span data-ttu-id="29baf-104">设计器加载程序不需要实现此接口，如果不需要异步加载支持。</span><span class="sxs-lookup"><span data-stu-id="29baf-104">A designer loader does not have to implement this interface if it does not require support for asynchronous loading.</span></span>  
  
 <span data-ttu-id="29baf-105">设计器加载使用的自定义实现<xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService>可以出现各种不同的方式。</span><span class="sxs-lookup"><span data-stu-id="29baf-105">Designer loading using a custom implementation of the <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> can occur in a variety of ways.</span></span> <span data-ttu-id="29baf-106">在加载过程中涉及有时外部组件。</span><span class="sxs-lookup"><span data-stu-id="29baf-106">Sometimes external components are involved in the loading process.</span></span> <span data-ttu-id="29baf-107">为了便于加载具有外部依赖项，设计器加载程序服务接口提供了一种机制，确定何时加载已完成，并允许负载，以指示它已完成的每个部分。</span><span class="sxs-lookup"><span data-stu-id="29baf-107">To facilitate loading with external dependencies, the designer loader service interface provides a mechanism that determines when loading is complete and allows each portion of loading to signal that it has completed.</span></span> <span data-ttu-id="29baf-108"><xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService>通常用于确定加载时通过测试的计数器，用于跟踪剩余的负载依赖关系的数量已完成。</span><span class="sxs-lookup"><span data-stu-id="29baf-108">The <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining.</span></span> <span data-ttu-id="29baf-109">完成的负载每个部分后，<xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A>调用时，同时服务递减计数器。</span><span class="sxs-lookup"><span data-stu-id="29baf-109">When each portion of the load completes, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called, and the service decrements the counter.</span></span> <span data-ttu-id="29baf-110">若要设置依赖加载进程的数量，请调用<xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>一次针对调用每个负载进程<xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A>其加载过程何时完成。</span><span class="sxs-lookup"><span data-stu-id="29baf-110">To set the number of dependent load processes, call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each load process that calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> when its loading is complete.</span></span> <span data-ttu-id="29baf-111">最终加载完成时，服务调用<xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A>加载程序主机上。</span><span class="sxs-lookup"><span data-stu-id="29baf-111">When the final loading is complete, the service calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> on the loader host.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddLoadDependency">
      <MemberSignature Language="C#" Value="public void AddLoadDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLoadDependency() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLoadDependency ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLoadDependency();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29baf-112">将外部组件注册为由此接口管理的加载进程的一部分。</span><span class="sxs-lookup"><span data-stu-id="29baf-112">Registers an external component as part of the load process managed by this interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29baf-113">调用<xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>一次针对每个参与加载过程的外部对象。</span><span class="sxs-lookup"><span data-stu-id="29baf-113">Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each external object participating in the load process.</span></span> <span data-ttu-id="29baf-114"><xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> 加载过程的工作都完成时调用。</span><span class="sxs-lookup"><span data-stu-id="29baf-114"><xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called when the work of the load process is done.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DependentLoadComplete">
      <MemberSignature Language="C#" Value="public void DependentLoadComplete (bool successful, System.Collections.ICollection errorCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DependentLoadComplete(bool successful, class System.Collections.ICollection errorCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DependentLoadComplete (successful As Boolean, errorCollection As ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DependentLoadComplete(bool successful, System::Collections::ICollection ^ errorCollection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="successful" Type="System.Boolean" />
        <Parameter Name="errorCollection" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="successful">
          <span data-ttu-id="29baf-115">如果设计器的加载成功，则为 <see langword="true" />；如果出现的错误阻止了加载完成，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29baf-115"><see langword="true" /> if the load of the designer is successful; <see langword="false" /> if errors prevented the load from finishing.</span></span></param>
        <param name="errorCollection"><span data-ttu-id="29baf-116">加载期间发生的错误（如果有的话）的集合。</span><span class="sxs-lookup"><span data-stu-id="29baf-116">A collection of errors that occurred during the load, if any.</span></span> <span data-ttu-id="29baf-117">如果没有发生任何错误，则传递空集合或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="29baf-117">If no errors occurred, pass either an empty collection or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="29baf-118">发出信号表示已完成依赖加载。</span><span class="sxs-lookup"><span data-stu-id="29baf-118">Signals that a dependent load has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29baf-119">调用此方法以发出信号依赖加载操作已完成。</span><span class="sxs-lookup"><span data-stu-id="29baf-119">This method is called to signal that a dependent loading operation has completed.</span></span> <span data-ttu-id="29baf-120">调用<xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A>一次为每个进程都已由调用注册<xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>，已完成的。</span><span class="sxs-lookup"><span data-stu-id="29baf-120">Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> once for every process that was registered by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, which has already completed.</span></span>  
  
 <span data-ttu-id="29baf-121">如果依赖加载成功，调用方集`successful`参数`true`并传递空集合或`null`到`errorCollection`参数。</span><span class="sxs-lookup"><span data-stu-id="29baf-121">If the dependent load succeeds, the caller sets the `successful` parameter to `true` and passes either an empty collection or `null` to the `errorCollection` parameter.</span></span> <span data-ttu-id="29baf-122">如果依赖加载遇到错误，调用方将设置`successful`参数`false`并将传递的指示或多个与失败的原因的异常集合`errorCollection`参数。</span><span class="sxs-lookup"><span data-stu-id="29baf-122">If the dependent load encounters errors, the caller sets the `successful` parameter to `false` and passes a collection of exceptions that indicate the reason or reasons for failure to the `errorCollection` parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reload">
      <MemberSignature Language="C#" Value="public bool Reload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Reload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload" />
      <MemberSignature Language="VB.NET" Value="Public Function Reload () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reload();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29baf-123">重新加载设计文档。</span><span class="sxs-lookup"><span data-stu-id="29baf-123">Reloads the design document.</span></span></summary>
        <returns>
          <span data-ttu-id="29baf-124">如果接受重新加载请求，则为 <see langword="true" />；如果加载程序不允许重新加载，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29baf-124"><see langword="true" /> if the reload request is accepted, or <see langword="false" /> if the loader does not allow the reload.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29baf-125">任何对象都可以调用此方法来请求，加载程序重新加载设计文档。</span><span class="sxs-lookup"><span data-stu-id="29baf-125">Any object can call this method to request that the loader reload the design document.</span></span> <span data-ttu-id="29baf-126">如果加载程序支持重新加载并执行重新加载，则设计器加载程序可以返回`true`。</span><span class="sxs-lookup"><span data-stu-id="29baf-126">If the loader supports reloading and complies with the reload, the designer loader can return `true`.</span></span> <span data-ttu-id="29baf-127">否则，它将返回`false`，指示将不会发生重新加载。</span><span class="sxs-lookup"><span data-stu-id="29baf-127">Otherwise, it returns `false`, indicating that the reload will not occur.</span></span> <span data-ttu-id="29baf-128">调用方不能依赖立即; 发生重新加载设计器加载程序可以计划这段时间，或它可以尝试重新加载一次。</span><span class="sxs-lookup"><span data-stu-id="29baf-128">Callers cannot rely on the reload happening immediately; the designer loader can schedule this for some other time, or it can try to reload at once.</span></span>  
  
 <span data-ttu-id="29baf-129">如果无法重新加载设计器，调用方可以向用户显示一条消息。</span><span class="sxs-lookup"><span data-stu-id="29baf-129">The caller can display a message to the user if the designer cannot be reloaded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>