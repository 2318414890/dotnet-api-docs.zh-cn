<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ContextStack.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ee39372e13e8e5c6bb6ac16568007f4114539221.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee39372e13e8e5c6bb6ac16568007f4114539221</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>Provides a stack object that can be used by a serializer to make information available to nested serializers.</source>
          <target state="translated">提供堆栈对象，序列化程序可使用该对象向嵌套的序列化程序提供信息。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>Some serializers require information about the context of an object to correctly persist their state.</source>
          <target state="translated">部分序列化程序需要有关对象的上下文的信息，以便正确地保留其状态。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;</ph> class enables a serializer to set data about the context of an object that is being serialized to a stack where another serializer can access it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;</ph>类使序列化程序将正在序列化的对象的上下文相关的数据设置为堆栈另一个序列化程序可以访问的位置。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>The value of the <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context%2A&gt;</ph> property is provided by an <ph id="ph2">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager&gt;</ph> to share information of use to some serializers.</source>
          <target state="translated">值<ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context%2A&gt;</ph>提供属性<ph id="ph2">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager&gt;</ph>共享的部分序列化程序使用的信息。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>A context stack is useful because the process of serializing a design document can be deeply nested, and objects at each level of nesting may require context information to correctly persist the state of the object.</source>
          <target state="translated">上下文堆栈很有用，因为可以深嵌套的序列化设计文档的过程，并且每个级别的嵌套的对象可能需要上下文信息，以便正确地保留对象的状态。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>A serializer can set a context object to the stack before invoking a nested serializer.</source>
          <target state="translated">序列化程序可以在调用嵌套的序列化程序之前将上下文对象设置为堆栈。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>Each object set to the stack should be removed by the serializer that set it after a call to a nested serializer returns.</source>
          <target state="translated">设置堆栈为每个对象应序列化程序，以对嵌套的序列化程序的调用返回之后将其删除。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>Typically, the objects on the stack contain information about the context of the current object that is being serialized.</source>
          <target state="translated">通常，在堆栈上的对象包含当前正在序列化的对象有关的上下文信息。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>A parent serializer adds context information to the stack about the next object to be serialized, calls an appropriate serializer and, when the serializer finishes executing on the object, removes the context information from the stack.</source>
          <target state="translated">父序列化程序将上下文信息添加到下一个要进行序列化的对象有关堆栈、 调用适当的序列化程序和序列化程序完成执行的对象上时的上下文信息从堆栈中移除。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>It is up to the implementation of each serializer to determine what objects get pushed on this stack.</source>
          <target state="translated">负责每个序列化程序，以确定哪些对象获取在此堆栈上推送的实现。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>As an example, an object with a property named <ph id="ph1">`Enabled`</ph> has a data type of <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">例如，具有属性的对象名为<ph id="ph1">`Enabled`</ph>具有数据类型的<ph id="ph2">&lt;xref:System.Boolean&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>If a serializer writes this value to a data stream, it might need to include the context or type of property it is writing.</source>
          <target state="translated">如果序列化程序将此值写入数据流，它可能需要包括上下文或正在写入的属性的类型。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>The serializer does not have this information, however, because it is only instructed to write the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value.</source>
          <target state="translated">序列化程序不具有此信息，但是，因为它仅指示要写入<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>值。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>To provide this information to the serializer, the parent serializer can push a <ph id="ph1">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph> that points to the <ph id="ph2">`Enabled`</ph> property on the context stack.</source>
          <target state="translated">若要对序列化程序中提供此信息，父序列化程序可以将推送<ph id="ph1">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph>指向<ph id="ph2">`Enabled`</ph>上下文堆栈上的属性。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>The following code example demonstrates using a <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;</ph> to push and then remove 10 values.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;</ph>推送，然后删除 10 个值。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>for full access to system resources.</source>
          <target state="translated">对系统资源的完全访问权限。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>Demand values: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>.</source>
          <target state="translated">要求值： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>， <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>Associated state:</source>
          <target state="translated">关联的状态：</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
          <source>The following code example demonstrates creating a <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;</ph> instance.</source>
          <target state="translated">下面的代码示例演示如何创建<ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;</ph>实例。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
          <source>A context object to append to the stack.</source>
          <target state="translated">要追加到堆栈中的上下文对象。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
          <source>Appends an object to the end of the stack, rather than pushing it onto the top of the stack.</source>
          <target state="translated">将对象追加到堆栈的结尾，而不是将其推到堆栈的顶部。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
          <source>This method allows a serializer to communicate with other serializers by adding contextual data objects that do not have to be removed in order.</source>
          <target state="translated">此方法允许序列化程序才能通过添加不需要按顺序移除的上下文数据对象与其他序列化程序进行通信。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
          <source>There is no way to remove an object that was appended to the end of the stack without removing all other objects.</source>
          <target state="translated">没有方法来删除已追加到堆栈的末尾，而不删除所有其他对象的对象。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
          <source><ph id="ph1">&lt;paramref name="context" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="context" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
          <source>Gets the current object on the stack.</source>
          <target state="translated">获取堆栈上的当前对象。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
          <source>The current object on the stack, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no objects were pushed.</source>
          <target state="translated">堆栈上的当前对象，或者如果未推入任何对象则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
          <source>The current object is the object at the top of the stack, or the object last added to the stack.</source>
          <target state="translated">当前对象是在堆栈上，顶部的对象或上一次添加到堆栈的对象。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.Serialization.ContextStack">
          <source>Gets or sets the object on the stack at the specified level.</source>
          <target state="translated">获取或设置堆栈上指定级别的对象。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
          <source>The level of the object to retrieve on the stack.</source>
          <target state="translated">要在堆栈上检索的对象的级别。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
          <source>Level 0 is the top of the stack, level 1 is the next down, and so on.</source>
          <target state="translated">级别 0 是堆栈的顶级，级别 1 是接下来的一级，依次类推。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
          <source>This level must be 0 or greater.</source>
          <target state="translated">此级别必须大于或等于 0。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
          <source>If level is greater than the number of levels on the stack, it returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果级别大于该堆栈上的级别数，它返回 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
          <source>Gets the object on the stack at the specified level.</source>
          <target state="translated">获取堆栈上指定级别的对象。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
          <source>The object on the stack at the specified level, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no object exists at that level.</source>
          <target state="translated">堆栈上指定级别的对象，或者在该级别不存在任何对象则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="level" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="level" /&gt;</ph> 小于 0。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
          <source>A type to retrieve from the context stack.</source>
          <target state="translated">要从上下文堆栈检索的类型。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
          <source>Gets the first object on the stack that inherits from or implements the specified type.</source>
          <target state="translated">获取堆栈上从指定类型继承或者实现指定类型的第一个对象。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
          <source>The first object on the stack that inherits from or implements the specified type, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no object on the stack implements the type.</source>
          <target state="translated">堆栈上从指定类型继承或者实现指定类型的第一个对象，或者如果在堆栈上没有任何对象实现此类型则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
          <source>A check is made on each level of the stack, searching for an object that implements or inherits <ph id="ph1">`type`</ph>.</source>
          <target state="translated">在堆栈上，搜索实现或继承的对象的每个级别上进行检查<ph id="ph1">`type`</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
          <source>If a match is found, it is returned.</source>
          <target state="translated">如果找到匹配项，则它将返回。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
          <source>Removes the current object off of the stack, returning its value.</source>
          <target state="translated">从堆栈中移除当前对象并返回其值。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
          <source>The object removed from the stack; <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no objects are on the stack.</source>
          <target state="translated">已从堆栈中移除的对象；如果堆栈中没有对象，则返回 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
          <source>The following code example demonstrates removing a value from a <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;</ph>.</source>
          <target state="translated">下面的代码示例演示了如何移除中的值<ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
          <source>The context object to push onto the stack.</source>
          <target state="translated">推入到堆栈上的上下文对象。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
          <source>Pushes, or places, the specified object onto the stack.</source>
          <target state="translated">将指定对象推入（即放置）到堆栈上。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
          <source>The following code example demonstrates pushing values to a <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;</ph>.</source>
          <target state="translated">下面的代码示例演示对推入值<ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
          <source><ph id="ph1">&lt;paramref name="context" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="context" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>