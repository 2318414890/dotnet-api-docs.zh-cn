<Type Name="TypeCodeDomSerializer" FullName="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
  <TypeSignature Language="C#" Value="public class TypeCodeDomSerializer : System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeCodeDomSerializer extends System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeCodeDomSerializer&#xA;Inherits CodeDomSerializerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeCodeDomSerializer : System::ComponentModel::Design::Serialization::CodeDomSerializerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.Serialization.CodeDomSerializerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DefaultSerializationProvider(typeof(System.ComponentModel.Design.Serialization.CodeDomSerializationProvider))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="16e73-101">将对象序列化为新类型。</span><span class="sxs-lookup"><span data-stu-id="16e73-101">Serializes an object to a new type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16e73-102"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>类执行与相同的任务<xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>，但通过此类将对象序列化为定义新类型。</span><span class="sxs-lookup"><span data-stu-id="16e73-102">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> class performs the same tasks as a <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>, but serializing an object through this class defines a new type.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeCodeDomSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCodeDomSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="16e73-103">初始化 <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="16e73-103">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual object Deserialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deserialize (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Deserialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="16e73-104">用于序列化的序列化管理器。</span><span class="sxs-lookup"><span data-stu-id="16e73-104">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="16e73-105">用于序列化的类型声明。</span><span class="sxs-lookup"><span data-stu-id="16e73-105">Type declaration to use for serialization.</span></span></param>
        <summary><span data-ttu-id="16e73-106">将给定类型声明反序列化。</span><span class="sxs-lookup"><span data-stu-id="16e73-106">Deserializes the given type declaration.</span></span></summary>
        <returns><span data-ttu-id="16e73-107">根对象。</span><span class="sxs-lookup"><span data-stu-id="16e73-107">The root object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16e73-108"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A>方法反序列化之前序列化的代码类型声明。</span><span class="sxs-lookup"><span data-stu-id="16e73-108">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method deserializes a previously serialized code type declaration.</span></span> <span data-ttu-id="16e73-109">下表显示任务的默认实现将执行。</span><span class="sxs-lookup"><span data-stu-id="16e73-109">The following table shows the tasks default implementation performs.</span></span>  
  
|<span data-ttu-id="16e73-110">任务</span><span class="sxs-lookup"><span data-stu-id="16e73-110">Task</span></span>|<span data-ttu-id="16e73-111">描述</span><span class="sxs-lookup"><span data-stu-id="16e73-111">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="16e73-112">大小写区分功能检查</span><span class="sxs-lookup"><span data-stu-id="16e73-112">Case Sensitivity Checks</span></span>|<span data-ttu-id="16e73-113">该实现搜索<xref:System.CodeDom.Compiler.CodeDomProvider>服务以确定是否它应将成员视为区分大小写或区分大小写。</span><span class="sxs-lookup"><span data-stu-id="16e73-113">The implementation searches for a <xref:System.CodeDom.Compiler.CodeDomProvider> service to decide if it should treat members as case sensitive or case insensitive.</span></span>|  
|<span data-ttu-id="16e73-114">语句排序</span><span class="sxs-lookup"><span data-stu-id="16e73-114">Statement Sorting</span></span>|<span data-ttu-id="16e73-115">所有成员变量和 init 方法中的局部变量都存储在表中。</span><span class="sxs-lookup"><span data-stu-id="16e73-115">All member variables and local variables from init methods are stored in a table.</span></span> <span data-ttu-id="16e73-116">然后，init 方法中的每个语句添加到组合根据其左侧，因此，分配或操作的特定变量上的所有语句都分组在该变量下语句集合。</span><span class="sxs-lookup"><span data-stu-id="16e73-116">Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</span></span> <span data-ttu-id="16e73-117">没有语句的变量将被丢弃。</span><span class="sxs-lookup"><span data-stu-id="16e73-117">Variables that have no statements are discarded.</span></span>|  
|<span data-ttu-id="16e73-118">反序列化</span><span class="sxs-lookup"><span data-stu-id="16e73-118">Deserialization</span></span>|<span data-ttu-id="16e73-119">每个变量的语句集合将根据该变量的反序列化。</span><span class="sxs-lookup"><span data-stu-id="16e73-119">The statement collections for each variable are deserialized according to the variable.</span></span>|  
  
 <span data-ttu-id="16e73-120">下表显示了的服务<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A>方法需要。</span><span class="sxs-lookup"><span data-stu-id="16e73-120">The following table shows the services the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method requires.</span></span>  
  
|<span data-ttu-id="16e73-121">服务</span><span class="sxs-lookup"><span data-stu-id="16e73-121">Service</span></span>|<span data-ttu-id="16e73-122">描述</span><span class="sxs-lookup"><span data-stu-id="16e73-122">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.CodeDom.Compiler.CodeDomProvider>|<span data-ttu-id="16e73-123">虽然并非绝对必需的该服务，如果可用，用于确定序列化应区分大小写或区分大小写。</span><span class="sxs-lookup"><span data-stu-id="16e73-123">While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.</span></span>|  
|<xref:System.ComponentModel.IContainer>|<span data-ttu-id="16e73-124">如果对象不存在名称表中的查询反序列化期间<xref:System.ComponentModel.IContainer>进行。</span><span class="sxs-lookup"><span data-stu-id="16e73-124">If an object does not exist in the name table during deserialization, a query for <xref:System.ComponentModel.IContainer> is made.</span></span> <span data-ttu-id="16e73-125">如果成功执行此查询，容器是针对的对象检查。</span><span class="sxs-lookup"><span data-stu-id="16e73-125">If this query succeeds, the container is checked for the object.</span></span> <span data-ttu-id="16e73-126">容器还用作一种替代物的组件需要的任何容器自变量。</span><span class="sxs-lookup"><span data-stu-id="16e73-126">The container is also used as a stand-in for any container argument needed by components.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16e73-127"><paramref name="manager" /> 或 <paramref name="typeDecl" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="16e73-127"><paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethod">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod GetInitializeMethod (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod GetInitializeMethod(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethod (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration, value As Object) As CodeMemberMethod" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::CodeDom::CodeMemberMethod ^ GetInitializeMethod(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="16e73-128">用于序列化的序列化管理器。</span><span class="sxs-lookup"><span data-stu-id="16e73-128">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="16e73-129">用于序列化的类型声明。</span><span class="sxs-lookup"><span data-stu-id="16e73-129">The type declaration to use for serialization.</span></span></param>
        <param name="value"><span data-ttu-id="16e73-130">用于序列化的值。</span><span class="sxs-lookup"><span data-stu-id="16e73-130">The value to use for serialization.</span></span></param>
        <summary><span data-ttu-id="16e73-131">返回存储用于序列化成员的语句的方法。</span><span class="sxs-lookup"><span data-stu-id="16e73-131">Returns the method where statements used to serialize a member are stored.</span></span></summary>
        <returns><span data-ttu-id="16e73-132">用于为给定成员发出所有初始化代码的方法。</span><span class="sxs-lookup"><span data-stu-id="16e73-132">The method used to emit all of the initialization code for the given member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16e73-133"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>方法返回为给定成员发出所有初始化代码的方法。</span><span class="sxs-lookup"><span data-stu-id="16e73-133">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> method returns the method to emit all of the initialization code for the given member.</span></span> <span data-ttu-id="16e73-134">默认实现返回一个空构造函数。</span><span class="sxs-lookup"><span data-stu-id="16e73-134">The default implementation returns an empty constructor.</span></span> <span data-ttu-id="16e73-135">如果相同的方法是为多个值返回，则将返回该方法的同一个实例。</span><span class="sxs-lookup"><span data-stu-id="16e73-135">If the same method is to be returned for multiple values, the same instance of the method should be returned.</span></span> <span data-ttu-id="16e73-136">你可以使用<xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType>字典记住所创建的方法。</span><span class="sxs-lookup"><span data-stu-id="16e73-136">You can use the <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> dictionary to remember methods you have created.</span></span> <span data-ttu-id="16e73-137">`typeDecl`还可以使用参数来添加基础结构方法。</span><span class="sxs-lookup"><span data-stu-id="16e73-137">The `typeDecl` parameter can also be used to add infrastructure methods.</span></span> <span data-ttu-id="16e73-138">例如，如果你想要发出的每个对象单独的方法，你将需要反过来调用所有这些方法的单个方法。</span><span class="sxs-lookup"><span data-stu-id="16e73-138">For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</span></span> <span data-ttu-id="16e73-139">此方法可以添加到根据需要的代码类型声明。</span><span class="sxs-lookup"><span data-stu-id="16e73-139">This method can be added to the code type declaration as needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16e73-140"><paramref name="manager" />、<paramref name="typeDecl" /> 或 <paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="16e73-140"><paramref name="manager" />, <paramref name="typeDecl" />, or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethods">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod[] GetInitializeMethods (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod[] GetInitializeMethods(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethods (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As CodeMemberMethod()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::CodeDom::CodeMemberMethod ^&gt; ^ GetInitializeMethods(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="16e73-141">用于序列化的序列化管理器。</span><span class="sxs-lookup"><span data-stu-id="16e73-141">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="16e73-142">用于序列化的类型声明。</span><span class="sxs-lookup"><span data-stu-id="16e73-142">The type declaration to use for serialization.</span></span></param>
        <summary><span data-ttu-id="16e73-143">返回要在反序列化期间解释的方法数组。</span><span class="sxs-lookup"><span data-stu-id="16e73-143">Returns an array of methods to be interpreted during deserialization.</span></span></summary>
        <returns><span data-ttu-id="16e73-144">要在反序列化期间解释的方法的 <see cref="T:System.CodeDom.CodeMemberMethod" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="16e73-144">A <see cref="T:System.CodeDom.CodeMemberMethod" /> array of methods to be interpreted during deserialization.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16e73-145">默认实现返回在其中使用构造函数的单个元素数组。</span><span class="sxs-lookup"><span data-stu-id="16e73-145">The default implementation returns a single-element array with the constructor in it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16e73-146"><paramref name="manager" /> 或 <paramref name="typeDecl" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="16e73-146"><paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeTypeDeclaration Serialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, System.Collections.ICollection members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration Serialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, class System.Collections.ICollection members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Serialize (manager As IDesignerSerializationManager, root As Object, members As ICollection) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeTypeDeclaration ^ Serialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::Object ^ root, System::Collections::ICollection ^ members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="root" Type="System.Object" />
        <Parameter Name="members" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="16e73-147">用于序列化的序列化管理器。</span><span class="sxs-lookup"><span data-stu-id="16e73-147">The serialization manager to use for serialization.</span></span></param>
        <param name="root"><span data-ttu-id="16e73-148">要序列化的对象。</span><span class="sxs-lookup"><span data-stu-id="16e73-148">The object to serialize.</span></span></param>
        <param name="members"><span data-ttu-id="16e73-149">可选的成员集合。</span><span class="sxs-lookup"><span data-stu-id="16e73-149">Optional collection of members.</span></span> <span data-ttu-id="16e73-150">可以为 <see langword="null" /> 或空。</span><span class="sxs-lookup"><span data-stu-id="16e73-150">Can be <see langword="null" /> or empty.</span></span></param>
        <summary><span data-ttu-id="16e73-151">通过创建定义根的新类型声明将对象根序列化。</span><span class="sxs-lookup"><span data-stu-id="16e73-151">Serializes the object root by creating a new type declaration that defines root.</span></span></summary>
        <returns><span data-ttu-id="16e73-152">定义根对象的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</span><span class="sxs-lookup"><span data-stu-id="16e73-152">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that defines the root object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16e73-153"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法序列化的给定的根对象和可选的成员，以创建新的类型定义的集合。</span><span class="sxs-lookup"><span data-stu-id="16e73-153">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method serializes the given root object and optional collection of members to create a new type definition.</span></span> <span data-ttu-id="16e73-154">如果`members`集合包含值，这些值进行序列化。</span><span class="sxs-lookup"><span data-stu-id="16e73-154">If the `members` collection contains values, these values are serialized.</span></span> <span data-ttu-id="16e73-155">值本身可能序列化作为成员变量或局部变量。</span><span class="sxs-lookup"><span data-stu-id="16e73-155">Values themselves may serialize as either member variables or local variables.</span></span> <span data-ttu-id="16e73-156">此决定由调用的对象的扩展程序属性搜索`GenerateMember`。</span><span class="sxs-lookup"><span data-stu-id="16e73-156">This determination is done by searching for an extender property on the object called `GenerateMember`.</span></span> <span data-ttu-id="16e73-157">如果`true`，则生成成员。</span><span class="sxs-lookup"><span data-stu-id="16e73-157">If `true`, a member is generated.</span></span> <span data-ttu-id="16e73-158">否则，将生成的本地变量。</span><span class="sxs-lookup"><span data-stu-id="16e73-158">Otherwise, a local variable is generated.</span></span> <span data-ttu-id="16e73-159">为方便起见，`members`集合可以包含的根对象。</span><span class="sxs-lookup"><span data-stu-id="16e73-159">For convenience, the `members` collection can contain the root object.</span></span> <span data-ttu-id="16e73-160">在这种情况下，根对象是不还添加为成员或本地变量中。</span><span class="sxs-lookup"><span data-stu-id="16e73-160">In this case, the root object is not also added as a member or local variable.</span></span>  
  
 <span data-ttu-id="16e73-161">返回类型的名称取自根对象的名称，如果它是已命名的对象。</span><span class="sxs-lookup"><span data-stu-id="16e73-161">The name of the returned type is taken from the root object’s name, if it was a named object.</span></span> <span data-ttu-id="16e73-162">如果没有，则名称会生成根类的简单类型名称。</span><span class="sxs-lookup"><span data-stu-id="16e73-162">If not, a name is fabricated from the simple type name of the root class.</span></span>  
  
 <span data-ttu-id="16e73-163">下表显示的默认实现所执行的任务<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="16e73-163">The following table shows the tasks performed by the default implementation of the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method.</span></span>  
  
|<span data-ttu-id="16e73-164">任务</span><span class="sxs-lookup"><span data-stu-id="16e73-164">Task</span></span>|<span data-ttu-id="16e73-165">描述</span><span class="sxs-lookup"><span data-stu-id="16e73-165">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="16e73-166">种子设定的上下文</span><span class="sxs-lookup"><span data-stu-id="16e73-166">Context Seeding</span></span>|<span data-ttu-id="16e73-167">使用数据，包括初始化序列化上下文<xref:System.ComponentModel.Design.Serialization.RootContext>和 <xref:System.CodeDom.CodeTypeDeclaration></span><span class="sxs-lookup"><span data-stu-id="16e73-167">The serialization context is initialized with data including the <xref:System.ComponentModel.Design.Serialization.RootContext> and <xref:System.CodeDom.CodeTypeDeclaration></span></span>|  
|<span data-ttu-id="16e73-168">成员序列化</span><span class="sxs-lookup"><span data-stu-id="16e73-168">Member Serialization</span></span>|<span data-ttu-id="16e73-169">接下来，<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>指导的所有成员和调用<xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>。</span><span class="sxs-lookup"><span data-stu-id="16e73-169">Next, <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> walks all of the members and calls <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>.</span></span> <span data-ttu-id="16e73-170">因为序列化完成才有机会在<xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>，这可确保不两次执行序列化。</span><span class="sxs-lookup"><span data-stu-id="16e73-170">Because serialization is done opportunistically in <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>, this ensures that serialization is not done twice.</span></span>|  
|<span data-ttu-id="16e73-171">根序列化</span><span class="sxs-lookup"><span data-stu-id="16e73-171">Root Serialization</span></span>|<span data-ttu-id="16e73-172">接下来，根对象进行序列化和它的语句添加到语句集合。</span><span class="sxs-lookup"><span data-stu-id="16e73-172">Next, the root object is serialized and its statements are added to the statement collection.</span></span>|  
|<span data-ttu-id="16e73-173">语句集成</span><span class="sxs-lookup"><span data-stu-id="16e73-173">Statement Integration</span></span>|<span data-ttu-id="16e73-174">所有对象都序列后，<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法为语句排序，并将它们添加到从返回的方法<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>。</span><span class="sxs-lookup"><span data-stu-id="16e73-174">After all objects are serialized, the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method orders the statements and adds them to a method returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span> <span data-ttu-id="16e73-175">最后，构造函数会生成调用所有方法返回从<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>。</span><span class="sxs-lookup"><span data-stu-id="16e73-175">Finally, a constructor is fabricated that calls all of the methods returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span>|  
  
-  
  
 <span data-ttu-id="16e73-176">下表显示的对象<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法将放置上下文堆栈上。</span><span class="sxs-lookup"><span data-stu-id="16e73-176">The following table shows the objects the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method places on the context stack.</span></span>  
  
|<span data-ttu-id="16e73-177">实例</span><span class="sxs-lookup"><span data-stu-id="16e73-177">Instance</span></span>|<span data-ttu-id="16e73-178">描述</span><span class="sxs-lookup"><span data-stu-id="16e73-178">Description</span></span>|  
|--------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>|<span data-ttu-id="16e73-179">此序列化程序。</span><span class="sxs-lookup"><span data-stu-id="16e73-179">This serializer.</span></span> <span data-ttu-id="16e73-180">派生类可能会发现有用将公共属性添加到此类。</span><span class="sxs-lookup"><span data-stu-id="16e73-180">Deriving classes may find it useful to add public properties to this class.</span></span>|  
|<xref:System.CodeDom.CodeTypeDeclaration>|<span data-ttu-id="16e73-181">正在创建的类型。</span><span class="sxs-lookup"><span data-stu-id="16e73-181">The type being created.</span></span> <span data-ttu-id="16e73-182">大多数对象不需要直接访问。</span><span class="sxs-lookup"><span data-stu-id="16e73-182">Most objects do not need direct access to this.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16e73-183"><paramref name="manager" /> 或 <paramref name="root" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="16e73-183"><paramref name="manager" /> or <paramref name="root" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
  </Members>
</Type>