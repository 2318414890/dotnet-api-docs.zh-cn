<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeCodeDomSerializer.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac565c87864b4321c7a14ca30be60b486679a4325c4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65c87864b4321c7a14ca30be60b486679a4325c4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
          <source>Serializes an object to a new type.</source>
          <target state="translated">将对象序列化为新类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;</ph> class performs the same tasks as a <ph id="ph2">&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;</ph>, but serializing an object through this class defines a new type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;</ph>类执行与相同的任务<ph id="ph2">&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;</ph>，但通过此类将对象序列化为定义新类型。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">用于序列化的序列化管理器。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>Type declaration to use for serialization.</source>
          <target state="translated">用于序列化的类型声明。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>Deserializes the given type declaration.</source>
          <target state="translated">将给定类型声明反序列化。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>The root object.</source>
          <target state="translated">根对象。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A&gt;</ph> method deserializes a previously serialized code type declaration.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A&gt;</ph>方法反序列化之前序列化的代码类型声明。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>The following table shows the tasks default implementation performs.</source>
          <target state="translated">下表显示任务的默认实现将执行。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>Task</source>
          <target state="translated">任务</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>Case Sensitivity Checks</source>
          <target state="translated">大小写区分功能检查</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>The implementation searches for a <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> service to decide if it should treat members as case sensitive or case insensitive.</source>
          <target state="translated">该实现搜索<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>服务以确定是否它应将成员视为区分大小写或区分大小写。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>Statement Sorting</source>
          <target state="translated">语句排序</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>All member variables and local variables from init methods are stored in a table.</source>
          <target state="translated">所有成员变量和 init 方法中的局部变量都存储在表中。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</source>
          <target state="translated">然后，init 方法中的每个语句添加到组合根据其左侧，因此，分配或操作的特定变量上的所有语句都分组在该变量下语句集合。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>Variables that have no statements are discarded.</source>
          <target state="translated">没有语句的变量将被丢弃。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>Deserialization</source>
          <target state="translated">反序列化</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>The statement collections for each variable are deserialized according to the variable.</source>
          <target state="translated">每个变量的语句集合将根据该变量的反序列化。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>The following table shows the services the <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A&gt;</ph> method requires.</source>
          <target state="translated">下表显示了的服务<ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A&gt;</ph>方法需要。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>Service</source>
          <target state="translated">服务</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.</source>
          <target state="translated">虽然并非绝对必需的该服务，如果可用，用于确定序列化应区分大小写或区分大小写。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>If an object does not exist in the name table during deserialization, a query for <ph id="ph1">&lt;xref:System.ComponentModel.IContainer&gt;</ph> is made.</source>
          <target state="translated">如果对象不存在名称表中的查询反序列化期间<ph id="ph1">&lt;xref:System.ComponentModel.IContainer&gt;</ph>进行。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>If this query succeeds, the container is checked for the object.</source>
          <target state="translated">如果成功执行此查询，容器是针对的对象检查。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>The container is also used as a stand-in for any container argument needed by components.</source>
          <target state="translated">容器还用作一种替代物的组件需要的任何容器自变量。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source><ph id="ph1">&lt;paramref name="manager" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeDecl" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="manager" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="typeDecl" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">用于序列化的序列化管理器。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
          <source>The type declaration to use for serialization.</source>
          <target state="translated">用于序列化的类型声明。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
          <source>The value to use for serialization.</source>
          <target state="translated">用于序列化的值。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
          <source>Returns the method where statements used to serialize a member are stored.</source>
          <target state="translated">返回存储用于序列化成员的语句的方法。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
          <source>The method used to emit all of the initialization code for the given member.</source>
          <target state="translated">用于为给定成员发出所有初始化代码的方法。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;</ph> method returns the method to emit all of the initialization code for the given member.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;</ph>方法返回为给定成员发出所有初始化代码的方法。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
          <source>The default implementation returns an empty constructor.</source>
          <target state="translated">默认实现返回一个空构造函数。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
          <source>If the same method is to be returned for multiple values, the same instance of the method should be returned.</source>
          <target state="translated">如果相同的方法是为多个值返回，则将返回该方法的同一个实例。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
          <source>You can use the <ph id="ph1">&lt;xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType&gt;</ph> dictionary to remember methods you have created.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType&gt;</ph>字典记住所创建的方法。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
          <source>The <ph id="ph1">`typeDecl`</ph> parameter can also be used to add infrastructure methods.</source>
          <target state="translated"><ph id="ph1">`typeDecl`</ph>还可以使用参数来添加基础结构方法。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
          <source>For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</source>
          <target state="translated">例如，如果你想要发出的每个对象单独的方法，你将需要反过来调用所有这些方法的单个方法。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
          <source>This method can be added to the code type declaration as needed.</source>
          <target state="translated">此方法可以添加到根据需要的代码类型声明。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
          <source><ph id="ph1">&lt;paramref name="manager" /&gt;</ph>, <ph id="ph2">&lt;paramref name="typeDecl" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="manager" /&gt;</ph>、<ph id="ph2">&lt;paramref name="typeDecl" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">用于序列化的序列化管理器。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>The type declaration to use for serialization.</source>
          <target state="translated">用于序列化的类型声明。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>Returns an array of methods to be interpreted during deserialization.</source>
          <target state="translated">返回要在反序列化期间解释的方法数组。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeMemberMethod" /&gt;</ph> array of methods to be interpreted during deserialization.</source>
          <target state="translated">要在反序列化期间解释的方法的 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeMemberMethod" /&gt;</ph> 数组。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source>The default implementation returns a single-element array with the constructor in it.</source>
          <target state="translated">默认实现返回在其中使用构造函数的单个元素数组。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
          <source><ph id="ph1">&lt;paramref name="manager" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeDecl" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="manager" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="typeDecl" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">用于序列化的序列化管理器。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>The object to serialize.</source>
          <target state="translated">要序列化的对象。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Optional collection of members.</source>
          <target state="translated">可选的成员集合。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> or empty.</source>
          <target state="translated">可以为 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 或空。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Serializes the object root by creating a new type declaration that defines root.</source>
          <target state="translated">通过创建定义根的新类型声明将对象根序列化。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> that defines the root object.</source>
          <target state="translated">定义根对象的 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A&gt;</ph> method serializes the given root object and optional collection of members to create a new type definition.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A&gt;</ph>方法序列化的给定的根对象和可选的成员，以创建新的类型定义的集合。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>If the <ph id="ph1">`members`</ph> collection contains values, these values are serialized.</source>
          <target state="translated">如果<ph id="ph1">`members`</ph>集合包含值，这些值进行序列化。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Values themselves may serialize as either member variables or local variables.</source>
          <target state="translated">值本身可能序列化作为成员变量或局部变量。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>This determination is done by searching for an extender property on the object called <ph id="ph1">`GenerateMember`</ph>.</source>
          <target state="translated">此决定由调用的对象的扩展程序属性搜索<ph id="ph1">`GenerateMember`</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>If <ph id="ph1">`true`</ph>, a member is generated.</source>
          <target state="translated">如果<ph id="ph1">`true`</ph>，则生成成员。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Otherwise, a local variable is generated.</source>
          <target state="translated">否则，将生成的本地变量。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>For convenience, the <ph id="ph1">`members`</ph> collection can contain the root object.</source>
          <target state="translated">为方便起见，<ph id="ph1">`members`</ph>集合可以包含的根对象。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>In this case, the root object is not also added as a member or local variable.</source>
          <target state="translated">在这种情况下，根对象是不还添加为成员或本地变量中。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>The name of the returned type is taken from the root object’s name, if it was a named object.</source>
          <target state="translated">返回类型的名称取自根对象的名称，如果它是已命名的对象。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>If not, a name is fabricated from the simple type name of the root class.</source>
          <target state="translated">如果没有，则名称会生成根类的简单类型名称。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>The following table shows the tasks performed by the default implementation of the <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A&gt;</ph> method.</source>
          <target state="translated">下表显示的默认实现所执行的任务<ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Task</source>
          <target state="translated">任务</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Context Seeding</source>
          <target state="translated">种子设定的上下文</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>The serialization context is initialized with data including the <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt;</ph> and <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph></source>
          <target state="translated">使用数据，包括初始化序列化上下文<ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt;</ph>和 <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Member Serialization</source>
          <target state="translated">成员序列化</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Next, <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A&gt;</ph> walks all of the members and calls <ph id="ph2">&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;</ph>.</source>
          <target state="translated">接下来，<ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A&gt;</ph>指导的所有成员和调用<ph id="ph2">&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Because serialization is done opportunistically in <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;</ph>, this ensures that serialization is not done twice.</source>
          <target state="translated">因为序列化完成才有机会在<ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;</ph>，这可确保不两次执行序列化。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Root Serialization</source>
          <target state="translated">根序列化</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Next, the root object is serialized and its statements are added to the statement collection.</source>
          <target state="translated">接下来，根对象进行序列化和它的语句添加到语句集合。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Statement Integration</source>
          <target state="translated">语句集成</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>After all objects are serialized, the <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A&gt;</ph> method orders the statements and adds them to a method returned from <ph id="ph2">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;</ph>.</source>
          <target state="translated">所有对象都序列后，<ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A&gt;</ph>方法为语句排序，并将它们添加到从返回的方法<ph id="ph2">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Finally, a constructor is fabricated that calls all of the methods returned from <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;</ph>.</source>
          <target state="translated">最后，构造函数会生成调用所有方法返回从<ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>The following table shows the objects the <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A&gt;</ph> method places on the context stack.</source>
          <target state="translated">下表显示的对象<ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A&gt;</ph>方法将放置上下文堆栈上。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Instance</source>
          <target state="translated">实例</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>This serializer.</source>
          <target state="translated">此序列化程序。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Deriving classes may find it useful to add public properties to this class.</source>
          <target state="translated">派生类可能会发现有用将公共属性添加到此类。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>The type being created.</source>
          <target state="translated">正在创建的类型。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source>Most objects do not need direct access to this.</source>
          <target state="translated">大多数对象不需要直接访问。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
          <source><ph id="ph1">&lt;paramref name="manager" /&gt;</ph> or <ph id="ph2">&lt;paramref name="root" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="manager" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="root" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>