<Type Name="TypeCodeDomSerializer" FullName="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e5567d5597981a6b67661d3ffba3b77a424ae22e" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52613145" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TypeCodeDomSerializer : System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeCodeDomSerializer extends System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeCodeDomSerializer&#xA;Inherits CodeDomSerializerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeCodeDomSerializer : System::ComponentModel::Design::Serialization::CodeDomSerializerBase" />
  <TypeSignature Language="F#" Value="type TypeCodeDomSerializer = class&#xA;    inherit CodeDomSerializerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.Serialization.CodeDomSerializerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Design.Serialization.DefaultSerializationProvider(typeof(System.ComponentModel.Design.Serialization.CodeDomSerializationProvider))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9bcc5-101">将对象序列化为新类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="9bcc5-101">Serializes an object to a new type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bcc5-102"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>类执行相同的任务<xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>，但通过此类对象的序列化定义了新类型。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-102">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> class performs the same tasks as a <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>, but serializing an object through this class defines a new type.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">
      <span data-ttu-id="9bcc5-103">动态源代码生成和编译</span>
      <span class="sxs-lookup">
        <span data-stu-id="9bcc5-103">Dynamic Source Code Generation and Compilation</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeCodeDomSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCodeDomSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9bcc5-104">初始化 <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-104">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual object Deserialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deserialize (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Deserialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj&#xA;override this.Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj" Usage="typeCodeDomSerializer.Deserialize (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager">
          <span data-ttu-id="9bcc5-105">用于序列化的序列化管理器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-105">The serialization manager to use for serialization.</span>
          </span>
        </param>
        <param name="declaration">
          <span data-ttu-id="9bcc5-106">用于序列化的类型声明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-106">Type declaration to use for serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9bcc5-107">将给定类型声明反序列化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-107">Deserializes the given type declaration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9bcc5-108">根对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-108">The root object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bcc5-109"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A>方法将以前序列化的代码类型声明反序列化。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-109">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method deserializes a previously serialized code type declaration.</span></span> <span data-ttu-id="9bcc5-110">下表显示了任务默认实现将执行。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-110">The following table shows the tasks default implementation performs.</span></span>  
  
|<span data-ttu-id="9bcc5-111">任务</span><span class="sxs-lookup"><span data-stu-id="9bcc5-111">Task</span></span>|<span data-ttu-id="9bcc5-112">描述</span><span class="sxs-lookup"><span data-stu-id="9bcc5-112">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="9bcc5-113">区分大小写检查</span><span class="sxs-lookup"><span data-stu-id="9bcc5-113">Case Sensitivity Checks</span></span>|<span data-ttu-id="9bcc5-114">该实现搜索<xref:System.CodeDom.Compiler.CodeDomProvider>服务以确定是否它应将成员视为区分大小写或不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-114">The implementation searches for a <xref:System.CodeDom.Compiler.CodeDomProvider> service to decide if it should treat members as case sensitive or case insensitive.</span></span>|  
|<span data-ttu-id="9bcc5-115">语句排序</span><span class="sxs-lookup"><span data-stu-id="9bcc5-115">Statement Sorting</span></span>|<span data-ttu-id="9bcc5-116">在表中存储的所有成员变量和局部变量 init 方法中。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-116">All member variables and local variables from init methods are stored in a table.</span></span> <span data-ttu-id="9bcc5-117">然后在 init 方法中的每个语句会添加到分组根据其左上方，以便分配或操作系统特定的变量上的所有语句都分组在该变量下一个语句集合。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-117">Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</span></span> <span data-ttu-id="9bcc5-118">变量的任何语句将被丢弃。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-118">Variables that have no statements are discarded.</span></span>|  
|<span data-ttu-id="9bcc5-119">反序列化</span><span class="sxs-lookup"><span data-stu-id="9bcc5-119">Deserialization</span></span>|<span data-ttu-id="9bcc5-120">每个变量的语句集合会根据变量的反序列化。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-120">The statement collections for each variable are deserialized according to the variable.</span></span>|  
  
 <span data-ttu-id="9bcc5-121">下表显示了服务<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A>方法要求。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-121">The following table shows the services the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method requires.</span></span>  
  
|<span data-ttu-id="9bcc5-122">服务</span><span class="sxs-lookup"><span data-stu-id="9bcc5-122">Service</span></span>|<span data-ttu-id="9bcc5-123">描述</span><span class="sxs-lookup"><span data-stu-id="9bcc5-123">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.CodeDom.Compiler.CodeDomProvider>|<span data-ttu-id="9bcc5-124">而不是必需的该服务，如果可用，用于确定序列化应区分大小写或不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-124">While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.</span></span>|  
|<xref:System.ComponentModel.IContainer>|<span data-ttu-id="9bcc5-125">如果对象不存在名称表中查询的反序列化期间<xref:System.ComponentModel.IContainer>进行。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-125">If an object does not exist in the name table during deserialization, a query for <xref:System.ComponentModel.IContainer> is made.</span></span> <span data-ttu-id="9bcc5-126">如果成功执行此查询，该容器是针对的对象检查。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-126">If this query succeeds, the container is checked for the object.</span></span> <span data-ttu-id="9bcc5-127">容器还用作组件所需的任何容器参数替代项。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-127">The container is also used as a stand-in for any container argument needed by components.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9bcc5-128">
            <paramref name="manager" /> 或 <paramref name="typeDecl" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-128">
              <paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">
          <span data-ttu-id="9bcc5-129">动态源代码生成和编译</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-129">Dynamic Source Code Generation and Compilation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethod">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod GetInitializeMethod (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod GetInitializeMethod(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethod (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration, value As Object) As CodeMemberMethod" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::CodeDom::CodeMemberMethod ^ GetInitializeMethod(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod&#xA;override this.GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod" Usage="typeCodeDomSerializer.GetInitializeMethod (manager, declaration, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager">
          <span data-ttu-id="9bcc5-130">用于序列化的序列化管理器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-130">The serialization manager to use for serialization.</span>
          </span>
        </param>
        <param name="declaration">
          <span data-ttu-id="9bcc5-131">用于序列化的类型声明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-131">The type declaration to use for serialization.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="9bcc5-132">用于序列化的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-132">The value to use for serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9bcc5-133">返回存储用于序列化成员的语句的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-133">Returns the method where statements used to serialize a member are stored.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9bcc5-134">用于为给定成员发出所有初始化代码的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-134">The method used to emit all of the initialization code for the given member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bcc5-135"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>方法返回要为给定成员发出所有初始化代码的方法。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-135">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> method returns the method to emit all of the initialization code for the given member.</span></span> <span data-ttu-id="9bcc5-136">默认实现返回一个空构造函数。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-136">The default implementation returns an empty constructor.</span></span> <span data-ttu-id="9bcc5-137">如果相同的方法将返回多个值，则应返回方法的同一个实例。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-137">If the same method is to be returned for multiple values, the same instance of the method should be returned.</span></span> <span data-ttu-id="9bcc5-138">可以使用<xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType>字典记住所创建的方法。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-138">You can use the <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> dictionary to remember methods you have created.</span></span> <span data-ttu-id="9bcc5-139">`typeDecl`参数还可用于添加基础结构方法。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-139">The `typeDecl` parameter can also be used to add infrastructure methods.</span></span> <span data-ttu-id="9bcc5-140">例如，如果你想要发出的每个对象单独的方法，需要所有这些方法又调用单个方法。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-140">For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</span></span> <span data-ttu-id="9bcc5-141">此方法可以添加到根据需要的代码类型声明。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-141">This method can be added to the code type declaration as needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9bcc5-142">
            <paramref name="manager" />、<paramref name="typeDecl" /> 或 <paramref name="value" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-142">
              <paramref name="manager" />, <paramref name="typeDecl" />, or <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">
          <span data-ttu-id="9bcc5-143">动态源代码生成和编译</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-143">Dynamic Source Code Generation and Compilation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethods">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod[] GetInitializeMethods (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod[] GetInitializeMethods(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethods (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As CodeMemberMethod()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::CodeDom::CodeMemberMethod ^&gt; ^ GetInitializeMethods(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]&#xA;override this.GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]" Usage="typeCodeDomSerializer.GetInitializeMethods (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager">
          <span data-ttu-id="9bcc5-144">用于序列化的序列化管理器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-144">The serialization manager to use for serialization.</span>
          </span>
        </param>
        <param name="declaration">
          <span data-ttu-id="9bcc5-145">用于序列化的类型声明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-145">The type declaration to use for serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9bcc5-146">返回要在反序列化期间解释的方法数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-146">Returns an array of methods to be interpreted during deserialization.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9bcc5-147">要在反序列化期间解释的方法的 <see cref="T:System.CodeDom.CodeMemberMethod" /> 数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-147">A <see cref="T:System.CodeDom.CodeMemberMethod" /> array of methods to be interpreted during deserialization.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bcc5-148">默认实现返回在其构造函数的单个元素数组。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-148">The default implementation returns a single-element array with the constructor in it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9bcc5-149">
            <paramref name="manager" /> 或 <paramref name="typeDecl" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-149">
              <paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">
          <span data-ttu-id="9bcc5-150">动态源代码生成和编译</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-150">Dynamic Source Code Generation and Compilation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeTypeDeclaration Serialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, System.Collections.ICollection members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration Serialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, class System.Collections.ICollection members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Serialize (manager As IDesignerSerializationManager, root As Object, members As ICollection) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeTypeDeclaration ^ Serialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::Object ^ root, System::Collections::ICollection ^ members);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration&#xA;override this.Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration" Usage="typeCodeDomSerializer.Serialize (manager, root, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="root" Type="System.Object" />
        <Parameter Name="members" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="manager">
          <span data-ttu-id="9bcc5-151">用于序列化的序列化管理器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-151">The serialization manager to use for serialization.</span>
          </span>
        </param>
        <param name="root">
          <span data-ttu-id="9bcc5-152">要序列化的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-152">The object to serialize.</span>
          </span>
        </param>
        <param name="members">
          <span data-ttu-id="9bcc5-153">可选的成员集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-153">Optional collection of members.</span>
          </span>
          <span data-ttu-id="9bcc5-154">可以为 <see langword="null" /> 或空。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-154">Can be <see langword="null" /> or empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9bcc5-155">通过创建定义根的新类型声明将对象根序列化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-155">Serializes the object root by creating a new type declaration that defines root.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9bcc5-156">定义根对象的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-156">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that defines the root object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bcc5-157"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法序列化的给定的根对象和要创建新的类型定义的成员的可选集合。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-157">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method serializes the given root object and optional collection of members to create a new type definition.</span></span> <span data-ttu-id="9bcc5-158">如果`members`集合包含的值，这些值进行序列化。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-158">If the `members` collection contains values, these values are serialized.</span></span> <span data-ttu-id="9bcc5-159">值本身可能会序列化为成员变量或本地变量。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-159">Values themselves may serialize as either member variables or local variables.</span></span> <span data-ttu-id="9bcc5-160">此决定通过搜索调用的对象的扩展程序属性`GenerateMember`。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-160">This determination is done by searching for an extender property on the object called `GenerateMember`.</span></span> <span data-ttu-id="9bcc5-161">如果`true`，生成成员。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-161">If `true`, a member is generated.</span></span> <span data-ttu-id="9bcc5-162">否则，生成本地变量。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-162">Otherwise, a local variable is generated.</span></span> <span data-ttu-id="9bcc5-163">为方便起见，`members`集合可以包含的根对象。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-163">For convenience, the `members` collection can contain the root object.</span></span> <span data-ttu-id="9bcc5-164">在这种情况下，根对象不也添加为成员或局部变量。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-164">In this case, the root object is not also added as a member or local variable.</span></span>  
  
 <span data-ttu-id="9bcc5-165">返回类型的名称取自根对象的名称，如果它是命名的对象。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-165">The name of the returned type is taken from the root object's name, if it was a named object.</span></span> <span data-ttu-id="9bcc5-166">如果没有，从根类的简单类型名称会生成一个名称。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-166">If not, a name is fabricated from the simple type name of the root class.</span></span>  
  
 <span data-ttu-id="9bcc5-167">下表显示了执行的默认实现的任务<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-167">The following table shows the tasks performed by the default implementation of the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method.</span></span>  
  
|<span data-ttu-id="9bcc5-168">任务</span><span class="sxs-lookup"><span data-stu-id="9bcc5-168">Task</span></span>|<span data-ttu-id="9bcc5-169">描述</span><span class="sxs-lookup"><span data-stu-id="9bcc5-169">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="9bcc5-170">种子设定的上下文</span><span class="sxs-lookup"><span data-stu-id="9bcc5-170">Context Seeding</span></span>|<span data-ttu-id="9bcc5-171">使用数据，包括初始化序列化上下文<xref:System.ComponentModel.Design.Serialization.RootContext>和 <xref:System.CodeDom.CodeTypeDeclaration></span><span class="sxs-lookup"><span data-stu-id="9bcc5-171">The serialization context is initialized with data including the <xref:System.ComponentModel.Design.Serialization.RootContext> and <xref:System.CodeDom.CodeTypeDeclaration></span></span>|  
|<span data-ttu-id="9bcc5-172">成员序列化</span><span class="sxs-lookup"><span data-stu-id="9bcc5-172">Member Serialization</span></span>|<span data-ttu-id="9bcc5-173">下一步，<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>指导的所有成员和调用<xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-173">Next, <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> walks all of the members and calls <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>.</span></span> <span data-ttu-id="9bcc5-174">因为序列化完成才有机会在<xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>，这可确保不两次执行序列化。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-174">Because serialization is done opportunistically in <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>, this ensures that serialization is not done twice.</span></span>|  
|<span data-ttu-id="9bcc5-175">根序列化</span><span class="sxs-lookup"><span data-stu-id="9bcc5-175">Root Serialization</span></span>|<span data-ttu-id="9bcc5-176">接下来，序列化的根对象和它的语句添加到语句集合。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-176">Next, the root object is serialized and its statements are added to the statement collection.</span></span>|  
|<span data-ttu-id="9bcc5-177">语句的集成</span><span class="sxs-lookup"><span data-stu-id="9bcc5-177">Statement Integration</span></span>|<span data-ttu-id="9bcc5-178">所有对象进行序列都化后，<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法为语句排序，并将它们添加到方法返回从<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-178">After all objects are serialized, the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method orders the statements and adds them to a method returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span> <span data-ttu-id="9bcc5-179">最后，构造函数会生成调用所有方法返回从<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-179">Finally, a constructor is fabricated that calls all of the methods returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span>|  
  
-  
  
 <span data-ttu-id="9bcc5-180">下表显示了对象<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法是将上下文堆栈上。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-180">The following table shows the objects the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method places on the context stack.</span></span>  
  
|<span data-ttu-id="9bcc5-181">实例</span><span class="sxs-lookup"><span data-stu-id="9bcc5-181">Instance</span></span>|<span data-ttu-id="9bcc5-182">描述</span><span class="sxs-lookup"><span data-stu-id="9bcc5-182">Description</span></span>|  
|--------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>|<span data-ttu-id="9bcc5-183">此序列化程序。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-183">This serializer.</span></span> <span data-ttu-id="9bcc5-184">派生的类可能会发现可以将公共属性添加到此类。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-184">Deriving classes may find it useful to add public properties to this class.</span></span>|  
|<xref:System.CodeDom.CodeTypeDeclaration>|<span data-ttu-id="9bcc5-185">正在创建的类型。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-185">The type being created.</span></span> <span data-ttu-id="9bcc5-186">大多数对象不需要直接访问。</span><span class="sxs-lookup"><span data-stu-id="9bcc5-186">Most objects do not need direct access to this.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9bcc5-187">
            <paramref name="manager" /> 或 <paramref name="root" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-187">
              <paramref name="manager" /> or <paramref name="root" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="https://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">
          <span data-ttu-id="9bcc5-188">动态源代码生成和编译</span>
          <span class="sxs-lookup">
            <span data-stu-id="9bcc5-188">Dynamic Source Code Generation and Compilation</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>