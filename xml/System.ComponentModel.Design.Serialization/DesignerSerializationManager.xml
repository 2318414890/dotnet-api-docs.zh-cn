<Type Name="DesignerSerializationManager" FullName="System.ComponentModel.Design.Serialization.DesignerSerializationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d25755190c3410b70176ce9e68fb7096b9117195" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39773808" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DesignerSerializationManager : IServiceProvider, System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DesignerSerializationManager extends System.Object implements class System.ComponentModel.Design.Serialization.IDesignerSerializationManager, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class DesignerSerializationManager&#xA;Implements IDesignerSerializationManager, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DesignerSerializationManager : IServiceProvider, System::ComponentModel::Design::Serialization::IDesignerSerializationManager" />
  <TypeSignature Language="F#" Value="type DesignerSerializationManager = class&#xA;    interface IDesignerSerializationManager&#xA;    interface IServiceProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.Serialization.IDesignerSerializationManager</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="5100b-101">提供 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 接口的实现。</span>
      <span class="sxs-lookup">
        <span data-stu-id="5100b-101">Provides an implementation of the <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> interface.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-102"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>接口旨在作为一个独立于格式的接口控制序列化的对象。</span><span class="sxs-lookup"><span data-stu-id="5100b-102">The <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> interface is designed to be a format-independent interface to an object that controls serialization.</span></span> <span data-ttu-id="5100b-103">它实质上是对序列化程序，实际执行反序列化提供上下文和服务。</span><span class="sxs-lookup"><span data-stu-id="5100b-103">It essentially provides context and services to serializers, which actually perform the deserialization.</span></span> <span data-ttu-id="5100b-104"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> 通过跟踪对象，可帮助在反序列化过程中。</span><span class="sxs-lookup"><span data-stu-id="5100b-104"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> assists in the deserialization process by keeping track of objects.</span></span> <span data-ttu-id="5100b-105">这是在技术上与类似<xref:System.ComponentModel.Design.IDesignerHost>接口： 设计器实际上还提供用户界面 (UI) 和<xref:System.ComponentModel.Design.IDesignerHost>允许不同的设计器用于配合在一起。</span><span class="sxs-lookup"><span data-stu-id="5100b-105">This is similar in technique to the <xref:System.ComponentModel.Design.IDesignerHost> interface: designers actually provide the user interface (UI), and <xref:System.ComponentModel.Design.IDesignerHost> provides the glue that allows different designers to work together.</span></span>  
  
 <span data-ttu-id="5100b-106"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> 类实现 <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>。</span><span class="sxs-lookup"><span data-stu-id="5100b-106">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> class implements <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>.</span></span> <span data-ttu-id="5100b-107">这为了提供类似于运行时序列化程序等的反序列化的泛型形式<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>。</span><span class="sxs-lookup"><span data-stu-id="5100b-107">It is designed to provide a generic form of deserialization that is similar to run-time serializers like the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.</span></span>  
  
 <span data-ttu-id="5100b-108"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager>类可实现三个目标：</span><span class="sxs-lookup"><span data-stu-id="5100b-108">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> class achieves three goals:</span></span>  
  
-   <span data-ttu-id="5100b-109">它是可用于以不同的格式反序列化一个简单的即用型对象。</span><span class="sxs-lookup"><span data-stu-id="5100b-109">It is a simple, turnkey object that can be used to deserialize a variety of formats.</span></span>  
  
-   <span data-ttu-id="5100b-110">它是泛型，不绑定到任何特定的格式。</span><span class="sxs-lookup"><span data-stu-id="5100b-110">It is generic and not tied to any particular format.</span></span> <span data-ttu-id="5100b-111">它可以同样使用 CodeDOM 反序列化以及标记反序列化。</span><span class="sxs-lookup"><span data-stu-id="5100b-111">It can be used equally for CodeDOM deserialization as well as markup deserialization.</span></span>  
  
-   <span data-ttu-id="5100b-112">它是可扩展的并支持在复制/粘贴和撤消/重做方案中使用的不同的序列化方法。</span><span class="sxs-lookup"><span data-stu-id="5100b-112">It is extensible and supports different serialization methods that are used in copy/paste and undo/redo scenarios.</span></span>  
  
 <span data-ttu-id="5100b-113">设计时序列化具有与运行时对象序列化的以下差异：</span><span class="sxs-lookup"><span data-stu-id="5100b-113">Design-time serialization has the following differences from run-time object serialization:</span></span>  
  
-   <span data-ttu-id="5100b-114">执行序列化的对象是通常独立于运行时对象，以便可以从组件中移除设计时逻辑。</span><span class="sxs-lookup"><span data-stu-id="5100b-114">The object performing the serialization is generally separate from the run-time object, so that design-time logic can be removed from a component.</span></span>  
  
-   <span data-ttu-id="5100b-115">序列化方案假定该对象将创建完全初始化，然后反序列化期间修改通过属性和方法调用。</span><span class="sxs-lookup"><span data-stu-id="5100b-115">The serialization scheme assumes the object will be created fully initialized, and then modified through property and method invocations during deserialization.</span></span>  
  
-   <span data-ttu-id="5100b-116">不序列化的对象具有永远不会在 （属性包含默认值） 的对象设置的值的属性。</span><span class="sxs-lookup"><span data-stu-id="5100b-116">Properties of an object that have values that were never set on the object (the properties contain the default values) are not serialized.</span></span> <span data-ttu-id="5100b-117">相反，反序列化流可能会有漏洞。</span><span class="sxs-lookup"><span data-stu-id="5100b-117">Conversely, the deserialization stream may have holes.</span></span>  
  
-   <span data-ttu-id="5100b-118">重点是在序列化流中，而不是完整的序列化的对象的内容的质量。</span><span class="sxs-lookup"><span data-stu-id="5100b-118">Emphasis is placed on the quality of the content within the serialization stream, rather than the full serialization of an object.</span></span> <span data-ttu-id="5100b-119">这意味着，如果没有定义的方法序列化对象，该对象可能会跳过而不是引发异常。</span><span class="sxs-lookup"><span data-stu-id="5100b-119">This means that if there is no defined way to serialize an object, that object may be skipped rather than throwing an exception.</span></span> <span data-ttu-id="5100b-120">序列化引擎可能会提供试探法此处来决定可以忽略的失败以及哪些是不可恢复。</span><span class="sxs-lookup"><span data-stu-id="5100b-120">The serialization engine may provide heuristics here to decide which failures can be ignored and which are unrecoverable.</span></span>  
  
-   <span data-ttu-id="5100b-121">序列化流可能包含更多的数据不是所需的反序列化。</span><span class="sxs-lookup"><span data-stu-id="5100b-121">The serialization stream may have more data than is needed for deserialization.</span></span> <span data-ttu-id="5100b-122">源的代码序列化，例如，具有用户代码混合在一起所需进行反序列化对象图的代码。</span><span class="sxs-lookup"><span data-stu-id="5100b-122">Source code serialization, for example, has user code mixed in with the code needed to deserialize an object graph.</span></span> <span data-ttu-id="5100b-123">此用户代码必须忽略在反序列化并在序列化时保留。</span><span class="sxs-lookup"><span data-stu-id="5100b-123">This user code must be ignored on deserialization and preserved on serialization.</span></span>  
  
 <span data-ttu-id="5100b-124">由于存在这些差异，不同的序列化模型适用于设计时序列化。</span><span class="sxs-lookup"><span data-stu-id="5100b-124">Because of these differences, a different serialization model applies to design-time serialization.</span></span> <span data-ttu-id="5100b-125">此模型使用每个正在序列化的数据类型的单独序列化程序对象。</span><span class="sxs-lookup"><span data-stu-id="5100b-125">This model utilizes a separate serializer object for each data type being serialized.</span></span> <span data-ttu-id="5100b-126">每个序列化程序提供了其对该问题作为一个整体的小贡献。</span><span class="sxs-lookup"><span data-stu-id="5100b-126">Each serializer provides its small contribution to the problem as a whole.</span></span> <span data-ttu-id="5100b-127">这些序列化程序进行所有协调通过常见的序列化管理器。</span><span class="sxs-lookup"><span data-stu-id="5100b-127">These serializers are all coordinated through a common serialization manager.</span></span> <span data-ttu-id="5100b-128">序列化管理器负责维护这些不同的序列化程序之间的状态。</span><span class="sxs-lookup"><span data-stu-id="5100b-128">The serialization manager is responsible for maintaining state between these different serializers.</span></span> <span data-ttu-id="5100b-129">作为示例，请考虑以下类：</span><span class="sxs-lookup"><span data-stu-id="5100b-129">As an example, consider the following class:</span></span>  
  
 [!code-csharp[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/CS/Program.cs#2)]
 [!code-vb[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/VB/Program.vb#2)]  
  
 <span data-ttu-id="5100b-130">此类的实例将利用三个不同的序列化程序： 一个用于`SampleObject`，一个字符串，而另一个范围内的整数。</span><span class="sxs-lookup"><span data-stu-id="5100b-130">An instance of this class would utilize three different serializers: one for `SampleObject`, one for strings, and another for integers.</span></span> <span data-ttu-id="5100b-131">序列化程序`SampleObject`称作根序列化程序，因为`SampleObject`是序列化图形的根。</span><span class="sxs-lookup"><span data-stu-id="5100b-131">The serializer for `SampleObject` is called the root serializer because `SampleObject` is the root of the serialization graph.</span></span> <span data-ttu-id="5100b-132">也可以创建更复杂的对象图。</span><span class="sxs-lookup"><span data-stu-id="5100b-132">More complex object graphs can be created as well.</span></span> <span data-ttu-id="5100b-133">例如，考虑会发生什么情况如果`SampleObject`已更改，如下所示：</span><span class="sxs-lookup"><span data-stu-id="5100b-133">For example, consider what would happen if `SampleObject` were changed as follows:</span></span>  
  
 [!code-csharp[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/CS/SampleObject.cs#11)]
 [!code-vb[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/VB/SampleObject.vb#11)]  
  
 <span data-ttu-id="5100b-134">这允许`SampleObject`具有子级是自身的另一个实例。</span><span class="sxs-lookup"><span data-stu-id="5100b-134">This allows `SampleObject` to have a child that is another instance of itself.</span></span> <span data-ttu-id="5100b-135">以下代码填充对象图中：</span><span class="sxs-lookup"><span data-stu-id="5100b-135">The following code fills in the object graph:</span></span>  
  
 [!code-csharp[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/CS/SampleObject.cs#12)]
 [!code-vb[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/VB/SampleObject.vb#12)]  
  
 <span data-ttu-id="5100b-136">当`root`序列化时，将有四个序列化程序使用： 一个根序列化程序、 一个序列化程序的子`SampleObject`，一个序列化程序`int`，和一个序列化程序`string`。</span><span class="sxs-lookup"><span data-stu-id="5100b-136">When `root` is serialized, there will be four serializers used: one root serializer, one serializer for the child `SampleObject`, one serializer for `int`, and one serializer for `string`.</span></span> <span data-ttu-id="5100b-137">序列化程序会缓存基于类型，因此无需创建的每个实例的序列化程序`SampleObject`。</span><span class="sxs-lookup"><span data-stu-id="5100b-137">Serializers are cached based on type, so there is no need to create a serializer for each instance of `SampleObject`.</span></span>  
  
 <span data-ttu-id="5100b-138"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager>序列化会话的理念的基于类。</span><span class="sxs-lookup"><span data-stu-id="5100b-138">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> class is based on the idea of a serialization session.</span></span> <span data-ttu-id="5100b-139">会话维护各种序列化程序可以访问的状态。</span><span class="sxs-lookup"><span data-stu-id="5100b-139">A session maintains state that can be accessed by the various serializers.</span></span> <span data-ttu-id="5100b-140">当释放会话时，将销毁此状态。</span><span class="sxs-lookup"><span data-stu-id="5100b-140">When a session is disposed, this state is destroyed.</span></span> <span data-ttu-id="5100b-141">这有助于确保序列化程序保持很大程度上无状态，并可帮助以进行序列化程序将清除已损坏。</span><span class="sxs-lookup"><span data-stu-id="5100b-141">This helps to ensure that serializers remain largely stateless, and helps to clean up serializers that are have been corrupted.</span></span> <span data-ttu-id="5100b-142">下表描述了中并在会话状态的管理方式。</span><span class="sxs-lookup"><span data-stu-id="5100b-142">The following tables describe how state is managed in and among sessions.</span></span>  
  
## <a name="global-state"></a><span data-ttu-id="5100b-143">全局状态</span><span class="sxs-lookup"><span data-stu-id="5100b-143">Global State</span></span>  
 <span data-ttu-id="5100b-144">此状态对象拥有的序列化管理器，但独立于当前的序列化会话。</span><span class="sxs-lookup"><span data-stu-id="5100b-144">This state is owned by the serialization manager object, but is independent of the current serialization session.</span></span>  
  
|<span data-ttu-id="5100b-145">对象</span><span class="sxs-lookup"><span data-stu-id="5100b-145">Object</span></span>|<span data-ttu-id="5100b-146">用法</span><span class="sxs-lookup"><span data-stu-id="5100b-146">Usage</span></span>|  
|------------|-----------|  
|<span data-ttu-id="5100b-147">序列化提供程序</span><span class="sxs-lookup"><span data-stu-id="5100b-147">Serialization providers</span></span>|<span data-ttu-id="5100b-148">对象可以将自己添加为自定义序列化提供程序中。</span><span class="sxs-lookup"><span data-stu-id="5100b-148">Objects can add themselves as custom serialization providers.</span></span> <span data-ttu-id="5100b-149">这些提供程序用于查找的序列化程序，因为它们的生存期长于序列化会话。</span><span class="sxs-lookup"><span data-stu-id="5100b-149">Because these providers are used to locate serializers, they outlive a serialization session.</span></span>|  
  
## <a name="session-owned-state"></a><span data-ttu-id="5100b-150">会话拥有的状态</span><span class="sxs-lookup"><span data-stu-id="5100b-150">Session-Owned State</span></span>  
 <span data-ttu-id="5100b-151">此状态由某个会话拥有并销毁会话时销毁。</span><span class="sxs-lookup"><span data-stu-id="5100b-151">This state is owned by a session and is destroyed when a session is destroyed.</span></span> <span data-ttu-id="5100b-152">因此，访问任何属性或将操作此状态的方法将引发异常，如果序列化管理器不是活动的会话中。</span><span class="sxs-lookup"><span data-stu-id="5100b-152">Consequently, accessing any properties or methods that would manipulate this state will throw an exception if the serialization manager is not in an active session.</span></span>  
  
|<span data-ttu-id="5100b-153">对象</span><span class="sxs-lookup"><span data-stu-id="5100b-153">Object</span></span>|<span data-ttu-id="5100b-154">用法</span><span class="sxs-lookup"><span data-stu-id="5100b-154">Usage</span></span>|  
|------------|-----------|  
|<span data-ttu-id="5100b-155"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName>事件</span><span class="sxs-lookup"><span data-stu-id="5100b-155"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> event</span></span>|<span data-ttu-id="5100b-156"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName>事件附加的序列化程序提供额外的名称解析。</span><span class="sxs-lookup"><span data-stu-id="5100b-156">The <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> event is attached by a serializer to provide additional resolution of names.</span></span> <span data-ttu-id="5100b-157">所有处理程序均与此事件会话终止时分离。</span><span class="sxs-lookup"><span data-stu-id="5100b-157">All handlers are detached from this event when a session terminates.</span></span>|  
|<span data-ttu-id="5100b-158"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete>事件</span><span class="sxs-lookup"><span data-stu-id="5100b-158"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event</span></span>|<span data-ttu-id="5100b-159"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete>释放会话前，将引发事件。</span><span class="sxs-lookup"><span data-stu-id="5100b-159">The <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event is raised just before a session is disposed.</span></span> <span data-ttu-id="5100b-160">然后，所有处理程序与此事件。</span><span class="sxs-lookup"><span data-stu-id="5100b-160">Then, all handlers are detached from this event.</span></span>|  
|<span data-ttu-id="5100b-161">名称表</span><span class="sxs-lookup"><span data-stu-id="5100b-161">Name table</span></span>|<span data-ttu-id="5100b-162">序列化管理器维护对象和其名称之间映射的表。</span><span class="sxs-lookup"><span data-stu-id="5100b-162">The serialization manager maintains a table that maps between objects and their names.</span></span> <span data-ttu-id="5100b-163">序列化程序可以提供以便于识别的对象名称。</span><span class="sxs-lookup"><span data-stu-id="5100b-163">Serializers may give objects names for easy identification.</span></span> <span data-ttu-id="5100b-164">会话终止后，会清除此名称表。</span><span class="sxs-lookup"><span data-stu-id="5100b-164">This name table is cleared when the session terminates.</span></span>|  
|<span data-ttu-id="5100b-165">序列化程序缓存</span><span class="sxs-lookup"><span data-stu-id="5100b-165">Serializer cache</span></span>|<span data-ttu-id="5100b-166">序列化管理器维护已要求提供序列化程序的缓存。</span><span class="sxs-lookup"><span data-stu-id="5100b-166">The serialization manager maintains a cache of serializers it has been asked to supply.</span></span> <span data-ttu-id="5100b-167">当会话终止时清除此缓存。</span><span class="sxs-lookup"><span data-stu-id="5100b-167">This cache is cleared when the session terminates.</span></span> <span data-ttu-id="5100b-168">公共<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A>方法安全地调用在任何时候，但仅当会话中，从调用缓存其值。</span><span class="sxs-lookup"><span data-stu-id="5100b-168">The public <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A> method can safely be called at any time, but its value is cached only if it is called from within a session.</span></span>|  
|<span data-ttu-id="5100b-169">上下文堆栈</span><span class="sxs-lookup"><span data-stu-id="5100b-169">Context stack</span></span>|<span data-ttu-id="5100b-170">序列化管理器维护一个名为上下文堆栈，你可以使用访问对象<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="5100b-170">The serialization manager maintains an object called the context stack, which you can access with the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context%2A> property.</span></span> <span data-ttu-id="5100b-171">序列化程序可以使用此堆栈存储可供其他序列化程序的其他信息。</span><span class="sxs-lookup"><span data-stu-id="5100b-171">Serializers can use this stack to store additional information that is available to other serializers.</span></span> <span data-ttu-id="5100b-172">例如，序列化属性值的序列化程序可以推送的属性名称序列化堆栈上之前询问要序列化的值。</span><span class="sxs-lookup"><span data-stu-id="5100b-172">For example, a serializer that is serializing a property value can push the property name on the serialization stack before asking the value to serialize.</span></span> <span data-ttu-id="5100b-173">终止该会话后，会清除此堆栈。</span><span class="sxs-lookup"><span data-stu-id="5100b-173">This stack is cleared when the session is terminated.</span></span>|  
|<span data-ttu-id="5100b-174">错误列表</span><span class="sxs-lookup"><span data-stu-id="5100b-174">Error list</span></span>|<span data-ttu-id="5100b-175">序列化管理器维护序列化期间发生的错误的列表。</span><span class="sxs-lookup"><span data-stu-id="5100b-175">The serialization manager maintains a list of errors that occurred during serialization.</span></span> <span data-ttu-id="5100b-176">此列表中，通过访问<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A>属性，当终止该会话时被清除。</span><span class="sxs-lookup"><span data-stu-id="5100b-176">This list, which is accessed through the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> property, is cleared when the session is terminated.</span></span> <span data-ttu-id="5100b-177">访问<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A>会话之间的属性将导致异常。</span><span class="sxs-lookup"><span data-stu-id="5100b-177">Accessing the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> property between sessions will result in an exception.</span></span>|  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.ContextStack" />
    <altmember cref="T:System.IServiceProvider" />
    <altmember cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5100b-178">初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-178">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerSerializationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerSerializationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5100b-179">初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-179">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-180">此构造函数设置<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A>并<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A>属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="5100b-180">This constructor sets the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> and <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> properties to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerSerializationManager (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (provider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerSerializationManager(IServiceProvider ^ provider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.Serialization.DesignerSerializationManager : IServiceProvider -&gt; System.ComponentModel.Design.Serialization.DesignerSerializationManager" Usage="new System.ComponentModel.Design.Serialization.DesignerSerializationManager provider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="5100b-181">一个 <see cref="T:System.IServiceProvider" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-181">An <see cref="T:System.IServiceProvider" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-182">使用给定的服务提供程序初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-182">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> class with the given service provider.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-183">如果序列化程序请求服务无法满足的序列化管理器，默认实现将这些请求转发到`provider`参数。</span><span class="sxs-lookup"><span data-stu-id="5100b-183">If a serializer requests services that cannot be satisfied by the serialization manager, the default implementation will forward those requests to the `provider` parameter.</span></span>  
  
 <span data-ttu-id="5100b-184">此构造函数设置<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A>并<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A>属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="5100b-184">This constructor sets the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> and <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> properties to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5100b-185">
            <paramref name="provider" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-185">
              <paramref name="provider" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      </Docs>
    </Member>
    <Member MemberName="Container">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IContainer Container { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IContainer Container" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container" />
      <MemberSignature Language="VB.NET" Value="Public Property Container As IContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IContainer ^ Container { System::ComponentModel::IContainer ^ get(); void set(System::ComponentModel::IContainer ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Container : System.ComponentModel.IContainer with get, set" Usage="System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5100b-186">获取或设置该序列化管理器的容器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-186">Gets or sets to the container for this serialization manager.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5100b-187">序列化管理器将向其添加组件的 <see cref="T:System.ComponentModel.IContainer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-187">The <see cref="T:System.ComponentModel.IContainer" /> to which the serialization manager will add components.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-188">如果容器存在，则创建的序列化管理器的所有组件将都添加到容器。</span><span class="sxs-lookup"><span data-stu-id="5100b-188">If a container exists, all components that are created by the serialization manager will be added to the container.</span></span> <span data-ttu-id="5100b-189">此属性的默认实现将搜索的服务提供程序<xref:System.ComponentModel.Design.IDesignerHost>并使用提供的设计器宿主的容器，应存在。</span><span class="sxs-lookup"><span data-stu-id="5100b-189">The default implementation of this property will search the service provider for an <xref:System.ComponentModel.Design.IDesignerHost> and use the container provided by the designer host, should one exist.</span></span> <span data-ttu-id="5100b-190">否则，此属性将返回`null`，没有任何组件将添加到容器。</span><span class="sxs-lookup"><span data-stu-id="5100b-190">Otherwise, this property will return `null` and no components will be added to a container.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5100b-191">序列化管理器中有一个活动的序列化会话。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-191">The serialization manager has an active serialization session.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected virtual object CreateInstance (Type type, System.Collections.ICollection arguments, string name, bool addToContainer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object CreateInstance(class System.Type type, class System.Collections.ICollection arguments, string name, bool addToContainer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ CreateInstance(Type ^ type, System::Collections::ICollection ^ arguments, System::String ^ name, bool addToContainer);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : Type * System.Collections.ICollection * string * bool -&gt; obj&#xA;override this.CreateInstance : Type * System.Collections.ICollection * string * bool -&gt; obj" Usage="designerSerializationManager.CreateInstance (type, arguments, name, addToContainer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.ICollection" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="addToContainer" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="5100b-192">要创建的实例的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-192">The type to create an instance of.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="5100b-193">类型的构造函数的参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-193">The parameters of the type’s constructor.</span>
          </span>
          <span data-ttu-id="5100b-194">这可以为 <see langword="null" /> 或空集合，以调用默认构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-194">This can be <see langword="null" /> or an empty collection to invoke the default constructor.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="5100b-195">要为对象提供的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-195">A name to give the object.</span>
          </span>
          <span data-ttu-id="5100b-196">如果为 <see langword="null" />，将不会为对象提供名称，除非将该对象添加到某个容器并且该容器为该对象提供名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-196">If <see langword="null" />, the object will not be given a name, unless the object is added to a container and the container gives the object a name.</span>
          </span>
        </param>
        <param name="addToContainer">
          <span data-ttu-id="5100b-197">如果要在对象实现 <see cref="T:System.ComponentModel.IComponent" /> 时向容器中添加对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-197">
              <see langword="true" /> to add the object to the container if the object implements <see cref="T:System.ComponentModel.IComponent" />; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-198">创建类型的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-198">Creates an instance of a type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5100b-199">由 <paramref name="type" /> 指定的类型的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-199">A new instance of the type specified by <paramref name="type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-200">当用户尝试创建一种类型的实例时，序列化程序被调用此方法。</span><span class="sxs-lookup"><span data-stu-id="5100b-200">This method is called by serializers when they attempt to create an instance of a type.</span></span> <span data-ttu-id="5100b-201">默认实现将创建该类型的新实例或者它可能返回现有实例的值决定<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A>和<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="5100b-201">The default implementation creates a new instance of the type, or it may return an existing instance depending on the values of the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> and <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> properties.</span></span> <span data-ttu-id="5100b-202"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>方法使用反射来创建实例，并将执行一些常规<xref:System.IConvertible>查找匹配的构造函数的参数的转换。</span><span class="sxs-lookup"><span data-stu-id="5100b-202">The <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A> method uses reflection to create instances and will perform some generic <xref:System.IConvertible> transformations on parameters to find a matching constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">
          <span data-ttu-id="5100b-203">
            <paramref name="type" /> 不具有采用 <paramref name="arguments" /> 中包含的参数的构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-203">
              <paramref name="type" /> does not have a constructor that takes parameters contained in <paramref name="arguments" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      </Docs>
    </Member>
    <Member MemberName="CreateSession">
      <MemberSignature Language="C#" Value="public IDisposable CreateSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable CreateSession() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSession () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ CreateSession();" />
      <MemberSignature Language="F#" Value="member this.CreateSession : unit -&gt; IDisposable" Usage="designerSerializationManager.CreateSession " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5100b-204">创建新序列化会话。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-204">Creates a new serialization session.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5100b-205">表示新序列化会话的 <see cref="T:System.IDisposable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-205">An <see cref="T:System.IDisposable" /> that represents a new serialization session.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-206">序列化管理器中的大多数数据是暂时性的并仅序列化会话的生存期驻留。</span><span class="sxs-lookup"><span data-stu-id="5100b-206">Most data within the serialization manager is transient and only lives for the life of a serialization session.</span></span> <span data-ttu-id="5100b-207">当释放会话时，序列化被视为完成并清除此暂时性状态。</span><span class="sxs-lookup"><span data-stu-id="5100b-207">When a session is disposed, serialization is considered to be complete and this transient state is cleared.</span></span> <span data-ttu-id="5100b-208">这允许序列化管理器要用来序列化多个对象树的单个实例。</span><span class="sxs-lookup"><span data-stu-id="5100b-208">This allows a single instance of a serialization manager to be used to serialize multiple object trees.</span></span> <span data-ttu-id="5100b-209">一些状态，包括服务提供程序和任何自定义序列化提供程序已添加到序列化管理器、 跨会话。</span><span class="sxs-lookup"><span data-stu-id="5100b-209">Some state, including the service provider and any custom serialization providers that were added to the serialization manager, span sessions.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5100b-210">序列化管理器已经在一个会话中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-210">The serialization manager is already within a session.</span>
          </span>
          <span data-ttu-id="5100b-211">这一版的 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> 不支持同时会话。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-211">This version of <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> does not support simultaneous sessions.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Errors">
      <MemberSignature Language="C#" Value="public System.Collections.IList Errors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Errors" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Errors As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ Errors { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Errors : System.Collections.IList" Usage="System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5100b-212">获取在序列化或反序列化期间发生的错误的列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-212">Gets the list of errors that occurred during serialization or deserialization.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5100b-213">在序列化或反序列化期间发生的错误的列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-213">The list of errors that occurred during serialization or deserialization.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-214">序列化会话处于活动状态时，你只能读取错误列表。</span><span class="sxs-lookup"><span data-stu-id="5100b-214">You can only read the error list while a serialization session is active.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5100b-215">对该属性的访问是在序列化会话的外部进行的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-215">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeType">
      <MemberSignature Language="C#" Value="public Type GetRuntimeType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetRuntimeType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetRuntimeType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRuntimeType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetRuntimeType(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetRuntimeType : string -&gt; Type" Usage="designerSerializationManager.GetRuntimeType typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="5100b-216">要获取的类型的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-216">The name of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-217">获取与指定类型名称对应的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-217">Gets the type corresponding to the specified type name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5100b-218">指定的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-218">The specified type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSerializer">
      <MemberSignature Language="C#" Value="public object GetSerializer (Type objectType, Type serializerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetSerializer(class System.Type objectType, class System.Type serializerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSerializer (objectType As Type, serializerType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetSerializer(Type ^ objectType, Type ^ serializerType);" />
      <MemberSignature Language="F#" Value="member this.GetSerializer : Type * Type -&gt; obj" Usage="designerSerializationManager.GetSerializer (objectType, serializerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="serializerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType">
          <span data-ttu-id="5100b-219">要检索其序列化程序的对象的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-219">The type of object for which to retrieve the serializer.</span>
          </span>
        </param>
        <param name="serializerType">
          <span data-ttu-id="5100b-220">要检索的序列化程序的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-220">The type of serializer to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-221">获取给定对象类型的序列化程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-221">Gets the serializer for the given object type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5100b-222">
            <paramref name="objectType" /> 的序列化程序，或者，如果找不到序列化程序则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-222">The serializer for <paramref name="objectType" />, or <see langword="null" />, if not found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-223">你可以请求您想序列化程序的类型。</span><span class="sxs-lookup"><span data-stu-id="5100b-223">You can request the type of serializer you would like.</span></span> <span data-ttu-id="5100b-224">此方法返回`null`是否存在指定的对象类型所请求类型的任何序列化程序。</span><span class="sxs-lookup"><span data-stu-id="5100b-224">This method returns `null` if there is no serializer of the requested type for the specified object type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5100b-225">
            <paramref name="objectType" /> 或 <paramref name="serializerType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-225">
              <paramref name="objectType" /> or <paramref name="serializerType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected virtual object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="designerSerializationManager.GetService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <span data-ttu-id="5100b-226">要检索的服务类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-226">The type of service to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-227">获取请求的服务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-227">Gets the requested service.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5100b-228">所请求的服务，或者在无法解析服务的情况下为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-228">The requested service, or <see langword="null" /> if the service cannot be resolved.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-229"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService%2A>方法提供到基础容器或服务提供程序在构造函数中设置的访问。</span><span class="sxs-lookup"><span data-stu-id="5100b-229">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService%2A> method provides access to the underlying container or service provider that was set in the constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="protected virtual Type GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Type GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Type ^ GetType(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="override this.GetType : string -&gt; Type" Usage="designerSerializationManager.GetType typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="5100b-230">要检索的类型的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-230">The name of the type to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-231">获取请求的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-231">Gets the requested type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5100b-232">请求的类型，或者在无法解析类型的情况下为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-232">The requested type, or <see langword="null" /> if the type cannot be resolved.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-233"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A>方法将搜索的服务提供程序<xref:System.ComponentModel.Design.ITypeResolutionService>和，如果可用，它将委托给该服务要解析的类型。</span><span class="sxs-lookup"><span data-stu-id="5100b-233">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A> method will search the service provider for an <xref:System.ComponentModel.Design.ITypeResolutionService> and, if available, it will delegate to that service to resolve the type.</span></span> <span data-ttu-id="5100b-234">如果<xref:System.ComponentModel.Design.ITypeResolutionService>不可用，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A>将调用<xref:System.Object.GetType%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="5100b-234">If an <xref:System.ComponentModel.Design.ITypeResolutionService> is not available, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A> will call the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResolveName">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveName (System.ComponentModel.Design.Serialization.ResolveNameEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveName(class System.ComponentModel.Design.Serialization.ResolveNameEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveName (e As ResolveNameEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveName(System::ComponentModel::Design::Serialization::ResolveNameEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnResolveName : System.ComponentModel.Design.Serialization.ResolveNameEventArgs -&gt; unit&#xA;override this.OnResolveName : System.ComponentModel.Design.Serialization.ResolveNameEventArgs -&gt; unit" Usage="designerSerializationManager.OnResolveName e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="5100b-235">包含事件数据的 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-235">A <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-236">引发 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-236">Raises the <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-237">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="5100b-237">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="5100b-238">有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="5100b-238">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="5100b-239"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName%2A> 方法还允许派生类对事件进行处理而不必附加委托。</span><span class="sxs-lookup"><span data-stu-id="5100b-239">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="5100b-240">这是在派生类中处理事件的首选技术。</span><span class="sxs-lookup"><span data-stu-id="5100b-240">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="5100b-241">
            <para>重写时<see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" />方法，以便已注册的委托接收事件。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-241">
              <para>When overriding <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" /> method so that registered delegates receive the event.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSessionCreated : EventArgs -&gt; unit&#xA;override this.OnSessionCreated : EventArgs -&gt; unit" Usage="designerSerializationManager.OnSessionCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="5100b-242">包含事件数据的 <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-242">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-243">引发 <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-243">Raises the <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-244">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="5100b-244">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="5100b-245">有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="5100b-245">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="5100b-246"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated%2A> 方法还允许派生类对事件进行处理而不必附加委托。</span><span class="sxs-lookup"><span data-stu-id="5100b-246">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="5100b-247">这是在派生类中处理事件的首选技术。</span><span class="sxs-lookup"><span data-stu-id="5100b-247">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="5100b-248">
            <para>重写时<see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" />方法，以便已注册的委托接收事件。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-248">
              <para>When overriding <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" /> method so that registered delegates receive the event.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionDisposed">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionDisposed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionDisposed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionDisposed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionDisposed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSessionDisposed : EventArgs -&gt; unit&#xA;override this.OnSessionDisposed : EventArgs -&gt; unit" Usage="designerSerializationManager.OnSessionDisposed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="5100b-249">包含事件数据的 <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-249">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-250">引发 <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-250">Raises the <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-251">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="5100b-251">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="5100b-252">有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="5100b-252">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="5100b-253"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed%2A> 方法还允许派生类对事件进行处理而不必附加委托。</span><span class="sxs-lookup"><span data-stu-id="5100b-253">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="5100b-254">这是在派生类中处理事件的首选技术。</span><span class="sxs-lookup"><span data-stu-id="5100b-254">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="5100b-255">
            <para>重写时<see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" />方法，以便已注册的委托接收事件。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-255">
              <para>When overriding <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" /> method so that registered delegates receive the event.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PreserveNames">
      <MemberSignature Language="C#" Value="public bool PreserveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreserveNames" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property PreserveNames As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PreserveNames { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PreserveNames : bool with get, set" Usage="System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5100b-256">获取或设置一个值，指示 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 方法是否应该检查容器中是否存在给定名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-256">Gets or sets a value indicating whether the <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> method should check for the presence of the given name in the container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5100b-257">如果 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 将传递给定组件名称，则为 <see langword="true" />。如果 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 将检查容器中是否存在给定名称，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-257">
              <see langword="true" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will pass the given component name; <see langword="false" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will check for the presence of the given name in the container.</span>
          </span>
          <span data-ttu-id="5100b-258">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-258">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-259"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A>属性确定的行为<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5100b-259">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> property determines the behavior of the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> method.</span></span> <span data-ttu-id="5100b-260">如果`true`，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>将传递给定的组件名称。</span><span class="sxs-lookup"><span data-stu-id="5100b-260">If `true`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will pass the given component name.</span></span> <span data-ttu-id="5100b-261">如果`false`，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>将检查是否存在给定名称的容器中。</span><span class="sxs-lookup"><span data-stu-id="5100b-261">If `false`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will check for the presence of the given name in the container.</span></span> <span data-ttu-id="5100b-262">如果名称不存在的容器中，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>将使用给定的名称。</span><span class="sxs-lookup"><span data-stu-id="5100b-262">If the name does not exist in the container, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will use the given name.</span></span> <span data-ttu-id="5100b-263">如果在容器中，存在该名称<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>时将其添加到容器，从而为其提供新名称将会传递组件的名称为 null 值。</span><span class="sxs-lookup"><span data-stu-id="5100b-263">If the name does exist in the container, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will pass a null value as the name of a component when adding it to the container, thereby giving it a new name.</span></span> <span data-ttu-id="5100b-264">此第二个变体可用于实现序列化程序，它始终复制对象，而不是假定不存在这些对象。</span><span class="sxs-lookup"><span data-stu-id="5100b-264">This second variation is useful for implementing a serializer that always duplicates objects, rather than assuming those objects do not exist.</span></span> <span data-ttu-id="5100b-265">粘贴命令通常使用这种类型的序列化程序。</span><span class="sxs-lookup"><span data-stu-id="5100b-265">Paste commands often use this type of serializer.</span></span>  
  
 <span data-ttu-id="5100b-266">您不在序列化会话中时，仅可以更改此属性。</span><span class="sxs-lookup"><span data-stu-id="5100b-266">You can only change this property when you are not in a serialization session.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5100b-267">该属性已在序列化会话中发生更改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-267">This property was changed from within a serialization session.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PropertyProvider">
      <MemberSignature Language="C#" Value="public object PropertyProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PropertyProvider" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyProvider As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ PropertyProvider { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyProvider : obj with get, set" Usage="System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5100b-268">获取应该用于为序列化管理器的 <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> 属性提供属性的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-268">Gets the object that should be used to provide properties to the serialization manager's <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5100b-269">应该用于为序列化管理器的 <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> 属性提供属性的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-269">The object that should be used to provide properties to the serialization manager's <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-270"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider%2A>属性使您能够为序列化管理器提供一组序列化程序可用于指导其行为的序列化属性。</span><span class="sxs-lookup"><span data-stu-id="5100b-270">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider%2A> property provides a way to give the serialization manager a set of serialization properties that serializers can use to guide their behavior.</span></span>  
  
 <span data-ttu-id="5100b-271">将检查此对象的公共属性，并将其包装在包含目标对象的序列化管理器的新属性描述符。</span><span class="sxs-lookup"><span data-stu-id="5100b-271">This object's public properties will be inspected and wrapped in new property descriptors that have a target object of the serialization manager.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecycleInstances">
      <MemberSignature Language="C#" Value="public bool RecycleInstances { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RecycleInstances" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances" />
      <MemberSignature Language="VB.NET" Value="Public Property RecycleInstances As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RecycleInstances { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RecycleInstances : bool with get, set" Usage="System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5100b-272">获取或设置一个标志，指示 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 是否始终创建类型的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-272">Gets or sets a flag indicating whether <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will always create a new instance of a type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5100b-273">如果 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 将返回现有实例，则为 <see langword="true" />。如果 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 将创建类型的新实例，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-273">
              <see langword="true" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will return the existing instance; <see langword="false" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will create a new instance of a type.</span>
          </span>
          <span data-ttu-id="5100b-274">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-274">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-275">如果<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A>属性是`false`，则<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>方法将始终创建类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="5100b-275">If the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> property is `false`, the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> method will always create a new instance of a type.</span></span> <span data-ttu-id="5100b-276">如果<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A>是`true`，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>首先搜索名称表以及具有相同名称的对象的容器。</span><span class="sxs-lookup"><span data-stu-id="5100b-276">If <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> is `true`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will first search the name table and container for an object of the same name.</span></span> <span data-ttu-id="5100b-277">如果此类对象存在，并且是相同的类型，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>将返回现有实例。</span><span class="sxs-lookup"><span data-stu-id="5100b-277">If such an object exists and is of the same type, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will return the existing instance.</span></span> <span data-ttu-id="5100b-278">此第二个变体可用于实现应用到一组现有的对象，序列化状态的序列化，而不是始终创建新的树。</span><span class="sxs-lookup"><span data-stu-id="5100b-278">This second variation is useful for implementing a serializer that applies serialization state to an existing set of objects, rather than always creating a new tree.</span></span> <span data-ttu-id="5100b-279">**撤消**命令通常使用这种类型的序列化程序。</span><span class="sxs-lookup"><span data-stu-id="5100b-279">The **Undo** command often uses this type of serializer.</span></span>  
  
 <span data-ttu-id="5100b-280">在这种情况其中<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A>属性是`true`，则<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A>属性将进一步修改的行为<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>根据两个对象的类型。</span><span class="sxs-lookup"><span data-stu-id="5100b-280">In the case where the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> property is `true`, the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> property will further modify the behavior of <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> depending on the types of the two objects.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5100b-281">序列化管理器中有一个活动的序列化会话。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-281">The serialization manager has an active serialization session.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      </Docs>
    </Member>
    <Member MemberName="SessionCreated">
      <MemberSignature Language="C#" Value="public event EventHandler SessionCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SessionCreated" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SessionCreated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SessionCreated;" />
      <MemberSignature Language="F#" Value="member this.SessionCreated : EventHandler " Usage="member this.SessionCreated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5100b-282">在创建会话时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-282">Occurs when a session is created.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionDisposed">
      <MemberSignature Language="C#" Value="public event EventHandler SessionDisposed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SessionDisposed" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SessionDisposed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SessionDisposed;" />
      <MemberSignature Language="F#" Value="member this.SessionDisposed : EventHandler " Usage="member this.SessionDisposed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5100b-283">在释放会话时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-283">Occurs when a session is disposed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider">
      <MemberSignature Language="C#" Value="void IDesignerSerializationManager.AddSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(class System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      <MemberSignature Language="VB.NET" Value="Sub AddSerializationProvider (provider As IDesignerSerializationProvider) Implements IDesignerSerializationManager.AddSerializationProvider" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System::ComponentModel::Design::Serialization::IDesignerSerializationProvider ^ provider) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::AddSerializationProvider;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="5100b-284">要添加的序列化提供程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-284">The serialization provider to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-285">向序列化管理器添加自定义的序列化提供程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-285">Adds a custom serialization provider to the serialization manager.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-286">当<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A>方法用于请求序列化提供程序、 序列化管理器将查询首先之前查找类型的元数据中相应的序列化程序的自定义序列化提供程序。</span><span class="sxs-lookup"><span data-stu-id="5100b-286">When the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A> method is used to request a serialization provider, the serialization manager queries the custom serialization providers first before looking in the type's metadata for the appropriate serializer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <MemberSignature Language="C#" Value="System.ComponentModel.Design.Serialization.ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.Serialization.ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Context" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Context As ContextStack Implements IDesignerSerializationManager.Context" />
      <MemberSignature Language="C++ CLI" Value="property System::ComponentModel::Design::Serialization::ContextStack ^ System::ComponentModel::Design::Serialization::IDesignerSerializationManager::Context { System::ComponentModel::Design::Serialization::ContextStack ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.Serialization.ContextStack</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5100b-287">获取该序列化会话的上下文堆栈。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-287">Gets the context stack for this serialization session.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5100b-288">存储数据的 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-288">A <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> that stores data.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-289">上下文堆栈提供一个用户定义的存储区域，用作堆栈实现。</span><span class="sxs-lookup"><span data-stu-id="5100b-289">A context stack provides a user-defined storage area, implemented as a stack.</span></span> <span data-ttu-id="5100b-290">此存储区域是有用的方式在序列化程序之间提供通信，因为序列化是一个通常层次结构的过程。</span><span class="sxs-lookup"><span data-stu-id="5100b-290">This storage area is a useful way to provide communication across serializers, as serialization is a generally hierarchical process.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5100b-291">对该属性的访问是在序列化会话的外部进行的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-291">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.ContextStack" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance">
      <MemberSignature Language="C#" Value="object IDesignerSerializationManager.CreateInstance (Type type, System.Collections.ICollection arguments, string name, bool addToContainer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(class System.Type type, class System.Collections.ICollection arguments, string name, bool addToContainer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type ^ type, System::Collections::ICollection ^ arguments, System::String ^ name, bool addToContainer) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::CreateInstance;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.ICollection" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="addToContainer" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="5100b-292">要创建的数据类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-292">The data type to create.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="5100b-293">要传递到此类型的构造函数的参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-293">The arguments to pass to the constructor for this type.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="5100b-294">对象的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-294">The name of the object.</span>
          </span>
          <span data-ttu-id="5100b-295">此名称可用于以后通过 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" /> 访问该对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-295">This name can be used to access the object later through <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />.</span>
          </span>
          <span data-ttu-id="5100b-296">如果传递了 <see langword="null" />，则仍将创建该对象，但无法按名称访问它。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-296">If <see langword="null" /> is passed, the object is still created but cannot be accessed by name.</span>
          </span>
        </param>
        <param name="addToContainer">
          <span data-ttu-id="5100b-297">要将该对象添加到设计容器中，则为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-297">
              <see langword="true" /> to add this object to the design container.</span>
          </span>
          <span data-ttu-id="5100b-298">该对象必须实现 <see cref="T:System.ComponentModel.IComponent" /> 才能使此功能生效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-298">The object must implement <see cref="T:System.ComponentModel.IComponent" /> for this to have any effect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-299">实现 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-299">Implements the <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5100b-300">新创建的对象实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-300">The newly created object instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance">
      <MemberSignature Language="C#" Value="object IDesignerSerializationManager.GetInstance (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetInstance (name As String) As Object Implements IDesignerSerializationManager.GetInstance" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System::String ^ name) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::GetInstance;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="5100b-301">要检索的对象的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-301">The name of the object to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-302">检索具有指定名称的创建对象的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-302">Retrieves an instance of a created object of the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5100b-303">具有给定名称的对象的实例，如果按该名称无法找到任何对象则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-303">An instance of the object with the given name, or <see langword="null" /> if no object by that name can be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5100b-304">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-304">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5100b-305">对该属性的访问是在序列化会话的外部进行的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-305">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName">
      <MemberSignature Language="C#" Value="string IDesignerSerializationManager.GetName (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetName (value As Object) As String Implements IDesignerSerializationManager.GetName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System::Object ^ value) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::GetName;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="5100b-306">要检索其名称的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-306">The object for which to retrieve the name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-307">为指定的对象检索名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-307">Retrieves a name for the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5100b-308">对象的名称，如果对象是未命名的，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-308">The name of the object, or <see langword="null" /> if the object is unnamed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-309">如果<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetName%2A>方法找不到的相应名称`value`参数，它会发出<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName>事件，然后它将返回`null`。</span><span class="sxs-lookup"><span data-stu-id="5100b-309">If the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetName%2A> method cannot find a corresponding name for the `value` parameter, it raises the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> event before it returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5100b-310">
            <paramref name="value" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-310">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5100b-311">对该属性的访问是在序列化会话的外部进行的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-311">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)" />
        <altmember cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer">
      <MemberSignature Language="C#" Value="object IDesignerSerializationManager.GetSerializer (Type objectType, Type serializerType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(class System.Type objectType, class System.Type serializerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetSerializer(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function GetSerializer (objectType As Type, serializerType As Type) As Object Implements IDesignerSerializationManager.GetSerializer" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type ^ objectType, Type ^ serializerType) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::GetSerializer;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="serializerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType">
          <span data-ttu-id="5100b-312">要为其获取序列化程序的对象类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-312">The type of the object to get the serializer for.</span>
          </span>
        </param>
        <param name="serializerType">
          <span data-ttu-id="5100b-313">要检索的序列化程序的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-313">The type of the serializer to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-314">为指定对象类型获取所请求类型的序列化程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-314">Gets a serializer of the requested type for the specified object type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5100b-315">请求的序列化程序的实例，如果不能找到任何适当的序列化程序，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-315">An instance of the requested serializer, or <see langword="null" /> if no appropriate serializer can be located.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType">
      <MemberSignature Language="C#" Value="Type IDesignerSerializationManager.GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetType (typeName As String) As Type Implements IDesignerSerializationManager.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System::String ^ typeName) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::GetType;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="5100b-316">要加载的类型的完全限定名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-316">The fully qualified name of the type to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-317">获取指定名称的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-317">Gets a type of the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5100b-318">该类型的实例，如果无法加载该类型，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-318">An instance of the type, or <see langword="null" /> if the type cannot be loaded.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5100b-319">对该属性的访问是在序列化会话的外部进行的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-319">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <MemberSignature Language="C#" Value="System.ComponentModel.PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Properties As PropertyDescriptorCollection Implements IDesignerSerializationManager.Properties" />
      <MemberSignature Language="C++ CLI" Value="property System::ComponentModel::PropertyDescriptorCollection ^ System::ComponentModel::Design::Serialization::IDesignerSerializationManager::Properties { System::ComponentModel::PropertyDescriptorCollection ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5100b-320">实现 <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-320">Implements the <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5100b-321">包含要进行序列化的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-321">A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> containing the properties to be serialized.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider">
      <MemberSignature Language="C#" Value="void IDesignerSerializationManager.RemoveSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(class System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveSerializationProvider (provider As IDesignerSerializationProvider) Implements IDesignerSerializationManager.RemoveSerializationProvider" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System::ComponentModel::Design::Serialization::IDesignerSerializationProvider ^ provider) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::RemoveSerializationProvider;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="5100b-322">要移除的 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-322">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" /> to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-323">移除以前添加的序列化提供程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-323">Removes a previously added serialization provider.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-324"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23RemoveSerializationProvider%2A>方法中删除自定义序列化提供程序通过调用以前添加<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23AddSerializationProvider%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5100b-324">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23RemoveSerializationProvider%2A> method removes a custom serialization provider that was previously added by a call to the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23AddSerializationProvider%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError">
      <MemberSignature Language="C#" Value="void IDesignerSerializationManager.ReportError (object errorInformation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(object errorInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ReportError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub ReportError (errorInformation As Object) Implements IDesignerSerializationManager.ReportError" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System::Object ^ errorInformation) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::ReportError;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorInformation" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="errorInformation">
          <span data-ttu-id="5100b-325">包含错误信息的对象，其类型通常为 <see cref="T:System.String" /> 或 <see cref="T:System.Exception" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-325">An object containing the error information, usually of type <see cref="T:System.String" /> or <see cref="T:System.Exception" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-326">用于报告序列化中可以恢复的错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-326">Used to report a recoverable error in serialization.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-327">序列化程序可以编写为通过调用适当地处理可恢复的错误<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23ReportError%2A>错误信息的方法。</span><span class="sxs-lookup"><span data-stu-id="5100b-327">Serializers can be written to handle recoverable errors gracefully by calling the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23ReportError%2A> method with the error information.</span></span> <span data-ttu-id="5100b-328">序列化管理器可能支持后其完成后，也可以从该方法引发了异常并中止序列化过程报告错误的列表。</span><span class="sxs-lookup"><span data-stu-id="5100b-328">The serialization manager may support reporting a list of errors after it completes, or it may throw an exception from this method and abort the serialization process.</span></span> <span data-ttu-id="5100b-329">序列化程序应调用此函数后继续。</span><span class="sxs-lookup"><span data-stu-id="5100b-329">The serializer should continue after calling this function.</span></span>  
  
 <span data-ttu-id="5100b-330"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23ReportError%2A> 将添加`errorInformation`参数<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="5100b-330"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23ReportError%2A> adds the `errorInformation` parameter to the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> collection.</span></span> <span data-ttu-id="5100b-331">如果`errorInformation`是`null`，不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="5100b-331">If `errorInformation` is `null`, no action is taken.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5100b-332">对该属性的访问是在序列化会话的外部进行的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-332">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors" />
        <altmember cref="M:System.Collections.ArrayList.Add(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <MemberSignature Language="C#" Value="event System.ComponentModel.Design.Serialization.ResolveNameEventHandler System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.Design.Serialization.ResolveNameEventHandler System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ResolveName" />
      <MemberSignature Language="VB.NET" Value="Custom Event ResolveName As ResolveNameEventHandler Implements System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.Serialization.ResolveNameEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <MemberSignature Language="C#" Value="event EventHandler System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SerializationComplete" />
      <MemberSignature Language="VB.NET" Value="Custom Event SerializationComplete As EventHandler Implements System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName">
      <MemberSignature Language="C#" Value="void IDesignerSerializationManager.SetName (object instance, string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(object instance, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub SetName (instance As Object, name As String) Implements IDesignerSerializationManager.SetName" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System::Object ^ instance, System::String ^ name) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::SetName;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="5100b-333">要设置名称的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-333">The object to set the name.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="5100b-334">用作对象名称的 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-334">A <see cref="T:System.String" /> used as the name of the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-335">设置指定对象的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-335">Sets the name for the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-336"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23SetName%2A>方法提供了一种方法可设置现有对象的名称。</span><span class="sxs-lookup"><span data-stu-id="5100b-336">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23SetName%2A> method provides a way to set the name of an existing object.</span></span> <span data-ttu-id="5100b-337">这可以通过调用对象的实例创建<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetInstance%2A>方法，避免的开销<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5100b-337">This enables creation of an instance of the object through a call to the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetInstance%2A> method, avoiding the overhead of the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5100b-338">两个参数之一或两个参数均为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-338">One or both of the parameters are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5100b-339">实例指定的对象已经有名称，或者 <paramref name="name" /> 已被另一个命名对象使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-339">The object specified by instance already has a name, or <paramref name="name" /> is already used by another named object.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5100b-340">对该属性的访问是在序列化会话的外部进行的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-340">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="System.IServiceProvider.GetService">
      <MemberSignature Language="C#" Value="object IServiceProvider.GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IServiceProvider.GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#IServiceProvider#GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function GetService (serviceType As Type) As Object Implements IServiceProvider.GetService" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IServiceProvider.GetService(Type ^ serviceType) = IServiceProvider::GetService;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <span data-ttu-id="5100b-341">一个对象，它指定要获取的服务对象的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-341">An object that specifies the type of service object to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5100b-342">有关此成员的说明，请参见 <see cref="M:System.IServiceProvider.GetService(System.Type)" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-342">For a description of this member, see the <see cref="M:System.IServiceProvider.GetService(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5100b-343">
            <paramref name="serviceType" /> 类型的服务对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-343">A service object of type <paramref name="serviceType" />.</span>
          </span>
          <span data-ttu-id="5100b-344">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-344">-or-</span>
          </span>
          <span data-ttu-id="5100b-345">如果没有 <paramref name="serviceType" /> 类型的服务对象，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-345">
              <see langword="null" /> if there is no service object of type <paramref name="serviceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-346">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="5100b-346">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="5100b-347">它只能在 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> 实例强制转换为 <xref:System.IServiceProvider> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="5100b-347">It can be used only when the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> instance is cast to an <xref:System.IServiceProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateRecycledTypes">
      <MemberSignature Language="C#" Value="public bool ValidateRecycledTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateRecycledTypes" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateRecycledTypes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateRecycledTypes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateRecycledTypes : bool with get, set" Usage="System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5100b-348">获取或设置一个标志，指示 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 方法是否验证匹配的名称是否表示同一类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-348">Gets or sets a flag indicating whether the <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> method will verify that matching names refer to the same type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5100b-349">如果 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 验证类型，则为 <see langword="true" />；否则，如果不验证类型，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-349">
              <see langword="true" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> verifies types; otherwise, <see langword="false" /> if it does not.</span>
          </span>
          <span data-ttu-id="5100b-350">默认值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-350">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5100b-351"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A>属性修改的行为<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>方法时<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A>属性是`true`下, 表中所述。</span><span class="sxs-lookup"><span data-stu-id="5100b-351">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> property modifies the behavior of the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> method when the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> property is `true`, as detailed in the following table.</span></span>  
  
|`RecycleInstances`|`ValidateRecycledTypes`|<span data-ttu-id="5100b-352">行为 `CreateInstance`</span><span class="sxs-lookup"><span data-stu-id="5100b-352">Behavior of `CreateInstance`</span></span>|  
|------------------------|-----------------------------|----------------------------------|  
|`false`|<span data-ttu-id="5100b-353">`true` 或 `false`</span><span class="sxs-lookup"><span data-stu-id="5100b-353">`true` or `false`</span></span>|<span data-ttu-id="5100b-354">始终创建指定类型的新实例</span><span class="sxs-lookup"><span data-stu-id="5100b-354">Always create a new instance of the specified type</span></span>|  
|`true`|`false`|<span data-ttu-id="5100b-355">如果没有找到匹配的实例，则返回它，而不考虑其类型。</span><span class="sxs-lookup"><span data-stu-id="5100b-355">If a matching instance is found it is returned, regardless of its type.</span></span>|  
|`true`|`true`|<span data-ttu-id="5100b-356">如果找到匹配的实例，则返回仅当其类型为方法调用中指定相同。</span><span class="sxs-lookup"><span data-stu-id="5100b-356">If a matching instance is found, it is returned only if its type is the same as specified in the method call.</span></span>|  
  
 <span data-ttu-id="5100b-357"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> 对于变形如果他们具有相似的属性，但共享没有共同的父级或接口的一种类型的对象和另一个非常有用。</span><span class="sxs-lookup"><span data-stu-id="5100b-357"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> is useful for morphing one type of object to another if they have similar properties but share no common parent or interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5100b-358">序列化管理器中有一个活动的序列化会话。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5100b-358">The serialization manager has an active serialization session.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances" />
      </Docs>
    </Member>
  </Members>
</Type>