<Type Name="CryptoProvider" FullName="System.Security.RightsManagement.CryptoProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bc0cdaf3c7e863e24d9544ba9e917e3485b4ad4d" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33660093" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CryptoProvider : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CryptoProvider extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.RightsManagement.CryptoProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class CryptoProvider&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CryptoProvider : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为加密和解密受保护的内容提供数字权限管理服务。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider> 为创建<xref:System.Security.RightsManagement.UseLicense.Bind%2A>方法绑定权限管理时<xref:System.Security.RightsManagement.UseLicense>到<xref:System.Security.RightsManagement.SecureEnvironment>。  
  
 与其他<xref:System.Security.RightsManagement>类型，<xref:System.Security.RightsManagement.CryptoProvider>只能是在完全信任应用程序中可用。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Security.RightsManagement.CryptoProvider>类，以创建<xref:System.IO.Packaging.EncryptedPackageEnvelope>。  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.RightsManagement.UseLicense" />
    <altmember cref="T:System.Security.RightsManagement.SecureEnvironment" />
  </Docs>
  <Members>
    <Member MemberName="BlockSize">
      <MemberSignature Language="C#" Value="public int BlockSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BlockSize" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.BlockSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BlockSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BlockSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取密码块大小（以字节为单位）。</summary>
        <value>密码块大小（以字节为单位）。  默认块大小的高级加密标准 (AES) 为 8。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `clearText`和`cipherText`缓冲区传递到<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>和<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>必须 n *<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>字节的长度，其中 n 是一个整数，大于或等于 1。  
  
 如果<xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>是`false`，缓冲区传递到<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>必须是长度相同，因为缓冲区传递到<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>。  
  
 如果<xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>是`true`，缓冲区传递到<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>可以传递到的缓冲区的长度不同<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>(所有的缓冲区大小仍然必须始终为的倍数<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>的长度的字节)。  
  
 A <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> 1 表示密码是一种流密码; <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> 2 或更高版本的指示块密码。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>中将纯文本数据转换为加密文本数据的属性。  
  
 [!code-csharp[RightsManagedContentPublish#RmContPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentPublish/CSharp/Window1.xaml.cs#rmcontpubencrypt)]
 [!code-vb[RightsManagedContentPublish#RmContPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentPublish/visualbasic/window1.xaml.vb#rmcontpubencrypt)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundGrants">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.RightsManagement.ContentGrant&gt; BoundGrants { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.RightsManagement.ContentGrant&gt; BoundGrants" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.BoundGrants" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BoundGrants As ReadOnlyCollection(Of ContentGrant)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::RightsManagement::ContentGrant ^&gt; ^ BoundGrants { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::RightsManagement::ContentGrant ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.RightsManagement.ContentGrant&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个集合，该集合列出已通过验证并授予用户的权限。</summary>
        <value>一个集合，枚举已通过验证并向用户授予的权限。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用<xref:System.Security.RightsManagement.CryptoProvider.BoundGrants%2A>属性来获取通过授予的权限的列表<xref:System.Security.RightsManagement.UseLicense>。  
  
 [!code-csharp[RightsManagedContentViewer#RmContViewUseLicense](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentViewer/CSharp/Window1.xaml.cs#rmcontviewuselicense)]
 [!code-vb[RightsManagedContentViewer#RmContViewUseLicense](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentViewer/visualbasic/window1.xaml.vb#rmcontviewuselicense)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanDecrypt">
      <MemberSignature Language="C#" Value="public bool CanDecrypt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanDecrypt" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanDecrypt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanDecrypt { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个指示用户是否有解密权限的值。</summary>
        <value>**true**如果<see cref="T:System.Security.RightsManagement.UseLicense" />授予用户权限才可以解密; 否则为**false**。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A> 返回**true**如果<xref:System.Security.RightsManagement.UseLicense>绑定到此<xref:System.Security.RightsManagement.CryptoProvider>授予读取访问权限，例如，查看、 编辑、 打印或所有者的用户。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A>属性来确定是否允许解密。  
  
 [!code-csharp[RightsManagedContentViewer#RmContViewUseLicense](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentViewer/CSharp/Window1.xaml.cs#rmcontviewuselicense)]
 [!code-vb[RightsManagedContentViewer#RmContViewUseLicense](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentViewer/visualbasic/window1.xaml.vb#rmcontviewuselicense)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt" />
        <altmember cref="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)" />
      </Docs>
    </Member>
    <Member MemberName="CanEncrypt">
      <MemberSignature Language="C#" Value="public bool CanEncrypt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEncrypt" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanEncrypt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanEncrypt { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个指示用户是否有加密权限的值。</summary>
        <value>**true**如果<see cref="T:System.Security.RightsManagement.UseLicense" />授予用户权限来加密; 否则为**false**。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A> 返回**true**如果<xref:System.Security.RightsManagement.UseLicense>绑定到此<xref:System.Security.RightsManagement.CryptoProvider>授予诸如编辑或所有者等的写访问权限的用户。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt" />
        <altmember cref="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)" />
      </Docs>
    </Member>
    <Member MemberName="CanMergeBlocks">
      <MemberSignature Language="C#" Value="public bool CanMergeBlocks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanMergeBlocks" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanMergeBlocks As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanMergeBlocks { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> 和 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> 是否可以接受块长度不同的缓冲区。</summary>
        <value>**true**如果缓冲区传递给<see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />可以传递给的缓冲区的长度不同<see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />; 否则为**false**如果缓冲区传递给<see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />和<see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />必须完全长度相同。  默认值是 aes **true**。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `clearText`和`cipherText`缓冲区传递到<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>和<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>必须 n *<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>字节的长度，其中 n 是一个整数，大于或等于 1。  
  
 如果<xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>是**false**，缓冲区传递到<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>必须是长度相同，因为缓冲区传递到<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>。  
  
 如果<xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>是**true**，缓冲区传递到<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>可以传递到的缓冲区的长度不同<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>(所有的缓冲区大小仍然必须始终为的倍数<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>的长度的字节)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public byte[] Decrypt (byte[] cryptoText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Decrypt(unsigned int8[] cryptoText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Decrypt (cryptoText As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Decrypt(cli::array &lt;System::Byte&gt; ^ cryptoText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cryptoText" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="cryptoText">要解密的密码文本。</param>
        <summary>将密码文本解密为明文。</summary>
        <returns>
          <paramref name="cryptoText" /> 的解密明文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>方法将加密的数据转换为未加密的数据。  
  
 [!code-csharp[RightsManagedContentViewer#RmContViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentViewer/CSharp/Window1.xaml.cs#rmcontviewdecrypt)]
 [!code-vb[RightsManagedContentViewer#RmContViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentViewer/visualbasic/window1.xaml.vb#rmcontviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cipherText" /> 为 null。</exception>
        <exception cref="T:System.Security.RightsManagement.RightsManagementException">未授予解密权限。</exception>
        <altmember cref="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt" />
        <altmember cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>释放由 <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 占用的资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A> 执行<xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>(**true**)。  
  
 在完成使用 <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A> 后，应调用 <xref:System.Security.RightsManagement.CryptoProvider>。 <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A> 方法使 <xref:System.Security.RightsManagement.CryptoProvider> 处于不可用状态。 在调用<xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>，必须释放对所有引用<xref:System.Security.RightsManagement.CryptoProvider>以便垃圾回收器才能回收的内存，<xref:System.Security.RightsManagement.CryptoProvider>占用。 有关详细信息，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  每次释放对 <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Security.RightsManagement.CryptoProvider>。 否则，在垃圾回收器调用 <xref:System.Security.RightsManagement.CryptoProvider> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法称为由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。 `Dispose()` 调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A> 调用`Dispose`与`disposing`设置为`false`。  
  
 当`disposing`参数为 true 时，此方法释放由任何托管对象持有的全部资源此<xref:System.Security.RightsManagement.CryptoProvider>引用。 此方法调用每个引用对象的 `Dispose()` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> 可以由其他对象多次调用。 在重写<see langword="Dispose(Boolean)" />请注意不要引用已释放的以前调用中的对象<see langword="Dispose" />。 有关如何实现详细信息<see langword="Dispose(Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
 有关详细信息<see langword="Dispose" />和<see cref="M:System.Object.Finalize" />，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[重写 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public byte[] Encrypt (byte[] clearText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Encrypt(unsigned int8[] clearText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Encrypt (clearText As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Encrypt(cli::array &lt;System::Byte&gt; ^ clearText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clearText" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="clearText">要加密的明文内容。</param>
        <summary>将明文加密为密文。</summary>
        <returns>指定 <paramref name="clearText" /> 的已加密密文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 字节长度的`clearText`缓冲区应该是加密的倍数<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>属性。  
  
 数字权限管理系统使用 AES 块密码。  使用 AES，块都加密独立这样，两个相同的明文块生成相同的密码文本结果。  为了尽量减少来自独立块加密的潜在解密威胁，应用程序应该采用各种方法来修改内容，例如压缩，以避免加密相同的明文块。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>方法将纯文本数据转换为加密文本数据。  
  
 [!code-csharp[RightsManagedContentPublish#RmContPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentPublish/CSharp/Window1.xaml.cs#rmcontpubencrypt)]
 [!code-vb[RightsManagedContentPublish#RmContPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentPublish/visualbasic/window1.xaml.vb#rmcontpubencrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="clearText" /> 为 null。</exception>
        <exception cref="T:System.Security.RightsManagement.RightsManagementException">不允许加密。</exception>
        <altmember cref="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt" />
        <altmember cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CryptoProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!CryptoProvider ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在通过垃圾回收将实例回收之前，释放资源并执行内部清理。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider.Finalize%2A> 执行<xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>(**false**)。  
  
 此方法将替代<xref:System.Object.Finalize%2A>。 应用程序代码不应调用此方法。对象的`Finalize`方法过程中将自动调用垃圾回收，除非已通过调用禁用垃圾回收器的终止<xref:System.GC.SuppressFinalize%2A>方法。  
  
 有关详细信息，请参阅[Finalize 方法和析构函数](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)，[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)，和[重写 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>