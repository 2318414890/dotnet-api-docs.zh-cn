<Type Name="IConfigurationSectionHandler" FullName="System.Configuration.IConfigurationSectionHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="384d73827fca9429904bc08c858c97e1699a071d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36696660" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IConfigurationSectionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IConfigurationSectionHandler" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IConfigurationSectionHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConfigurationSectionHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IConfigurationSectionHandler" />
  <TypeSignature Language="F#" Value="type IConfigurationSectionHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>处理对特定的配置节的访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **重要**<xref:System.Configuration.IConfigurationSectionHandler>在.NET Framework 2.0 及更高版本已弃用。 但是，因为它在内部使用，而保留。 你可以找到处的一个示例[如何： 创建自定义配置节使用 IConfigurationSectionHandler](http://msdn.microsoft.com/library/07f68a3f-2920-4665-a824-47bda744e662)。 如果你使用前面的示例，请把它生成.NET framework 版本 1.0 或 1.1。  
  
 在.NET Framework 2.0 版和更高版本，你必须改为派生自<xref:System.Configuration.ConfigurationSection>类，以实现相关的配置节处理程序。 你可以找到处的一个示例[如何： 创建自定义配置节使用 ConfigurationSection](http://msdn.microsoft.com/library/febaca98-c727-4017-95ed-82e2fb6cf234)。  
  
 实例<xref:System.Configuration.IConfigurationSectionHandler>类必须是线程安全且无状态。 <xref:System.Configuration.IConfigurationSectionHandler.Create%2A>方法同时必须可以从多个线程调用。  
  
 此外，配置对象生成的<xref:System.Configuration.IConfigurationSectionHandler.Create%2A>方法必须是线程安全且不可变。 配置对象将缓存由配置系统，因为很重要，不能修改的父参数<xref:System.Configuration.IConfigurationSectionHandler.Create%2A>方法。 例如，如果返回值的<xref:System.Configuration.IConfigurationSectionHandler.Create%2A>是小进行修改的父级，必须在父，而不是原始的克隆上进行实际的修改。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public object Create (object parent, object configContext, System.Xml.XmlNode section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Create(object parent, object configContext, class System.Xml.XmlNode section) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Create (parent As Object, configContext As Object, section As XmlNode) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Create(System::Object ^ parent, System::Object ^ configContext, System::Xml::XmlNode ^ section);" />
      <MemberSignature Language="F#" Value="abstract member Create : obj * obj * System.Xml.XmlNode -&gt; obj" Usage="iConfigurationSectionHandler.Create (parent, configContext, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="System.Object" />
        <Parameter Name="configContext" Type="System.Object" />
        <Parameter Name="section" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="parent">父对象。</param>
        <param name="configContext">配置上下文对象。</param>
        <param name="section">部分 XML 节点。</param>
        <summary>创建配置节处理程序。</summary>
        <returns>创建的节处理程序对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实例<xref:System.Configuration.IConfigurationSectionHandler>类必须是线程安全且无状态。 <xref:System.Configuration.IConfigurationSectionHandler.Create%2A>方法同时必须可以从多个线程调用。  
  
 此外，配置对象生成的<xref:System.Configuration.IConfigurationSectionHandler.Create%2A>方法必须是线程安全且不可变。 配置对象将缓存由配置系统，因为很重要，不能修改的父参数<xref:System.Configuration.IConfigurationSectionHandler.Create%2A>。 例如，如果返回值的<xref:System.Configuration.IConfigurationSectionHandler.Create%2A>是小进行修改的父级，必须在父，而不是原始的克隆上进行实际的修改。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.ConfigurationSection" />
      </Docs>
    </Member>
  </Members>
</Type>