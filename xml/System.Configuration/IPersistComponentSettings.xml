<Type Name="IPersistComponentSettings" FullName="System.Configuration.IPersistComponentSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aca24bd7c9f8b520e29b48c5879e79b186e542d0" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51881722" /></Metadata><TypeSignature Language="C#" Value="public interface IPersistComponentSettings" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersistComponentSettings" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IPersistComponentSettings" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersistComponentSettings" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersistComponentSettings" />
  <TypeSignature Language="F#" Value="type IPersistComponentSettings = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8ccb7-101">定义存储和检索应用程序设置的控件或类的标准功能。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-101">Defines standard functionality for controls or libraries that store and retrieve application settings.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ccb7-102">通常情况下，您可以添加应用程序设置支持对应用程序通过创建设置包装类，该类派生自<xref:System.Configuration.ApplicationSettingsBase>，然后将特殊属性添加到此类。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-102">Typically, you can add application settings support to an application by creating a settings wrapper class, which is derived from <xref:System.Configuration.ApplicationSettingsBase>, and then add special properties to this class.</span></span> <span data-ttu-id="8ccb7-103">但是，这种方法不足够的封装应用程序设置的控件，以便其容器受防护的详细信息。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-103">However, this approach does not sufficiently encapsulate application settings for a control so that its container is shielded from the details.</span></span> <span data-ttu-id="8ccb7-104"><xref:System.Configuration.IPersistComponentSettings>接口提供了用于应用程序设置状态更改请求设置为控件、 组件或库模块进行通信的标准接口具有的应用程序。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-104">The <xref:System.Configuration.IPersistComponentSettings> interface provides an application with a standard interface for communicating application settings state change requests to a control, component, or library module.</span></span> <span data-ttu-id="8ccb7-105">设计时工具还依赖于此接口，以便正确地管理控件和组件。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-105">Design-time tools also depend on this interface to properly manage controls and components.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
    <related type="Article" href="https://msdn.microsoft.com/library/f44afb74-76cc-44f2-890a-44b7cdc211a1"><span data-ttu-id="8ccb7-106">自定义控件的应用程序设置</span><span class="sxs-lookup"><span data-stu-id="8ccb7-106">Application Settings for Custom Controls</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="LoadComponentSettings">
      <MemberSignature Language="C#" Value="public void LoadComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member LoadComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.LoadComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ccb7-107">将控件的应用程序设置读入相应的属性中，并更新控件状态。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-107">Reads the control's application settings into their corresponding properties and updates the control's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ccb7-108">一般情况下，<xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A>方法执行两项主要操作：</span><span class="sxs-lookup"><span data-stu-id="8ccb7-108">In general, the <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> method performs two essential operations:</span></span>  
  
-   <span data-ttu-id="8ccb7-109">它会导致控件以刷新其应用程序设置属性的值通常通过调用包含的每个应用程序设置实例及其<xref:System.Configuration.ApplicationSettingsBase.Reload%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-109">It causes each application settings instance contained by the control to refresh the values of its application settings properties, typically by calling their <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods.</span></span>  
  
-   <span data-ttu-id="8ccb7-110">根据需要，它会更新依赖于这些重新加载设置属性的常规属性。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-110">As required, it updates those general properties that depend on these reloaded settings properties.</span></span> <span data-ttu-id="8ccb7-111">例如，如果设置类包含`location`设置属性<xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A>应确保控件的<xref:System.Windows.Forms.Control.Location%2A>属性会更新以反映重新加载的设置。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-111">For example, if the settings class contained a `location` settings property, <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> should ensure that the control's <xref:System.Windows.Forms.Control.Location%2A> property is updated to reflect this reloaded setting.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
      </Docs>
    </Member>
    <Member MemberName="ResetComponentSettings">
      <MemberSignature Language="C#" Value="public void ResetComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member ResetComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.ResetComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ccb7-112">将控件的应用程序设置属性重置为其默认值。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-112">Resets the control's application settings properties to their default values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ccb7-113">实现<xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A>方法通常会调用<xref:System.Configuration.ApplicationSettingsBase.Reset%2A>它包含应用程序设置类的每个实例上的方法。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-113">The implementation of the <xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A> method typically calls the <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method on each instance of an application settings class it contains.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
      </Docs>
    </Member>
    <Member MemberName="SaveComponentSettings">
      <MemberSignature Language="C#" Value="public void SaveComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SaveComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member SaveComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.SaveComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ccb7-114">保持控件的应用程序设置属性。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-114">Persists the control's application settings properties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ccb7-115"><xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A>方法将控件的应用程序设置属性的值写入到关联的数据存储区。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-115">The <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> method writes the values of the control's application settings properties to the associated data store.</span></span> <span data-ttu-id="8ccb7-116">该方法使用的数据存储区和序列化技术由通过每个设置类与关联的设置提供程序<xref:System.Configuration.SettingsProviderAttribute>。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-116">The data store and serialization technique the method uses is determined by the settings provider associated with each settings class through the <xref:System.Configuration.SettingsProviderAttribute>.</span></span> <span data-ttu-id="8ccb7-117">可以通过使用所选的设置提供程序的重写<xref:System.Configuration.ISettingsProviderService>接口。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-117">You can override the choice of the settings provider by using the <xref:System.Configuration.ISettingsProviderService> interface.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ccb7-118">如果<xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A>属性是`true`，该控件应调用<xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A>入其自己<xref:System.Windows.Forms.Control.Dispose%2A>方法，以使应用程序结束之前自动存储控件的配置数据。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-118">If the <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property is `true`, the control should call <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> in its own <xref:System.Windows.Forms.Control.Dispose%2A> method so that the control's configuration data is stored automatically before the application ends.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="T:System.Configuration.SettingsProvider" />
        <altmember cref="T:System.Configuration.LocalFileSettingsProvider" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="T:System.Configuration.ISettingsProviderService" />
      </Docs>
    </Member>
    <Member MemberName="SaveSettings">
      <MemberSignature Language="C#" Value="public bool SaveSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveSettings" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveSettings As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveSettings { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SaveSettings : bool with get, set" Usage="System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ccb7-119">获取或设置一个值，该值指示控件是否应自动保持其应用程序设置属性。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-119">Gets or sets a value indicating whether the control should automatically persist its application settings properties.</span></span></summary>
        <value><span data-ttu-id="8ccb7-120">如果控件应自动保持其状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-120"><see langword="true" /> if the control should automatically persist its state; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ccb7-121">如果控件包含配置数据，它通常将保留此数据以响应对的显式调用<xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A>方法或有时隐式时控件的<xref:System.Windows.Forms.Control.Dispose%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-121">If a control contains configuration data, it will typically persist this data in response to an explicit call to the <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> method or sometimes implicitly when the control's <xref:System.Windows.Forms.Control.Dispose%2A> method is invoked.</span></span> <span data-ttu-id="8ccb7-122"><xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A>属性确定是否控件自动保持其配置数据时被释放。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-122">The <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property determines whether a control automatically persists its configuration data when it is disposed.</span></span>  
  
 <span data-ttu-id="8ccb7-123">默认值<xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A>取决于控件的实现。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-123">The default value of <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> depends on the implementation of the control.</span></span> <span data-ttu-id="8ccb7-124">控件的文档应指示其是否使用应用程序设置、 数据保持不变，和的默认值<xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-124">The documentation for the control should indicate whether it uses application settings, what data is persisted, and what the default value of the <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property is.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ccb7-125">下面的代码示例显示了一个控件，若要检查的值的正确方法<xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A>属性之前它将尝试自动保持其配置数据。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-125">The following code example shows the proper way for a control to check the value of the <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property before it attempts to automatically persist its configuration data.</span></span>  
  
 `protected override void Dispose( bool disposing ) {`  
  
 `if(disposing) {`  
  
 `try {`  
  
 `if (SaveSettings) {`  
  
 `SaveComponentSettings();`  
  
 `}`  
  
 `}`  
  
 `finally {`  
  
 `//...`  
  
 `}`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.SettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="SettingsKey">
      <MemberSignature Language="C#" Value="public string SettingsKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SettingsKey" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SettingsKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SettingsKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SettingsKey : string with get, set" Usage="System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ccb7-126">获取或设置控件当前实例的应用程序设置键的值。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-126">Gets or sets the value of the application settings key for the current instance of the control.</span></span></summary>
        <value><span data-ttu-id="8ccb7-127">一个 <see cref="T:System.String" />，包含该控件的当前实例的设置键。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-127">A <see cref="T:System.String" /> containing the settings key for the current instance of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ccb7-128">使用<xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A>属性来消除歧义的应用程序设置属性组时有多个相同的包装器类的实例。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-128">Use the <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> property to disambiguate groups of application settings properties when there are multiple instances of the same wrapper class.</span></span> <span data-ttu-id="8ccb7-129">例如，如果控件包含关联的包装类，然后将相同的控件的多个实例放在同一应用程序通常会在包装器类的多个实例。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-129">For example, if a control contains an associated wrapper class, then placing multiple instances of the same control in the same application will typically result in multiple instances of the wrapper class.</span></span> <span data-ttu-id="8ccb7-130">仅当在按实例逐一; 上不同的配置数据时，才需要设置键例如，动态定位控件的位置。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-130">A settings key is required only when the configuration data differs on a per-instance basis; for example, the location of dynamically positioned controls.</span></span>  
  
 <span data-ttu-id="8ccb7-131">以下常规规则适用于使用<xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A>:</span><span class="sxs-lookup"><span data-stu-id="8ccb7-131">The following general rules apply to the use of <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A>:</span></span>  
  
-   <span data-ttu-id="8ccb7-132">一个控件，像任何类中，可能包含零个或多个应用程序设置类派生自<xref:System.Configuration.ApplicationSettingsBase>。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-132">A control, like any class, may contain zero or more application settings classes, derived from <xref:System.Configuration.ApplicationSettingsBase>.</span></span> <span data-ttu-id="8ccb7-133">每个设置类包含其自身<xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType>属性，这有助于消除歧义该类的多个实例。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-133">Each settings class contains its own <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> property, which helps disambiguate multiple instances of that class.</span></span>  
  
-   <span data-ttu-id="8ccb7-134">控件应为不同的设置类将其每个实例数据和共享的数据。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-134">A control should separate its per-instance data and its shared data into different settings classes.</span></span>  
  
-   <span data-ttu-id="8ccb7-135">与任何基于实例的配置数据，控件`get`访问器的<xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A>属性应默认为<xref:System.Windows.Forms.Control.Name%2A>的控件。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-135">For a control with any per-instance configuration data, the `get` accessor of the <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> property should default to the <xref:System.Windows.Forms.Control.Name%2A> of the control.</span></span> <span data-ttu-id="8ccb7-136">在大多数情况下名称是控件的唯一的应用程序中。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-136">In most cases the name of the control will be unique within an application.</span></span> <span data-ttu-id="8ccb7-137">如果控件包含共享配置数据，仅`get`应默认为`null`。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-137">If the control contains only shared configuration data, `get` should default to `null`.</span></span>  
  
-   <span data-ttu-id="8ccb7-138">`set`应实现此属性访问器包含每个实例和共享的配置数据的设置类之间进行区分。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-138">The `set` accessor for this property should be implemented to distinguish between settings classes containing per-instance and shared configuration data.</span></span> <span data-ttu-id="8ccb7-139">对于包含每个实例数据，每个设置类`set`应仅传递到<xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType>设置类的属性。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-139">For each settings class containing per-instance data, `set` should just pass-through to the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> property of the settings class.</span></span> <span data-ttu-id="8ccb7-140">对于包含共享的数据，设置类`set`应为该设置类执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="8ccb7-140">For settings classes containing shared data, `set` should perform no action for that settings class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
        <related type="Article" href="https://msdn.microsoft.com/library/f44afb74-76cc-44f2-890a-44b7cdc211a1"><span data-ttu-id="8ccb7-141">自定义控件的应用程序设置</span><span class="sxs-lookup"><span data-stu-id="8ccb7-141">Application Settings for Custom Controls</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>