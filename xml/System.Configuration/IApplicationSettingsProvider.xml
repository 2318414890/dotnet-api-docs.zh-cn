<Type Name="IApplicationSettingsProvider" FullName="System.Configuration.IApplicationSettingsProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8a37e8ad9c7d249227aef3e73aa8cdbaee9e7d92" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36696849" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IApplicationSettingsProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IApplicationSettingsProvider" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IApplicationSettingsProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IApplicationSettingsProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IApplicationSettingsProvider" />
  <TypeSignature Language="F#" Value="type IApplicationSettingsProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>为基于客户端的应用程序的设置提供程序定义扩展功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序设置体系结构使你可以提供一种自定义存储机制，通过创建自定义设置提供程序，它是一个类的应用程序设置派生自<xref:System.Configuration.SettingsProvider>。 此类包含用于存储和检索属性的基本功能。 但是，通过实现来添加附加的标准化的功能<xref:System.Configuration.IApplicationSettingsProvider>中自定义设置提供程序接口。 此接口包含三个主要可使更智能地句柄应用程序版本更改的设置提供程序的方法。 通常情况下，设置提供程序将存储应用程序设置的不同版本的应用程序单独预计在下列情况：  
  
-   通过并行执行的应用程序的不同版本。  
  
-   升级应用程序时，请保留应用程序设置。  
  
-   重置为其默认值为当前所用版本的应用程序设置。  
  
 <xref:System.Configuration.LocalFileSettingsProvider> 类实现 <xref:System.Configuration.IApplicationSettingsProvider> 接口。 包含由方法属于同一套<xref:System.Configuration.IApplicationSettingsProvider>，另请参阅<xref:System.Configuration.ApplicationSettingsBase>类，并启用的应用程序设置包装和其设置提供程序之间的预定义的通信通道的建立。  
  
> [!NOTE]
>  此接口是可选的。 如果提供程序未实现此接口，设置基础结构将失败并且不通知，如果它尝试访问任何定义此接口的方法。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.SettingsProvider" />
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
  </Docs>
  <Members>
    <Member MemberName="GetPreviousVersion">
      <MemberSignature Language="C#" Value="public System.Configuration.SettingsPropertyValue GetPreviousVersion (System.Configuration.SettingsContext context, System.Configuration.SettingsProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Configuration.SettingsPropertyValue GetPreviousVersion(class System.Configuration.SettingsContext context, class System.Configuration.SettingsProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPreviousVersion (context As SettingsContext, property As SettingsProperty) As SettingsPropertyValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Configuration::SettingsPropertyValue ^ GetPreviousVersion(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsProperty ^ property);" />
      <MemberSignature Language="F#" Value="abstract member GetPreviousVersion : System.Configuration.SettingsContext * System.Configuration.SettingsProperty -&gt; System.Configuration.SettingsPropertyValue" Usage="iApplicationSettingsProvider.GetPreviousVersion (context, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="property" Type="System.Configuration.SettingsProperty" />
      </Parameters>
      <Docs>
        <param name="context">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</param>
        <param name="property">要返回其值的 <see cref="T:System.Configuration.SettingsProperty" />。</param>
        <summary>返回同一应用程序早期版本的指定设置属性的值。</summary>
        <returns>包含指定属性设置值的 <see cref="T:System.Configuration.SettingsPropertyValue" />，该值为早期版本的应用程序中最后设置的值；或者，如果找不到该设置，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A>方法结合<xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A>迁移应用程序设置期间或之后的应用程序的新版本的安装方法。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityException">有关<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />权限。</permission>
        <altmember cref="M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Configuration.SettingsContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset(class System.Configuration.SettingsContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (context As SettingsContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Configuration::SettingsContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member Reset : System.Configuration.SettingsContext -&gt; unit" Usage="iApplicationSettingsProvider.Reset context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
      </Parameters>
      <Docs>
        <param name="context">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</param>
        <summary>将与指定应用程序关联的应用程序设置重置为其默认值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A>方法重新初始化的指定的应用程序设置组的存储的值。 与此相反，<xref:System.Configuration.DefaultSettingValueAttribute>属性在初始化期间，提供单一设置属性的默认值，如果它没有存储的值。  
  
 设置提供程序确定合理的默认值是指定组的应用程序设置。 例如，在实现<xref:System.Configuration.LocalFileSettingsProvider>将用户范围设置为在其共享值重置`application.exe.config`文件; 它与此相反，离开保持不变的应用程序范围的设置。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityException">有关<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />权限。</permission>
        <altmember cref="T:System.Configuration.DefaultSettingValueAttribute" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Upgrade">
      <MemberSignature Language="C#" Value="public void Upgrade (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Upgrade(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Upgrade (context As SettingsContext, properties As SettingsPropertyCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Upgrade(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyCollection ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member Upgrade : System.Configuration.SettingsContext * System.Configuration.SettingsPropertyCollection -&gt; unit" Usage="iApplicationSettingsProvider.Upgrade (context, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="properties" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</param>
        <param name="properties">一个包含设置属性组（将要检索该组中的值）的 <see cref="T:System.Configuration.SettingsPropertyCollection" />。</param>
        <summary>向提供程序指出应用程序已升级。 这给提供程序提供了一个机会，使其可以相应地升级其存储的设置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 允许通过并行安装和执行的不同版本的相同应用程序。 应用程序设置提供程序将存储应用程序单独确保隔离的每个版本的应用程序设置。 但是，你可能想要迁移到当前应用程序的先前版本中的设置。 若要提供此迁移功能，使用<xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A>方法，从派生类中实现<xref:System.Configuration.SettingsProvider>。  
  
 你可以使用<xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A>方法结合<xref:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion%2A>迁移应用程序设置期间或之后的应用程序的新版本的安装方法。  
  
 此方法应取消设置的每个应用程序具有<xref:System.Configuration.NoSettingsVersionUpgradeAttribute>将应用到它，或到整个设置包装类，派生自<xref:System.Configuration.ApplicationSettingsBase>。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityException">有关<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />权限。</permission>
        <altmember cref="M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Upgrade" />
        <altmember cref="T:System.Configuration.NoSettingsVersionUpgradeAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>