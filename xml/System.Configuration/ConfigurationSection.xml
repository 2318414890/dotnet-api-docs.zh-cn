<Type Name="ConfigurationSection" FullName="System.Configuration.ConfigurationSection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50b032013ee388f601a901827cebfb8bd035f798" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30380071" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ConfigurationSection : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ConfigurationSection extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.ConfigurationSection" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ConfigurationSection&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConfigurationSection abstract : System::Configuration::ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示配置文件中的节。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你使用<xref:System.Configuration.ConfigurationSection>类，以实现自定义部分类型。 扩展<xref:System.Configuration.ConfigurationSection>类以提供自定义处理和以编程方式访问自定义配置节。 了解如何使用自定义配置节，请参阅[如何： 创建自定义配置节使用 ConfigurationSection](http://msdn.microsoft.com/library/febaca98-c727-4017-95ed-82e2fb6cf234)。  
  
 部分将其处理类型注册中的条目`configSections`元素。 有关示例，请参阅示例部分中所示配置文件摘要。  
  
> [!NOTE]
>  在以前版本的.NET Framework 中，配置节处理程序用于配置设置进行更改以编程方式。 现在，由扩展的类表示所有默认配置节<xref:System.Configuration.ConfigurationSection>类。  
  
   
  
## Examples  
 下面的示例演示如何以编程方式实现自定义的部分。  
  
 有关完整示例，演示如何实现和使用使用特性化的模型中实现自定义部分的说明，请参阅<xref:System.Configuration.ConfigurationElement>。  
  
 [!code-csharp[System.Configuration.ConfigurationSection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/CS/CustomConfigurationSection.cs#1)]
 [!code-vb[System.Configuration.ConfigurationSection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/VB/CustomConfigurationSection.vb#1)]  
  
 下面的示例摘自配置文件适用于前面的示例。  
  
 ```xml
<?xml version="1.0" encoding="utf-8"?>
  <configuration>  
    <configSections>
      <section name="CustomSection" type="Samples.AspNet. CustomSection, CustomConfigurationSection, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" allowDefinition="Everywhere" allowExeDefinition="MachineToApplication" restartOnExternalChanges="true" />
    </configSections>  

    <CustomSection fileName="default.txt" maxUsers="1000" maxIdleTime="00:15:00" /> 
 
  </configuration>
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>你可用于以编程方式或声明性 （特性化） 编码模型创建自定义配置节：  
  
-   编程模型。 此模型要求为每个部分属性创建属性来获取或设置其值并将其添加到基础的内部属性包<see cref="T:System.Configuration.ConfigurationElement" />基类。  
  
-   声明性模型。 此种比较简单的模型，也称为特性化的模型中，允许你通过使用属性并使用属性修饰来定义的部分属性。 这些属性指示 ASP.NET 配置系统有关属性类型和其默认值。 使用此信息，通过反射，获取 ASP.NET 配置系统创建属性对象的部分，并执行所需的初始化。  
  
 <see cref="T:System.Configuration.Configuration" />类允许进行编程访问以编辑配置文件。 你可以访问这些文件进行读取或写入，如下所示：  
  
-   读取。 你使用<see cref="M:System.Configuration.Configuration.GetSection(System.String)" />或<see cref="M:System.Configuration.Configuration.GetSectionGroup(System.String)" />读取配置信息。 请注意的用户或读取的进程必须具有以下权限：  
  
    -   读取当前配置层次结构级别上对配置文件的权限。  
  
    -   读取所有父权限配置文件。  
  
     如果你的应用程序需要其自己的配置只读访问，建议你使用<see cref="Overload:System.Web.Configuration.WebConfigurationManager.GetSection" />重载对于 Web 应用程序的方法或<see cref="M:System.Configuration.ConfigurationManager.GetSection(System.String)" />在客户端应用程序的情况下的方法。  
  
     这些方法提供了访问当前应用程序的缓存的配置值，具有更好的性能比<see cref="T:System.Configuration.Configuration" />类。  
  
 <block subset="none" type="note"><para>  
 如果你使用静态<see langword="GetSection" />采用的方法<paramref name="path" />参数，<paramref name="path" />参数必须引用的应用程序在其中运行代码; 否则，将忽略该参数和当前运行的配置信息返回应用程序。  
  
</para></block>  
  
-   编写。 使用之一<see cref="Overload:System.Configuration.Configuration.Save" />方法来写入配置信息。 请注意的用户或写入的进程必须具有以下权限：  
  
    -   写入权限的配置文件和当前配置层次结构级别上的目录。  
  
    -   对所有配置文件读取权限。</para>
    </block>
    <altmember cref="T:System.Configuration.Configuration" />
    <altmember cref="T:System.Configuration.SectionInformation" />
    <altmember cref="T:System.Configuration.ConfigurationElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConfigurationSection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ConfigurationSection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Configuration.ConfigurationSection" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用<xref:System.Configuration.ConfigurationSection.%23ctor%2A>构造函数，你需要首先定义自定义部分类型。 有关示例请参阅<xref:System.Configuration.ConfigurationSection>类概述。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Configuration.ConfigurationSection.%23ctor%2A> 构造函数。 此示例假定你已创建一个名为的自定义的部分类`CustomSection`。 此类示例，请参阅<xref:System.Configuration.ConfigurationSection>类概述。  
  
 [!code-csharp[System.Configuration.ConfigurationSection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/CS/CustomConfigurationSection.cs#2)]
 [!code-vb[System.Configuration.ConfigurationSection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/VB/CustomConfigurationSection.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeSection">
      <MemberSignature Language="C#" Value="protected internal virtual void DeserializeSection (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void DeserializeSection(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.DeserializeSection(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub DeserializeSection (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void DeserializeSection(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" /> 对象，它从配置文件进行读取。</param>
        <summary>从配置文件读取 XML。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从配置文件、 数据转换为实时数据和对象中的其存储情况下，反序列化向正在读取的 XML 数据的引用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <paramref name="reader" /> 在配置文件中找不到元素。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeObject">
      <MemberSignature Language="C#" Value="protected internal virtual object GetRuntimeObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance object GetRuntimeObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.GetRuntimeObject" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetRuntimeObject () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Object ^ GetRuntimeObject();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生的类中重写时返回自定义对象。</summary>
        <returns>表示节的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Configuration.Configuration.GetSection%2A>方法调用在运行时，配置系统首先创建的相应实例<xref:System.Configuration.ConfigurationSection>类，然后返回它从获取的对象<xref:System.Configuration.ConfigurationSection.GetRuntimeObject%2A>方法。  
  
 默认情况下，<xref:System.Configuration.ConfigurationSection.GetRuntimeObject%2A>只返回该对象表示<xref:System.Configuration.ConfigurationSection>从中调用。  
  
   
  
## Examples  
 下面的示例显示如何使用 <xref:System.Configuration.ConfigurationSection.GetRuntimeObject%2A> 方法。  
  
 [!code-csharp[System.Configuration.ConfigurationSection#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/CS/CustomConfigurationSection.cs#4)]
 [!code-vb[System.Configuration.ConfigurationSection#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/VB/CustomConfigurationSection.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您可以重写<see cref="M:System.Configuration.ConfigurationSection.GetRuntimeObject" />方法以在运行时返回自定义的类型。  
  
 例如，若要限制中的设置运行时修改<see cref="T:System.Configuration.ConfigurationSection" />类，可以重写<see cref="M:System.Configuration.ConfigurationSection.GetRuntimeObject" />并返回自定义类型，强制实施的限制在其可修改设置，如果有的话。  
  
 如果运行时对象仅在内部，则返回的对象不能使用外部定义它的程序集。 创建派生自的对象的一种方法<see cref="T:System.Configuration.ConfigurationSection" />只能访问你在运行的程序集中的代码和时间是创建具有返回的方法的内部运行时对象你<see cref="T:System.Configuration.ConfigurationSection" />实现。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsModified">
      <MemberSignature Language="C#" Value="protected internal override bool IsModified ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool IsModified() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.IsModified" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function IsModified () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool IsModified();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示自上次在派生类中实现此配置元素时保存或加载以来是否对其进行过修改。</summary>
        <returns>
          如果该元素已被修改，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetModified">
      <MemberSignature Language="C#" Value="protected internal override void ResetModified ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void ResetModified() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.ResetModified" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub ResetModified ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void ResetModified();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中实现时，将 <see cref="M:System.Configuration.ConfigurationElement.IsModified" /> 方法的值重置为 <see langword="false" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SectionInformation">
      <MemberSignature Language="C#" Value="public System.Configuration.SectionInformation SectionInformation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.SectionInformation SectionInformation" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ConfigurationSection.SectionInformation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SectionInformation As SectionInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::SectionInformation ^ SectionInformation { System::Configuration::SectionInformation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SectionInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Configuration.SectionInformation" /> 对象，该对象包含 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的不可自定义的信息和功能。</summary>
        <value>一个 <see cref="T:System.Configuration.SectionInformation" />，包含 <see cref="T:System.Configuration.ConfigurationSection" /> 的不可自定义的信息和功能。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用 <xref:System.Configuration.ConfigurationSection.SectionInformation%2A> 属性。  
  
 [!code-csharp[System.Configuration.ConfigurationSection#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/CS/CustomConfigurationSection.cs#3)]
 [!code-vb[System.Configuration.ConfigurationSection#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/VB/CustomConfigurationSection.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.SectionInformation" />
      </Docs>
    </Member>
    <Member MemberName="SerializeSection">
      <MemberSignature Language="C#" Value="protected internal virtual string SerializeSection (System.Configuration.ConfigurationElement parentElement, string name, System.Configuration.ConfigurationSaveMode saveMode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string SerializeSection(class System.Configuration.ConfigurationElement parentElement, string name, valuetype System.Configuration.ConfigurationSaveMode saveMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.SerializeSection(System.Configuration.ConfigurationElement,System.String,System.Configuration.ConfigurationSaveMode)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function SerializeSection (parentElement As ConfigurationElement, name As String, saveMode As ConfigurationSaveMode) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ SerializeSection(System::Configuration::ConfigurationElement ^ parentElement, System::String ^ name, System::Configuration::ConfigurationSaveMode saveMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentElement" Type="System.Configuration.ConfigurationElement" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="saveMode" Type="System.Configuration.ConfigurationSaveMode" />
      </Parameters>
      <Docs>
        <param name="parentElement">要在执行分离时充当父对象的 <see cref="T:System.Configuration.ConfigurationElement" /> 实例。</param>
        <param name="name">要创建的节的名称。</param>
        <param name="saveMode">写入到字符串中时要使用的 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 实例。</param>
        <summary>创建一个包含 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的分离视图的 XML 字符串，作为单独的节写入到文件中。</summary>
        <returns>XML 字符串，包含 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的分离视图。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 序列化是指为 XML 格式并将其存储到配置文件对象中包含的实时数据的转换。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeElementInTargetVersion">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeElementInTargetVersion (System.Configuration.ConfigurationElement element, string elementName, System.Runtime.Versioning.FrameworkName targetFramework);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeElementInTargetVersion(class System.Configuration.ConfigurationElement element, string elementName, class System.Runtime.Versioning.FrameworkName targetFramework) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.ShouldSerializeElementInTargetVersion(System.Configuration.ConfigurationElement,System.String,System.Runtime.Versioning.FrameworkName)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeElementInTargetVersion (element As ConfigurationElement, elementName As String, targetFramework As FrameworkName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeElementInTargetVersion(System::Configuration::ConfigurationElement ^ element, System::String ^ elementName, System::Runtime::Versioning::FrameworkName ^ targetFramework);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Configuration.ConfigurationElement" />
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="targetFramework" Type="System.Runtime.Versioning.FrameworkName" />
      </Parameters>
      <Docs>
        <param name="element">作为候选序列化对象的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</param>
        <param name="elementName">
          <see cref="T:System.Configuration.ConfigurationElement" /> 对象出现在 XML 中的名称。</param>
        <param name="targetFramework">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 的目标版本。</param>
        <summary>指示在为 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 的指定目标版本序列化配置对象层次结构时，是否应序列化指定元素。</summary>
        <returns>
          如果应序列化 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为创建每个配置节[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]和更高版本必须显式重写此方法并返回`true`，但仅当指定的元素是有效的指定版本[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]。 对于的早期版本创建的现有配置节[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]无需更改。  
  
 基类型包含始终返回此方法的默认实现`true`。 如果您实施一个配置节，且不重写此方法，则默认情况下配置节组中包含的所有配置元素将为所有的 framework 版本进行序列都化。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializePropertyInTargetVersion">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializePropertyInTargetVersion (System.Configuration.ConfigurationProperty property, string propertyName, System.Runtime.Versioning.FrameworkName targetFramework, System.Configuration.ConfigurationElement parentConfigurationElement);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializePropertyInTargetVersion(class System.Configuration.ConfigurationProperty property, string propertyName, class System.Runtime.Versioning.FrameworkName targetFramework, class System.Configuration.ConfigurationElement parentConfigurationElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.ShouldSerializePropertyInTargetVersion(System.Configuration.ConfigurationProperty,System.String,System.Runtime.Versioning.FrameworkName,System.Configuration.ConfigurationElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializePropertyInTargetVersion (property As ConfigurationProperty, propertyName As String, targetFramework As FrameworkName, parentConfigurationElement As ConfigurationElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializePropertyInTargetVersion(System::Configuration::ConfigurationProperty ^ property, System::String ^ propertyName, System::Runtime::Versioning::FrameworkName ^ targetFramework, System::Configuration::ConfigurationElement ^ parentConfigurationElement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Configuration.ConfigurationProperty" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="targetFramework" Type="System.Runtime.Versioning.FrameworkName" />
        <Parameter Name="parentConfigurationElement" Type="System.Configuration.ConfigurationElement" />
      </Parameters>
      <Docs>
        <param name="property">作为候选序列化对象的 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象。</param>
        <param name="propertyName">
          <see cref="T:System.Configuration.ConfigurationProperty" /> 对象出现在 XML 中的名称。</param>
        <param name="targetFramework">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 的目标版本。</param>
        <param name="parentConfigurationElement">属性的父元素。</param>
        <summary>指示在为指定目标版本的 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 序列化配置对象层次结构时，是否应序列化指定属性。</summary>
        <returns>
          如果应序列化 <paramref name="property" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为创建每个配置节[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]和更高版本必须显式重写此方法并返回`true`，但仅当指定的属性是有效的指定版本[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]。 对于的早期版本创建的现有配置节[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]无需更改。  
  
 基类型包含始终返回此方法的默认实现`true`。 如果您实施一个配置节，且不重写此方法，则默认情况下配置节组中包含的所有配置属性将为所有的 framework 版本进行序列都化。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSectionInTargetVersion">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeSectionInTargetVersion (System.Runtime.Versioning.FrameworkName targetFramework);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeSectionInTargetVersion(class System.Runtime.Versioning.FrameworkName targetFramework) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.ShouldSerializeSectionInTargetVersion(System.Runtime.Versioning.FrameworkName)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeSectionInTargetVersion (targetFramework As FrameworkName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeSectionInTargetVersion(System::Runtime::Versioning::FrameworkName ^ targetFramework);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetFramework" Type="System.Runtime.Versioning.FrameworkName" />
      </Parameters>
      <Docs>
        <param name="targetFramework">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 的目标版本。</param>
        <summary>指示在为指定目标版本的 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 序列化配置对象层次结构时，是否应序列化当前的 <see cref="T:System.Configuration.ConfigurationSection" /> 实例。</summary>
        <returns>
          如果应序列化当前节，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为创建每个配置节[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]和更高版本必须显式重写此方法并返回`true`，但仅当配置部分是否为指定的版本的有效[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]。 对于的早期版本创建的现有配置节[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]无需更改。  
  
 基类型包含始终返回此方法的默认实现`true`。 如果您实施一个配置节，且不重写此方法，则默认情况下的配置节将针对所有版本的框架进行序列化。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>