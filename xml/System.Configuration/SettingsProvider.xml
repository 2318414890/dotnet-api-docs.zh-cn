<Type Name="SettingsProvider" FullName="System.Configuration.SettingsProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e349899c9a9eaa082e51bfa42237de5a3090e2dc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30379661" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SettingsProvider : System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SettingsProvider extends System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.SettingsProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SettingsProvider&#xA;Inherits ProviderBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class SettingsProvider abstract : System::Configuration::Provider::ProviderBase" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Provider.ProviderBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>在应用程序设置结构中作为派生自定义设置提供程序的基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置提供程序定义用于存储在应用程序设置体系结构中使用的配置数据的机制。 .NET Framework 包含一个默认设置提供程序， <xref:System.Configuration.LocalFileSettingsProvider>，它存储到本地文件系统的配置数据。 但是，可以通过从抽象派生创建备用存储机制<xref:System.Configuration.SettingsProvider>类。 包装类使用的访问接口确定的修饰具有的包装类<xref:System.Configuration.SettingsProviderAttribute>。 如果此属性未提供，默认情况下， <xref:System.Configuration.LocalFileSettingsProvider>，使用。  
  
 当你创建自定义设置提供程序，最小时，必须提供用于三个方法的此类的实现： <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A>，<xref:System.Configuration.SettingsProvider.SetPropertyValues%2A>和<xref:System.Configuration.SettingsProvider.ApplicationName%2A>。  
  
 对于客户端应用程序，你可以添加多标准化的功能自定义提供程序通过还实现<xref:System.Configuration.IApplicationSettingsProvider>接口。 此接口镜像方法中找到<xref:System.Configuration.ApplicationSettingsBase>类，该类主要版本控制支持。  
  
 通常情况下，你应设计设置提供程序单一实例，以避免存储资源争用。 提供程序也应该是线程安全，因为它们可以通过从单个应用程序域中的多个包装实例或不同域中的多个应用程序同时调用。  
  
 在最小值、 设置提供程序必须识别三个特性-<xref:System.Configuration.ApplicationScopedSettingAttribute>， <xref:System.Configuration.UserScopedSettingAttribute>，和<xref:System.Configuration.DefaultSettingValueAttribute>。 可以应用于应用程序设置的属性的完整列表，请参阅[的应用程序设置属性](~/docs/framework/winforms/advanced/application-settings-attributes.md)。 自定义设置提供程序应解决按以下方式应用于设置属性的属性：  
  
1.  如果提供程序可以满足所暗示属性的请求，显然应该这样做。  
  
2.  如果提供程序无法完成请求，它应以无提示方式忽略它。  
  
3.  如果两个或多个属性发生冲突;例如，两个正在修饰的属性<xref:System.Configuration.ApplicationScopedSettingAttribute>和<xref:System.Configuration.UserScopedSettingAttribute>; 提供程序应引发<xref:System.Configuration.ConfigurationException>。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.IApplicationSettingsProvider" />
    <altmember cref="T:System.Configuration.LocalFileSettingsProvider" />
    <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
    <altmember cref="T:System.Configuration.ConfigurationException" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SettingsProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SettingsProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SettingsProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Configuration.SettingsProvider" /> 类的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是此抽象类此默认受保护构造函数。 派生自定义设置提供程序不需要提供的显式构造函数，因为<xref:System.Configuration.Provider.ProviderBase.Initialize%2A>方法通常会执行所有的初始化。  
  
 客户端代码通常不会不直接实例化设置提供程序;相反，你可以使用以下过程设置提供程序查找特定的设置属性：  
  
1.  调用<xref:System.ComponentModel.Component.GetService%2A>方法对当前<xref:System.ComponentModel.Component>或<xref:System.ComponentModel.ISite>返回到当前的引用<xref:System.Configuration.ISettingsProviderService>。  
  
2.  调用<xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A>方法<xref:System.Configuration.ISettingsProviderService>在返回设置提供程序的第一步中检索。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
        <altmember cref="T:System.Configuration.ISettingsProviderService" />
        <altmember cref="M:System.Configuration.ISettingsProviderService.GetSettingsProvider(System.Configuration.SettingsProperty)" />
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public abstract string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.SettingsProvider.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前运行的应用程序的名称。</summary>
        <value>A <see cref="T:System.String" /> ，其中包含应用程序的短的名称，不包含的完整路径或扩展，例如， <c>SimpleAppSettings</c>。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.SettingsProvider.ApplicationName%2A>和<xref:System.Configuration.Provider.ProviderBase.Name%2A>属性帮助消除在不同的应用程序中命名的设置属性同样的歧义。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Provider.ProviderBase.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValues">
      <MemberSignature Language="C#" Value="public abstract System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Configuration.SettingsPropertyValueCollection GetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetPropertyValues (context As SettingsContext, collection As SettingsPropertyCollection) As SettingsPropertyValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Configuration::SettingsPropertyValueCollection ^ GetPropertyValues(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyCollection ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValueCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="collection" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Configuration.SettingsContext" />，描述当前应用程序的用法。</param>
        <param name="collection">一个包含设置属性组（将要检索该组中的值）的 <see cref="T:System.Configuration.SettingsPropertyCollection" />。</param>
        <summary>返回指定应用程序实例的设置属性值集合和设置属性组。</summary>
        <returns>一个包含指定设置属性组的值的 <see cref="T:System.Configuration.SettingsPropertyValueCollection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A>必须实现方法以处理特殊设置，这些标记与<xref:System.Configuration.SpecialSettingAttribute>，以及协调应用程序和用户设置。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
        <altmember cref="T:System.Configuration.SpecialSettingAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SetPropertyValues">
      <MemberSignature Language="C#" Value="public abstract void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyValueCollection collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetPropertyValues (context As SettingsContext, collection As SettingsPropertyValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetPropertyValues(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyValueCollection ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="collection" Type="System.Configuration.SettingsPropertyValueCollection" />
      </Parameters>
      <Docs>
        <param name="context">描述当前应用程序用法的 <see cref="T:System.Configuration.SettingsContext" />。</param>
        <param name="collection">表示要设置的属性设置组的 <see cref="T:System.Configuration.SettingsPropertyValueCollection" />。</param>
        <summary>设置指定的属性设置组的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.ApplicationSettingsBase> 包含<xref:System.Configuration.ApplicationSettingsBase.Save%2A>方法，调用以保留所有其设置属性的值。 此方法枚举通过所有设置提供程序调用其设置属性，与关联<xref:System.Configuration.SettingsProvider.SetPropertyValues%2A>方法为每个<xref:System.Configuration.SettingsProvider>执行实际的序列化操作。  
  
 <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A>应考虑到了安全性实现方法：  
  
-   只有完全受信任的代码可以更新应用程序设置。 应允许部分受信任的代码更新仅用户应用程序设置。 不受信任的代码通常不允许更新应用程序设置。  
  
-   使用配额应被视为抵御资源攻击由部分受信任的应用程序。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
      </Docs>
    </Member>
  </Members>
</Type>