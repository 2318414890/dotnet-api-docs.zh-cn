<Type Name="FileLogTraceListener" FullName="Microsoft.VisualBasic.Logging.FileLogTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c993f49f8ef84e416475e1c4d7f3f97289cbf34e" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34174150" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileLogTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileLogTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class FileLogTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileLogTraceListener : System::Diagnostics::TraceListener" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一个简单的侦听器，用于将日志记录输出指引至文件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类提供了自动的维护功能存档日志文件，根据需要在每天或每个应用程序上。 此自动存档功能可帮助减少开发人员和管理员的维护责任。  
  
 实例<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>可以添加到<xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType>或<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>集合将从日志记录到文本文件的输出重定向。 此类的实例还可以添加到`My.Application.Log`或`My.Log`（对于 Web 应用程序） 在 Visual Basic 应用程序。 有关详细信息，请参阅[演练： 更改其中 My.Application.Log 写入信息](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)`.`  
  
 此类的主要功能如下：  
  
1.  *存档功能*。 按照基本名称和日期，以及要将日志文件与日志的后续版本区分开来的数字，此类由生成的日志文件进行命名。 基于根据需要创建新的日志文件。  
  
     文件名称的显式格式是`baseName`[-`dateStamp`] [-`version`].log，其中：  
  
    -   `baseName`一部分是基本的日志名称，指定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>属性。  
  
    -   `dateStamp`一部分采用格式"YYYY-月-日"，它将显示当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>是<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>或<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>。  
  
    -   如果多个日志文件需要具有相同`baseName`和`dateStamp`、`version`部件，一个正`Integer`，添加到的文件名称。  
  
2.  *多个类实例*。 实例时，如果<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类写入正在使用的文件：  
  
    -   如果它正在由另一个实例的类都将共享文件<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>在同一进程中的类。  
  
    -   类创建一个新的日志文件，如果该文件正由另一个进程使用下一个可用名称。  
  
3.  *线程安全*。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类是线程安全。 这允许你安全地将消息写入到日志从多个线程不使用锁。  
  
 **日志文件位置**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>属性采用<xref:Microsoft.VisualBasic.Logging.LogFileLocation>枚举来指定要写入到日志文件的典型目录之一。  
  
-   若要将日志写入到另一个位置，将设置<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>到该位置的属性。  
  
 **日志文件名称**  
  
-   日志文件基名称由指定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>属性。  
  
-   可以从读取当前日志文件名称<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>属性。 文件系统中，它被派生自多个其他属性和日志的当前状态。  
  
 **日志维护**  
  
-   用于创建新的日志文件的最小频率由<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>属性。 当值是<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>或<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>，新的日志文件将创建在至少一次，每个每天或每周，并且日期戳将合并到<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名称。  
  
-   日志文件的最大大小 （以字节为单位） 由<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>属性。 如果日志文件大小超过此大小，写入到日志中的其他消息是已放弃和，具体取决于<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>属性，将引发异常。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>属性确定多少可用空间 （以字节为单位） 必须可用。 这有助于确保<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类不会用尽所有可用磁盘空间。 使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>属性指定的日志的行为时，有写入小于<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>可用字节。  
  
 **日志文件输出设置**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A>属性指定是否基础流应自动刷新后每次写入到日志文件。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A>属性指定是否将消息追加到当前的日志文件中，如果允许，或将它们写入到新的日志文件。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>属性指定要用于分隔日志消息中的字段的字符串。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A>属性指定要在创建新的日志文件时使用的编码。  
  
 **日志文件输出**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>和<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A>方法将消息写入日志文件。 这些方法检查<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>属性，以及任何现有日志具有相同基名称来确定是否应创建新的日志。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>方法刷新当前在日志文件的输出缓冲区中的任何消息。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>方法关闭该日志文件，以便它可以由其他进程。  
  
 **启用输出**  
  
 你必须启用跟踪或调试才能使用跟踪侦听器。 下面的语法是特定的编译器。 如果你使用除 C# 或 Visual Basic 编译器，请参阅你的编译器的文档。  
  
-   若要启用调试 C# 中，添加`/d:DEBUG`到编译器命令行编译代码，或可以添加时的标志`#define DEBUG`到你的文件的顶部。 在 Visual Basic 中，添加`/d:DEBUG=True`到编译器命令行的标志。  
  
-   若要启用 C# 中的跟踪，将添加`/d:TRACE`到编译器命令行编译代码，或添加时的标志`#define TRACE`到你的文件的顶部。 在 Visual Basic 中，添加`/d:TRACE=True`到编译器命令行的标志。  
  
 若要设置您的侦听器的级别，请编辑你的应用程序的配置文件。 在此文件中，可以添加侦听器、 将其类型设置和其参数，删除的侦听器，或清除以前由应用程序设置的所有侦听器。 配置文件应类似下面的示例格式化。  
  
 对于此示例正常运行，你必须提供完全限定程序集名称。 有关如何获取完全限定程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sharedListeners>  
            <add name="FileLog"  
                type="Microsoft.VisualBasic.Logging.FileLogTraceListener,   
                      Microsoft.VisualBasic, Version=8.0.0.0,   
                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   
                      processorArchitecture=MSIL"   
                initializeData="FileLogWriter"/>  
        </sharedListeners>  
    </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 类的新实例并设置名称。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>使用默认名称初始化 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法设置的实例名称<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>FileLogTraceListener 类。  
  
 你可以访问通过实例名称<xref:System.Diagnostics.TraceListener.Name%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see langword="String" />。 实例对象的名称。</param>
        <summary>用提供的名称初始化 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法设置的实例名称<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类到`name`。  
  
 你可以访问认为的实例名称<xref:System.Diagnostics.TraceListener.Name%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public bool Append { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Append" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberSignature Language="VB.NET" Value="Public Property Append As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Append { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定是将输出追加到当前文件还是将输出写入新文件。</summary>
        <value>
          <see langword="Boolean" />，<see langword="True" /> 指示将输出追加到当前文件，<see langword="False" /> 指示将输出写入新文件。 此属性的默认设置为 <see langword="True" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A>属性是`False`，则输出写入到新文件。 当该属性是`True`，将输出追加到当前的文件，除非：  
  
-   输出文件已由另一个进程锁定。 将合并到的版本号在此情况下，创建一个新的日志文件<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名称。  
  
-   当前文件大小大于什么<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>属性允许。 在此情况下，其他消息是已放弃和，具体取决于<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>属性，将引发异常。  
  
-   现有的文件名称是根据指定的日志创建计划过期<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>属性。 在这种情况下，将创建新的日志文件和日期戳将合并到<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名称。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示写入日志文件流时是否刷新缓冲区。</summary>
        <value>
          <see langword="Boolean" />，<see langword="True" /> 指示每次写入之后都刷新日志文件流；否则将缓存日志条目，这样写入会更有效率。 此属性的默认设置为 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `False`设置<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A>属性提供对于大多数应用程序的最佳性能，因为它是一次写入到日志文件的多个消息更加高效。 你可以使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>以刷新当前在日志文件中的任何消息的方法的输出缓冲区。 你还可以使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>方法，在关闭日志文件之前隐式刷新流。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      </Docs>
    </Member>
    <Member MemberName="BaseFileName">
      <MemberSignature Language="C#" Value="public string BaseFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置日志文件的基名称，该名称用于创建日志文件的完整名称。</summary>
        <value>
          <see langword="String" />。 日志文件的基名称。 默认为应用程序的产品名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>属性将确定日志文件基名称<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类写入。  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>属性给出的当前日志文件的完整名称。 则会生成根据日志路径、 的基名称、 日期和数字来区分来自不同版本的日志。 基于根据需要创建新的日志文件。  
  
 完整的日志文件名称的显式形式是`path` \\ `baseName`[-`dateStamp`] [-`iteration`].log，其中  
  
-   `path`一部分由<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>属性，如果该属性值设置为<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>属性。  
  
-   `baseName`一部分是基本的日志名称，指定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>属性。  
  
-   `dateStamp`一部分采用格式"YYYY-月-日"，它将显示当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>设置为<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>或<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>。  
  
-   如果多个日志文件需要具有相同`baseName`和`dateStamp`、`iteration`部件，一个正`Integer`，添加到的文件名称。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭当前日志文件的基础流，并释放与当前流关联的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不需要调用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>方法显式，因为<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类管理基础流。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomLocation">
      <MemberSignature Language="C#" Value="public string CustomLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomLocation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" /> 属性设置为 <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" /> 时获取或设置日志文件目录。</summary>
        <value>
          <see langword="String" />，日志文件目录的名称。 此属性的默认设置是用户的应用程序数据目录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>属性设置，它还将设置<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>属性<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>。  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>属性将引发异常，如果目录不能解析。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于在日志消息中分隔字段的分隔符。</summary>
        <value>
          <see langword="String" />，用作日志消息中字段的分隔符。 此属性的默认设置为制表符字符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>属性允许您更改默认分隔符。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiskSpaceExhaustedBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property DiskSpaceExhaustedBehavior As DiskSpaceExhaustedOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption get(); void set(Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定在写入日志文件时，如果可用磁盘空间小于 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> 属性所指定的磁盘空间时应采取的操作。</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />。 确定在尝试写入日志文件时，如果可用磁盘空间小于 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> 属性所指定的磁盘空间，或日志文件大小大于 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" /> 属性所允许的大小，应采取的操作。 默认值为 <see cref="F:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>属性设置为<xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>，日志消息以无提示方式将被丢弃，如果没有足够的保留的磁盘空间。 这是默认行为，并且它可以防止简单应用程序失败的磁盘空间不足时。  
  
 更可靠的应用程序可以设置<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>属性<xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>，并添加`Try...Catch`周围的所有代码都将写入日志块。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">若为 <see langword="True" />，释放托管资源和非托管资源；若为 <see langword="False" />，则只释放非托管资源。</param>
        <summary>关闭基础流，并可以选择释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 `disposing` 参数为 `True` 时，此方法释放该 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 引用的、由任何托管对象持有的全部资源。 此方法调用每个引用对象的 `Dispose` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> 可以多次调用由其他对象。重写 <see langword="Dispose" /> 时，请注意不要引用在以前调用 <see langword="Dispose" /> 时已释放的对象。此方法调用<see langword="Dispose" />方法的基类， <see langword="Dispose" />。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置创建新日志文件时使用的编码。</summary>
        <value>
          <see cref="T:System.Text.Encoding" />，创建新日志文件时使用的编码。 此属性的默认值为 <see cref="T:System.Text.UTF8Encoding" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将文本追加到现有日志文件，而不是指定的编码使用该文件的编码<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.Text.UTF8Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>刷新写入当前日志文件的基础流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>方法以将所有缓冲的数据写入到当前的日志文件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullLogFileName">
      <MemberSignature Language="C#" Value="public string FullLogFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullLogFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullLogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullLogFileName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前日志文件的完整名称。</summary>
        <value>
          <see langword="String" />，当前日志文件的完整名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>属性给出的当前日志文件的完整名称。 则会生成根据日志路径、 的基名称、 日期和数字来区分来自不同版本的日志。 基于根据需要创建新的日志文件。  
  
 日志文件的完整名称的显式形式是`path` \\ `baseName`[-`dateStamp`] [-`iteration`].log，其中：  
  
-   `path`一部分由<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>属性，如果该属性值设置为<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>属性。  
  
-   `baseName`一部分是基本的日志名称，指定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>属性。  
  
-   `dateStamp`一部分格式 YYYY-月-日，并且它将显示当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>是<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>或<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>。  
  
-   如果多个日志文件需要具有相同`baseName`和`dateStamp`、`iteration`部件，一个正`Integer`，添加到的文件名称。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取跟踪侦听器支持的自定义 XML 配置特性。</summary>
        <returns>
          <see langword="String" /> 数组，包含此侦听器识别的 XML 配置特性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自定义属性<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>可以用于控制的实例的行为的 XML 配置文件中使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类。 使用任何其他属性会导致配置异常。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IncludeHostName">
      <MemberSignature Language="C#" Value="public bool IncludeHostName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeHostName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostName { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示输出中是否应包括日志记录计算机的主机名。</summary>
        <value>
          <see langword="Boolean" />。 如果应包括主机标识符，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用属性来配置的行为<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>和<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileLocation Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As LogFileLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileLocation Location { Microsoft::VisualBasic::Logging::LogFileLocation get(); void set(Microsoft::VisualBasic::Logging::LogFileLocation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置日志文件的位置。</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />，日志文件的位置。 默认值为 <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>属性将日志路径设置为预定义的路径，由之一<xref:Microsoft.VisualBasic.Logging.LogFileLocation>枚举值。  
  
|**位置值**|**Path**|  
|------------------------|--------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|在所有用户，使用格式之间共享的应用程序数据路径：<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> 一个典型值为`BasePath`是：<br /><br /> C:\Documents and Settings\All Users\Application 数据<br /><br /> 值`CompanyName`， `ProductName`，和`ProductVersion`来自程序集。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|启动了应用程序的可执行文件的路径。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|具有格式的用户的应用程序数据路径：<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> 一个典型值为`BasePath`是：<br /><br /> C:\Documents and Settings\\`username`\Application Data<br /><br /> 值`CompanyName`， `ProductName`，和`ProductVersion`来自程序集。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|当前系统的临时文件夹的路径。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|如果指定的字符串<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>不为空，然后将其用作路径; 否则使用用户的应用程序数据的路径。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />
      </Docs>
    </Member>
    <Member MemberName="LogFileCreationSchedule">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileCreationSchedule As LogFileCreationScheduleOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption LogFileCreationSchedule { Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption get(); void set(Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定要包括在日志文件名称中的日期。</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />。 此项指示要包括在日志文件名称中的日期。 默认值为 <see cref="F:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 分配之一<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>枚举值来<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>属性来指定要在日志文件的名称中包含的日期。  
  
 日期的格式是 YYYY。 有关格式的日志文件名称的详细信息，请参阅<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。  
  
|**LogFileCreationSchedule 值**|**日志文件名称中的日期**|  
|---------------------------------------|-----------------------------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|将当前日期包括在日志文件名称中。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|不要将日期包括在日志文件名称中。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|将当前周的第一天包括在日志文件名称中。<br /><br /> 在星期六开始执行一周。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="MaxFileSize">
      <MemberSignature Language="C#" Value="public long MaxFileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxFileSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxFileSize { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置所允许的日志文件的最大大小，以字节为单位。</summary>
        <value>
          <see langword="Long" />。 这是允许的日志文件的最大大小（以字节为单位）。 默认值为 5000000。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性来确保日志文件执行不增长得太大。  
  
 如果日志文件大小 （以字节为单位） 大于此属性的值然后当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类尝试将消息写入到日志中，消息被丢弃，则故障将是无提示或异常引发根据值<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>属性。 否则，消息写入到日志中，如果数量的可用磁盘空间 （以字节为单位） 小于<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">当此属性被设置为一个小于 1000 的值时。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="ReserveDiskSpace">
      <MemberSignature Language="C#" Value="public long ReserveDiskSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReserveDiskSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ReserveDiskSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReserveDiskSpace { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在将消息写入日志文件之前需要满足的可用磁盘空间量（以字节为单位）。</summary>
        <value>
          <see langword="Long" />。 这是所需的可用磁盘空间量。 默认值为 10000000。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性来确保，日志文件不能完全填充该磁盘。  
  
 如果的可用磁盘空间量 （以字节为单位） 小于此属性的值然后当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类尝试将消息写入到日志中，消息被丢弃，则故障将是无提示或异常引发根据的值 <c2 1> <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> 属性。 否则，消息写入到日志中，如果日志文件大小 （以字节为单位） 大于<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">当此属性被设置为小于 0 的值时。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>向输出文件写入跟踪数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> 方法不应由应用程序代码调用。 这些方法调用的成员的<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类用于写入输出的跟踪数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
        <param name="source">调用此方法的跟踪源的名称。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 枚举值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="data">要发出的跟踪数据。</param>
        <summary>向输出文件或流中写入跟踪信息、数据对象和事件信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法：  
  
1.  设置输出的数据和上下文信息的格式。  
  
2.  如有必要，请创建一个新的日志文件。  
  
3.  将信息写入日志文件。  
  
 创建新的日志文件的详细信息，请参阅<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。  
  
 下表列出的输出字段中显示的顺序。 由字符串分隔字段，<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>属性指定，且后跟行结束符。  
  
|**字段**|**输出条件**|**说明**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|`name` 的值。|  
|`severity`|Always|枚举值名称`eventType`。|  
|`id`|Always|`id` 的字符串表示形式。|  
|`message`|Always|`data` 的字符串表示形式。|  
|`callStack`|当<xref:System.Diagnostics.TraceOptions.Callstack>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|<xref:System.Diagnostics.TraceEventCache.Callstack%2A>属性`eventCache`。|  
|`CorrelationID`|当<xref:System.Diagnostics.TraceOptions.LogicalOperationStack>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。|  
|`DateTime`|当<xref:System.Diagnostics.TraceOptions.DateTime>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|字符串表示形式<xref:System.Diagnostics.TraceEventCache.DateTime%2A>属性`eventCache`。 固定区域性用于字符串转换。|  
|`ProcessID`|当<xref:System.Diagnostics.TraceOptions.ProcessId>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|字符串表示形式<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>属性`eventCache`。 固定区域性用于字符串转换。|  
|`ThreadID`|当<xref:System.Diagnostics.TraceOptions.ThreadId>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。|  
|`Timestamp`|当<xref:System.Diagnostics.TraceOptions.Timestamp>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|字符串表示形式<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>属性`eventCache`。 固定区域性用于字符串转换。|  
|`HostName`|当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>属性是`True`。|计算机的名称。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
        <param name="source">调用此方法的跟踪源的名称。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 枚举值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="data">要作为数据发出的对象数组。</param>
        <summary>将跟踪信息、数据对象数组和事件信息写入输出文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法：  
  
1.  对于输出数据和上下文信息的格式设置  
  
2.  如有必要，创建一个新的日志文件，  
  
3.  将信息写入日志文件。  
  
 创建新的日志文件的详细信息，请参阅<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。  
  
 此表列出的输出字段中显示的顺序。 由字符串分隔字段，<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>属性指定，且后跟行结束符。  
  
|**字段**|**输出条件**|**说明**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|`name` 的值。|  
|`severity`|Always|枚举值名称`eventType`。|  
|`id`|Always|`id` 的字符串表示形式。|  
|`message`|Always|包含的字符串表示形式中每个元素的字符串`data`，由每个分隔<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>。|  
|`callStack`|当<xref:System.Diagnostics.TraceOptions.Callstack>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|<xref:System.Diagnostics.TraceEventCache.Callstack%2A>属性`eventCache`。|  
|`CorrelationID`|当<xref:System.Diagnostics.TraceOptions.LogicalOperationStack>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。|  
|`DateTime`|当<xref:System.Diagnostics.TraceOptions.DateTime>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|字符串表示形式<xref:System.Diagnostics.TraceEventCache.DateTime%2A>属性`eventCache`。 固定区域性用于字符串转换。|  
|`ProcessID`|当<xref:System.Diagnostics.TraceOptions.ProcessId>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|字符串表示形式<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>属性`eventCache`。 固定区域性用于字符串转换。|  
|`ThreadID`|当<xref:System.Diagnostics.TraceOptions.ThreadId>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。|  
|`Timestamp`|当<xref:System.Diagnostics.TraceOptions.Timestamp>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|字符串表示形式<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>属性`eventCache`。 固定区域性用于字符串转换。|  
|`HostName`|当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>属性是`True`。|计算机的名称。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>向输出文件或流中写入跟踪信息和事件信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> 方法不应由应用程序代码调用。 这些方法调用的成员的<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类用于写入输出的跟踪数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
        <param name="source">调用此方法的跟踪源的名称。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 枚举值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="message">要写入的消息。</param>
        <summary>将跟踪信息、消息和事件信息写入输出文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法：  
  
1.  设置输出的数据和上下文信息的格式。  
  
2.  如有必要，请创建一个新的日志文件。  
  
3.  将信息写入日志文件。  
  
 创建新的日志文件的详细信息，请参阅<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。  
  
 此表列出它们的出现顺序的输出字段。 由字符串分隔字段，<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>属性指定，且后跟行结束符。  
  
|**字段**|**输出条件**|**说明**|  
|---------------|--------------------------|---------------------|  
|`source`|始终。|`name` 的值。|  
|`severity`|始终。|枚举值名称`eventType`。|  
|`id`|始终。|`id` 的字符串表示形式。|  
|`message`|始终。|`message` 的值。|  
|`callStack`|当<xref:System.Diagnostics.TraceOptions.Callstack>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|<xref:System.Diagnostics.TraceEventCache.Callstack%2A>属性`eventCache`。|  
|`CorrelationID`|当<xref:System.Diagnostics.TraceOptions.LogicalOperationStack>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。|  
|`DateTime`|当<xref:System.Diagnostics.TraceOptions.DateTime>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|字符串表示形式<xref:System.Diagnostics.TraceEventCache.DateTime%2A>属性`eventCache`。 固定区域性用于字符串转换。|  
|`ProcessID`|当<xref:System.Diagnostics.TraceOptions.ProcessId>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|字符串表示形式<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>属性`eventCache`。 固定区域性用于字符串转换。|  
|`ThreadID`|当<xref:System.Diagnostics.TraceOptions.ThreadId>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。|  
|`Timestamp`|当<xref:System.Diagnostics.TraceOptions.Timestamp>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|字符串表示形式<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>属性`eventCache`。 固定区域性用于字符串转换。|  
|`HostName`|当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>属性是`True`。|计算机的名称。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
        <param name="source">调用此方法的跟踪源的名称。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 枚举值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="format">一个格式字符串，其中包含零个或多个格式项，它们对应于 <c>args</c> 数组中的对象。</param>
        <param name="args">包含零个或多个要格式化的对象的 <see langword="Object" /> 数组。</param>
        <summary>将跟踪信息、格式化对象数组和事件信息写入输出文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法：  
  
1.  设置输出的数据和上下文信息的格式。  
  
2.  如有必要创建一个新的一个新的日志文件。  
  
3.  将信息写入日志文件。  
  
 创建新的日志文件的详细信息，请参阅<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。  
  
 此表列出它们的出现顺序的输出字段。 由字符串分隔字段，<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>属性指定，并且后跟行结束符。  
  
|**字段**|**输出条件**|**说明**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|`name` 的值。|  
|`severity`|Always|枚举值名称`eventType`。|  
|`id`|Always|`id` 的字符串表示形式。|  
|`message`|Always|中的数据`args`使用格式化`format`字符串和使用固定区域性的字符串转换。|  
|`callStack`|当<xref:System.Diagnostics.TraceOptions.Callstack>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|<xref:System.Diagnostics.TraceEventCache.Callstack%2A>属性`eventCache`。|  
|`CorrelationID`|当<xref:System.Diagnostics.TraceOptions.LogicalOperationStack>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。|  
|`DateTime`|当<xref:System.Diagnostics.TraceOptions.DateTime>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|字符串表示形式<xref:System.Diagnostics.TraceEventCache.DateTime%2A>属性`eventCache`。 固定区域性用于字符串转换。|  
|`ProcessID`|当<xref:System.Diagnostics.TraceOptions.ProcessId>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|字符串表示形式<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>属性`eventCache`。 固定区域性用于字符串转换。|  
|`ThreadID`|当<xref:System.Diagnostics.TraceOptions.ThreadId>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。|  
|`Timestamp`|当<xref:System.Diagnostics.TraceOptions.Timestamp>中设置标志<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|字符串表示形式<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>属性`eventCache`。 固定区域性用于字符串转换。|  
|`HostName`|当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>属性是`True`。|计算机的名称。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <see langword="String" />。 要写入的自定义消息。</param>
        <summary>将消息逐字写入磁盘，不带任何附加上下文信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A>方法会将特定的消息写入日志文件，而不进行任何其他上下文信息。  
  
 使用其中一个<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>方法中的日志输出包含上下文信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <see langword="String" />。 要写入的自定义消息。</param>
        <summary>将消息逐字写入磁盘，后跟当前行分隔符，不带任何附加上下文信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A>方法会将特定的消息写入日志文件，而不进行任何其他上下文信息。  
  
 使用其中一个<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>方法中的日志输出包含上下文信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>