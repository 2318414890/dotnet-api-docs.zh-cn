<Type Name="Log" FullName="Microsoft.VisualBasic.Logging.Log">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8646535c9d333361a0a1fa4a44a40e45e16c5e67" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37710553" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Log" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Log extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.Log" />
  <TypeSignature Language="VB.NET" Value="Public Class Log" />
  <TypeSignature Language="C++ CLI" Value="public ref class Log" />
  <TypeSignature Language="F#" Value="type Log = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供用于将事件和异常信息写入应用程序的日志侦听器中的属性和方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.Log`对象提供从其访问的直接入口点[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]的日志记录服务。 `WriteEntry`和`WriteException`方法将消息写入到应用程序的日志侦听器。 可以通过应用程序的配置文件配置侦听器。 有关详细信息，请参阅[演练： 更改 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)并[使用应用程序日志](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 `My.Application.Log`对象是仅适用于客户端应用程序。 对于 Web 应用程序使用`My.Log`。 有关详情，请参阅<xref:Microsoft.VisualBasic.Logging.AspLog>。  
  
 下表列出了所涉及的任务的示例`My.Application.Log`对象。  
  
|到|查看|  
|--------|---------|  
|事件信息写入应用程序的日志侦听器|[如何：编写日志消息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|异常信息写入应用程序的日志侦听器|[如何：日志异常](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|确定位置`My.Application.Log`将信息写入|[演练：确定 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
   
  
## Examples  
 本示例将演示如何使用 `My.Application.Log.WriteEntry` 方法来记录跟踪信息。 有关详细信息，请参阅[如何： 编写日志消息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.Logging.Log" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.Logging.Log" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.Log : string -&gt; Microsoft.VisualBasic.Logging.Log" Usage="new Microsoft.VisualBasic.Logging.Log name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see cref="T:System.String" />。 要指定给 <see cref="P:Microsoft.VisualBasic.Logging.Log.TraceSource" /> 属性对象的名称。</param>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.Logging.Log" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultFileLogWriter">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultFileLogWriter As FileLogTraceListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::FileLogTraceListener ^ DefaultFileLogWriter { Microsoft::VisualBasic::Logging::FileLogTraceListener ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFileLogWriter : Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.FileLogTraceListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取为 <see langword="Log" /> 对象提供支持的 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 对象。</summary>
        <value>返回为 <see langword="Log" /> 对象提供支持的 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此属性来确定的当前配置<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>对象。  
  
 在客户端应用程序中`Log`对象可通过`My.Application.Log`对象。 在 Web 应用程序`Log`对象可通过`My.Log`对象。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制文件和文件夹的访问权限。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="InitializeWithDefaultsSinceNoConfigExists">
      <MemberSignature Language="C#" Value="protected internal virtual void InitializeWithDefaultsSinceNoConfigExists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblynewslot virtual instance void InitializeWithDefaultsSinceNoConfigExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub InitializeWithDefaultsSinceNoConfigExists ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void InitializeWithDefaultsSinceNoConfigExists();" />
      <MemberSignature Language="F#" Value="abstract member InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit&#xA;override this.InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit" Usage="log.InitializeWithDefaultsSinceNoConfigExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建一个新的 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 对象，然后将该对象添加到 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法创建一个新<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>，其名称设置为`FileLog`，并将其配置为使用严重性级别记录消息<xref:System.Diagnostics.SourceLevels.Information>及更高版本。 新<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>随后将对象添加到<xref:System.Diagnostics.TraceSource.Listeners%2A>集合。  
  
 <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A>调用的方法，如果<xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A>尚未配置属性。 可以在应用程序的配置文件中配置跟踪源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="TraceSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceSource TraceSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceSource TraceSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceSource As TraceSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceSource ^ TraceSource { System::Diagnostics::TraceSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TraceSource : System.Diagnostics.TraceSource" Usage="Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取为 <see langword="Log" /> 对象提供支持的 <see cref="T:System.Diagnostics.TraceSource" /> 对象。</summary>
        <value>返回为 <see langword="Log" /> 对象提供支持的 <see cref="T:System.Diagnostics.TraceSource" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此属性来确定的当前配置`Log`对象。  
  
 在客户端应用程序中`Log`对象可通过`My.Application.Log`对象。 在 Web 应用程序`Log`对象可通过`My.Log`对象。  
  
 这是一个高级的成员;除非您选择不会显示在 IntelliSense 中**所有**选项卡。  
  
 下表列出的任务涉及示例`TraceSource`属性。  
  
|到|查看|  
|--------|---------|  
|获取信息的每个`Log`对象的日志侦听器。|[疑难解答：日志侦听器](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|------------------|---------------|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|**是**|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSource" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将消息写入应用程序的日志侦听器中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string -&gt; unit" Usage="log.WriteEntry message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">必须的。 要记录的消息。 如果 <c>message</c> 为 <see langword="Nothing" />，则返回一个空字符串。</param>
        <summary>将消息写入应用程序的日志侦听器中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry`方法将消息写入应用程序的事件日志侦听器。  
  
 在客户端应用程序中`Log`对象可通过`My.Application.Log`对象。 在 Web 应用程序`Log`对象可通过`My.Log`对象。  
  
 若要了解哪个日志侦听器接收`WriteEntry`方法的消息，请参阅[演练： 确定 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)。 可以更改默认的日志侦听器。 有关详细信息，请参阅[使用应用程序日志](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 不会重载`id`自变量，`id`写入日志由以下表定义。  
  
|`severity`|默认值 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 下表列出了所涉及的任务的示例`WriteEntry`方法。  
  
|到|查看|  
|--------|---------|  
|事件信息写入应用程序的日志侦听器|[如何：编写日志消息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|确定位置`Log`将信息写入|[演练：确定 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|------------------|---------------|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|**是**|  
  
   
  
## Examples  
 本示例将演示如何使用 `My.Application.Log.WriteEntry` 方法来记录跟踪信息。 有关详细信息，请参阅[如何： 编写日志消息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 仅在客户端应用程序可以运行此代码示例。 更改`My.Application.Log.WriteEntry`到`My.Log.WriteEntry`为 Web 应用程序。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">具有部分信任的代码调用该方法，但是写入到需要完全信任的事件日志侦听器。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制文件和文件夹的访问权限。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType -&gt; unit" Usage="log.WriteEntry (message, severity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
      </Parameters>
      <Docs>
        <param name="message">必须的。 要记录的消息。 如果 <c>message</c> 为 <see langword="Nothing" />，则返回一个空字符串。</param>
        <param name="severity">消息的类型。 默认为 <see langword="TraceEventType.Information" />。</param>
        <summary>将消息写入应用程序的日志侦听器中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry`方法将消息写入应用程序的事件日志侦听器。  
  
 在客户端应用程序中`Log`对象可通过`My.Application.Log`对象。 在 Web 应用程序`Log`对象可通过`My.Log`对象。  
  
 若要了解哪个日志侦听器接收`WriteEntry`方法的消息，请参阅[演练： 确定 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)。 可以更改默认的日志侦听器。 有关详细信息，请参阅[使用应用程序日志](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 不会重载`id`自变量，`id`写入日志由以下表定义。  
  
|`severity`|默认值 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 下表列出了所涉及的任务的示例`WriteEntry`方法。  
  
|到|查看|  
|--------|---------|  
|事件信息写入应用程序的日志侦听器|[如何：编写日志消息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|确定位置`Log`将信息写入|[演练：确定 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|------------------|---------------|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|**是**|  
  
   
  
## Examples  
 本示例将演示如何使用 `My.Application.Log.WriteEntry` 方法来记录跟踪信息。 有关详细信息，请参阅[如何： 编写日志消息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 仅在客户端应用程序可以运行此代码示例。 更改`My.Application.Log.WriteEntry`到`My.Log.WriteEntry`为 Web 应用程序。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">消息类型不是 <see cref="T:System.Diagnostics.TraceEventType" /> 枚举值之一。</exception>
        <exception cref="T:System.Security.SecurityException">具有部分信任的代码调用该方法，但是写入到需要完全信任的事件日志侦听器。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制文件和文件夹的访问权限。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType * int -&gt; unit" Usage="log.WriteEntry (message, severity, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">必须的。 要记录的消息。 如果 <c>message</c> 为 <see langword="Nothing" />，则返回一个空字符串。</param>
        <param name="severity">消息的类型。 默认为 <see langword="TraceEventType.Information" />。</param>
        <param name="id">消息标识符，通常用于相关。 默认情况下，与表中所述的 <c>entryType</c> 相关。</param>
        <summary>将消息写入应用程序的日志侦听器中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry`方法将消息写入应用程序的事件日志侦听器。  
  
 在客户端应用程序中`Log`对象可通过`My.Application.Log`对象。 在 Web 应用程序`Log`对象可通过`My.Log`对象。  
  
 若要了解哪个日志侦听器接收`WriteEntry`方法的消息，请参阅[演练： 确定 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)。 可以更改默认的日志侦听器。 有关详细信息，请参阅[使用应用程序日志](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 不会重载`id`自变量，`id`写入日志由以下表定义。  
  
|`severity`|默认值 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 下表列出了所涉及的任务的示例`WriteEntry`方法。  
  
|到|查看|  
|--------|---------|  
|事件信息写入应用程序的日志侦听器|[如何：编写日志消息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|确定位置`Log`将信息写入|[演练：确定 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|------------------|---------------|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|**是**|  
  
   
  
## Examples  
 本示例将演示如何使用 `My.Application.Log.WriteEntry` 方法来记录跟踪信息。 有关详细信息，请参阅[如何： 编写日志消息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 仅在客户端应用程序可以运行此代码示例。 更改`My.Application.Log.WriteEntry`到`My.Log.WriteEntry`为 Web 应用程序。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">消息类型不是 <see cref="T:System.Diagnostics.TraceEventType" /> 枚举值之一。</exception>
        <exception cref="T:System.Security.SecurityException">具有部分信任的代码调用该方法，但是写入到需要完全信任的事件日志侦听器。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制文件和文件夹的访问权限。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteException">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将异常信息写入应用程序的日志侦听器中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception -&gt; unit" Usage="log.WriteException ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">必须的。 要记录的异常。</param>
        <summary>将异常信息写入应用程序的日志侦听器中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException`方法写入到应用程序的事件日志侦听器异常中包含的信息。  
  
 在客户端应用程序中`Log`对象可通过`My.Application.Log`对象。 在 Web 应用程序`Log`对象可通过`My.Log`对象。  
  
 若要了解哪个日志侦听器接收`WriteException`方法的消息，请参阅[演练： 确定 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)。 可以更改默认的日志侦听器。 有关详细信息，请参阅[使用应用程序日志](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 不会重载`id`如下表所定义参数，写入到日志中的标识符。  
  
|`severity`|默认值 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 下表列出了所涉及的任务的示例`WriteException`方法。  
  
|到|查看|  
|--------|---------|  
|异常信息写入应用程序的事件日志侦听器。|[如何：日志异常](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|确定 `Log` 写入信息的位置。|[演练：确定 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|------------------|---------------|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|**是**|  
  
   
  
## Examples  
 此示例演示如何使用`My.Application.Log.WriteException`方法来记录异常。 取消注释 `Dim` 和 `MsgBox` 行，导致 <xref:System.NullReferenceException> 异常。 有关详细信息，请参阅[如何： 记录异常](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 仅在客户端应用程序可以运行此代码示例。 更改`My.Application.Log.WriteException`到`My.Log.WriteException`为 Web 应用程序。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.Security.SecurityException">具有部分信任的代码调用该方法，但是写入到需要完全信任的事件日志侦听器。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制文件和文件夹的访问权限。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">必须的。 要记录的异常。</param>
        <param name="severity">消息的类型。 默认为 <see cref="F:System.Diagnostics.TraceEventType.Error" />。</param>
        <param name="additionalInfo">要追加到消息的字符串。 默认情况下为空字符串。</param>
        <summary>将异常信息写入应用程序的日志侦听器中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException`方法写入到应用程序的事件日志侦听器异常中包含的信息。  
  
 在客户端应用程序中`Log`对象可通过`My.Application.Log`对象。 在 Web 应用程序`Log`对象可通过`My.Log`对象。  
  
 若要了解哪个日志侦听器接收`WriteException`方法的消息，请参阅[演练： 确定 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)。 可以更改默认的日志侦听器。 有关详细信息，请参阅[使用应用程序日志](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 不会重载`id`如下表所定义参数，写入到日志中的标识符。  
  
|`severity`|默认值 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 下表列出了所涉及的任务的示例`WriteException`方法。  
  
|到|查看|  
|--------|---------|  
|异常信息写入应用程序的事件日志侦听器。|[如何：日志异常](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|确定 `Log` 写入信息的位置。|[演练：确定 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|------------------|---------------|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|**是**|  
  
   
  
## Examples  
 此示例演示如何使用`My.Application.Log.WriteException`方法来记录异常。 取消注释 `Dim` 和 `MsgBox` 行，导致 <xref:System.NullReferenceException> 异常。 有关详细信息，请参阅[如何： 记录异常](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 仅在客户端应用程序可以运行此代码示例。 更改`My.Application.Log.WriteException`到`My.Log.WriteException`为 Web 应用程序。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">消息类型不是 <see cref="T:System.Diagnostics.TraceEventType" /> 枚举值之一。</exception>
        <exception cref="T:System.Security.SecurityException">具有部分信任的代码调用该方法，但是写入到需要完全信任的事件日志侦听器。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制文件和文件夹的访问权限。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string * int -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ex">必须的。 要记录的异常。</param>
        <param name="severity">消息的类型。 默认为 <see cref="F:System.Diagnostics.TraceEventType.Error" />。</param>
        <param name="additionalInfo">要追加到消息的字符串。 默认情况下为空字符串。</param>
        <param name="id">消息标识符，通常用于相关。 默认情况下，与“备注”部分的表中所述的 <c>entryType</c> 相关。</param>
        <summary>将异常信息写入应用程序的日志侦听器中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException`方法写入到应用程序的事件日志侦听器异常中包含的信息。  
  
 在客户端应用程序中`Log`对象可通过`My.Application.Log`对象。 在 Web 应用程序`Log`对象可通过`My.Log`对象。  
  
 若要了解哪个日志侦听器接收`WriteException`方法的消息，请参阅[演练： 确定 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)。 可以更改默认的日志侦听器。 有关详细信息，请参阅[使用应用程序日志](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 不会重载`id`如下表所定义参数，写入到日志中的标识符。  
  
|`severity`|默认值 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 下表列出了所涉及的任务的示例`WriteException`方法。  
  
|到|查看|  
|--------|---------|  
|异常信息写入应用程序的事件日志侦听器。|[如何：日志异常](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|确定 `Log` 写入信息的位置。|[演练：确定 My.Application.Log 写入信息的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>项目类型的可用性  
  
|项目类型|可用|  
|------------------|---------------|  
|Windows 应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|**是**|  
  
   
  
## Examples  
 此示例演示如何使用`My.Application.Log.WriteException`方法来记录异常。 取消注释 `Dim` 和 `MsgBox` 行，导致 <xref:System.NullReferenceException> 异常。 有关详细信息，请参阅[如何： 记录异常](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 仅在客户端应用程序可以运行此代码示例。 更改`My.Application.Log.WriteException`到`My.Log.WriteException`为 Web 应用程序。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">消息类型不是 <see cref="T:System.Diagnostics.TraceEventType" /> 枚举值之一。</exception>
        <exception cref="T:System.Security.SecurityException">具有部分信任的代码调用该方法，但是写入到需要完全信任的事件日志侦听器。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制文件和文件夹的访问权限。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
  </Members>
</Type>