<Type Name="IImmutableList&lt;T&gt;" FullName="System.Collections.Immutable.IImmutableList&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="72b2fd1fceb7eff332be2255f1f5473e2c04a5ae" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30368481" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IImmutableList&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IImmutableList`1&lt;T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.IImmutableList`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IImmutableList(Of T)&#xA;Implements IEnumerable(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IImmutableList : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="ff81e-101">列表中元素的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ff81e-101">The type of elements in the list.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="ff81e-102">表示无法修改的元素的列表。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ff81e-102">Represents a list of elements that cannot be modified.</span>
      </span>
      <span data-ttu-id="ff81e-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">关于不可变集合和安装方法</see>）</span>
      <span class="sxs-lookup">
        <span data-stu-id="ff81e-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">about immutable collections and how to install</see>)</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff81e-104">添加或从中移除项时<xref:System.Collections.Immutable.IImmutableList%601>，创建的原始列表的副本，应用的更改...</span><span class="sxs-lookup"><span data-stu-id="ff81e-104">When you add or remove items from an <xref:System.Collections.Immutable.IImmutableList%601>, a copy of the original list is created, with the changes applied..</span></span> <span data-ttu-id="ff81e-105">对列表增量更改可能与早期版本的列表作为共享尽可能多的内存，并启用垃圾回收清理不再引用任何唯一列表数据。</span><span class="sxs-lookup"><span data-stu-id="ff81e-105">Incremental changes to a list share as much memory as possible with earlier versions of a list and enable garbage collection to clean up any unique list data that is no longer being referenced.</span></span>  
  
 <span data-ttu-id="ff81e-106">若要创建新列表，请使用 Create 方法。</span><span class="sxs-lookup"><span data-stu-id="ff81e-106">To create a new list, use the Create method.</span></span>  
  
 <span data-ttu-id="ff81e-107"><xref:System.Collections.Immutable.IImmutableList%601>会没有公共构造函数，因为这将创建一个空的不可变列表。</span><span class="sxs-lookup"><span data-stu-id="ff81e-107">The <xref:System.Collections.Immutable.IImmutableList%601> has no public constructor, as this would create an empty immutable list.</span></span> <span data-ttu-id="ff81e-108">你应创建一个新列表，使用 Create 方法。</span><span class="sxs-lookup"><span data-stu-id="ff81e-108">You should create a new list using the Create method.</span></span> <span data-ttu-id="ff81e-109">你可以将新项添加到原始列表使用一份<xref:System.Collections.Immutable.ImmutableList%601.Add%2A>，和<xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ff81e-109">You can add new items to a copy of the original list using the <xref:System.Collections.Immutable.ImmutableList%601.Add%2A>, and <xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A> methods.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Add(T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="ff81e-110">要添加到列表中的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-110">The object to add to the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff81e-111">生成列表的副本，并将指定的对象添加到所复制列表的末尾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-111">Makes a copy of the list, and adds the specified object to the end of the  copied list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-112">已添加对象的新列表，或者此列表（如果该对象已在列表中）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-112">A new list with the object added, or this list if the object is already in the list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="ff81e-113">要添加到列表中的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-113">The objects to add to the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff81e-114">生成列表的副本，并将指定的对象添加到所复制列表的末尾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-114">Makes a copy of the list and adds the specified objects to the end of the copied list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-115">已添加元素的新列表，或者此列表（如果这些元素已在列表中）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-115">A new list with the elements added, or this list if the elements already exist in the list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ff81e-116">创建一个已移除所有项，但排序和顺序语义与此列表相同的列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-116">Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-117">排序和顺序语义与此实例相同的空列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-117">An empty list that has the same sorting and ordering semantics as this instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="ff81e-118">要在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中定位的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-118">The object to locate in the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span>
          </span>
          <span data-ttu-id="ff81e-119">对于引用类型，此值可以为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-119">This value can be null for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="ff81e-120">搜索的从零开始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-120">The zero-based starting indes of the search.</span>
          </span>
          <span data-ttu-id="ff81e-121">空列表中 0（零）为有效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-121">0 (zero) is valid in an empty list.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="ff81e-122">要搜索的部分中的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-122">The number of elements in the section to search.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="ff81e-123">用于查找 <c>item</c> 的相等性比较器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-123">The equality comparer to use to locate <c>item</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff81e-124">搜索指定对象并返回 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-124">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at the specified index and contains the specified number of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-125">如果在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中从 <paramref name="index" /> 开始并包含 <paramref name="count" /> 个元素的元素范围内找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-125">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements if found; otherwise -1.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Insert (int index, T element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Insert(int32 index, !T element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, element As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Insert(int index, T element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="element" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="ff81e-126">从零开始的索引，值将插入到此处。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-126">The zero-based index at which to insert the value.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="ff81e-127">要插入的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-127">The object to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff81e-128">将指定元素插入到不可变列表中的指定索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-128">Inserts the specified element at the specified index in the immutable list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-129">包含指定元素的新不可变列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-129">A new immutable list that includes the specified element.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="ff81e-130">应在此处插入新元素的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-130">The zero-based index at which the new elements should be inserted.</span>
          </span>
        </param>
        <param name="items">
          <span data-ttu-id="ff81e-131">要插入的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-131">The elements to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff81e-132">将指定元素插入到不可变列表中的指定索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-132">Inserts the specified elements at the specified index in the immutable list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-133">包含指定元素的新不可变列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-133">A new immutable list that includes the specified elements.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="ff81e-134">要在列表中查找的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-134">The object to locate in the list.</span>
          </span>
          <span data-ttu-id="ff81e-135">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-135">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="ff81e-136">从零开始的搜索的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-136">The zero-based starting index of the search.</span>
          </span>
          <span data-ttu-id="ff81e-137">空列表中 0（零）为有效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-137">0 (zero) is valid in an empty list.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="ff81e-138">要搜索的部分中的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-138">The number of elements in the section to search.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="ff81e-139">用于匹配 <c>item</c> 的相等性比较器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-139">The equality comparer to match <c>item</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff81e-140">搜索指定对象并返回 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-140">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that contains the specified number of elements and ends at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-141">返回 <see cref="T:System.Int32" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-141">Returns <see cref="T:System.Int32" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Remove (T value, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Remove(!T value, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Remove(T value, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="ff81e-142">要从列表中移除的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-142">The object to remove from the list.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="ff81e-143">用于查找 <c>value</c> 的相等性比较器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-143">The equality comparer to use to locate <c>value</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff81e-144">从此不可变列表中移除指定对象的第一个匹配项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-144">Removes the first occurrence of a specified object from this immutable list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-145">返回一个新列表，其中的指定对象已被移除。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-145">Returns a new list with the specified object removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="ff81e-146">用于定义要移除的元素应满足的条件的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-146">The delegate that defines the conditions of the elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff81e-147">移除与指定的谓词所定义的条件相匹配的所有元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-147">Removes all the elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-148">已移除元素的新不可变列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-148">A new immutable list with the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAt (index As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="ff81e-149">要移除的元素的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-149">The index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff81e-150">移除不可变列表中指定索引处的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-150">Removes the element at the specified index of the immutable list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-151">已移除元素的新列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-151">A new list with the element removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="ff81e-152">要从列表中移除的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-152">The objects to remove from the list.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="ff81e-153">用于确定 <c>items</c> 是否与列表中的任何对象匹配的相等性比较器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-153">The equality comparer to use to determine if <c>items</c> match any objects in the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff81e-154">从列表中移除指定的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-154">Removes the specified object from the list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-155">如果 <paramref name="items" /> 与列表中的对象匹配，则返回已移除指定对象的新不可变列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-155">A new immutable list with the specified objects removed, if <paramref name="items" /> matched objects in the list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (index As Integer, count As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="ff81e-156">要移除的元素范围的从零开始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-156">The zero-based starting index of the range of elements to remove.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="ff81e-157">要移除的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-157">The number of elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff81e-158">从 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中移除一定范围的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-158">Removes a range of elements from the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-159">已移除元素的新不可变列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-159">A new immutable list with the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue">
          <span data-ttu-id="ff81e-160">要替换的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-160">The element to be replaced.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="ff81e-161">用于替换 <c>oldValue</c> 的第一个匹配项的元素</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-161">The element to replace the  the first occurrence of <c>oldValue</c> with</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="ff81e-162">用于匹配 <c>oldValue</c> 的相等性比较器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-162">The equality comparer to use for matching <c>oldValue</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff81e-163">返回一个新列表，其中的第一个匹配元素已被替换为指定的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-163">Returns a new list with the first matching element in the list replaced with the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-164">一个新列表，即使 <paramref name="oldvalue" /> 与 <paramref name="newValue" /> 相同，该列表也包含 <paramref name="newValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-164">A new list that contains <paramref name="newValue" />, even if <paramref name="oldvalue" /> is the same as <paramref name="newValue" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff81e-165">列表中不存在 <paramref name="oldValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-165">
              <paramref name="oldValue" /> does not exist in the list.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; SetItem (int index, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; SetItem(int32 index, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetItem (index As Integer, value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ SetItem(int index, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="ff81e-166">要替换的元素在列表中的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-166">The position in the list of the element to replace.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="ff81e-167">用于替换旧元素的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-167">The element to replace the old element with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff81e-168">将列表中位于给定位置的元素替换为指定的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-168">Replaces an element in the list at a given position with the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff81e-169">一个新列表，即使位于指定位置的元素与新元素相同，该列表也包含新元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff81e-169">A new list that contains the new element, even if the element at the specified location is the same as the new element.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>