<Type Name="OracleConnection" FullName="System.Data.OracleClient.OracleConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7fa285b2eb8e74d96ac0fc161882363b9909835" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34452211" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OracleConnection : System.Data.Common.DbConnection, ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OracleConnection extends System.Data.Common.DbConnection implements class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OracleClient.OracleConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OracleConnection&#xA;Inherits DbConnection&#xA;Implements ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OracleConnection sealed : System::Data::Common::DbConnection, ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.OracleClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("InfoMessage")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("OracleConnection has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一个到数据库的打开的连接。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类型已弃用，将.NET Framework 的未来版本中删除。 有关详细信息，请参阅[Oracle 和 ADO.NET](~/docs/framework/data/adonet/oracle-and-adonet.md)。  
  
 <xref:System.Data.OracleClient.OracleConnection>对象表示的唯一连接到 Oracle 数据库。 对于客户端/服务器数据库系统，它相当于网络连接到服务器。  
  
 创建的实例的应用程序<xref:System.Data.OracleClient.OracleConnection>对象可以设置声明性或命令性安全要求，要求所有直接和间接调用方拥有足够权限的代码。 <xref:System.Data.OracleClient.OracleConnection> 通过使用创建的安全要求<xref:System.Data.OracleClient.OraclePermission>对象。 用户可以验证他们的代码通过使用具有足够的权限<xref:System.Data.OracleClient.OraclePermissionAttribute>对象。 用户和管理员还可以使用代码访问安全策略工具 (Caspol.exe) 来修改在计算机、 用户和企业级别的安全策略。 有关详细信息，请参阅[安全性](http://msdn.microsoft.com/library/9a9621d7-8883-4a4f-a874-65e8e09e20a6)。  
  
> [!NOTE]
>  与不同**连接**中的其他.NET Framework 数据提供程序 （SQL Server、 OLE DB 和 ODBC），对象<xref:System.Data.OracleClient.OracleConnection>不支持<xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A>属性。 将连接超时设置作为属性或连接字符串中不起作用，而返回的值始终为零。 <xref:System.Data.OracleClient.OracleConnection> 也不支持<xref:System.Data.OracleClient.OracleConnection.Database%2A>属性或<xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A>方法。  
  
 如果<xref:System.Data.OracleClient.OracleConnection>对象超出范围时，它保持打开状态。 因此，你始终应关闭<xref:System.Data.OracleClient.OracleConnection>对象通过调用<xref:System.Data.OracleClient.OracleConnection.Close%2A>或**释放**，或通过使用<xref:System.Data.OracleClient.OracleConnection>对象内`Using`语句。 否则，在垃圾回收可能不会立即释放它们。 如果在连接的数目等待垃圾回收器删除达到最大连接数，这种延迟可能导致错误。 与此相反，通过调用关闭连接<xref:System.Data.OracleClient.OracleConnection.Close%2A>更有效地使用本机资源增强可伸缩性并提高应用程序的总体性能。 若要确保始终关闭连接，打开的内部连接`Using`块。  
  
> [!NOTE]
>  若要将高性能应用程序的部署，通常需要使用连接池。 但是，在将用于 Oracle.NET Framework 数据提供程序，你不必启用连接池，因为提供程序会自动管理。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OracleClient.OracleCommand>和<xref:System.Data.OracleClient.OracleConnection>。 <xref:System.Data.OracleClient.OracleConnection>打开并将其设置为<xref:System.Data.OracleClient.OracleCommand.Connection%2A?displayProperty=nameWithType>属性。 该示例然后调用<xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>，关闭连接。 若要实现此目的，<xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>传递连接字符串和一个 SQL INSERT 语句的查询字符串。  
  
 [!code-csharp[Classic WebData OracleConnection#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Data.OracleClient.OracleDataAdapter" />
    <altmember cref="T:System.Data.OracleClient.OracleCommand" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.OracleClient.OracleConnection" /> 的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OracleConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OracleConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.OracleClient.OracleConnection" /> 的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建并打开<xref:System.Data.OracleClient.OracleConnection>。  
  
 [!code-csharp[Classic WebData OracleConnection.OracleConnection1#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.OracleConnection1/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.OracleConnection1#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.OracleConnection1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OracleConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OracleConnection(System::String ^ connectionString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">用于打开数据库的连接。</param>
        <summary>使用指定的连接字符串初始化 <see cref="T:System.Data.OracleClient.OracleConnection" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建并打开<xref:System.Data.OracleClient.OracleConnection>。  
  
 [!code-csharp[Classic WebData OracleConnection.OracleConnection1#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.OracleConnection1/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.OracleConnection1#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.OracleConnection1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbTransaction ^ BeginDbTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在数据库中开始一个事务。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OracleClient.OracleTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.BeginTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction () As OracleTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::OracleClient::OracleTransaction ^ BeginTransaction();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在数据库中开始一个事务。</summary>
        <returns>表示新事务的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要提交或回滚事务，必须显式使用<xref:System.Data.OracleClient.OracleTransaction.Commit%2A>或<xref:System.Data.OracleClient.OracleTransaction.Rollback%2A>方法。  
  
 若要确保.NET Framework Data Provider for Oracle 事务管理模型正常运行，请避免使用其他事务管理模型，如提供的数据库。  
  
> [!NOTE]
>  如果不指定隔离级别，使用的默认隔离级别。 若要指定隔离级别与<xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>方法，请使用<xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>重载。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OracleClient.OracleConnection>和<xref:System.Data.OracleClient.OracleTransaction>。 它还演示如何使用<xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>， <xref:System.Data.OracleClient.OracleTransaction.Commit%2A>，和<xref:System.Data.OracleClient.OracleTransaction.Rollback%2A>方法。  
  
 [!code-csharp[Classic WebData OracleConnection.BeginTransaction#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.BeginTransaction/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.BeginTransaction#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.BeginTransaction/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
        <altmember cref="M:System.Data.OracleClient.OracleTransaction.Commit" />
        <altmember cref="M:System.Data.OracleClient.OracleTransaction.Rollback" />
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleTransaction BeginTransaction (System.Data.IsolationLevel il);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OracleClient.OracleTransaction BeginTransaction(valuetype System.Data.IsolationLevel il) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (il As IsolationLevel) As OracleTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::OracleClient::OracleTransaction ^ BeginTransaction(System::Data::IsolationLevel il);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="il" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="il">该连接的事务隔离级别。</param>
        <summary>使用指定的 <see cref="T:System.Data.IsolationLevel" /> 值在数据库中开始一个事务。</summary>
        <returns>表示新事务的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要提交或回滚事务，必须显式使用<xref:System.Data.OracleClient.OracleTransaction.Commit%2A>或<xref:System.Data.OracleClient.OracleTransaction.Rollback%2A>方法。  
  
 若要确保.NET Framework Data Provider for Oracle 事务管理模型正常运行，请避免使用其他事务管理模型，如提供的数据库。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OracleClient.OracleConnection>和<xref:System.Data.OracleClient.OracleTransaction>。 它还演示如何使用<xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>， <xref:System.Data.OracleClient.OracleTransaction.Commit%2A>，和<xref:System.Data.OracleClient.OracleTransaction.Rollback%2A>方法。  
  
 [!code-csharp[Classic WebData OracleConnection.BeginTransaction#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.BeginTransaction/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.BeginTransaction#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.BeginTransaction/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
        <altmember cref="M:System.Data.OracleClient.OracleTransaction.Commit" />
        <altmember cref="M:System.Data.OracleClient.OracleTransaction.Rollback" />
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.ChangeDatabase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ChangeDatabase (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ChangeDatabase(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要代替当前数据库加以使用的数据库的名称。</param>
        <summary>更改已打开的 <see cref="T:System.Data.OracleClient.OracleConnection" /> 的当前数据库。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value`参数必须包含有效的数据库名称，并且不能包含 null 值、 空字符串 ("")，或只有空白字符的字符串。  
  
> [!NOTE]
>  与不同**连接**中的其他.NET Framework 数据提供程序 （SQL Server、 OLE DB 和 ODBC），对象<xref:System.Data.OracleClient.OracleConnection>不支持<xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A>属性。 将连接超时设置作为属性或连接字符串中不起作用，而返回的值始终为零。 <xref:System.Data.OracleClient.OracleConnection> 也不支持<xref:System.Data.OracleClient.OracleConnection.Database%2A>属性或<xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">数据库名称无效。</exception>
        <exception cref="T:System.InvalidOperationException">连接未打开。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">不能更改数据库。</exception>
      </Docs>
    </Member>
    <Member MemberName="ClearAllPools">
      <MemberSignature Language="C#" Value="public static void ClearAllPools ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearAllPools() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.ClearAllPools" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearAllPools ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearAllPools();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清空连接池。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleConnection.ClearAllPools%2A> 重置 （或清空） 的连接池。 如果连接中正在使用的调用时，它们进行相应的标记，并且被丢弃时<xref:System.Data.OracleClient.OracleConnection.Close%2A>对其调用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearPool">
      <MemberSignature Language="C#" Value="public static void ClearPool (System.Data.OracleClient.OracleConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearPool(class System.Data.OracleClient.OracleConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.ClearPool(System.Data.OracleClient.OracleConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearPool (connection As OracleConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearPool(System::Data::OracleClient::OracleConnection ^ connection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.OracleClient.OracleConnection" />
      </Parameters>
      <Docs>
        <param name="connection">要从池中清除的 <see cref="T:System.Data.OracleClient.OracleConnection" />。</param>
        <summary>清空与指定连接关联的连接池。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleConnection.ClearPool%2A> 方法清除与关联的连接池`connection`。 如果其他连接与关联`connection`是在调用时使用，它们进行相应的标记，是被丢弃时<xref:System.Data.OracleClient.OracleConnection.Close%2A>对其调用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭与数据库之间的连接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleConnection.Close%2A>方法回滚任何挂起的事务。 然后，它将释放到连接池，连接或关闭的连接，如果禁用连接池。  
  
 应用程序可以调用<xref:System.Data.OracleClient.OracleConnection.Close%2A>多次而不会生成异常。  
  
> [!NOTE]
>  在将用于 Oracle.NET Framework 数据提供程序，你不需要启用连接池，因为提供程序会自动管理。  
  
> [!CAUTION]
>  不要调用<xref:System.Data.OracleClient.OracleConnection.Close%2A>上<xref:System.Data.OracleClient.OracleConnection>、 <xref:System.Data.OracleClient.OracleDataReader>，或在任何其他托管的对象`Finalize`你类的方法。 在终结器中，你应仅释放类直接拥有的非托管的资源。 如果类不拥有任何非托管资源，则不要在类定义中包含 `Finalize` 方法。 有关详细信息，请参阅[垃圾回收](~/docs/standard/garbage-collection/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleConnection.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Oracle.Design.OracleConnectionStringEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于打开 Oracle 数据库的字符串。</summary>
        <value>包含设置（如服务器名称等）的 Oracle 连接字符串需要建立初始连接。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>关闭连接时，才可以设置。  
  
 你可以使用<xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>属性，以连接到数据库。 下面的示例演示一个典型的连接字符串。  
  
```  
"Data Source=Oracle8i;Integrated Security=yes"  
```  
  
 许多字符串中指定的设置具有相应的只读属性 (例如， `Data Source=MyServer`，它对应于<xref:System.Data.OracleClient.OracleConnection.DataSource%2A>属性)。 连接字符串设置时，所有这些属性被更新，除非错误检测到，在这种情况下会更新任何属性。 <xref:System.Data.OracleClient.OracleConnection> 属性只返回默认设置或中指定这些设置<xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>。  
  
 重置<xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>关闭的连接将重置所有连接字符串值 （和相关的属性），包括密码。  
  
 在设置之后立即分析连接字符串。 如果如分析时发现错误在语法中，运行时异常， <xref:System.ArgumentException>，生成。 仅当尝试打开连接时，可以找到其他错误。  
  
 连接字符串的基本格式是用分号分隔的关键字/值对一系列。 每个关键字和它的值之间用等号 (=) 连接。 若要包含的值包含分号、 单引号字符或双引号字符，则该值必须括在双引号内。 如果值包含分号和双引号字符，则该值可以被括在单引号中。 单引号也是有用如果双引号字符开头的值。 相反，如果值开头为单引号，则可以使用双引号。 如果值包含单引号和双引号字符，用于将值括起来的引号字符必须成对出现每次它出现时的值中。  
  
 若要包含前导或尾随空格的字符串值，则该值必须括在单引号或双引号中。 忽略任何前导空格或尾随空格围绕整数、 布尔值或枚举的值，即使用引号括起来。 但是，将保留在字符串文字关键字或值中的空间。 不使用分隔符，除非引号字符不是在值的第一个或最后一个字符等情况下，可能的连接字符串中使用单引号或双引号`Data Source= my'Server`或`Data Source= my"Server`。  
  
 若要包含等号 （=） 中的关键字或值，它前面必须是另一个等号。 例如，在假设的连接字符串  
  
```  
"key==word=value"  
```  
  
 关键字是"键 = word"，值为"value"。  
  
 如果连接字符串中的关键字/值对中的特定关键字出现多次，最后一个匹配项用于设置的值。  
  
 关键字是区分大小写。  
  
 下表列出了中的值的有效名称<xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>。  
  
|name|默认|描述|  
|----------|-------------|-----------------|  
|“数据源”<br /><br /> 或<br /><br /> 服务器||要连接到的 Oracle 实例的名称或网络地址。|  
|Integrated Security|' false'|连接是否是安全的连接，或不。<br /><br /> 可识别的值为`true`（强烈建议）， `false`， `yes`，和`no`。|  
|Password||日志记录 Oracle 帐户的密码。 为了保持高级别的安全性，我们强烈建议你改为使用集成安全性关键字。|  
|Persist Security Info|' false'|当设置为`false`或`no`（强烈建议），如果连接是打开的或者一直处于打开不作为连接的一部分返回安全敏感信息，如密码<xref:System.Data.OracleClient.OracleConnection.State%2A>。 重置连接字符串将所有的连接字符串值，包括密码重置。<br /><br /> 已识别的值为 `true`、`false`、`yes` 和 `no`。|  
|Unicode|' false'|指定适用于 Oracle 的.NET Framework 数据提供程序是否使用 UTF16 模式 API 调用。 此关键字将被忽略，除非使用 Oracle9i 客户端软件。|  
|User ID||Oracle 登录帐户。 为了保持高级别的安全性，我们强烈建议你改为使用集成安全性关键字。|  
  
 下表列出的连接池内的值的有效名称<xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>。  
  
|name|默认|描述|  
|----------|-------------|-----------------|  
|连接生存期|0|连接返回到池中后，创建时间将与当前时间进行比较，如果时间跨度（秒）超过 `Connection Lifetime` 指定的值，该连接将被破坏。 在聚集配置中可以使用它来强制在运行服务器和刚联机的服务器之间达到负载平衡。<br /><br /> 值为 0 会导致池的连接具有最大连接超时。|  
|Enlist|'true'|当`true`或`yes`，池进程中自动登记创建线程的当前事务上下文中的连接。<br /><br /> 已识别的值为 `true`、`false`、`yes` 和 `no`。|  
|Max Pool Size|100|池中允许的最大连接数。 设置`Max Pool Size`值<xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>可能会影响性能。 如果你计划创建和主动使用超过 100 个连接，则应增加`Max Pool Size`总数接近于应用程序的稳定状态连接使用情况的值。|  
|Min Pool Size|0|最小池中所允许的连接数。|  
|Pooling|'true'|当`true`或`yes`、<xref:System.Data.OracleClient.OracleConnection>对象绘制从相应的池中，或如有必要，被创建并添加到相应的池中。<br /><br /> 已识别的值为 `true`、`false`、`yes` 和 `no`。|  
  
 在设置关键字或连接池需要一个布尔值的值时，你可以使用是而不是 'true'，和否而不是 'false'。 整数值表示为字符串。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OracleClient.OracleConnection>并设置其属性的一些连接字符串中。  
  
 [!code-csharp[Classic WebData OracleConnection.DataSource#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.DataSource/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.DataSource#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.DataSource/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleConnection.ConnectionTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ConnectionTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ConnectionTimeout { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在建立连接时终止尝试并生成错误之前所等待的时间。</summary>
        <value>等待连接打开所需的时间（以秒为单位）。 默认值为 15 秒。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以通过使用连接等待的时间量设置为超时`Connect Timeout`或`Connection Timeout`连接字符串中的关键字。 值为 0 表示没有限制，，应当避免在<xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>由于尝试连接将无限期等待。  
  
> [!NOTE]
>  与不同`Connection`中的其他.NET Framework 数据提供程序 （SQL Server、 OLE DB 和 ODBC），对象<xref:System.Data.OracleClient.OracleConnection>不支持<xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A>属性。 设置使用属性或连接字符串中的连接超时不起作用，而返回的值始终为零。 <xref:System.Data.OracleClient.OracleConnection> 也不支持<xref:System.Data.OracleClient.OracleConnection.Database%2A>属性或<xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定的值小于 0。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OracleClient.OracleCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.CreateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommand () As OracleCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::OracleClient::OracleCommand ^ CreateCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建并返回一个与该 <see cref="T:System.Data.OracleClient.OracleCommand" /> 关联的 <see cref="T:System.Data.OracleClient.OracleConnection" /> 对象。</summary>
        <returns>一个 <see cref="T:System.Data.OracleClient.OracleCommand" /> 对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.CreateDbCommand" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbCommand () As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ CreateDbCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleConnection.Database" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Database As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Database { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前数据库的名称或打开连接后要使用的数据库的名称。</summary>
        <value>当前数据库的名称或打开连接后要使用的数据库的名称。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleConnection.Database%2A>属性会动态更新。 如果你更改当前数据库使用 SQL 语句或<xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A>方法，发送一条信息性消息，并自动更新的属性。  
  
> [!NOTE]
>  与不同`Connection`中的其他.NET Framework 数据提供程序 （SQL Server、 OLE DB 和 ODBC），对象<xref:System.Data.OracleClient.OracleConnection>不支持<xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A>属性。 设置使用属性或连接字符串中的连接超时不起作用，而返回的值始终为零。 <xref:System.Data.OracleClient.OracleConnection> 也不支持<xref:System.Data.OracleClient.OracleConnection.Database%2A>属性或<xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.OracleClient.OracleConnection.DataSource" />
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleConnection.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DataSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataSource { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要连接的 Oracle 服务器的名称。</summary>
        <value>要连接的 Oracle 服务器的名称。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建<xref:System.Data.OracleClient.OracleConnection>并显示部分只读属性。  
  
 [!code-csharp[Classic WebData OracleConnection.DataSource#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.DataSource/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.DataSource#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.DataSource/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.OracleClient.OracleConnection.ConnectionString" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistDistributedTransaction">
      <MemberSignature Language="C#" Value="public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction distributedTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnlistDistributedTransaction(class System.EnterpriseServices.ITransaction distributedTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnlistDistributedTransaction (distributedTransaction As ITransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnlistDistributedTransaction(System::EnterpriseServices::ITransaction ^ distributedTransaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distributedTransaction" Type="System.EnterpriseServices.ITransaction" />
      </Parameters>
      <Docs>
        <param name="distributedTransaction">对用于登记的现有 <see cref="T:System.EnterpriseServices.ITransaction" /> 的引用。</param>
        <summary>在指定的事务中登记为分布式事务。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新增 ADO.NET 2.0 中功能支持使用<xref:System.Data.Common.DbConnection.EnlistTransaction%2A>方法在分布式事务中登记。 因为它登记中的连接<xref:System.Transactions.Transaction>实例， **EnlistTransaction**中可用的功能利用<xref:System.Transactions>命名空间用于管理分布式事务，使其优于**EnlistDistributedTransaction**为此目的。 有关详细信息，请参阅[分布式事务](~/docs/framework/data/adonet/distributed-transactions.md)。  
  
 你可以继续在现有使用分布式的事务中登记  
  
 <xref:System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction%2A> 如果禁用了自动登记的方法。 在现有分布式事务中登记可以确保，如果事务是提交还是回滚，数据源的代码所做的修改是也提交或回滚。  
  
 <xref:System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction%2A> 如果返回异常<xref:System.Data.OracleClient.OracleConnection>已经启动了事务使用<xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>。 但是，如果事务是在数据源上开始的本地事务 (例如，通过显式执行 BEGIN TRANSACTION 语句使用<xref:System.Data.OracleClient.OracleCommand>对象)，<xref:System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction%2A>回滚该本地事务并在现有中登记为请求的分布式的事务。 不会收到通知，该本地事务已回滚，并且会负责管理任何本地事务没有启动使用<xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EnlistTransaction(System::Transactions::Transaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">对用于登记的现有 <see cref="T:System.Transactions.Transaction" /> 的引用。</param>
        <summary>在指定的事务中登记为分布式事务。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新增 ADO.NET 2.0 中功能支持使用  
  
 <xref:System.Data.Common.DbConnection.EnlistTransaction%2A> 方法在分布式事务中登记。 因为它登记中的连接<xref:System.Transactions.Transaction>实例， **EnlistTransaction**中可用的功能利用<xref:System.Transactions>命名空间用于管理分布式事务，使其优于**EnlistDistributedTransaction**，它使用**System.EnterpriseServices.ITransaction**对象。 它还具有略有不同的语义： 后在事务中显式登记连接，不能取消登记或第一个事务完成之前在另一个事务中登记。 有关分布式事务的详细信息，请参阅[分布式事务](~/docs/framework/data/adonet/distributed-transactions.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回此 <see cref="T:System.Data.OracleClient.OracleConnection" /> 的数据源的架构信息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.GetSchema" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此 <see cref="T:System.Data.OracleClient.OracleConnection" /> 的数据源的架构信息。</summary>
        <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.GetSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema (collectionName As String) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema(System::String ^ collectionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="collectionName">指定要返回的架构的名称。</param>
        <summary>使用表示架构名称的指定字符串返回此 <see cref="T:System.Data.OracleClient.OracleConnection" /> 的数据源的架构信息。</summary>
        <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 查询使用<xref:System.Data.OracleClient.OracleConnection.GetSchema%2A>区分大小写。 由于 Oracle 的处理的事例时首次创建架构，这可能导致意外的结果。  
  
 如果架构创建不带引号`,`Oracle 以大写形式存储的对象名称。 如果创建包含引号的架构，Oracle 提供的大小写方面存储的对象名称。  
  
 例如，假设你创建一个名为 MyTable，使用以下两个语句之一表：  
  
 `CREATE TABLE MyTable ...`  
  
 `CREATE TABLE "MyTable" ...`  
  
 若要检索有关通过此表的信息**GetSchema**方法中第一种情况，你将必须作为自变量中传递"MYTABLE"。 在第二种情况，你必须在作为参数传递"MyTable"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="collectionName" /> 被指定为空。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName, string[] restrictionValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.GetSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema (collectionName As String, restrictionValues As String()) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema(System::String ^ collectionName, cli::array &lt;System::String ^&gt; ^ restrictionValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
        <Parameter Name="restrictionValues" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="collectionName">指定要返回的架构的名称。</param>
        <param name="restrictionValues">请求的架构的一组限制值。</param>
        <summary>使用表示架构名称的指定字符串以及表示限制值的指定字符串数组返回此 <see cref="T:System.Data.OracleClient.OracleConnection" /> 的数据源的架构信息。</summary>
        <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `restrictionValues`参数可以提供的值所指定的特定集合的限制集合的 n 深度。 为了对给定的限制，设置值和设置的其他限制的值，你需要设置前面的限制条件为 null，然后为你想要为指定值的限制中的相应值。  
  
 此示例为"表"集合。 如果"Tables"集合具有 3 限制： 数据库、 所有者和表名称;你想要取回仅与"Carl"的所有者关联的表，然后你将需要以通过 （至少） 的以下值： null，"Carl"。 如果未传入限制值，默认值用于该限制。 这将是相同的映射与传入 null，这是不同于传入的参数值为空字符串。 在这种情况下，空字符串 ("") 被视为可为指定的参数的值。  
  
 查询使用<xref:System.Data.OracleClient.OracleConnection.GetSchema%2A>区分大小写。 由于 Oracle 的处理的事例时首次创建架构，这可能导致意外的结果。  
  
 如果架构创建不带引号`,`Oracle 以大写形式存储的对象名称。 如果创建包含引号的架构，Oracle 提供的大小写方面存储的对象名称。  
  
 例如，假设你创建一个名为 MyTable，使用以下两个语句之一表：  
  
 `CREATE TABLE MyTable ...`  
  
 `CREATE TABLE "MyTable" ...`  
  
 若要检索有关通过此表的信息**GetSchema**方法中第一种情况，你将必须作为自变量中传递"MYTABLE"。 在第二种情况，你必须在作为参数传递"MyTable"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="collectionName" /> 被指定为空。</exception>
      </Docs>
    </Member>
    <Member MemberName="InfoMessage">
      <MemberSignature Language="C#" Value="public event System.Data.OracleClient.OracleInfoMessageEventHandler InfoMessage;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.OracleClient.OracleInfoMessageEventHandler InfoMessage" />
      <MemberSignature Language="DocId" Value="E:System.Data.OracleClient.OracleConnection.InfoMessage" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event InfoMessage As OracleInfoMessageEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::OracleClient::OracleInfoMessageEventHandler ^ InfoMessage;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleInfoMessageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 Oracle 发送警告或信息性消息时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 适用于 Oracle 的.NET Framework 数据提供程序使用 Oracle 调用接口 (OCI)，每当数据提供程序收到成功与信息消息，因为<xref:System.Data.OracleClient.OracleConnection.InfoMessage>生成事件。 示例将创建包含语法错误的存储的过程。 调用<xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>方法将成功。 但是<xref:System.Data.OracleClient.OracleConnection.InfoMessage>将通知你语法错误生成事件。  
  
 想要处理警告或信息性消息由服务器发送客户端应创建<xref:System.Data.OracleClient.OracleInfoMessageEventHandler>委托来侦听此事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.Open" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Open();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用 <see cref="P:System.Data.OracleClient.OracleConnection.ConnectionString" /> 指定的属性设置打开一个到数据库的连接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleConnection>从连接池中绘制的开放连接，如果有的话。 否则，它在建立新连接到数据库。  
  
> [!NOTE]
>  如果<xref:System.Data.OracleClient.OracleConnection>超出范围，它表示的连接不会关闭自动。 因此，必须显式关闭连接通过调用<xref:System.Data.OracleClient.OracleConnection.Close%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接未打开。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">不能更改数据库。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleConnection.ServerVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ServerVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ServerVersion { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含客户端所连接到的服务器的版本的字符串。</summary>
        <value>连接的服务器的版本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleConnection.ServerVersion%2A>属性是在 Oracle 版本格式。 例如，对于 Oracle8 版本的格式是窗体中的字符串"8.1.7.0.0 Oracle8 释放 8.1.7.0.0-生产。"  
  
   
  
## Examples  
 下面的示例创建<xref:System.Data.OracleClient.OracleConnection>并显示部分只读属性。  
  
 [!code-csharp[Classic WebData OracleConnection.ServerVersion#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.ServerVersion/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.ServerVersion#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.ServerVersion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As ConnectionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::ConnectionState State { System::Data::ConnectionState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取连接的当前状态。</summary>
        <value>
          <see cref="T:System.Data.ConnectionState" /> 值的按位组合。 默认值为 <see langword="Closed" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 允许的状态更改是：  
  
-   从`Closed`到`Open`，使用`Open`方法<xref:System.Data.OracleClient.OracleConnection>对象。  
  
-   从`Open`到`Closed`，使用<xref:System.Data.OracleClient.OracleConnection.Close%2A>方法<xref:System.Data.OracleClient.OracleConnection>对象。  
  
   
  
## Examples  
 下面的示例创建派生类的实例<xref:System.Data.OracleClient.OracleConnection>，设置其<xref:System.Data.IDbConnection.ConnectionString%2A>，并显示其<xref:System.Data.OracleClient.OracleConnection.State%2A>。  
  
 [!code-csharp[Classic WebData OracleConnection.State#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.State/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.State#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.State/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建作为当前实例副本的新对象。</summary>
        <returns>作为此实例副本的新对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式的接口成员实现。 它只能在 <xref:System.Data.OracleClient.OracleConnection> 实例强制转换为 <xref:System.ICloneable> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>