<Type Name="XslTransform" FullName="System.Xml.Xsl.XslTransform">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bde6eef3e191bd0a25d4c462afa81d1cbfd131ba" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37733110" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XslTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XslTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslTransform sealed" />
  <TypeSignature Language="F#" Value="type XslTransform = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>使用可扩展样式表转换语言 (XSLT) 转换 XML 数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是 Microsoft.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须使用命名空间`http://www.w3.org/1999/XSL/Transform`。  
  
 其他参数还可以添加到样式表使用<xref:System.Xml.Xsl.XsltArgumentList>类。 此类包含的样式表和扩展对象可以从样式表调用的输入的参数。  
  
 若要将 XML 数据转换：  
  
1.  创建<xref:System.Xml.Xsl.XslTransform>对象。  
  
2.  使用<xref:System.Xml.Xsl.XslTransform.Load%2A>方法以加载该转换的样式表。 此方法有若干重载，可以加载样式表使用<xref:System.Xml.XmlReader>， <xref:System.Xml.XPath.XPathNavigator>， <xref:System.Xml.XPath.IXPathNavigable>，或具有文件的位置的 URL。  
  
3.  使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法来转换 XML 数据。 此方法有若干重载，可以处理不同类型的输入和输出。 此外可以指定<xref:System.Xml.Xsl.XsltArgumentList>包含要在转换期间使用作为输入的其他参数。  
  
 **安全注意事项**  
  
 在创建使用 <xref:System.Xml.Xsl.XslTransform> 类的应用程序时，应了解下列项及其含义：  
  
-   默认情况下启用扩展对象。 如果包含扩展对象的 <xref:System.Xml.Xsl.XsltArgumentList> 对象传递给 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法，将利用这些扩展对象。  
  
-   XSLT 样式表可以包括对其他文件的引用以及嵌入式脚本块。 恶意用户可以利用这一点您提供数据或样式表，在执行时将导致您的系统进行处理，直到计算机资源不足。  
  
-   在混合信任环境下运行的 XSLT 应用程序可能会引发样式表欺骗。 例如，恶意用户可能会为对象加载有害的样式表，并将其交给另一个用户，而后者会继续调用 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法并执行转换。  
  
 可以通过不接受来缓解这些安全问题<xref:System.Xml.Xsl.XslTransform>对象、 XSLT 样式表或来自不可信源的 XML 源数据。  
  
 **脚本支持**  
  
 此类支持嵌入的脚本使用`msxsl:script`元素。  
  
 在.NET Framework 1.1 版中，样式表的证据确定哪些权限授予用于嵌入的脚本。  
  
-   如果样式表加载从统一资源标识符 (URI)，使用 URI 创建证据。 此证据包括以及站点和区域的 URI。  
  
-   如果使用另一个源加载样式表，则可以通过传递提供证据<xref:System.Security.Policy.Evidence?displayProperty=nameWithType>对象传递给<xref:System.Xml.Xsl.XslTransform.Load%2A>方法。 否则，脚本程序集具有完全信任。  
  
 不完全受信任调用方：`UnmanagedCode`编译嵌入式的脚本所需的权限。 `ControlEvidence` 提供所需的权限<xref:System.Security.Policy.Evidence>到<xref:System.Xml.Xsl.XslTransform.Load%2A>方法。 一个<xref:System.Security.SecurityException>如果调用方没有所需的权限，将引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission?displayProperty=nameWithType>和<xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=nameWithType>。  
  
 `msxsl:script`元素具有以下要求：  
  
-   `msxsl:script`元素属于`urn:schemas-microsoft-com:xslt`命名空间。 样式表必须包含命名空间声明`xmlns:msxsl=urn:schemas-microsoft-com:xslt`。  
  
-   `msxsl:script`元素可以包含`language`的特性，指定要使用的脚本语言。 值`language`属性必须是以下值之一： C#、 c#、 VB、 VisualBasic、 JScript 或 JavaScript。 语言名称不区分大小写，因为 JavaScript 和 javascript 都是有效。 如果`language`属性未指定，则默认为 JScript。  
  
-   `msxsl:script`元素必须包括`implements-prefix`属性，其中包含表示与脚本块关联的命名空间的前缀。 此命名空间必须定义的样式表中。 样式表可以包含多个脚本块的命名空间进行分组。 不能具有相同的命名空间内的多个语言的脚本块。 脚本块可以调用在另一个脚本块中定义的函数提供的脚本块驻留在相同的命名空间。 根据规则和脚本语言的语法的脚本块的内容进行解析 (通过提供`language`属性)。 例如，如果你有 C# 脚本块，注释就会通过`//`字符。 注释必须是有效的 XML 内容。  
  
 `Note` 建议将脚本块包装在 CDATA 部分。  
  
```  
<msxsl:script implements-prefix='xy' language='C#'>  
  <![CDATA[  
  // Add code here.  
  ]]]></format>
    </remarks>
    <threadsafe>
      <see cref="T:System.Xml.Xsl.XslTransform" /> 对象是用于转换操作的唯一线程安全。 其他操作不保证是线程安全。 您必须确保没有其他方法的调用对象上在加载操作期间。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Xsl.XslTransform" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>加载 XSLT 样式表，包括在 <see langword="xsl:include" /> 和 <see langword="xsl:import" /> 元素中引用的样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="xslTransform.Load url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">指定要加载的 XSLT 样式表的 URL。</param>
        <summary>加载由一个 URL 指定的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl="http://www.w3.org/1999/XSL/Transform"`。  
  
 此方法加载 XSLT 样式表，其中包括引用中的所有样式表`xsl:include`和`xsl:import`元素。 使用解析外部资源<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。 如果样式表都位于要求身份验证的网络资源，使用的重载<xref:System.Xml.XmlResolver>作为其参数之一，并指定<xref:System.Xml.XmlResolver>与所需的凭据。  
  
 如果样式表包含嵌入的脚本，该脚本将编译为程序集。 样式表的 URI 用于创建应用于程序集的证据。 有关的问题<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和样式表与嵌入式脚本，请参阅在中 Microsoft 知识库的文章 Q316755 http://support.microsoft.com。  
  
> [!NOTE]
>  如果调用方不具有`UnmanagedCode`权限，嵌入的脚本将不进行编译和<xref:System.Security.SecurityException>引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例将 XML 文档转换为 HTML 文档。 它显示在表中的 ISBN、 标题和每本书的价格。  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 示例使用下列两个输入文件。  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含 XSLT 样式表的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
        <summary>加载 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 此方法加载 XSLT 样式表，其中包括引用中的所有样式表`xsl:include`和`xsl:import`元素。 使用解析外部资源<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。 如果样式表都位于要求身份验证的网络资源，使用的重载<xref:System.Xml.XmlResolver>作为其参数之一，并指定<xref:System.Xml.XmlResolver>与所需的凭据。  
  
 从当前节点的样式表加载<xref:System.Xml.XmlReader>通过其所有子项。 这可以用作样式表文档的一部分。 后<xref:System.Xml.Xsl.XslTransform.Load%2A>方法返回时，<xref:System.Xml.XmlReader>样式表的结尾后定位到下一个节点。 如果已到达文档结尾，<xref:System.Xml.XmlReader> 将位于文件结尾 (EOF)。  
  
 如果样式表将包含实体，则应指定<xref:System.Xml.XmlReader>可以解析实体 (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType>返回`true`)。 在这种情况下，<xref:System.Xml.XmlValidatingReader>可用。  
  
 如果样式表包含嵌入的脚本，该脚本将编译为程序集。 程序集具有完全信任。 建议的做法是提供证据使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。 有关的问题<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和样式表与嵌入式脚本，请参阅在中 Microsoft 知识库的文章 Q316755 http://support.microsoft.com。  
  
> [!NOTE]
>  如果调用方不具有`UnmanagedCode`权限，嵌入的脚本将不进行编译和<xref:System.Security.SecurityException>引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例转换按标题排序所有书籍的 XML 文件。  
  
 [!code-cpp[XslTransform.Load3#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load3/CPP/trans3.cpp#1)]
 [!code-csharp[XslTransform.Load3#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load3/CS/trans3.cs#1)]
 [!code-vb[XslTransform.Load3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load3/VB/trans3.vb#1)]  
  
 该示例使用以下数据文件作为输入。  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load3#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/books.xml#2)]  
  
 `titles.xsl`  
  
 [!code-xml[XslTransform.Load3#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/titles.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <summary>加载 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 此方法加载 XSLT 样式表，其中包括引用中的所有样式表`xsl:include`和`xsl:import`元素。 使用解析外部资源<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。 如果样式表都位于要求身份验证的网络资源，使用的重载<xref:System.Xml.XmlResolver>作为其参数之一，并指定<xref:System.Xml.XmlResolver>与所需的凭据。  
  
 如果样式表包含嵌入的脚本，该脚本将编译为程序集。 程序集具有完全信任。 建议的做法是提供证据使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。 有关的问题<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和样式表与嵌入式脚本，请参阅在中 Microsoft 知识库的文章 Q316755 http://support.microsoft.com。  
  
> [!NOTE]
>  如果调用方不具有`UnmanagedCode`权限，嵌入的脚本将不进行编译和<xref:System.Security.SecurityException>引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</param>
        <summary>加载 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 此方法加载 XSLT 样式表，其中包括引用中的所有样式表`xsl:include`和`xsl:import`元素。 使用解析外部资源<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。 如果样式表都位于要求身份验证的网络资源，使用的重载<xref:System.Xml.XmlResolver>作为其参数之一，并指定<xref:System.Xml.XmlResolver>与所需的凭据。  
  
 从当前的位置加载样式表<xref:System.Xml.XPath.XPathNavigator>。 若要使用的样式表作为所加载文档的一部分，导航到样式表的开头相对应的节点。 之后<xref:System.Xml.Xsl.XslTransform.Load%2A>方法返回时，<xref:System.Xml.XPath.XPathNavigator>位于样式表的开头 (在`xsl:style sheet`节点)。  
  
 如果样式表包含嵌入的脚本，该脚本将编译为程序集。 程序集具有完全信任。 建议的做法是提供证据使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。 有关的问题<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和样式表与嵌入式脚本，请参阅在中 Microsoft 知识库的文章 Q316755 http://support.microsoft.com。  
  
> [!NOTE]
>  如果调用方不具有`UnmanagedCode`权限，嵌入的脚本将不进行编译和<xref:System.Security.SecurityException>引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : string * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (url, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="url">指定要加载的 XSLT 样式表的 URL。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用于加载该样式表以及 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。  如果这是 <see langword="null" />，将使用不具有用户凭据的默认 <see cref="T:System.Xml.XmlUrlResolver" /> 来打开样式表。 不使用默认的 <see cref="T:System.Xml.XmlUrlResolver" /> 来解析样式表中的任何外部资源，因此将不解析 <c>xsl:import</c> 和 <c>xsl:include</c> 元素。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />。</param>
        <summary>加载由一个 URL 指定的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 如果样式表包含嵌入的脚本，该脚本将编译为程序集。 样式表的 URI 用于创建应用于程序集的证据。 有关的问题<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和样式表与嵌入式脚本，请参阅在中 Microsoft 知识库的文章 Q316755 http://support.microsoft.com。  
  
> [!NOTE]
>  如果调用方不具有`UnmanagedCode`权限，嵌入的脚本将不进行编译和<xref:System.Security.SecurityException>引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例将 XML 文档转换为 HTML 文档。 该示例加载 XSLT 样式表，其中包含`xsl:include`元素引用另一个样式表。 <xref:System.Xml.XmlUrlResolver>传递给<xref:System.Xml.Xsl.XslTransform.Load%2A>设置的凭据访问包含的样式表的网络资源所需的方法。  
  
 [!code-csharp[XslTransform.Load2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load2/CS/trans2.cs#1)]
 [!code-vb[XslTransform.Load2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load2/VB/trans2.vb#1)]  
  
 该示例使用以下数据文件作为输入。  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load2#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/books.xml#2)]  
  
 `sort.xsl`  
  
 [!code-xml[XslTransform.Load2#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/sort.xsl#3)]  
  
 `includefile.xsl`  
  
 [!code-xml[XslTransform.Load2#4](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/includefile.xsl#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含 XSLT 样式表的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />。</param>
        <summary>加载 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 此方法加载 XSLT 样式表，其中包括引用中的所有样式表`xsl:include`和`xsl:import`元素。 从当前节点的样式表加载<xref:System.Xml.XmlReader>通过其所有子项。 这可以用作样式表文档的一部分。  
  
 后<xref:System.Xml.Xsl.XslTransform.Load%2A>方法返回时，<xref:System.Xml.XmlReader>样式表的结尾后定位到下一个节点。 如果已到达文档结尾，<xref:System.Xml.XmlReader> 将位于文件结尾 (EOF)。  
  
 如果样式表将包含实体，则应指定<xref:System.Xml.XmlReader>可以解析实体 (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType>返回`true`)。 在这种情况下，<xref:System.Xml.XmlValidatingReader>可用。  
  
 如果样式表包含嵌入的脚本，该脚本将编译为程序集。 程序集具有完全信任。 建议的做法是提供证据使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。 有关的问题<xref:System.Xml.Xsl.XslTransform.Load%2A>包含嵌入脚本的方法和样式表，请参阅在中 Microsoft 知识库的文章 Q316755 http://support.microsoft.com。  
  
> [!NOTE]
>  如果调用方不具有`UnmanagedCode`权限，嵌入的脚本将不进行编译和<xref:System.Security.SecurityException>引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />。</param>
        <summary>加载 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 如果样式表包含嵌入的脚本，该脚本将编译为程序集。 程序集具有完全信任。 建议的做法是提供证据使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。 有关的问题<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和样式表与嵌入式脚本，请参阅在中 Microsoft 知识库的文章 Q316755 http://support.microsoft.com。  
  
> [!NOTE]
>  如果调用方不具有`UnmanagedCode`权限，嵌入的脚本将不进行编译和<xref:System.Security.SecurityException>引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />。</param>
        <summary>加载 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 从当前的位置加载样式表<xref:System.Xml.XPath.XPathNavigator>。 若要使用与样式表加载文档的一部分，导航到样式表的开头相对应的节点。 之后<xref:System.Xml.Xsl.XslTransform.Load%2A>方法返回时，<xref:System.Xml.XPath.XPathNavigator>位于样式表的开头 (在`xsl:style sheet`节点)。  
  
 如果样式表包含嵌入的脚本，该脚本将编译为程序集。 程序集具有完全信任。 建议的做法是提供证据使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>。 有关的问题<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和样式表与嵌入式脚本，请参阅在中 Microsoft 知识库的文章 Q316755 http://support.microsoft.com。  
  
> [!NOTE]
>  如果调用方不具有`UnmanagedCode`权限，嵌入的脚本将不进行编译和<xref:System.Security.SecurityException>引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含要加载的样式表的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />。</param>
        <param name="evidence">在为 XSLT 样式表中的脚本块生成的程序集上设置的 <see cref="T:System.Security.Policy.Evidence" />。  如果为 <see langword="null" />，则不处理脚本块、不支持 XSLT <c>document()</c> 函数，并且不允许使用特权扩展对象。  调用方必须有 <see langword="ControlEvidence" /> 权限，才能为脚本程序集提供证据。 不完全受信任的调用方可以将此参数设置为 <see langword="null" />。</param>
        <summary>加载 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 样式表。 此方法允许您通过指定证据来限制样式表的权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 此方法加载 XSLT 样式表，其中包括引用中的所有样式表`xsl:include`和`xsl:import`元素。 从当前节点的样式表加载<xref:System.Xml.XmlReader>通过其所有子项。 这可以用作样式表文档的一部分。  
  
 后<xref:System.Xml.Xsl.XslTransform.Load%2A>方法返回时，<xref:System.Xml.XmlReader>样式表的结尾后定位到下一个节点。 如果已到达文档结尾，<xref:System.Xml.XmlReader> 将位于文件结尾 (EOF)。  
  
 如果样式表将包含实体，则应指定<xref:System.Xml.XmlReader>可以解析实体 (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType>返回`true`)。 在这种情况下，<xref:System.Xml.XmlValidatingReader>可用。  
  
 有关的问题<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和样式表与嵌入式脚本，请参阅在中 Microsoft 知识库的文章 Q316755 http://support.microsoft.com。  
  
 有不同的方式提供证据。 下表介绍常见用户方案提供证据的类型。  
  
    
  
## Examples  
 下面的示例执行的 XSLT 转换，其中`xsltReader`是<xref:System.Xml.XmlReader>包含样式表和`secureURL`是可用于创建一个受信任的 URL <xref:System.Security.Policy.Evidence>。 <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A?displayProperty=nameWithType>方法用于创建<xref:System.Security.Policy.Evidence>其应用于样式表。  
  
 [!code-cpp[XslTransform.Load4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load4/CPP/trans_ev.cpp#1)]
 [!code-csharp[XslTransform.Load4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load4/CS/trans_ev.cs#1)]
 [!code-vb[XslTransform.Load4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load4/VB/trans_ev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
        <exception cref="T:System.Security.SecurityException">引用的样式表需要的功能是所提供的证据不允许的。  调用方尝试提供证据但没有 <see langword="ControlEvidence" /> 权限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">为提供证据。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="stylesheet">实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />。</param>
        <param name="evidence">在为 XSLT 样式表中的脚本块生成的程序集上设置的 <see cref="T:System.Security.Policy.Evidence" />。  如果为 <see langword="null" />，则不处理脚本块、不支持 XSLT <c>document()</c> 函数，并且不允许使用特权扩展对象。  调用方必须有 <see langword="ControlEvidence" /> 权限，才能为脚本程序集提供证据。 不完全受信任的调用方可以将此参数设置为 <see langword="null" />。</param>
        <summary>加载 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 样式表。 此方法允许您通过指定证据来限制样式表的权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 有关的问题<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和样式表与嵌入式脚本，请参阅在中 Microsoft 知识库的文章 Q316755 http://support.microsoft.com。  
  
 有不同的方式提供证据。 下表介绍常见用户方案提供证据的类型。  
  
  ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
        <exception cref="T:System.Security.SecurityException">引用的样式表需要的功能是所提供的证据不允许的。  调用方尝试提供证据但没有 <see langword="ControlEvidence" /> 权限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">为提供证据。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含要加载的样式表的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />。</param>
        <param name="evidence">在为 XSLT 样式表中的脚本块生成的程序集上设置的 <see cref="T:System.Security.Policy.Evidence" />。  如果为 <see langword="null" />，则不处理脚本块、不支持 XSLT <c>document()</c> 函数，并且不允许使用特权扩展对象。  调用方必须有 <see langword="ControlEvidence" /> 权限，才能为脚本程序集提供证据。 不完全受信任的调用方可以将此参数设置为 <see langword="null" />。</param>
        <summary>加载 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 样式表。 此方法允许您通过指定证据来限制样式表的权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 从当前的位置加载样式表<xref:System.Xml.XPath.XPathNavigator>。 若要使用与样式表加载文档的一部分，导航到样式表的开头相对应的节点。 之后<xref:System.Xml.Xsl.XslTransform.Load%2A>方法返回时，<xref:System.Xml.XPath.XPathNavigator>位于样式表的开头 (在`xsl:style sheet`节点)。  
  
 有关的问题<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和样式表与嵌入式脚本，请参阅在中 Microsoft 知识库的文章 Q316755 http://support.microsoft.com。  
  
 有不同的方式提供证据。 下表介绍常见用户方案提供证据的类型。  
  
    
  
## Examples  
 下面的示例执行 XSLT 转换使用来自外部源的样式表。 样式表来自受信任的源，因为`resolver`并`evidence`参数设置为`null`。  
  
 [!code-csharp[XslTransform.Load5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load5/CS/trans_noev.cs#1)]
 [!code-vb[XslTransform.Load5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load5/VB/trans_noev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
        <exception cref="T:System.Security.SecurityException">引用的样式表需要的功能是所提供的证据不允许的。  调用方尝试提供证据但没有 <see langword="ControlEvidence" /> 权限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">为提供证据。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用加载的 XSLT 样式表转换 XML 数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string -&gt; unit" Usage="xslTransform.Transform (inputfile, outputfile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputfile">要转换的源文档的 URL。</param>
        <param name="outputfile">输出文件的 URL。</param>
        <summary>转换输入文件中的 XML 数据并将结果输出到输出文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
> [!NOTE]
>  此方法是在.NET Framework 1.1 版中已过时。 设置<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>属性确定如何 XSLT`document()`函数得到解决。 建议的做法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法采用<xref:System.Xml.XmlResolver>对象作为其参数之一。  
  
   
  
## Examples  
 下面的示例转换`books.xml`文件中使用`output.xsl`样式表并将结果输出到`books.html`文件。  
  
 [!code-cpp[XslTransform.Transform3#1](~/samples/snippets/cpp/VS_Snippets_Data/xsltransform.transform3/CPP/trans_snip2.cpp#1)]
 [!code-csharp[XslTransform.Transform3#1](~/samples/snippets/csharp/VS_Snippets_Data/xsltransform.transform3/CS/trans_snip2.cs#1)]
 [!code-vb[XslTransform.Transform3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/xsltransform.transform3/VB/trans_snip2.vb#1)]  
  
 该示例使用以下两个输入的文件：  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlReader" />。</summary>
        <returns>包含转换结果的 <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
> [!NOTE]
>  此方法现已过时。 设置<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>属性确定如何 XSLT`document()`函数得到解决。 建议的做法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法采用<xref:System.Xml.XmlResolver>对象作为其参数之一。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。 `xsl:output`到输出时，不支持元素<xref:System.Xml.XmlReader>(`xsl:output`元素将被忽略)。 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息。  
  
 此方法可以进行异步转换的源文档。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建<xref:System.Xml.XmlDocument>包含只是在节点片断并将其传递<xref:System.Xml.XmlDocument>到<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 以下示例对一个节点片段执行转换。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 该示例使用`library.xml`和`print_root.xsl`文件作为输入并输出到控制台如下。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlReader" />。</summary>
        <returns>包含转换结果的 <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。 转换选择作为一个整体应用到文档。 换而言之，如果当前节点节点树，而不是文档根节点上设置的则这不会阻止转换过程访问已加载的文档中的所有节点。 执行转换后，<xref:System.Xml.XPath.XPathNavigator>保留为其原始状态。 这意味着，节点，这是当前转换过程之前，将保留当前节点之后<xref:System.Xml.Xsl.XslTransform.Transform%2A>调用方法。  
  
 因为<xref:System.Xml.XmlReader>提供了只读、 只输出`xsl:output`元素将被忽略。 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息。  
  
 此方法可以进行异步转换的源文档。  
  
> [!NOTE]
>  此方法已过时。 设置<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>属性确定如何 XSLT document （） 函数已解决。 建议的做法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法采用<xref:System.Xml.XmlResolver>对象作为其参数之一。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (inputfile, outputfile, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="inputfile">要转换的源文档的 URL。</param>
        <param name="outputfile">输出文件的 URL。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />。</param>
        <summary>转换输入文件中的 XML 数据并将结果输出到输出文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
   
  
## Examples  
 下面的示例执行 XSLT 转换，并将输出到文件。 <xref:System.Xml.XmlUrlResolver>凭据使用具有默认解析外部资源。 有关详细信息，请参阅<xref:System.Net.CredentialCache.DefaultCredentials%2A>。  
  
 [!code-cpp[XslTransform.Transform7#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTRansform.Transform7/CPP/trans_snip4.cpp#1)]
 [!code-csharp[XslTransform.Transform7#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTRansform.Transform7/CS/trans_snip4.cs#1)]
 [!code-vb[XslTransform.Transform7#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTRansform.Transform7/VB/trans_snip4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的流。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.Stream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
> [!NOTE]
>  此方法现已过时。 设置<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>属性确定如何 XSLT`document()`函数得到解决。 建议的做法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法采用<xref:System.Xml.XmlResolver>对象作为其参数之一。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建<xref:System.Xml.XmlDocument>包含只是在节点片断并将其传递<xref:System.Xml.XmlDocument>到<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 以下示例对一个节点片段执行转换。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 该示例使用`library.xml`和`print_root.xsl`文件作为输入并输出到控制台如下。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
> [!NOTE]
>  此方法现已过时。 设置<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>属性确定如何 XSLT`document()`函数得到解决。 建议的做法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法采用<xref:System.Xml.XmlResolver>对象作为其参数之一。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。  
  
 上的编码属性`xsl:output`到输出时，不支持元素<xref:System.IO.TextWriter>。 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息在其上`xsl:output`支持属性。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建<xref:System.Xml.XmlDocument>包含只是在节点片段，并将其传递<xref:System.Xml.XmlDocument>到<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 以下示例对一个节点片段执行转换。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 该示例使用`library.xml`和`print_root.xsl`文件作为输入并输出到控制台如下。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlResolver -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlReader" />。</summary>
        <returns>包含转换结果的 <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。 `xsl:output`到输出时，不支持元素<xref:System.Xml.XmlReader>(`xsl:output`元素将被忽略)。 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息。  
  
 此方法可以进行异步转换的源文档。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建<xref:System.Xml.XmlDocument>包含只是在节点片段，并将其传递<xref:System.Xml.XmlDocument>到<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 以下示例对一个节点片段执行转换。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 该示例使用`library.xml`和`print_root.xsl`文件作为输入并输出到控制台如下。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
   
  
## Examples  
 下面的示例转换 XML 文档并将结果输出到`XmlReader`。 <xref:System.Xml.XmlUrlResolver>所需的凭据与用于处理任何 XSLT`document()`函数。  
  
 [!code-cpp[XslTransform.Transform4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform4/CPP/trans_snip3.cpp#1)]
 [!code-csharp[XslTransform.Transform4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform4/CS/trans_snip3.cs#1)]
 [!code-vb[XslTransform.Transform4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform4/VB/trans_snip3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
> [!NOTE]
>  此方法现已过时。 设置<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>属性确定如何 XSLT`document()`函数得到解决。 建议的做法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法采用<xref:System.Xml.XmlResolver>对象作为其参数之一。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。 `xsl:output`到输出时，不支持元素<xref:System.Xml.XmlWriter>(`xsl:output`将被忽略)。 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建<xref:System.Xml.XmlDocument>包含只是在节点片断并将其传递<xref:System.Xml.XmlDocument>到<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 以下示例对一个节点片段执行转换。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 该示例使用`library.xml`和`print_root.xsl`文件作为输入并输出到控制台如下。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的流。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.Stream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。 转换选择作为一个整体应用到文档。 换而言之，如果当前节点节点树，而不是文档根节点上设置的则这不会阻止转换过程访问已加载的文档中的所有节点。 执行转换后，<xref:System.Xml.XPath.XPathNavigator>保留为其原始状态。 这意味着，节点，这是当前转换过程之前，将保留当前节点之后<xref:System.Xml.Xsl.XslTransform.Transform%2A>调用方法。  
  
 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息在其上`xsl:output`支持属性。  
  
> [!NOTE]
>  此方法现已过时。 设置<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>属性确定如何 XSLT`document()`函数得到解决。 建议的做法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法采用<xref:System.Xml.XmlResolver>对象作为其参数之一。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。 转换选择作为一个整体应用到文档。 换而言之，如果当前节点节点树，而不是文档根节点上设置的则这不会阻止转换过程访问已加载的文档中的所有节点。 执行转换后，<xref:System.Xml.XPath.XPathNavigator>保留为其原始状态。 这意味着，节点，这是当前转换过程之前，将保留当前节点之后<xref:System.Xml.Xsl.XslTransform.Transform%2A>调用方法。  
  
 上的编码属性`xsl:output`到输出时，不支持元素<xref:System.IO.TextWriter>。 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息在其上`xsl:output`支持属性。  
  
> [!NOTE]
>  此方法现已过时。 设置<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>属性确定如何 XSLT`document()`函数得到解决。 建议的做法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法采用<xref:System.Xml.XmlResolver>对象作为其参数之一。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlResolver -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlReader" />。</summary>
        <returns>包含转换结果的 <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。 转换选择作为一个整体应用到文档。 换而言之，如果当前节点节点树，而不是文档根节点上设置的则这不会阻止转换过程访问已加载的文档中的所有节点。 执行转换后，<xref:System.Xml.XPath.XPathNavigator>保留为其原始状态。 这意味着，节点，这是当前转换过程之前，将保留当前节点之后<xref:System.Xml.Xsl.XslTransform.Transform%2A>调用方法。  
  
 因为<xref:System.Xml.XmlReader>提供了只读、 只输出`xsl:output`元素将被忽略。 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息。  
  
 此方法可以进行异步转换的源文档。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>使用指定的参数转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。 转换选择作为一个整体应用到文档。 换而言之，如果当前节点节点树，而不是文档根节点上设置的则这不会阻止转换过程访问已加载的文档中的所有节点。 执行转换后，<xref:System.Xml.XPath.XPathNavigator>保留为其原始状态。 这意味着，节点，即当前转换过程之前，将保留当前节点之后<xref:System.Xml.Xsl.XslTransform.Transform%2A>调用方法。  
  
 `xsl:output`到输出时，不支持元素<xref:System.Xml.XmlWriter>(`xsl:output`将被忽略)。 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息。  
  
> [!NOTE]
>  此方法现已过时。 设置<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>属性确定如何 XSLT`document()`函数得到解决。 建议的做法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法采用<xref:System.Xml.XmlResolver>对象作为其参数之一。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的流。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.Stream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建<xref:System.Xml.XmlDocument>包含只是在节点片断并将其传递<xref:System.Xml.XmlDocument>到<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 以下示例对一个节点片段执行转换。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 该示例使用`library.xml`和`print_root.xsl`文件作为输入并输出到控制台如下。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
   
  
## Examples  
 下面的示例执行 ASP.NET 页中的转换。  
  
 [!code-aspx-csharp[XslTransform.Transform5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform5/CS/transcs.aspx#1)]
 [!code-aspx-vb[XslTransform.Transform5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform5/VB/transvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。  
  
 上的编码属性`xsl:output`到输出时，不支持元素<xref:System.IO.TextWriter>。 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息在其上`xsl:output`支持属性。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建<xref:System.Xml.XmlDocument>包含只是在节点片断并将其传递<xref:System.Xml.XmlDocument>到<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 以下示例对一个节点片段执行转换。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 该示例使用`library.xml`和`print_root.xsl`文件作为输入并输出到控制台如下。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
   
  
## Examples  
 下面的示例转换的 XML 文件，并输出 HTML 字符串。 <xref:System.IO.StringReader>和<xref:System.IO.StringWriter>类用于读取和写入字符串。  
  
 [!code-csharp[XslTransform.Transform6#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform6/CS/transstring.cs#1)]
 [!code-vb[XslTransform.Transform6#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform6/VB/transstring.vb#1)]  
  
 示例使用 `books.xml` 文件作为输入。  
  
 [!code-xml[XslTransform.Transform6#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Transform6/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。 `xsl:output`到输出时，不支持元素<xref:System.Xml.XmlWriter>(`xsl:output`将被忽略)。 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建<xref:System.Xml.XmlDocument>包含只是在节点片断并将其传递<xref:System.Xml.XmlDocument>到<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 以下示例对一个节点片段执行转换。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 该示例使用`library.xml`和`print_root.xsl`文件作为输入并输出到控制台如下。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
   
  
## Examples  
 下面的示例将 XML 文档转换为 HTML 文档。 它显示在表中的 ISBN、 标题和每本书的价格。  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 示例使用下列两个输入文件。  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.Stream * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的流。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.Stream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。 转换选择作为一个整体应用到文档。 换而言之，如果当前节点节点树，而不是文档根节点上设置的则这不会阻止转换过程访问已加载的文档中的所有节点。 执行转换后，<xref:System.Xml.XPath.XPathNavigator>保留为其原始状态。 这意味着，节点，这是当前转换过程之前，将保留当前节点之后<xref:System.Xml.Xsl.XslTransform.Transform%2A>调用方法。  
  
 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息在其上`xsl:output`支持属性。  
  
   
  
## Examples  
 下面的示例加载到客户表<xref:System.Xml.XmlDataDocument>并执行 XSLT 转换来将客户数据提取到一个 HTML 表。 该示例使用 Microsoft SQL Server 2000 Northwind 数据库。  
  
 [!code-csharp[XmlDataDocument.CreateNavigator#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.CreateNavigator/CS/dataset_trans.cs#1)]
 [!code-vb[XmlDataDocument.CreateNavigator#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.CreateNavigator/VB/dataset_trans.vb#1)]  
  
 示例使用 `customers.xsl` 文件作为输入。  
  
 [!code-xml[XmlDataDocument.CreateNavigator#2](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.CreateNavigator/XML/customers.xsl#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。 转换选择作为一个整体应用到文档。 换而言之，如果当前节点节点树，而不是文档根节点上设置的则这不会阻止转换过程访问已加载的文档中的所有节点。 执行转换后，<xref:System.Xml.XPath.XPathNavigator>保留为其原始状态。 这意味着，节点，这是当前转换过程之前，将保留当前节点之后<xref:System.Xml.Xsl.XslTransform.Transform%2A>调用方法。  
  
 上的编码属性`xsl:output`到输出时，不支持元素<xref:System.IO.TextWriter>。 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息在其上`xsl:output`支持属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的参数转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包含命名空间声明`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`与匹配`xsl:param`样式表中定义的元素。 转换选择作为一个整体应用到文档。 换而言之，如果当前节点节点树，而不是文档根节点上设置的则这不会阻止转换过程访问已加载的文档中的所有节点。 执行转换后，<xref:System.Xml.XPath.XPathNavigator>保留为其原始状态。 这意味着，节点，即当前转换过程之前，将保留当前节点之后<xref:System.Xml.Xsl.XslTransform.Transform%2A>调用方法。  
  
 `xsl:output`到输出时，不支持元素<xref:System.Xml.XmlWriter>(`xsl:output`将被忽略)。 请参阅[XslTransform 的输出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)有关详细信息。  
  
   
  
## Examples  
 下面的示例加载并执行 XSLT 转换之前编辑 XML 文档。  
  
 [!code-cpp[XslTransform.Transform2#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform2/CPP/trans_snip.cpp#1)]
 [!code-csharp[XslTransform.Transform2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform2/CS/trans_snip.cs#1)]
 [!code-vb[XslTransform.Transform2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform2/VB/trans_snip.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>设置调用 <see cref="T:System.Xml.XmlResolver" /> 方法时用于解析外部资源的 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />。</summary>
        <value>要在转换期间使用的 <see cref="T:System.Xml.XmlResolver" />。 如果设置为<see langword="null" />，XSLT <c>document （)</c>函数未得到解决。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类是.NET Framework 2.0 版中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新 XSLT 处理器。 有关详细信息，请参阅[使用 XslCompiledTransform 类](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)并[从 XslTransform 类迁移](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 在.NET framework 版本 1.1 中，应用程序的信任级别确定的默认行为：  
  
 `Fully trusted code:` 默认值<xref:System.Xml.XmlUrlResolver>无用户凭据用于解析`document()`函数。 如果访问外部资源需要身份验证，使用此属性指定<xref:System.Xml.XmlResolver>与所需的凭据。  
  
 `Semi-trusted code:` 该属性设置为`null`，这意味着`document()`函数未得到解决。 因为完全信任才能指定<xref:System.Xml.XmlResolver>，也不能设置此属性。  
  
 使用此冲突解决程序时 XSLT`document()`调用函数。 它不用于解析`xsl:import`和`xsl:include`引用样式表中的元素。 若要指定<xref:System.Xml.XmlResolver>用来解析`xsl:import`并`xsl:include`引用样式表中的元素使用<xref:System.Xml.Xsl.XslTransform.Load%2A>重载，它将<xref:System.Xml.XmlResolver>作为其参数之一。  
  
> [!NOTE]
>  此属性是在.NET Framework 1.1 版中已过时。 指定<xref:System.Xml.XmlResolver>使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法是建议的做法。 在这种情况下，<xref:System.Xml.XmlResolver>后不缓存<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法完成。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
  </Members>
</Type>