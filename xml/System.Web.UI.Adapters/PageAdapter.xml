<Type Name="PageAdapter" FullName="System.Web.UI.Adapters.PageAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="77c252f39ba8b9b12439d1bf1e6920e8ac38c877" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51938051" /></Metadata><TypeSignature Language="C#" Value="public abstract class PageAdapter : System.Web.UI.Adapters.ControlAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PageAdapter extends System.Web.UI.Adapters.ControlAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Adapters.PageAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PageAdapter&#xA;Inherits ControlAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageAdapter abstract : System::Web::UI::Adapters::ControlAdapter" />
  <TypeSignature Language="F#" Value="type PageAdapter = class&#xA;    inherit ControlAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Adapters.ControlAdapter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>修改网页以适应特定的浏览器，并提供所有页面适配器可直接或间接继承的基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Adapters.PageAdapter>类是一个抽象类，可适应某一网页寻求在特定浏览器定义的浏览器使用的标记语言 （例如，HTML 或 XHTML） 的类。 呈现行为的适应性很多可以在派生的专用的文本编写器类中封装<xref:System.Web.UI.HtmlTextWriter>类，因此它不是始终需要提供页适配器。  
  
 从调用派生的页面适配器的大多数成员<xref:System.Web.UI.Page>类或从控件适配器。 首先，<xref:System.Web.UI.Page>类或控件适配器检测是否存在派生的页面适配器，然后调用的成员，或如果页适配器不存在提供的功能。  
  
 成员<xref:System.Web.UI.Adapters.PageAdapter>类提供了以下功能：  
  
-   <xref:System.Web.UI.Adapters.PageAdapter.CacheVaryByHeaders%2A>并<xref:System.Web.UI.Adapters.PageAdapter.CacheVaryByParams%2A>属性定义其他 HTTP 标头和 HTTP`GET`和`POST`可用于改变缓存的参数。 在从缓存初始化期间调用它们<xref:System.Web.UI.Page>类。  
  
-   <xref:System.Web.UI.Adapters.PageAdapter.GetStatePersister%2A>方法返回可用于保留的页的组合的视图和控件状态的对象。 从引用<xref:System.Web.UI.Page.PageStatePersister%2A>属性派生的页面适配器是否存在。  
  
-   <xref:System.Web.UI.Adapters.PageAdapter.GetPostBackFormReference%2A>方法提供了可用于引用在脚本中的窗体的 DHTML 代码片段。  
  
-   <xref:System.Web.UI.Adapters.PageAdapter.DeterminePostBackMode%2A>方法返回的回发变量的集合，如果页面在回发。 它由.NET Framework，而不是调用<xref:System.Web.UI.Page.DeterminePostBackMode%2A?displayProperty=nameWithType>方法派生的页面适配器是否存在。  
  
-   <xref:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink%2A>和<xref:System.Web.UI.Adapters.PageAdapter.RenderEndHyperlink%2A>方法使用控件适配器来呈现超链接，如果派生的页面适配器是否存在。  
  
-   <xref:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent%2A>方法将呈现一个超链接或可以提交窗体的回发的客户端标记。  
  
-   <xref:System.Web.UI.Adapters.PageAdapter.RegisterRadioButton%2A>并<xref:System.Web.UI.Adapters.PageAdapter.GetRadioButtonsByGroup%2A>方法由单选按钮控件适配器，来引用另<xref:System.Web.UI.WebControls.RadioButton>单选按钮组中的控件。  
  
-   <xref:System.Web.UI.Adapters.PageAdapter.ClientState%2A>属性提供访问权限的组合的控件和视图状态<xref:System.Web.UI.Page>通过内部对象`ClientState`属性的<xref:System.Web.UI.Page>类。  
  
-   <xref:System.Web.UI.Adapters.PageAdapter.TransformText%2A>控件适配器使用方法来执行特定于设备的文本转换。  
  
   
  
## Examples  
 下面的代码示例演示了如何派生一个名为类`CustomPageAdapter`从<xref:System.Web.UI.Adapters.PageAdapter>类并重写<xref:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink%2A>方法。 <xref:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink%2A>方法将添加一个名为属性`src`到超链接，其中包含对当前页的引用。 呈现到页中的所有超链接`CustomPageAdapter`附加将具有`src`属性。  
  
 [!code-csharp[System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink/CS/pageadapter.cs#1)]
 [!code-vb[System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink/VB/pageadapter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PageAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PageAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.Adapters.PageAdapter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 构造此适配器在内部创建相应时<xref:System.Web.UI.Page>类或派生的类。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Page" />
        <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
      </Docs>
    </Member>
    <Member MemberName="CacheVaryByHeaders">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Specialized.StringCollection CacheVaryByHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection CacheVaryByHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Adapters.PageAdapter.CacheVaryByHeaders" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CacheVaryByHeaders As StringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Specialized::StringCollection ^ CacheVaryByHeaders { System::Collections::Specialized::StringCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CacheVaryByHeaders : System.Collections.Specialized.StringCollection" Usage="System.Web.UI.Adapters.PageAdapter.CacheVaryByHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取其他 HTTP 标头的列表，对于已附加此派生的页面适配器的网页，缓存将随这些标头而改变。</summary>
        <value>包含 HTTP 标头列表的 <see cref="T:System.Collections.IList" />，否则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Web 上找到的实体的可缓存网页缓存多个版本中，根据 HTTP 标头和其他因素。 例如，版本生成网页的每种语言通常会被缓存，根据`Accept-Language`HTTP 标头。  
  
 对于特定浏览器，可能需要改变除了标头的 HTTP 标头的缓存控制独立于目标的缓存。 例如，可能需要缓存不同版本的不同屏幕大小的页。  
  
 返回的标头名称<xref:System.Web.UI.Adapters.PageAdapter.CacheVaryByHeaders%2A>属性添加到标头的列表上`Vary`HTTP 标头发送到客户端浏览器。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.UI.Adapters.PageAdapter" />类，可以重写<see cref="P:System.Web.UI.Adapters.PageAdapter.CacheVaryByHeaders" />属性以返回要控制特定于目标的缓存的其他标头的列表。 <see cref="P:System.Web.UI.Adapters.PageAdapter.CacheVaryByHeaders" />基属性返回<see langword="null" />。</para></block>
        <altmember cref="T:System.Web.HttpCacheVaryByHeaders" />
        <altmember cref="P:System.Web.HttpCachePolicy.VaryByHeaders" />
        <altmember cref="T:System.Web.UI.Page" />
        <related type="Article" href="https://msdn.microsoft.com/library/5032122d-221f-4fed-a5a7-90011f5f88fd">如何： 缓存的页上，根据 HTTP 标头版本</related>
      </Docs>
    </Member>
    <Member MemberName="CacheVaryByParams">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Specialized.StringCollection CacheVaryByParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection CacheVaryByParams" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Adapters.PageAdapter.CacheVaryByParams" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CacheVaryByParams As StringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Specialized::StringCollection ^ CacheVaryByParams { System::Collections::Specialized::StringCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CacheVaryByParams : System.Collections.Specialized.StringCollection" Usage="System.Web.UI.Adapters.PageAdapter.CacheVaryByParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>从 HTTP GET 和 POST 请求获得其他参数的列表，对于已附加此派生的页面适配器的网页，高速缓存将随这些参数而改变。</summary>
        <value>包含 GET 和 POST 参数列表的 <see cref="T:System.Collections.IList" />；否则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在缓存网页缓存多个版本 Web 上找到的实体基于，还有其他因素请求参数。 例如，版本可能会生成网页零售链中的每个存储位置，通常会缓存根据参数名称 (例如， `StoreID`)。  
  
 对于特定浏览器，它可能需要改变缓存的 GET 或 POST 参数以及参数控制独立于目标的缓存。 例如，可能需要不同的移动电话服务提供商缓存不同版本的页面。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.UI.Adapters.PageAdapter" />类，可以重写<see cref="P:System.Web.UI.Adapters.PageAdapter.CacheVaryByParams" />属性以返回一系列其他的 GET 或 POST 参数来控制特定于目标的缓存。 <see cref="P:System.Web.UI.Adapters.PageAdapter.CacheVaryByParams" />基方法返回<see langword="null" />。</para></block>
        <altmember cref="T:System.Web.UI.Page" />
        <altmember cref="T:System.Web.HttpCacheVaryByParams" />
        <altmember cref="P:System.Web.HttpCachePolicy.VaryByParams" />
        <related type="Article" href="https://msdn.microsoft.com/library/a504b287-c8d2-4838-9817-3ffee416fec4">如何： 缓存的页上，根据参数的版本</related>
      </Docs>
    </Member>
    <Member MemberName="ClientState">
      <MemberSignature Language="C#" Value="protected string ClientState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Adapters.PageAdapter.ClientState" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ClientState As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ ClientState { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientState : string" Usage="System.Web.UI.Adapters.PageAdapter.ClientState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个经过编码的字符串，其中包含已附加此派生的页面适配器的网页的视图和控件状态数据。</summary>
        <value>一个经过编码的 <see cref="T:System.String" />，其中包含位于相关联的 <see cref="T:System.Web.UI.Page" /> 页面上的控件的组合视图和控件状态。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Adapters.PageAdapter.ClientState%2A>属性提供对内部访问`ClientState`属性的<xref:System.Web.UI.Page>类。  
  
 视图状态数据存储<xref:System.Web.UI.PageStatePersister>对象在内部`ClientState`属性的<xref:System.Web.UI.Page>将始终保存在隐藏字段在网页上。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.UI.Adapters.PageAdapter" />类，不能重写<see cref="P:System.Web.UI.Adapters.PageAdapter.ClientState" />属性因为它不是<see langword="virtual" />。 若要修改的行为<see cref="P:System.Web.UI.Adapters.PageAdapter.ClientState" />派生类中实现的新<see cref="P:System.Web.UI.Adapters.PageAdapter.ClientState" />属性，引用<see cref="P:System.Web.UI.Adapters.PageAdapter.ClientState" />基类的属性。</para></block>
        <altmember cref="T:System.Web.UI.Page" />
        <altmember cref="M:System.Web.UI.Adapters.ControlAdapter.LoadAdapterControlState(System.Object)" />
        <altmember cref="M:System.Web.UI.Adapters.ControlAdapter.LoadAdapterViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.Adapters.ControlAdapter.SaveAdapterControlState" />
        <altmember cref="M:System.Web.UI.Adapters.ControlAdapter.SaveAdapterViewState" />
        <related type="Article" href="https://msdn.microsoft.com/library/082c763e-ffe8-4baf-b5e5-a26b2d383187">页适配器和视图状态</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)">ASP.NET 状态管理概述</related>
      </Docs>
    </Member>
    <Member MemberName="DeterminePostBackMode">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Specialized.NameValueCollection DeterminePostBackMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Specialized.NameValueCollection DeterminePostBackMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.DeterminePostBackMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeterminePostBackMode () As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Specialized::NameValueCollection ^ DeterminePostBackMode();" />
      <MemberSignature Language="F#" Value="abstract member DeterminePostBackMode : unit -&gt; System.Collections.Specialized.NameValueCollection&#xA;override this.DeterminePostBackMode : unit -&gt; System.Collections.Specialized.NameValueCollection" Usage="pageAdapter.DeterminePostBackMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定网页是否在回发模式下，并返回回发变量的名称/值集合。</summary>
        <returns>如果有回发变量，则为回发变量的 <see cref="T:System.Collections.Specialized.NameValueCollection" />，否则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Adapters.PageAdapter.DeterminePostBackMode%2A>方法将返回以下集合之一：  
  
-   如果 HTTP 数据传输方法的窗体变量是`POST`。  
  
-   如果 HTTP 方法位于查询字符串变量`GET`。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.UI.Adapters.PageAdapter" />类，可以重写<see cref="M:System.Web.UI.Adapters.PageAdapter.DeterminePostBackMode" />方法以提供特定于目标的处理的回发变量集合。</para></block>
        <altmember cref="T:System.Web.UI.Page" />
        <altmember cref="M:System.Web.UI.Page.DeterminePostBackMode" />
        <altmember cref="P:System.Web.HttpRequest.Form" />
        <altmember cref="P:System.Web.HttpRequest.QueryString" />
      </Docs>
    </Member>
    <Member MemberName="DeterminePostBackModeUnvalidated">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Specialized.NameValueCollection DeterminePostBackModeUnvalidated ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Specialized.NameValueCollection DeterminePostBackModeUnvalidated() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.DeterminePostBackModeUnvalidated" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeterminePostBackModeUnvalidated () As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Specialized::NameValueCollection ^ DeterminePostBackModeUnvalidated();" />
      <MemberSignature Language="F#" Value="abstract member DeterminePostBackModeUnvalidated : unit -&gt; System.Collections.Specialized.NameValueCollection&#xA;override this.DeterminePostBackModeUnvalidated : unit -&gt; System.Collections.Specialized.NameValueCollection" Usage="pageAdapter.DeterminePostBackModeUnvalidated " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回使用 POST 或 GET 命令发送到该页的名称/值数据集合，而不执行 ASP.NET 在该请求的请求验证。</summary>
        <returns>未经过验证的窗体数据。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关更多信息，请参见 <xref:System.Web.UnvalidatedRequestValues> 类。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackFormReference">
      <MemberSignature Language="C#" Value="protected internal virtual string GetPostBackFormReference (string formId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string GetPostBackFormReference(string formId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.GetPostBackFormReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetPostBackFormReference (formId As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ GetPostBackFormReference(System::String ^ formId);" />
      <MemberSignature Language="F#" Value="abstract member GetPostBackFormReference : string -&gt; string&#xA;override this.GetPostBackFormReference : string -&gt; string" Usage="pageAdapter.GetPostBackFormReference formId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="formId">包含所发送窗体的客户端 ID 的 <see cref="T:System.String" />。</param>
        <summary>返回 DHTML 代码片段，客户端浏览器可用此代码片段引用所发送网页上的窗体。</summary>
        <returns>带有对所发送网页上的窗体的引用的 <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Adapters.PageAdapter.GetPostBackFormReference%2A>方法提供对回发的窗体的 DHTML 引用。 代码片段的格式如下：  
  
 `document.forms['` `formID` `']`  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.UI.Adapters.PageAdapter" />类，可以重写<see cref="M:System.Web.UI.Adapters.PageAdapter.GetPostBackFormReference(System.String)" />方法如果适配器支持的浏览器的标记需要回发的窗体引用不同的格式。 例如，使用 PocketPC 浏览器的 HTML 3.2 标准要求以下格式： 
 <c>文档。</c><paramref name="formID" /></para></block>
        <altmember cref="T:System.Web.UI.Page" />
      </Docs>
    </Member>
    <Member MemberName="GetRadioButtonsByGroup">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection GetRadioButtonsByGroup (string groupName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ICollection GetRadioButtonsByGroup(string groupName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.GetRadioButtonsByGroup(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRadioButtonsByGroup (groupName As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::ICollection ^ GetRadioButtonsByGroup(System::String ^ groupName);" />
      <MemberSignature Language="F#" Value="abstract member GetRadioButtonsByGroup : string -&gt; System.Collections.ICollection&#xA;override this.GetRadioButtonsByGroup : string -&gt; System.Collections.ICollection" Usage="pageAdapter.GetRadioButtonsByGroup groupName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupName">表示要检索的 <see cref="T:System.String" /> 组的名称的 <see cref="T:System.Web.UI.WebControls.RadioButton" />。</param>
        <summary>检索由 <paramref name="groupName" /> 指定的一组单选按钮控件。</summary>
        <returns>组成 <paramref name="groupName" /> 的 <see cref="T:System.Collections.ICollection" /> 控件的 <see cref="T:System.Web.UI.WebControls.RadioButton" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 单选按钮控件适配器使用<xref:System.Web.UI.Adapters.PageAdapter.GetRadioButtonsByGroup%2A>并<xref:System.Web.UI.Adapters.PageAdapter.RegisterRadioButton%2A>方法来引用其他<xref:System.Web.UI.WebControls.RadioButton>组中的控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Adapters.PageAdapter.RegisterRadioButton(System.Web.UI.WebControls.RadioButton)" />
        <altmember cref="T:System.Web.UI.WebControls.RadioButton" />
      </Docs>
    </Member>
    <Member MemberName="GetStatePersister">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.PageStatePersister GetStatePersister ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.PageStatePersister GetStatePersister() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.GetStatePersister" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStatePersister () As PageStatePersister" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::PageStatePersister ^ GetStatePersister();" />
      <MemberSignature Language="F#" Value="abstract member GetStatePersister : unit -&gt; System.Web.UI.PageStatePersister&#xA;override this.GetStatePersister : unit -&gt; System.Web.UI.PageStatePersister" Usage="pageAdapter.GetStatePersister " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PageStatePersister</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个对象，网页使用此对象来维护控件和视图状态。</summary>
        <returns>一个从 <see cref="T:System.Web.UI.PageStatePersister" /> 派生的对象，该对象支持为 <see cref="T:System.Web.UI.Page" /> 创建和提取组合控件和视图状态。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.PageStatePersister%2A>属性使用<xref:System.Web.UI.Adapters.PageAdapter.GetStatePersister%2A>方法来返回的对象，派生自<xref:System.Web.UI.PageStatePersister>类，构造和提取组合的控件和视图页的状态。 如果没有附加到页上，派生的页面适配器<xref:System.Web.UI.HiddenFieldPageStatePersister>对象用于维护页的隐藏字段中的状态。  
  
|链接类型|生成链接|  
|---------------|--------------------|  
|代码实体引用 cer|<xref:System.Char.ToString%2A>|  
|代码实体引用限定 cerq|<xref:System.Char.ToString%2A?displayProperty=nameWithType>|  
|代码实体引用特定 cer|<xref:System.Char.ToString%28System.Char%29>|  
|代码实体引用限定特定 cerqs|<xref:System.Char.ToString%28System.Char%29?displayProperty=nameWithType>|  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>视图状态数据存储<see cref="T:System.Web.UI.PageStatePersister" />对象在内部<see langword="ClientState" />属性的<see cref="T:System.Web.UI.Page" />将始终保存在隐藏字段在网页上。</para></block>
        <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.UI.Adapters.PageAdapter" />类，可以重写<see cref="M:System.Web.UI.Adapters.PageAdapter.GetStatePersister" />方法以返回另一个派生页状态持续程序如果不可行 （例如，由于有限的资源） 维护的隐藏字段中组合的状态。  
  
<see cref="M:System.Web.UI.Adapters.PageAdapter.GetStatePersister" />基类返回<see cref="T:System.Web.UI.HiddenFieldPageStatePersister" />对象。 可以使用<see cref="T:System.Web.UI.SessionPageStatePersister" />类来维护会话状态中的页状态。</para></block>
        <altmember cref="T:System.Web.UI.Page" />
        <altmember cref="T:System.Web.UI.PageStatePersister" />
        <altmember cref="T:System.Web.UI.HiddenFieldPageStatePersister" />
        <altmember cref="T:System.Web.UI.SessionPageStatePersister" />
        <altmember cref="P:System.Web.UI.Page.PageStatePersister" />
      </Docs>
    </Member>
    <Member MemberName="RegisterRadioButton">
      <MemberSignature Language="C#" Value="public virtual void RegisterRadioButton (System.Web.UI.WebControls.RadioButton radioButton);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterRadioButton(class System.Web.UI.WebControls.RadioButton radioButton) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.RegisterRadioButton(System.Web.UI.WebControls.RadioButton)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterRadioButton(System::Web::UI::WebControls::RadioButton ^ radioButton);" />
      <MemberSignature Language="F#" Value="abstract member RegisterRadioButton : System.Web.UI.WebControls.RadioButton -&gt; unit&#xA;override this.RegisterRadioButton : System.Web.UI.WebControls.RadioButton -&gt; unit" Usage="pageAdapter.RegisterRadioButton radioButton" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radioButton" Type="System.Web.UI.WebControls.RadioButton" />
      </Parameters>
      <Docs>
        <param name="radioButton">要添加到集合中的 <see cref="T:System.Web.UI.WebControls.RadioButton" />。</param>
        <summary>向指定的单选按钮组的集合添加一个单选按钮控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Adapters.PageAdapter>类使用<xref:System.Collections.Specialized.ListDictionary>对象来维护单选按钮组的列表。 在每个元素<xref:System.Collections.Specialized.ListDictionary>是一系列<xref:System.Web.UI.WebControls.RadioButton>单选按钮组中的控件。 <xref:System.Web.UI.Adapters.PageAdapter.RegisterRadioButton%2A>方法将添加<xref:System.Web.UI.WebControls.RadioButton>到合适的集合，创建集合，如果已存在，以及创建控件<xref:System.Collections.Specialized.ListDictionary>如果那里没有以前已注册<xref:System.Web.UI.WebControls.RadioButton>控件。  
  
 单选按钮控件适配器使用<xref:System.Web.UI.Adapters.PageAdapter.RegisterRadioButton%2A>并<xref:System.Web.UI.Adapters.PageAdapter.GetRadioButtonsByGroup%2A>方法来引用其他<xref:System.Web.UI.WebControls.RadioButton>单选按钮组中的控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Adapters.PageAdapter.GetRadioButtonsByGroup(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.RadioButton" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RenderBeginHyperlink">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将一个超链接开始标记呈现到响应流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RenderBeginHyperlink">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginHyperlink (System.Web.UI.HtmlTextWriter writer, string targetUrl, bool encodeUrl, string softkeyLabel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginHyperlink(class System.Web.UI.HtmlTextWriter writer, string targetUrl, bool encodeUrl, string softkeyLabel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink(System.Web.UI.HtmlTextWriter,System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginHyperlink (writer As HtmlTextWriter, targetUrl As String, encodeUrl As Boolean, softkeyLabel As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginHyperlink(System::Web::UI::HtmlTextWriter ^ writer, System::String ^ targetUrl, bool encodeUrl, System::String ^ softkeyLabel);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginHyperlink : System.Web.UI.HtmlTextWriter * string * bool * string -&gt; unit&#xA;override this.RenderBeginHyperlink : System.Web.UI.HtmlTextWriter * string * bool * string -&gt; unit" Usage="pageAdapter.RenderBeginHyperlink (writer, targetUrl, encodeUrl, softkeyLabel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
        <Parameter Name="targetUrl" Type="System.String" />
        <Parameter Name="encodeUrl" Type="System.Boolean" />
        <Parameter Name="softkeyLabel" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">包含可呈现特定于目标的输出的方法的 <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <param name="targetUrl">包含链接的目标 URL 的 <see cref="T:System.String" /> 值。</param>
        <param name="encodeUrl">若使用 <see cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" /> 对流输出进行编码，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="softkeyLabel">要用作软键标签的 <see cref="T:System.String" /> 值。</param>
        <summary>将一个包含目标 URL 的超链接开始标记呈现到响应流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink%2A>方法写入一个打开超链接标记。 当`writer`是<xref:System.Web.UI.HtmlTextWriter>，此标记采用以下格式：  
  
 `<a href="` `targetUrl` `">`  
  
   
  
## Examples  
 下面的代码示例演示了如何派生一个名为类`CustomPageAdapter`从<xref:System.Web.UI.Adapters.PageAdapter>类并重写<xref:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink%2A>方法。 <xref:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink%2A>方法将添加一个名为属性`src`到超链接，其中包含对当前页的引用。 呈现到页中的所有超链接`CustomPageAdapter`附加将具有`src`属性。  
  
 [!code-csharp[System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink/CS/pageadapter.cs#1)]
 [!code-vb[System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink/VB/pageadapter.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.UI.Adapters.PageAdapter" />类，可以重写<see cref="M:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink(System.Web.UI.HtmlTextWriter,System.String,System.Boolean,System.String)" />方法写入不同的格式为一个超链接开始标记或要写入其他标记属性。 例如，<see cref="M:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink(System.Web.UI.HtmlTextWriter,System.String,System.Boolean,System.String)" />基方法不会写入的特性<paramref name="softkeyLabel" />。</para></block>
        <altmember cref="Overload:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink" />
        <altmember cref="M:System.Web.UI.Adapters.PageAdapter.RenderEndHyperlink(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginHyperlink">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginHyperlink (System.Web.UI.HtmlTextWriter writer, string targetUrl, bool encodeUrl, string softkeyLabel, string accessKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginHyperlink(class System.Web.UI.HtmlTextWriter writer, string targetUrl, bool encodeUrl, string softkeyLabel, string accessKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink(System.Web.UI.HtmlTextWriter,System.String,System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginHyperlink (writer As HtmlTextWriter, targetUrl As String, encodeUrl As Boolean, softkeyLabel As String, accessKey As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginHyperlink(System::Web::UI::HtmlTextWriter ^ writer, System::String ^ targetUrl, bool encodeUrl, System::String ^ softkeyLabel, System::String ^ accessKey);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginHyperlink : System.Web.UI.HtmlTextWriter * string * bool * string * string -&gt; unit&#xA;override this.RenderBeginHyperlink : System.Web.UI.HtmlTextWriter * string * bool * string * string -&gt; unit" Usage="pageAdapter.RenderBeginHyperlink (writer, targetUrl, encodeUrl, softkeyLabel, accessKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
        <Parameter Name="targetUrl" Type="System.String" />
        <Parameter Name="encodeUrl" Type="System.Boolean" />
        <Parameter Name="softkeyLabel" Type="System.String" />
        <Parameter Name="accessKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">包含可呈现特定于目标的输出的方法的 <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <param name="targetUrl">包含链接的目标 URL 的 <see cref="T:System.String" /> 值。</param>
        <param name="encodeUrl">若使用 <see cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" /> 对流输出进行编码，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="softkeyLabel">要用作软键标签的 <see cref="T:System.String" /> 值。</param>
        <param name="accessKey">将分配给待创建的链接的 <see langword="accessKey" /> 特性的 <see cref="T:System.String" /> 值。</param>
        <summary>将一个包含目标 URL 和一个访问键的超链接开始标记呈现到响应流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink%2A>方法写入一个打开超链接标记。 当`writer`是<xref:System.Web.UI.HtmlTextWriter>对象时，此标记具有以下格式：  
  
 `<a href="` `targetUrl` `" accessKey="` `accessKey` `">`  
  
   
  
## Examples  
 下面的代码示例演示了如何派生一个名为类`CustomPageAdapter`从<xref:System.Web.UI.Adapters.PageAdapter>类并重写<xref:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink%2A>方法。 <xref:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink%2A> 添加名为特性`src`到超链接，其中包含对当前页的引用。 呈现到页中的所有超链接`CustomPageAdapter`附加将具有`src`属性。  
  
 [!code-csharp[System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink/CS/pageadapter.cs#1)]
 [!code-vb[System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink/VB/pageadapter.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="accessKey" /> 的长度超过一个字符。</exception>
        <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.UI.Adapters.PageAdapter" />类，可以重写<see cref="M:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink(System.Web.UI.HtmlTextWriter,System.String,System.Boolean,System.String,System.String)" />方法写入不同的格式为一个超链接开始标记或要写入其他标记属性。 例如，<see cref="M:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink(System.Web.UI.HtmlTextWriter,System.String,System.Boolean,System.String,System.String)" />基方法不会写入的特性<paramref name="softkeyLabel" />。</para></block>
        <altmember cref="Overload:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink" />
        <altmember cref="M:System.Web.UI.Adapters.PageAdapter.RenderEndHyperlink(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndHyperlink">
      <MemberSignature Language="C#" Value="public virtual void RenderEndHyperlink (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndHyperlink(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.RenderEndHyperlink(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderEndHyperlink (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderEndHyperlink(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member RenderEndHyperlink : System.Web.UI.HtmlTextWriter -&gt; unit&#xA;override this.RenderEndHyperlink : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="pageAdapter.RenderEndHyperlink writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">包含可呈现特定于目标的输出的方法的 <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>将一个超链接结束标记呈现到响应流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Adapters.PageAdapter.RenderEndHyperlink%2A>方法写入结束超链接标记。 文本编写器时<xref:System.Web.UI.HtmlTextWriter>对象时，此标记具有以下格式：  
  
 `</a>`  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.UI.Adapters.PageAdapter" />类，可以重写<see cref="M:System.Web.UI.Adapters.PageAdapter.RenderEndHyperlink(System.Web.UI.HtmlTextWriter)" />和<see cref="Overload:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink" />必须呈现方法时不同格式的超链接。</para></block>
        <altmember cref="Overload:System.Web.UI.Adapters.PageAdapter.RenderBeginHyperlink" />
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RenderPostBackEvent">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将回发事件作为链接呈现到响应流，包括所有必需的参数。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RenderPostBackEvent">
      <MemberSignature Language="C#" Value="public virtual void RenderPostBackEvent (System.Web.UI.HtmlTextWriter writer, string target, string argument, string softkeyLabel, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderPostBackEvent(class System.Web.UI.HtmlTextWriter writer, string target, string argument, string softkeyLabel, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent(System.Web.UI.HtmlTextWriter,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderPostBackEvent (writer As HtmlTextWriter, target As String, argument As String, softkeyLabel As String, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderPostBackEvent(System::Web::UI::HtmlTextWriter ^ writer, System::String ^ target, System::String ^ argument, System::String ^ softkeyLabel, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member RenderPostBackEvent : System.Web.UI.HtmlTextWriter * string * string * string * string -&gt; unit&#xA;override this.RenderPostBackEvent : System.Web.UI.HtmlTextWriter * string * string * string * string -&gt; unit" Usage="pageAdapter.RenderPostBackEvent (writer, target, argument, softkeyLabel, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="softkeyLabel" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">包含可呈现特定于目标的输出的方法的 <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <param name="target">保存回发事件目标名称的 <see cref="T:System.String" /> 值。</param>
        <param name="argument">保存要传递给回发目标事件的参数的 <see cref="T:System.String" /> 值。</param>
        <param name="softkeyLabel">要用作软键标签的 <see cref="T:System.String" /> 值。</param>
        <param name="text">要显示为链接的文本的 <see cref="T:System.String" /> 值。</param>
        <summary>将回发事件作为超链接呈现到响应流，包括已编码并且可能已加密的视图状态、事件目标和参数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent%2A>方法写入作为无脚本的超链接的回发事件。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.UI.Adapters.PageAdapter" />类，可以重写<see cref="M:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent(System.Web.UI.HtmlTextWriter,System.String,System.String,System.String,System.String)" />方法如果不同的格式是所必需的回发事件超链接或浏览器具有其他唯一的要求。 例如，某些浏览器要求要为非空，如果链接为呈现的超链接文本。 此外可以重写<see cref="M:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent(System.Web.UI.HtmlTextWriter,System.String,System.String,System.String,System.String)" />如果资源限制而无法包括作为 URL 参数的视图状态。 <see cref="M:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent(System.Web.UI.HtmlTextWriter,System.String,System.String,System.String,System.String)" />基方法不会写入的特性<paramref name="softkeyLabel" />。</para></block>
        <altmember cref="T:System.Web.UI.Page" />
        <altmember cref="Overload:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent" />
      </Docs>
    </Member>
    <Member MemberName="RenderPostBackEvent">
      <MemberSignature Language="C#" Value="public virtual void RenderPostBackEvent (System.Web.UI.HtmlTextWriter writer, string target, string argument, string softkeyLabel, string text, string postUrl, string accessKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderPostBackEvent(class System.Web.UI.HtmlTextWriter writer, string target, string argument, string softkeyLabel, string text, string postUrl, string accessKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent(System.Web.UI.HtmlTextWriter,System.String,System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderPostBackEvent (writer As HtmlTextWriter, target As String, argument As String, softkeyLabel As String, text As String, postUrl As String, accessKey As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderPostBackEvent(System::Web::UI::HtmlTextWriter ^ writer, System::String ^ target, System::String ^ argument, System::String ^ softkeyLabel, System::String ^ text, System::String ^ postUrl, System::String ^ accessKey);" />
      <MemberSignature Language="F#" Value="abstract member RenderPostBackEvent : System.Web.UI.HtmlTextWriter * string * string * string * string * string * string -&gt; unit&#xA;override this.RenderPostBackEvent : System.Web.UI.HtmlTextWriter * string * string * string * string * string * string -&gt; unit" Usage="pageAdapter.RenderPostBackEvent (writer, target, argument, softkeyLabel, text, postUrl, accessKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="softkeyLabel" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="postUrl" Type="System.String" />
        <Parameter Name="accessKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">包含可呈现特定于目标的输出的方法的 <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <param name="target">保存回发事件目标名称的 <see cref="T:System.String" /> 值。</param>
        <param name="argument">保存要传递给回发目标事件的参数的 <see cref="T:System.String" /> 值。</param>
        <param name="softkeyLabel">要用作软键标签的 <see cref="T:System.String" /> 值。</param>
        <param name="text">要显示为链接的文本的 <see cref="T:System.String" /> 值。</param>
        <param name="postUrl">保存回发的 URL 目标页的 <see cref="T:System.String" /> 值。</param>
        <param name="accessKey">用于分配给所创建链接的 <see langword="accessKey" /> 特性的 <see cref="T:System.String" /> 值。</param>
        <summary>将回发事件作为超链接呈现到响应流，包括已编码并且可能已加密的视图状态、事件目标及参数、上一页参数和访问键。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent%2A>方法将回发事件作为无脚本超链接，包括可能分块<xref:System.Web.HttpUtility.UrlEncode%2A>视图状态， `__EVENTTARGET=target`， `__EVENTARGUMENT=argument`，`__PREVIOUSPAGE=currentFilePath`参数，和一个`accessKey="accessKey"`属性。  
  
 如果加密视图状态`enableViewStateMac`的属性[pages 元素 （ASP.NET 设置架构）](https://msdn.microsoft.com/library/4123bb66-3fe4-4d62-b70e-33758656b458)配置元素设置为`true`。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.UI.Adapters.PageAdapter" />类，可以重写<see cref="M:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent(System.Web.UI.HtmlTextWriter,System.String,System.String,System.String,System.String,System.String,System.String)" />方法如果不同的格式是所必需的回发事件超链接或浏览器具有其他唯一的要求。 例如，某些浏览器要求要为非空，如果链接为呈现的超链接文本。 此外可以重写<see cref="M:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent(System.Web.UI.HtmlTextWriter,System.String,System.String,System.String,System.String,System.String,System.String)" />如果资源限制而无法包括作为 URL 参数的视图状态。 <see cref="M:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent(System.Web.UI.HtmlTextWriter,System.String,System.String,System.String,System.String,System.String,System.String)" />基方法不会写入的特性<paramref name="softkeyLabel" />。</para></block>
        <altmember cref="T:System.Web.UI.Page" />
        <altmember cref="Overload:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent" />
      </Docs>
    </Member>
    <Member MemberName="RenderPostBackEvent">
      <MemberSignature Language="C#" Value="protected void RenderPostBackEvent (System.Web.UI.HtmlTextWriter writer, string target, string argument, string softkeyLabel, string text, string postUrl, string accessKey, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RenderPostBackEvent(class System.Web.UI.HtmlTextWriter writer, string target, string argument, string softkeyLabel, string text, string postUrl, string accessKey, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent(System.Web.UI.HtmlTextWriter,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RenderPostBackEvent (writer As HtmlTextWriter, target As String, argument As String, softkeyLabel As String, text As String, postUrl As String, accessKey As String, encode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RenderPostBackEvent(System::Web::UI::HtmlTextWriter ^ writer, System::String ^ target, System::String ^ argument, System::String ^ softkeyLabel, System::String ^ text, System::String ^ postUrl, System::String ^ accessKey, bool encode);" />
      <MemberSignature Language="F#" Value="member this.RenderPostBackEvent : System.Web.UI.HtmlTextWriter * string * string * string * string * string * string * bool -&gt; unit" Usage="pageAdapter.RenderPostBackEvent (writer, target, argument, softkeyLabel, text, postUrl, accessKey, encode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="softkeyLabel" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="postUrl" Type="System.String" />
        <Parameter Name="accessKey" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">包含可呈现特定于目标的输出的方法的 <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <param name="target">保存回发事件目标名称的 <see cref="T:System.String" /> 值。</param>
        <param name="argument">保存要传递给回发目标事件的参数的 <see cref="T:System.String" /> 值。</param>
        <param name="softkeyLabel">要用作软键标签的 <see cref="T:System.String" /> 值。</param>
        <param name="text">要显示为链接的文本的 <see cref="T:System.String" /> 值。</param>
        <param name="postUrl">保存回发的 URL 目标页的 <see cref="T:System.String" /> 值。</param>
        <param name="accessKey">用于分配给所创建链接的 <see langword="accessKey" /> 特性的 <see cref="T:System.String" /> 值。</param>
        <param name="encode">若为 <see langword="true" /> 则使用 <c>&amp;amp;</c> 作为 URL 参数分隔符；若为 <see langword="false" /> 则使用 <c>&amp;</c>。</param>
        <summary>将回发事件作为超链接呈现到响应流，包括已编码的视图状态、事件目标及参数、上一页参数和访问键。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent%2A>方法将回发事件作为无脚本超链接，包括可能分块<xref:System.Web.HttpUtility.UrlEncode%2A>视图状态， `__EVENTTARGET=target`， `__EVENTARGUMENT=argument`，`__PREVIOUSPAGE=currentFilePath`参数，和一个`accessKey="accessKey"`属性。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.UI.Adapters.PageAdapter" />类，可以重写<see cref="M:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent(System.Web.UI.HtmlTextWriter,System.String,System.String,System.String,System.String,System.String,System.String)" />方法如果不同的格式是所必需的回发事件超链接或浏览器具有其他唯一的要求。 例如，某些浏览器要求要为非空，如果链接为呈现的超链接文本。 此外可以重写<see cref="M:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent(System.Web.UI.HtmlTextWriter,System.String,System.String,System.String,System.String,System.String,System.String)" />如果资源限制而无法包含作为 URL 参数的视图状态。 <see cref="M:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent(System.Web.UI.HtmlTextWriter,System.String,System.String,System.String,System.String,System.String,System.String)" />基方法不会写入的特性<paramref name="softkeyLabel" />。</para></block>
        <altmember cref="T:System.Web.UI.Page" />
        <altmember cref="Overload:System.Web.UI.Adapters.PageAdapter.RenderPostBackEvent" />
      </Docs>
    </Member>
    <Member MemberName="TransformText">
      <MemberSignature Language="C#" Value="public virtual string TransformText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TransformText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Adapters.PageAdapter.TransformText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TransformText (text As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ TransformText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member TransformText : string -&gt; string&#xA;override this.TransformText : string -&gt; string" Usage="pageAdapter.TransformText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">一个 <see cref="T:System.String" />，表示要转换的文本。</param>
        <summary>为目标浏览器转换文本。</summary>
        <returns>一个 <see cref="T:System.String" />，包含已转换的文本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Adapters.PageAdapter.TransformText%2A>方法可用于，例如，转换的制表符字符数 (`\t`) 到换行 (`\n`)。  
  
 <xref:System.Web.UI.Adapters.PageAdapter.TransformText%2A>基方法返回`text`不变。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>继承自<see cref="T:System.Web.UI.Adapters.PageAdapter" />类，可以重写<see cref="M:System.Web.UI.Adapters.PageAdapter.TransformText(System.String)" />某个特定的标记是否与不同的标准 HTML 窗体的构造。 例如，如果浏览器要求比什么会在 HTML 中，使用标记的不同标识符<see cref="M:System.Web.UI.Adapters.PageAdapter.TransformText(System.String)" />可以重写方法，以查找该标记并将其更改。</para></block>
        <altmember cref="T:System.Web.UI.Page" />
      </Docs>
    </Member>
  </Members>
</Type>