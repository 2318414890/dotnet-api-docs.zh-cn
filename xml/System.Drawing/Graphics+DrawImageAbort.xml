<Type Name="Graphics+DrawImageAbort" FullName="System.Drawing.Graphics+DrawImageAbort">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4cbe3daf26e68941576423794da346715dd452b4" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39818693" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate bool Graphics.DrawImageAbort(IntPtr callbackdata);" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed Graphics/DrawImageAbort extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Graphics.DrawImageAbort" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Graphics.DrawImageAbort(callbackdata As IntPtr) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="public: delegate bool Graphics::DrawImageAbort(IntPtr callbackdata);" />
  <TypeSignature Language="F#" Value="type Graphics.DrawImageAbort = delegate of nativeint -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="callbackdata" Type="System.IntPtr" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="callbackdata">指定回调方法数据的内部指针。 该参数不是由所有的 <see cref="Overload:System.Drawing.Graphics.DrawImage" /> 重载传递的。 可以通过检查 <see cref="F:System.IntPtr.Zero" /> 值来测试它是否存在。</param>
    <summary>提供一个回调方法，用于决定 <see cref="Overload:System.Drawing.Graphics.DrawImage" /> 方法应何时过早地取消执行并停止绘制图像。</summary>
    <returns>如果此方法决定 <see cref="Overload:System.Drawing.Graphics.DrawImage" /> 方法应过早停止执行，则此方法返回 <see langword="true" />。 否则返回 <see langword="false" />，指示 <see cref="Overload:System.Drawing.Graphics.DrawImage" /> 方法应继续执行。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 结合使用此方法<xref:System.Drawing.Graphics.DrawImage%2A>方法的<xref:System.Drawing.Graphics>类。 特定重载<xref:System.Drawing.Graphics.DrawImage%2A>方法调用来查明重载应停止还是继续执行此类型的应用程序定义的回调方法。  
  
 在执行期间，相关<xref:System.Drawing.Graphics.DrawImage%2A>重载频繁地调用此回调方法，以找出应停止绘制指定的映像是否应继续绘制图像。 <xref:System.Drawing.Graphics.DrawImageAbort>回调方法可以确定是否要继续，或不基于所选算法包括在其中，由 callbackdata 参数 （可选） 使用的数据传递给它。 例如，一种算法可能会确定如果映像已滚动出屏幕并发出到取消信号<xref:System.Drawing.Graphics.DrawImage%2A>方法来停止绘图。  
  
 此事件处理方法的用户声明必须有相同的参数<xref:System.Drawing.Graphics.DrawImageAbort>委托声明。  
  
   
  
## Examples  
 此示例是一种简单的实现<xref:System.Drawing.Graphics.DrawImageAbort>委托。 它只是检查以查看是否<xref:System.Drawing.Graphics.DrawImage%2A>方法传递它使用 callbackdata 参数的数据。 (某些<xref:System.Drawing.Graphics.DrawImage%2A>重载仅具有`DrawImageAbort`参数并不传递任何数据; 同时具有某些重载`DrawImageAbort`和`callbackdata`参数并可以将数据传递。)如果传递了任何数据，它将返回`true`将信号发送到调用<xref:System.Drawing.Graphics.DrawImage%2A>它应取消绘图的方法。 如果传递了数据，它将返回`false`以指示应继续绘图。  
  
 此回调的实际实现将涉及的一些条件取消或继续执行实际的审查。  
  
```vb  
Private Function DrawImageCallback(callBackData As IntPtr) As Boolean  
     ' Test for call that passes callBackData parameter.  
     If callBackData.Equals(IntPtr.Zero) Then  
         ' If no callBackData passed, abort DrawImage method.  
         Return True  
     Else  
         ' If callBackData passed, continue DrawImage method.  
         Return False  
     End If  
 End Function 'DrawImageCallback  
```  
  
```csharp  
// Define DrawImageAbort callback method.  
 private bool DrawImageCallback(IntPtr callbackdata)  
 {  
    // Test for call that passes callBackData parameter.  
    if(callbackdata==IntPtr.Zero)  
    {  
       // If no callbackdata passed, cancel DrawImage method.  
       return true;  
    }  
    else  
    {  
       // If callbackdata passed, continue DrawImage method.  
       return false;  
    }  
 }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>