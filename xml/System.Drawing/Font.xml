<Type Name="Font" FullName="System.Drawing.Font">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e133e23bb54195e4cb1429b05d0495bd77d50806" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36490653" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Font : MarshalByRefObject, ICloneable, IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit Font extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Font" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Font&#xA;Inherits MarshalByRefObject&#xA;Implements ICloneable, IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Font sealed : MarshalByRefObject, ICloneable, IDisposable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Font = class&#xA;    inherit MarshalByRefObject&#xA;    interface ICloneable&#xA;    interface ISerializable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.FontEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines a particular format for text, including font face, size, and style attributes. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何构造字体的详细信息，请参阅[如何： 构造字体系列和字体](~/docs/framework/winforms/advanced/how-to-construct-font-families-and-fonts.md)。 Windows 窗体应用程序支持 TrueType 字体，并且具有受限制的 OpenType 字体支持。 如果你尝试使用不支持的字体或运行应用程序的计算机上没有安装的字体，则将替换 Microsoft Sans Serif 字体。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Drawing.Font.%23ctor%2A>构造函数和<xref:System.Drawing.Font.Size%2A>， <xref:System.Drawing.Font.SizeInPoints%2A>，和<xref:System.Drawing.Font.Unit%2A>属性。 此示例设计用于包含一个 Windows 窗体<xref:System.Windows.Forms.ComboBox>名为`ComboBox1`"大于"和"较小"并且填充了字符串和<xref:System.Windows.Forms.Label>名为`Label1`。 将以下代码粘贴到窗体并将关联`ComboBox1_SelectedIndexChanged`方法替换<xref:System.Windows.Forms.ComboBox.SelectedIndexChanged>事件<xref:System.Windows.Forms.ComboBox>控件。  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> that uses the specified existing <see cref="T:System.Drawing.Font" /> and <see cref="T:System.Drawing.FontStyle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.Font prototype, System.Drawing.FontStyle newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Font prototype, valuetype System.Drawing.FontStyle newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.Font,System.Drawing.FontStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (prototype As Font, newStyle As FontStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::Font ^ prototype, System::Drawing::FontStyle newStyle);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.Font * System.Drawing.FontStyle -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (prototype, newStyle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="prototype" Type="System.Drawing.Font" />
        <Parameter Name="newStyle" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="prototype">The existing <see cref="T:System.Drawing.Font" /> from which to create the new <see cref="T:System.Drawing.Font" />.</param>
        <param name="newStyle">The <see cref="T:System.Drawing.FontStyle" /> to apply to the new <see cref="T:System.Drawing.Font" />. Multiple values of the <see cref="T:System.Drawing.FontStyle" /> enumeration can be combined with the <see langword="OR" /> operator.</param>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> that uses the specified existing <see cref="T:System.Drawing.Font" /> and <see cref="T:System.Drawing.FontStyle" /> enumeration.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本地化应用程序基于[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]和早期版本中，指定的字体`prototype`时该字体尚未安装用于生成应用程序的计算机上将导致要使用 Microsoft Sans Serif 字体相反。 如果你的应用程序依赖于此行为，并且您必须重新编译你的应用程序的.NET Framework 3.0，你应指定的 Microsoft Sans Serif 字体`prototype`。  
  
   
  
## Examples  
 下面的代码示例演示<xref:System.Drawing.Color.op_Inequality%2A>运算符，<xref:System.Drawing.Font.%23ctor%2A>构造函数，与<xref:System.Drawing.Font.Bold%2A>属性。 此示例设计用于包含名为的按钮的 Windows 窗体`Button2`。 将以下代码粘贴到你的窗体并将关联`Button2_Click`方法与该按钮<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.CharacterRangeExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.FontFamily * single -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (family, emSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="family">The <see cref="T:System.Drawing.FontFamily" /> of the new <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">The em-size, in points, of the new font.</param>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> using a specified size.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 生成字体都有其<xref:System.Drawing.Font.Style%2A>属性设置为<xref:System.Drawing.FontStyle.Regular>及其<xref:System.Drawing.Font.Unit%2A>属性设置为<xref:System.Drawing.GraphicsUnit.Point>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> is less than or equal to 0, evaluates to infinity, or is not a valid number.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : string * single -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (familyName, emSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="familyName">A string representation of the <see cref="T:System.Drawing.FontFamily" /> for the new <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">The em-size, in points, of the new font.</param>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> using a specified size.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 生成字体都有其<xref:System.Drawing.Font.Style%2A>属性设置为<xref:System.Drawing.FontStyle.Regular?displayProperty=nameWithType>及其<xref:System.Drawing.Font.Unit%2A>属性设置为<xref:System.Drawing.GraphicsUnit.Point?displayProperty=nameWithType>。 Windows 窗体应用程序支持 TrueType 字体，并且具有受限制的 OpenType 字体支持。 如果`familyName`参数指定的字体运行应用程序的计算机上未安装或不受支持，宋体将被替换。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Drawing.Font.%23ctor%2A>构造函数。 本示例旨在与 Windows 窗体一起使用，并需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件。  
  
 [!code-csharp[System.Drawing.Misc3#ConstructFontWithString](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#constructfontwithstring)]
 [!code-vb[System.Drawing.Misc3#ConstructFontWithString](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#constructfontwithstring)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> is less than or equal to 0, evaluates to infinity or is not a valid number.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.FontFamily * single * System.Drawing.FontStyle -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (family, emSize, style)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="family">The <see cref="T:System.Drawing.FontFamily" /> of the new <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">The em-size, in points, of the new font.</param>
        <param name="style">The <see cref="T:System.Drawing.FontStyle" /> of the new font.</param>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> using a specified size and style.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 生成字体都有其<xref:System.Drawing.Font.Unit%2A>属性设置为<xref:System.Drawing.GraphicsUnit.Point>。  
  
   
  
## Examples  
 下面的代码示例演示如何设置<xref:System.Drawing.Font>属性为新的显示为粗体的样式的按钮<xref:System.Drawing.Font>。 此示例设计用于包含名为的按钮的 Windows 窗体`Button1`。 将以下代码粘贴到你的窗体并将关联`Button1_Click`方法与该按钮<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.MiscExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.MiscExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.MiscExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> is less than or equal to 0, evaluates to infinity, or is not a valid number.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.FontFamily * single * System.Drawing.GraphicsUnit -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (family, emSize, unit)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="family">The <see cref="T:System.Drawing.FontFamily" /> of the new <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">The em-size of the new font in the units specified by the <c>unit</c> parameter.</param>
        <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" /> of the new font.</param>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> using a specified size and unit. Sets the style to <see cref="F:System.Drawing.FontStyle.Regular" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 生成字体都有其<xref:System.Drawing.Font.Style%2A>属性设置为<xref:System.Drawing.FontStyle.Regular?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> is less than or equal to 0, evaluates to infinity, or is not a valid number.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : string * single * System.Drawing.FontStyle -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (familyName, emSize, style)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="familyName">A string representation of the <see cref="T:System.Drawing.FontFamily" /> for the new <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">The em-size, in points, of the new font.</param>
        <param name="style">The <see cref="T:System.Drawing.FontStyle" /> of the new font.</param>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> using a specified size and style.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 生成字体都有其<xref:System.Drawing.Font.Unit%2A>属性设置为<xref:System.Drawing.GraphicsUnit.Point>。 Windows 窗体应用程序支持 TrueType 字体，并且具有受限制的 OpenType 字体支持。 如果`familyName`参数指定的字体运行应用程序的计算机上未安装或不受支持，宋体将被替换。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> is less than or equal to 0, evaluates to infinity, or is not a valid number.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : string * single * System.Drawing.GraphicsUnit -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (familyName, emSize, unit)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="familyName">A string representation of the <see cref="T:System.Drawing.FontFamily" /> for the new <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">The em-size of the new font in the units specified by the <c>unit</c> parameter.</param>
        <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" /> of the new font.</param>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> using a specified size and unit. The style is set to <see cref="F:System.Drawing.FontStyle.Regular" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 生成字体都有其<xref:System.Drawing.Font.Style%2A>属性设置为<xref:System.Drawing.FontStyle.Regular?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> is less than or equal to 0, evaluates to infinity, or is not a valid number.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.FontFamily * single * System.Drawing.FontStyle * System.Drawing.GraphicsUnit -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (family, emSize, style, unit)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="family">The <see cref="T:System.Drawing.FontFamily" /> of the new <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">The em-size of the new font in the units specified by the <c>unit</c> parameter.</param>
        <param name="style">The <see cref="T:System.Drawing.FontStyle" /> of the new font.</param>
        <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" /> of the new font.</param>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> using a specified size, style, and unit.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> is less than or equal to 0, evaluates to infinity, or is not a valid number.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : string * single * System.Drawing.FontStyle * System.Drawing.GraphicsUnit -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (familyName, emSize, style, unit)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="familyName">A string representation of the <see cref="T:System.Drawing.FontFamily" /> for the new <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">The em-size of the new font in the units specified by the <c>unit</c> parameter.</param>
        <param name="style">The <see cref="T:System.Drawing.FontStyle" /> of the new font.</param>
        <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" /> of the new font.</param>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> using a specified size, style, and unit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 窗体应用程序支持 TrueType 字体，并且具有受限制的 OpenType 字体支持。 如果`familyName`参数指定的字体运行应用程序的计算机上未安装或不受支持，宋体将被替换。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Drawing.Font.%23ctor%2A>构造函数。 本示例旨在与 Windows 窗体一起使用。 若要运行此示例，请将此代码粘贴到包含名为的按钮的窗体`Button2`，并将关联`Button2_Click`方法替换<xref:System.Windows.Forms.Control.Click>该按钮的事件。  
  
 [!code-cpp[System.Drawing.FontsExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#3)]
 [!code-csharp[System.Drawing.FontsExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.FontsExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> is less than or equal to 0, evaluates to infinity or is not a valid number.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.FontFamily * single * System.Drawing.FontStyle * System.Drawing.GraphicsUnit * byte -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (family, emSize, style, unit, gdiCharSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="family">The <see cref="T:System.Drawing.FontFamily" /> of the new <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">The em-size of the new font in the units specified by the <c>unit</c> parameter.</param>
        <param name="style">The <see cref="T:System.Drawing.FontStyle" /> of the new font.</param>
        <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" /> of the new font.</param>
        <param name="gdiCharSet">A <see cref="T:System.Byte" /> that specifies a  [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] character set to use for the new font.</param>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> using a specified size, style, unit, and character set.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet`参数采用 Windows SDK 头文件 WinGDI.h 中定义列表中的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> is less than or equal to 0, evaluates to infinity, or is not a valid number.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : string * single * System.Drawing.FontStyle * System.Drawing.GraphicsUnit * byte -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (familyName, emSize, style, unit, gdiCharSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="familyName">A string representation of the <see cref="T:System.Drawing.FontFamily" /> for the new <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">The em-size of the new font in the units specified by the <c>unit</c> parameter.</param>
        <param name="style">The <see cref="T:System.Drawing.FontStyle" /> of the new font.</param>
        <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" /> of the new font.</param>
        <param name="gdiCharSet">A <see cref="T:System.Byte" /> that specifies a [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] character set to use for this font.</param>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> using a specified size, style, unit, and character set.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet`参数采用 Windows SDK 头文件 WinGDI.h 中定义列表中的值。 Windows 窗体应用程序支持 TrueType 字体，并且具有受限制的 OpenType 字体支持。 如果`familyName`参数指定的字体运行应用程序的计算机上未安装或不受支持，宋体将被替换。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> is less than or equal to 0, evaluates to infinity, or is not a valid number.</exception>
        <altmember cref="P:System.Drawing.Font.GdiCharSet" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet, bool gdiVerticalFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte, gdiVerticalFont As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : System.Drawing.FontFamily * single * System.Drawing.FontStyle * System.Drawing.GraphicsUnit * byte * bool -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (family, emSize, style, unit, gdiCharSet, gdiVerticalFont)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
        <Parameter Name="gdiVerticalFont" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="family">The <see cref="T:System.Drawing.FontFamily" /> of the new <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">The em-size of the new font in the units specified by the <c>unit</c> parameter.</param>
        <param name="style">The <see cref="T:System.Drawing.FontStyle" /> of the new font.</param>
        <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" /> of the new font.</param>
        <param name="gdiCharSet">A <see cref="T:System.Byte" /> that specifies a  [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] character set to use for this font.</param>
        <param name="gdiVerticalFont">A Boolean value indicating whether the new font is derived from a [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] vertical font.</param>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> using a specified size, style, unit, and character set.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet`参数采用 Windows SDK 头文件 WinGDI.h 中定义列表中的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> is less than or equal to 0, evaluates to infinity, or is not a valid number.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> is <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet, bool gdiVerticalFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte, gdiVerticalFont As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Font : string * single * System.Drawing.FontStyle * System.Drawing.GraphicsUnit * byte * bool -&gt; System.Drawing.Font" Usage="new System.Drawing.Font (familyName, emSize, style, unit, gdiCharSet, gdiVerticalFont)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
        <Parameter Name="gdiVerticalFont" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="familyName">A string representation of the <see cref="T:System.Drawing.FontFamily" /> for the new <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">The em-size of the new font in the units specified by the <c>unit</c> parameter.</param>
        <param name="style">The <see cref="T:System.Drawing.FontStyle" /> of the new font.</param>
        <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" /> of the new font.</param>
        <param name="gdiCharSet">A <see cref="T:System.Byte" /> that specifies a [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] character set to use for this font.</param>
        <param name="gdiVerticalFont">A Boolean value indicating whether the new <see cref="T:System.Drawing.Font" /> is derived from a [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] vertical font.</param>
        <summary>Initializes a new <see cref="T:System.Drawing.Font" /> using the specified size, style, unit, and character set.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet`参数采用 Windows SDK 头文件 WinGDI.h 中定义列表中的值。 如果`familyName`参数指定的字体运行应用程序的计算机上未安装或不受支持，宋体将被替换。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> is less than or equal to 0, evaluates to infinity, or is not a valid number.</exception>
        <altmember cref="P:System.Drawing.Font.GdiCharSet" />
      </Docs>
    </Member>
    <Member MemberName="Bold">
      <MemberSignature Language="C#" Value="public bool Bold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Bold" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Bold" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bold As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Bold { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Bold : bool" Usage="System.Drawing.Font.Bold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this <see cref="T:System.Drawing.Font" /> is bold.</summary>
        <value>如果此 <see cref="T:System.Drawing.Font" /> 为粗体，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:System.Drawing.Color.op_Inequality%2A>运算符，<xref:System.Drawing.Font.%23ctor%2A>构造函数，与<xref:System.Drawing.Font.Bold%2A>属性。 此示例设计用于包含名为的按钮的 Windows 窗体`Button2`。 将以下代码粘贴到你的窗体并将关联`Button2_Click`方法与该按钮<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.CharacterRangeExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="font.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an exact copy of this <see cref="T:System.Drawing.Font" />.</summary>
        <returns>The <see cref="T:System.Drawing.Font" /> this method creates, cast as an <see cref="T:System.Object" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 代码克隆<xref:System.Drawing.Font>并绘制文本以该字体。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicFontsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="font.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all resources used by this <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Drawing.Font.Dispose%2A>允许使用的资源<xref:System.Drawing.Font>可以重新分配用于其他目的。  
  
 在完成使用 <xref:System.Drawing.Font.Dispose%2A> 后，应调用 <xref:System.Drawing.Font>。 <xref:System.Drawing.Font.Dispose%2A> 方法使 <xref:System.Drawing.Font> 处于不可用状态。 在调用<xref:System.Drawing.Font.Dispose%2A>，必须释放对所有引用<xref:System.Drawing.Font>以便垃圾回收器才能回收的内存，<xref:System.Drawing.Font>占用。 有关详细信息，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  每次释放对 <xref:System.Drawing.Font.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Drawing.Font>。 否则，在垃圾回收器调用 <xref:System.Drawing.Font> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="font.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to test.</param>
        <summary>Indicates whether the specified object is a <see cref="T:System.Drawing.Font" /> and has the same <see cref="P:System.Drawing.Font.FontFamily" />, <see cref="P:System.Drawing.Font.GdiVerticalFont" />, <see cref="P:System.Drawing.Font.GdiCharSet" />, <see cref="P:System.Drawing.Font.Style" />, <see cref="P:System.Drawing.Font.Size" />, and <see cref="P:System.Drawing.Font.Unit" /> property values as this <see cref="T:System.Drawing.Font" />.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.Drawing.Font" /> and has the same <see cref="P:System.Drawing.Font.FontFamily" />, <see cref="P:System.Drawing.Font.GdiVerticalFont" />, <see cref="P:System.Drawing.Font.GdiCharSet" />, <see cref="P:System.Drawing.Font.Style" />, <see cref="P:System.Drawing.Font.Size" />, and <see cref="P:System.Drawing.Font.Unit" /> property values as this <see cref="T:System.Drawing.Font" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码创建两个<xref:System.Drawing.Font>对象，然后测试它们是否等效。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicFontsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Font ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Font ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="font.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FontFamily">
      <MemberSignature Language="C#" Value="public System.Drawing.FontFamily FontFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.FontFamily FontFamily" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.FontFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FontFamily As FontFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::FontFamily ^ FontFamily { System::Drawing::FontFamily ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FontFamily : System.Drawing.FontFamily" Usage="System.Drawing.Font.FontFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.FontFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Drawing.FontFamily" /> associated with this <see cref="T:System.Drawing.Font" />.</summary>
        <value>与此 <see cref="T:System.Drawing.FontFamily" /> 关联的 <see cref="T:System.Drawing.Font" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Drawing.FontFamily>表示一组类似的字体，但可能有不同的大小和样式 （例如，Arial，Times New Roman，和 Verdana） 的字体。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint -&gt; System.Drawing.Font" Usage="System.Drawing.Font.FromHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">A handle to a device context.</param>
        <summary>Creates a <see cref="T:System.Drawing.Font" /> from the specified Windows handle to a device context.</summary>
        <returns>The <see cref="T:System.Drawing.Font" /> this method creates.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要此方法`hdc`参数必须包含在其中选择字体的设备上下文的句柄。 此方法不会使用`hdc`从获取句柄[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]<xref:System.Drawing.Graphics>对象，因为`hdc`句柄没有选择的字体。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The font for the specified device context is not a TrueType font.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于访问非托管代码。 相关的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FromHfont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromHfont (IntPtr hfont);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromHfont(native int hfont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromHfont(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHfont (hfont As IntPtr) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromHfont(IntPtr hfont);" />
      <MemberSignature Language="F#" Value="static member FromHfont : nativeint -&gt; System.Drawing.Font" Usage="System.Drawing.Font.FromHfont hfont" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hfont" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hfont">A Windows handle to a [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] font.</param>
        <summary>Creates a <see cref="T:System.Drawing.Font" /> from the specified Windows handle.</summary>
        <returns>The <see cref="T:System.Drawing.Font" /> this method creates.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
-   获取的句柄[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]字体。  
  
-   创建<xref:System.Drawing.Font>从该句柄。  
  
-   将文本绘制到屏幕中，使用新<xref:System.Drawing.Font>。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicFontsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="hfont" /> points to an object that is not a TrueType font.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于访问非托管代码。 相关的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromLogFont">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Creates a <see cref="T:System.Drawing.Font" /> from the specified GDI logical font (<c>LOGFONT</c>) structure.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromLogFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromLogFont (object lf);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromLogFont(object lf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromLogFont(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromLogFont (lf As Object) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromLogFont(System::Object ^ lf);" />
      <MemberSignature Language="F#" Value="static member FromLogFont : obj -&gt; System.Drawing.Font" Usage="System.Drawing.Font.FromLogFont lf" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lf" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="lf">An <see cref="T:System.Object" /> that represents the [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <see langword="LOGFONT" /> structure from which to create the <see cref="T:System.Drawing.Font" />.</param>
        <summary>Creates a <see cref="T:System.Drawing.Font" /> from the specified GDI logical font (<c>LOGFONT</c>) structure.</summary>
        <returns>The <see cref="T:System.Drawing.Font" /> that this method creates.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `LOGFONT`，或逻辑字体是包含 14 描述特定字体的属性的结构。 详细信息，请参阅"的逻辑字体"在 Windows 开发文档中[ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library)。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于访问非托管代码。 相关的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FromLogFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromLogFont (object lf, IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromLogFont(object lf, native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromLogFont(System.Object,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromLogFont (lf As Object, hdc As IntPtr) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromLogFont(System::Object ^ lf, IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromLogFont : obj * nativeint -&gt; System.Drawing.Font" Usage="System.Drawing.Font.FromLogFont (lf, hdc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lf" Type="System.Object" />
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="lf">An <see cref="T:System.Object" /> that represents the [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <see langword="LOGFONT" /> structure from which to create the <see cref="T:System.Drawing.Font" />.</param>
        <param name="hdc">A handle to a device context that contains additional information about the <c>lf</c> structure.</param>
        <summary>Creates a <see cref="T:System.Drawing.Font" /> from the specified GDI logical font (<c>LOGFONT</c>) structure.</summary>
        <returns>The <see cref="T:System.Drawing.Font" /> that this method creates.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `LOGFONT`，或逻辑字体是包含 14 描述特定字体的属性的结构。 详细信息，请参阅"的逻辑字体"在 Windows 开发文档中[ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The font is not a TrueType font.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于访问非托管代码。 相关的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GdiCharSet">
      <MemberSignature Language="C#" Value="public byte GdiCharSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 GdiCharSet" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.GdiCharSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GdiCharSet As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Byte GdiCharSet { System::Byte get(); };" />
      <MemberSignature Language="F#" Value="member this.GdiCharSet : byte" Usage="System.Drawing.Font.GdiCharSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a byte value that specifies the GDI character set that this <see cref="T:System.Drawing.Font" /> uses.</summary>
        <value>一个字节值，指定 [！INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 字符集<see cref="T:System.Drawing.Font" />使用。 默认值为 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性将返回 1，除非中指定不同的字符集<xref:System.Drawing.Font.%23ctor%28System.String%2CSystem.Single%2CSystem.Drawing.FontStyle%2CSystem.Drawing.GraphicsUnit%2CSystem.Byte%29>构造函数。 此属性采用 Windows SDK 头文件 WinGDI.h 中定义列表中的值。 下表中列出的字符集和字节值。  
  
|字符集|“值”|  
|-------------------|-----------|  
|ANSI|0|  
|DEFAULT|1|  
|符号|2|  
|SHIFTJIS 适用|128|  
|HANGEUL 适用|129|  
|朝鲜语|129|  
|GB2312|134|  
|CHINESEBIG5 适用|136|  
|OEM|255|  
|韩文|130|  
|希伯来语|177|  
|阿拉伯语|178|  
|希腊语|161|  
|土耳其语|162|  
|越南语|163|  
|泰语|222|  
|EASTEUROPE|238|  
|俄语|204|  
|MAC|77|  
|波罗|186|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GdiVerticalFont">
      <MemberSignature Language="C#" Value="public bool GdiVerticalFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GdiVerticalFont" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.GdiVerticalFont" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GdiVerticalFont As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GdiVerticalFont { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.GdiVerticalFont : bool" Usage="System.Drawing.Font.GdiVerticalFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that indicates whether this <see cref="T:System.Drawing.Font" /> is derived from a GDI vertical font.</summary>
        <value>
          <see langword="true" /> 如果此<see cref="T:System.Drawing.Font" />派生自 [！INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 垂直字体;否则为<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性用于确定一种字体是否与非 Unicode 平台上的本机 Win32 控件兼容。  
  
 <xref:System.Drawing.Font.GdiVerticalFont%2A> 仅返回`true`如果此字体从经典 GDI 创建  
  
 字体定义，如 LOGFONT 或 HFONT。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="font.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the hash code for this <see cref="T:System.Drawing.Font" />.</summary>
        <returns>The hash code for this <see cref="T:System.Drawing.Font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
-   创建一个 <xref:System.Drawing.Font>。  
  
-   获取该字体的哈希代码。  
  
-   显示一个具有值的哈希代码的消息框。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicFontsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHeight">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns the line spacing of this font.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHeight () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetHeight();" />
      <MemberSignature Language="F#" Value="member this.GetHeight : unit -&gt; single" Usage="font.GetHeight " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the line spacing, in pixels, of this font.</summary>
        <returns>The line spacing, in pixels, of this font.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行距<xref:System.Drawing.Font>是两个连续文本行的基线之间的垂直距离。 因此，行距包括以及本身的字符的高度的线之间的空白区域。  
  
 如果<xref:System.Drawing.Font.Unit%2A>的字体的属性设置为除<xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>，使用屏幕显示的垂直分辨率计算的高度 （以像素为单位）。 例如，假设字体单位为英寸和字体大小为 0.3。 此外假定对于相应的字体系列，全身高度为 2048年，行距为 2355年。 为屏幕显示具有每英寸 96 点的垂直分辨率，则可以计算高度，如下所示：  
  
 2355*(0.3/2048)\*96 = 33.11719  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight (System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight(class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight(System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetHeight(System::Drawing::Graphics ^ graphics);" />
      <MemberSignature Language="F#" Value="member this.GetHeight : System.Drawing.Graphics -&gt; single" Usage="font.GetHeight graphics" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="graphics">A <see cref="T:System.Drawing.Graphics" /> that holds the vertical resolution, in dots per inch, of the display device as well as settings for page unit and page scale.</param>
        <summary>Returns the line spacing, in the current unit of a specified <see cref="T:System.Drawing.Graphics" />, of this font.</summary>
        <returns>The line spacing, in pixels, of this font.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行距<xref:System.Drawing.Font>是两个连续文本行的基线之间的垂直距离。 因此，行距包括以及本身的字符的高度的线之间的空白区域。  
  
 如果<xref:System.Drawing.Font.Unit%2A>的字体的属性设置为除<xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>，使用指定的垂直分辨率计算的高度，以像素为单位，<xref:System.Drawing.Graphics>对象。 例如，假设字体单位为英寸和字体大小为 0.3。 此外假定对于相应的字体系列，全身高度为 2048年，行距为 2355年。 如果<xref:System.Drawing.Graphics>对象具有<xref:System.Drawing.Font.Unit%2A>属性值<xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>和<xref:System.Drawing.Graphics.DpiY%2A>96 每英寸点数为高度属性值的计算方式如下：  
  
 2355*(0.3/2048)\*96 = 33.1171875  
  
 继续执行相同的示例中，假设<xref:System.Drawing.Font.Unit%2A>属性<xref:System.Drawing.Graphics>对象设置为<xref:System.Drawing.GraphicsUnit.Millimeter?displayProperty=nameWithType>而非<xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>。 然后 （使用 1 英寸 = 25.4 毫米等） 的高度，以毫米为单位的计算方式如下：  
  
 2355*(0.3/2048)25.4 = 8.762256  
  
   
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
-   创建一个 <xref:System.Drawing.Font>。  
  
-   将文本行绘制到屏幕中，使用新<xref:System.Drawing.Font>。  
  
-   获取的字体的高度。  
  
-   绘制第二行的第一行的正下方的文本。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicFontsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight (float dpi);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight(float32 dpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHeight (dpi As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetHeight(float dpi);" />
      <MemberSignature Language="F#" Value="member this.GetHeight : single -&gt; single" Usage="font.GetHeight dpi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dpi" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dpi">The vertical resolution, in dots per inch, used to calculate the height of the font.</param>
        <summary>Returns the height, in pixels, of this <see cref="T:System.Drawing.Font" /> when drawn to a device with the specified vertical resolution.</summary>
        <returns>The height, in pixels, of this <see cref="T:System.Drawing.Font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Drawing.Font.Unit%2A>的字体的属性设置为除<xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>，使用屏幕显示的垂直分辨率计算的高度 （以像素为单位）。 例如，假设字体单位为英寸和字体大小为 0.3。 此外假定对于相应的字体系列，全身高度为 2048年，行距为 2355年。 如果指定的垂直分辨率，每英寸 96 点高度的计算方式如下：  
  
 2355*(0.3/2048)\*96 = 33.1171875  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Height" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Height As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Height { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Height : int" Usage="System.Drawing.Font.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the line spacing of this font.</summary>
        <value>此字体的行距（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行距是两个连续文本行的基线之间的垂直距离。 因此，行距包括以及本身的字符的高度的线之间的空白区域。  
  
 如果<xref:System.Drawing.Font.Unit%2A>的字体的属性设置为除<xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>，使用屏幕显示的垂直分辨率计算的高度 （以像素为单位）。 例如，假设字体单位为英寸和字体大小为 0.3。 此外假定对于相应的字体系列，全身高度为 2048年，行距为 2355年。 为屏幕显示具有每英寸 96 点的垂直分辨率，则可以计算高度，如下所示：  
  
 2355*(0.3/2048)\*96 = 33.11719  
  
 返回的值<xref:System.Drawing.Font.GetHeight%2A>方法将为 33.11719，并返回的值<xref:System.Drawing.Font.Height%2A>属性将为 34。 <xref:System.Drawing.Font.Height%2A>属性是通过返回的值<xref:System.Drawing.Font.GetHeight%2A>、 舍入到最接近的整数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSystemFont">
      <MemberSignature Language="C#" Value="public bool IsSystemFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSystemFont" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.IsSystemFont" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSystemFont As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSystemFont { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSystemFont : bool" Usage="System.Drawing.Font.IsSystemFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the font is a member of <see cref="T:System.Drawing.SystemFonts" />.</summary>
        <value>如果此字体是 <see cref="T:System.Drawing.SystemFonts" /> 的一个成员，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当用户更改系统字体，<xref:System.Drawing.Font.IsSystemFont%2A>属性也可能返回`true`，即使字体不是实际系统字体。 若要避免此情况下，如果你的应用程序中使用了系统字体，应该跟踪用户首选项更改通过处理<xref:Microsoft.Win32.SystemEvents.UserPreferenceChanging>或<xref:Microsoft.Win32.SystemEvents.UserPreferenceChanged>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Italic">
      <MemberSignature Language="C#" Value="public bool Italic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Italic" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Italic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Italic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Italic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Italic : bool" Usage="System.Drawing.Font.Italic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this font has the italic style applied.</summary>
        <value>
          <see langword="true" /> 表明此字体已应用斜体样式；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Drawing.Font.Style" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Drawing.Font.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.FontNameEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter/FontNameConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the face name of this <see cref="T:System.Drawing.Font" />.</summary>
        <value>此 <see cref="T:System.Drawing.Font" /> 的字体名称的字符串表示形式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Drawing.Font.%23ctor%2A>构造函数和<xref:System.Drawing.Font.Size%2A>， <xref:System.Drawing.Font.SizeInPoints%2A>， <xref:System.Drawing.Font.Name%2A>， <xref:System.Drawing.Font.Style%2A>，和<xref:System.Drawing.Font.Unit%2A>属性。 此示例设计用于包含一个 Windows 窗体<xref:System.Windows.Forms.ComboBox>名为`ComboBox1`"大于"和"较小"并且填充了字符串。 将以下代码粘贴到窗体并将关联`ComboBox1_SelectedIndexChanged`方法替换<xref:System.Windows.Forms.ComboBox.SelectedIndexChanged>事件<xref:System.Windows.Forms.ComboBox>控件。  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalFontName">
      <MemberSignature Language="C#" Value="public string OriginalFontName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalFontName" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.OriginalFontName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalFontName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OriginalFontName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalFontName : string" Usage="System.Drawing.Font.OriginalFontName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the font originally specified.</summary>
        <value>表示最初指定的字体的名称的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实际的字体名称和原始字体名称可以不同。 系统要求可能会导致以外最初指定的字体的字体使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public float Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Size" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Size { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Size : single" Usage="System.Drawing.Font.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the em-size of this <see cref="T:System.Drawing.Font" /> measured in the units specified by the <see cref="P:System.Drawing.Font.Unit" /> property.</summary>
        <value>此 <see cref="T:System.Drawing.Font" /> 的全身大小。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Drawing.Font.%23ctor%2A>构造函数和<xref:System.Drawing.Font.Size%2A>， <xref:System.Drawing.Font.SizeInPoints%2A>，和<xref:System.Drawing.Font.Unit%2A>属性。 此示例设计用于包含一个 Windows 窗体<xref:System.Windows.Forms.ComboBox>名为`ComboBox1`"大于"和"较小"并且填充了字符串。 将以下代码粘贴到窗体并将关联`ComboBox1_SelectedIndexChanged`方法替换<xref:System.Windows.Forms.ComboBox.SelectedIndexChanged>事件<xref:System.Windows.Forms.ComboBox>控件。  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeInPoints">
      <MemberSignature Language="C#" Value="public float SizeInPoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SizeInPoints" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.SizeInPoints" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SizeInPoints As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float SizeInPoints { float get(); };" />
      <MemberSignature Language="F#" Value="member this.SizeInPoints : single" Usage="System.Drawing.Font.SizeInPoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the em-size, in points, of this <see cref="T:System.Drawing.Font" />.</summary>
        <value>此 <see cref="T:System.Drawing.Font" /> 的全身大小（以点为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Drawing.Font.%23ctor%2A>构造函数和<xref:System.Drawing.Font.Size%2A>， <xref:System.Drawing.Font.SizeInPoints%2A>，和<xref:System.Drawing.Font.Unit%2A>属性。 此示例设计用于包含一个 Windows 窗体<xref:System.Windows.Forms.ComboBox>名为`ComboBox1`"大于"和"较小"并且填充了字符串。 将以下代码粘贴到窗体并将关联`ComboBox1_SelectedIndexChanged`方法替换<xref:System.Windows.Forms.ComboBox.SelectedIndexChanged>事件<xref:System.Windows.Forms.ComboBox>控件。  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Strikeout">
      <MemberSignature Language="C#" Value="public bool Strikeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Strikeout" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Strikeout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Strikeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Strikeout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Strikeout : bool" Usage="System.Drawing.Font.Strikeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this <see cref="T:System.Drawing.Font" /> specifies a horizontal line through the font.</summary>
        <value>如果有一条横线贯穿此 <see cref="T:System.Drawing.Font" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Drawing.FontStyle Style { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.FontStyle Style" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Style" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Style As FontStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::FontStyle Style { System::Drawing::FontStyle get(); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Drawing.FontStyle" Usage="System.Drawing.Font.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.FontStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets style information for this <see cref="T:System.Drawing.Font" />.</summary>
        <value>包含此 <see cref="T:System.Drawing.Font" /> 的样式信息的 <see cref="T:System.Drawing.FontStyle" /> 枚举。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何设置<xref:System.Drawing.Font>新加粗字体使用按钮属性<xref:System.Drawing.FontStyle>枚举。 本示例旨在与 Windows 窗体一起使用。 创建包含名为的按钮的窗体`Button1`并将下面的代码粘贴到其中。 将关联`Button1_Click`方法与该按钮<xref:System.Windows.Forms.Control.Click>事件。  
  
 [!code-cpp[System.Drawing.MiscExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.MiscExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.MiscExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (si As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ si, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
        <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemFontName">
      <MemberSignature Language="C#" Value="public string SystemFontName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SystemFontName" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.SystemFontName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SystemFontName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SystemFontName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SystemFontName : string" Usage="System.Drawing.Font.SystemFontName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the system font if the <see cref="P:System.Drawing.Font.IsSystemFont" /> property returns <see langword="true" />.</summary>
        <value>如果 <see cref="P:System.Drawing.Font.IsSystemFont" /> 返回 <see langword="true" />，则为系统字体的名称；否则为一个空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的名称<xref:System.Drawing.Font.SystemFontName%2A>属性将其中一个的成员<xref:System.Drawing.SystemFonts>，并且被转换为字符串。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToHfont">
      <MemberSignature Language="C#" Value="public IntPtr ToHfont ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int ToHfont() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToHfont" />
      <MemberSignature Language="VB.NET" Value="Public Function ToHfont () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr ToHfont();" />
      <MemberSignature Language="F#" Value="member this.ToHfont : unit -&gt; nativeint" Usage="font.ToHfont " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a handle to this <see cref="T:System.Drawing.Font" />.</summary>
        <returns>A Windows handle to this <see cref="T:System.Drawing.Font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法时，您必须释放生成`Hfont`使用[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]`DeleteObject`方法，以确保资源被释放。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Drawing.Font>，然后获取的句柄<xref:System.Drawing.Font>。 该示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicFontsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">The operation was unsuccessful.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于访问非托管代码。 相关的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLogFont">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Creates a GDI logical font (<c>LOGFONT</c>) structure from this <see cref="T:System.Drawing.Font" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLogFont">
      <MemberSignature Language="C#" Value="public void ToLogFont (object logFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToLogFont(object logFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToLogFont(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ToLogFont (logFont As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ToLogFont(System::Object ^ logFont);" />
      <MemberSignature Language="F#" Value="member this.ToLogFont : obj -&gt; unit" Usage="font.ToLogFont logFont" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logFont" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="logFont">An <see cref="T:System.Object" /> to represent the <see langword="LOGFONT" /> structure that this method creates.</param>
        <summary>Creates a GDI logical font (<c>LOGFONT</c>) structure from this <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法会设置`logFont`字体转换的结果的参数。 有关逻辑字体的详细信息，请参阅[LOGFONT 结构](http://msdn.microsoft.com/library/dd145037.aspx)。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于访问非托管代码。 相关的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ToLogFont">
      <MemberSignature Language="C#" Value="public void ToLogFont (object logFont, System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToLogFont(object logFont, class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToLogFont(System.Object,System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ToLogFont(System::Object ^ logFont, System::Drawing::Graphics ^ graphics);" />
      <MemberSignature Language="F#" Value="member this.ToLogFont : obj * System.Drawing.Graphics -&gt; unit" Usage="font.ToLogFont (logFont, graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logFont" Type="System.Object" />
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="logFont">An <see cref="T:System.Object" /> to represent the <see langword="LOGFONT" /> structure that this method creates.</param>
        <param name="graphics">A <see cref="T:System.Drawing.Graphics" /> that provides additional information for the <see langword="LOGFONT" /> structure.</param>
        <summary>Creates a GDI logical font (<c>LOGFONT</c>) structure from this <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法会设置`logFont`字体转换的结果的参数。 有关逻辑字体的详细信息，请参阅[LOGFONT 结构](http://msdn.microsoft.com/library/dd145037.aspx)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> is <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于访问非托管代码。 相关的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="font.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a human-readable string representation of this <see cref="T:System.Drawing.Font" />.</summary>
        <returns>A string that represents this <see cref="T:System.Drawing.Font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的字符串具有以下格式：  
  
 [字体： 名称 =*字体名称*，大小 =*大小*，单位 =*单位*，GDiCharSet =*gdiCharSet*，GdiVerticalFont =*布尔*]  
  
   
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
-   创建一个 <xref:System.Drawing.Font>。  
  
-   获取一个字符串，表示字体。  
  
-   在消息框中显示的字符串。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicFontsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Underline">
      <MemberSignature Language="C#" Value="public bool Underline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Underline" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Underline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Underline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Underline { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Underline : bool" Usage="System.Drawing.Font.Underline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this <see cref="T:System.Drawing.Font" /> is underlined.</summary>
        <value>如果此 <see cref="T:System.Drawing.Font" /> 有下划线，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit Unit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit Unit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Unit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Unit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit Unit { System::Drawing::GraphicsUnit get(); };" />
      <MemberSignature Language="F#" Value="member this.Unit : System.Drawing.GraphicsUnit" Usage="System.Drawing.Font.Unit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter/FontUnitConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the unit of measure for this <see cref="T:System.Drawing.Font" />.</summary>
        <value>一个 <see cref="T:System.Drawing.GraphicsUnit" />，它表示此 <see cref="T:System.Drawing.Font" /> 的度量单位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Drawing.Font.%23ctor%2A>构造函数和<xref:System.Drawing.Font.Size%2A>， <xref:System.Drawing.Font.SizeInPoints%2A>，和<xref:System.Drawing.Font.Unit%2A>属性。 此示例设计用于包含一个 Windows 窗体<xref:System.Windows.Forms.ComboBox>名为`ComboBox1`"大于"和"较小"并且填充了字符串。 将以下代码粘贴到窗体并将关联`ComboBox1_SelectedIndexChanged`方法替换<xref:System.Windows.Forms.ComboBox.SelectedIndexChanged>事件<xref:System.Windows.Forms.ComboBox>控件。  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>