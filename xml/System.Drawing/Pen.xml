<Type Name="Pen" FullName="System.Drawing.Pen">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d37fac39a424f3b42adab08f5106dc3d3cc57f2f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410531" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Pen : MarshalByRefObject, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Pen extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Pen" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Pen&#xA;Inherits MarshalByRefObject&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Pen sealed : MarshalByRefObject, ICloneable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>定义用于绘制直线和曲线的对象。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Drawing.Pen>绘制指定的宽度和样式的行。 使用<xref:System.Drawing.Drawing2D.DashStyle>属性绘制的虚线的几种变体。 绘制的线条<xref:System.Drawing.Pen>可以填写多种填充样式，包括纯色和纹理。 填充样式取决于画笔或纹理用作填充对象。  
  
   
  
## Examples  
 下面的代码示例演示如何构造<xref:System.Drawing.Pen>与<xref:System.Drawing.Pen.Brush%2A>和设置的效果<xref:System.Drawing.Pen.LineJoin%2A>属性<xref:System.Drawing.Pen>。  
  
 本示例旨在与 Windows 窗体一起使用。 将代码粘贴到窗体并调用`ShowLineJoin`方法时处理该窗体的<xref:System.Windows.Forms.Control.Paint>事件，并传递`e`作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>用指定颜色初始化 <see cref="T:System.Drawing.Pen" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Brush brush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Brush brush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Brush)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Brush ^ brush);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
      </Parameters>
      <Docs>
        <param name="brush">一个 <see cref="T:System.Drawing.Brush" />，确定该 <see cref="T:System.Drawing.Pen" /> 的填充属性。</param>
        <summary>使用指定的 <see cref="T:System.Drawing.Pen" /> 初始化 <see cref="T:System.Drawing.Brush" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Pen.Brush%2A>属性确定如何<xref:System.Drawing.Pen>绘制线。 好像它们是填充的矩形，具有指定的特征绘制连线<xref:System.Drawing.Brush>。  
  
 <xref:System.Drawing.Pen.Width%2A>属性的新<xref:System.Drawing.Pen>设置为 1 （默认值）。  
  
   
  
## Examples  
 下面的代码示例演示如何构造<xref:System.Drawing.Pen>与<xref:System.Drawing.Pen.Brush%2A>和设置的效果<xref:System.Drawing.Pen.LineJoin%2A>属性<xref:System.Drawing.Pen>。  
  
 本示例旨在与 Windows 窗体一起使用。 将代码粘贴到窗体并调用`ShowLineJoin`方法时处理该窗体的<xref:System.Windows.Forms.Control.Paint>事件，并传递`e`作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Color color);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">
          <see cref="T:System.Drawing.Color" /> 结构，指示此 <see cref="T:System.Drawing.Pen" /> 的颜色。</param>
        <summary>用指定颜色初始化 <see cref="T:System.Drawing.Pen" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Color>属性设置为指定的颜色`color`参数。 <xref:System.Drawing.Pen.Width%2A>属性设置为 1 （默认值）。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Brush brush, float width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Brush brush, float32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Brush,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Brush ^ brush, float width);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="width" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">一个 <see cref="T:System.Drawing.Brush" />，决定此 <see cref="T:System.Drawing.Pen" /> 的特征。</param>
        <param name="width">新 <see cref="T:System.Drawing.Pen" /> 的宽度。</param>
        <summary>使用指定的 <see cref="T:System.Drawing.Pen" /> 和 <see cref="T:System.Drawing.Brush" /> 初始化 <see cref="P:System.Drawing.Pen.Width" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Brush>设置中指定的颜色为`brush`参数，<xref:System.Drawing.Pen.Width%2A>属性设置中指定的值为`width`参数和单位设置为<xref:System.Drawing.GraphicsUnit.World>。  
  
 请注意，`brush`参数还指定<xref:System.Drawing.Color>此属性<xref:System.Drawing.Pen>。  
  
 A`width`为 0 将导致<xref:System.Drawing.Pen>绘制就像宽度是 1。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Drawing.Pen>并演示设置的效果<xref:System.Drawing.Pen.StartCap%2A>和<xref:System.Drawing.Pen.EndCap%2A>属性<xref:System.Drawing.Pen>。  
  
 本示例旨在与 Windows 窗体一起使用。 将代码粘贴到窗体并调用`ShowStartAndEndCaps`方法时处理该窗体的<xref:System.Windows.Forms.Control.Paint>事件，并传递`e`作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.ImageExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ImageExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ImageExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Color color, float width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Color color, float32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Color,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Color color, float width);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
        <Parameter Name="width" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="color">
          <see cref="T:System.Drawing.Color" /> 结构，指示此 <see cref="T:System.Drawing.Pen" /> 的颜色。</param>
        <param name="width">指示此 <see cref="T:System.Drawing.Pen" /> 的宽度的值。</param>
        <summary>用指定的 <see cref="T:System.Drawing.Pen" /> 和 <see cref="T:System.Drawing.Color" /> 属性初始化 <see cref="P:System.Drawing.Pen.Width" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Color>属性设置为指定的颜色`color`参数。 <xref:System.Drawing.Pen.Width%2A>属性设置中指定的值为`width`参数。 A`width`为 0 将导致<xref:System.Drawing.Pen>绘制就像宽度是 1。  
  
   
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Drawing.Pen>和设置的效果<xref:System.Drawing.Pen.DashCap%2A>， <xref:System.Drawing.Pen.DashPattern%2A>，和<xref:System.Drawing.Graphics.SmoothingMode%2A>属性。  
  
 本示例旨在与 Windows 窗体一起使用。 将代码粘贴到窗体并调用`ShowPensAndSmoothingMode`方法时处理该窗体的<xref:System.Windows.Forms.Control.Paint>事件，并传递 e 作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PenAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PenAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Alignment" />
      <MemberSignature Language="VB.NET" Value="Public Property Alignment As PenAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PenAlignment Alignment { System::Drawing::Drawing2D::PenAlignment get(); void set(System::Drawing::Drawing2D::PenAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PenAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Drawing.Pen" /> 的对齐方式。</summary>
        <value>表示该 <see cref="T:System.Drawing.Drawing2D.PenAlignment" /> 的对齐方式的 <see cref="T:System.Drawing.Pen" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性确定如何<xref:System.Drawing.Pen>绘制闭合的曲线和多边形。 <xref:System.Drawing.Drawing2D.PenAlignment>枚举指定五个值; 但是，仅包含两个值-<xref:System.Drawing.Drawing2D.PenAlignment.Center>和<xref:System.Drawing.Drawing2D.PenAlignment.Inset>-将更改绘制的线条的外观。 <xref:System.Drawing.Drawing2D.PenAlignment.Center> 为此属性的默认值并指定的笔宽位于曲线或多边形的轮廓。 值为<xref:System.Drawing.Drawing2D.PenAlignment.Inset>此属性指定的笔宽位于曲线或多边形的轮廓。 其他三个值， <xref:System.Drawing.Drawing2D.PenAlignment.Right>， <xref:System.Drawing.Drawing2D.PenAlignment.Left>，和<xref:System.Drawing.Drawing2D.PenAlignment.Outset>，将导致钢笔处于居中位置。  
  
 A <xref:System.Drawing.Pen> ，其设置为其对齐<xref:System.Drawing.Drawing2D.PenAlignment.Inset>将生成不可靠的结果，有时绘制在内嵌位置，并且有时位于为中心的位置。 此外，内嵌钢笔不能用于绘制复合直线，并且无法进行绘制的虚线<xref:System.Drawing.Drawing2D.DashCap.Triangle>线帽。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定值不是 <see cref="T:System.Drawing.Drawing2D.PenAlignment" /> 的成员。</exception>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.Alignment" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="Brush">
      <MemberSignature Language="C#" Value="public System.Drawing.Brush Brush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Brush Brush" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Brush" />
      <MemberSignature Language="VB.NET" Value="Public Property Brush As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Brush ^ Brush { System::Drawing::Brush ^ get(); void set(System::Drawing::Brush ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Drawing.Brush" />，用于确定此 <see cref="T:System.Drawing.Pen" /> 的特性。</summary>
        <value>一个 <see cref="T:System.Drawing.Brush" />，用于确定此 <see cref="T:System.Drawing.Pen" /> 的特性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 分配此属性会导致钢笔绘制填充的直线和曲线。 它将重写<xref:System.Drawing.Color>属性<xref:System.Drawing.Pen>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.Brush" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Drawing.Pen" /> 的一个精确副本。</summary>
        <returns>一个可以强制转换为 <see cref="T:System.Drawing.Pen" /> 的 <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
-   创建一个 <xref:System.Drawing.Pen>。  
  
-   创建一份该钢笔。  
  
-   绘制一条到屏幕中，使用该钢笔的副本。  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicPenExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicPenExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Drawing.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Color" />
      <MemberSignature Language="VB.NET" Value="Public Property Color As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color Color { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Drawing.Pen" /> 的颜色。</summary>
        <value>一个 <see cref="T:System.Drawing.Color" /> 结构，表示此 <see cref="T:System.Drawing.Pen" /> 的颜色。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.Color" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="CompoundArray">
      <MemberSignature Language="C#" Value="public float[] CompoundArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32[] CompoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.CompoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Property CompoundArray As Single()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;float&gt; ^ CompoundArray { cli::array &lt;float&gt; ^ get(); void set(cli::array &lt;float&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于指定复合钢笔的值数组。 复合钢笔绘制由平行直线和空白区域组成的复合直线。</summary>
        <value>用于指定复合数组的实数组。 该数组中的元素必须按升序排列，不能小于 0，也不能大于 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 复合行组成交替并行直线和空白区域的不同的宽度。 数组中的值指定每个组件的复合直线相对于钢笔的宽度的起始点。 数组中的第一个值指定的第一个组件 （行） 的开始位置的距离一个分数在钢笔的宽度。 数组中的第二个值指定的起始时间的下一个组件 （空格） 作为距离的小数部分在钢笔的宽度。 数组中的最终值指定的最后一个组件的结束位置。  
  
 假设你想用钢笔绘制两条平行直线的第一个行的宽度所在钢笔的宽度的 20%，分隔的两行的空间的宽度为 50%的笔 ' s 宽度和第二行的宽度为 30%的笔宽度。 首先创建<xref:System.Drawing.Pen>和实数的数组。 通过将包含值 0.0、 0.2、 0.7 和 1.0 数组传递给此属性设置复合数组。  
  
 如果未设置此属性<xref:System.Drawing.Pen>具有其<xref:System.Drawing.Pen.Alignment%2A>属性设置为<xref:System.Drawing.Drawing2D.PenAlignment.Inset>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.CompoundArray" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="CustomEndCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CustomLineCap CustomEndCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.CustomLineCap CustomEndCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.CustomEndCap" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomEndCap As CustomLineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CustomLineCap ^ CustomEndCap { System::Drawing::Drawing2D::CustomLineCap ^ get(); void set(System::Drawing::Drawing2D::CustomLineCap ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CustomLineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在通过此 <see cref="T:System.Drawing.Pen" /> 绘制的直线终点使用的自定义线帽。</summary>
        <value>一个 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />，表示在通过此 <see cref="T:System.Drawing.Pen" /> 绘制的直线终点使用的线帽。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.CustomEndCap" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="CustomStartCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CustomLineCap CustomStartCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.CustomLineCap CustomStartCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.CustomStartCap" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomStartCap As CustomLineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CustomLineCap ^ CustomStartCap { System::Drawing::Drawing2D::CustomLineCap ^ get(); void set(System::Drawing::Drawing2D::CustomLineCap ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CustomLineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在通过此 <see cref="T:System.Drawing.Pen" /> 绘制的直线起点使用的自定义线帽。</summary>
        <value>一个 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />，表示在通过此 <see cref="T:System.Drawing.Pen" /> 绘制的直线起点使用的线帽。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.CustomStartCap" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="DashCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.DashCap DashCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.DashCap DashCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashCap" />
      <MemberSignature Language="VB.NET" Value="Public Property DashCap As DashCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::DashCap DashCap { System::Drawing::Drawing2D::DashCap get(); void set(System::Drawing::Drawing2D::DashCap value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.DashCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用在短划线终点的线帽样式，这些短划线构成通过此 <see cref="T:System.Drawing.Pen" /> 绘制的虚线。</summary>
        <value>
          <see cref="T:System.Drawing.Drawing2D.DashCap" /> 值之一，表示用在短划线起点和终点的线帽样式，这些短划线构成通过此 <see cref="T:System.Drawing.Pen" /> 绘制的虚线。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 未设置此属性为<xref:System.Drawing.Drawing2D.DashCap.Triangle>如果<xref:System.Drawing.Pen>具有其<xref:System.Drawing.Pen.Alignment%2A>属性设置为<xref:System.Drawing.Drawing2D.PenAlignment.Inset>。  
  
   
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Drawing.Pen>和设置的效果<xref:System.Drawing.Pen.DashCap%2A>， <xref:System.Drawing.Pen.DashPattern%2A>，和<xref:System.Drawing.Graphics.SmoothingMode%2A>属性。  
  
 本示例旨在与 Windows 窗体一起使用。 将代码粘贴到窗体并调用`ShowPensAndSmoothingMode`方法时处理该窗体的<xref:System.Windows.Forms.Control.Paint>事件，并传递`e`作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定值不是 <see cref="T:System.Drawing.Drawing2D.DashCap" /> 的成员。</exception>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.DashCap" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="DashOffset">
      <MemberSignature Language="C#" Value="public float DashOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DashOffset" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property DashOffset As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DashOffset { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置直线的起点到短划线图案起始处的距离。</summary>
        <value>直线的起点到短划线图案起始处的距离。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.DashOffset" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="DashPattern">
      <MemberSignature Language="C#" Value="public float[] DashPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32[] DashPattern" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property DashPattern As Single()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;float&gt; ^ DashPattern { cli::array &lt;float&gt; ^ get(); void set(cli::array &lt;float&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置自定义的短划线和空白区域的数组。</summary>
        <value>实数数组，指定虚线中交替出现的短划线和空白区域的长度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除赋值`null`为此属性将设置<xref:System.Drawing.Drawing2D.DashStyle>此属性<xref:System.Drawing.Pen>到<xref:System.Drawing.Drawing2D.DashStyle.Custom>。  
  
 中的元素`dashArray`数组在短划线图案中设置的每个短划线和空间的长度。 第一个元素设置的短划线的长度，第二个元素设置的空间的长度，第三个元素设置的短划线和等等的长度。 因此，每个元素应为非零的正数。  
  
 每个短划线和短划线图案中的空间的长度是数组中的元素值的乘积和宽度<xref:System.Drawing.Pen>。  
  
   
  
## Examples  
 下面的代码示例演示如何设置的效果<xref:System.Drawing.Pen.DashCap%2A>， <xref:System.Drawing.Pen.DashPattern%2A>，和<xref:System.Drawing.Graphics.SmoothingMode%2A>属性。  
  
 本示例旨在与 Windows 窗体一起使用。 将代码粘贴到窗体并调用`ShowPensAndSmoothingMode`方法时处理该窗体的<xref:System.Windows.Forms.Control.Paint>事件，并传递`e`作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.DashPattern" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="DashStyle">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.DashStyle DashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.DashStyle DashStyle" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property DashStyle As DashStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::DashStyle DashStyle { System::Drawing::Drawing2D::DashStyle get(); void set(System::Drawing::Drawing2D::DashStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.DashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于通过此 <see cref="T:System.Drawing.Pen" /> 绘制的虚线的样式。</summary>
        <value>一个 <see cref="T:System.Drawing.Drawing2D.DashStyle" />，表示用于通过此 <see cref="T:System.Drawing.Pen" /> 绘制的虚线的样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值为<xref:System.Drawing.Drawing2D.DashStyle.Custom>为此属性指定自定义模式的短划线和空白，通过定义<xref:System.Drawing.Pen.DashPattern%2A>属性，后者构成与此绘制的直线<xref:System.Drawing.Pen>。 如果此属性的值是<xref:System.Drawing.Drawing2D.DashStyle.Custom>和的值<xref:System.Drawing.Pen.DashPattern%2A>属性是`null`，则钢笔绘制实线。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.DashStyle" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放此 <see cref="T:System.Drawing.Pen" /> 使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Drawing.Pen.Dispose%2A>允许使用的资源<xref:System.Drawing.Brush>可以重新分配用于其他目的。  
  
 在完成使用 <xref:System.Drawing.Pen.Dispose%2A> 后，应调用 <xref:System.Drawing.Pen>。 <xref:System.Drawing.Pen.Dispose%2A> 方法使 <xref:System.Drawing.Pen> 处于不可用状态。 在调用<xref:System.Drawing.Pen.Dispose%2A>，必须释放对所有引用<xref:System.Drawing.Pen>以便垃圾回收器才能回收的内存，<xref:System.Drawing.Pen>占用。 有关详细信息，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  每次释放对 <xref:System.Drawing.Pen.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Drawing.Pen>。 否则，在垃圾回收器调用 <xref:System.Drawing.Pen> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。  
  
   
  
## Examples  
 下面的代码示例演示如何设置的效果<xref:System.Drawing.Pen.Width%2A>和<xref:System.Drawing.Pen.LineJoin%2A>属性，并演示如何调用<xref:System.Drawing.Pen.Dispose%2A>方法<xref:System.Drawing.Pen>。  
  
 本示例旨在与 Windows 窗体一起使用。 将代码粘贴到窗体并调用`ShowLineJoin`方法时处理该窗体的<xref:System.Windows.Forms.Control.Paint>事件，并传递`e`作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineCap EndCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineCap EndCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.EndCap" />
      <MemberSignature Language="VB.NET" Value="Public Property EndCap As LineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineCap EndCap { System::Drawing::Drawing2D::LineCap get(); void set(System::Drawing::Drawing2D::LineCap value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在通过此 <see cref="T:System.Drawing.Pen" /> 绘制的直线终点使用的线帽样式。</summary>
        <value>
          <see cref="T:System.Drawing.Drawing2D.LineCap" /> 值之一，表示在通过此 <see cref="T:System.Drawing.Pen" /> 绘制的直线终点使用的线帽样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何设置的效果<xref:System.Drawing.Pen.StartCap%2A>和<xref:System.Drawing.Pen.EndCap%2A>属性<xref:System.Drawing.Pen>。  
  
 本示例旨在与 Windows 窗体一起使用。 将代码粘贴到窗体并调用`ShowStartAndEndCaps`方法时处理该窗体的<xref:System.Windows.Forms.Control.Paint>事件，并传递`e`作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.PensExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.PensExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#2)]
 [!code-vb[System.Drawing.PensExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定值不是 <see cref="T:System.Drawing.Drawing2D.LineCap" /> 的成员。</exception>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.EndCap" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Pen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Pen ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineJoin">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineJoin LineJoin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineJoin LineJoin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.LineJoin" />
      <MemberSignature Language="VB.NET" Value="Public Property LineJoin As LineJoin" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineJoin LineJoin { System::Drawing::Drawing2D::LineJoin get(); void set(System::Drawing::Drawing2D::LineJoin value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineJoin</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置通过此 <see cref="T:System.Drawing.Pen" /> 绘制的两条连续直线的端点的联接样式。</summary>
        <value>一个 <see cref="T:System.Drawing.Drawing2D.LineJoin" />，表示通过此 <see cref="T:System.Drawing.Pen" /> 绘制的两条连续直线的端点的联接样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 线条联接是由其端点相交或重叠的两个行构成的常见区域。 有三种线条联接样式： 斜接、 凹凸效果，和舍入。  当指定的行联接样式<xref:System.Drawing.Pen>对象，联接样式，将应用于任何中所有连接的直线<xref:System.Drawing.Drawing2D.GraphicsPath>使用该笔绘制的对象。下图显示凹凸效果的线条联接的结果。  
  
 ![钢笔](~/add/media/pens5.gif "钢笔")  
  
   
  
## Examples  
 下面的代码示例演示如何设置的效果<xref:System.Drawing.Pen.Width%2A>和<xref:System.Drawing.Pen.LineJoin%2A>属性<xref:System.Drawing.Pen>。  
  
 本示例旨在与 Windows 窗体一起使用。 将代码粘贴到窗体并调用`ShowLineJoin`方法时处理该窗体的<xref:System.Windows.Forms.Control.Paint>事件，并传递`e`作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.LineJoin" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="MiterLimit">
      <MemberSignature Language="C#" Value="public float MiterLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MiterLimit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.MiterLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property MiterLimit As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float MiterLimit { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置斜接角上联接宽度的限制。</summary>
        <value>斜接角上联接宽度的限制。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 斜接长度是从联接的内侧的行墙的交集的外部联接线墙壁的交集的距离。 当两条线之间的角度较少时，斜接长度可能很大。 斜接限制是描边宽度斜接长度最大允许的比率。 默认值为 10.0 f。  
  
 如果交集联接斜接长度超过联接的限制，然后将倾斜联接以便使其保持在交叉联接的限制内这一问题。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.MiterLimit" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>用指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" /> 乘以此 <see cref="T:System.Drawing.Pen" /> 的变换矩阵。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">用来乘变换矩阵的 <see cref="T:System.Drawing.Drawing2D.Matrix" /> 对象。</param>
        <summary>用指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" /> 乘以此 <see cref="T:System.Drawing.Pen" /> 的变换矩阵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将添加前中指定的乘法矩阵`matrix`乘法运算的转换矩阵的参数。  
  
   
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
-   创建一个 <xref:System.Drawing.Pen>。  
  
-   绘制一条到屏幕。  
  
-   返回指定矩阵的笔变换矩阵的乘积。  
  
-   与转换后的钢笔绘制线条。  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicPenExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicPenExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">用来乘变换矩阵的 <see cref="T:System.Drawing.Drawing2D.Matrix" />。</param>
        <param name="order">执行乘法运算的顺序。</param>
        <summary>按照指定的顺序，用指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" /> 乘以此 <see cref="T:System.Drawing.Pen" /> 的变换矩阵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用<xref:System.Drawing.Drawing2D.MatrixOrder>枚举元素 （在前面添加或追加） 指定的`order`参数来执行乘法运算。  
  
   
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
-   创建一个 <xref:System.Drawing.Pen>。  
  
-   绘制一条到屏幕。  
  
-   返回指定矩阵的笔变换矩阵的乘积。  
  
-   与转换后的钢笔绘制线条。  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicPenExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicPenExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PenType">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PenType PenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PenType PenType" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.PenType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PenType As PenType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PenType PenType { System::Drawing::Drawing2D::PenType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PenType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用此 <see cref="T:System.Drawing.Pen" /> 绘制的直线的样式。</summary>
        <value>
          <see cref="T:System.Drawing.Drawing2D.PenType" /> 枚举，指定用此 <see cref="T:System.Drawing.Pen" /> 绘制的直线的样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Drawing.Pen>可以实线、 填充的直线或纹理的直线，具体取决于指定的成员的样式来绘制<xref:System.Drawing.Drawing2D.PenType>枚举。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将此 <see cref="T:System.Drawing.Pen" /> 的几何变换矩阵重置为单位矩阵。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
-   创建一个 <xref:System.Drawing.Pen>。  
  
-   设置 x 轴方向缩放 2 倍的钢笔的转换矩阵。  
  
-   绘制一条到屏幕。  
  
-   将变换矩阵重置为标识。  
  
-   向屏幕绘制第二行。  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicPenExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicPenExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将局部几何转换旋转指定角度。 此方法将旋转添加到转换前。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">旋转角度。</param>
        <summary>将局部几何转换旋转指定角度。 此方法将旋转添加到转换前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于钢笔的形状是循环，旋转不具有任何明显的效果，除非在 x 轴或 y 轴方向缩放钢笔。  
  
   
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
-   创建一个 <xref:System.Drawing.Pen>。  
  
-   绘制矩形使用钢笔。  
  
-   钢笔沿 x 轴方向的 2 倍缩放。  
  
-   将触笔旋转顺时针旋转 90 度。  
  
-   绘制要显示的差异的第二个矩形。  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicPenExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicPenExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">旋转角度。</param>
        <param name="order">一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />，它指定是在后面追加旋转矩阵还是在前面添加旋转矩阵。</param>
        <summary>以指定顺序将局部几何转换旋转指定角度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于钢笔的形状是循环，旋转不具有任何明显的效果，除非在 x 轴或 y 轴方向缩放钢笔。  
  
   
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
-   创建一个 <xref:System.Drawing.Pen>。  
  
-   钢笔沿 x 轴方向的 2 倍缩放。  
  
-   绘制矩形使用钢笔。  
  
-   将触笔旋转顺时针旋转 90 度。  
  
-   绘制要显示的差异的第二个矩形。  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicPenExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicPenExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>按指定因子缩放局部几何转换。 此方法将缩放矩阵添加到转换前。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">沿 x 轴方向缩放转换的因子。</param>
        <param name="sy">沿 y 轴方向缩放转换的因子。</param>
        <summary>按指定因子缩放局部几何转换。 此方法将缩放矩阵添加到转换前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
 创建一个 <xref:System.Drawing.Pen>。  
  
 绘制矩形使用钢笔。  
  
 钢笔沿 x 轴方向的 2 倍缩放。  
  
 绘制要显示的差异的第二个矩形。  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicPenExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicPenExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">沿 x 轴方向缩放转换的因子。</param>
        <param name="sy">沿 y 轴方向缩放转换的因子。</param>
        <param name="order">一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />，指定是在后面追加缩放矩阵还是在前面添加缩放矩阵。</param>
        <summary>将局部几何转换以指定顺序缩放指定因子。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码执行下列操作：  
  
-   创建一个 <xref:System.Drawing.Pen>。  
  
-   绘制矩形使用钢笔。  
  
-   钢笔沿 x 轴方向的 2 倍缩放。  
  
-   绘制要显示的差异的第二个矩形。  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicPenExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicPenExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineCap">
      <MemberSignature Language="C#" Value="public void SetLineCap (System.Drawing.Drawing2D.LineCap startCap, System.Drawing.Drawing2D.LineCap endCap, System.Drawing.Drawing2D.DashCap dashCap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLineCap(valuetype System.Drawing.Drawing2D.LineCap startCap, valuetype System.Drawing.Drawing2D.LineCap endCap, valuetype System.Drawing.Drawing2D.DashCap dashCap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.SetLineCap(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.DashCap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLineCap(System::Drawing::Drawing2D::LineCap startCap, System::Drawing::Drawing2D::LineCap endCap, System::Drawing::Drawing2D::DashCap dashCap);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startCap" Type="System.Drawing.Drawing2D.LineCap" />
        <Parameter Name="endCap" Type="System.Drawing.Drawing2D.LineCap" />
        <Parameter Name="dashCap" Type="System.Drawing.Drawing2D.DashCap" />
      </Parameters>
      <Docs>
        <param name="startCap">一个 <see cref="T:System.Drawing.Drawing2D.LineCap" />，表示要在通过此 <see cref="T:System.Drawing.Pen" /> 绘制的直线起点使用的线帽样式。</param>
        <param name="endCap">一个 <see cref="T:System.Drawing.Drawing2D.LineCap" />，表示要在通过此 <see cref="T:System.Drawing.Pen" /> 绘制的直线终点使用的线帽样式。</param>
        <param name="dashCap">一个 <see cref="T:System.Drawing.Drawing2D.LineCap" />，表示要在通过此 <see cref="T:System.Drawing.Pen" /> 绘制的虚线起点或终点使用的线帽样式。</param>
        <summary>设置用于确定线帽样式的值，线帽用于结束通过此 <see cref="T:System.Drawing.Pen" /> 绘制的直线。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例专用于 Windows 窗体，并且它需要<xref:System.Windows.Forms.PaintEventArgs> `e`，这是一个参数的<xref:System.Windows.Forms.Control.Paint>事件处理程序。 该代码创建<xref:System.Drawing.Pen>并将其绘制箭头锚定帽行的开头设置：  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicPenExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicPenExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineCap StartCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineCap StartCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.StartCap" />
      <MemberSignature Language="VB.NET" Value="Public Property StartCap As LineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineCap StartCap { System::Drawing::Drawing2D::LineCap get(); void set(System::Drawing::Drawing2D::LineCap value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在通过此 <see cref="T:System.Drawing.Pen" /> 绘制的直线起点使用的线帽样式。</summary>
        <value>
          <see cref="T:System.Drawing.Drawing2D.LineCap" /> 值之一，表示在通过此 <see cref="T:System.Drawing.Pen" /> 绘制的直线起点使用的线帽样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何设置的效果<xref:System.Drawing.Pen.StartCap%2A>和<xref:System.Drawing.Pen.EndCap%2A>属性<xref:System.Drawing.Pen>。  
  
 本示例旨在与 Windows 窗体一起使用。 将代码粘贴到窗体并调用`ShowStartAndEndCaps`方法时处理该窗体的<xref:System.Windows.Forms.Control.Paint>事件，并传递`e`作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.PensExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.PensExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#2)]
 [!code-vb[System.Drawing.PensExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定值不是 <see cref="T:System.Drawing.Drawing2D.LineCap" /> 的成员。</exception>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.StartCap" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Drawing.Pen" /> 的几何变换的副本。</summary>
        <value>一个 <see cref="T:System.Drawing.Drawing2D.Matrix" /> 副本，表示此 <see cref="T:System.Drawing.Pen" /> 的几何变换。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性定义笔尖椭圆形状。 此椭圆来自通过应用转换矩阵的默认圆形形状。 请注意，矩阵的平移部分将被忽略。 因为返回的矩阵和通过<xref:System.Drawing.Pen.Transform%2A>属性为钢笔的几何变换的副本，当你不再需要它时，应释放的矩阵。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.Transform" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将局部几何转换平移指定尺寸。 此方法将平移添加到转换前。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">X 方向的转换值。</param>
        <param name="dy">Y 方向的转换值。</param>
        <summary>将局部几何转换平移指定尺寸。 此方法将平移添加到转换前。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">X 方向的转换值。</param>
        <param name="dy">Y 方向的转换值。</param>
        <param name="order">应用转换的顺序（在前面添加或在后面追加）。</param>
        <summary>按指定的顺序将局部几何转换平移指定的尺寸。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public float Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Width" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Width { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Drawing.Pen" /> 的宽度，以用于绘图的 <see cref="T:System.Drawing.Graphics" /> 对象为单位。</summary>
        <value>此 <see cref="T:System.Drawing.Pen" /> 的宽度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以访问的度量单位<xref:System.Drawing.Graphics>对象使用其<xref:System.Drawing.Graphics.PageUnit%2A>属性。 通常单位是度量的像素。 A<xref:System.Drawing.Pen.Width%2A>为 0 将导致<xref:System.Drawing.Pen>绘制就像<xref:System.Drawing.Pen.Width%2A>为 1。  
  
   
  
## Examples  
 下面的代码示例演示如何设置的效果<xref:System.Drawing.Pen.Width%2A>和<xref:System.Drawing.Pen.LineJoin%2A>属性<xref:System.Drawing.Pen>。  
  
 本示例旨在与 Windows 窗体一起使用。 将代码粘贴到窗体并调用`ShowLineJoin`方法时处理该窗体的<xref:System.Windows.Forms.Control.Paint>事件，并传递`e`作为<xref:System.Windows.Forms.PaintEventArgs>。  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">对不可变的 <see cref="P:System.Drawing.Pen.Width" />（比如由 <see cref="T:System.Drawing.Pen" /> 类所返回）设置 <see cref="T:System.Drawing.Pens" /> 属性。</exception>
      </Docs>
    </Member>
  </Members>
</Type>