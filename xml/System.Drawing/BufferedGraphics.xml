<Type Name="BufferedGraphics" FullName="System.Drawing.BufferedGraphics">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8eb376f4bda7764bd0c534a86c20b084960c4a7d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30409411" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BufferedGraphics : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphics extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphics&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphics sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>为双缓冲提供图形缓冲区。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.BufferedGraphics>类可以实现自定义双缓冲图形。 它提供图形缓冲区，以及可用于写入到缓冲区和呈现其内容写入输出设备的方法的包装。  
  
 使用双缓冲的图形的可以减少或消除闪烁引起重绘显示图面。 当你使用双缓冲时，更新的图形首先绘制到在内存中，缓冲区和此缓冲区的内容被快速写入某些或所有显示的图面。 显示图形的覆盖此相对简短通常可减小或消除图形更新时，有时会闪烁。  
  
> [!NOTE]
>  使用双缓冲的最简单方法是设置<xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>控制控件使用的样式标志<xref:System.Windows.Forms.Control.SetStyle%2A>方法。 设置<xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>标志的控件将重定向为通过一个默认的图形缓冲区，该控件的所有绘制工作，而无需任何其他代码。 此标志设置为`true`默认情况下。  
  
 <xref:System.Drawing.BufferedGraphics>类没有公共构造函数，并且必须通过创建<xref:System.Drawing.BufferedGraphicsContext>为应用程序域中使用其<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法。 你可以检索<xref:System.Drawing.BufferedGraphicsContext>从静态当前的应用程序域<xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType>属性。  
  
 <xref:System.Drawing.BufferedGraphics.Graphics%2A>属性可以用于绘制到图形缓冲区。 此属性提供访问权限<xref:System.Drawing.Graphics>绘制到此分配的图形缓冲区的对象<xref:System.Drawing.BufferedGraphics>对象。  
  
 <xref:System.Drawing.BufferedGraphics.Render%2A>分配缓冲区时指定与图形的内容缓冲到面没有参数绘制的方法。 其他重载<xref:System.Drawing.BufferedGraphics.Render%2A>方法允许你指定<xref:System.Drawing.Graphics>对象或<xref:System.IntPtr>指向要绘制图形缓冲区的内容到设备上下文的对象。  
  
 绘制双缓冲图形的详细信息，请参阅[双缓冲图形](~/docs/framework/winforms/advanced/double-buffered-graphics.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Drawing.BufferedGraphics>要使用的缓冲实现的几种类型的图形绘制对象。 单击该窗体或者启动和停止计时器引起绘制更新。 绘图更新，可以观察的双缓冲效果。 右键单击窗体将循环以下绘图模式：  
  
-   直接绘制到<xref:System.Windows.Forms.Control.Handle%2A>为<xref:System.Windows.Forms.Form>。  
  
-   通过重写绘制<xref:System.Windows.Forms.Form.OnPaint%2A>方法使用<xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>控制样式。  
  
-   通过重写绘制<xref:System.Windows.Forms.Form.OnPaint%2A>方法而无需使用的窗体方法<xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>控制样式。  
  
 在每个模式下，绘制文本，用于标识当前模式以及描述当按下的每个鼠标按钮时发生的行为。  
  
 [!code-cpp[BufferedGraphicsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferedGraphicsExample/CPP/bufferingtest.cpp#1)]
 [!code-csharp[BufferedGraphicsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferedGraphicsExample/CS/bufferingtest.cs#1)]
 [!code-vb[BufferedGraphicsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferedGraphicsExample/VB/bufferingtest.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <see cref="T:System.Drawing.BufferedGraphics" /> 类不是线程安全的。 当从单独的线程访问图形缓冲区，务必使用线程访问控制机制以防止冲突。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Drawing.BufferedGraphics" /> 对象使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Drawing.BufferedGraphics.Dispose%2A>完成之后使用<xref:System.Drawing.BufferedGraphics>对象。 <xref:System.Drawing.BufferedGraphics.Dispose%2A>方法使<xref:System.Drawing.BufferedGraphics>中不可用状态的对象。 在调用<xref:System.Drawing.BufferedGraphics.Dispose%2A>，必须释放对所有引用<xref:System.Drawing.BufferedGraphics>对象，以便垃圾回收器才能回收的内存，<xref:System.Drawing.BufferedGraphics>对象占用。 有关详细信息，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  始终调用<xref:System.Drawing.BufferedGraphics.Dispose%2A>在发布到最后一个引用之前<xref:System.Drawing.BufferedGraphics>对象。 否则，在垃圾回收器调用 <xref:System.Drawing.BufferedGraphics> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphics ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="Graphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics Graphics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics Graphics" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphics.Graphics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Graphics As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Graphics ^ Graphics { System::Drawing::Graphics ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取输出到图形缓冲区的 <see cref="T:System.Drawing.Graphics" /> 对象。</summary>
        <value>输出到图形缓冲区的 <see cref="T:System.Drawing.Graphics" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性提供<xref:System.Drawing.Graphics>绘制到此分配的图形缓冲区的对象<xref:System.Drawing.BufferedGraphics>对象。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Render">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>写入图形缓冲区的内容。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将图形缓冲区的内容写入默认设备。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将图形缓冲区的内容写入到通过调用指定的设备<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法<xref:System.Drawing.BufferedGraphicsContext>用于创建此<xref:System.Drawing.BufferedGraphics>对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (System.Drawing.Graphics target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(class System.Drawing.Graphics target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (target As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(System::Drawing::Graphics ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="target">一个 <see cref="T:System.Drawing.Graphics" /> 对象，要向其中写入图形缓冲区的内容。</param>
        <summary>将图形缓冲区的内容写入指定的 <see cref="T:System.Drawing.Graphics" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将图形缓冲区的内容写入指定<xref:System.Drawing.Graphics>对象。  
  
   
  
## Examples  
 下面的代码示例演示如何呈现到指定的图形缓冲区的内容<xref:System.Drawing.Graphics>对象。 此代码摘自更大的示例为提供<xref:System.Drawing.BufferedGraphics>类。  
  
 [!code-cpp[BufferingExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#5)]
 [!code-csharp[BufferingExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#5)]
 [!code-vb[BufferingExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (IntPtr targetDC);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(native int targetDC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (targetDC As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(IntPtr targetDC);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="targetDC">
          <see cref="T:System.IntPtr" /> 指向设备上下文，图形缓冲区的内容将被写入这个设备上下文。</param>
        <summary>将图形缓冲区的内容写入与指定的 <see cref="T:System.IntPtr" /> 句柄关联的设备上下文。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将图形缓冲区的内容写入与指定关联的设备上下文<xref:System.IntPtr>处理。  
  
   
  
## Examples  
 下面的代码示例演示如何呈现图形缓冲区的内容`grafx`到指定的设备上下文。 此代码摘自更大的示例为提供<xref:System.Drawing.BufferedGraphics>类。  
  
 [!code-cpp[BufferingExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#6)]
 [!code-csharp[BufferingExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#6)]
 [!code-vb[BufferingExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于访问非托管代码。 相关枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</permission>
        <altmember cref="T:System.IntPtr" />
      </Docs>
    </Member>
  </Members>
</Type>