<Type Name="BufferedGraphicsContext" FullName="System.Drawing.BufferedGraphicsContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6b73d9b8336c688dfdf0cd71df400a5168fb8699" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56786891" /></Metadata><TypeSignature Language="C#" Value="public sealed class BufferedGraphicsContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphicsContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphicsContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphicsContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphicsContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphicsContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供创建图形缓冲区的方法，该缓冲区可用于双缓冲。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.BufferedGraphicsContext>类可以实现自定义双缓冲图形。 使用双缓冲的图形可以减少或消除闪烁因重绘显示图面。  
  
> [!NOTE]
>  若要使用双缓冲的最简单方法是设置<xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>控件上使用的控件的样式标志<xref:System.Windows.Forms.Control.SetStyle%2A>方法。 设置<xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer>控件的控件样式标志将重定向通过默认图形缓冲区，控件的所有绘制工作，而无需任何其他代码。 此标志设置为`true`默认情况下。  
  
 <xref:System.Drawing.BufferedGraphicsContext>类提供了用于创建和配置图形缓冲区的方法。 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法创建<xref:System.Drawing.BufferedGraphics>，这是一个还提供了可用于写入到缓冲区和呈现其内容与输出设备的方法的图形缓冲区的包装器。  
  
 可以检索<xref:System.Drawing.BufferedGraphicsContext>当前的应用程序域，从静态<xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType>属性。 如动画图形密集型应用程序，可以创建专用<xref:System.Drawing.BufferedGraphicsContext>使用构造函数，但对于大多数应用程序<xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType>属性已足够。  
  
 图形缓冲的图形和自定义缓冲实现的详细信息，请参阅[双缓冲图形](~/docs/framework/winforms/advanced/double-buffered-graphics.md)和[如何：手动管理缓冲的图形](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何获取<xref:System.Drawing.BufferedGraphicsContext>当前应用程序域。 此代码是为提供一个更大示例的一部分<xref:System.Drawing.BufferedGraphics>类。  
  
 [!code-cpp[BufferingExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#1)]
 [!code-csharp[BufferingExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#1)]
 [!code-vb[BufferingExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Drawing.BufferedGraphics" />
    <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
    <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
    <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">双缓冲图形</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BufferedGraphicsContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Drawing.BufferedGraphicsContext" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如动画图形密集型应用程序，您有时可以提高性能使用的专用<xref:System.Drawing.BufferedGraphicsContext>而不是由提供的默认实例<xref:System.Drawing.BufferedGraphicsManager>。 这允许您创建和管理单独的图形缓冲区。  
  
> [!NOTE]
>  应始终调用<xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>使用专用完<xref:System.Drawing.BufferedGraphicsContext>。  
  
 有关专用的图形缓冲区的详细信息，请参阅[如何：手动管理缓冲的图形](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">双缓冲图形</related>
        <related type="Article" href="~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md">如何：手动管理缓冲图形</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Allocate">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建图形缓冲区。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (System.Drawing.Graphics targetGraphics, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(class System.Drawing.Graphics targetGraphics, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetGraphics As Graphics, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(System::Drawing::Graphics ^ targetGraphics, System::Drawing::Rectangle targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.Allocate : System.Drawing.Graphics * System.Drawing.Rectangle -&gt; System.Drawing.BufferedGraphics" Usage="bufferedGraphicsContext.Allocate (targetGraphics, targetRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetGraphics" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetGraphics"><see cref="T:System.Drawing.Graphics" /> 与新缓冲区的像素格式匹配。</param>
        <param name="targetRectangle">一个 <see cref="T:System.Drawing.Rectangle" />，指示要创建的缓冲区的大小。</param>
        <summary>使用指定的 <see cref="T:System.Drawing.Graphics" /> 的像素格式，创建指定大小的图形缓冲区。</summary>
        <returns>一个 <see cref="T:System.Drawing.BufferedGraphics" />，可用于绘制到指定尺寸的缓冲区。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当您调用<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法用矩形大小超出了值的<xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A>属性中，临时<xref:System.Drawing.BufferedGraphicsContext>创建以分配缓冲区，并提供临时上下文的缓冲区。 新<xref:System.Drawing.BufferedGraphicsContext>截然不同<xref:System.Drawing.BufferedGraphicsContext>应用程序域和它自动释放时<xref:System.Drawing.BufferedGraphics>返回的<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>释放方法。  
  
   
  
## Examples  
 下面的代码示例演示如何创建图形缓冲区使用<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法。 此代码是为提供一个更大示例的一部分<xref:System.Drawing.BufferedGraphics>类。  
  
 [!code-cpp[BufferingExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#3)]
 [!code-csharp[BufferingExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#3)]
 [!code-vb[BufferingExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Rectangle" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">双缓冲图形</related>
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (IntPtr targetDC, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(native int targetDC, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetDC As IntPtr, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(IntPtr targetDC, System::Drawing::Rectangle targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.Allocate : nativeint * System.Drawing.Rectangle -&gt; System.Drawing.BufferedGraphics" Usage="bufferedGraphicsContext.Allocate (targetDC, targetRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetDC"><see cref="T:System.IntPtr" /> 指向一个设备上下文，这个设备上下文与新缓冲区的象素格式匹配。</param>
        <param name="targetRectangle">一个 <see cref="T:System.Drawing.Rectangle" />，指示要创建的缓冲区的大小。</param>
        <summary>使用指定的 <see cref="T:System.Drawing.Graphics" /> 的像素格式，创建指定大小的图形缓冲区。</summary>
        <returns>一个 <see cref="T:System.Drawing.BufferedGraphics" />，可用于绘制到指定尺寸的缓冲区。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当您调用<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法用矩形大小超出了值的<xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A>属性中，临时<xref:System.Drawing.BufferedGraphicsContext>创建以分配缓冲区，并提供临时上下文的缓冲区。 新<xref:System.Drawing.BufferedGraphicsContext>截然不同<xref:System.Drawing.BufferedGraphicsContext>应用程序域和它自动释放时<xref:System.Drawing.BufferedGraphics>返回的<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>释放方法。  
  
   
  
## Examples  
 下面的代码示例演示如何创建图形缓冲区使用<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法。 此代码是为提供一个更大示例的一部分<xref:System.Drawing.BufferedGraphics>类。  
  
 [!code-cpp[BufferingExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#4)]
 [!code-csharp[BufferingExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#4)]
 [!code-vb[BufferingExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于访问非托管代码。 相关的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.IntPtr" />
        <altmember cref="T:System.Drawing.Rectangle" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">双缓冲图形</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphicsContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Drawing.BufferedGraphicsContext" /> 使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 后，应调用 <xref:System.Drawing.BufferedGraphicsContext>。 
  <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 方法使 <xref:System.Drawing.BufferedGraphicsContext> 处于不可用状态。 在调用<xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>，必须释放对所有引用<xref:System.Drawing.BufferedGraphicsContext>这样垃圾回收器才能收回内存的<xref:System.Drawing.BufferedGraphicsContext>占用。 有关详细信息，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)并[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  每次释放对 <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Drawing.BufferedGraphicsContext>。 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.Object.Finalize%2A>方法的<xref:System.Drawing.BufferedGraphicsContext>。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">双缓冲图形</related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphicsContext ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphicsContext.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberSignature Language="F#" Value="member this.Invalidate : unit -&gt; unit" Usage="bufferedGraphicsContext.Invalidate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果某个缓冲区已被分配但尚未释放，则释放当前的图形缓冲区。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只要它是免费的; 如果图形缓冲区正在使用中，它会将标记为可供使用否则，它将被释放立即。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">双缓冲图形</related>
      </Docs>
    </Member>
    <Member MemberName="MaximumBuffer">
      <MemberSignature Language="C#" Value="public System.Drawing.Size MaximumBuffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumBuffer As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size MaximumBuffer { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumBuffer : System.Drawing.Size with get, set" Usage="System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要使用的缓冲区的最大大小。</summary>
        <value>一个 <see cref="T:System.Drawing.Size" />，指示缓冲区尺寸的最大大小。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性允许您获取或设置应保留在内存中缓冲区的最大尺寸。 你可以分配任何大小的缓冲区，但尺寸大于任何缓冲<xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A>大小将为临时使用，然后被丢弃时<xref:System.Drawing.BufferedGraphics>释放对象。  
  
   
  
## Examples  
 下面的示例演示如何设置对缓冲区的最大大小<xref:System.Drawing.BufferedGraphicsContext>。 此代码是为提供一个更大示例的一部分<xref:System.Drawing.BufferedGraphics>类。  
  
 [!code-cpp[BufferingExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#2)]
 [!code-csharp[BufferingExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#2)]
 [!code-vb[BufferingExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">缓冲区大小的高度或宽度小于或等于零。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">允许用户对所有 windows 访问权限。 相关的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">双缓冲图形</related>
      </Docs>
    </Member>
  </Members>
</Type>