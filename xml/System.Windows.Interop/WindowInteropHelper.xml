<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="492213104b0f184cf0ecaffdd93a2b0d6ad1a860" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30657961" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>协助在 Windows Presentation Foundation (WPF) 和 Win32 代码之间进行互操作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类的成员允许调用方能够内部访问[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]HWND 和父 HWND 的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>。  通过这些成员执行适当的安全性检查。  
  
 当你需要基于其 HWND 更具体对象时，请使用此类。  
  
 示例方案是如果您需要承载[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中的对话框[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]应用程序。 初始化<xref:System.Windows.Interop.WindowInteropHelper>与[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]对话框中的窗口对象。 然后就可以获取[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]窗口的句柄 (HWND) 从<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>属性和指定的所有者[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]窗口<xref:System.Windows.Interop.WindowInteropHelper.Owner%2A>属性。 下面的代码示例演示如何使用<xref:System.Windows.Interop.WindowInteropHelper>承载时[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中的对话框[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]应用程序。  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 此类支持的另一种情况是获取<xref:System.Windows.Interop.HwndSource>对象[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<xref:System.Windows.Window>对象。 <xref:System.Windows.Interop.HwndSource>使你能够直接处理[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]消息通过<xref:System.Windows.Interop.HwndSource.AddHook%2A>方法。 通过使用<xref:System.Windows.Interop.HwndSource>和<xref:System.Windows.Interop.HwndSource.AddHook%2A>代替了<xref:System.Windows.Window>你仍可以处理没有等效项或处理中的消息[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]。 创建<xref:System.Windows.Interop.WindowInteropHelper>与<xref:System.Windows.Window>来源，然后调用<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>上<xref:System.Windows.Interop.WindowInteropHelper>以获得到的 HWND <xref:System.Windows.Interop.HwndSource>。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">一个 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 窗口对象。</param>
        <summary>为指定的 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 窗口初始化 <see cref="T:System.Windows.Interop.WindowInteropHelper" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 该窗口可以是一个对话框或已不适合托管的边界内的窗口[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]应用程序。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果尚未创建窗口的 HWND，则创建 HWND。</summary>
        <returns>表示 HWND 的 <see cref="T:System.IntPtr" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法如果你想要单独的窗口句柄 (HWND) 创建与实际显示托管的<xref:System.Windows.Window>。 当有可以完成其任务而无需显示一个窗口的自动化客户端时，这非常有用。  
  
 如果尚未创建本机窗口，此方法会创建本机的窗口中，设置<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>属性，并返回 HWND。 如果已创建了本机窗口中，则返回现有的本机窗口的句柄。  
  
 如果由于调用此方法创建本机窗口<xref:System.Windows.Window.SourceInitialized>引发事件。  
  
 查询<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>属性后的<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>调用方法返回现有的窗口句柄。 可视化树是否未附加到后窗口之前<xref:System.Windows.Window.Show%2A>调用方法。  
  
 调用<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法不止一次不会创建新的窗口句柄。 调用<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法时已通过调用创建了句柄<xref:System.Windows.Window.Show%2A>方法不会创建新的窗口句柄。 不存在句柄时，才会生成本机窗口时<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>调用方法。  
  
 窗口通过 p/invoke 的本机窗口 Api 设置的属性中托管的窗口 Api 不能出现。 例如，如果你将窗口设置为最顶层使用本机 MS_EX_TOPMOST 标志后的<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>调用方法时，<xref:System.Windows.Window.Topmost%2A>属性不一定反映本机的设置。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">若要创建和访问的窗口句柄。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建此 <see cref="T:System.Windows.Interop.WindowInteropHelper" /> 的 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 窗口的窗口句柄。</summary>
        <value>[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 窗口句柄 (HWND)。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">若要获取的窗口句柄。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 所有者窗口的句柄。</summary>
        <value>所有者窗口句柄 (HWND)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过设置此属性，重新设置父级 windows。 按原样 true 为常规[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]编程，请执行不重新设置父级已正在使用的 windows。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">要获取或设置此属性的值。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>