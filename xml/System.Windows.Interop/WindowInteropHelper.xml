<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WindowInteropHelper.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5492213104b0f184cf0ecaffdd93a2b0d6ad1a860.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">492213104b0f184cf0ecaffdd93a2b0d6ad1a860</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>Assists interoperation between Windows Presentation Foundation (WPF) and Win32 code.</source>
          <target state="translated">协助在 Windows Presentation Foundation (WPF) 和 Win32 代码之间进行互操作。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>Members of this class allows the caller to have internal access to the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> HWND and the parent HWND of a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">此类的成员允许调用方能够内部访问<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>HWND 和父 HWND 的<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>The proper security checks are performed by those members.</source>
          <target state="translated">通过这些成员执行适当的安全性检查。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>Use this class whenever you need a more specific object based on its HWND.</source>
          <target state="translated">当你需要基于其 HWND 更具体对象时，请使用此类。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>An example scenario is if you need to host a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
          <target state="translated">示例方案是如果您需要承载<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>中的对话框<ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>应用程序。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>Initialize the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> with a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> window object for the dialog box.</source>
          <target state="translated">初始化<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>与<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>对话框中的窗口对象。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>You can then get the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> window's handle (HWND) from the <ph id="ph2">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> property and specify the owner for the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> window with the <ph id="ph4">&lt;xref:System.Windows.Interop.WindowInteropHelper.Owner%2A&gt;</ph> property.</source>
          <target state="translated">然后就可以获取<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>窗口的句柄 (HWND) 从<ph id="ph2">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph>属性和指定的所有者<ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>窗口<ph id="ph4">&lt;xref:System.Windows.Interop.WindowInteropHelper.Owner%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>The following code example shows how to use <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> when hosting a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id="ph3">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>承载时<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>中的对话框<ph id="ph3">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>应用程序。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>Another scenario supported by this class is to obtain a <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object from a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> object.</source>
          <target state="translated">此类支持的另一种情况是获取<ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>对象<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph><ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> enables direct processing of <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> messages through the <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>使你能够直接处理<ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>消息通过<ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>By using <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> in place of a <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> you can still handle messages that have no equivalent or handling in <ph id="ph4">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">通过使用<ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph>代替了<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>你仍可以处理没有等效项或处理中的消息<ph id="ph4">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.WindowInteropHelper">
          <source>Create a <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> with the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> source, then call <ph id="ph3">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> on the <ph id="ph4">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> to get from HWND to <ph id="ph5">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
          <target state="translated">创建<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>与<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>来源，然后调用<ph id="ph3">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph>上<ph id="ph4">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>以获得到的 HWND <ph id="ph5">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> window object.</source>
          <target state="translated">一个 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 窗口对象。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.WindowInteropHelper" /&gt;</ph> class for a specified <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window.</source>
          <target state="translated">为指定的 <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 窗口初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.WindowInteropHelper" /&gt;</ph> 类的一个新实例。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)">
          <source>The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
          <target state="translated">该窗口可以是一个对话框或已不适合托管的边界内的窗口<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>应用程序。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Creates the HWND of the window if the HWND has not been created yet.</source>
          <target state="translated">如果尚未创建窗口的 HWND，则创建 HWND。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that represents the HWND.</source>
          <target state="translated">表示 HWND 的 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method when you want to separate window handle (HWND) creation from the actual showing of the managed <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph>方法如果你想要单独的窗口句柄 (HWND) 创建与实际显示托管的<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.</source>
          <target state="translated">当有可以完成其任务而无需显示一个窗口的自动化客户端时，这非常有用。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>If the native window has not yet been created, this method creates the native window, sets the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> property, and returns the HWND.</source>
          <target state="translated">如果尚未创建本机窗口，此方法会创建本机的窗口中，设置<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph>属性，并返回 HWND。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>If the native window has been created already, the handle of the existing native window is returned.</source>
          <target state="translated">如果已创建了本机窗口中，则返回现有的本机窗口的句柄。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>If the native window is created as a result of calling this method, the <ph id="ph1">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> event is raised.</source>
          <target state="translated">如果由于调用此方法创建本机窗口<ph id="ph1">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>引发事件。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Querying the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> property after the <ph id="ph2">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method is called returns the existing window handle.</source>
          <target state="translated">查询<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph>属性后的<ph id="ph2">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph>调用方法返回现有的窗口句柄。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>The visual tree is not attached to the window until after the <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> method is called.</source>
          <target state="translated">可视化树是否未附加到后窗口之前<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>调用方法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method more than one time does not create new window handles.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph>方法不止一次不会创建新的窗口句柄。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method when the handle has already been created by a call to the <ph id="ph2">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> method does not create a new window handle.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph>方法时已通过调用创建了句柄<ph id="ph2">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>方法不会创建新的窗口句柄。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>A native window is only created when no handle exists when the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method is called.</source>
          <target state="translated">不存在句柄时，才会生成本机窗口时<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph>调用方法。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs.</source>
          <target state="translated">窗口通过 p/invoke 的本机窗口 Api 设置的属性中托管的窗口 Api 不能出现。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is not guaranteed to reflect the native setting.</source>
          <target state="translated">例如，如果你将窗口设置为最顶层使用本机 MS_EX_TOPMOST 标志后的<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph>调用方法时，<ph id="ph2">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>属性不一定反映本机的设置。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>to create and access a window handle.</source>
          <target state="translated">若要创建和访问的窗口句柄。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.WindowInteropHelper.Handle">
          <source>Gets the window handle for a <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window that is used to create this <ph id="ph2">&lt;see cref="T:System.Windows.Interop.WindowInteropHelper" /&gt;</ph>.</source>
          <target state="translated">获取用于创建此 <ph id="ph2">&lt;see cref="T:System.Windows.Interop.WindowInteropHelper" /&gt;</ph> 的 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 窗口的窗口句柄。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Handle">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window handle (HWND).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 窗口句柄 (HWND)。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Handle">
          <source>to obtain a window handle.</source>
          <target state="translated">若要获取的窗口句柄。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Handle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.WindowInteropHelper.Owner">
          <source>Gets or sets the handle of the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> owner window.</source>
          <target state="translated">获取或设置 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 所有者窗口的句柄。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Owner">
          <source>The owner window handle (HWND).</source>
          <target state="translated">所有者窗口句柄 (HWND)。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Owner">
          <source>You can reparent windows by setting this property.</source>
          <target state="translated">可以通过设置此属性，重新设置父级 windows。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Owner">
          <source>As is true for general <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> programming, do not reparent windows that are already in use.</source>
          <target state="translated">按原样 true 为常规<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>编程，请执行不重新设置父级已正在使用的 windows。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Owner">
          <source>to get or set this property value.</source>
          <target state="translated">要获取或设置此属性的值。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.WindowInteropHelper.Owner">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>