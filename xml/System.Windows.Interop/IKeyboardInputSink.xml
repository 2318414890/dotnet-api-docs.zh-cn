<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IKeyboardInputSink.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53120cf880fee3bfbee4ccce673b07364bc06400a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3120cf880fee3bfbee4ccce673b07364bc06400a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Interop.IKeyboardInputSink">
          <source>Provides a keyboard sink for components that manages tabbing, accelerators, and mnemonics across interop boundaries and between HWNDs.</source>
          <target state="translated">为跨互操作边界和在 HWND 之间管理 Tab 键次序、快捷键、助记键的组件提供键盘接收器。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.Interop.IKeyboardInputSink">
          <source>This interface implements keyboard message management in WPF-Win32 interoperation scenarios.</source>
          <target state="translated">此接口实现 WPF-Win32 互操作方案中的键盘消息管理。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.IKeyboardInputSink">
          <source>A keyboard sink handles input from particular subsets of the overall keyboard input model for <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>, and enables some keyboard input to be processed and directed to HWNDs other than the one with current keyboard focus.</source>
          <target state="translated">键盘接收器处理的总体键盘输入模型的特定子集从输入<ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph>和<ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>，并使某些键盘输入进行处理和不具有当前键盘焦点是定向到 Hwnd。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.IKeyboardInputSink">
          <source>If your component contains other components, and maintains a tab order, your component must also implement <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSite&gt;</ph> and keep track of which component has focus.</source>
          <target state="translated">如果组件包含其他组件，并维护一个 tab 键顺序，你的组件还必须实现<ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSite&gt;</ph>和跟踪的哪个组件具有焦点。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.IKeyboardInputSink">
          <source>For a discussion of the input architecture specifically implemented for <ph id="ph1">[!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)]</ph> interop, see <bpt id="p1">[</bpt>Windows Forms and WPF Interoperability Input Architecture<ept id="p1">](~/docs/framework/wpf/advanced/windows-forms-and-wpf-interoperability-input-architecture.md)</ept>.</source>
          <target state="translated">有关专门为实现该输入体系结构的讨论<ph id="ph1">[!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)]</ph>互操作，请参阅<bpt id="p1">[</bpt>Windows 窗体和 WPF 互操作性输入体系结构<ept id="p1">](~/docs/framework/wpf/advanced/windows-forms-and-wpf-interoperability-input-architecture.md)</ept>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.IKeyboardInputSink">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> each implement the <ph id="ph3">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface, through explicit interface definitions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 和<ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>每个实现<ph id="ph3">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph>接口，通过显式接口定义。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.IKeyboardInputSink">
          <source>The explicit definitions supply default behaviors, and can also be accessed if necessary through an <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface cast of <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>.</source>
          <target state="translated">显式定义提供默认的行为，并通过必要时还可以访问<ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph>接口强制转换的<ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
          <source>Gets a value that indicates whether the sink or one of its contained components has focus.</source>
          <target state="translated">获取一个值，该值指示接收器或其所包含的组件之一是否具有焦点。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the sink or one of its contained components has focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果接收器或其所包含的组件之一具有焦点，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
          <source>This method is necessary for forwarding <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph> calls to child components with focus from within the <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph> implementation.</source>
          <target state="translated">此方法是必需的要转发<ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph>中对具有焦点的子组件的调用<ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
          <source>Call <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin%2A&gt;</ph> recursively until you reach the level of specific focus and forward <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph> there.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin%2A&gt;</ph>以递归方式直到达到的特定焦点和转发级别<ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph>存在。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
          <source>Gets or sets a reference to the component's container's <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> interface.</source>
          <target state="translated">获取或设置对组件容器的 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> 接口的引用。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
          <source>A reference to the container's <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> interface.</source>
          <target state="translated">对容器的 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> 接口的引用。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
          <source>This property should initially be set to <ph id="ph1">`null`</ph>.</source>
          <target state="translated">最初，此属性应设置为<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
          <source>Any container that adds the sink to its components list will set <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite%2A&gt;</ph> before any other methods are called, and it can be set multiple times after that.</source>
          <target state="translated">任何接收器添加到其组件列表的容器将设置<ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite%2A&gt;</ph>之前调用任何其他方法，并且它可以在此之后设置多次。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
          <source>You should set the property to <ph id="ph1">`null`</ph> again before disposal.</source>
          <target state="translated">应将属性设置为<ph id="ph1">`null`</ph>再次之前处置。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>The message for the mnemonic and associated data.</source>
          <target state="translated">助记键和关联数据的消息。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Do not modify this message structure.</source>
          <target state="translated">请勿修改此消息结构。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>It is passed by reference for performance reasons only.</source>
          <target state="translated">仅由于性能原因，通过引用来传递此消息。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Modifier keys.</source>
          <target state="translated">修改键。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Called when one of the mnemonics (access keys) for this sink is invoked.</source>
          <target state="translated">调用此接收器的助记键（访问键）之一时调用。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was handled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果消息已处理，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)]</ph> message must be WM_CHAR, WM_SYSCHAR, WM_DEADCHAR or WM_SYSDEADCHAR.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)]</ph>消息必须 WM_CHAR、 WM_SYSCHAR、 WM_DEADCHAR 或 WM_SYSDEADCHAR。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>If the component has contained components, the message must be passed in your implementation by calling each contained component's <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A&gt;</ph> method.</source>
          <target state="translated">如果该组件已包含其他组件，必须在实现通过调用每个包含组件的传递消息<ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>An interface that returns <ph id="ph1">`true`</ph> from <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph> will not call <ph id="ph3">&lt;xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A&gt;</ph>.</source>
          <target state="translated">返回一个接口<ph id="ph1">`true`</ph>从<ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph>将不会调用<ph id="ph3">&lt;xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Implementations can choose to perform all specific key combination handling in <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateChar%2A&gt;</ph>.and bypass <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A&gt;</ph>.</source>
          <target state="translated">实现可以选择来执行所有处理中的特定组合键<ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateChar%2A&gt;</ph>并跳过<ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSink" /&gt;</ph> sink of the contained component.</source>
          <target state="translated">所包含组件的 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSink" /&gt;</ph> 接收器。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
          <source>Registers the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSink" /&gt;</ph> interface of a contained component.</source>
          <target state="translated">注册所包含组件的 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSink" /&gt;</ph> 接口。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> site of the contained component.</source>
          <target state="translated">所包含组件的 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> 站点。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
          <source>Components with child components should maintain internal collections of sites and use this method to add a new sink and return the new site.</source>
          <target state="translated">组件和子组件应保留的站点的内部集合，并使用此方法来添加新的接收器，并返回新的站点。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
          <source>You only need to maintain the site collection, because the sink can be obtained from the site.</source>
          <target state="translated">你只需维护站点的集合，因为可以从网站获取接收器。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
          <source>Specifies whether focus should be set to the first or the last tab stop.</source>
          <target state="translated">指定是将焦点设置到第一个制表位，还是设置到最后一个制表位。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
          <source>Sets focus on either the first tab stop or the last tab stop of the sink.</source>
          <target state="translated">在接收器的第一个制表位或最后一个制表位上设置焦点。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the focus has been set as requested; <ph id="ph2">&lt;see langword="false" /&gt;</ph>, if there are no tab stops.</source>
          <target state="translated">如果已按要求对焦点进行了设置，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果没有制表位，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.FocusNavigationDirection.First&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.FocusNavigationDirection.Last&gt;</ph> are the only relevant values that should be passed to this method in the <ph id="ph3">&lt;xref:System.Windows.Input.TraversalRequest&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.FocusNavigationDirection.First&gt;</ph> 和<ph id="ph2">&lt;xref:System.Windows.Input.FocusNavigationDirection.Last&gt;</ph>是应传递给此方法的仅相关值<ph id="ph3">&lt;xref:System.Windows.Input.TraversalRequest&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>The message and associated data.</source>
          <target state="translated">消息及关联数据。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Do not modify this structure.</source>
          <target state="translated">请勿修改此结构。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>It is passed by reference for performance reasons only.</source>
          <target state="translated">仅由于性能原因，通过引用来传递此消息。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Modifier keys.</source>
          <target state="translated">修改键。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Processes keyboard input at the keydown message level.</source>
          <target state="translated">在 keydown 消息级处理键盘输入。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was handled by the method implementation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果方法实现对该消息进行了处理，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>The message must either be WM_KEYDOWN or WM_SYSKEYDOWN.</source>
          <target state="translated">消息必须 WM_KEYDOWN 或 WM_SYSKEYDOWN。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>If the component is unable to handle the input translations and has child components that might have translations, it typically calls <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph> method on the child component that holds the current focus before returning a result.</source>
          <target state="translated">如果组件无法处理输入的翻译，并且具有可能包含转换的子组件，它通常会调用<ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph>上返回结果之前将保留的当前焦点的子组件的方法。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>If the message cannot be handled immediately, you can re-dispatch it from within the <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph> implementation if necessary, and then return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">如果无法立即处理消息，你可以重新分发它从<ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph>实现，如果有必要，，然后返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>A primary scenario for translating accelerator keys is handling the VK_TAB keydown message and determining whether to set focus within the component, to call <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A&gt;</ph> to a child component, or to call <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A&gt;</ph> on the parent site because the tab sequence has reached the beginning or end bounds.</source>
          <target state="translated">用于转换快捷键的主要方案是处理 VK_TAB keydown 消息和确定是否要将焦点置于在组件，以调用<ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A&gt;</ph>到子组件时，或要调用<ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A&gt;</ph>父站点上因为 tab 键序列已达到的开始处或结束边界。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Certain components may choose to not handle the tab key in this fashion.</source>
          <target state="translated">某些组件可以选择不处理 tab 键以这种方式。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>The message and associated data.</source>
          <target state="translated">消息及关联数据。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Do not modify this structure.</source>
          <target state="translated">请勿修改此结构。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>It is passed by reference for performance reasons only.</source>
          <target state="translated">仅由于性能原因，通过引用来传递此消息。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Modifier keys.</source>
          <target state="translated">修改键。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Processes WM_CHAR, WM_SYSCHAR, WM_DEADCHAR, and WM_SYSDEADCHAR input messages before <ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph> is called.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph> 之前处理 WM_CHAR、WM_SYSCHAR、WM_DEADCHAR 和 WM_SYSDEADCHAR 输入消息。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was processed and <ph id="ph2">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph> should not be called; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果消息已处理并且不应调用 <ph id="ph2">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph>，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>If you implement this method to return <ph id="ph1">`true`</ph>, the input architecture will not call <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A&gt;</ph> for that key message.</source>
          <target state="translated">如果你实现此方法以返回<ph id="ph1">`true`</ph>，输入体系结构将不会调用<ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A&gt;</ph>该密钥的消息。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>