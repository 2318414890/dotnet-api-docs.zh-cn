<Type Name="ClientScriptManager" FullName="System.Web.UI.ClientScriptManager">
  <TypeSignature Language="C#" Value="public sealed class ClientScriptManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClientScriptManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ClientScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClientScriptManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientScriptManager sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1068c-101">在 Web 应用程序中定义用于管理客户端脚本的方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-101">Defines methods for managing client scripts in Web applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-102"><xref:System.Web.UI.ClientScriptManager>类用于管理客户端脚本并将它们添加到 Web 应用程序。</span><span class="sxs-lookup"><span data-stu-id="1068c-102">The <xref:System.Web.UI.ClientScriptManager> class is used to manage client scripts and add them to Web applications.</span></span> <span data-ttu-id="1068c-103">你可以获取对引用<xref:System.Web.UI.ClientScriptManager>类<xref:System.Web.UI.Page.ClientScript%2A>属性<xref:System.Web.UI.Page>对象。</span><span class="sxs-lookup"><span data-stu-id="1068c-103">You can get a reference to the <xref:System.Web.UI.ClientScriptManager> class from the <xref:System.Web.UI.Page.ClientScript%2A> property of the <xref:System.Web.UI.Page> object.</span></span>  
  
 <span data-ttu-id="1068c-104">以声明方式你可以包括脚本页的 HTML 标记中，从而将客户端脚本添加到网页。</span><span class="sxs-lookup"><span data-stu-id="1068c-104">You can add a client script to a Web page declaratively by including the script in the HTML markup of the page.</span></span> <span data-ttu-id="1068c-105">但是，有一些情形时动态添加客户端脚本需要如此。</span><span class="sxs-lookup"><span data-stu-id="1068c-105">However, there are situations when adding client script dynamically is needed.</span></span> <span data-ttu-id="1068c-106">若要动态添加脚本时，使用<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法，<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>方法，<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法，或<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>方法，具体取决于你何时以及如何想要添加脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-106">To add a script dynamically, use the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, or the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method, depending on when and how you want to add the script.</span></span> <span data-ttu-id="1068c-107">有关详细信息，请参阅[如何： 添加客户端脚本动态添加到 ASP.NET Web 页](http://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666)。</span><span class="sxs-lookup"><span data-stu-id="1068c-107">For more information, see [How to: Add Client Script Dynamically to ASP.NET Web Pages](http://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666).</span></span>  
  
 <span data-ttu-id="1068c-108"><xref:System.Web.UI.ClientScriptManager>类将唯一标识按的键的脚本<xref:System.String>和<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="1068c-108">The <xref:System.Web.UI.ClientScriptManager> class uniquely identifies scripts by a key <xref:System.String> and a <xref:System.Type>.</span></span> <span data-ttu-id="1068c-109">具有相同键和类型的脚本被视为重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-109">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="1068c-110">使用脚本类型可帮助避免混淆类似脚本从可能用在本页中的其他用户控件。</span><span class="sxs-lookup"><span data-stu-id="1068c-110">Using the script type helps to avoid confusing similar scripts from different user controls that might be in use on the page.</span></span>  
  
 <span data-ttu-id="1068c-111"><xref:System.Web.UI.ClientScriptManager>类可以用于调用客户端回调在情况下，需要从客户端运行服务器代码，而不执行回发时。</span><span class="sxs-lookup"><span data-stu-id="1068c-111">The <xref:System.Web.UI.ClientScriptManager> class can be used to invoke client callbacks in situations when it is desirable to run server code from the client without performing a postback.</span></span> <span data-ttu-id="1068c-112">这称为执行的带回调到服务器。</span><span class="sxs-lookup"><span data-stu-id="1068c-112">This is referred to as performing an out-of-band callback to the server.</span></span> <span data-ttu-id="1068c-113">在客户端回调中，客户端脚本函数将的异步请求发送到 ASP.NET 网页。</span><span class="sxs-lookup"><span data-stu-id="1068c-113">In a client callback, a client script function sends an asynchronous request to an ASP.NET Web page.</span></span> <span data-ttu-id="1068c-114">网页上运行其正常的生命周期的修改的版本来处理回调。</span><span class="sxs-lookup"><span data-stu-id="1068c-114">The Web page runs a modified version of its normal life cycle to process the callback.</span></span> <span data-ttu-id="1068c-115">使用<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法来获取对客户端函数的引用，在调用时，启动到服务器事件的客户端回调。</span><span class="sxs-lookup"><span data-stu-id="1068c-115">Use the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method to obtain a reference to a client function that, when invoked, initiates a client callback to a server event.</span></span> <span data-ttu-id="1068c-116">有关详细信息，请参阅[实现客户端回调而无需回发](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)。</span><span class="sxs-lookup"><span data-stu-id="1068c-116">For more information, see [Implementing Client Callbacks Without Postbacks](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1068c-117">脚本回调中不支持文档对象模型 (DOM) 的低版本浏览器将不工作，并且它们要求客户端上启用了 ECMAScript。</span><span class="sxs-lookup"><span data-stu-id="1068c-117">Script callbacks will not work in older browsers that do not support the Document Object Model (DOM), and they require that ECMAScript is enabled on the client.</span></span> <span data-ttu-id="1068c-118">若要检查浏览器是否支持回调，使用<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>属性，它是可通过访问<xref:System.Web.HttpRequest.Browser%2A>属性的内部函数 ASP.NET<xref:System.Web.HttpContext.Request%2A>对象。</span><span class="sxs-lookup"><span data-stu-id="1068c-118">To check if the browser supports callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property, which is accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the ASP.NET intrinsic <xref:System.Web.HttpContext.Request%2A> object.</span></span>  
  
 <span data-ttu-id="1068c-119">使用<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法和<xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A>方法用来定义客户端回发事件。</span><span class="sxs-lookup"><span data-stu-id="1068c-119">Use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method and the <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> method to define a client postback event.</span></span> <span data-ttu-id="1068c-120">这些方法启用客户端脚本功能，在调用，将导致服务器的回发到页。</span><span class="sxs-lookup"><span data-stu-id="1068c-120">These methods enable client script functions, when invoked, to cause the server to post back to the page.</span></span> <span data-ttu-id="1068c-121">在于 Web 页面完成处理客户端回发事件正常生命周期，客户端回发事件是不同的客户端回调。</span><span class="sxs-lookup"><span data-stu-id="1068c-121">A client postback event is different from a client callback in that the Web page completes a normal life cycle to process the client postback event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1068c-122">如果你使用<xref:System.Web.UI.WebControls.Button>控件和<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>属性设置为`false`，则你可以使用<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法以返回客户端回发事件<xref:System.Web.UI.WebControls.Button>控件。</span><span class="sxs-lookup"><span data-stu-id="1068c-122">If you are using a <xref:System.Web.UI.WebControls.Button> control and the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is set to `false`, then you can use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method to return the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 <span data-ttu-id="1068c-123"><xref:System.Web.UI.WebControls.Button.OnClientClick%2A>属性<xref:System.Web.UI.WebControls.Button>控件，<xref:System.Web.UI.WebControls.ImageButton>控件，和<xref:System.Web.UI.WebControls.LinkButton>控件可以用于运行客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-123">The <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> property of the <xref:System.Web.UI.WebControls.Button> control, <xref:System.Web.UI.WebControls.ImageButton> control, and <xref:System.Web.UI.WebControls.LinkButton> control can be used to run client script.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-124">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法<xref:System.Web.UI.ClientScriptManager>类。</span><span class="sxs-lookup"><span data-stu-id="1068c-124">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the <xref:System.Web.UI.ClientScriptManager> class.</span></span> <span data-ttu-id="1068c-125">页中定义两个客户端脚本： `PopupScript`，加载页面后，它会显示一条警告消息和`ButtonClickScript`，后者定义一个 HTML 按钮的客户端处理`onClick`事件。</span><span class="sxs-lookup"><span data-stu-id="1068c-125">Two client scripts are defined in the page: `PopupScript`, which displays an alert message when the page is loaded, and `ButtonClickScript`, which defines a client handler for an HTML button's `onClick` event.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCallbackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1068c-126">获取一个对客户端函数的引用；调用该函数时，将启动一个对服务器事件的客户端回调。</span><span class="sxs-lookup"><span data-stu-id="1068c-126">Obtains a reference to a client function that, when invoked, initiates a client call back to a server event.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="1068c-127">处理客户端回调的服务器 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-127">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="1068c-128">该控件必须实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口并提供 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-128">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="1068c-129">从客户端脚本传递给服务器的一个参数</span><span class="sxs-lookup"><span data-stu-id="1068c-129">An argument passed from the client script to the server</span></span>  
  
 <span data-ttu-id="1068c-130"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-130"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="1068c-131">一个客户端事件处理程序的名称，该处理程序接收成功的服务器事件的结果。</span><span class="sxs-lookup"><span data-stu-id="1068c-131">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="1068c-132">启动回调之前在客户端计算的客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-132">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="1068c-133">脚本的结果传回客户端事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1068c-133">The result of the script is passed back to the client event handler.</span></span></param>
        <summary><span data-ttu-id="1068c-134">获取一个对客户端函数的引用；调用该函数时，将启动一个对服务器事件的客户端回调。</span><span class="sxs-lookup"><span data-stu-id="1068c-134">Obtains a reference to a client function that, when invoked, initiates a client call back to a server event.</span></span> <span data-ttu-id="1068c-135">此重载方法的客户端函数包含指定的控件、参数、客户端脚本和上下文。</span><span class="sxs-lookup"><span data-stu-id="1068c-135">The client function for this overloaded method includes a specified control, argument, client script, and context.</span></span></summary>
        <returns><span data-ttu-id="1068c-136">调用客户端回调的客户端函数的名称。</span><span class="sxs-lookup"><span data-stu-id="1068c-136">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-137"><xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29>方法执行的带回调到是页面的常规生命周期的修改的版本的服务器。</span><span class="sxs-lookup"><span data-stu-id="1068c-137">The <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> method performs an out-of-band callback to the server that is a modified version of a page's normal life cycle.</span></span> <span data-ttu-id="1068c-138">有关详细信息，请参阅[实现客户端回调而无需回发](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)。</span><span class="sxs-lookup"><span data-stu-id="1068c-138">For more information, see [Implementing Client Callbacks Without Postbacks](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1068c-139">Microsoft Internet Explorer （版本 5.0 或更高版本） 浏览器时，脚本回调机制通过 Microsoft.XmlHttp COM 对象实现，并要求设置为运行 ActiveX 控件的浏览器。</span><span class="sxs-lookup"><span data-stu-id="1068c-139">When the browser is Microsoft Internet Explorer (version 5.0 or later), the script callback mechanism is implemented through the Microsoft.XmlHttp COM object and requires the browser to be set to run ActiveX controls.</span></span> <span data-ttu-id="1068c-140">对于其他浏览器，将使用 XMLHttpRequest 使用浏览器的本地文档对象模型 (DOM)。</span><span class="sxs-lookup"><span data-stu-id="1068c-140">For other browsers, an XMLHttpRequest using the browser's local Document Object Model (DOM) is used.</span></span> <span data-ttu-id="1068c-141">若要检查浏览器是否支持客户端回调，请使用<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="1068c-141">To check whether a browser supports client callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property.</span></span> <span data-ttu-id="1068c-142">若要检查浏览器是否支持通过 HTTP XML，请使用<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="1068c-142">To check whether a browser supports XML over HTTP, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> property.</span></span> <span data-ttu-id="1068c-143">两个属性都可通过访问<xref:System.Web.HttpRequest.Browser%2A>属性的内部函数 ASP.NET<xref:System.Web.HttpContext.Request%2A>对象。</span><span class="sxs-lookup"><span data-stu-id="1068c-143">Both properties are accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the intrinsic ASP.NET <xref:System.Web.HttpContext.Request%2A> object.</span></span>  
  
 <span data-ttu-id="1068c-144"><xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>重载<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法执行同步通过 HTTP 使用 XML 的回调。</span><span class="sxs-lookup"><span data-stu-id="1068c-144">The <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method performs a callback synchronously using XML over HTTP.</span></span> <span data-ttu-id="1068c-145">发送数据时同步在回调方案中，同步的回调将立即返回，不会阻止浏览器。</span><span class="sxs-lookup"><span data-stu-id="1068c-145">When sending data synchronously in a callback scenario, synchronous callbacks return immediately and do not block the browser.</span></span> <span data-ttu-id="1068c-146">没有两个同步回调可以在浏览器中同时执行。</span><span class="sxs-lookup"><span data-stu-id="1068c-146">No two synchronous callbacks callback can execute at the same time in the browser.</span></span> <span data-ttu-id="1068c-147">如果其中一个当前挂起时激发的第二个同步回调，第二个同步回调取消第一个，并仅在第二个回调将返回。</span><span class="sxs-lookup"><span data-stu-id="1068c-147">If a second synchronous callback is fired while one is currently pending, the second synchronous callback cancels the first and only the second callback will return.</span></span>  
  
 <span data-ttu-id="1068c-148">若要以异步方式发送数据，请使用采用的重载之一`useAsync`参数，这是一个布尔值，该值控制此行为。</span><span class="sxs-lookup"><span data-stu-id="1068c-148">To send data asynchronously, use one of the overloads that takes the `useAsync` parameter, which is a Boolean value controlling this behavior.</span></span> <span data-ttu-id="1068c-149">在异步方案中，你可以有多个挂起回调;但是，在其中它们返回的顺序不保证按照启动时的顺序相匹配。</span><span class="sxs-lookup"><span data-stu-id="1068c-149">In the asynchronous scenario you can have multiple pending callbacks; however, the order in which they return is not guaranteed to match the order in which they were initiated.</span></span>  
  
 <span data-ttu-id="1068c-150">此外，此重载<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法指定要处理的情况生成的错误条件的任何客户端函数<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-150">Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method specifies no client function to handle the case of an error condition generated by the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method.</span></span> <span data-ttu-id="1068c-151">若要指定客户端错误回调处理程序，请使用采用的重载之一`clientErrorCallback`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-151">To specify a client error callback handler, use one of the overloads that takes the `clientErrorCallback` parameter.</span></span>  
  
 <span data-ttu-id="1068c-152"><xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29>方法采用一个可选的字符串`argument`参数并返回一个字符串。</span><span class="sxs-lookup"><span data-stu-id="1068c-152">The <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> method takes an optional string `argument` parameter and returns a string.</span></span> <span data-ttu-id="1068c-153">若要在传递或接收多个值，串联输入中的值或分别返回字符串。</span><span class="sxs-lookup"><span data-stu-id="1068c-153">To pass in or to receive multiple values, concatenate values in the input or return string, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1068c-154">避免使用页或控件的属性，则需要在脚本回调操作时更新的实现中的视图状态。</span><span class="sxs-lookup"><span data-stu-id="1068c-154">Avoid using the view state in the implementation of page or control properties that need be updated during script callback operations.</span></span> <span data-ttu-id="1068c-155">如果属性都得以页请求，你可以使用会话状态。</span><span class="sxs-lookup"><span data-stu-id="1068c-155">If the properties are to survive page requests, you can use session state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-156">下面的代码示例演示如何使用两个重载<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>递增整数的客户端回调方案中的方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-156">The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.</span></span>  
  
 <span data-ttu-id="1068c-157">两个回调机制都会显示出来;它们之间的区别是使用`context`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-157">Two callback mechanisms are shown; the difference between them is the use of the `context` parameter.</span></span> <span data-ttu-id="1068c-158">A`ReceiveServerData1`提供客户端回调函数则使用`context`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-158">A `ReceiveServerData1` client callback function is provided using the `context` parameter.</span></span> <span data-ttu-id="1068c-159">与此相反，`ReceiveServerData2`客户端回调函数定义中`<script>`页上的块。</span><span class="sxs-lookup"><span data-stu-id="1068c-159">In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page.</span></span> <span data-ttu-id="1068c-160">A<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>方法是服务器处理程序传递给它的值增加与<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>方法返回作为字符串递增的值。</span><span class="sxs-lookup"><span data-stu-id="1068c-160">A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string.</span></span> <span data-ttu-id="1068c-161">如果<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>方法返回一个错误，则`ProcessCallBackError`调用客户端函数。</span><span class="sxs-lookup"><span data-stu-id="1068c-161">If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the `ProcessCallBackError` client function is called.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-162">指定的 <see cref="T:System.Web.UI.Control" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-162">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1068c-163">指定的 <see cref="T:System.Web.UI.Control" /> 未实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="1068c-163">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</span></span></exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, bool useAsync);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="1068c-164">处理客户端回调的服务器 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-164">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="1068c-165">该控件必须实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口并提供 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-165">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="1068c-166">从客户端脚本传递给服务器的一个参数</span><span class="sxs-lookup"><span data-stu-id="1068c-166">An argument passed from the client script to the server</span></span>  
  
 <span data-ttu-id="1068c-167"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-167"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="1068c-168">一个客户端事件处理程序的名称，该处理程序接收成功的服务器事件的结果。</span><span class="sxs-lookup"><span data-stu-id="1068c-168">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="1068c-169">启动回调之前在客户端计算的客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-169">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="1068c-170">脚本的结果传回客户端事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1068c-170">The result of the script is passed back to the client event handler.</span></span></param>
        <param name="useAsync">
          <span data-ttu-id="1068c-171"><see langword="true" /> 表示异步执行回调；<see langword="false" /> 表示同步执行回调。</span><span class="sxs-lookup"><span data-stu-id="1068c-171"><see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</span></span></param>
        <summary><span data-ttu-id="1068c-172">获取一个对客户端函数的引用；调用该函数时，将启动一个对服务器事件的客户端回调。</span><span class="sxs-lookup"><span data-stu-id="1068c-172">Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</span></span> <span data-ttu-id="1068c-173">此重载方法的客户端函数包含指定的控件、参数、客户端脚本、上下文和布尔值。</span><span class="sxs-lookup"><span data-stu-id="1068c-173">The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.</span></span></summary>
        <returns><span data-ttu-id="1068c-174">调用客户端回调的客户端函数的名称。</span><span class="sxs-lookup"><span data-stu-id="1068c-174">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-175">此重载<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法需要`useAsync`参数，它允许你通过将该值设置为以异步方式执行客户端回调`true`。</span><span class="sxs-lookup"><span data-stu-id="1068c-175">This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` parameter, which allows you to perform the client callback asynchronously by setting the value to `true`.</span></span> <span data-ttu-id="1068c-176">不需要此方法的重载版本`useAsync`参数的值设置为`false`默认情况下。</span><span class="sxs-lookup"><span data-stu-id="1068c-176">The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.</span></span>  
  
 <span data-ttu-id="1068c-177">此方法的详细信息，请参阅备注的重载<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-177">For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-178">指定的 <see cref="T:System.Web.UI.Control" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-178">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1068c-179">指定的 <see cref="T:System.Web.UI.Control" /> 未实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="1068c-179">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</span></span></exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (target As String, argument As String, clientCallback As String, context As String, clientErrorCallback As String, useAsync As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::String ^ target, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="1068c-180">处理客户端回调的服务器 <see cref="T:System.Web.UI.Control" /> 的名称。</span><span class="sxs-lookup"><span data-stu-id="1068c-180">The name of a server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="1068c-181">该控件必须实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口并提供 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-181">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="1068c-182">从客户端脚本传递给服务器的一个参数</span><span class="sxs-lookup"><span data-stu-id="1068c-182">An argument passed from the client script to the server</span></span>  
  
 <span data-ttu-id="1068c-183"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-183"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="1068c-184">一个客户端事件处理程序的名称，该处理程序接收成功的服务器事件的结果。</span><span class="sxs-lookup"><span data-stu-id="1068c-184">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="1068c-185">启动回调之前在客户端计算的客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-185">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="1068c-186">脚本的结果传回客户端事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1068c-186">The result of the script is passed back to the client event handler.</span></span></param>
        <param name="clientErrorCallback"><span data-ttu-id="1068c-187">客户端事件处理程序的名称，该处理程序在服务器端事件处理程序出现错误时接收结果。</span><span class="sxs-lookup"><span data-stu-id="1068c-187">The name of the client event handler that receives the result when an error occurs in the server event handler.</span></span></param>
        <param name="useAsync">
          <span data-ttu-id="1068c-188"><see langword="true" /> 表示异步执行回调；<see langword="false" /> 表示同步执行回调。</span><span class="sxs-lookup"><span data-stu-id="1068c-188"><see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</span></span></param>
        <summary><span data-ttu-id="1068c-189">获取一个对客户端函数的引用；调用该函数时，将启动一个对服务器事件的客户端回调。</span><span class="sxs-lookup"><span data-stu-id="1068c-189">Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</span></span> <span data-ttu-id="1068c-190">此重载方法的客户端函数包含指定的目标、参数、客户端脚本、上下文、错误处理程序和布尔值。</span><span class="sxs-lookup"><span data-stu-id="1068c-190">The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.</span></span></summary>
        <returns><span data-ttu-id="1068c-191">调用客户端回调的客户端函数的名称。</span><span class="sxs-lookup"><span data-stu-id="1068c-191">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-192">此重载<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法采用`target`字符串参数而不是<xref:System.Web.UI.Control>参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-192">This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method takes a `target` string parameter instead of a <xref:System.Web.UI.Control> parameter.</span></span> <span data-ttu-id="1068c-193">当您希望该回调返回以外的一个字符串，包含使用此重载<xref:System.Web.UI.Control.UniqueID%2A>的控件。</span><span class="sxs-lookup"><span data-stu-id="1068c-193">Use this overload when you want the callback to go back to something other than a string containing the <xref:System.Web.UI.Control.UniqueID%2A> of the control.</span></span>  
  
 <span data-ttu-id="1068c-194">此外，此重载<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法需要`useAsync`和`clientErrorCallback`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-194">Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter.</span></span> <span data-ttu-id="1068c-195">`useAsync`参数使你可以通过将该值设置为以异步方式执行客户端回调`true`。</span><span class="sxs-lookup"><span data-stu-id="1068c-195">The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`.</span></span> <span data-ttu-id="1068c-196">不需要此方法的重载版本`useAsync`参数的值设置为`false`默认情况下。</span><span class="sxs-lookup"><span data-stu-id="1068c-196">The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.</span></span> <span data-ttu-id="1068c-197">`clientErrorCallback`参数允许你定义在调用了客户端函数的名称服务器的处理程序，<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>方法，将返回错误。</span><span class="sxs-lookup"><span data-stu-id="1068c-197">The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method, returns an error.</span></span> <span data-ttu-id="1068c-198">不需要此方法的重载版本`clientErrorCallback`参数将值设置为 null。</span><span class="sxs-lookup"><span data-stu-id="1068c-198">The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null.</span></span>  
  
 <span data-ttu-id="1068c-199">此方法的详细信息，请参阅备注的重载<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-199">For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-200">下面的代码示例演示如何使用两个重载<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>递增整数的客户端回调方案中的方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-200">The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.</span></span>  
  
 <span data-ttu-id="1068c-201">两个回调机制都会显示出来;它们之间的区别是使用`context`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-201">Two callback mechanisms are shown; the difference between them is the use of the `context` parameter.</span></span> <span data-ttu-id="1068c-202">A`ReceiveServerData1`提供客户端回调函数则使用`context`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-202">A `ReceiveServerData1` client callback function is provided using the `context` parameter.</span></span> <span data-ttu-id="1068c-203">与此相反，`ReceiveServerData2`客户端回调函数定义中`<script>`页上的块。</span><span class="sxs-lookup"><span data-stu-id="1068c-203">In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page.</span></span> <span data-ttu-id="1068c-204">A<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>方法是服务器处理程序传递给它的值增加与<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>方法返回作为字符串递增的值。</span><span class="sxs-lookup"><span data-stu-id="1068c-204">A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string.</span></span> <span data-ttu-id="1068c-205">如果<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>方法返回错误，则客户端函数`ProcessCallBackError`调用。</span><span class="sxs-lookup"><span data-stu-id="1068c-205">If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the client function `ProcessCallBackError` is called.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <altmember cref="P:System.Web.UI.Control.UniqueID" />
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="1068c-206">处理客户端回调的服务器 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-206">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="1068c-207">该控件必须实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口并提供 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-207">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="1068c-208">从客户端脚本传递给服务器的 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> 方法的参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-208">An argument passed from the client script to the server <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="1068c-209">一个客户端事件处理程序的名称，该处理程序接收成功的服务器事件的结果。</span><span class="sxs-lookup"><span data-stu-id="1068c-209">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="1068c-210">启动回调之前在客户端计算的客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-210">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="1068c-211">脚本的结果传回客户端事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1068c-211">The result of the script is passed back to the client event handler.</span></span></param>
        <param name="clientErrorCallback"><span data-ttu-id="1068c-212">客户端事件处理程序的名称，该处理程序在服务器端事件处理程序出现错误时接收结果。</span><span class="sxs-lookup"><span data-stu-id="1068c-212">The name of the client event handler that receives the result when an error occurs in the server event handler.</span></span></param>
        <param name="useAsync">
          <span data-ttu-id="1068c-213"><see langword="true" /> 表示异步执行回调；<see langword="false" /> 表示同步执行回调。</span><span class="sxs-lookup"><span data-stu-id="1068c-213"><see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</span></span></param>
        <summary><span data-ttu-id="1068c-214">获取一个对客户端函数的引用；调用该函数时，将启动一个对服务器事件的客户端回调。</span><span class="sxs-lookup"><span data-stu-id="1068c-214">Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</span></span> <span data-ttu-id="1068c-215">此重载方法的客户端函数包含指定的控件、参数、客户端脚本、上下文、错误处理程序和布尔值。</span><span class="sxs-lookup"><span data-stu-id="1068c-215">The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.</span></span></summary>
        <returns><span data-ttu-id="1068c-216">调用客户端回调的客户端函数的名称。</span><span class="sxs-lookup"><span data-stu-id="1068c-216">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-217">此重载<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法需要`useAsync`和`clientErrorCallback`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-217">This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter.</span></span> <span data-ttu-id="1068c-218">`useAsync`参数使你可以通过将该值设置为以异步方式执行客户端回调`true`。</span><span class="sxs-lookup"><span data-stu-id="1068c-218">The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`.</span></span> <span data-ttu-id="1068c-219">不需要此方法的重载版本`useAsync`参数的值设置为`false`默认情况下。</span><span class="sxs-lookup"><span data-stu-id="1068c-219">The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.</span></span> <span data-ttu-id="1068c-220">`clientErrorCallback`参数允许你定义在调用了客户端函数的名称服务器处理程序 (<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>方法) 将返回错误。</span><span class="sxs-lookup"><span data-stu-id="1068c-220">The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler (the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method) returns an error.</span></span> <span data-ttu-id="1068c-221">不需要此方法的重载版本`clientErrorCallback`参数将值设置为 null。</span><span class="sxs-lookup"><span data-stu-id="1068c-221">The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null.</span></span>  
  
 <span data-ttu-id="1068c-222">此方法的详细信息，请参阅备注的重载<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-222">For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-223">指定的 <see cref="T:System.Web.UI.Control" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-223">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1068c-224">指定的 <see cref="T:System.Web.UI.Control" /> 未实现 <see cref="T:System.Web.UI.ICallbackEventHandler" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="1068c-224">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</span></span></exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackClientHyperlink">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1068c-225">获取一个引用，并将 <see langword="javascript:" /> 追加到引用的开始处，用于在客户端事件中回发到服务器。</span><span class="sxs-lookup"><span data-stu-id="1068c-225">Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="1068c-226">处理回发的服务器控件。</span><span class="sxs-lookup"><span data-stu-id="1068c-226">The server control to process the postback.</span></span></param>
        <param name="argument"><span data-ttu-id="1068c-227">传递给服务器控件的参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-227">The parameter passed to the server control.</span></span></param>
        <summary><span data-ttu-id="1068c-228">获取一个引用，并在其开头附加 <see langword="javascript:" />，可以在客户端事件中使用该引用，并将该引用与指定的事件参数一起使用，以便回发到指定控件的服务器。</span><span class="sxs-lookup"><span data-stu-id="1068c-228">Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments.</span></span></summary>
        <returns><span data-ttu-id="1068c-229">一个字符串，表示对包含目标控件的 ID 和事件参数的回发函数的 JavaScript 调用。</span><span class="sxs-lookup"><span data-stu-id="1068c-229">A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-230">使用<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法需要处理以实现回发的控件<xref:System.Web.UI.IPostBackEventHandler>接口。</span><span class="sxs-lookup"><span data-stu-id="1068c-230">Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="1068c-231">若要实现<xref:System.Web.UI.IPostBackEventHandler>接口<xref:System.Web.UI.Page>，使用指令。</span><span class="sxs-lookup"><span data-stu-id="1068c-231">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-232">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-232">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> method.</span></span> <span data-ttu-id="1068c-233">自定义控件， `MyControl`，实现<xref:System.Web.UI.IPostBackEventHandler>接口。</span><span class="sxs-lookup"><span data-stu-id="1068c-233">The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="1068c-234">单击页面上的 HTML 定位点元素后，<xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A>调用的自定义控件的方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-234">When the HTML anchor element on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 <span data-ttu-id="1068c-235">下面的代码示例具有与前一次，而不是自定义控件，但相同的功能<xref:System.Web.UI.Page>类实现<xref:System.Web.UI.IPostBackEventHandler>接口。</span><span class="sxs-lookup"><span data-stu-id="1068c-235">The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="1068c-236">处理回发的服务器控件。</span><span class="sxs-lookup"><span data-stu-id="1068c-236">The server control to process the postback.</span></span></param>
        <param name="argument"><span data-ttu-id="1068c-237">传递给服务器控件的参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-237">The parameter passed to the server control.</span></span></param>
        <param name="registerForEventValidation">
          <span data-ttu-id="1068c-238"><see langword="true" /> 表示为验证注册回发事件；<see langword="false" /> 表示不为验证注册回发事件。</span><span class="sxs-lookup"><span data-stu-id="1068c-238"><see langword="true" /> to register the postback event for validation; <see langword="false" /> to not register the post back event for validation.</span></span></param>
        <summary><span data-ttu-id="1068c-239">获取一个引用，并在其开头附加 <see langword="javascript:" />，该引用可用于在客户端事件中回发到指定控件的服务器，回发时使用指定的事件参数和一个指示是否为事件验证注册该回发的布尔值。</span><span class="sxs-lookup"><span data-stu-id="1068c-239">Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control with the specified event arguments and Boolean indication whether to register the post back for event validation.</span></span></summary>
        <returns><span data-ttu-id="1068c-240">一个字符串，表示对包含目标控件的 ID 和事件参数的回发函数的 JavaScript 调用。</span><span class="sxs-lookup"><span data-stu-id="1068c-240">A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-241">使用<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法需要处理以实现回发的控件<xref:System.Web.UI.IPostBackEventHandler>接口。</span><span class="sxs-lookup"><span data-stu-id="1068c-241">Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="1068c-242">若要实现<xref:System.Web.UI.IPostBackEventHandler>接口<xref:System.Web.UI.Page>，使用指令。</span><span class="sxs-lookup"><span data-stu-id="1068c-242">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1068c-243">返回一个可以在客户端事件中使用的字符串，以便回发到服务器。</span><span class="sxs-lookup"><span data-stu-id="1068c-243">Returns a string that can be used in a client event to cause postback to the server.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="1068c-244">定义回发的 <see cref="T:System.Web.UI.PostBackOptions" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-244">A <see cref="T:System.Web.UI.PostBackOptions" /> that defines the postback.</span></span></param>
        <summary><span data-ttu-id="1068c-245">返回一个可以在客户端事件中使用的字符串，以便回发到服务器。</span><span class="sxs-lookup"><span data-stu-id="1068c-245">Returns a string that can be used in a client event to cause postback to the server.</span></span> <span data-ttu-id="1068c-246">由指定的 <see cref="T:System.Web.UI.PostBackOptions" /> 实例定义的字符串。</span><span class="sxs-lookup"><span data-stu-id="1068c-246">The reference string is defined by the specified <see cref="T:System.Web.UI.PostBackOptions" /> instance.</span></span></summary>
        <returns><span data-ttu-id="1068c-247">一个字符串，当被视为客户端脚本时，它将启动客户端回发。</span><span class="sxs-lookup"><span data-stu-id="1068c-247">A string that, when treated as script on the client, initiates the client postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-248">若要实现<xref:System.Web.UI.IPostBackEventHandler>接口<xref:System.Web.UI.Page>，使用指令。</span><span class="sxs-lookup"><span data-stu-id="1068c-248">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.</span></span>  
  
 <span data-ttu-id="1068c-249"><xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法可以用于<xref:System.Web.UI.WebControls.Button>控制<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>属性是`false`。</span><span class="sxs-lookup"><span data-stu-id="1068c-249">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="1068c-250">在此方案中，<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>客户端回发事件的方法返回<xref:System.Web.UI.WebControls.Button>控件。</span><span class="sxs-lookup"><span data-stu-id="1068c-250">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-251"><see cref="T:System.Web.UI.PostBackOptions" /> 参数为 <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="1068c-251">The <see cref="T:System.Web.UI.PostBackOptions" /> parameter is <see langword="null" /></span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="1068c-252">在服务器上处理回发的服务器 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-252">The server <see cref="T:System.Web.UI.Control" /> that processes the postback on the server.</span></span></param>
        <param name="argument"><span data-ttu-id="1068c-253">要传递给处理回发的控件的可选参数字符串。</span><span class="sxs-lookup"><span data-stu-id="1068c-253">A string of optional arguments to pass to the control that processes the postback.</span></span></param>
        <summary><span data-ttu-id="1068c-254">返回一个可以在客户端事件中使用的字符串，以便回发到服务器。</span><span class="sxs-lookup"><span data-stu-id="1068c-254">Returns a string that can be used in a client event to cause postback to the server.</span></span> <span data-ttu-id="1068c-255">该引用字符串由处理回发的指定控件和一个附加事件信息的字符串参数定义。</span><span class="sxs-lookup"><span data-stu-id="1068c-255">The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</span></span></summary>
        <returns><span data-ttu-id="1068c-256">一个字符串，将其视为客户端脚本时，将启动回发。</span><span class="sxs-lookup"><span data-stu-id="1068c-256">A string that, when treated as script on the client, initiates the postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-257">若要实现<xref:System.Web.UI.IPostBackEventHandler>接口<xref:System.Web.UI.Page>，使用指令。</span><span class="sxs-lookup"><span data-stu-id="1068c-257">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.</span></span>  
  
 <span data-ttu-id="1068c-258"><xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法可以用于<xref:System.Web.UI.WebControls.Button>控制<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>属性是`false`。</span><span class="sxs-lookup"><span data-stu-id="1068c-258">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="1068c-259">在此方案中，<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>客户端回发事件的方法返回<xref:System.Web.UI.WebControls.Button>控件。</span><span class="sxs-lookup"><span data-stu-id="1068c-259">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-260">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-260">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method.</span></span> <span data-ttu-id="1068c-261">自定义控件， `MyControl`，实现<xref:System.Web.UI.IPostBackEventHandler>接口。</span><span class="sxs-lookup"><span data-stu-id="1068c-261">The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="1068c-262">单击页面上的按钮时，<xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A>调用的自定义控件的方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-262">When the button on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 <span data-ttu-id="1068c-263">下面的代码示例具有与前一次，而不是自定义控件，但相同的功能<xref:System.Web.UI.Page>类实现<xref:System.Web.UI.IPostBackEventHandler>接口。</span><span class="sxs-lookup"><span data-stu-id="1068c-263">The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-264">指定的 <see cref="T:System.Web.UI.Control" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-264">The specified <see cref="T:System.Web.UI.Control" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions, registerForEventValidation As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options, bool registerForEventValidation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="1068c-265">定义回发的 <see cref="T:System.Web.UI.PostBackOptions" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-265">A <see cref="T:System.Web.UI.PostBackOptions" /> that defines the postback.</span></span></param>
        <param name="registerForEventValidation">
          <span data-ttu-id="1068c-266"><see langword="true" /> 表示为验证注册事件引用；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-266"><see langword="true" /> to register the event reference for validation; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="1068c-267">返回一个可以在客户端事件中使用的字符串，以便回发到服务器。</span><span class="sxs-lookup"><span data-stu-id="1068c-267">Returns a string that can be used in a client event to cause postback to the server.</span></span> <span data-ttu-id="1068c-268">由指定的 <see cref="T:System.Web.UI.PostBackOptions" /> 对象定义的字符串。</span><span class="sxs-lookup"><span data-stu-id="1068c-268">The reference string is defined by the specified <see cref="T:System.Web.UI.PostBackOptions" /> object.</span></span> <span data-ttu-id="1068c-269">可选择为验证注册事件引用。</span><span class="sxs-lookup"><span data-stu-id="1068c-269">Optionally, registers the event reference for validation.</span></span></summary>
        <returns><span data-ttu-id="1068c-270">一个字符串，当被视为客户端脚本时，它将启动客户端回发。</span><span class="sxs-lookup"><span data-stu-id="1068c-270">A string that, when treated as script on the client, initiates the client postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-271">若要实现<xref:System.Web.UI.IPostBackEventHandler>接口<xref:System.Web.UI.Page>对象，请使用指令。</span><span class="sxs-lookup"><span data-stu-id="1068c-271">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page> object, use the  directive.</span></span>  
  
 <span data-ttu-id="1068c-272"><xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法可以用于<xref:System.Web.UI.WebControls.Button>控制<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>属性是`false`。</span><span class="sxs-lookup"><span data-stu-id="1068c-272">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="1068c-273">在此方案中，<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>客户端回发事件的方法返回<xref:System.Web.UI.WebControls.Button>控件。</span><span class="sxs-lookup"><span data-stu-id="1068c-273">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 <span data-ttu-id="1068c-274">如果`registerForEventValidation`是`true`、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>方法调用<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>方法与表示生成该事件的客户端控件的唯一的控制 ID 注册验证的 event 引用。</span><span class="sxs-lookup"><span data-stu-id="1068c-274">If `registerForEventValidation` is `true`, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-275"><see cref="T:System.Web.UI.PostBackOptions" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-275">The <see cref="T:System.Web.UI.PostBackOptions" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="1068c-276">在服务器上处理回发的服务器 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-276">The server <see cref="T:System.Web.UI.Control" /> that processes the postback on the server.</span></span></param>
        <param name="argument"><span data-ttu-id="1068c-277">传递给控件<c></c>的可选参数的字符串。</span><span class="sxs-lookup"><span data-stu-id="1068c-277">A string of optional arguments to pass to <c>control</c>.</span></span></param>
        <param name="registerForEventValidation">
          <span data-ttu-id="1068c-278"><see langword="true" /> 表示为验证注册事件引用；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-278"><see langword="true" /> to register the event reference for validation; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="1068c-279">返回一个在客户端事件中使用的字符串，以便回发到服务器。</span><span class="sxs-lookup"><span data-stu-id="1068c-279">Returns a string to use in a client event to cause postback to the server.</span></span> <span data-ttu-id="1068c-280">该引用字符串由处理回发的指定控件和一个附加事件信息的字符串参数定义。</span><span class="sxs-lookup"><span data-stu-id="1068c-280">The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</span></span> <span data-ttu-id="1068c-281">可选择为验证注册事件引用。</span><span class="sxs-lookup"><span data-stu-id="1068c-281">Optionally, registers the event reference for validation.</span></span></summary>
        <returns><span data-ttu-id="1068c-282">一个字符串，将其视为客户端脚本时，将启动回发。</span><span class="sxs-lookup"><span data-stu-id="1068c-282">A string that, when treated as script on the client, initiates the postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-283">若要实现<xref:System.Web.UI.IPostBackEventHandler>接口<xref:System.Web.UI.Page>，使用指令。</span><span class="sxs-lookup"><span data-stu-id="1068c-283">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive.</span></span>  
  
 <span data-ttu-id="1068c-284"><xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法可以用于<xref:System.Web.UI.WebControls.Button>控制<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>属性是`false`。</span><span class="sxs-lookup"><span data-stu-id="1068c-284">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="1068c-285">在此方案中，<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>客户端回发事件的方法返回<xref:System.Web.UI.WebControls.Button>控件。</span><span class="sxs-lookup"><span data-stu-id="1068c-285">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 <span data-ttu-id="1068c-286">如果`registerForEventValidation`为 true，<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>方法调用<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>方法与表示生成该事件的客户端控件的唯一的控制 ID 注册验证的 event 引用。</span><span class="sxs-lookup"><span data-stu-id="1068c-286">If `registerForEventValidation` is true, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-287">指定的 <see cref="T:System.Web.UI.Control" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-287">The specified <see cref="T:System.Web.UI.Control" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetWebResourceUrl">
      <MemberSignature Language="C#" Value="public string GetWebResourceUrl (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetWebResourceUrl(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetWebResourceUrl(Type ^ type, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="1068c-288">资源类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-288">The type of the resource.</span></span></param>
        <param name="resourceName"><span data-ttu-id="1068c-289">程序集中资源的完全限定名称。</span><span class="sxs-lookup"><span data-stu-id="1068c-289">The fully qualified name of the resource in the assembly.</span></span></param>
        <summary><span data-ttu-id="1068c-290">获取对程序集内资源的 URL 引用。</span><span class="sxs-lookup"><span data-stu-id="1068c-290">Gets a URL reference to a resource in an assembly.</span></span></summary>
        <returns><span data-ttu-id="1068c-291">对资源的 URL 引用。</span><span class="sxs-lookup"><span data-stu-id="1068c-291">The URL reference to the resource.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-292"><xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A>方法返回对嵌入到程序集中的资源的 URL 引用。</span><span class="sxs-lookup"><span data-stu-id="1068c-292">The <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> method returns a URL reference to a resource embedded in an assembly.</span></span> <span data-ttu-id="1068c-293">返回的引用不是编码的 URL。</span><span class="sxs-lookup"><span data-stu-id="1068c-293">The returned reference is not URL encoded.</span></span> <span data-ttu-id="1068c-294">资源可以是脚本文件、 图像或任何静态文件。</span><span class="sxs-lookup"><span data-stu-id="1068c-294">Resources can be script files, images, or any static file.</span></span> <span data-ttu-id="1068c-295">指定基于将访问资源的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-295">You specify the type based on the object that will be accessing the resource.</span></span>  
  
 <span data-ttu-id="1068c-296">注册页的 Web 资源唯一标识由其类型和名称。</span><span class="sxs-lookup"><span data-stu-id="1068c-296">A Web resource registered with the page is uniquely identified by its type and name.</span></span> <span data-ttu-id="1068c-297">可以使用页注册给定的类型且名称对一个资源。</span><span class="sxs-lookup"><span data-stu-id="1068c-297">Only one resource with a given type and name pair can be registered with the page.</span></span> <span data-ttu-id="1068c-298">尝试注册已注册的资源不会创建已注册的资源的副本。</span><span class="sxs-lookup"><span data-stu-id="1068c-298">Attempting to register a resource that is already registered does not create a duplicate of the registered resource.</span></span>  
  
 <span data-ttu-id="1068c-299"><xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A>结合使用方法<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>方法，用于访问资源嵌入程序集中。</span><span class="sxs-lookup"><span data-stu-id="1068c-299">The <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> method is used in conjunction with the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method for accessing resources embedded in assemblies.</span></span> <span data-ttu-id="1068c-300">有关使用应用程序中的资源的详细信息，请参阅[ASP.NET 网页资源概述](http://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd)。</span><span class="sxs-lookup"><span data-stu-id="1068c-300">For more information on using resources in applications, see [ASP.NET Web Page Resources Overview](http://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-301">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-301">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> method.</span></span> <span data-ttu-id="1068c-302">*类型*在此示例中的参数设置为包含该资源的程序集中的类的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-302">The *type* parameter in this example is set to the type of class in the assembly containing the resource.</span></span> <span data-ttu-id="1068c-303">`resourceName`参数指定与资源，其中包括默认命名空间的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="1068c-303">The `resourceName` parameter is specified with the fully qualified path to the resource, which includes the default namespace.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 <span data-ttu-id="1068c-304">下面的代码示例演示如何以编程方式应用<xref:System.Web.UI.WebResourceAttribute>用于标记将提供服务的资源的程序集的元数据属性。</span><span class="sxs-lookup"><span data-stu-id="1068c-304">The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served.</span></span> <span data-ttu-id="1068c-305">使用默认命名空间设置为编译类库中的以下类`Samples.AspNet.CS.Controls`或`Samples.AspNet.VB.Controls`，取决于你使用哪种语言。</span><span class="sxs-lookup"><span data-stu-id="1068c-305">Compile the following class in a class library with a default namespace set to `Samples.AspNet.CS.Controls` or `Samples.AspNet.VB.Controls`, depending on what language you are using.</span></span>  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 <span data-ttu-id="1068c-306">此示例需要名为的 JavaScript 文件`Script_include.js`。</span><span class="sxs-lookup"><span data-stu-id="1068c-306">This example requires a JavaScript file named `Script_include.js`.</span></span> <span data-ttu-id="1068c-307">.Js 文件是中包含的程序集的嵌入的资源`ClientScriptResourceLabel`对象。</span><span class="sxs-lookup"><span data-stu-id="1068c-307">The .js file is an embedded resource in the assembly that contains the `ClientScriptResourceLabel` object.</span></span> <span data-ttu-id="1068c-308">如果你使用 Visual Studio]，在该类库项目属性窗口中，设置**生成操作**到**嵌入的资源**选中脚本文件。</span><span class="sxs-lookup"><span data-stu-id="1068c-308">If you are using Visual Studio], in the Properties window of the class library project, set **Build Action** to **Embedded Resource** when the script file is selected.</span></span> <span data-ttu-id="1068c-309">如果您正在编译的库在命令行，请使用开关来嵌入资源。</span><span class="sxs-lookup"><span data-stu-id="1068c-309">If you are compiling the library at the command line, use the  switch to embed the resource.</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-310">Web 资源名称为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-310">The web resource name is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="1068c-311">\- 或 -</span><span class="sxs-lookup"><span data-stu-id="1068c-311">\- or -</span></span>  
  
 <span data-ttu-id="1068c-312">Web 资源名称长度为零。</span><span class="sxs-lookup"><span data-stu-id="1068c-312">The web resource name has a length of zero.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptBlockRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1068c-313">确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了客户端脚本块。</span><span class="sxs-lookup"><span data-stu-id="1068c-313">Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptBlockRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="1068c-314">要搜索的客户端脚本块的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-314">The key of the client script block to search for.</span></span></param>
        <summary><span data-ttu-id="1068c-315">使用指定键确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了客户端脚本块。</span><span class="sxs-lookup"><span data-stu-id="1068c-315">Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns>
          <span data-ttu-id="1068c-316">如果注册了客户端脚本块，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-316"><see langword="true" /> if the client script block is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-317">调用此方法之前调用<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法可避免注册重复的脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-317">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="1068c-318">这一点特别重要，如果该脚本需要大量服务器资源进行创建。</span><span class="sxs-lookup"><span data-stu-id="1068c-318">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="1068c-319">由它的键和其类型唯一地标识客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-319">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-320">具有相同键和类型的脚本被视为重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-320">Scripts with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="1068c-321">此重载<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>方法调用的重载采用同时`key`和`type`与类型参数设置为<xref:System.Web.UI.Page>对象</span><span class="sxs-lookup"><span data-stu-id="1068c-321">This overload of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object</span></span>  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(Type ^ type, System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="1068c-322">要搜索的客户端脚本块的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-322">The type of the client script block to search for.</span></span></param>
        <param name="key"><span data-ttu-id="1068c-323">要搜索的客户端脚本块的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-323">The key of the client script block to search for.</span></span></param>
        <summary><span data-ttu-id="1068c-324">使用键和类型确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了客户端脚本块。</span><span class="sxs-lookup"><span data-stu-id="1068c-324">Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object using a key and type.</span></span></summary>
        <returns>
          <span data-ttu-id="1068c-325">如果注册了客户端脚本块，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-325"><see langword="true" /> if the client script block is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-326">调用此方法之前调用<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法可避免注册重复的脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-326">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="1068c-327">这一点特别重要，如果该脚本需要大量服务器资源进行创建。</span><span class="sxs-lookup"><span data-stu-id="1068c-327">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="1068c-328">由它的键和其类型唯一地标识客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-328">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-329">具有相同键和类型的脚本被视为重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-329">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="1068c-330">指定基于将访问资源的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-330">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="1068c-331">例如，当使用`Page`实例以访问资源，你指定`Page`类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-331">For instance, when using a `Page` instance to access the resource, you specify the `Page` type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-332">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-332">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method.</span></span> <span data-ttu-id="1068c-333">请注意，是否逻辑来检查是否有现有的客户端脚本块已被删除，则在呈现的页面的 HTML 源代码不会有两个重复的客户端脚本，因为<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法检查重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-333">Note that, if the logic to check for the existing client script block were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method checks for duplicates.</span></span> <span data-ttu-id="1068c-334">检查的好处是减少不必要的计算。</span><span class="sxs-lookup"><span data-stu-id="1068c-334">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-335">客户端脚本类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-335">The client script type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptIncludeRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1068c-336">确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了客户端脚本包含。</span><span class="sxs-lookup"><span data-stu-id="1068c-336">Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptIncludeRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="1068c-337">要搜索的客户端脚本包含的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-337">The key of the client script include to search for.</span></span></param>
        <summary><span data-ttu-id="1068c-338">使用指定键确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了客户端脚本包含。</span><span class="sxs-lookup"><span data-stu-id="1068c-338">Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns>
          <span data-ttu-id="1068c-339">如果注册了客户端脚本包含，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-339"><see langword="true" /> if the client script include is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-340">调用此方法之前调用<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>方法可避免注册重复的脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-340">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="1068c-341">这一点特别重要，如果该脚本需要大量服务器资源进行创建。</span><span class="sxs-lookup"><span data-stu-id="1068c-341">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="1068c-342">客户端脚本包括由它的键和其类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="1068c-342">A client script include is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-343">具有相同键和类型的脚本被视为重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-343">Scripts with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="1068c-344">此重载<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>方法调用的重载采用同时`key`和`type`与类型参数设置为<xref:System.Web.UI.Page>对象。</span><span class="sxs-lookup"><span data-stu-id="1068c-344">This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(Type ^ type, System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="1068c-345">要搜索的客户端脚本包含的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-345">The type of the client script include to search for.</span></span></param>
        <param name="key"><span data-ttu-id="1068c-346">要搜索的客户端脚本包含的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-346">The key of the client script include to search for.</span></span></param>
        <summary><span data-ttu-id="1068c-347">使用键和类型确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了客户端脚本包含。</span><span class="sxs-lookup"><span data-stu-id="1068c-347">Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object using a key and type.</span></span></summary>
        <returns>
          <span data-ttu-id="1068c-348">如果注册了客户端脚本包含，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-348"><see langword="true" /> if the client script include is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-349">调用此方法之前调用<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>方法，以避免注册重复的客户端脚本包括。</span><span class="sxs-lookup"><span data-stu-id="1068c-349">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate client script includes.</span></span> <span data-ttu-id="1068c-350">这一点特别重要，如果该脚本需要大量服务器资源进行创建。</span><span class="sxs-lookup"><span data-stu-id="1068c-350">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="1068c-351">客户端脚本包括由它的键和其类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="1068c-351">A client script include is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-352">具有相同键和类型的脚本被视为重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-352">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="1068c-353">指定基于将访问资源的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-353">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="1068c-354">例如，当使用的页实例访问资源，你指定`Page`类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-354">For instance, when using a Page instance to access the resource, you specify the `Page` type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-355">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-355">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> method.</span></span> <span data-ttu-id="1068c-356">请注意，是否用于检查现有的客户端脚本包含的逻辑被移除，则在呈现的页面的 HTML 源代码中不会两个重复的客户端脚本，因为<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>方法检查重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-356">Note that, if the logic to check for the existing client script include were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates.</span></span> <span data-ttu-id="1068c-357">检查的好处是减少不必要的计算。</span><span class="sxs-lookup"><span data-stu-id="1068c-357">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 <span data-ttu-id="1068c-358">此示例需要名为的 JavaScript 文件`Script_include.js`，具有以下内容：</span><span class="sxs-lookup"><span data-stu-id="1068c-358">This example requires a JavaScript file named `Script_include.js`, with the following contents:</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-359">客户端脚本包含类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-359">The client script include type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsOnSubmitStatementRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1068c-360">确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了 OnSubmit 语句。</span><span class="sxs-lookup"><span data-stu-id="1068c-360">Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOnSubmitStatementRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="1068c-361">要搜索的 OnSubmit 语句的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-361">The key of the OnSubmit statement to search for.</span></span></param>
        <summary><span data-ttu-id="1068c-362">确定 <see cref="T:System.Web.UI.Page" /> 对象是否使用指定键注册了 OnSubmit 语句。</span><span class="sxs-lookup"><span data-stu-id="1068c-362">Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns>
          <span data-ttu-id="1068c-363">如果已注册 OnSubmit 语句，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-363"><see langword="true" /> if the OnSubmit statement is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-364">调用此方法之前调用<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>方法，以避免注册重复 OnSubmit 语句。</span><span class="sxs-lookup"><span data-stu-id="1068c-364">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate OnSubmit statements.</span></span> <span data-ttu-id="1068c-365">这一点特别重要，如果该语句需要大量服务器资源进行创建。</span><span class="sxs-lookup"><span data-stu-id="1068c-365">This is particularly important if the statement requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="1068c-366">由它的键和其类型唯一标识一条语句。</span><span class="sxs-lookup"><span data-stu-id="1068c-366">A statement is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-367">语句具有相同键和类型均被视为重复。</span><span class="sxs-lookup"><span data-stu-id="1068c-367">Statements with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="1068c-368">此重载<xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>方法调用的重载采用同时`key`和`type`与类型参数设置为<xref:System.Web.UI.Page>对象</span><span class="sxs-lookup"><span data-stu-id="1068c-368">This overload of the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(Type ^ type, System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="1068c-369">要搜索的 OnSubmit 语句的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-369">The type of the OnSubmit statement to search for.</span></span></param>
        <param name="key"><span data-ttu-id="1068c-370">要搜索的 OnSubmit 语句的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-370">The key of the OnSubmit statement to search for.</span></span></param>
        <summary><span data-ttu-id="1068c-371">确定 <see cref="T:System.Web.UI.Page" /> 对象是否使用指定的键和类型注册了 OnSubmit 语句。</span><span class="sxs-lookup"><span data-stu-id="1068c-371">Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key and type.</span></span></summary>
        <returns>
          <span data-ttu-id="1068c-372">如果已注册 OnSubmit 语句，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-372"><see langword="true" /> if the OnSubmit statement is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-373">调用此方法之前调用<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>方法可避免注册重复的语句。</span><span class="sxs-lookup"><span data-stu-id="1068c-373">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate statements.</span></span> <span data-ttu-id="1068c-374">这一点特别重要，如果该语句需要大量服务器资源进行创建。</span><span class="sxs-lookup"><span data-stu-id="1068c-374">This is particularly important if the statement requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="1068c-375">由它的键和其类型唯一标识一条语句。</span><span class="sxs-lookup"><span data-stu-id="1068c-375">A statement is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-376">语句具有相同键和类型均被视为重复。</span><span class="sxs-lookup"><span data-stu-id="1068c-376">Statements with the same key and type are considered duplicates.</span></span> <span data-ttu-id="1068c-377">指定基于将访问资源的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-377">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="1068c-378">例如，当使用`Page`实例以访问资源，你指定`Page`类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-378">For instance, when using a `Page` instance to access the resource, you specify the `Page` type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-379">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-379">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method.</span></span> <span data-ttu-id="1068c-380">名为的脚本`OnSubmitScript`注册到<xref:System.Web.UI.Page>，以便当调用相应的脚本提交页面的表单。</span><span class="sxs-lookup"><span data-stu-id="1068c-380">A script named `OnSubmitScript` is registered with the <xref:System.Web.UI.Page> so that when the page's form is submitted the script is invoked.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-381">OnSubmit 语句的类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-381">The OnSubmit statement type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStartupScriptRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1068c-382">确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了启动脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-382">Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsStartupScriptRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="1068c-383">要搜索的启动脚本的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-383">The key of the startup script to search for.</span></span></param>
        <summary><span data-ttu-id="1068c-384">使用指定键确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了启动脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-384">Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns>
          <span data-ttu-id="1068c-385">如果注册了启动脚本，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-385"><see langword="true" /> if the startup script is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-386">调用此方法之前调用<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法可避免注册重复的脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-386">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="1068c-387">这一点特别重要，如果该脚本需要大量服务器资源进行创建。</span><span class="sxs-lookup"><span data-stu-id="1068c-387">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="1068c-388">由它的键和其类型唯一标识的启动脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-388">A startup script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-389">具有相同键和类型的脚本被视为重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-389">Scripts with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="1068c-390">此重载<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>方法调用采用两个字符串的重载`key`和`type`与类型参数设置为<xref:System.Web.UI.Page>对象</span><span class="sxs-lookup"><span data-stu-id="1068c-390">This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a string `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(Type ^ type, System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="1068c-391">要搜索的启动脚本的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-391">The type of the startup script to search for.</span></span></param>
        <param name="key"><span data-ttu-id="1068c-392">要搜索的启动脚本的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-392">The key of the startup script to search for.</span></span></param>
        <summary><span data-ttu-id="1068c-393">使用指定键和类型确定 <see cref="T:System.Web.UI.Page" /> 对象是否注册了启动脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-393">Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key and type.</span></span></summary>
        <returns>
          <span data-ttu-id="1068c-394">如果注册了启动脚本，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-394"><see langword="true" /> if the startup script is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-395">调用此方法之前调用<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法可避免注册重复的脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-395">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="1068c-396">这一点特别重要，如果该脚本需要大量服务器资源进行创建。</span><span class="sxs-lookup"><span data-stu-id="1068c-396">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="1068c-397">由它的键和其类型唯一地标识客户端启动脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-397">A client startup script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-398">具有相同键和类型的脚本被视为重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-398">Scripts with the same key and type are considered duplicates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-399">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-399">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method.</span></span> <span data-ttu-id="1068c-400">请注意，是否逻辑来检查是否有现有的启动脚本块已被删除，则在呈现的页面的 HTML 源代码不会有两个重复的启动脚本，因为<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法检查重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-400">Note that, if the logic to check for the existing startup script block were removed, there would not be two duplicate startup scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method checks for duplicates.</span></span> <span data-ttu-id="1068c-401">检查的好处是减少不必要的计算。</span><span class="sxs-lookup"><span data-stu-id="1068c-401">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-402">该启动脚本类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-402">The startup script type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public void RegisterArrayDeclaration (string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterArrayDeclaration(string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterArrayDeclaration (arrayName As String, arrayValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterArrayDeclaration(System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="arrayName"><span data-ttu-id="1068c-403">要注册的数组名。</span><span class="sxs-lookup"><span data-stu-id="1068c-403">The array name to register.</span></span></param>
        <param name="arrayValue"><span data-ttu-id="1068c-404">要注册的一个或多个数组值。</span><span class="sxs-lookup"><span data-stu-id="1068c-404">The array value or values to register.</span></span></param>
        <summary><span data-ttu-id="1068c-405">使用数组名称和数组值向 <see cref="T:System.Web.UI.Page" /> 对象注册 JavaScript 数组声明。</span><span class="sxs-lookup"><span data-stu-id="1068c-405">Registers a JavaScript array declaration with the <see cref="T:System.Web.UI.Page" /> object using an array name and array value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-406"><xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>检查以确定是否已注册的数组存在中指定的名称与同名`arrayName`参数，如果是这样，将添加中指定的值`arrayValue`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-406">The <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> checks to see whether a registered array exists with the same name as the name specified in the `arrayName` parameter and, if so, adds the values specified in the `arrayValue` parameter.</span></span> <span data-ttu-id="1068c-407">由于基础存储机制基于<xref:System.Collections.ArrayList>，允许重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-407">Because the underlying storage mechanism is based on an <xref:System.Collections.ArrayList>, duplicates are allowed.</span></span> <span data-ttu-id="1068c-408">如果与同名的已注册数组`arrayName`参数不存在，则将创建和中的值`arrayValue`参数添加到它。</span><span class="sxs-lookup"><span data-stu-id="1068c-408">If a registered array with the same name as the `arrayName` parameter does not exist, it is created and the values in the `arrayValue` parameter added to it.</span></span>  
  
 <span data-ttu-id="1068c-409">如果你希望生成的 JavaScript 数组中的字符串文本，包括单引号 （'） 或转义的双引号括起来 (\\") 中`arrayValue`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-409">If you want string literals in the resulting JavaScript array, include single quotation marks (') or escaped double quotation marks (\\") in the `arrayValue` parameter.</span></span> <span data-ttu-id="1068c-410">值`arrayValue`参数应为单个元素。</span><span class="sxs-lookup"><span data-stu-id="1068c-410">The value of the `arrayValue` parameter should be a single element.</span></span> <span data-ttu-id="1068c-411">如果多个值需要添加到数组，请使用多个调用<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-411">If more than one value needs to be added to the array, make multiple calls using the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-412">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>和<xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-412">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> and <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> methods.</span></span> <span data-ttu-id="1068c-413">该示例注册数组和一个隐藏的值，并定义`OnClick`事件`<input>`按钮以对其求和的两个值的数组和隐藏的值。</span><span class="sxs-lookup"><span data-stu-id="1068c-413">The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1068c-414"><paramref name="arrayName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-414"><paramref name="arrayName" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.String.Split" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1068c-415">向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-415">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="1068c-416">要注册的客户端脚本的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-416">The type of the client script to register.</span></span></param>
        <param name="key"><span data-ttu-id="1068c-417">要注册的客户端脚本的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-417">The key of the client script to register.</span></span></param>
        <param name="script"><span data-ttu-id="1068c-418">要注册的客户端脚本文本。</span><span class="sxs-lookup"><span data-stu-id="1068c-418">The client script literal to register.</span></span></param>
        <summary><span data-ttu-id="1068c-419">使用类型、键和脚本文本向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-419">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a type, key, and script literal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-420">由它的键和其类型唯一地标识客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-420">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-421">具有相同键和类型的脚本被视为重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-421">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="1068c-422">只有一个具有给定的类型和密钥对的脚本可以注册页。</span><span class="sxs-lookup"><span data-stu-id="1068c-422">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="1068c-423">尝试注册已注册的脚本不会创建重复的脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-423">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="1068c-424">调用<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>方法来确定是否已注册给定的键和类型对具有的客户端脚本，从而避免不必要地尝试添加该脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-424">Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="1068c-425">中的此重载<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法，你必须确保中提供的脚本`script`参数包装在`<script>`元素块。</span><span class="sxs-lookup"><span data-stu-id="1068c-425">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you must make sure that the script provided in the `script` parameter is wrapped in a `<script>` element block.</span></span>  
  
 <span data-ttu-id="1068c-426"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法将脚本块添加到所呈现的页面的顶部。</span><span class="sxs-lookup"><span data-stu-id="1068c-426">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page.</span></span> <span data-ttu-id="1068c-427">不保证的脚本块都是在它们注册的顺序中的输出。</span><span class="sxs-lookup"><span data-stu-id="1068c-427">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="1068c-428">如果脚本块的顺序很重要，则使用<xref:System.Text.StringBuilder>对象，以便在单个字符串中，将脚本收集到一起，然后将单个客户端脚本块中所有注册它们。</span><span class="sxs-lookup"><span data-stu-id="1068c-428">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-429">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-429">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="1068c-430">要注册的客户端脚本的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-430">The type of the client script to register.</span></span></param>
        <param name="key"><span data-ttu-id="1068c-431">要注册的客户端脚本的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-431">The key of the client script to register.</span></span></param>
        <param name="script"><span data-ttu-id="1068c-432">要注册的客户端脚本文本。</span><span class="sxs-lookup"><span data-stu-id="1068c-432">The client script literal to register.</span></span></param>
        <param name="addScriptTags"><span data-ttu-id="1068c-433">指示是否添加脚本标记的布尔值。</span><span class="sxs-lookup"><span data-stu-id="1068c-433">A Boolean value indicating whether to add script tags.</span></span></param>
        <summary><span data-ttu-id="1068c-434">使用类型、键、脚本文本和指示是否添加脚本标记的布尔值向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-434">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a type, key, script literal, and Boolean value indicating whether to add script tags.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-435">由它的键和其类型唯一地标识客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-435">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-436">具有相同键和类型的脚本被视为重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-436">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="1068c-437">只有一个具有给定的类型和密钥对的脚本可以注册页。</span><span class="sxs-lookup"><span data-stu-id="1068c-437">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="1068c-438">尝试注册已注册的脚本不会创建重复的脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-438">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="1068c-439">调用<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>方法来确定是否已注册给定的键和类型对具有的客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-439">Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered.</span></span> <span data-ttu-id="1068c-440">这样可以避免不必要地尝试添加该脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-440">This lets you avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="1068c-441">中的此重载<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法，你可以指示是否中提供的脚本`script`使用包装参数`<script>`元素块的方法是使用`addScriptTags`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-441">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter.</span></span> <span data-ttu-id="1068c-442">设置`addScriptTags`到`true`指示脚本标记将会自动添加。</span><span class="sxs-lookup"><span data-stu-id="1068c-442">Setting `addScriptTags` to `true` indicates that script tags will be added automatically.</span></span>  
  
 <span data-ttu-id="1068c-443"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法将脚本块添加到所呈现的页面的顶部。</span><span class="sxs-lookup"><span data-stu-id="1068c-443">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page.</span></span> <span data-ttu-id="1068c-444">不保证的脚本块都是在它们注册的顺序中的输出。</span><span class="sxs-lookup"><span data-stu-id="1068c-444">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="1068c-445">如果脚本块的顺序很重要，则使用<xref:System.Text.StringBuilder>对象，以便在单个字符串中，将脚本收集到一起，然后将单个客户端脚本块中所有注册它们。</span><span class="sxs-lookup"><span data-stu-id="1068c-445">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-446">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-446">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method.</span></span> <span data-ttu-id="1068c-447">请注意，`addScriptTags`参数设置为`true`以便开始标记和结束脚本标记未附带`script`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-447">Note that the `addScriptTags` parameter is set to `true` so the beginning and closing script tags are not included with the `script` parameter.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-448">客户端脚本块类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-448">The client script block type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1068c-449">向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本包含。</span><span class="sxs-lookup"><span data-stu-id="1068c-449">Registers the client script include with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptInclude (key As String, url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(System::String ^ key, System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="1068c-450">要注册的客户端脚本包含的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-450">The key of the client script include to register.</span></span></param>
        <param name="url"><span data-ttu-id="1068c-451">要注册的客户端脚本包含的 URL。</span><span class="sxs-lookup"><span data-stu-id="1068c-451">The URL of the client script include to register.</span></span></param>
        <summary><span data-ttu-id="1068c-452">使用让客户端能够调用脚本的键和 URL 向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-452">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a key and a URL, which enables the script to be called from the client.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-453">客户端脚本包括由它的键和其类型唯一标识。</span><span class="sxs-lookup"><span data-stu-id="1068c-453">A client script include is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-454">具有相同键和类型的脚本被视为重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-454">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="1068c-455">只有一个具有给定的类型和密钥对的脚本可以注册页。</span><span class="sxs-lookup"><span data-stu-id="1068c-455">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="1068c-456">尝试注册已注册的脚本不会创建重复的脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-456">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="1068c-457">调用<xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>方法来确定是否客户端脚本包括具有给定的键和类型对已注册并避免不必要地尝试添加该脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-457">Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> method to determine whether a client script include with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1068c-458">若要解决客户端 URL，请使用<xref:System.Web.UI.Control.ResolveClientUrl%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-458">To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method.</span></span> <span data-ttu-id="1068c-459">此方法使用在其调用它的 URL 以解析路径的上下文。</span><span class="sxs-lookup"><span data-stu-id="1068c-459">This method uses the context of the URL on which it is called to resolve the path.</span></span>  
  
 <span data-ttu-id="1068c-460">此重载<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>方法调用的重载采用`key`、 `URL`，和一个`type`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-460">This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method calls the overload that takes a `key`, a `URL`, and a `type` parameter.</span></span>  
  
 <span data-ttu-id="1068c-461">该方法在呈现的页面的顶部添加一个脚本块。</span><span class="sxs-lookup"><span data-stu-id="1068c-461">The method adds a script block at the top of the rendered page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-462">有关相关信息，包括语法、 用法和示例，请参阅<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>。</span><span class="sxs-lookup"><span data-stu-id="1068c-462">For related information, including syntax, usage, and an example, see <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="1068c-463">要注册的客户端脚本包含的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-463">The type of the client script include to register.</span></span></param>
        <param name="key"><span data-ttu-id="1068c-464">要注册的客户端脚本包含的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-464">The key of the client script include to register.</span></span></param>
        <param name="url"><span data-ttu-id="1068c-465">要注册的客户端脚本包含的 URL。</span><span class="sxs-lookup"><span data-stu-id="1068c-465">The URL of the client script include to register.</span></span></param>
        <summary><span data-ttu-id="1068c-466">使用类型、键和 URL 向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本包含。</span><span class="sxs-lookup"><span data-stu-id="1068c-466">Registers the client script include with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a URL.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-467">此重载<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>方法采用*密钥*和*url*参数来标识该脚本，以及一个`type`参数来指定客户端脚本的标识包括。</span><span class="sxs-lookup"><span data-stu-id="1068c-467">This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method takes *key* and *url* parameters to identify the script, as well as a `type` parameter to specify the identification of the client script include.</span></span> <span data-ttu-id="1068c-468">指定基于将访问资源的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-468">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="1068c-469">例如，当使用`Page`实例以访问资源，你指定`Page`类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-469">For instance, when using a `Page` instance to access the resource, you specify the `Page` type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1068c-470">若要解决客户端 URL，请使用<xref:System.Web.UI.Control.ResolveClientUrl%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-470">To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method.</span></span> <span data-ttu-id="1068c-471">此方法使用在其调用它的 URL 以解析路径的上下文。</span><span class="sxs-lookup"><span data-stu-id="1068c-471">This method uses the context of the URL on which it is called to resolve the path.</span></span>  
  
 <span data-ttu-id="1068c-472">此方法在呈现的页面的顶部添加一个脚本块。</span><span class="sxs-lookup"><span data-stu-id="1068c-472">This method adds a script block at the top of the rendered page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-473">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-473">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method.</span></span> <span data-ttu-id="1068c-474">请注意，是否用于检查现有的客户端脚本包含的逻辑被移除，仍不会有重复的客户端脚本中呈现的页面因为<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>方法检查重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-474">Note that if the logic to check for the existing client script include were removed, there would still not be duplicate client scripts in the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates.</span></span> <span data-ttu-id="1068c-475">检查的好处是减少不必要的计算。</span><span class="sxs-lookup"><span data-stu-id="1068c-475">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 <span data-ttu-id="1068c-476">此示例需要名包含以下内容的 JavaScript 文件：</span><span class="sxs-lookup"><span data-stu-id="1068c-476">This example requires a JavaScript file named Script_include.js with the following contents:</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-477">客户端脚本包含类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-477">The client script include type is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1068c-478">URL 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-478">The URL is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="1068c-479">\- 或 -</span><span class="sxs-lookup"><span data-stu-id="1068c-479">\- or -</span></span>  
  
 <span data-ttu-id="1068c-480">URL 为空。</span><span class="sxs-lookup"><span data-stu-id="1068c-480">The URL is empty.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptResource (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptResource(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptResource(Type ^ type, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="1068c-481">要注册的客户端脚本资源的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-481">The type of the client script resource to register.</span></span></param>
        <param name="resourceName"><span data-ttu-id="1068c-482">要注册的客户端脚本资源的名称。</span><span class="sxs-lookup"><span data-stu-id="1068c-482">The name of the client script resource to register.</span></span></param>
        <summary><span data-ttu-id="1068c-483">使用类型和资源名向 <see cref="T:System.Web.UI.Page" /> 对象注册客户端脚本资源。</span><span class="sxs-lookup"><span data-stu-id="1068c-483">Registers the client script resource with the <see cref="T:System.Web.UI.Page" /> object using a type and a resource name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-484"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>从通过 WebResource.axd HTTP 处理程序的程序集访问已编译的资源时使用方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-484">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method is used when accessing compiled-in resources from assemblies through the WebResource.axd HTTP handler.</span></span> <span data-ttu-id="1068c-485"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>方法注册的脚本<xref:System.Web.UI.Page>对象，并可以防止重复的脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-485">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method registers the script with the <xref:System.Web.UI.Page> object and prevents duplicate scripts.</span></span> <span data-ttu-id="1068c-486">此方法将与该资源 URL 的内容包装`<script>`元素块。</span><span class="sxs-lookup"><span data-stu-id="1068c-486">This method wraps the contents of the resource URL with a `<script>` element block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-487">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-487">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 <span data-ttu-id="1068c-488">下面的代码示例演示如何以编程方式应用<xref:System.Web.UI.WebResourceAttribute>用于标记将提供服务的资源的程序集的元数据属性。</span><span class="sxs-lookup"><span data-stu-id="1068c-488">The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served.</span></span>  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 <span data-ttu-id="1068c-489">此示例需要名为的 JavaScript 文件`Script_include.js`，具有以下内容：</span><span class="sxs-lookup"><span data-stu-id="1068c-489">This example requires a JavaScript file named `Script_include.js`, with the following contents:</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 <span data-ttu-id="1068c-490">编译`Script_include.js`文件中的资源作为`Samples.AspNet.CS.Controls`包含程序集`ClientScriptResourceLabel`类。</span><span class="sxs-lookup"><span data-stu-id="1068c-490">Compile the `Script_include.js` file as a resource in the `Samples.AspNet.CS.Controls` assembly that contains the `ClientScriptResourceLabel` class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1068c-491">客户端资源名称为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-491">The client resource name is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="1068c-492">\- 或 -</span><span class="sxs-lookup"><span data-stu-id="1068c-492">\- or -</span></span>  
  
 <span data-ttu-id="1068c-493">客户端资源名称长度为零。</span><span class="sxs-lookup"><span data-stu-id="1068c-493">The client resource name has a length of zero.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterExpandoAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1068c-494">将名称/值对注册为指定控件的自定义 (expando) 特性。</span><span class="sxs-lookup"><span data-stu-id="1068c-494">Registers a name/value pair as a custom (expando) attribute of the specified control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="controlId"><span data-ttu-id="1068c-495">页中包含自定义特性的 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-495">The <see cref="T:System.Web.UI.Control" /> on the page that contains the custom attribute.</span></span></param>
        <param name="attributeName"><span data-ttu-id="1068c-496">要注册的自定义特性的名称。</span><span class="sxs-lookup"><span data-stu-id="1068c-496">The name of the custom attribute to register.</span></span></param>
        <param name="attributeValue"><span data-ttu-id="1068c-497">自定义特性的值。</span><span class="sxs-lookup"><span data-stu-id="1068c-497">The value of the custom attribute.</span></span></param>
        <summary><span data-ttu-id="1068c-498">将名称/值对注册为给定了控件 ID、特性名和特性值的指定控件的自定义 (expando) 特性。</span><span class="sxs-lookup"><span data-stu-id="1068c-498">Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, attribute name, and attribute value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-499"><xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>方法注册的名称/值对，对指定的自定义 (expando) 特性<xref:System.Web.UI.Control>。</span><span class="sxs-lookup"><span data-stu-id="1068c-499">The <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>.</span></span> <span data-ttu-id="1068c-500">Expando 属性是动态设置从 JavaScript 保持与呈现的控件的标记 XHTML 兼容性。</span><span class="sxs-lookup"><span data-stu-id="1068c-500">The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.</span></span> <span data-ttu-id="1068c-501">引号和自定义 (expando) 特性值中的反斜杠进行转义。</span><span class="sxs-lookup"><span data-stu-id="1068c-501">Quotes and backslashes in the custom (expando) attribute's values are escaped.</span></span> <span data-ttu-id="1068c-502">如果您不需要进行转义引号和反斜杠，调用<xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>重载方法，并设置`encode`参数`false`。</span><span class="sxs-lookup"><span data-stu-id="1068c-502">If you do not want to escape quotes and backslashes, call the <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> overload method and set the `encode` parameter to `false`.</span></span>  
  
 <span data-ttu-id="1068c-503">如果未找到 expando 属性或者未找到要添加到 expando 特性的控件，仍发出客户端脚本，但它将不会影响该控件。</span><span class="sxs-lookup"><span data-stu-id="1068c-503">If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String, encode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="controlId"><span data-ttu-id="1068c-504">页中包含自定义特性的 <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-504">The <see cref="T:System.Web.UI.Control" /> on the page that contains the custom attribute.</span></span></param>
        <param name="attributeName"><span data-ttu-id="1068c-505">要注册的自定义特性的名称。</span><span class="sxs-lookup"><span data-stu-id="1068c-505">The name of the custom attribute to register.</span></span></param>
        <param name="attributeValue"><span data-ttu-id="1068c-506">自定义特性的值。</span><span class="sxs-lookup"><span data-stu-id="1068c-506">The value of the custom attribute.</span></span></param>
        <param name="encode"><span data-ttu-id="1068c-507">指示是否对要注册的自定义特性进行编码布尔值。</span><span class="sxs-lookup"><span data-stu-id="1068c-507">A Boolean value indicating whether to encode the custom attribute to register.</span></span></param>
        <summary><span data-ttu-id="1068c-508">在给定了控件 ID、特性名称、特性值以及指示是否对特性值进行编码的布尔值的情况下，将名称/值对注册为指定控件的自定义 (expando) 特性。</span><span class="sxs-lookup"><span data-stu-id="1068c-508">Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, an attribute name, an attribute value, and a Boolean value indicating whether to encode the attribute value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-509"><xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>方法注册的名称/值对，对指定的自定义 (expando) 特性<xref:System.Web.UI.Control>。</span><span class="sxs-lookup"><span data-stu-id="1068c-509">The <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>.</span></span> <span data-ttu-id="1068c-510">Expando 属性是动态设置从 JavaScript 保持与呈现的控件的标记 XHTML 兼容性。</span><span class="sxs-lookup"><span data-stu-id="1068c-510">The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.</span></span> <span data-ttu-id="1068c-511">设置`encode`参数`true`如果你需要进行转义引号和 expando 属性的值中的反斜杠。</span><span class="sxs-lookup"><span data-stu-id="1068c-511">Set the `encode` parameter to `true` if you need to escape quotes and backslashes in your expando attribute's value.</span></span>  
  
 <span data-ttu-id="1068c-512">如果未找到 expando 属性或者未找到要添加到 expando 特性的控件，仍发出客户端脚本，但它将不会影响该控件。</span><span class="sxs-lookup"><span data-stu-id="1068c-512">If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-513">下面的代码示例演示如何使用<xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>方法<xref:System.Web.UI.ClientScriptManager>类。</span><span class="sxs-lookup"><span data-stu-id="1068c-513">The following code example demonstrates how to use the <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> method of the <xref:System.Web.UI.ClientScriptManager> class.</span></span> <span data-ttu-id="1068c-514">中的呈现的页面集的客户端脚本`title`属性`<span>`元素。</span><span class="sxs-lookup"><span data-stu-id="1068c-514">The client script in the rendered page sets the `title` attribute of a `<span>` element.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/cs/clientscriptexpando.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/vb/clientscriptexpando.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterForEventValidation">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1068c-515">为验证注册事件引用。</span><span class="sxs-lookup"><span data-stu-id="1068c-515">Registers an event reference for validation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="1068c-516">表示生成事件的客户端控件的唯一 ID。</span><span class="sxs-lookup"><span data-stu-id="1068c-516">A unique ID representing the client control generating the event.</span></span></param>
        <summary><span data-ttu-id="1068c-517">使用唯一控件 ID（表示生成事件的客户端控件）注册事件引用以进行验证。</span><span class="sxs-lookup"><span data-stu-id="1068c-517">Registers an event reference for validation with a unique control ID representing the client control generating the event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-518">有关详细信息和示例，请参阅<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-518">For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-519">下面的示例演示如何使用<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>方法和<xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A>方法，以注册一个回调以验证，以及如何验证回调源自于该页面。</span><span class="sxs-lookup"><span data-stu-id="1068c-519">The following example shows how to use the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method in order to register a callback for validation, and how to validate that the callback originated from the page.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/eventvalidation2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/eventvalidation2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (options As PostBackOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::Web::UI::PostBackOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="1068c-520"><see cref="T:System.Web.UI.PostBackOptions" /> 对象指定生成客户端 JavaScript 以启动回发事件的方式。</span><span class="sxs-lookup"><span data-stu-id="1068c-520">A <see cref="T:System.Web.UI.PostBackOptions" /> object that specifies how client JavaScript is generated to initiate a postback event.</span></span></param>
        <summary><span data-ttu-id="1068c-521">通过 <see cref="T:System.Web.UI.PostBackOptions" /> 为验证注册事件引用。</span><span class="sxs-lookup"><span data-stu-id="1068c-521">Registers an event reference for validation with <see cref="T:System.Web.UI.PostBackOptions" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-522">有关详细信息和示例，请参阅<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-522">For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.ValidateEvent" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="1068c-523">表示生成事件的客户端控件的唯一 ID。</span><span class="sxs-lookup"><span data-stu-id="1068c-523">A unique ID representing the client control generating the event.</span></span></param>
        <param name="argument"><span data-ttu-id="1068c-524">随客户端事件传递的事件参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-524">Event arguments passed with the client event.</span></span></param>
        <summary><span data-ttu-id="1068c-525">使用唯一控件 ID 和事件参数（表示生成事件的客户端控件）注册事件引用以进行验证。</span><span class="sxs-lookup"><span data-stu-id="1068c-525">Registers an event reference for validation with a unique control ID and event arguments representing the client control generating the event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1068c-526">下面的代码示例演示如何使用<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>方法和<xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A>方法来注册一个回调以验证和验证回调源自于该页面。</span><span class="sxs-lookup"><span data-stu-id="1068c-526">The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method to register a callback for validation and to validate that the callback originated from the page.</span></span> <span data-ttu-id="1068c-527">若要验证的示例所示对其进行改进，无法修改验证`argument`参数以包含特定于如标识或角色用户的信息</span><span class="sxs-lookup"><span data-stu-id="1068c-527">To improve on the validation shown in the example, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 <span data-ttu-id="1068c-528">下面的代码示例演示如何使用<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>方法注册验证回调。</span><span class="sxs-lookup"><span data-stu-id="1068c-528">The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method to register a callback for validation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1068c-529">在调用 <see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" /> 方法之前调用此方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-529">The method is called prior to the <see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" /> method.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterHiddenField (hiddenFieldName As String, hiddenFieldInitialValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterHiddenField(System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hiddenFieldName"><span data-ttu-id="1068c-530">要注册的隐藏字段的名称。</span><span class="sxs-lookup"><span data-stu-id="1068c-530">The name of the hidden field to register.</span></span></param>
        <param name="hiddenFieldInitialValue"><span data-ttu-id="1068c-531">要注册的字段的初始值。</span><span class="sxs-lookup"><span data-stu-id="1068c-531">The initial value of the field to register.</span></span></param>
        <summary><span data-ttu-id="1068c-532">向 <see cref="T:System.Web.UI.Page" /> 对象注册一个隐藏值。</span><span class="sxs-lookup"><span data-stu-id="1068c-532">Registers a hidden value with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-533"><xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A>方法创建一个隐藏`<input>`上呈现的 HTML 页面的元素。</span><span class="sxs-lookup"><span data-stu-id="1068c-533">The <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> method creates a hidden `<input>` element on the rendered HTML page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-534">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>和<xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-534">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> and <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> methods.</span></span> <span data-ttu-id="1068c-535">该示例注册数组和一个隐藏的值，并定义`OnClick`事件`<input>`按钮以对其求和的两个值的数组和隐藏的值。</span><span class="sxs-lookup"><span data-stu-id="1068c-535">The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1068c-536"><paramref name="hiddenFieldName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-536"><paramref name="hiddenFieldName" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.WebControls.HiddenField" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public void RegisterOnSubmitStatement (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterOnSubmitStatement(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterOnSubmitStatement(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="1068c-537">要注册的 OnSubmit 语句的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-537">The type of the OnSubmit statement to register.</span></span></param>
        <param name="key"><span data-ttu-id="1068c-538">要注册的 OnSubmit 语句的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-538">The key of the OnSubmit statement to register.</span></span></param>
        <param name="script"><span data-ttu-id="1068c-539">要注册的 OnSubmit 语句的脚本文本。</span><span class="sxs-lookup"><span data-stu-id="1068c-539">The script literal of the OnSubmit statement to register.</span></span></param>
        <summary><span data-ttu-id="1068c-540">使用类型、键和脚本文本向 <see cref="T:System.Web.UI.Page" /> 对象注册 OnSubmit 语句。</span><span class="sxs-lookup"><span data-stu-id="1068c-540">Registers an OnSubmit statement with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a script literal.</span></span> <span data-ttu-id="1068c-541">该语句在提交 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 时执行。</span><span class="sxs-lookup"><span data-stu-id="1068c-541">The statement executes when the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> is submitted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-542">由它的键和其类型唯一标识某 OnSubmit 语句。</span><span class="sxs-lookup"><span data-stu-id="1068c-542">An OnSubmit statement is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-543">语句具有相同键和类型均被视为重复。</span><span class="sxs-lookup"><span data-stu-id="1068c-543">Statements with the same key and type are considered duplicates.</span></span> <span data-ttu-id="1068c-544">可以使用页注册只有一条语句与给定的类型和密钥对。</span><span class="sxs-lookup"><span data-stu-id="1068c-544">Only one statement with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="1068c-545">尝试注册已注册的语句不会创建重复的语句。</span><span class="sxs-lookup"><span data-stu-id="1068c-545">Attempting to register a statement that is already registered will not create a duplicate of the statement.</span></span>  
  
 <span data-ttu-id="1068c-546">调用<xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>方法来确定是否可以使用给定的键和类型对已注册某 OnSubmit 语句，从而避免不必要地尝试添加该脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-546">Call the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method to determine whether an OnSubmit statement is already registered with a given key and type pair and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="1068c-547">`script`参数<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>方法可包含多个脚本命令，只要它们是正确分隔用分号 （;）。</span><span class="sxs-lookup"><span data-stu-id="1068c-547">The `script` parameter of the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method can contain multiple script commands as long as they are properly delimited with a semicolon (;).</span></span>  
  
 <span data-ttu-id="1068c-548"><xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>添加一个页面提交并使你能够取消提交之前执行的脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-548">The <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> adds a script that is executed before the page is submitted and gives you an opportunity to cancel the submission.</span></span>  
  
 <span data-ttu-id="1068c-549">有关 HTML 窗体上的详细信息和`OnSubmit`属性，请参阅[World Wide Web Consortium (W3C) 网站](http://go.microsoft.com/fwlink/?linkid=37125)。</span><span class="sxs-lookup"><span data-stu-id="1068c-549">For more information on HTML forms and the `OnSubmit` attribute, see the [World Wide Web Consortium (W3C) Web site](http://go.microsoft.com/fwlink/?linkid=37125).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-550">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-550">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1068c-551"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-551"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.HtmlControls.HtmlForm" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1068c-552">向 <see cref="T:System.Web.UI.Page" /> 对象注册启动脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-552">Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="1068c-553">要注册的启动脚本的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-553">The type of the startup script to register.</span></span></param>
        <param name="key"><span data-ttu-id="1068c-554">要注册的启动脚本的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-554">The key of the startup script to register.</span></span></param>
        <param name="script"><span data-ttu-id="1068c-555">要注册的启动脚本文本。</span><span class="sxs-lookup"><span data-stu-id="1068c-555">The startup script literal to register.</span></span></param>
        <summary><span data-ttu-id="1068c-556">使用类型、键和脚本文本向 <see cref="T:System.Web.UI.Page" /> 对象注册启动脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-556">Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a script literal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-557">由它的键和其类型唯一地标识客户端脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-557">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-558">具有相同键和类型的脚本被视为重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-558">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="1068c-559">只有一个具有给定的类型和密钥对的脚本可以注册页。</span><span class="sxs-lookup"><span data-stu-id="1068c-559">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="1068c-560">尝试注册已注册的脚本不会创建重复的脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-560">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="1068c-561">调用<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>方法来确定是否已注册给定的键和类型对的启动脚本，从而避免不必要地尝试添加该脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-561">Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="1068c-562">中的此重载<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法，你必须确保中提供的脚本`script`使用包装参数`<script>`元素块。</span><span class="sxs-lookup"><span data-stu-id="1068c-562">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you must make sure that the script provided in the `script` parameter is wrapped with a `<script>` element block.</span></span>  
  
 <span data-ttu-id="1068c-563">通过添加脚本块<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法执行时在页面完成加载，但在该页面的之前<xref:System.Web.UI.Control.OnLoad%2A>引发事件。</span><span class="sxs-lookup"><span data-stu-id="1068c-563">The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised.</span></span> <span data-ttu-id="1068c-564">不保证的脚本块都是在它们注册的顺序中的输出。</span><span class="sxs-lookup"><span data-stu-id="1068c-564">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="1068c-565">如果脚本块的顺序很重要，则使用<xref:System.Text.StringBuilder>对象，以便在单个字符串中，将脚本收集到一起，然后将单个客户端脚本块中所有注册它们。</span><span class="sxs-lookup"><span data-stu-id="1068c-565">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-566">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-566">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.</span></span> <span data-ttu-id="1068c-567">请注意，在包含开始标记和结束脚本标记`script`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-567">Note that the beginning and closing script tags are included within the `script` parameter.</span></span> <span data-ttu-id="1068c-568">使脚本标记添加基于其他参数的设置，请参阅<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-568">To have the script tags added based on an additional parameter setting, see the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="1068c-569">要注册的启动脚本的类型。</span><span class="sxs-lookup"><span data-stu-id="1068c-569">The type of the startup script to register.</span></span></param>
        <param name="key"><span data-ttu-id="1068c-570">要注册的启动脚本的键。</span><span class="sxs-lookup"><span data-stu-id="1068c-570">The key of the startup script to register.</span></span></param>
        <param name="script"><span data-ttu-id="1068c-571">要注册的启动脚本文本。</span><span class="sxs-lookup"><span data-stu-id="1068c-571">The startup script literal to register.</span></span></param>
        <param name="addScriptTags"><span data-ttu-id="1068c-572">指示是否添加脚本标记的布尔值。</span><span class="sxs-lookup"><span data-stu-id="1068c-572">A Boolean value indicating whether to add script tags.</span></span></param>
        <summary><span data-ttu-id="1068c-573">使用类型、键、脚本文本和指示是否添加脚本标记的布尔值向 <see cref="T:System.Web.UI.Page" /> 对象注册启动脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-573">Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, a script literal, and a Boolean value indicating whether to add script tags.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1068c-574">由它的键和其类型唯一标识的启动脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-574">A startup script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="1068c-575">具有相同键和类型的脚本被视为重复项。</span><span class="sxs-lookup"><span data-stu-id="1068c-575">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="1068c-576">只有一个具有给定的类型和密钥对的脚本可以注册页。</span><span class="sxs-lookup"><span data-stu-id="1068c-576">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="1068c-577">尝试注册已注册的脚本不会创建重复的脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-577">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="1068c-578">调用<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>方法来确定是否已注册给定的键和类型对的启动脚本，从而避免不必要地尝试添加该脚本。</span><span class="sxs-lookup"><span data-stu-id="1068c-578">Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="1068c-579">中的此重载<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法，你可以指示是否中提供的脚本`script`使用包装参数`<script>`元素块的方法是使用`addScriptTags`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-579">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter.</span></span> <span data-ttu-id="1068c-580">设置`addScriptTags`到`true`指示脚本标记将会自动添加。</span><span class="sxs-lookup"><span data-stu-id="1068c-580">Setting `addScriptTags` to `true` indicates that script tags will be added automatically.</span></span>  
  
 <span data-ttu-id="1068c-581">通过添加脚本块<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法执行时在页面完成加载，但在该页面的之前<xref:System.Web.UI.Control.OnLoad%2A>引发事件。</span><span class="sxs-lookup"><span data-stu-id="1068c-581">The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised.</span></span> <span data-ttu-id="1068c-582">不保证的脚本块都是在它们注册的顺序中的输出。</span><span class="sxs-lookup"><span data-stu-id="1068c-582">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="1068c-583">如果脚本块的顺序很重要，则使用<xref:System.Text.StringBuilder>对象，以便在单个字符串中，将脚本收集到一起，然后将单个客户端脚本块中所有注册它们。</span><span class="sxs-lookup"><span data-stu-id="1068c-583">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1068c-584">下面的代码示例演示如何将<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1068c-584">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.</span></span> <span data-ttu-id="1068c-585">请注意，`addScriptTags`参数设置为`false`使开始和结束脚本标记为附带`script`参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-585">Note that the `addScriptTags` parameter is set to `false` so the beginning and closing script tags are included with the `script` parameter.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1068c-586"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1068c-586"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
        <altmember cref="F:System.Web.UI.HtmlTextWriterTag.Script" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateEvent">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1068c-587">验证客户端事件。</span><span class="sxs-lookup"><span data-stu-id="1068c-587">Validates a client event.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="1068c-588">表示生成事件的客户端控件的唯一 ID。</span><span class="sxs-lookup"><span data-stu-id="1068c-588">A unique ID representing the client control generating the event.</span></span></param>
        <summary><span data-ttu-id="1068c-589">验证使用 <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /> 方法为事件验证注册的客户端事件。</span><span class="sxs-lookup"><span data-stu-id="1068c-589">Validates a client event that was registered for event validation using the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="1068c-590">表示生成事件的客户端控件的唯一 ID。</span><span class="sxs-lookup"><span data-stu-id="1068c-590">A unique ID representing the client control generating the event.</span></span></param>
        <param name="argument"><span data-ttu-id="1068c-591">随客户端事件传递的事件参数。</span><span class="sxs-lookup"><span data-stu-id="1068c-591">The event arguments passed with the client event.</span></span></param>
        <summary><span data-ttu-id="1068c-592">验证使用 <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> 方法为事件验证注册的客户端事件。</span><span class="sxs-lookup"><span data-stu-id="1068c-592">Validates a client event that was registered for event validation using the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1068c-593">下面的代码示例演示如何使用<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>方法和<xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A>方法来注册一个回调以验证和验证回调源自于该页面。</span><span class="sxs-lookup"><span data-stu-id="1068c-593">The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method to register a callback for validation and to validate that the callback originated from the page.</span></span> <span data-ttu-id="1068c-594">若要改善此处显示的验证，无法修改验证`argument`参数以包含特定于如标识或角色用户的信息</span><span class="sxs-lookup"><span data-stu-id="1068c-594">To improve on the validation shown here, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1068c-595"><paramref name="uniqueId" /> 为 <see langword="null" /> 或空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="1068c-595"><paramref name="uniqueId" /> is <see langword="null" /> or an empty string ("").</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>