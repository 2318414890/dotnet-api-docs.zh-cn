<Type Name="ServiceReference" FullName="System.Web.UI.ServiceReference">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9182e0544183cc8ac752fa280684c3b012b33db" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36575685" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceReference" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceReference extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ServiceReference" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceReference" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceReference" />
  <TypeSignature Language="F#" Value="type ServiceReference = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Path")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>注册要在网页中使用的 Web 服务。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要从 ECMAScript (JavaScript) 调用 Web 服务方法，你必须在 ASP.NET 页中包含的服务引用，并将应用<xref:System.Web.Script.Services.ScriptServiceAttribute>属性设为 Web 服务类定义。 如果包括对中的 Web 服务的服务引用<xref:System.Web.UI.ScriptManager>或<xref:System.Web.UI.ScriptManagerProxy>ASP.NET 页中，对象将在浏览器中实例化的 JavaScript 控件。  
  
 代理对象将用于执行以下操作：  
  
-   向 Web 服务方法，在 JavaScript 中发出异步请求  
  
-   初始化的代理服务器数据类型的实例以专门用作调用 Web 方法的输入参数。  
  
> [!NOTE]
>  <xref:System.Web.UI.ServiceReference>控件仅用于相同的域中的服务。  
  
 你可以通过添加以声明方式定义的 Web 服务位置`<asp:ServiceReference>`元素`<Services>`内的元素`<asp:ScriptManager>`元素上的页上，然后设置其<xref:System.Web.UI.ServiceReference.Path%2A>特性，如下面的示例中所示。  
  
```  
<asp:ScriptManager runat="server" ID="scriptManager">  
  <Services>  
    <asp:ServiceReference Path="~/WebServices/SimpleWebService.asmx" />  
  </Services>  
</asp:ScriptManager>  
```  
  
 你可以使用<xref:System.Web.UI.ServiceReference.InlineScript%2A>属性指示是否将代理生成脚本包含在作为内联脚本块页中或通过单独的请求获取。  
  
 你可以以编程方式添加<xref:System.Web.UI.ServiceReference>对象通过<xref:System.Web.UI.ScriptManager.Services%2A?displayProperty=nameWithType>或<xref:System.Web.UI.ScriptManagerProxy.Services%2A?displayProperty=nameWithType>使用进行收集<xref:System.Collections.ObjectModel.Collection%601.Add%2A>方法<xref:System.Web.UI.ServiceReferenceCollection>类。  
  
   
  
## Examples  
 下面的示例演示如何从脚本调用 Web 服务方法的页标记中添加到 Web 服务的引用。  
  
 [!code-aspx-csharp[System.Web.Script.Services.ScriptMethodAttribute#5](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Services.ScriptMethodAttribute/CS/Default.aspx#5)]
 [!code-aspx-vb[System.Web.Script.Services.ScriptMethodAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Services.ScriptMethodAttribute/VB/Default.aspx#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.ServiceReference" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ServiceReference.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceReference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.ServiceReference" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ServiceReference.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ServiceReference : string -&gt; System.Web.UI.ServiceReference" Usage="new System.Web.UI.ServiceReference path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Web 服务的位置。</param>
        <summary>使用指定的路径初始化 <see cref="T:System.Web.UI.ServiceReference" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProxyScript">
      <MemberSignature Language="C#" Value="protected internal virtual string GetProxyScript (System.Web.UI.ScriptManager scriptManager, System.Web.UI.Control containingControl);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string GetProxyScript(class System.Web.UI.ScriptManager scriptManager, class System.Web.UI.Control containingControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ServiceReference.GetProxyScript(System.Web.UI.ScriptManager,System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ GetProxyScript(System::Web::UI::ScriptManager ^ scriptManager, System::Web::UI::Control ^ containingControl);" />
      <MemberSignature Language="F#" Value="abstract member GetProxyScript : System.Web.UI.ScriptManager * System.Web.UI.Control -&gt; string&#xA;override this.GetProxyScript : System.Web.UI.ScriptManager * System.Web.UI.Control -&gt; string" Usage="serviceReference.GetProxyScript (scriptManager, containingControl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptManager" Type="System.Web.UI.ScriptManager" />
        <Parameter Name="containingControl" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="scriptManager">页面上的 <see cref="T:System.Web.UI.ScriptManager" /> 控件。</param>
        <param name="containingControl">
          <see cref="T:System.Web.UI.Control" /> 对象。</param>
        <summary>提供可作为自定义项被重写的派生 <see cref="T:System.Web.UI.ServiceReference" /> 对象中的代理脚本。</summary>
        <returns>代理脚本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `containingControl`参数是<xref:System.Web.UI.ScriptManager>对象或<xref:System.Web.UI.ScriptManagerProxy>对象在其上的<xref:System.Web.UI.ServiceReference>定义对象。 相对 URL 解析，应作为基础使用它。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProxyUrl">
      <MemberSignature Language="C#" Value="protected internal virtual string GetProxyUrl (System.Web.UI.ScriptManager scriptManager, System.Web.UI.Control containingControl);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string GetProxyUrl(class System.Web.UI.ScriptManager scriptManager, class System.Web.UI.Control containingControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ServiceReference.GetProxyUrl(System.Web.UI.ScriptManager,System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ GetProxyUrl(System::Web::UI::ScriptManager ^ scriptManager, System::Web::UI::Control ^ containingControl);" />
      <MemberSignature Language="F#" Value="abstract member GetProxyUrl : System.Web.UI.ScriptManager * System.Web.UI.Control -&gt; string&#xA;override this.GetProxyUrl : System.Web.UI.ScriptManager * System.Web.UI.Control -&gt; string" Usage="serviceReference.GetProxyUrl (scriptManager, containingControl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptManager" Type="System.Web.UI.ScriptManager" />
        <Parameter Name="containingControl" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="scriptManager">页面上的 <see cref="T:System.Web.UI.ScriptManager" /> 控件。</param>
        <param name="containingControl">
          <see cref="T:System.Web.UI.Control" /> 对象。</param>
        <summary>提供可作为自定义项被重写的派生 <see cref="T:System.Web.UI.ServiceReference" /> 对象中的代理 URL。</summary>
        <returns>一个代理 URL。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `containingControl`参数是<xref:System.Web.UI.ScriptManager>对象或<xref:System.Web.UI.ScriptManagerProxy>对象在其上的<xref:System.Web.UI.ServiceReference>对象定义和应用于相对 URL 解析为基础。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InlineScript">
      <MemberSignature Language="C#" Value="public virtual bool InlineScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InlineScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ServiceReference.InlineScript" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property InlineScript As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool InlineScript { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InlineScript : bool with get, set" Usage="System.Web.UI.ServiceReference.InlineScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是将代理生成脚本作为内联脚本块包含在页上还是通过单独的请求获取。</summary>
        <value>如果代理生成脚本作为内联脚本块包含在页上，则为 <see langword="true" />；如果通过单独的请求获取代理生成脚本，则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Web.UI.ServiceReference.InlineScript%2A>属性未声明，则默认值为`false`。  
  
 当<xref:System.Web.UI.ServiceReference.InlineScript%2A>设置为`false`，用于生成 ECMAScript (JavaScript) 代理脚本为单独的脚本文件下载到服务器的其他请求的。 如果你使用浏览器缓存，则此选项很有用，当多个网页使用相同的服务引用。  
  
 当<xref:System.Web.UI.ServiceReference.InlineScript%2A>设置为`true`、 脚本时，作为内联脚本块在页中包含在代理生成。 通过减少的网络请求数，尤其是在页中有多个服务引用，而其他页不引用相同的服务，这可以提高服务器性能。 此外，<xref:System.Web.UI.ServiceReference.Path%2A>属性必须设置为相对路径时<xref:System.Web.UI.ServiceReference.InlineScript%2A>设置为`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public virtual string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ServiceReference.Path" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Web.UI.ServiceReference.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置引用的 Web 服务的路径。</summary>
        <value>引用的 Web 服务的路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ServiceReference.Path%2A>属性可以指向本地 Web 服务。 换而言之，此属性仅可以指向与启用了 AJAX 的 ASP.NET Web 应用程序相同的域中的 Web 服务。 <xref:System.Web.UI.ServiceReference.Path%2A> 可以是相对、 相对于应用程序、 域相对或绝对路径。  
  
 如果<xref:System.Web.UI.ServiceReference.InlineScript%2A>属性设置为`true`，则必须使用指向相同的 Web 应用程序作为包含的页的相对路径<xref:System.Web.UI.ServiceReference>实例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ServiceReference.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="serviceReference.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个字符串，该字符串表示 <see cref="P:System.Web.UI.ServiceReference.Path" /> 属性或类型名称的值。</summary>
        <returns>如果已定义，则为 <see cref="P:System.Web.UI.ServiceReference.Path" /> 属性的值；否则为该类的 <see cref="P:System.Reflection.MemberInfo.Name" /> 属性值。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>