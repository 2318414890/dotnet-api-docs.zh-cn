<Type Name="HtmlTextWriter" FullName="System.Web.UI.HtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d3a8fb2f7e2f68d7ac988952a27d646a631b2924" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34255038" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HtmlTextWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HtmlTextWriter extends System.IO.TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlTextWriter&#xA;Inherits TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlTextWriter : System::IO::TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>将标记字符和文本写入 ASP.NET 服务器控件输出流。 此类提供 ASP.NET 服务器控件在向客户端呈现标记时使用的格式化功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter>类用于呈现到桌面浏览器的 HTML 4.0。 <xref:System.Web.UI.HtmlTextWriter>中的所有标记写入程序也都是基类<xref:System.Web.UI>命名空间，包括<xref:System.Web.UI.ChtmlTextWriter>， <xref:System.Web.UI.Html32TextWriter>，和<xref:System.Web.UI.XhtmlTextWriter>类。 这些类用于写入元素、 属性和不同类型的标记的样式和布局信息。 此外，通过与每个标记语言关联的页和控件适配器类使用这些类。  
  
 在大多数情况下，ASP.NET 自动使用的合适的编写器发出请求的设备。 但是，如果你创建的自定义文本编写器，或者你想要指定特定的编写器来呈现特定设备的某页，你必须将编写器映射到中的页`controlAdapters`的应用程序.browser 文件的部分。  
  
   
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Web.UI.Control.Render%2A>方法的自定义控件派生自<xref:System.Web.UI.Control>类。 该代码示例说明如何使用各种<xref:System.Web.UI.HtmlTextWriter>方法、 属性和字段。  
  
 [!code-csharp[MarkupTextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#1)]
 [!code-vb[MarkupTextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextWriter" />
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
    <altmember cref="T:System.Web.UI.Adapters.PageAdapter" />
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <altmember cref="T:System.Web.UI.Html32TextWriter" />
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
    <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.HtmlTextWriter" /> 类的新实例。</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">呈现标记内容的 <see cref="T:System.IO.TextWriter" /> 实例。</param>
        <summary>初始化使用默认制表符字符串的 <see cref="T:System.Web.UI.HtmlTextWriter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A>重载<xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29>构造函数使用<xref:System.Web.UI.HtmlTextWriter.DefaultTabString>常量需要某一行的缩进时。 它调用<xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29>重载将初始化新实例。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29>构造函数来创建自定义<xref:System.Web.UI.HtmlTextWriter>对象名为`StyledLabelHtmlWriter.`时`MyPage`自定义类，该类派生自<xref:System.Web.UI.Page>类中，客户端请求浏览器，它使用`StyledLabelHtmlWriter`类来显示其内容写入输出流。  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">呈现标记内容的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="tabString">用于呈现行缩进的字符串。</param>
        <summary>使用指定的制表符字符串字符初始化 <see cref="T:System.Web.UI.HtmlTextWriter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A>重载<xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29>构造函数使用`tabString`需要某一行的缩进时。 它调用<xref:System.IO.TextWriter.%23ctor%28System.IFormatProvider%29?displayProperty=nameWithType>基构造函数来初始化新实例。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29>构造函数来创建自定义<xref:System.Web.UI.HtmlTextWriter>对象名为`StyledLabelHtmlWriter.`时`MyPage`自定义类，该类派生自<xref:System.Web.UI.Page>类中，客户端请求浏览器，它使用`StyledLabelHtmlWriter`类来显示其内容写入输出流。  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将指定的标记属性和值添加到 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象创建的元素的开始标记，随后调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">包含要添加的属性名称的字符串。</param>
        <param name="value">包含要分配给该属性的值的字符串。</param>
        <summary>将指定的标记属性和值添加到 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象创建的元素的开始标记，随后调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>重载<xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29>方法如果该属性不是之一<xref:System.Web.UI.HtmlTextWriterAttribute>值，或如果直到运行时才知道该属性。  
  
 实例的任何给定的标记元素，<xref:System.Web.UI.HtmlTextWriter>类维护该元素的属性列表。 当<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>调用方法时，添加的任何属性<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法均会呈现给元素的开始标记。 然后清除中的属性的列表<xref:System.Web.UI.HtmlTextWriter>对象。  
  
 用于呈现标记元素的编码模式是，如下所示：  
  
-   使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法将任何属性添加到元素。  
  
-   使用 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 方法。  
  
-   根据需要使用其他方法来呈现元素的开始和结束标记之间找到的内容。  
  
-   使用 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 方法。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法之前调用<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>方法。 该代码调用的两个不同的重载<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>和两个不同重载<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>调用之前<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>方法呈现`<span>`元素写入输出流。 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29>方法用于定义自定义属性名为`CustomAttribute`和名为的自定义值`CustomAttributeValue`为`<span>`此代码将呈现的元素。  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">表示将标记属性添加到输出流的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />。</param>
        <param name="value">包含要分配给该属性的值的字符串。</param>
        <summary>将标记属性和属性值添加到 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象创建的元素的开始标记，随后调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>重载<xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29>方法呈现标准的标记特性。  
  
 实例的任何给定的标记元素，<xref:System.Web.UI.HtmlTextWriter>类维护该元素的属性列表。 当<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>调用方法时，通过添加任何属性<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法均会呈现给元素的开始标记。 然后清除中的属性的列表<xref:System.Web.UI.HtmlTextWriter>。  
  
 用于呈现标记元素的编码模式是，如下所示：  
  
-   使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法将任何属性添加到元素。  
  
-   使用 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 方法。  
  
-   根据需要使用其他方法来呈现元素的开始和结束标记之间找到的内容。  
  
-   使用 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>重载<xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29>方法将添加`Onclick`特性到标记元素，并将其值设置为以下 ECMAScript 代码：  
  
```  
alert('Hello');  
```  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#1)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value, bool fEndode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value, bool fEndode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String, fEndode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, bool fEndode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEndode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">包含要添加的属性名称的字符串。</param>
        <param name="value">包含要分配给该属性的值的字符串。</param>
        <param name="fEndode">若对属性及其值进行编码，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
        <summary>将指定的标记属性和值添加到 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象创建的元素的开始标记，随后使用可选编码调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>重载<xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>方法如果该属性不是之一<xref:System.Web.UI.HtmlTextWriterAttribute>值，或者直到运行的时和编码才知道该属性是否需要。  
  
 实例的任何给定的标记元素，<xref:System.Web.UI.HtmlTextWriter>类维护该元素的属性列表。 当<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>调用方法时，添加的任何属性<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法均会呈现给元素的开始标记。 然后清除中的属性的列表<xref:System.Web.UI.HtmlTextWriter>对象。  
  
 使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>方法替换`fEncode`设置为`true`，如果属性可能包含引号 （"）、 小于号 (<)，或与号 (&)。 方法调用将对要满足请求的设备的要求的属性进行编码。 你可以设置`fEncode`到`false`，如果你知道，将生成无这些字符，或者如果您知道已经属性进行了编码。  
 
如果属性类型，则`Style`，不会编码的值即使`fEndode`是`true`。 确保样式值 CSS 符合，并且不包含恶意代码。
  
 用于呈现标记元素的编码模式是，如下所示：  
  
-   使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法将任何属性添加到元素。  
  
-   使用 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 方法。  
  
-   根据需要使用其他方法来呈现元素的开始和结束标记之间找到的内容。  
  
-   使用 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>重载<xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>方法来确保名为的自定义特性`myattribute`，并且其值未编码为`<img>`元素。  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddAttribute (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddAttribute (name As String, value As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">包含要添加的属性名称的字符串。</param>
        <param name="value">包含要分配给该属性的值的字符串。</param>
        <param name="key">表示属性的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />。</param>
        <summary>将指定的标记属性、值以及 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 枚举值添加到 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象创建的元素的开始标记，随后调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>重载<xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterAttribute%29>方法从继承时，仅<xref:System.Web.UI.HtmlTextWriter>类。 它使您能够创建新`name`和`key`对的属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">表示将标记属性添加到输出流的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />。</param>
        <param name="value">包含要分配给该属性的值的字符串。</param>
        <param name="fEncode">若对属性及其值进行编码，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
        <summary>将标记属性和属性值添加到 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象创建的元素的开始标记中，随后使用可选编码调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>重载<xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29>方法呈现标准的标记特性，使用可选的编码。  
  
 实例的任何给定的标记元素，<xref:System.Web.UI.HtmlTextWriter>类维护该元素的属性列表。 当<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>调用方法时，添加的任何属性<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>均会呈现给元素的开始标记。 然后清除中的属性的列表<xref:System.Web.UI.HtmlTextWriter>对象。  
  
 使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29>方法替换`fEncode`设置为`true`，如果属性可能包含引号 （"）、 小于号 (<)，或与号 (&)。 方法调用将对要满足请求的设备的要求的属性进行编码。 你可以设置`fEncode`到`false`，如果你知道，将生成无这些字符，或者如果您知道已经属性进行了编码。  
 
 如果属性类型，则`Style`，不会编码的值即使`fEncode`是`true`。 确保样式值 CSS 符合，并且不包含恶意代码。

  
 用于呈现标记元素的编码模式是，如下所示：  
  
-   使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法将任何属性添加到元素。  
  
-   使用 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 方法。  
  
-   根据需要使用其他方法来呈现元素的开始和结束标记之间找到的内容。  
  
-   使用 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29>方法来确保分配给的字符串值`Alt`属性，则为`<img>`元素编码为请求的设备。  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将标记样式属性添加到 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象创建的元素的开始标记，随后调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法。</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">包含要添加的样式属性的字符串。</param>
        <param name="value">包含要分配给该属性的值的字符串。</param>
        <summary>对于通过对 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法的后续调用创建的开始标记，向其中添加指定的标记样式属性和属性值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>重载<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29>方法样式不是的成员时<xref:System.Web.UI.HtmlTextWriterStyle>枚举或直到运行时才知道。  
  
 <xref:System.Web.UI.HtmlTextWriter>类维护它呈现标记元素的样式的列表。 当<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>调用方法时，通过添加任何样式<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>方法均会呈现给元素的开始标记。 然后清除样式的列表。  
  
 用于呈现标记元素的编码模式是，如下所示：  
  
-   使用<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>方法可添加任何样式属性的元素。  
  
-   使用 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 方法。  
  
-   根据需要使用其他方法来呈现元素的开始和结束标记之间找到的内容。  
  
-   使用 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>重载<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29>方法呈现`font-size`和`color`上样式特性`<p>`元素。 此代码示例使用<xref:System.Web.UI.HtmlTextWriter>类来呈现控件的内容。  
  
 [!code-cpp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CPP/htmltextwriter_addstyleattribute.cpp#1)]
 [!code-csharp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CS/htmltextwriter_addstyleattribute.cs#1)]
 [!code-vb[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/VB/htmltextwriter_addstyleattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (System.Web.UI.HtmlTextWriterStyle key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (key As HtmlTextWriterStyle, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::Web::UI::HtmlTextWriterStyle key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">表示将样式属性添加到输出流的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />。</param>
        <param name="value">包含要分配给该属性的值的字符串。</param>
        <summary>对于通过对 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 方法的后续调用而创建的开始标记，向其中添加与指定的 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 值相关联的标记样式属性和属性值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>重载<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%29>方法样式时<xref:System.Web.UI.HtmlTextWriterStyle>枚举和在运行时之前已知。  
  
 <xref:System.Web.UI.HtmlTextWriter>类维护它呈现标记元素的样式的列表。 当<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>调用方法时，添加的任何样式<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>方法均会呈现给元素的开始标记。 然后清除样式的列表。  
  
 用于呈现标记元素的编码模式是，如下所示：  
  
-   使用<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>方法可添加任何样式属性的元素。  
  
-   使用 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 方法。  
  
-   根据需要使用其他方法来呈现元素的开始和结束标记之间找到的内容。  
  
-   使用 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用的重写的一部分<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>从派生类中的方法<xref:System.Web.UI.HtmlTextWriter>类。 代码将检查是否`<Label>`元素呈现。 如果是这样，<xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A>方法调用以检查是否`Color`已定义的样式属性`<Label>`元素。 如果`Color`未定义属性，该代码调用的此重载<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>方法将添加`Color`到样式属性，属性，然后将其值设置为`red`。  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddStyleAttribute (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddStyleAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddStyleAttribute (name As String, value As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">包含要添加的样式属性的字符串。</param>
        <param name="value">包含要分配给该属性的值的字符串。</param>
        <param name="key">表示要添加的样式属性的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />。</param>
        <summary>对于通过对 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 方法的后续调用而创建的开始标记，向其中添加指定的标记样式属和属性值以及 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 枚举值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>重载<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterStyle%29>方法从继承时，仅<xref:System.Web.UI.HtmlTextWriter>类。 它使您能够创建新`name`和`value`对为<xref:System.Web.UI.HtmlTextWriterStyle>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="BeginRender">
      <MemberSignature Language="C#" Value="public virtual void BeginRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginRender();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象或派生类的对象，将会呈现某个控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter>类实现<xref:System.Web.UI.HtmlTextWriter.BeginRender%2A>方法没有任何功能。 必须重写<xref:System.Web.UI.HtmlTextWriter.BeginRender%2A>从派生类中的方法<xref:System.Web.UI.HtmlTextWriter>以提供您自己的呈现功能。 例如，在可能需要的标记语言`<p>`元素靠某控件，但位置之前立即呈现需`<p>`以前确定元素，则可以使用<xref:System.Web.UI.HtmlTextWriter.BeginRender%2A>重写。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象并释放与之关联的所有系统资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此实现的<xref:System.Web.UI.HtmlTextWriter.Close%2A>方法调用<xref:System.IO.TextWriter.Close%2A?displayProperty=nameWithType>基方法。  
  
 在调用<xref:System.Web.UI.HtmlTextWriter.Close%2A>方法、 任何操作<xref:System.Web.UI.HtmlTextWriter>对象可能会引发异常，因为已发布所有资源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.IO.TextWriter.Close" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DefaultTabString">
      <MemberSignature Language="C#" Value="public const string DefaultTabString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultTabString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultTabString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultTabString;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示单个制表符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由 ASCII 9 字符表示单个选项卡。  
  
   
  
## Examples  
 下面的代码示例演示如何创建的构造函数的<xref:System.IO.TextWriter>对象作为参数，并将<xref:System.Web.UI.HtmlTextWriter.DefaultTabString>字段作为参数传递到构造函数的第二个版本。 当从代码中，调用此构造函数时<xref:System.Web.UI.HtmlTextWriter.DefaultTabString>字段定义的实例由一个或多个适配器的标记编写的缩进策略。  
  
 [!code-csharp[MarkupTextWriter_Methods3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#1)]
 [!code-vb[MarkupTextWriter_Methods3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteChar">
      <MemberSignature Language="C#" Value="public const char DoubleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char DoubleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const DoubleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char DoubleQuoteChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示引号 (") 字符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar>字段由<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>方法来关闭属性。  
  
   
  
## Examples  
 下面的代码示例演示如何呈现`border`属性，则为`<table>`元素。 该代码调用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现属性及其值，并使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现<xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString>和<xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar>字段。  
  
 此代码示例将会呈现以下标记：  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.Write" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EncodeAttributeValue">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>根据当前上下文的 <see cref="T:System.Web.HttpRequest" /> 对象的要求，对指定标记特性的值进行编码。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected string EncodeAttributeValue (string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeAttributeValue(string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeAttributeValue (value As String, fEncode As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeAttributeValue(System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">包含要编码的特性值的字符串。</param>
        <param name="fEncode">若要对特性值进行编码，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>根据当前上下文的 <see cref="T:System.Web.HttpRequest" /> 对象的要求，对指定标记特性的值进行编码。</summary>
        <returns>包含已编码特性值的字符串；如果 <paramref name="value" /> 为空，则为 <see langword="null" />；如果 <paramref name="fEncode" /> 为 <see langword="false" />，则为包含未编码特性值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A>重载<xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29>方法如果该属性不是<xref:System.Web.UI.HtmlTextWriterAttribute>枚举值或直到运行时才知道。  
  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A>方法可以删除两个双引号 （"）、 & 号 (&)，并小于无论输入，将不生成符号 (<)，因此该无效标记。 实际编码由执行<xref:System.Web.HttpUtility.HtmlAttributeEncode%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A>方法中的参数作为<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法调用，并将然后编码`color:blue`样式特性值。  
  
 [!code-cpp[HtmlTextWriter_Methods#5](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#5)]
 [!code-csharp[HtmlTextWriter_Methods#5](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#5)]
 [!code-vb[HtmlTextWriter_Methods#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected virtual string EncodeAttributeValue (System.Web.UI.HtmlTextWriterAttribute attrKey, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string EncodeAttributeValue(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EncodeAttributeValue (attrKey As HtmlTextWriterAttribute, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ EncodeAttributeValue(System::Web::UI::HtmlTextWriterAttribute attrKey, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrKey">表示标记属性的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />。</param>
        <param name="value">包含要编码的特性值的字符串。</param>
        <summary>根据当前上下文的 <see cref="T:System.Web.HttpRequest" /> 对象的要求，对指定标记特性的值进行编码。</summary>
        <returns>包含已编码的属性值的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A>方法可以删除两个双引号 （"）、 & 号 (&)，并小于无论输入，将不生成符号 (<)，因此该无效标记。 实际编码由执行<xref:System.Web.HttpUtility.HtmlAttributeEncode%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeUrl">
      <MemberSignature Language="C#" Value="protected string EncodeUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeUrl (url As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeUrl(System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">包含要进行编码的 URL 的字符串。</param>
        <summary>通过将指定的 URL 中的空格转换为字符串“%20”，以执行最小 URL 编码。</summary>
        <returns>包含已编码 URL 的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 编码的字符由百分比符号 （%） 后, 跟两位数十六进制表示形式 （不区分大小写） 的字符的 ISO Latin 码位组成。 空格的十六进制表示为 20。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Web.UI.HtmlTextWriter.EncodeUrl%2A>方法将转换为中的参数传递的 URL 中的任何空格<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法调用。  
  
 [!code-cpp[HtmlTextWriter_Methods#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#6)]
 [!code-vb[HtmlTextWriter_Methods#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象用于将内容写入页面的编码。</summary>
        <value>将标记写入页中时所采用的 <see cref="T:System.Text.Encoding" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Encoding%2A>属性获得它的值从基<xref:System.IO.TextWriter>对象。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.Encoding%2A>编写的自定义控件用于呈现为包含它的页的文本编码类型的属性。  
  
 [!code-cpp[HtmlTextWriter_Properties#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#2)]
 [!code-csharp[HtmlTextWriter_Properties#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#2)]
 [!code-vb[HtmlTextWriter_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="EndRender">
      <MemberSignature Language="C#" Value="public virtual void EndRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EndRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndRender();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象或某个派生类的对象，某控件已完成呈现。 可使用此方法关闭在 <see cref="M:System.Web.UI.HtmlTextWriter.BeginRender" /> 方法中打开的任何标记元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter>类实现<xref:System.Web.UI.HtmlTextWriter.EndRender%2A>方法没有任何功能。 必须重写<xref:System.Web.UI.HtmlTextWriter.EndRender%2A>从派生类中<xref:System.Web.UI.HtmlTextWriter>类以提供您自己的呈现功能。  
  
 你可以使用<xref:System.Web.UI.HtmlTextWriter.EndRender%2A>方法来关闭任何标记元素在中打开<xref:System.Web.UI.HtmlTextWriter.BeginRender%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      </Docs>
    </Member>
    <Member MemberName="EndTagLeftChars">
      <MemberSignature Language="C#" Value="public const string EndTagLeftChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EndTagLeftChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberSignature Language="VB.NET" Value="Public Const EndTagLeftChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EndTagLeftChars;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示标记元素结束标记的左尖括号和斜线 (&lt;/)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars>字段由<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>方法来构造标记元素结束标记。  
  
   
  
## Examples  
 下面的代码示例演示如何呈现的结束标记`<table>`标记元素中的使用<xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars>和<xref:System.Web.UI.HtmlTextWriter.TagRightChar>中调用的参数值的字段<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法。  
  
 此代码示例将会呈现以下标记：  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EnterStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>写入标记元素的开始标记，该标记元素包含实现指定样式布局和字符格式化的属性。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">一个 <see cref="T:System.Web.UI.WebControls.Style" />，用于指定要开始应用到标记块的布局和格式设置。</param>
        <summary>写入 <see langword="&lt;span&gt;" /> 元素的开始标记，该元素包含实现指定样式的布局和字符格式化的属性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>方法将样式，背景颜色的边框宽度，如应用于标记的块。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>和<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>方法允许设备适配器或控件，若要创建使用指定样式的字符格式的标记。 使用相同的值`style`中<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>使用在相应的方法<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>方法。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>重载<xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29>方法将呈现的开始标记`<span>`元素。 此方法然后将添加必要的特性和样式特性到的开始标记`<span>`元素显示由指定的设置<xref:System.Web.UI.WebControls.Style>对象。 如果你想要呈现要包含的特性和样式特性，请使用不同的标记元素<xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29>重载。  
  
   
  
## Examples  
 下面的代码示例演示如何使用一个名为的自定义类`TextSample`派生自<xref:System.Web.UI.WebControls.WebControl>类，使用<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>方法以应用<xref:System.Web.UI.WebControls.Style.ForeColor%2A>样式应用到的文本字符串。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>方法上呈现 HTML `<span style="color:Navy;">`。 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>方法调用关闭`<span>`元素后呈现的文本。  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">一个 <see cref="T:System.Web.UI.WebControls.Style" />，用于指定要开始应用到标记块的布局和格式设置。</param>
        <param name="tag">一个 <see cref="T:System.Web.UI.HtmlTextWriterTag" />，用于指定标记元素的开始标记，该标记将包含 <c>style</c> 中指定的样式对象。</param>
        <summary>写入标记元素的开始标记，该标记元素包含实现指定样式布局和字符格式化的属性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>方法将样式，背景颜色的边框宽度，如应用于标记的块。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>和<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>方法允许设备适配器或控件，若要创建使用指定样式的字符格式的标记。 使用相同的值`style`中<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>使用在相应的方法<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>方法。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>重载<xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29>方法呈现指定的元素的开始标记`tag`参数。 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29>方法然后将添加必要的特性和样式特性到要显示的设置由指定的元素的开始标记<xref:System.Web.UI.WebControls.Style>对象。 使用<xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29>要呈现的开始标记重载`<span>`元素。  
  
   
  
## Examples  
 下面的代码示例演示如何使用一个名为的自定义类`TextSample`派生自<xref:System.Web.UI.WebControls.WebControl>类，使用<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>方法以应用<xref:System.Web.UI.WebControls.Style.ForeColor%2A>样式应用到的文本字符串。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>方法上呈现 HTML`<span style="color:Navy;">`。 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>方法调用关闭`<span>`元素后呈现的文本。  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EqualsChar">
      <MemberSignature Language="C#" Value="public const char EqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char EqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char EqualsChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示等号 (<see langword="=" />)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可能想要使用<xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString>字段而不是<xref:System.Web.UI.HtmlTextWriter.EqualsChar>字段构造的属性值的左分隔符时。  
  
   
  
## Examples  
 下面的代码示例演示如何呈现`src`属性，其值的一部分`<img>`元素。 该代码使用<xref:System.Web.UI.HtmlTextWriter.EqualsChar>字段<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法调用之间呈现等号 （=）`src`特性，并且其值。  
  
 此代码示例将会呈现以下标记：  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      </Docs>
    </Member>
    <Member MemberName="EqualsDoubleQuoteString">
      <MemberSignature Language="C#" Value="public const string EqualsDoubleQuoteString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EqualsDoubleQuoteString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsDoubleQuoteString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EqualsDoubleQuoteString;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示字符串 (=") 中合并在一起的等号 (=) 和双引号 (")。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString>字段由<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>和<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>方法，用于构造的属性值的左分隔符。  
  
   
  
## Examples  
 下面的代码示例演示如何呈现`border`属性，则为`<table>`元素。 该代码调用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现属性及其值，并使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现<xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString>和<xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar>字段。  
  
 此代码示例将会呈现以下标记：  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ExitStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>写入标记元素的结束标记以结束指定的布局和字符格式设置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">一个 <see cref="T:System.Web.UI.WebControls.Style" />，指定要关闭的布局和格式设置。</param>
        <summary>写入 <see langword="&lt;span&gt;" /> 元素的结束标记以结束指定的布局和字符格式设置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>重载<xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%29>方法将呈现的结束标记`<span>`元素的控件的结束标记后面，关闭元素打开相应<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>调用。  
  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>和<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>方法允许设备适配器或控件创建的开始和结束块通过使用指定样式的字符格式的标记。 使用相同的值`style`中<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>使用在相应的方法<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用一个名为的自定义类`TextSample`派生自<xref:System.Web.UI.WebControls.WebControl>类，使用<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>方法以应用<xref:System.Web.UI.WebControls.Style.ForeColor%2A>样式应用到的文本字符串。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>方法上呈现 HTML `<span style="color:Navy;">`。 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>方法调用关闭`<span>`元素后呈现的文本。  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">一个 <see cref="T:System.Web.UI.WebControls.Style" />，它指定要停止应用到输出文本的布局和格式。</param>
        <param name="tag">一个 <see cref="T:System.Web.UI.HtmlTextWriterTag" />，它指定标记元素的结束标记，该标记元素包含应用指定样式的属性。 此必须与在相应的 <see cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" /> 调用中所传递的密钥相匹配。</param>
        <summary>写入指定的标记元素的结束标记，以结束指定的布局和字符格式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>重载<xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29>方法呈现由指定的元素的结束标记`tag`控件的结束标记之后, 关闭已打开相应的元素<xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29>方法调用。  
  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>和<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>方法允许设备适配器或控件创建的开始和结束块通过使用指定样式的字符格式的标记。 使用相同的值`style`中<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>使用在相应的方法<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用一个名为的自定义类`TextSample`派生自<xref:System.Web.UI.WebControls.WebControl>类，使用<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>方法以应用<xref:System.Web.UI.WebControls.Style.ForeColor%2A>样式应用到的文本字符串。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>方法上呈现 HTML `<span style="color:Navy;">`。 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>方法调用关闭`<span>`元素后呈现的文本。  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void FilterAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FilterAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.FilterAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FilterAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FilterAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>移除页面或 Web 服务器控件的所有属性上的所有标记和样式属性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上一个标记元素中，呈现特性之前<xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>调用方法。 反过来，<xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>方法调用<xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A>和<xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A>对于每个属性和样式呈现的方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用自定义类，派生自<xref:System.Web.UI.HtmlTextWriter>类，并重写<xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>方法。 调用时，<xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>替代检查的文本编写器是否呈现任何`<label>`或`<a>`元素：  
  
-   如果`<label>`呈现元素时，<xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>方法检查是否`style`属性呈现在元素上，而且，如果不是，创建`style`属性，并将其设置为`color: blue`。  
  
-   如果`<a>`呈现元素时，<xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>方法确定是否`href`属性包含并，如果不是，将添加`href`到 URL http://www.cohowinery.com。  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清理当前 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象的所有缓冲区并使所有缓冲数据写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter>类实现<xref:System.Web.UI.HtmlTextWriter.Flush%2A>方法只调用<xref:System.IO.TextWriter.Flush%2A>基方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterAttribute GetAttributeKey (string attrName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterAttribute GetAttributeKey(string attrName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeKey (attrName As String) As HtmlTextWriterAttribute" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterAttribute GetAttributeKey(System::String ^ attrName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrName">包含要为其获取 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 的属性的字符串。</param>
        <summary>获取指定属性的相应 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 枚举值。</summary>
        <returns>指定属性的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 枚举值；否则，如果该属性不是该枚举的成员，则为无效的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`attrName`是`null`或空字符串 ("")，或无法找到表中的属性名称，值为-1，类型化为<xref:System.Web.UI.HtmlTextWriterAttribute>对象，则返回。  
  
   
  
## Examples  
 下面的代码示例演示如何使用类，派生自<xref:System.Web.UI.HtmlTextWriter>类，并重写<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>方法。 重写检查是否`tagKey`等同于<xref:System.Web.UI.HtmlTextWriterTag.Font>字段，指示`<font>`将呈现标记元素。 如果是，重写调用<xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A>方法以确定是否`<font>`元素包含<xref:System.Web.UI.HtmlTextWriterAttribute.Size>属性。 如果<xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A>返回`false`、<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法调用<xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A>方法，后者定义<xref:System.Web.UI.HtmlTextWriterAttribute.Size>并将其值设置为`30pt`。  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.IsAttributeDefined" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeName">
      <MemberSignature Language="C#" Value="protected string GetAttributeName (System.Web.UI.HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetAttributeName(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeName(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeName (attrKey As HtmlTextWriterAttribute) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetAttributeName(System::Web::UI::HtmlTextWriterAttribute attrKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="attrKey">要获取其标记属性名称的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />。</param>
        <summary>获取与指定的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 值关联的标记属性名称。</summary>
        <returns>包含标记属性名称的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A>方法返回一个空字符串 ("")，如果`attrKey`不是有效<xref:System.Web.UI.HtmlTextWriterAttribute>值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A>方法将转换<xref:System.Web.UI.HtmlTextWriterAttribute.Size>为其字符串名称的枚举值。  
  
 [!code-cpp[HtmlTextWriter_Methods3#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#6)]
 [!code-vb[HtmlTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterStyle GetStyleKey (string styleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterStyle GetStyleKey(string styleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleKey (styleName As String) As HtmlTextWriterStyle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterStyle GetStyleKey(System::String ^ styleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="styleName">要为其获取 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 的样式属性。</param>
        <summary>获取指定样式的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 枚举值。</summary>
        <returns>与 <paramref name="styleName" /> 相对应的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 枚举值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A>方法返回的值为-1 类型化为<xref:System.Web.UI.HtmlTextWriterStyle>值，如果`styleName`与任何不一致<xref:System.Web.UI.HtmlTextWriterStyle>枚举值。  
  
   
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>从派生类中的方法<xref:System.Web.UI.HtmlTextWriter>类。 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>重写确定是否`<label>`将呈现标记，并且，如果是这样，检查元素的<xref:System.Web.UI.HtmlTextWriterStyle.Color>属性。 如果<xref:System.Web.UI.HtmlTextWriterStyle.Color>尚未定义属性，<xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A>方法用作对的调用中的第一个参数<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>方法将添加<xref:System.Web.UI.HtmlTextWriterStyle.Color>属性设为`<label>`标记元素，并设置<xref:System.Web.UI.HtmlTextWriterStyle.Color>属性`red`.  
  
 [!code-cpp[HtmlTextWriter_Methods#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#1)]
 [!code-vb[HtmlTextWriter_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleName">
      <MemberSignature Language="C#" Value="protected string GetStyleName (System.Web.UI.HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetStyleName(valuetype System.Web.UI.HtmlTextWriterStyle styleKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleName(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleName (styleKey As HtmlTextWriterStyle) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetStyleName(System::Web::UI::HtmlTextWriterStyle styleKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleKey" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="styleKey">要获取其样式属性名称的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />。</param>
        <summary>获取与指定的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 枚举值关联的标记样式属性名称。</summary>
        <returns>与 <paramref name="styleKey" /> 中指定的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 枚举值相关联的样式属性名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`styleKey`不是有效<xref:System.Web.UI.HtmlTextWriterStyle>对象，<xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A>方法返回一个空字符串 ("")。  
  
   
  
## Examples  
 下面的代码示例演示如何检查是否`<label>`元素呈现。 如果因此，它会检查是否<xref:System.Web.UI.HtmlTextWriterStyle.Color>在元素中定义样式属性。 如果未定义的属性，<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>调用方法和<xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A>方法将<xref:System.Web.UI.HtmlTextWriterStyle.Color>枚举成员转换为字符串表示形式要传递给<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>方法。  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag GetTagKey (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Web.UI.HtmlTextWriterTag GetTagKey(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagKey (tagName As String) As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::HtmlTextWriterTag GetTagKey(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">要为其获取 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 的标记元素。</param>
        <summary>获取与指定标记元素关联的 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 枚举值。</summary>
        <returns>
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 枚举值；否则，如果 <paramref name="tagName" /> 不与特定的 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 值关联，则为 <see cref="F:System.Web.UI.HtmlTextWriterTag.Unknown" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`tagName`是`null`，空字符串 ("")，或无法找到表中的标记名称，<xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A>方法返回<xref:System.Web.UI.HtmlTextWriterTag.Unknown>字段。  
  
   
  
## Examples  
 下面的代码示例演示如何重写的重载<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>采用字符串作为其参数的方法。 将字符串传递到<xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A>方法，将其转换为相应<xref:System.Web.UI.HtmlTextWriterTag>枚举成员，然后再传递到<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>采用重载<xref:System.Web.UI.HtmlTextWriterTag>作为参数的枚举值。  
  
 [!code-cpp[HtmlTextWriter_Methods3#8](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#8)]
 [!code-csharp[HtmlTextWriter_Methods3#8](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#8)]
 [!code-vb[HtmlTextWriter_Methods3#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected virtual string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagName (tagKey As HtmlTextWriterTag) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetTagName(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">要获取其标记元素的 <see cref="T:System.Web.UI.HtmlTextWriterTag" />。</param>
        <summary>获取与指定的 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 枚举值关联的标记元素。</summary>
        <returns>表示标记元素的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`tagKey`不是有效<xref:System.Web.UI.HtmlTextWriterTag>值，<xref:System.Web.UI.HtmlTextWriter.GetTagName%2A>方法返回一个空字符串 ("")。  
  
   
  
## Examples  
 下面的代码示例演示如何关闭`<font>`元素中的使用<xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>方法。 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>方法调用<xref:System.Web.UI.HtmlTextWriter.GetTagName%2A>方法将转换<xref:System.Web.UI.HtmlTextWriterTag.Font>为字符串的值。  
  
 [!code-cpp[HtmlTextWriter_Methods3#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods3#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#7)]
 [!code-vb[HtmlTextWriter_Methods3#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用以缩进每一行标记的开始位置的制表符位置数。</summary>
        <value>用于缩进每一行的制表符位置数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过编写指定的字符串执行缩进`tabString`参数<xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29>构造函数指定的次数<xref:System.Web.UI.HtmlTextWriter.Indent%2A>属性。  
  
 如果<xref:System.Web.UI.HtmlTextWriter.Indent%2A>属性设置为负值，则它将在保存之前更改为 0。  
  
   
  
## Examples  
 下面的代码示例演示如何递增的值分配给<xref:System.Web.UI.HtmlTextWriter.Indent%2A>当属性已添加到的开始标记时，属性`<span>`元素和<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>调用方法。 这会增加内呈现任何标记的缩进`<span>`元素。  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      </Docs>
    </Member>
    <Member MemberName="InnerWriter">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter InnerWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter InnerWriter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerWriter As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ InnerWriter { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置写入标记元素内部内容的文本编写器。</summary>
        <value>写入内部标记内容的 <see cref="T:System.IO.TextWriter" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内部标记内容是开始标记和结束标记的标记语言元素之间找到的文本。  
  
 如果<xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A>属性设置为<xref:System.IO.TextWriter>是的一个实例的对象<xref:System.Web.HttpWriter>类，这一事实记录和保存单独的引用。  
  
   
  
## Examples  
 下面的代码示例演示如何使用自定义 Web 服务器控件，派生自<xref:System.Web.UI.WebControls.WebControl>类，并重写<xref:System.Web.UI.Control.Render%2A>方法。 它使用<xref:System.Web.UI.HtmlTextWriter>类编写`<font>`元素。 它将元素的开始标记之后，它使用<xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A>属性来将字符串写入`"<br> The time on the server:"`并将连接的值与此字符串<xref:System.DateTime.Now%2A?displayProperty=nameWithType>属性。  
  
 [!code-cpp[HtmlTextWriter_Properties#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#3)]
 [!code-csharp[HtmlTextWriter_Properties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#3)]
 [!code-vb[HtmlTextWriter_Properties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpWriter" />
        <altmember cref="T:System.Web.UI.WebControls.WebControl" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定是否在下一次调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法时呈现指定的标记属性及其值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="key">与标记属性关联的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />。</param>
        <summary>确定是否在下一次调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法时呈现指定的标记属性及其值。</summary>
        <returns>如果下次调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法时呈现该属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要获取的值分配给<xref:System.Web.UI.HtmlTextWriterAttribute>对象，请使用<xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%40%29>代替此重载。  
  
   
  
## Examples  
 下面的代码示例演示如何使用的重写<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>继承自的类方法<xref:System.Web.UI.HtmlTextWriter>类。 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>重写检查是否`<font>`将呈现标记元素。 如果是，重写调用<xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A>方法来检查是否`<font>`元素包含<xref:System.Web.UI.HtmlTextWriterAttribute.Size>属性。 如果没有，则<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法调用<xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A>方法，后者定义<xref:System.Web.UI.HtmlTextWriterAttribute.Size>属性并将其值设置为`30pt`。  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">与标记属性关联的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />。</param>
        <param name="value">要分配给特性的值。</param>
        <summary>确定是否在下一次调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法时呈现指定的标记属性及其值。</summary>
        <returns>如果下次调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法时呈现该属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A>方法返回`true`，值分配给<xref:System.Web.UI.HtmlTextWriterAttribute>中返回对象`value`参数。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStyleAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定是否在下一次调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法期间呈现标记样式属性。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="key">与该属性相关联的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />。</param>
        <summary>确定下次调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法时指定的标记样式属性是否呈现。</summary>
        <returns>如果下次调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法时呈现该属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要获取将呈现使用指定的样式属性的值，请使用<xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%40%29>重载<xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何检查是否`<label>`元素呈现。 如果是这样，<xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A>方法检查是否<xref:System.Web.UI.HtmlTextWriterStyle.Color>在元素中定义样式属性。 如果<xref:System.Web.UI.HtmlTextWriterStyle.Color>尚未定义属性，<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>方法定义<xref:System.Web.UI.HtmlTextWriterStyle.Color>属性并将其值设置为`red`。  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">与该属性相关联的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />。</param>
        <param name="value">分配给样式属性的值。</param>
        <summary>确定下次调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法时是否呈现指定的标记样式属性及其值。</summary>
        <returns>如果下次调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 方法时呈现属性及其值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A>方法返回`true`，值分配给<xref:System.Web.UI.HtmlTextWriterStyle>中返回属性`value`参数。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsValidFormAttribute (string attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidFormAttribute(string attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidFormAttribute (attribute As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidFormAttribute(System::String ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attribute">包含要检查的属性名称的字符串。</param>
        <summary>检查属性，确保它可以在 <see langword="&lt;form&gt;" /> 标记元素的开始标记中呈现。</summary>
        <returns>总是为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter>类实现<xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A>方法返回`true`所有特性。 重写<xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A>要限制可以呈现的开始标记的属性`<form>`元素。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写<see cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />方法以返回<see langword="true" />仅为可以包括在这些属性<see langword="&lt;form&gt;" />元素的类派生自的标记<see cref="T:System.Web.UI.HtmlTextWriter" />类旨在。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public override string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象使用的行结束符字符串。</summary>
        <value>由当前 <see cref="T:System.Web.UI.HtmlTextWriter" /> 使用的行结束符字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串是一个回车，跟换行符 ("\r\n")。  
  
 行结束符字符串写入到输出流每当一个的<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>调用的方法。 如果<xref:System.Web.UI.HtmlTextWriter.NewLine%2A>属性设置为`null`，使用默认的新行字符。  
  
   
  
## Examples  
 下面的代码示例演示如何使用自定义类，派生自<xref:System.Web.UI.HtmlTextWriter>类，并重写<xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>方法。 调用时，<xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>替代检查的文本编写器是否呈现任何`<label>`或`<a>`元素。 如果是这样，<xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>方法确定标签是否定义样式特性。 如果没有定义样式，<xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>方法设置的默认值为`style:color`属性为蓝色。 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>方法然后使用<xref:System.Web.UI.HtmlTextWriter.NewLine%2A>属性来插入行中断在标记中，并将写入任何其他定义的属性。  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">包含要呈现的属性名称的字符串。</param>
        <param name="value">包含要分配给该属性的值的字符串。</param>
        <param name="key">与标记属性关联的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />。</param>
        <summary>确定是否可向当前标记元素呈现指定的标记属性及其值。</summary>
        <returns>总是为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter>类实现<xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A>方法始终返回`true`。 <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A>替代可以确定属性是否将呈现到页。  
  
   
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A>方法。 如果<xref:System.Web.UI.HtmlTextWriterAttribute.Size>呈现属性，但<xref:System.Web.UI.HtmlTextWriterAttribute.Size>值不是`30pt`、<xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A>重写调用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法将添加<xref:System.Web.UI.HtmlTextWriterAttribute.Size>属性，并将其值设置为`30pt`。  
  
 [!code-csharp[MarkupTextWriter_Methods3#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#5)]
 [!code-vb[MarkupTextWriter_Methods3#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果从继承<see cref="T:System.Web.UI.HtmlTextWriter" />类，可以重写<see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />方法以返回<see langword="false" />以防止在所有呈现，呈现在一个特定的元素，或针对特定标记呈现的属性。例如，如果您不希望派生自对象<see cref="T:System.Web.UI.HtmlTextWriter" />呈现<see langword="bgcolor" />属性设为<see langword="&lt;table&gt;" />元素，可以重写<see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />并返回<see langword="false" />时<paramref name="name" />传递<see langword="bgcolor" />和<see cref="P:System.Web.UI.HtmlTextWriter.TagName" />属性值是<see langword="table" />。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">包含要呈现的样式属性名称的字符串。</param>
        <param name="value">包含要分配给样式属性的值的字符串。</param>
        <param name="key">与样式属性关联的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />。</param>
        <summary>确定是否可向当前标记元素呈现指定的标记样式属性及其值。</summary>
        <returns>总是为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter>类实现<xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A>方法始终返回`true`。 <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A>替代可以确定是否将向页呈现的样式特性。  
  
   
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A>方法。 如果<xref:System.Web.UI.HtmlTextWriterStyle.Color>呈现样式特性，但<xref:System.Web.UI.HtmlTextWriterStyle.Color>值不是`purple`、<xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A>重写使用<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>方法以设置<xref:System.Web.UI.HtmlTextWriterStyle.Color>属性设为`purple`。  
  
 [!code-csharp[MarkupTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#6)]
 [!code-vb[MarkupTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果从继承<see cref="T:System.Web.UI.HtmlTextWriter" />类，可以重写<see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />方法以返回<see langword="false" />以防止在所有呈现，呈现在一个特定的元素，或针对特定的标记语言呈现的样式属性。例如，如果您不希望派生自对象<see cref="T:System.Web.UI.HtmlTextWriter" />呈现<see langword="color" />样式特性应用到<see langword="&lt;p&gt;" />元素，可以重写<see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />并返回<see langword="false" />时<paramref name="name" />传递<see langword="color" />和<see cref="P:System.Web.UI.HtmlTextWriter.TagName" />属性值是<see langword="p" />。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">包含要呈现的元素名称的字符串。</param>
        <param name="key">与元素关联的 <see cref="T:System.Web.UI.HtmlTextWriterTag" />。</param>
        <summary>确定是否向请求页面呈现指定的标记元素。</summary>
        <returns>总是为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter>类实现<xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A>方法始终返回`true`。 <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A>替代可以确定某元素是否将呈现到页。  
  
   
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A>方法。 如果<xref:System.Web.UI.HtmlTextWriterTag.Font>呈现元素时，<xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A>重写使用<xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A>方法来确定是否<xref:System.Web.UI.HtmlTextWriterAttribute.Size>呈现属性。 如果不是，它使用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法来创建<xref:System.Web.UI.HtmlTextWriterAttribute.Size>属性，并将其值设置为`20pt`。  
  
 [!code-csharp[MarkupTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#4)]
 [!code-vb[MarkupTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果从继承<see cref="T:System.Web.UI.HtmlTextWriter" />类，可以重写<see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />方法以返回<see langword="false" />以防止呈现根本或针对特定的标记语言标记元素。例如，如果您不希望派生自对象<see cref="T:System.Web.UI.HtmlTextWriter" />呈现<see langword="&lt;font&gt;" />元素，可以重写<see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />方法以返回<see langword="false" />页时请求包含<see langword="&lt;font&gt;" />元素。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="OutputTabs">
      <MemberSignature Language="C#" Value="protected virtual void OutputTabs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTabs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTabs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTabs();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>写入一连串用以表示标记字符行的缩进级别的制表符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A>方法使用<xref:System.Web.UI.HtmlTextWriter.Indent%2A>属性来确定如何许多选项卡字符串写入到获取所需的缩进。  
  
 使用指定的选项卡字符串<xref:System.Web.UI.HtmlTextWriter.%23ctor%2A>构造函数。 如果未不指定任何选项卡字符串，<xref:System.Web.UI.HtmlTextWriter.DefaultTabString>常量 (`\t`) 使用。  
  
   
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A>派生自的类方法<xref:System.Web.UI.HtmlTextWriter>类。 <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A>重写方法始终使用<xref:System.Web.UI.HtmlTextWriter.DefaultTabString>常量执行缩进。  
  
 [!code-cpp[HtmlTextWriter_Methods#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#7)]
 [!code-vb[HtmlTextWriter_Methods#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.Indent" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName="PopEndTag">
      <MemberSignature Language="C#" Value="protected string PopEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string PopEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      <MemberSignature Language="VB.NET" Value="Protected Function PopEndTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ PopEndTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从呈现的元素列表中移除最近保存的标记元素。</summary>
        <returns>一个 <see cref="T:System.String" />，包含最新呈现的标记元素。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 元素添加到由呈现的标记元素的列表<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>方法。 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>方法可以通过调用从列表删除标记元素<xref:System.Web.UI.HtmlTextWriter.PopEndTag%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">呈现的元素列表为空。</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PushEndTag">
      <MemberSignature Language="C#" Value="protected void PushEndTag (string endTag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushEndTag(string endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PushEndTag (endTag As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PushEndTag(System::String ^ endTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endTag">标记元素的结束标记。</param>
        <summary>为标记元素生成结束标记时，保存指定的标记元素供以后使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 元素添加到呈现的标记元素的列表时<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>方法调用<xref:System.Web.UI.HtmlTextWriter.PushEndTag%2A>方法。 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>方法标记元素从列表中删除后它呈现元素的结束标记。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttribute">
      <MemberSignature Language="C#" Value="protected static void RegisterAttribute (string name, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterAttribute(string name, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterAttribute(System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterAttribute (name As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterAttribute(System::String ^ name, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">包含要注册的标记属性名称的字符串。</param>
        <param name="key">与属性名称对应的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />。</param>
        <summary>从源文件注册标记属性（无论是文本还是动态生成的），以便可将其正确呈现给请求的客户端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 标记语言的预定义的属性均由调用注册<xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A>方法时第一个<xref:System.Web.UI.HtmlTextWriter>创建对象。 动态属性可由使用注册<xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A>在其他时候的方法。  
  
 使用的注册表<xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A>方法是`static`，因此特性的注册适用于所有<xref:System.Web.UI.HtmlTextWriter>主机计算机上的对象。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStyle">
      <MemberSignature Language="C#" Value="protected static void RegisterStyle (string name, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterStyle(string name, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterStyle(System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterStyle (name As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterStyle(System::String ^ name, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">从源文件传递的、指定样式名称的字符串。</param>
        <param name="key">与指定样式对应的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />。</param>
        <summary>从源文件注册标记样式属性（无论是文本还是动态生成的），以便可将其正确呈现给请求的客户端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过调用注册预定义的级联样式表 (CSS) 特性的 HTML 标记语言<xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A>方法时第一个<xref:System.Web.UI.HtmlTextWriter>创建对象。 可以使用注册动态样式特性<xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A>在其他时候的方法。  
  
 使用的注册表<xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A>方法是`static`，因此特性的注册适用于所有<xref:System.Web.UI.HtmlTextWriter>主机计算机上的对象。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterTag">
      <MemberSignature Language="C#" Value="protected static void RegisterTag (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterTag(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterTag(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterTag (name As String, key As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterTag(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">包含 HTML 标记的字符串。</param>
        <param name="key">一个 <see cref="T:System.Web.UI.HtmlTextWriterTag" />，指定要呈现的元素。</param>
        <summary>从源文件注册标记标签（无论是文本还是动态生成的），以便可将其正确呈现给请求的客户端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 语言的预定义的标记注册通过调用<xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A>方法时第一个<xref:System.Web.UI.HtmlTextWriter>创建对象。 可以使用注册动态标记标记<xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A>在其他时候的方法。  
  
 使用的注册表<xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A>方法是`static`，因此标记注册适用于所有<xref:System.Web.UI.HtmlTextWriter>主机计算机上的对象。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterContent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>写入在标记元素的内容之后、结束标记之前出现的任何文本或间距以呈现给标记输出流。</summary>
        <returns>包含要在元素内容后面写入的间距或文本的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A>方法会很有用，如果你想要插入到当前标记元素的子元素。  
  
   
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A>从派生类中的方法<xref:System.Web.UI.HtmlTextWriter>类以确定是否`<label>`元素呈现。 如果是这样，<xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A>替代插入结束标记的`<font>`元素的结束标记前紧跟`<label>`元素。 如果以外的其他元素`<label>`呈现，<xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A>使用基方法。  
  
 [!code-cpp[HtmlTextWriter_Methods1#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#3)]
 [!code-vb[HtmlTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" />类实现<see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />方法返回<see langword="null" />。重写<see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />如果你想要写入文本或元素内容之后但在结束标记之前的间距。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>写入在标记元素的结束标记后出现的任何间距或文本。</summary>
        <returns>要在元素的结束标记后面写入的间距或文本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A>方法会很有用，如果你想要在元素标记后呈现附加结束标记。  
  
   
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A>方法来确定是否从派生的类<xref:System.Web.UI.HtmlTextWriter>呈现类`<label>`元素。 如果是这样，<xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A>替代插入结束标记的`<font>`元素后立即`<label>`元素。 如果不是`<label>`元素，<xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A>使用基方法。  
  
 [!code-cpp[HtmlTextWriter_Methods4#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#2)]
 [!code-vb[HtmlTextWriter_Methods4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" />类实现<see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />方法返回<see langword="null" />。重写<see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />如果你想要写入文本或结束标记的元素之后的间距。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeContent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在标记元素的内容之前、开始标记之后写入任何文本或间距。</summary>
        <returns>在元素内容之前写入的文本或间距。 如果未重写，则 <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> 返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A>方法会很有用，如果你想要将子元素插入到当前标记元素的内部标记之前。  
  
   
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A>方法来确定是否从派生的类<xref:System.Web.UI.HtmlTextWriter>类是用来呈现`<label>`元素。 如果是这样，<xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A>替代插入的开始标记`<font>`元素的开始标记后立即`<label>`元素。 如果不是`<label>`元素，<xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A>使用基方法。  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" />类实现<see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />方法返回<see langword="null" />。重写<see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />如果你想要写入文本或间距的开始标记之后，但之前的元素内容。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>写入在标记元素的开始标记之前出现的任何文本或间距。</summary>
        <returns>要在标记元素开始标记之前写入的文本或间距。 如果未重写，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A>方法会很有用，如果你想要呈现的预期元素的开始标记之前的其他开始标记。  
  
   
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A>方法来确定是否派生自的类<xref:System.Web.UI.HtmlTextWriter>类是用来呈现`<label>`元素。 如果是这样，<xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A>替代插入的开始标记`<font>`元素紧靠之前`<label>`元素。 如果不呈现`<label>`元素，<xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A>使用基方法。  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" />类实现<see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />方法返回<see langword="null" />。重写<see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />如果你想要写入文本或之前在元素开始标记的间距。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RenderBeginTag">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将标记元素的开始标记写入到输出流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">一个字符串，包含要为其呈现开始标记的标记元素的名称。</param>
        <summary>将指定标记元素的开始标记写入输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>的重写<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.String%29>方法时，如果标记元素不是一个<xref:System.Web.UI.HtmlTextWriterTag>枚举值。  
  
 要通过使用生成标记元素<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>方法，请首先调用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>和<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>方法，根据需要，指定任何元素特性或将显示元素的开始标记中的样式特性。 在生成的内部标记之后, 调用<xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>方法来生成结束标记。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>自定义控件呈现的非标准的开始标记中的方法`MyTag`元素。 此代码示例然后调用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现内部标记，然后调用<xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>方法来关闭该元素。  
  
 此代码示例将生成以下标记：  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagKey As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 值之一，定义要呈现的标记元素的开始标记。</param>
        <summary>将与指定的 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 枚举值关联的标记元素的开始标记写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>重载<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.Web.UI.HtmlTextWriterTag%29>方法标记元素是否是已知类型的<xref:System.Web.UI.HtmlTextWriterTag>枚举值。  
  
 要通过使用生成标记元素<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>方法，请首先调用<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>和<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>方法，根据需要，指定任何元素特性或将显示元素的开始标记中的样式特性。 在生成的内部标记之后, 调用<xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>方法来生成结束标记。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>方法输出的开始标记`<img>`元素。 添加到该元素的特性<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>方法将在开始`<img>`标记。 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>方法用于生成结束标记。  
  
 此代码示例将生成以下标记：  
  
 `<img alt="Encoding &quot;Required&quot;" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderEndTag ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderEndTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将标记元素的结束标记写入输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>方法之后<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>调用重载和之后已呈现的开始和结束标记 （内部标记） 的元素之间的所有内容。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>方法之后同时<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>生成的开始标记的方法和<xref:System.Web.UI.HtmlTextWriter.Write%2A>呈现开始和结束标记的自定义之间的内部标记的方法`MyTag`调用了元素。  
  
 此代码示例将生成以下标记：  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingChars">
      <MemberSignature Language="C#" Value="public const string SelfClosingChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingChars;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示空格和标记的自结束斜杠 (/)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SelfClosingChars>自结束标记元素中使用字段。 例如:  
  
 `<input type="submit" value="go"  />`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingTagEnd">
      <MemberSignature Language="C#" Value="public const string SelfClosingTagEnd;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingTagEnd" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingTagEnd As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingTagEnd;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示自结束标记元素的右斜杠标记和右尖括号 (/&gt;)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd>字段由<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>方法构造自结束标记元素时。  
  
   
  
## Examples  
 下面的代码示例演示如何呈现的自定义值`FileName`跟一个引号的属性和所表示的字符<xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd>字段。 此代码示例调用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法并传递<xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd>字段作为参数进行传递以关闭元素。  
  
 此代码示例呈现`FileName`属性值，然后选择以下标记：  
  
 `" />`  
  
 [!code-csharp[MarkupTextWriter_Constants#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#11)]
 [!code-vb[MarkupTextWriter_Constants#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SemicolonChar">
      <MemberSignature Language="C#" Value="public const char SemicolonChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SemicolonChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SemicolonChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SemicolonChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示分号 (;)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 传递<xref:System.Web.UI.HtmlTextWriter.SemicolonChar>字段中的参数自变量作为<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法调用，当你想要呈现的自定义控件或适配器从分号。  
  
   
  
## Examples  
 下面的代码示例演示如何手动呈现一系列的标记元素的样式。 此代码示例使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现`font-size`和`border-style`样式特性。 <xref:System.Web.UI.HtmlTextWriter.SemicolonChar>字段用作参数<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法来分隔的值`font-size`从开始处的属性`border-style`属性。  
  
 此代码示例将会呈现以下标记：  
  
 `style="font-size:12pt;border-style:ridge"`  
  
 [!code-csharp[MarkupTextWriter_Constants#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simplebutton.cs#7)]
 [!code-vb[MarkupTextWriter_Constants#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simplebutton.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteChar">
      <MemberSignature Language="C#" Value="public const char SingleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SingleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SingleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SingleQuoteChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示撇号 (')。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.SingleQuoteChar>字段需要呈现撇号时。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SlashChar">
      <MemberSignature Language="C#" Value="public const char SlashChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SlashChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SlashChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SlashChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示斜杠 (/)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.SlashChar>字段来呈现斜杠标记当你编写的 URL。 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>方法使用<xref:System.Web.UI.HtmlTextWriter.SlashChar>字段时编写标记元素的结束标记。  
  
   
  
## Examples  
 下面的代码示例演示如何以手动呈现`src`属性`<img>`元素。 此代码示例使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法替换<xref:System.Web.UI.HtmlTextWriter.SlashChar>作为其参数来呈现斜杠的字段将标记应用到的路径中`src`属性。  
  
 此代码示例将会呈现以下标记：  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SpaceChar">
      <MemberSignature Language="C#" Value="public const char SpaceChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SpaceChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SpaceChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SpaceChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示空格 ( ) 字符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SpaceChar>字段由<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>和<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>方法时编写元素和属性之间的分隔符。  
  
   
  
## Examples  
 本部分提供两个代码示例。 第一个代码示例演示如何创建的字符数组。 第二个代码示例演示如何使用数组。  
  
 这些代码示例生成以下标记：  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 下面的代码示例演示如何创建<xref:System.Char>数组，其中包含<xref:System.Web.UI.HtmlTextWriter.SpaceChar>字段。  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 下面的代码示例演示如何使用在前面的代码示例作为参数时创建调用阵列<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法。  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StyleEqualsChar">
      <MemberSignature Language="C#" Value="public const char StyleEqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char StyleEqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const StyleEqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char StyleEqualsChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示用于将样式属性设置为等于值的样式等号 (<see langword=":" />) 字符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar>字段由<xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A>方法来分隔样式名称和值。  
  
   
  
## Examples  
 下面的代码示例演示如何呈现`FontWeight`属性和值的`bold`给元素的开始标记。 此代码示例使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法替换<xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar>字段作为参数来呈现设置每个样式属性的值的字符。  
  
 此代码示例将会呈现以下标记：  
  
 `FontWeight:"bold"`  
  
 [!code-csharp[MarkupTextWriter_Constants#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#5)]
 [!code-vb[MarkupTextWriter_Constants#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterTag TagKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); void set(System::Web::UI::HtmlTextWriterTag value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定标记元素的 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 值。</summary>
        <value>其开始标记要被呈现的标记元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagKey%2A>属性是只对继承的类使用的<xref:System.Web.UI.HtmlTextWriter>类。 应读取或设置<xref:System.Web.UI.HtmlTextWriter.TagKey%2A>属性仅在调用中的<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>方法; 这是唯一一次设置为一致的值。  
  
   
  
## Examples  
 下面的代码示例演示如何重写的版本<xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A>派生自的类方法<xref:System.Web.UI.HtmlTextWriter>类。 它使用的值<xref:System.Web.UI.HtmlTextWriter.TagKey%2A>属性以确定是否可以使用自定义的服务器控件<xref:System.Web.UI.HtmlTextWriter>呈现对象`<label>`标记元素。 如果是，`<font>`具有元素`color`属性设置为`red`返回修改的格式`<label>`元素的文本。  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">无法设置属性值。</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagName" />
      </Docs>
    </Member>
    <Member MemberName="TagLeftChar">
      <MemberSignature Language="C#" Value="public const char TagLeftChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagLeftChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagLeftChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagLeftChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示标记标签的左尖括号 (&lt;)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagLeftChar>字段由<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>， <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>， <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>，和<xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>时写入标记的方法。  
  
   
  
## Examples  
 下面的代码示例将呈现的开始标记的第一个字符`<table>`具有元素名称的元素。 此代码示例使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法替换<xref:System.Web.UI.HtmlTextWriter.TagLeftChar>字段作为参数。  
  
 此代码示例将会呈现以下标记：  
  
 `<table`  
  
 [!code-csharp[MarkupTextWriter_Constants#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#9)]
 [!code-vb[MarkupTextWriter_Constants#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagName" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ TagName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置所呈现的标记元素的标记名称。</summary>
        <value>所呈现的标记元素的标记名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagName%2A>属性是只对继承的类使用的<xref:System.Web.UI.HtmlTextWriter>类。 应读取或设置<xref:System.Web.UI.HtmlTextWriter.TagName%2A>属性仅在<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>方法调用异步方法。 这是唯一一次设置为一致的值。  
  
   
  
## Examples  
 下面的代码示例演示如何重写的版本<xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A>派生自的类方法<xref:System.Web.UI.HtmlTextWriter>类。 下面的代码示例检查要呈现的元素是否为`<label>`元素通过调用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，，然后将<xref:System.Web.UI.HtmlTextWriter.TagName%2A>属性值和字符串， `"label"`，作为参数变量。 如果`<label>`元素将以将呈现的开始标记`<font>`元素，与`color`属性设置为`red`，呈现之前`<label>`元素的开始标记。 如果该元素来呈现不`<label>`元素、 基类的版本、<xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A>调用方法。  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TagRightChar">
      <MemberSignature Language="C#" Value="public const char TagRightChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagRightChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagRightChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagRightChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示标记标签的右尖括号 (&gt;)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagRightChar>字段由<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>， <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>，和<xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>时写入标记的方法。  
  
   
  
## Examples  
 下面的代码示例演示如何呈现的结束标记`<table>`元素通过调用的重载<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法。 若要呈现的标记的最后一个字符，该代码示例，请使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法替换<xref:System.Web.UI.HtmlTextWriter.TagRightChar>字段作为参数。  
  
 此代码示例将会呈现以下标记：  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将指定数据类型和任何挂起的制表符间距一起写入到输出流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的 <see cref="T:System.Boolean" />。</param>
        <summary>将布尔值的文本表示形式和任何挂起的制表符间距一起写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A>方法生成任何待定的选项卡，然后调用<xref:System.IO.TextWriter.Write%2A>基方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的 Unicode 字符。</param>
        <summary>将 Unicode 字符的文本表示形式和任何挂起的制表符间距一起写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A>方法生成任何待定的选项卡，然后调用<xref:System.IO.TextWriter.Write%2A>基方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法来结束开始标记中的`<img>`元素中的使用<xref:System.Web.UI.HtmlTextWriter.TagRightChar>常量。  
  
 此代码示例将会呈现以下标记：  
  
 `<img alt="A custom image">`  
  
 `</img>`  
  
 [!code-csharp[MarkupTextWriter_Samples1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#5)]
 [!code-vb[MarkupTextWriter_Samples1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">要写入到输出流的 Unicode 字符数组。</param>
        <summary>将 Unicode 字符数组的文本表示形式和任何挂起的制表符间距一起写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A>方法生成任何待定的选项卡，然后调用<xref:System.IO.TextWriter.Write%2A>基方法。  
  
   
  
## Examples  
 本部分提供两个代码示例。 第一个代码示例演示如何创建字符的数组。 第二个代码示例演示如何使用数组。  
  
 这些代码示例生成以下标记：  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 下面的代码示例演示如何创建拼写出的字符的数组`hello world`。 包括在数组中是<xref:System.Web.UI.HtmlTextWriter.SpaceChar>字段，这将创建两个词之间留一个空格。  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现`hello world`时包含在页中包含此示例代码中的控件在到页中，前面的代码示例中创建的字符数组。  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的双精度浮点数。</param>
        <summary>将双精度浮点数的文本表示形式和任何挂起的制表符间距一起写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A>方法生成任何待定的选项卡，然后调用<xref:System.IO.TextWriter.Write%2A>基方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现的值<xref:System.Double.MaxValue?displayProperty=nameWithType>字段。  
  
 此代码示例将生成以下标记：  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#7)]
 [!code-vb[MarkupTextWriter_Methods1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的 32 字节的带符号整数。</param>
        <summary>将 32 字节的带符号整数的文本表示形式和任何挂起的制表符间距一起写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A>方法生成任何待定的选项卡，然后调用<xref:System.IO.TextWriter.Write%2A>基方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的 64 字节的带符号整数。</param>
        <summary>将 64 字节的带符号整数的文本表示形式和任何挂起的制表符间距一起写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A>方法生成任何待定的选项卡，然后调用<xref:System.IO.TextWriter.Write%2A>基方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的对象。</param>
        <summary>将对象的文本表示形式和任何挂起的制表符间距一起写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A>方法生成任何待定的选项卡，然后调用<xref:System.IO.TextWriter.Write%2A>基方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现的值<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>属性。  
  
 此代码示例将生成以下标记：  
  
 `This is a rendered CultureInfo object.`  
  
 `<bold>`  
  
 值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>属性：  
  
 `</bold>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#8](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#8)]
 [!code-vb[MarkupTextWriter_Methods1#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的单精度浮点数。</param>
        <summary>将单精度浮点数的文本表示形式和任何挂起的制表符间距一起写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A>方法生成任何待定的选项卡，然后调用<xref:System.IO.TextWriter.Write%2A>基方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现的值<xref:System.Single.Epsilon?displayProperty=nameWithType>字段，它是最小可能值的<xref:System.Single>结构。  
  
 此代码示例将生成以下标记：  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#10)]
 [!code-vb[MarkupTextWriter_Methods1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要写入到输出流的字符串。</param>
        <summary>将指定的字符串和任何挂起的制表符间距一起写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A>方法生成任何待定的选项卡，然后调用<xref:System.IO.TextWriter.Write%2A>基方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现开始和结束标记的自定义标记元素之间的字符串。  
  
 此代码示例将生成以下标记：  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">包含零个或多个格式项的字符串。</param>
        <param name="arg0">要设置其格式的对象。</param>
        <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 方法相同的语义，将一个制表符字符串和一个格式化字符串连同任何挂起的制表符间距一起写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A>方法生成任何待定的选项卡，然后调用<xref:System.IO.TextWriter.Write%2A>基方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现的值的格式化的字符串<xref:System.Globalization.CultureInfo.CurrentCulture%2A>属性。  
  
 [!code-csharp[MarkupTextWriter_Methods1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#5)]
 [!code-vb[MarkupTextWriter_Methods1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">包含零个或多个格式项的字符串。</param>
        <param name="arg">要格式化的对象数组。</param>
        <summary>将包含某对象数组的文本表示形式的格式化字符串和任何挂起的制表符间距一起写入到输出流。 该方法使用与 <see cref="M:System.String.Format(System.String,System.Object[])" /> 方法相同的语义。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A>方法生成任何待定的选项卡，然后调用<xref:System.IO.TextWriter.Write%2A>基方法。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何呈现格式化的字符串和数组的内容。 第二个代码示例演示如何声明数组。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现格式化的字符串和名为一个对象数组的内容`curPriceTime`。 方法调用呈现数组的第二个成员之前呈现的第一个成员。  
  
 [!code-csharp[MarkupTextWriter_Methods2#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#9)]
 [!code-vb[MarkupTextWriter_Methods2#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#9)]  
  
 下面的代码示例演示如何声明`curPriceTime`对象数组。  
  
 [!code-csharp[MarkupTextWriter_Methods2#14](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#14)]
 [!code-vb[MarkupTextWriter_Methods2#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">将文本写入输出流的字符数组。</param>
        <param name="index">数组中开始写入的索引位置。</param>
        <param name="count">要写入到输出流的字符数。</param>
        <summary>将 Unicode 字符子数组的文本表示形式和任何挂起的制表符间距一起写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A>方法生成任何待定的选项卡，然后调用<xref:System.IO.TextWriter.Write%2A>基方法。  
  
   
  
## Examples  
 本部分提供两个代码示例。 第一个代码示例演示如何创建的字符数组。 第二个代码示例演示如何使用数组。  
  
 这些代码示例生成以下标记：  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 下面的代码示例演示如何创建拼写出的字符的数组`hello world`。 包括在数组中是<xref:System.Web.UI.HtmlTextWriter.SpaceChar>字段，这将创建两个词之间留一个空格。  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 下面的代码示例的以下部分采用`index`和`count`参数<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现在前面的示例创建的数组的前五个字符。  
  
 [!code-csharp[MarkupTextWriter_Methods2#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#11)]
 [!code-vb[MarkupTextWriter_Methods2#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">包含零个或多个格式项的字符串。</param>
        <param name="arg0">要设置其格式的对象。</param>
        <param name="arg1">要设置其格式的对象。</param>
        <summary>将包含两个对象的文本表示形式的格式化字符串和任何挂起的制表符间距一起写入到输出流。 该方法使用与 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 方法相同的语义。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A>方法生成任何待定的选项卡，然后调用<xref:System.IO.TextWriter.Write%2A>基方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.Write%2A>方法呈现格式化的字符串和的值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>和<xref:System.DateTime.Today%2A>属性。  
  
 [!code-csharp[MarkupTextWriter_Methods1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#6)]
 [!code-vb[MarkupTextWriter_Methods1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将标记属性及其值写入到输出流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要写入到输出流的属性。</param>
        <param name="value">要分配给特性的值。</param>
        <summary>将指定的标记属性和值写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>方法编写标记属性和它们的值没有编码的。 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>方法将写入括在双引号 （"） 的属性值。 如果`value`是`null`、<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>方法将写入仅的属性名称。  
  
   
  
## Examples  
 下面的代码示例演示呈现`<img>`元素中的哪两种重载<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>调用方法。 此代码示例使用以下过程：  
  
-   调用<xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>方法，来呈现元素的开始字符。  
  
-   调用<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29>重载以将`alt`属性和其值的`<img>`元素。  
  
-   调用<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>重载来呈现自定义`myattribute`属性，值为`No "encoding" required`，然后将设置`fEncode`到`false`。  
  
-   关闭该元素的开始标记，然后调用<xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>方法来关闭`<img>`元素。  
  
 此代码示例将生成以下标记：  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中，您可以重写<see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />方法可定义编写属性和它们的值的自定义规则。例如，你可以编写使用允许的代码<see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />方法写入具有空值的属性。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">要写入输出流的标记特性。</param>
        <param name="value">要分配给特性的值。</param>
        <param name="fEncode">若要对特性及其分配值进行编码，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>将指定标记特性和值写入输出流，并且（如果指定）写入经过编码的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>方法编写标记属性和它们的值或无需编码。 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>方法使用<xref:System.Web.HttpUtility.HtmlAttributeEncode%2A>方法来执行操作的编码。  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>方法将写入括在双引号 （"） 的属性值。 如果`value`是`null`、<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>方法将写入仅的属性名称。  
  
   
  
## Examples  
 下面的代码示例演示呈现`<img>`元素中的哪两种重载<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>调用方法。 此代码示例使用以下过程：  
  
-   调用<xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>方法，来呈现元素的开始字符。  
  
-   调用<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29>重载以将`alt`属性和其值的`<img>`元素。  
  
-   调用<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>重载来呈现自定义`myattribute`属性，值为`No "encoding" required`，然后将设置`fEncode`到`false`。  
  
-   关闭该元素的开始标记，然后调用<xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>方法来关闭`<img>`元素。  
  
 此代码示例将生成以下标记：  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在派生类中，您可以重写<see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />方法可定义编写属性和它们的值的自定义规则。例如，你可以编写使用允许的代码<see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />方法写入具有空值的属性。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBeginTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">要写入其开始标记的标记元素。</param>
        <summary>将任何制表符间距和指定标记元素的开始标记写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>方法不会写入标记元素的开始标记在右尖括号 (>)。 这就可以将写入标记属性指定给元素的开始标记。 使用<xref:System.Web.UI.HtmlTextWriter.TagRightChar>常量，以结束开始标记，在调用时<xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>方法。 使用<xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>方法替换<xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd>常量时写入标记的自结束的元素。  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>方法使用的自定义服务器控件所不允许标记或特性的映射，并为每个请求相同的方式呈现标记元素。  
  
   
  
## Examples  
 下面的代码示例演示呈现`<img>`元素中的哪两种重载<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>调用方法。 此代码示例使用以下过程：  
  
-   调用<xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>方法，来呈现元素的开始字符。  
  
-   调用<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29>重载以将`alt`属性和其值的`<img>`元素。  
  
-   调用<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>重载来呈现自定义`myattribute`属性，值为`No "encoding" required`，然后将设置`fEncode`到`false`。  
  
-   关闭该元素的开始标记，然后调用<xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>方法来关闭`<img>`元素。  
  
 此代码示例将生成以下标记：  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public virtual void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBreak();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see langword="&lt;br /&gt;" /> 标记元素写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A>方法呈现行在自定义控件或适配器标记中中断。 <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A>方法将写入之间留一个空格`br`和`/`为改进了 HTML 兼容性。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A>方法写入`<br />`到之后请求的浏览器的元素<xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A>方法将写入的编码`&lt;custID&gt; &amp; &lt;invoice#&gt;`标记。  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要进行编码并写入到输出流的文本字符串。</param>
        <summary>对请求设备的指定文本进行编码，然后将其写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A>方法的字符串包含命令的尖括号 (\<或 >) 或与号 (&)。  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A>方法使用<xref:System.Web.HttpUtility.HtmlEncode%2A>方法来执行的编码和也将 Unicode 字符转换`00A0`到`&nbsp;`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A>方法写入的编码的标记`&lt;custID&gt; &amp; &lt;invoice#&gt;`写入输出流。 <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A>方法写入`<br />`。  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrl">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrl (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrl(System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">要进行编码并写入到输出流的 URL 字符串。</param>
        <summary>对指定的 URL 进行编码，然后将它写入到输出流。 URL 可以包括参数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A>方法对中的字符串进行编码`url`根据 URL 编码的规范的参数。 未编码按照问号 （？） 分隔符的参数。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A>方法，将生成以下输出：  
  
 `http://localhost/Sample%20Folder/Sample%20%2b%20File.txt`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#3)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrlParameter">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrlParameter (string urlText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrlParameter(string urlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrlParameter (urlText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrlParameter(System::String ^ urlText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlText">要进行编码并写入到输出流的 URL 参数字符串。</param>
        <summary>对请求的设备的指定 URL 参数进行编码，然后将它写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 的参数部分中的空格被编码为加号 （+） 和等号 （=） 编码为`%3d`。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A>方法，将生成以下输出：  
  
 `ID%3dCity+State`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#4)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEndTag">
      <MemberSignature Language="C#" Value="public virtual void WriteEndTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEndTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEndTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">要写入其结束标记的元素。</param>
        <summary>写入指定标记元素的任何制表符间距和结束标记。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与不同<xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>方法，<xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>方法具有无法从逻辑上使匹配相应的开始标记的元素结束标记。  
  
   
  
## Examples  
 下面的代码示例演示呈现`<img>`元素。 此代码示例使用以下过程：  
  
-   调用<xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>方法来呈现元素的开始字符。  
  
-   调用的两个重载<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A>方法写入属性到`<img>`元素。  
  
-   调用<xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>方法来关闭`<img>`元素。  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteFullBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteFullBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteFullBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteFullBeginTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">要写入到输出流的元素。</param>
        <summary>将任何制表符间距和指定标记元素的开始标记写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>方法自动在右尖括号 (>) 的写入的元素的开始标记与不同<xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>方法，不会写入在右尖括号。 使用<xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>的标记元素没有属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>按照重载参数的指定，将数据写入到 <see cref="T:System.Web.UI.HtmlTextWriter" /> 输出流，并在后面跟上一个行结束符字符串。 此方法的所有版本均将任何挂起的制表符间距写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将行结束符字符串写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 有关详情，请参阅<xref:System.IO.TextWriter.WriteLine%2A>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>方法来插入行后的`<img>`元素呈现。  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的布尔值。</param>
        <summary>将任何挂起的制表符间距和一个布尔值的文本表示形式写入到输出流，并在后面跟上一个行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的字符。</param>
        <summary>将任何挂起的制表符间距和一个 Unicode 字符写入到输出流，并在后面跟上一个行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">要写入到输出流的字符数组。</param>
        <summary>将任何挂起的制表符间距和一个 Unicode 字符数组写入到输出流，并在后面跟上一个行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
   
  
## Examples  
 本部分提供两个代码示例。 第一个代码示例演示如何创建数组。 第二个代码示例演示如何使用该数组。  
  
 这些代码示例生成以下标记：  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 下面的代码示例演示如何创建拼写出的字符的数组`hello world`。 包括在数组中是<xref:System.Web.UI.HtmlTextWriter.SpaceChar>字段，这将创建两个词之间留一个空格。  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 下面的代码示例呈现`hello world`已在前面的示例通过使用的字符数组<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>方法。  
  
 [!code-csharp[MarkupTextWriter_Methods2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#5)]
 [!code-vb[MarkupTextWriter_Methods2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的双精度浮点数。</param>
        <summary>将任何挂起的制表符间距和一个双精度浮点数的文本表示形式写入到输出流，并在后面跟上一个行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>方法呈现的值<xref:System.Double.MaxValue?displayProperty=nameWithType>字段。  
  
 此代码示例将生成以下标记：  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#3)]
 [!code-vb[MarkupTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的 32 字节的带符号整数。</param>
        <summary>将任何挂起的制表符间距和一个 32 字节有符号整数的文本表示形式写入到输出流，并在后面跟上一个行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的 64 字节的带符号整数。</param>
        <summary>将任何挂起的制表符间距和一个 64 字节有符号整数的文本表示形式写入到输出流，并在后面跟上一个行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的对象。</param>
        <summary>将任何挂起的制表符间距和一个对象的文本表示形式写入到输出流，并在后面跟上一个行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>方法呈现的值<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>到控件的属性。  
  
 [!code-csharp[MarkupTextWriter_Methods1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#4)]
 [!code-vb[MarkupTextWriter_Methods1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的单精度浮点数。</param>
        <summary>将任何挂起的制表符间距和一个单精度浮点数的文本表示形式写入到输出流，并在后面跟上一个行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>方法呈现的值<xref:System.Single.Epsilon?displayProperty=nameWithType>字段，它是最小可能值的<xref:System.Single>结构。  
  
 此代码示例将生成以下标记：  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#9)]
 [!code-vb[MarkupTextWriter_Methods1#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要写入到输出流的字符串。</param>
        <summary>将任何挂起的制表符间距和一个文本字符串写入到输出流，并在后面跟上一个行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">要写入到输出流的 4 字节无符号整数。</param>
        <summary>将任何挂起的制表符间距和一个 4 字节无符号整数的文本表示形式写入到输出流，并在后面跟上一个行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">包含零个或多个格式项的字符串。</param>
        <param name="arg0">要设置其格式的对象。</param>
        <summary>将任何挂起的制表符间距和一个包含一个对象的文本表示形式的格式化字符串写入到输出流，并在后面跟上一个行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>方法使用相同的语义<xref:System.String.Format%28System.String%2CSystem.Object%29>方法。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>方法呈现的值的格式化的字符串<xref:System.Globalization.CultureInfo.CurrentCulture%2A>属性。  
  
 [!code-csharp[MarkupTextWriter_Methods1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#1)]
 [!code-vb[MarkupTextWriter_Methods1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">包含零个或多个格式项的字符串。</param>
        <param name="arg">要格式化的对象数组。</param>
        <summary>将任何挂起的制表符间距和一个包含对象数组的文本表示形式的格式化字符串写入到输出流，并在后面跟上一个行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>方法使用相同的语义<xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29>方法。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`方法。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何呈现字符串和数组写入输出流。 第二个演示如何声明数组。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>方法呈现格式化的字符串和写入输出流对象数组的内容。  
  
 [!code-csharp[MarkupTextWriter_Methods2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#2)]
 [!code-vb[MarkupTextWriter_Methods2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#2)]  
  
 下面的代码示例演示如何声明已在前面的代码示例中呈现的对象数组。  
  
 [!code-csharp[MarkupTextWriter_Methods2#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#7)]
 [!code-vb[MarkupTextWriter_Methods2#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">向输出流写入文本所使用的字符数组。</param>
        <param name="index">字符数组中开始写入的位置。</param>
        <param name="count">要写入到输出流的数组中的字符数。</param>
        <summary>将任何挂起的制表符间距和一个 Unicode 字符子数组写入到输出流，并在后面跟上一个行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何创建的字符数组。 第二个代码示例演示如何使用数组。  
  
 这些代码示例生成以下标记：  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 下面的代码示例演示如何创建拼写出的字符的数组`hello world`。 包括在数组中是<xref:System.Web.UI.HtmlTextWriter.SpaceChar>字段，这将创建两个词之间留一个空格。  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 下面的代码示例使用`index`和`count`参数<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>方法呈现在前面的代码示例中创建的数组的前五个字符。  
  
 [!code-csharp[MarkupTextWriter_Methods2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#4)]
 [!code-vb[MarkupTextWriter_Methods2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">包含零个或多个格式项的字符串。</param>
        <param name="arg0">要设置其格式的对象。</param>
        <param name="arg1">要设置其格式的对象。</param>
        <summary>将任何挂起的制表符间距和包含两个对象的文本表示形式的格式化字符串写入到输出流，并在后面跟上行结束符字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>方法使用相同的语义<xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29>方法。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>方法呈现格式化的字符串和的值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>属性和<xref:System.DateTime.Today%2A>属性。  
  
 [!code-csharp[MarkupTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#2)]
 [!code-vb[MarkupTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineNoTabs">
      <MemberSignature Language="C#" Value="public void WriteLineNoTabs (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLineNoTabs(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLineNoTabs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLineNoTabs (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteLineNoTabs(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要写入到输出流的字符串。</param>
        <summary>将一个字符串写入到输出流，并在后面跟上一个行结束符字符串。 此方法忽略任何指定的制表符间距。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlTextWriter.WriteLineNoTabs%2A>方法而不是<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A>方法时不希望呈现在呈现字符串之前任何选项卡间距`s`。  
  
 默认行结束符字符串为回车符后跟一个换行符 ("\r\n")。 <xref:System.IO.TextWriter.WriteLine%2A>基方法用于写入`value`参数。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将样式属性及其值写入到输出流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要写入到输出流的样式属性。</param>
        <param name="value">分配给样式属性的值。</param>
        <summary>将指定的样式属性写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A>方法将写入样式属性采用以下形式：  
  
 `name` `=` `value` `;`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">要写入到输出流的样式属性。</param>
        <param name="value">分配给样式属性的值。</param>
        <param name="fEncode">若要对样式属性及其赋值进行编码，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>将指定的样式特性和值写入到输出流，如果指定了值，则还要对值进行编码。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A>方法将写入样式属性采用以下形式：  
  
 `name` `=` `value` `;`  
  
 <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A>方法用于编码`value`参数。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteUrlEncodedString">
      <MemberSignature Language="C#" Value="protected void WriteUrlEncodedString (string text, bool argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WriteUrlEncodedString(string text, bool argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub WriteUrlEncodedString (text As String, argument As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void WriteUrlEncodedString(System::String ^ text, bool argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="argument" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">要进行编码并写入到输出流的字符串。</param>
        <param name="argument">如果为 <see langword="true" />，则将字符串编码为 URL 参数部分的一部分；如果为 <see langword="false" />，则将字符串编码为 URL 路径部分的一部分。</param>
        <summary>写入指定的字符串，并根据 URL 要求对它进行编码。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A>方法对可以将其视为 URL 分隔符的字符进行编码 (依赖于的设置`argument`) 为字符串形式的`%xx`，如果的 ASCII 代码是小于 128; 否则为`%uxxxx`，其中`x`是十六进制数字。  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A>和<xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A>方法使用<xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A>作为实用工具方法的方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>