<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="28ae5dfacad6cbd152b6f332ea1464246759b69a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36378167" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ChtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class ChtmlTextWriter&#xA;Inherits Html32TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChtmlTextWriter : System::Web::UI::Html32TextWriter" />
  <TypeSignature Language="F#" Value="type ChtmlTextWriter = class&#xA;    inherit Html32TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>向 ASP.NET 服务器控件的输出流写入一系列特定于 cHTML 的字符和文本。 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 类提供 ASP.NET 服务器控件在将 cHTML 内容呈现给客户端时所使用的格式化功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compact HTML 或 cHTML 是 HTML 2.0、 HTML 3.2 和 HTML 4.0 的子集，并旨在在具有有限的内存和 CPU 处理能力，以及显示屏幕较小，有限格式设置功能和有限的数量的输入选项 （如移动电话的设备上的呈现触控板）。 因此，cHTML 不支持以下：  
  
-   JPEG 图像。  
  
-   表。  
  
-   图像映射。  
  
-   多个字符字体和样式。  
  
-   背景色和图像。  
  
-   帧。  
  
-   样式表。  
  
 <xref:System.Web.UI.ChtmlTextWriter>类派生自<xref:System.Web.UI.Html32TextWriter>类和其大部分功能由提供<xref:System.Web.UI.Html32TextWriter>和所有标记文本编写器的基类即<xref:System.Web.UI.HtmlTextWriter>类。  
  
   
  
## Examples  
 下面的代码示例演示如何创建一个名为类`CustomChtmlTextWriter`、 派生自<xref:System.Web.UI.ChtmlTextWriter>类。 它创建两个构造函数和替代<xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A>方法，以阻止`bgcolor`从正在写入的输出流的样式属性<xref:System.Web.UI.ChtmlTextWriter>对象。 它还将创建一个名为类`ChtmlCustomPageAdapter`，它定义一个方法， `CreateCustomChtmlTextWriter`，它创建并返回的实例`CustomChtmlTextWriter`类。 `CustomChtmlTextWriter`随后将呈现到与使用 cHTML 标记的浏览器的设备页 cHTML 内容。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">呈现标记内容的 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>初始化使用 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 常数使行缩进的 <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter>类有两个构造函数，这是标准的所有类的直接或间接派生从<xref:System.Web.UI.HtmlTextWriter>类。  
  
 <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A>构造函数，采用的实例<xref:System.IO.TextWriter>类作为参数，调用第二个构造函数并将其传递两个参数值：  
  
-   <xref:System.IO.TextWriter>。  
  
-   中指定的字符串值<xref:System.Web.UI.HtmlTextWriter.DefaultTabString>字段，它定义 XHTML 文本编写器使用的选项卡间距。  
  
   
  
## Examples  
 下面的代码示例演示如何创建一个名为类`ChtmlCustomPageAdapter`并定义一个方法， `CreateCustomChtmlTextWriter`，它创建并返回的实例`CustomChtmlTextWriter`类。 `CustomChtmlTextWriter`随后将呈现到与使用 cHTML 标记的浏览器的设备的页面的 cHTML 内容。  
  
 此代码示例摘自更大的示例为提供<xref:System.Web.UI.ChtmlTextWriter>类。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">呈现标记内容的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="tabString">
          <see cref="P:System.Web.UI.HtmlTextWriter.Indent" /> 中定义的空格数。</param>
        <summary>使用指定的行缩进初始化 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A>构造函数，采用这两个实例的<xref:System.IO.TextWriter>类和一个字符串作为参数，调用<xref:System.Web.UI.Html32TextWriter>构造函数的相同的参数创建的实例时<xref:System.Web.UI.ChtmlTextWriter>类。  
  
   
  
## Examples  
 下面的代码示例演示如何创建一个名为的自定义类`CustomChtmlTextWriter`、 派生自<xref:System.Web.UI.ChtmlTextWriter>类。 它将创建两个构造函数可用于创建自定义类的实例具有相同的模式为所有派生的类，直接或间接从<xref:System.Web.UI.HtmlTextWriter>类。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">要添加特性的 cHTML 元素。</param>
        <param name="attributeName">要添加到 <c>elementName</c> 的特性。</param>
        <summary>将一个特性添加到 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 对象的 cHTML 元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A>方法将属性添加到 cHTML 元素。 可识别的属性存储在识别的特性中<xref:System.Collections.Hashtable>集合<xref:System.Web.UI.ChtmlTextWriter>被引用的对象<xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property GlobalSuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ GlobalSuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalSuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已全局取消的特性（无法在 cHTML 元素上呈现）的 <see cref="T:System.Collections.Hashtable" /> 对象。</summary>
        <value>已全局取消的 cHTML 特性的 <see cref="T:System.Collections.Hashtable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下列表显示时的新实例，将设置全局禁止显示的特性<xref:System.Web.UI.ChtmlTextWriter>创建类。  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="chtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">要呈现的 cHTML 特性。</param>
        <param name="value">赋给 <c>name</c> 的值。</param>
        <param name="key">与 <c>name</c> 关联的 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />。</param>
        <summary>确定指定的 cHTML 特性及其值是否将呈现给请求页。 可以在从 <see cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> 类派生的类中重写 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 方法，以筛选出不希望在支持 cHTML 的设备上呈现的特性。</summary>
        <returns>如果将特性及其值写入 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 输入流，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，<xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A>的方法阻止中列出的全局禁止显示的特性<xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A>属性和元素详细信息，禁止显示特性中列出<xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A>从正在写入到输出流的属性。 你可以重写的行为<xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A>派生自的类中的方法<xref:System.Web.UI.ChtmlTextWriter>类。  
  
   
  
## Examples  
 下面的代码示例演示如何使用自定义的类，并重写<xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A>方法，以阻止`bgcolor`从正在写入到 cHTML 输出流的属性。 然后，它调用由基类提供的功能<xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A>方法从<xref:System.Web.UI.ChtmlTextWriter>类，以确保使用其默认行为，太。  
  
 此代码示例摘自更大的示例为提供<xref:System.Web.UI.ChtmlTextWriter>类。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="chtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">包含要呈现的样式属性名称的字符串。</param>
        <param name="value">一个包含要赋给 <c>name</c> 的值的字符串。</param>
        <param name="key">与 <c>name</c> 关联的 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />。</param>
        <summary>确定是否可以向当前标记元素呈现指定的 cHTML 标记样式特性及其值。</summary>
        <returns>如果可以呈现样式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender%2A>方法返回`false`时`key`等同于<xref:System.Web.UI.HtmlTextWriterStyle.TextDecoration>字段和值是`"line-through"`。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="chtmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">一个包含要呈现的 cHTML 元素的名称的字符串。</param>
        <param name="key">与 <c>name</c> 关联的 <see cref="T:System.Web.UI.HtmlTextWriterTag" />。</param>
        <summary>确定指定的 cHTML 标记元素是否将呈现给请求页。</summary>
        <returns>如果可以呈现指定的 cHTML 标记元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 cHTML 元素`span`元素，<xref:System.Web.UI.ChtmlTextWriter.OnTagRender%2A>方法返回`false`。 对于所有其他标记，它返回`true`。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RecognizedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ RecognizedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取可识别特性（可以在 cHTML 元素上呈现）的 <see cref="T:System.Collections.Hashtable" /> 对象。</summary>
        <value>可识别 cHTML 特性的 <see cref="T:System.Collections.Hashtable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A>方法将添加识别特性来识别的属性集合。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">要从中移除特性的 cHTML 元素。</param>
        <param name="attributeName">要从 <c>elementName</c> 移除的特性。</param>
        <summary>移除 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 对象的 cHTML 元素的特性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A>方法从 cHTML 元素中删除属性。 从已识别的属性中删除可识别的属性<xref:System.Collections.Hashtable>集合<xref:System.Web.UI.ChtmlTextWriter>被引用的对象<xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用户指定的已取消的特性（无法在 cHTML 元素上呈现）的 <see cref="T:System.Collections.Hashtable" /> 对象。</summary>
        <value>已取消的 cHTML 特性的 <see cref="T:System.Collections.Hashtable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A>方法将属性添加到取消的特性集合。  
  
 以下列表显示为设置将禁止显示的默认属性`div`元素时的新实例<xref:System.Web.UI.ChtmlTextWriter>创建类。  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 以下列表显示为设置将禁止显示的默认属性`span`元素时的新实例<xref:System.Web.UI.ChtmlTextWriter>创建类。  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="chtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see langword="br" /> 元素写入 cHTML 输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A>方法来插入行中断的 cHMTL 的流。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何创建一个 cHTML 类和自定义属性。 第二个代码示例演示如何在网页上使用自定义类。  
  
 若要使用自定义`ChtmlSimplelabelAdapter`适配器，添加以下代码为浏览器的.NET Framework 配置目录或自定义浏览器文件下 Web App_Browsers 目录中的子目录中的相应计算机范围文件应用程序根目录。  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 下面的代码示例演示如何创建一个名为的 cHTML 适配器类`ChtmlSimpleLabelAdapter`名为的类`SimpleLabel`。 它创建一个自定义`Control`属性，它允许`ChtmlSimpleLabelAdapter`类访问的成员`SimpleLabel`类，然后重写<xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A>方法。 重写时，将发生以下事件：  
  
-   它创建一个引用到<xref:System.Web.UI.ChtmlTextWriter>对象，名为`w`，该类派生自<xref:System.Web.UI.HtmlTextWriter>作为传递对象`writer`参数<xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A>方法。  
  
-   它创建一个字符串，并将其设置为等于`SimpleLabel.Text`值。  
  
-   它调用<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>要应用的样式定义的方法<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>于 cHTML 标签的属性输出流。  
  
-   它写入`Text`属性值写入流，并关闭 style 块通过调用<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>方法。  
  
-   它调用<xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A>方法呈现`br`写入输出流文本和样式呈现之后的元素。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.vb#2)]  
  
 下面的示例演示如何使用`SimpleLabel`网页中的类。  
  
 [!code-aspx-csharp[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.aspx#3)]
 [!code-aspx-vb[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteEncodedText : string -&gt; unit" Usage="chtmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要进行编码并写入到输出流的文本字符串。</param>
        <summary>对请求设备的指定文本进行编码，然后将其写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果文本参数传递到<xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A>方法是`null`或其长度为零，则不会写入。  
  
 使用<xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A>方法的字符串包含命令的尖括号 (\<或 >) 或与号 (&) 并且你想要确保在发出请求的设备上它们也能正确呈现。  
  
 <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A>方法使用基类的<xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
  </Members>
</Type>