<Type Name="ICallbackEventHandler" FullName="System.Web.UI.ICallbackEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5bdaac1b3c31dacf453c3e165f7357b0a5a0350f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36377215" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICallbackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICallbackEventHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ICallbackEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICallbackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICallbackEventHandler" />
  <TypeSignature Language="F#" Value="type ICallbackEventHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>用于指示控件可以作为服务器上的回调事件的目标。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现<xref:System.Web.UI.ICallbackEventHandler>需要接收回调事件任何自定义控件接口。 有关详细信息，请参阅[实现客户端回调而无需回发](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)。  
  
 实现的控件示例<xref:System.Web.UI.ICallbackEventHandler>接口包括<xref:System.Web.UI.WebControls.GridView>， <xref:System.Web.UI.WebControls.DetailsView>，和<xref:System.Web.UI.WebControls.TreeView>控件。 回调事件实现以控件为目标时<xref:System.Web.UI.ICallbackEventHandler>接口，<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>调用方法来处理该事件，作为参数传递的事件自变量和<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>方法会返回结果的回调。  
  
 同步或异步，将在回调过程从数据源控件中检索数据的控件可以这样做。 ASP.NET 控件喜欢<xref:System.Web.UI.WebControls.GridView>， <xref:System.Web.UI.WebControls.DetailsView>，和<xref:System.Web.UI.WebControls.TreeView>以同步方式实现。 同步回调不会阻止用户在浏览器中工作。 在同步模式下，还可以执行一次只有一个回调，最后一个回调优先。 当 Web 控件实现以支持异步行为时，可以同时引发多个回调。 有关异步编程的详细信息，请参阅[基于事件的异步模式 (EAP)](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)。  
  
 你可以指定是否来自用户界面的回调事件呈现通过控件实现<xref:System.Web.UI.ICallbackEventHandler>接口进行验证。 验证事件是一种很好的安全做法。 但是，出于性能原因可以禁用它。 若要控制是否事件验证回调事件，请将设置`enableEventValidation`属性[@ Page](http://msdn.microsoft.com/library/f06cf9e5-22bb-461d-8b8f-549e53ff40a4)指令或`enableEventValidation`属性[页元素 （ASP.NET 设置架构）](http://msdn.microsoft.com/library/4123bb66-3fe4-4d62-b70e-33758656b458)的 Web.config 文件。 如果你设置<xref:System.Web.UI.Page.EnableEventValidation%2A>属性在代码中，将其设置`Page_Init`的页处理阶段。 平衡与其性能成本的事件验证的安全优势的详细信息，请参阅[ASP.NET 性能概述](http://msdn.microsoft.com/library/f882bf1b-a009-4312-ac06-74370ffabc0b)。  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
    <altmember cref="M:System.Web.UI.WebControls.DetailsView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
  </Docs>
  <Members>
    <Member MemberName="GetCallbackResult">
      <MemberSignature Language="C#" Value="public string GetCallbackResult ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCallbackResult() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackResult () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackResult();" />
      <MemberSignature Language="F#" Value="abstract member GetCallbackResult : unit -&gt; string" Usage="iCallbackEventHandler.GetCallbackResult " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回以控件为目标的回调事件的结果。</summary>
        <returns>回调的结果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中引发的异常<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>将不会阻止<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>从调用并返回结果。 若要防止<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>中引发了异常时，则返回一个结果，设置一个标志<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>并返回从空字符串<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.DetailsView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.GetCallbackResult" />
      </Docs>
    </Member>
    <Member MemberName="RaiseCallbackEvent">
      <MemberSignature Language="C#" Value="public void RaiseCallbackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseCallbackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseCallbackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseCallbackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaiseCallbackEvent : string -&gt; unit" Usage="iCallbackEventHandler.RaiseCallbackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">一个字符串，表示要传递到事件处理程序的事件参数。</param>
        <summary>处理以控件为目标的回调事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当`null`使用作为事件自变量参数，该字符串序列化为"null"，然后发送回服务器。 因为没有方法来区分`null`和"null"，则应避免使用`null`回调的自变量参数。  
  
 中引发的异常<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>将不会阻止<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>从调用并返回结果。 若要防止<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>中引发了异常时，则返回一个结果，设置一个标志<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>并返回从空字符串<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      </Docs>
    </Member>
  </Members>
</Type>