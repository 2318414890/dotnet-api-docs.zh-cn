<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeAccessPermission.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b497a3cd20cb1d0ae8172ce6caf259ae001ddee0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b497a3cd20cb1d0ae8172ce6caf259ae001ddee0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.CodeAccessPermission">
          <source>Defines the underlying structure of all code access permissions.</source>
          <target state="translated">定义所有代码访问权限的基础结构。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.CodeAccessPermission">
          <source>Code access permissions use a stack walk to ensure that all callers of the code have been granted a permission.</source>
          <target state="translated">代码访问权限使用堆栈审核来确保代码的所有调用方已被授予权限。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.CodeAccessPermission">
          <source>If a permission object is <ph id="ph1">`null`</ph>, it is handled the same as a permission object with the state <ph id="ph2">&lt;xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果权限对象是<ph id="ph1">`null`</ph>，对其进行处理的状态的权限对象相同<ph id="ph2">&lt;xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.CodeAccessPermission">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
          <target state="translated">调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.CodeAccessPermission">
          <source>Inheritors of the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> class must be granted full trust to function correctly as permissions extending the security infrastructure.</source>
          <target state="translated">继承者<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph>类必须被授予完全信任才能正常工作作为安全基础结构扩展的权限。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.CodeAccessPermission">
          <source>To determine that the inheritors are fully trusted, <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> issues an <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityAction.InheritanceDemand&gt;</ph> for <ph id="ph3">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence&gt;</ph><ph id="ph4"> = </ph><ph id="ph5">`true`</ph> and <ph id="ph6">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy&gt;</ph><ph id="ph7"> = </ph><ph id="ph8">`true`</ph>.</source>
          <target state="translated">若要确定完全受信任，继承者<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph>问题<ph id="ph2">&lt;xref:System.Security.Permissions.SecurityAction.InheritanceDemand&gt;</ph>为<ph id="ph3">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence&gt;</ph> <ph id="ph4"> = </ph> <ph id="ph5">`true`</ph>和<ph id="ph6">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy&gt;</ph> <ph id="ph7"> = </ph> <ph id="ph8">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.CodeAccessPermission">
          <source>The following code example shows a permission derived from the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示派生自的权限<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.CodeAccessPermission">
          <source>for the ability of inheritors to provide evidence and view and modify policy.</source>
          <target state="translated">表示继承者提供证据以及查看和修改策略的能力。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.CodeAccessPermission">
          <source>Associated enumerations: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /&gt;</ph>.</source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>， <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.CodeAccessPermission">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph>, you must also implement the <ph id="ph2">&lt;see cref="T:System.Security.Permissions.IUnrestrictedPermission" /&gt;</ph> interface.</source>
          <target state="translated">继承自<ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph>，还必须实现<ph id="ph2">&lt;see cref="T:System.Security.Permissions.IUnrestrictedPermission" /&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.CodeAccessPermission">
          <source>The following <ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> members must be overridden: <ph id="ph2">&lt;see cref="M:System.Security.CodeAccessPermission.Copy" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Security.CodeAccessPermission.ToXml" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" /&gt;</ph>, and <ph id="ph7">&lt;see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" /&gt;</ph>.</source>
          <target state="translated">以下<ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph>成员必须被重写： <ph id="ph2">&lt;see cref="M:System.Security.CodeAccessPermission.Copy" /&gt;</ph>， <ph id="ph3">&lt;see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" /&gt;</ph>， <ph id="ph4">&lt;see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" /&gt;</ph>， <ph id="ph5">&lt;see cref="M:System.Security.CodeAccessPermission.ToXml" /&gt;</ph>， <ph id="ph6">&lt;see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" /&gt;</ph>，和<ph id="ph7">&lt;see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.CodeAccessPermission">
          <source>You must also define a constructor that takes a <ph id="ph1">&lt;see cref="T:System.Security.Permissions.PermissionState" /&gt;</ph> as its only parameter.</source>
          <target state="translated">您还必须定义的构造函数的<ph id="ph1">&lt;see cref="T:System.Security.Permissions.PermissionState" /&gt;</ph>作为其唯一参数。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.CodeAccessPermission">
          <source>You must apply the <ph id="ph1">&lt;see cref="T:System.SerializableAttribute" /&gt;</ph> attribute to a class that inherits from <ph id="ph2">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph>.</source>
          <target state="translated">您必须首先应用<ph id="ph1">&lt;see cref="T:System.SerializableAttribute" /&gt;</ph>属性设为继承自的类<ph id="ph2">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.#ctor">
          <source>This constructor is called to initialize state in the type whenever an instance of the derived class is created.</source>
          <target state="translated">此构造函数调用以初始化类型中的状态，每当创建派生类的实例。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.#ctor">
          <source>Although you can explicitly call this constructor in the constructor declaration of the derived class constructor, this is not usually necessary; most compilers will automatically generate the call for you.</source>
          <target state="translated">尽管派生的类构造函数的构造函数声明中，您可以显式调用此构造函数，这通常没有必要;大多数编译器将自动生成对你的调用。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource.</source>
          <target state="translated">声明调用代码能够通过调用此方法的代码，访问受权限请求保护的资源，即使未对堆栈中处于较高位置的调用方授予访问该资源的权限。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>Using <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Assert" /&gt;</ph> can create security issues.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Assert" /&gt;</ph> 会引起安全问题。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
          <target state="translated">调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>Calling <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>阻止源于较低的超出调用此方法的代码，在调用堆栈中向上继续执行调用堆栈进行堆栈审核。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>Therefore, even if callers higher on the call stack do not have the requisite permissions to access a resource, they can still access it through the code that calls this method on the necessary permission.</source>
          <target state="translated">因此，即使调用堆栈上的高级调用方没有所需的权限来访问的资源，它们可以仍通过访问它的代码上所需的权限调用此方法。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>An assertion is effective only if the code that calls <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> passes the security check for the permission that it is asserting.</source>
          <target state="translated">断言是仅当调用的代码的有效<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>将传递它断言的权限的安全检查。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>The call to <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> is effective until the calling code returns to its caller.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>直到返回其调用方调用代码才生效。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>Only one <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> can be active on a frame.</source>
          <target state="translated">只有一个<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>可处于活动状态的帧。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>An attempt to call <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> when an active <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> exists on the frame results in a <ph id="ph3">&lt;xref:System.Security.SecurityException&gt;</ph>.</source>
          <target state="translated">尝试调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>时活动<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>上中的帧结果存在<ph id="ph3">&lt;xref:System.Security.SecurityException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>Call <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertAssert%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph> to remove an active <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertAssert%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph>删除活动<ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> 对于未授予对该权限的请求将不会成功的权限，将忽略。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>However, if code lower on the call stack calls <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> for that permission, a <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the stack walk reaches the code that tried to call <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>.</source>
          <target state="translated">但是，如果调用堆栈上较低的代码调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph>对该权限<ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph>堆栈审核达到尝试调用代码时，将引发<ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>This happens because the code that called <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> has not been granted the permission, even though it tried to <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> it.</source>
          <target state="translated">这是因为代码调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>未被授予权限，即使它尝试<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>它。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>Because calling <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately.</source>
          <target state="translated">因为调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>中删除所有代码调用链中的要求必须授予访问指定的资源的权限，它可以打开个安全问题，如果使用不当。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>Therefore, it should be used with great caution.</source>
          <target state="translated">因此，它应谨慎使用。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>The calling code does not have <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /&gt;</ph>.</source>
          <target state="translated">调用代码没有 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>There is already an active <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Assert" /&gt;</ph> for the current frame.</source>
          <target state="translated">已存在一个用于当前帧的活动的 <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Assert" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>for the ability to call <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Assert" /&gt;</ph>.</source>
          <target state="translated">它能够调用<ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Assert" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Assert">
          <source>You cannot override this method.</source>
          <target state="translated">不能重写此方法。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Copy">
          <source>When implemented by a derived class, creates and returns an identical copy of the current permission object.</source>
          <target state="translated">由派生类实现时，创建并返回当前权限对象的相同副本。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Copy">
          <source>A copy of the current permission object.</source>
          <target state="translated">当前权限对象的副本。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Copy">
          <source>A copy of a permission object represents the same access to resources as the original permission object.</source>
          <target state="translated">权限对象的副本与原始的权限对象的资源表示相同的访问权限。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Copy">
          <source>The following code example shows an override of the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Copy%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示如何重写的<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Copy%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Copy">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Copy">
          <source>You must override this method in a derived class.</source>
          <target state="translated">你必须重写此方法在派生类。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Demand">
          <source>Forces a <ph id="ph1">&lt;see cref="T:System.Security.SecurityException" /&gt;</ph> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.</source>
          <target state="translated">如果未对调用堆栈中处于较高位置的所有调用方授予当前实例所指定的权限，则在运行时强制 <ph id="ph1">&lt;see cref="T:System.Security.SecurityException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Demand">
          <source>This method is typically used by secure libraries to ensure that callers have permission to access a resource.</source>
          <target state="translated">安全库通常使用此方法以确保调用方有权访问的资源。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Demand">
          <source>For example, a file class in a secure class library calls <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> for the necessary <ph id="ph2">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> before performing a file operation requested by the caller.</source>
          <target state="translated">例如，安全类库中的文件类调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph>为所需<ph id="ph2">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph>之前执行由调用方请求的文件操作。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Demand">
          <source>The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</source>
          <target state="translated">调用此方法的代码的权限不会检查;检查开始从该代码的直接调用方，并在堆栈中向上继续进行。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Demand">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
          <target state="translated">调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Demand">
          <source><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> succeeds only if no <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is raised.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> 如果未成功<ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph>引发。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Demand">
          <source>A caller higher in the call stack does not have the permission specified by the current instance.</source>
          <target state="translated">调用堆栈中处于较高位置的调用方不具有当前实例所指定的权限。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Demand">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Demand">
          <source>A caller higher in the call stack has called <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Deny" /&gt;</ph> on the current permission object.</source>
          <target state="translated">调用堆栈中处于较高位置的调用方已经对当前权限对象调用了 <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Deny" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Demand">
          <source>You cannot override this method.</source>
          <target state="translated">不能重写此方法。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.</source>
          <target state="translated">防止处于调用堆栈较高位置的调用函数使用可以调用此方法来访问当前实例指定资源的代码。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>The <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> method should be used only to protect resources from accidental access by fully trusted code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>方法应仅用于防止意外的访问的资源完全受信任的代码。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>It should not be used to protect resources from intentional misuse by untrusted code.</source>
          <target state="translated">它不应以防止故意误用资源受信任的代码。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>For example, if method <ph id="ph1">`A`</ph> issues a <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> for a permission and then calls method <ph id="ph3">`B`</ph>, method <ph id="ph4">`B`</ph> can overtly override the <ph id="ph5">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> by issuing an <ph id="ph6">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>.</source>
          <target state="translated">例如，如果方法<ph id="ph1">`A`</ph>问题<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>权限，然后调用方法<ph id="ph3">`B`</ph>，方法<ph id="ph4">`B`</ph>而公开可以替代<ph id="ph5">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>通过发出<ph id="ph6">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>The called method is always higher in the stack.</source>
          <target state="translated">调用的方法是始终对堆栈中。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>Therefore, if method <ph id="ph1">`B`</ph> tries to access a protected resource, the security system begins checking for permissions with it because method <ph id="ph2">`B`</ph> is the immediate caller, and then walks down the stack to confirm that there is no <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> lower in the stack.</source>
          <target state="translated">因此，如果方法<ph id="ph1">`B`</ph>尝试访问受保护的资源，安全系统开始查找与它的权限，因为方法<ph id="ph2">`B`</ph>是直接调用方，上下然后查找步程堆栈，以确认是否存在任何<ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>堆栈中下方。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>Method <ph id="ph1">`B`</ph>, which is trying to access the resource, can stop the stack walk immediately by using the <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> method.</source>
          <target state="translated">方法<ph id="ph1">`B`</ph>，这尝试访问资源，可以停止堆栈审核立即使用<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>In that case, the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> placed on the stack by method <ph id="ph2">`A`</ph> (the calling method) is never discovered.</source>
          <target state="translated">在这种情况下，<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>方法将位于堆栈上<ph id="ph2">`A`</ph>永远不会发现 （调用方法）。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</source>
          <target state="translated">此方法会阻止调用堆栈中的高级调用方通过调用此方法的代码，访问受保护的资源，即使这些调用方已被授予权限来访问它。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
          <target state="translated">调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> from being used to access the resource protected by the denied permission.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> 可以限制了编程人员的责任或帮助防止出现意外的安全问题，因为它有助于防止调用的方法<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>从用于访问被拒绝的权限所保护的资源。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>If a method calls <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> on a permission, and if a <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>.</source>
          <target state="translated">如果一个方法调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>对权限，并且如果<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph>到达时，该安全检查为该权限调用方的调用堆栈中较低级别调用，将会失败<ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>The call to <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> is effective until the calling code returns to its caller.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>直到返回其调用方调用代码才生效。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>Only one <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> can be active on a frame.</source>
          <target state="translated">只有一个<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>可处于活动状态的帧。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>An attempt to call <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> when an active <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> exists on the frame results in a <ph id="ph3">&lt;xref:System.Security.SecurityException&gt;</ph>.</source>
          <target state="translated">尝试调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>时活动<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>上中的帧结果存在<ph id="ph3">&lt;xref:System.Security.SecurityException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>Call <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertDeny%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph> to remove an active <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertDeny%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph>删除活动<ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> 对于未授予对该权限的请求将不会成功的权限，将忽略。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>There is already an active <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Deny" /&gt;</ph> for the current frame.</source>
          <target state="translated">已存在一个用于当前帧的活动的 <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Deny" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Deny">
          <source>You cannot override this method.</source>
          <target state="translated">不能重写此方法。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph>.</source>
          <target state="translated">要与当前的 <ph id="ph2">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> 比较的 <ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> object is equal to the current <ph id="ph2">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph>.</source>
          <target state="translated">确定指定的 <ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> 对象是否等于当前的 <ph id="ph2">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified <ph id="ph2">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> object is equal to the current <ph id="ph3">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果指定的 <ph id="ph2">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> 对象等于当前的 <ph id="ph3">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph>，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Equals(System.Object)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph>.</source>
          <target state="translated">有关详情，请参阅<ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)">
          <source>The XML encoding to use to reconstruct the security object.</source>
          <target state="translated">用于重新构造安全对象的 XML 编码。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)">
          <source>When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</source>
          <target state="translated">当在派生类中替代时，用 XML 编码重新构造具有指定状态的安全对象。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)">
          <source>Custom code that extends security objects needs to implement the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.ToXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.FromXml%2A&gt;</ph> methods to make the objects security-encodable.</source>
          <target state="translated">扩展安全对象的自定义代码需要实现<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.ToXml%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.FromXml%2A&gt;</ph>方法来使对象安全性进行编码。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)">
          <source>The following code example shows an override of the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.FromXml%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示如何重写的<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.FromXml%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)">
          <source>The <ph id="ph1">&lt;paramref name="elem" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="elem" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)">
          <source>The <ph id="ph1">&lt;paramref name="elem" /&gt;</ph> parameter does not contain the XML encoding for an instance of the same type as the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="elem" /&gt;</ph> 参数不包含与当前实例类型相同的实例的 XML 编码。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)">
          <source>The version number of the <ph id="ph1">&lt;paramref name="elem" /&gt;</ph> parameter is not supported.</source>
          <target state="translated">不支持 <ph id="ph1">&lt;paramref name="elem" /&gt;</ph> 参数的版本号。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)">
          <source>You must override this method in a derived class.</source>
          <target state="translated">你必须重写此方法在派生类。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.GetHashCode">
          <source>Gets a hash code for the <ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> object that is suitable for use in hashing algorithms and data structures such as a hash table.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> 对象的哈希代码，此代码适合在哈希算法和数据结构（例如哈希表）中使用。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.GetHashCode">
          <source>A hash code for the current <ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.Security.CodeAccessPermission" /&gt;</ph> 对象的哈希代码。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.GetHashCode">
          <source>The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> objects.</source>
          <target state="translated">相同的权限的两个实例的哈希代码可能会有所不同，因此不应使用的哈希代码来比较两个<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
          <source>A permission to intersect with the current permission.</source>
          <target state="translated">要与当前权限相交的权限。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
          <source>It must be of the same type as the current permission.</source>
          <target state="translated">它必须与当前权限属于同一类型。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
          <source>When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</source>
          <target state="translated">由派生类实现时，创建并返回属于当前权限和指定权限的交集的权限。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
          <source>A new permission that represents the intersection of the current permission and the specified permission.</source>
          <target state="translated">表示当前权限和指定权限的交集的一个新权限。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
          <source>This new permission is <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the intersection is empty.</source>
          <target state="translated">如果交集为空，则此新权限为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
          <source>The intersection of two permissions is a permission that describes the set of operations they both describe in common.</source>
          <target state="translated">以下两个权限的交集是描述组的二者共同描述的操作的权限。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
          <source>Only a demand that passes both original permissions will pass the intersection.</source>
          <target state="translated">仅通过两个原始权限的请求将通过该交集。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
          <source>The following code example shows an override of the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Intersect%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示如何重写的<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Intersect%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> parameter is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and is not an instance of the same class as the current permission.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 参数不为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，并且不是与当前权限属于相同类的实例。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
          <source>You must override this method in a derived class.</source>
          <target state="translated">你必须重写此方法在派生类。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>A permission that is to be tested for the subset relationship.</source>
          <target state="translated">将要测试子集关系的权限。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>This permission must be of the same type as the current permission.</source>
          <target state="translated">此权限必须与当前权限属于同一类型。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</source>
          <target state="translated">由派生类实现时，确定当前权限是否为指定权限的子集。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current permission is a subset of the specified permission; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果当前权限是指定权限的子集，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.</source>
          <target state="translated">如果当前权限指定一组完全包含在指定权限的操作，当前权限是指定权限的子集。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>For example, a permission that represents access to C:\example.txt is a subset of a permission that represents access to C:<ph id="ph1">\\</ph>.</source>
          <target state="translated">例如，表示对 C:\example.txt 访问权限的权限是到 c： 表示访问权限的子集<ph id="ph1">\\</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>If this method returns <ph id="ph1">`true`</ph>, the current permission represents no more access to the protected resource than does the specified permission.</source>
          <target state="translated">如果此方法返回<ph id="ph1">`true`</ph>，当前的权限表示对受保护资源的访问权限不超过指定的权限。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>The following statements are required to be <ph id="ph1">`true`</ph> for all overrides of the <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.IsSubsetOf%2A&gt;</ph> method.</source>
          <target state="translated">以下语句都需要<ph id="ph1">`true`</ph>的所有重写<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.IsSubsetOf%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source><bpt id="p1">*</bpt>X<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Y<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>Z<ept id="p3">*</ept> represent custom code access permission objects that are not null references, <bpt id="p4">*</bpt>U<ept id="p4">*</ept> represents an unrestricted code access permission, and <bpt id="p5">*</bpt>N<ept id="p5">*</ept> represents an empty permission with a <ph id="ph1">&lt;xref:System.Security.Permissions.PermissionState&gt;</ph> of <ph id="ph2">&lt;xref:System.Security.Permissions.PermissionState.None&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>X<ept id="p1">*</ept>， <bpt id="p2">*</bpt>Y<ept id="p2">*</ept>，和<bpt id="p3">*</bpt>Z<ept id="p3">*</ept>表示不是空引用的自定义代码访问权限对象<bpt id="p4">*</bpt>U<ept id="p4">*</ept>表示不受限制的代码的访问权限，和<bpt id="p5">*</bpt>N<ept id="p5">*</ept>表示具有空权限<ph id="ph1">&lt;xref:System.Security.Permissions.PermissionState&gt;</ph>的<ph id="ph2">&lt;xref:System.Security.Permissions.PermissionState.None&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source><bpt id="p1">*</bpt>X<ept id="p1">*</ept>.IsSubsetOf(<bpt id="p2">*</bpt>X<ept id="p2">*</ept>) returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>X<ept id="p1">*</ept>。IsSubsetOf (<bpt id="p2">*</bpt>X<ept id="p2">*</ept>) 返回<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source><bpt id="p1">*</bpt>X<ept id="p1">*</ept>.IsSubsetOf(<bpt id="p2">*</bpt>Y<ept id="p2">*</ept>) returns the same value as <bpt id="p3">*</bpt>Y<ept id="p3">*</ept>.IsSubsetOf(<bpt id="p4">*</bpt>X<ept id="p4">*</ept>) if and only if <bpt id="p5">*</bpt>X<ept id="p5">*</ept> and <bpt id="p6">*</bpt>Y<ept id="p6">*</ept> represent the same set of permissions.</source>
          <target state="translated"><bpt id="p1">*</bpt>X<ept id="p1">*</ept>。IsSubsetOf (<bpt id="p2">*</bpt>Y<ept id="p2">*</ept>) 返回相同的值<bpt id="p3">*</bpt>Y<ept id="p3">*</ept>。IsSubsetOf (<bpt id="p4">*</bpt>X<ept id="p4">*</ept>) 当且仅当<bpt id="p5">*</bpt>X<ept id="p5">*</ept>和<bpt id="p6">*</bpt>Y<ept id="p6">*</ept>表示相同的权限集。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>If <bpt id="p1">*</bpt>X<ept id="p1">*</ept>.IsSubsetOf(<bpt id="p2">*</bpt>Y<ept id="p2">*</ept>) and <bpt id="p3">*</bpt>Y<ept id="p3">*</ept>.IsSubsetOf(<bpt id="p4">*</bpt>Z<ept id="p4">*</ept>) both return <ph id="ph1">`true`</ph>, <bpt id="p5">*</bpt>X<ept id="p5">*</ept>.IsSubsetOf(<bpt id="p6">*</bpt>Z<ept id="p6">*</ept>) returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">如果<bpt id="p1">*</bpt>X<ept id="p1">*</ept>。IsSubsetOf (<bpt id="p2">*</bpt>Y<ept id="p2">*</ept>) 和<bpt id="p3">*</bpt>Y<ept id="p3">*</ept>。IsSubsetOf (<bpt id="p4">*</bpt>Z<ept id="p4">*</ept>) 两者都返回<ph id="ph1">`true`</ph>， <bpt id="p5">*</bpt>X<ept id="p5">*</ept>。IsSubsetOf (<bpt id="p6">*</bpt>Z<ept id="p6">*</ept>) 返回<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source><bpt id="p1">*</bpt>X<ept id="p1">*</ept>.IsSubsetOf(<bpt id="p2">*</bpt>U<ept id="p2">*</ept>) returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>X<ept id="p1">*</ept>。IsSubsetOf (<bpt id="p2">*</bpt>U<ept id="p2">*</ept>) 返回<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source><bpt id="p1">*</bpt>X<ept id="p1">*</ept>.IsSubsetOf(<bpt id="p2">*</bpt>N<ept id="p2">*</ept>) returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>X<ept id="p1">*</ept>。IsSubsetOf (<bpt id="p2">*</bpt>N<ept id="p2">*</ept>) 返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source><bpt id="p1">*</bpt>N<ept id="p1">*</ept>.IsSubsetOf(<bpt id="p2">*</bpt>X<ept id="p2">*</ept>) returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>N<ept id="p1">*</ept>。IsSubsetOf (<bpt id="p2">*</bpt>X<ept id="p2">*</ept>) 返回<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>If <bpt id="p1">*</bpt>X<ept id="p1">*</ept> and <bpt id="p2">*</bpt>Y<ept id="p2">*</ept> represent custom code access permission objects that are null references, <bpt id="p3">*</bpt>X<ept id="p3">*</ept>.IsSubsetOf(<bpt id="p4">*</bpt>Y<ept id="p4">*</ept>) returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">如果<bpt id="p1">*</bpt>X<ept id="p1">*</ept>和<bpt id="p2">*</bpt>Y<ept id="p2">*</ept>表示自定义代码访问权限对象是空引用， <bpt id="p3">*</bpt>X<ept id="p3">*</ept>。IsSubsetOf (<bpt id="p4">*</bpt>Y<ept id="p4">*</ept>) 返回<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>If <bpt id="p1">*</bpt>Z<ept id="p1">*</ept> is also null, the compound set operation <bpt id="p2">*</bpt>X<ept id="p2">*</ept>.Union(<bpt id="p3">*</bpt>Y<ept id="p3">*</ept>).IsSubsetOf(<bpt id="p4">*</bpt>Z<ept id="p4">*</ept>) also returns <ph id="ph1">`true`</ph> because the union of two null permissions is a null permission.</source>
          <target state="translated">如果<bpt id="p1">*</bpt>Z<ept id="p1">*</ept>也为 null，则复合集运算<bpt id="p2">*</bpt>X<ept id="p2">*</ept>。联合 (<bpt id="p3">*</bpt>Y<ept id="p3">*</ept>)。IsSubsetOf (<bpt id="p4">*</bpt>Z<ept id="p4">*</ept>) 也会返回<ph id="ph1">`true`</ph>因为两个 null 权限的联合是 null 的权限。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>The following code example shows an override of the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.IsSubsetOf%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示如何重写的<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.IsSubsetOf%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> parameter is not <ph id="ph2">&lt;see langword="null" /&gt;</ph> and is not of the same type as the current permission.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 参数不是 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，而且与当前权限不是同一类型。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
          <source>You must override this method in a derived class.</source>
          <target state="translated">你必须重写此方法在派生类。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.</source>
          <target state="translated">防止处于调用堆栈较高位置的调用函数使用此代码，此代码将调用此方法来访问除当前实例指定的资源以外的所有资源。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>The <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> method should be used only to protect resources from accidental access by fully trusted code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>方法应仅用于防止意外的访问的资源完全受信任的代码。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>It should not be used to protect resources from intentional misuse by untrusted code.</source>
          <target state="translated">它不应以防止故意误用资源受信任的代码。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>For example, if method <ph id="ph1">`A`</ph> issues a <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> for a permission and then calls method <ph id="ph3">`B`</ph>, method <ph id="ph4">`B`</ph> can overtly override the <ph id="ph5">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> by issuing an <ph id="ph6">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>.</source>
          <target state="translated">例如，如果方法<ph id="ph1">`A`</ph>问题<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>权限，然后调用方法<ph id="ph3">`B`</ph>，方法<ph id="ph4">`B`</ph>而公开可以替代<ph id="ph5">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>通过发出<ph id="ph6">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>The called method is always higher in the stack.</source>
          <target state="translated">调用的方法是始终对堆栈中。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>Therefore, if method <ph id="ph1">`B`</ph> tries to access a protected resource, the security system begins checking for permissions with it because method <ph id="ph2">`B`</ph> is the immediate caller, and then walks down the stack to confirm that there is no <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> lower in the stack.</source>
          <target state="translated">因此，如果方法<ph id="ph1">`B`</ph>尝试访问受保护的资源，安全系统开始查找与它的权限，因为方法<ph id="ph2">`B`</ph>是直接调用方，上下然后查找步程堆栈，以确认是否存在任何<ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>堆栈中下方。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>Method <ph id="ph1">`B`</ph>, which is trying to access the resource, can stop the stack walk immediately by using the <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> method.</source>
          <target state="translated">方法<ph id="ph1">`B`</ph>，这尝试访问资源，可以停止堆栈审核立即使用<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>In that case, the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> placed on the stack by method <ph id="ph2">`A`</ph> (the calling method) is never discovered.</source>
          <target state="translated">在这种情况下，<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>方法将位于堆栈上<ph id="ph2">`A`</ph>永远不会发现 （调用方法）。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> is similar to <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>, in that both cause stack walks to fail when they would otherwise succeed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> 类似于<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>，因为同时导致堆栈审核失败时它们原本应该成功。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>The difference is that <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> specifies permissions that will cause the stack walk to fail, but <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> specifies the only permissions that do not cause the stack walk to fail.</source>
          <target state="translated">差异在于<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>指定权限将导致堆栈审核失败，但<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>指定不会导致堆栈审核失败的唯一权限。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>Call this method to ensure that your code can be used to access only the specified resources.</source>
          <target state="translated">调用此方法，以确保你的代码可以用于访问指定的资源。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>The call to <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> is effective until the calling code returns to its caller.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>直到返回其调用方调用代码才生效。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>Only one <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> can be active on a frame.</source>
          <target state="translated">只有一个<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>可处于活动状态的帧。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>An attempt to call <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> when an active <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> exists on the frame results in a <ph id="ph3">&lt;xref:System.Security.SecurityException&gt;</ph>.</source>
          <target state="translated">尝试调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>时活动<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>上中的帧结果存在<ph id="ph3">&lt;xref:System.Security.SecurityException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>Call <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph> to remove an active <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph>删除活动<ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> 对于未授予对该权限的请求将不会成功的权限，将忽略。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>However, if code lower on the call stack later calls <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> for that permission, a <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the stack walk reaches the code that tried to call <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>.</source>
          <target state="translated">但是，如果在调用的低级代码堆栈更高版本调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph>对该权限<ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph>堆栈审核达到尝试调用代码时，将引发<ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>This is because the code that called <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> has not been granted the permission, even though it called <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> for that permission.</source>
          <target state="translated">这是因为代码调用<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>未被授予权限，即使它调用<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>对该权限。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
          <target state="translated">调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>There is already an active <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.PermitOnly" /&gt;</ph> for the current frame.</source>
          <target state="translated">已存在一个用于当前帧的活动的 <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.PermitOnly" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.PermitOnly">
          <source>You cannot override this method.</source>
          <target state="translated">不能重写此方法。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.RevertAll">
          <source>Causes all previous overrides for the current frame to be removed and no longer in effect.</source>
          <target state="translated">导致当前帧以前所有的重写被删除且不再有效。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.RevertAll">
          <source>If there are no overrides (<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>) for the current frame, an <ph id="ph4">&lt;xref:System.ExecutionEngineException&gt;</ph> is thrown.</source>
          <target state="translated">如果没有重写 (<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>，或<ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>) 当前帧，<ph id="ph4">&lt;xref:System.ExecutionEngineException&gt;</ph>引发。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.RevertAll">
          <source>There is no previous <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Assert" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.Security.CodeAccessPermission.Deny" /&gt;</ph>, or <ph id="ph3">&lt;see cref="M:System.Security.CodeAccessPermission.PermitOnly" /&gt;</ph> for the current frame.</source>
          <target state="translated">当前框架没有上一个 <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Assert" /&gt;</ph>、<ph id="ph2">&lt;see cref="M:System.Security.CodeAccessPermission.Deny" /&gt;</ph> 和 <ph id="ph3">&lt;see cref="M:System.Security.CodeAccessPermission.PermitOnly" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.RevertAssert">
          <source>Causes any previous <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Assert" /&gt;</ph> for the current frame to be removed and no longer in effect.</source>
          <target state="translated">导致当前框架先前的所有 <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Assert" /&gt;</ph> 都被移除，不再有效。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.RevertAssert">
          <source>If there is no <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> for the current frame, an <ph id="ph2">&lt;xref:System.ExecutionEngineException&gt;</ph> is thrown.</source>
          <target state="translated">如果没有任何<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>当前帧，<ph id="ph2">&lt;xref:System.ExecutionEngineException&gt;</ph>引发。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.RevertAssert">
          <source>There is no previous <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Assert" /&gt;</ph> for the current frame.</source>
          <target state="translated">当前框架没有前一个 <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Assert" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.RevertDeny">
          <source>Causes any previous <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Deny" /&gt;</ph> for the current frame to be removed and no longer in effect.</source>
          <target state="translated">导致当前框架先前的所有 <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Deny" /&gt;</ph> 都被移除，不再有效。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.RevertDeny">
          <source>If there is no <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> for the current frame, an <ph id="ph2">&lt;xref:System.ExecutionEngineException&gt;</ph> is thrown.</source>
          <target state="translated">如果没有任何<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>当前帧，<ph id="ph2">&lt;xref:System.ExecutionEngineException&gt;</ph>引发。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.RevertDeny">
          <source>There is no previous <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Deny" /&gt;</ph> for the current frame.</source>
          <target state="translated">当前框架没有前一个 <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.Deny" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.RevertPermitOnly">
          <source>Causes any previous <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.PermitOnly" /&gt;</ph> for the current frame to be removed and no longer in effect.</source>
          <target state="translated">导致当前框架先前的所有 <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.PermitOnly" /&gt;</ph> 都被移除，不再有效。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.RevertPermitOnly">
          <source>If there is no <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> for the current frame, an <ph id="ph2">&lt;xref:System.ExecutionEngineException&gt;</ph> is thrown.</source>
          <target state="translated">如果没有任何<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>当前帧，<ph id="ph2">&lt;xref:System.ExecutionEngineException&gt;</ph>引发。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.RevertPermitOnly">
          <source>There is no previous <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.PermitOnly" /&gt;</ph> for the current frame.</source>
          <target state="translated">当前框架没有前一个 <ph id="ph1">&lt;see cref="M:System.Security.CodeAccessPermission.PermitOnly" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.ToString">
          <source>Creates and returns a string representation of the current permission object.</source>
          <target state="translated">创建并返回当前权限对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.ToString">
          <source>A string representation of the current permission object.</source>
          <target state="translated">当前权限对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.ToString">
          <source>This method is useful in debugging when you need to display the permission as a string.</source>
          <target state="translated">此方法可在调试时需要显示为字符串的权限。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.ToXml">
          <source>When overridden in a derived class, creates an XML encoding of the security object and its current state.</source>
          <target state="translated">当在派生类中重写时，创建安全对象及其当前状态的 XML 编码。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.ToXml">
          <source>An XML encoding of the security object, including any state information.</source>
          <target state="translated">安全对象的 XML 编码，包括任何状态信息。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.ToXml">
          <source>Custom code that extends security objects needs to implement the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.ToXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.FromXml%2A&gt;</ph> methods to make the objects security-encodable.</source>
          <target state="translated">扩展安全对象的自定义代码需要实现<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.ToXml%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.FromXml%2A&gt;</ph>方法来使对象安全性进行编码。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.ToXml">
          <source>The following code example shows an override of the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.ToXml%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示如何重写的<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.ToXml%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.ToXml">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.ToXml">
          <source>You must override this method in a derived class.</source>
          <target state="translated">你必须重写此方法在派生类。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
          <source>A permission to combine with the current permission.</source>
          <target state="translated">与当前权限合并的权限。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
          <source>It must be of the same type as the current permission.</source>
          <target state="translated">它必须与当前权限属于同一类型。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
          <source>When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.</source>
          <target state="translated">当在派生类中重写时，则创建属于当前权限与指定权限的并集的权限。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
          <source>A new permission that represents the union of the current permission and the specified permission.</source>
          <target state="translated">表示同时兼具当前权限和指定权限的新权限。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
          <source>The result of a call to <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Union%2A&gt;</ph> is a permission that represents all the operations represented by both the current permission and the specified permission.</source>
          <target state="translated">对的调用结果<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Union%2A&gt;</ph>是由当前权限和指定的权限表示所表示的所有操作的权限。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
          <source>Any demand that passes either permission passes their union.</source>
          <target state="translated">任何请求都会通过任一权限传递其联合。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
          <source>The following code example shows an override of the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Union%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示如何重写的<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Union%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
          <source>The <ph id="ph1">&lt;paramref name="other" /&gt;</ph> parameter is not <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph> 参数不为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
          <source>This method is only supported at this level when passed <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">被传递 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 时，此方法仅在该级别上受支持。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
          <source>You must override this method in a derived class.</source>
          <target state="translated">你必须重写此方法在派生类。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
          <source>You should return a copy of the permission if the value of the <ph id="ph1">&lt;paramref name="other" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果应返回权限的副本的值<ph id="ph1">&lt;paramref name="other" /&gt;</ph>参数是<ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>