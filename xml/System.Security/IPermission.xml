<Type Name="IPermission" FullName="System.Security.IPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ab62c8d43e0ca696a66655b37755ebe3e68e56e6" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30499661" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPermission : System.Security.ISecurityEncodable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPermission implements class System.Security.ISecurityEncodable" />
  <TypeSignature Language="DocId" Value="T:System.Security.IPermission" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPermission&#xA;Implements ISecurityEncodable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPermission : System::Security::ISecurityEncodable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义由权限类型实现的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 公共语言运行时中的权限是描述的可以保护对指定资源的操作组的对象。 权限对象描述操作或受到安全控制; 的访问它不表示访问或执行操作的权限。 权限将由应用程序代码和.NET Framework 安全系统使用以下方式。  
  
-   代码请求运行所需的权限。  
  
-   安全系统策略对授予权限以使其运行的代码。  
  
-   代码调用方请求程序调用的代码拥有的权限。  
  
-   代码可替代使用断言/拒绝/的唯一允许安全堆栈。  
  
> [!NOTE]
>  如果您编写的新权限，你必须在类中实现此接口。  
  
> [!IMPORTANT]
>  可以通过多个线程访问权限。 在实现此接口，必须保证<xref:System.Security.IPermission.IsSubsetOf%2A>， <xref:System.Security.IPermission.Intersect%2A>， <xref:System.Security.IPermission.Union%2A>，和<xref:System.Security.IPermission.Copy%2A>方法实现都是线程安全。  
  
   
  
## Examples  
 此示例演示如何定义使用代码访问安全性使用权限类。 实现了所有必需的权限接口。  
  
 [!code-cpp[Permission#1](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#1)]
 [!code-csharp[Permission#1](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#1)]
 [!code-vb[Permission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::IPermission ^ Copy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建并返回当前权限的相同副本。</summary>
        <returns>当前权限的副本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与原始权限情况下，一份权限表示对资源的相同的访问权限。  
  
   
  
## Examples  
 下面的代码示例演示如何实现<xref:System.Security.IPermission.Copy%2A>方法。 此代码示例摘自更大的示例为提供<xref:System.Security.IPermission>类。  
  
 [!code-cpp[Permission#4](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#4)]
 [!code-csharp[Permission#4](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#4)]
 [!code-vb[Permission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果不满足安全要求，则会在运行时引发 <see cref="T:System.Security.SecurityException" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安全库通常使用此方法以确保调用方有权访问的资源。 例如，安全类库中的文件类调用<xref:System.Security.CodeAccessPermission.Demand%2A>为所需<xref:System.Security.Permissions.FileIOPermission>之前执行由调用方请求的文件操作。  
  
 尽管实现此接口方法的类的大部分满足安全条件通过执行完整的堆栈审核，但不一定执行堆栈审核。 实现不执行堆栈审核的一个示例是<xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=nameWithType>。  
  
 如果执行堆栈审核，则将不会检查调用此方法的代码的权限;检查开始从该代码的直接调用方，并在堆栈中向上继续进行。 调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。 <xref:System.Security.CodeAccessPermission.Demand%2A> 如果未成功<xref:System.Security.SecurityException>引发。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
        <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
        <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下两个权限的交集是描述组的二者共同描述的操作的权限。 仅通过两个原始权限的请求将通过该交集。  
  
 以下语句所需的所有实现对都为真<xref:System.Security.IPermission.Intersect%2A>方法。 `X` 和`Y`表示<xref:System.Security.IPermission>不的对象引用`null`。  
  
-   `X`.Intersect (`X`) 返回一个值等于`X`。  
  
-   `X`.Intersect (`Y`) 返回相同的值`Y`。Intersect (`X`)。  
  
-   `X`.Intersect (`null`) 返回`null`。  
  
   
  
## Examples  
 下面的代码示例演示如何实现<xref:System.Security.IPermission.Intersect%2A>方法。 此代码示例摘自更大的示例为提供<xref:System.Security.IPermission>类。  
  
 [!code-cpp[Permission#2](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#2)]
 [!code-csharp[Permission#2](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#2)]
 [!code-vb[Permission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> 参数不为 <see langword="null" />，并且不是与当前权限属于相同类的实例。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
        <summary>确定当前权限是否为指定权限的子集。</summary>
        <returns>
          如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果当前权限指定一组完全包含在指定权限的操作，当前权限是指定权限的子集。 例如，表示对 C:\example.txt 访问权限的权限是到 c： 表示访问权限的子集\\。 如果此方法返回`true`，当前的权限表示对受保护资源的访问权限不超过指定的权限。  
  
 以下语句所需的所有实现对都为真<xref:System.Security.IPermission.IsSubsetOf%2A>方法。 `X``Y`，和`Z`表示<xref:System.Security.IPermission>不是对象`null`。  
  
-   `X`.IsSubsetOf (`X`) 返回`true`。  
  
-   `X`.IsSubsetOf (`Y`) 返回相同的值`Y`。IsSubsetOf (`X`) 当且仅当`X`和`Y`表示相同的权限集。  
  
-   如果`X`。IsSubsetOf (`Y`) 和`Y`。IsSubsetOf (`Z`) 两者都返回`true`， `X`。IsSubsetOf (`Z`) 返回`true`。  
  
 如果`X`表示空<xref:System.Security.IPermission>具有的权限状态对象<xref:System.Security.Permissions.PermissionState.None>和`Y`表示<xref:System.Security.IPermission>对象，该对象`null`， `X`。IsSubsetOf (`Y`) 返回`true`。 如果`Z`也是空的权限，复合设置操作`X`。Union(Z)。IsSubsetOf(Y) 也会返回`true`因为两个空的权限的联合是空的权限。  
  
   
  
## Examples  
 下面的代码示例演示如何实现<xref:System.Security.IPermission.IsSubsetOf%2A>方法。 此代码示例摘自更大的示例为提供<xref:System.Security.IPermission>类。  
  
 [!code-cpp[Permission#3](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#3)]
 [!code-csharp[Permission#3](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#3)]
 [!code-vb[Permission#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> 参数不是 <see langword="null" />，而且与当前权限不是同一类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
        <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
        <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对的调用结果<xref:System.Security.IPermission.Union%2A>是由当前权限和指定的权限表示所表示的所有操作的权限。 任何请求都会通过任一权限传递其联合。  
  
 以下语句所需的所有实现对都为真<xref:System.Security.IPermission.Union%2A>方法。 `X` 和`Y`表示<xref:System.Security.IPermission>不是对象`null`。  
  
-   `X`.联合 (`X`) 返回具有相同的值的对象`X`。  
  
-   `X`.联合 (`Y`) 返回具有相同的值返回的对象的对象`Y`。联合 (`X`)。  
  
-   `X`.联合 (`null`) 返回具有相同的值的对象`X`。  
  
   
  
## Examples  
 下面的代码示例演示如何实现<xref:System.Security.IPermission.Union%2A>方法。 此代码示例摘自更大的示例为提供<xref:System.Security.IPermission>类。  
  
 [!code-cpp[Permission#5](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#5)]
 [!code-csharp[Permission#5](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#5)]
 [!code-vb[Permission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#5)]  
  
-  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> 参数不是 <see langword="null" />，而且与当前权限不是同一类型。</exception>
      </Docs>
    </Member>
  </Members>
</Type>