<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b37ff083eff27618aa07c0a744562f3f8a613708" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="164e7-101">Manages the stack walk that determines whether all callers in the call stack have the required permissions to access a protected resource.</span>
      <span class="sxs-lookup">
        <span data-stu-id="164e7-101">Manages the stack walk that determines whether all callers in the call stack have the required permissions to access a protected resource.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="164e7-102">部分受信任的代码始终带来安全风险。</span><span class="sxs-lookup"><span data-stu-id="164e7-102">Partially trusted code always presents a security risk.</span></span> <span data-ttu-id="164e7-103">有时操作可以代表有权访问的资源的恶意代码执行操作。</span><span class="sxs-lookup"><span data-stu-id="164e7-103">It can sometimes be manipulated to perform actions on behalf of malicious code that does not have permission to access a resource.</span></span> <span data-ttu-id="164e7-104">这种方式，恶意代码可以获得更高版本的安全访问权限，不应允许它。</span><span class="sxs-lookup"><span data-stu-id="164e7-104">In this way, malicious code can achieve higher security access than it should be allowed.</span></span>  
  
 <span data-ttu-id="164e7-105">公共语言运行时可帮助保护免受这些攻击的托管的代码，通过运行上的所有调用的堆栈审核。</span><span class="sxs-lookup"><span data-stu-id="164e7-105">The common language runtime helps protect managed code from these attacks by running a stack walk on all calls.</span></span> <span data-ttu-id="164e7-106">堆栈审核要求调用堆栈中的所有代码都有权访问受保护的资源。</span><span class="sxs-lookup"><span data-stu-id="164e7-106">The stack walk requires that all code in the call stack has permission to access a protected resource.</span></span> <span data-ttu-id="164e7-107">因为尝试进行攻击的代码始终调用堆栈中的某个地方，它将不能超过其自己的安全权限。</span><span class="sxs-lookup"><span data-stu-id="164e7-107">Because the code attempting the attack will always be somewhere in the call stack, it will be unable to exceed its own security permissions.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="164e7-108">Asserts that the calling code can access the resource identified by the current permission object, even if callers higher in the stack have not been granted permission to access the resource.</span>
          <span class="sxs-lookup">
            <span data-stu-id="164e7-108">Asserts that the calling code can access the resource identified by the current permission object, even if callers higher in the stack have not been granted permission to access the resource.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="164e7-109">调用<xref:System.Security.IStackWalk.Assert%2A>停止对调用堆栈中的高级调用方的权限检查。</span><span class="sxs-lookup"><span data-stu-id="164e7-109">Calling <xref:System.Security.IStackWalk.Assert%2A> stops the permission check on callers higher in the call stack.</span></span> <span data-ttu-id="164e7-110">因此，即使这些调用方没有所需的权限，它们仍可以访问资源。</span><span class="sxs-lookup"><span data-stu-id="164e7-110">Therefore, even if these callers do not have the requisite permissions, they can still access resources.</span></span> <span data-ttu-id="164e7-111">断言是仅当调用的代码的有效<xref:System.Security.IStackWalk.Assert%2A>将传递它断言的权限的安全检查。</span><span class="sxs-lookup"><span data-stu-id="164e7-111">An assertion is effective only if the code that calls <xref:System.Security.IStackWalk.Assert%2A> passes the security check for the permission that it is asserting.</span></span>  
  
 <span data-ttu-id="164e7-112">调用<xref:System.Security.IStackWalk.Assert%2A>之前调用的代码返回到其调用方或之前的后续调用均有效<xref:System.Security.IStackWalk.Assert%2A>呈现前一个断言无效。</span><span class="sxs-lookup"><span data-stu-id="164e7-112">A call to <xref:System.Security.IStackWalk.Assert%2A> is effective until the calling code returns to its caller or until a subsequent call to <xref:System.Security.IStackWalk.Assert%2A> renders the previous assertion ineffective.</span></span> <span data-ttu-id="164e7-113">此外，<xref:System.Security.CodeAccessPermission.RevertAssert%2A>或<xref:System.Security.CodeAccessPermission.RevertAll%2A>中移除挂起<xref:System.Security.IStackWalk.Assert%2A>。</span><span class="sxs-lookup"><span data-stu-id="164e7-113">Also, <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> removes a pending <xref:System.Security.IStackWalk.Assert%2A>.</span></span>  
  
 <span data-ttu-id="164e7-114"><xref:System.Security.IStackWalk.Assert%2A> 对于未授予对该权限的请求将不会成功的权限，将忽略。</span><span class="sxs-lookup"><span data-stu-id="164e7-114"><xref:System.Security.IStackWalk.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="164e7-115">但是，如果调用堆栈上较低的代码调用<xref:System.Security.IStackWalk.Demand%2A>对该权限<xref:System.Security.SecurityException>堆栈审核达到尝试调用代码时，将引发<xref:System.Security.IStackWalk.Assert%2A>。</span><span class="sxs-lookup"><span data-stu-id="164e7-115">However, if code lower on the call stack calls <xref:System.Security.IStackWalk.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.IStackWalk.Assert%2A>.</span></span> <span data-ttu-id="164e7-116">这是因为代码调用<xref:System.Security.IStackWalk.Assert%2A>未被授予权限，即使它尝试<xref:System.Security.IStackWalk.Assert%2A>它。</span><span class="sxs-lookup"><span data-stu-id="164e7-116">This happens because the code that called <xref:System.Security.IStackWalk.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.IStackWalk.Assert%2A> it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="164e7-117">因为调用<xref:System.Security.IStackWalk.Assert%2A>中删除所有代码调用链中的要求必须授予访问指定的资源的权限，如果使用不当会暴露安全性漏洞。</span><span class="sxs-lookup"><span data-stu-id="164e7-117">Because calling <xref:System.Security.IStackWalk.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately.</span></span> <span data-ttu-id="164e7-118">因此，它应谨慎使用。</span><span class="sxs-lookup"><span data-stu-id="164e7-118">Therefore, it should be used with great caution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="164e7-119">The calling code does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="164e7-119">The calling code does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="164e7-120">Determines at run time whether all callers in the call stack have been granted the permission specified by the current permission object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="164e7-120">Determines at run time whether all callers in the call stack have been granted the permission specified by the current permission object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="164e7-121">安全库通常使用此方法以确保调用方有权访问的资源。</span><span class="sxs-lookup"><span data-stu-id="164e7-121">This method is typically used by secure libraries to ensure that callers have permission to access a resource.</span></span> <span data-ttu-id="164e7-122">例如，安全类库中的文件类调用<xref:System.Security.IStackWalk.Demand%2A>为所需<xref:System.Security.Permissions.FileIOPermission>之前执行由调用方请求的文件操作。</span><span class="sxs-lookup"><span data-stu-id="164e7-122">For example, a file class in a secure class library calls <xref:System.Security.IStackWalk.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.</span></span>  
  
 <span data-ttu-id="164e7-123">调用此方法的代码的权限不会检查;检查开始从该代码的直接调用方，并在堆栈中向上继续进行。</span><span class="sxs-lookup"><span data-stu-id="164e7-123">The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</span></span> <span data-ttu-id="164e7-124"><xref:System.Security.IStackWalk.Demand%2A> 如果未成功<xref:System.Security.SecurityException>引发。</span><span class="sxs-lookup"><span data-stu-id="164e7-124"><xref:System.Security.IStackWalk.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="164e7-125">A caller higher in the call stack does not have the permission specified by the current permission object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="164e7-125">A caller higher in the call stack does not have the permission specified by the current permission object.</span>
          </span>
          <span data-ttu-id="164e7-126">-or-</span>
          <span class="sxs-lookup">
            <span data-stu-id="164e7-126">-or-</span>
          </span>
          <span data-ttu-id="164e7-127">A caller in the call stack has called <see cref="M:System.Security.IStackWalk.Deny" /> on the current permission object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="164e7-127">A caller in the call stack has called <see cref="M:System.Security.IStackWalk.Deny" /> on the current permission object.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="164e7-128">Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for the current object that passes through the calling code to fail.</span>
          <span class="sxs-lookup">
            <span data-stu-id="164e7-128">Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for the current object that passes through the calling code to fail.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="164e7-129">此方法会阻止调用堆栈中的高级调用方通过调用此方法的代码，访问受保护的资源，即使这些调用方已被授予权限来访问它。</span><span class="sxs-lookup"><span data-stu-id="164e7-129">This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</span></span> <span data-ttu-id="164e7-130">调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="164e7-130">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="164e7-131"><xref:System.Security.IStackWalk.Deny%2A> 可以限制了编程人员的责任或帮助防止出现意外的安全漏洞，因为它有助于防止调用的方法<xref:System.Security.IStackWalk.Deny%2A>从用于访问被拒绝的权限所保护的资源。</span><span class="sxs-lookup"><span data-stu-id="164e7-131"><xref:System.Security.IStackWalk.Deny%2A> can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls <xref:System.Security.IStackWalk.Deny%2A> from being used to access the resource protected by the denied permission.</span></span> <span data-ttu-id="164e7-132">如果一个方法调用<xref:System.Security.IStackWalk.Deny%2A>对权限，并且如果<xref:System.Security.IStackWalk.Demand%2A>到达时，该安全检查为该权限调用方的调用堆栈中较低级别调用，将会失败<xref:System.Security.IStackWalk.Deny%2A>。</span><span class="sxs-lookup"><span data-stu-id="164e7-132">If a method calls <xref:System.Security.IStackWalk.Deny%2A> on a permission, and if a <xref:System.Security.IStackWalk.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.IStackWalk.Deny%2A>.</span></span>  
  
 <span data-ttu-id="164e7-133"><xref:System.Security.IStackWalk.Deny%2A> 对于未授予对该权限的请求将不会成功的权限，将忽略。</span><span class="sxs-lookup"><span data-stu-id="164e7-133"><xref:System.Security.IStackWalk.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="164e7-134">不能重写此方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="164e7-134">You cannot override this method.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="164e7-135">Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for all objects except the current one that passes through the calling code to fail, even if code higher in the call stack has been granted permission to access other resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="164e7-135">Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for all objects except the current one that passes through the calling code to fail, even if code higher in the call stack has been granted permission to access other resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="164e7-136"><xref:System.Security.IStackWalk.PermitOnly%2A> 类似于<xref:System.Security.IStackWalk.Deny%2A>，因为同时导致堆栈审核失败时它们原本应该成功。</span><span class="sxs-lookup"><span data-stu-id="164e7-136"><xref:System.Security.IStackWalk.PermitOnly%2A> is similar to <xref:System.Security.IStackWalk.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed.</span></span> <span data-ttu-id="164e7-137">差异在于<xref:System.Security.IStackWalk.Deny%2A>指定权限将导致堆栈审核失败，但<xref:System.Security.IStackWalk.PermitOnly%2A>指定不会导致堆栈审核失败的唯一权限。</span><span class="sxs-lookup"><span data-stu-id="164e7-137">The difference is that <xref:System.Security.IStackWalk.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.IStackWalk.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.</span></span> <span data-ttu-id="164e7-138">调用此方法，以确保你的代码可以用于访问指定的资源。</span><span class="sxs-lookup"><span data-stu-id="164e7-138">Call this method to ensure that your code can be used to access only the specified resources.</span></span>  
  
 <span data-ttu-id="164e7-139"><xref:System.Security.IStackWalk.PermitOnly%2A> 对于未授予对该权限的请求将不会成功的权限，将忽略。</span><span class="sxs-lookup"><span data-stu-id="164e7-139"><xref:System.Security.IStackWalk.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="164e7-140">但是，如果在调用的低级代码堆栈更高版本调用<xref:System.Security.IStackWalk.Demand%2A>对该权限<xref:System.Security.SecurityException>堆栈审核达到尝试调用代码时，将引发<xref:System.Security.IStackWalk.PermitOnly%2A>。</span><span class="sxs-lookup"><span data-stu-id="164e7-140">However, if code lower on the call stack later calls <xref:System.Security.IStackWalk.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.IStackWalk.PermitOnly%2A>.</span></span> <span data-ttu-id="164e7-141">这是因为代码调用<xref:System.Security.IStackWalk.PermitOnly%2A>未被授予权限，即使它调用<xref:System.Security.IStackWalk.PermitOnly%2A>对该权限。</span><span class="sxs-lookup"><span data-stu-id="164e7-141">This is because the code that called <xref:System.Security.IStackWalk.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.IStackWalk.PermitOnly%2A> for that permission.</span></span> <span data-ttu-id="164e7-142">调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="164e7-142">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>