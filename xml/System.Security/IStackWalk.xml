<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3c5cadd87a930834cdbe8bf2c763e2c830f3df42" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37461860" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <TypeSignature Language="F#" Value="type IStackWalk = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manages the stack walk that determines whether all callers in the call stack have the required permissions to access a protected resource.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分受信任的代码始终会带来安全风险。 有时操作来代表不具有访问资源的权限的恶意代码执行操作。 这样一来，恶意代码可以实现比应允许更高版本的安全访问。  
  
 公共语言运行时可帮助保护托管的代码免受这些攻击通过运行上的所有调用堆栈遍历。 堆栈遍历要求调用堆栈中的所有代码都有权访问受保护的资源。 因为尝试攻击代码始终在调用堆栈中的某个地方，它将不能超过其自身的安全权限。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberSignature Language="F#" Value="abstract member Assert : unit -&gt; unit" Usage="iStackWalk.Assert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asserts that the calling code can access the resource identified by the current permission object, even if callers higher in the stack have not been granted permission to access the resource.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Security.IStackWalk.Assert%2A>停止调用堆栈中的高级调用方的权限检查。 因此，即使这些调用方没有必需的权限，仍可以访问资源。 断言是仅当该代码调用有效<xref:System.Security.IStackWalk.Assert%2A>传递断言的权限的安全检查。  
  
 调用<xref:System.Security.IStackWalk.Assert%2A>之前调用代码返回给调用方或直到的后续调用均有效<xref:System.Security.IStackWalk.Assert%2A>呈现上一个断言无效。 此外，<xref:System.Security.CodeAccessPermission.RevertAssert%2A>或<xref:System.Security.CodeAccessPermission.RevertAll%2A>中移除挂起<xref:System.Security.IStackWalk.Assert%2A>。  
  
 <xref:System.Security.IStackWalk.Assert%2A> 将忽略不授予，因为对该权限的请求将不会成功的权限。 但是，如果调用堆栈上的低级代码调用<xref:System.Security.IStackWalk.Demand%2A>对该权限<xref:System.Security.SecurityException>堆栈遍历到达尝试调用的代码时引发<xref:System.Security.IStackWalk.Assert%2A>。 这是因为该调用的代码<xref:System.Security.IStackWalk.Assert%2A>未被授予权限，即使它试图<xref:System.Security.IStackWalk.Assert%2A>它。  
  
> [!CAUTION]
>  因为调用<xref:System.Security.IStackWalk.Assert%2A>删除调用链中的所有代码的要求必须被授予访问指定的资源的权限，它可以打开安全漏洞，如果使用不当。 因此，它应非常小心地使用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">The calling code does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit" Usage="iStackWalk.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determines at run time whether all callers in the call stack have been granted the permission specified by the current permission object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安全库通常使用此方法以确保调用方有权访问的资源。 例如，安全类库中的文件类调用<xref:System.Security.IStackWalk.Demand%2A>为必需<xref:System.Security.Permissions.FileIOPermission>之前执行由调用方请求的文件操作。  
  
 调用此方法的代码的权限不会检查;检查开始从该代码的直接调用方，并且在堆栈中向上继续进行。 <xref:System.Security.IStackWalk.Demand%2A> 仅当没有<xref:System.Security.SecurityException>引发。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have the permission specified by the current permission object.  -or-  A caller in the call stack has called <see cref="M:System.Security.IStackWalk.Deny" /> on the current permission object.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberSignature Language="F#" Value="abstract member Deny : unit -&gt; unit" Usage="iStackWalk.Deny " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for the current object that passes through the calling code to fail.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法会阻止调用堆栈中的高级调用方通过调用此方法的代码访问受保护的资源，即使这些调用方已被授予权限来访问它。 调用堆栈通常表示为向下增长，因此的调用堆栈中调用方法中较低的调用堆栈。  
  
 <xref:System.Security.IStackWalk.Deny%2A> 可以限制程序员的责任或帮助防止出现意外的安全漏洞，因为它有助于防止调用的方法<xref:System.Security.IStackWalk.Deny%2A>被用来访问被拒绝的权限所保护的资源。 如果一个方法调用<xref:System.Security.IStackWalk.Deny%2A>对权限，并且如果<xref:System.Security.IStackWalk.Demand%2A>的调用堆栈中较低级别的调用方调用该权限，该安全检查将失败时达到<xref:System.Security.IStackWalk.Deny%2A>。  
  
 <xref:System.Security.IStackWalk.Deny%2A> 将忽略不授予，因为对该权限的请求将不会成功的权限。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>不能重写此方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberSignature Language="F#" Value="abstract member PermitOnly : unit -&gt; unit" Usage="iStackWalk.PermitOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for all objects except the current one that passes through the calling code to fail, even if code higher in the call stack has been granted permission to access other resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.IStackWalk.PermitOnly%2A> 类似于<xref:System.Security.IStackWalk.Deny%2A>，同时会导致堆栈审核失败时它们原本应该成功。 不同之处在于<xref:System.Security.IStackWalk.Deny%2A>指定将导致失败，则堆栈审核的权限，但<xref:System.Security.IStackWalk.PermitOnly%2A>指定唯一的权限，但不会导致堆栈审核失败。 调用此方法，以确保你的代码可以用于访问指定的资源。  
  
 <xref:System.Security.IStackWalk.PermitOnly%2A> 将忽略不授予，因为对该权限的请求将不会成功的权限。 但是，如果在调用的低级代码堆栈更高版本调用<xref:System.Security.IStackWalk.Demand%2A>对该权限<xref:System.Security.SecurityException>堆栈遍历到达尝试调用的代码时引发<xref:System.Security.IStackWalk.PermitOnly%2A>。 这是因为该调用的代码<xref:System.Security.IStackWalk.PermitOnly%2A>未被授予权限，即使它调用<xref:System.Security.IStackWalk.PermitOnly%2A>对该权限。 调用堆栈通常表示为向下增长，因此的调用堆栈中调用方法中较低的调用堆栈。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>