<Type Name="SecurityManager" FullName="System.Security.SecurityManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="51b52be500a5be1b9b263e9528638a7f09b2cb2a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30500681" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class SecurityManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed SecurityManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecurityManager" />
  <TypeSignature Language="VB.NET" Value="Public Class SecurityManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>对与安全系统交互的类提供主访问点。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安全提供了访问和操作安全策略配置方法。 无法创建实例<xref:System.Security.SecurityManager>。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CheckExecutionRights">
      <MemberSignature Language="C#" Value="public static bool CheckExecutionRights { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CheckExecutionRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecurityManager.CheckExecutionRights" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CheckExecutionRights As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CheckExecutionRights { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示代码是否必须具有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> 才能执行。</summary>
        <value>
          如果代码必须具有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> 才能执行，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此属性为`false`，即使代码，而没有<xref:System.Security.Permissions.SecurityPermissionFlag.Execution>可以执行。 执行检查成本，并且可以消除迟缓策略解析的优点。 若要禁用检查在需要时的执行，提供此属性。  
  
 对此属性的更改不会保留直到<xref:System.Security.SecurityManager.SavePolicy%2A>调用。 新进程将不会影响更改之前会将其保存在注册表中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要修改策略的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentThreadRequiresSecurityContextCapture">
      <MemberSignature Language="C#" Value="public static bool CurrentThreadRequiresSecurityContextCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CurrentThreadRequiresSecurityContextCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CurrentThreadRequiresSecurityContextCapture () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool CurrentThreadRequiresSecurityContextCapture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定在必须在稍后的某个时间点重新创建当前线程的安全状态的情况下，当前线程是否需要安全上下文捕获。</summary>
        <returns>
          如果堆栈不包含部分信任的应用程序域、部分信任的程序集以及当前活动的 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> 或 <see cref="M:System.Security.CodeAccessPermission.Deny" /> 修饰符，则为 <see langword="false" />；如果公共语言运行时无法保证堆栈不包含其中任一项，则为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture%2A>之前缓存后成功的安全要求获得的敏感数据的方法。  
  
 如果<xref:System.Security.CodeAccessPermission.Assert%2A>方法已调用更高版本在堆栈上，不捕获相应的安全上下文的情况下，应缓存数据。 否则为敏感数据获取下<xref:System.Security.CodeAccessPermission.Assert%2A>可能会变得可用，它是编写的代码不再与该运行<xref:System.Security.CodeAccessPermission.Assert%2A>就地。  
  
> [!IMPORTANT]
>  只有当它时，返回的值才可靠`false`，这意味着该线程保证不需要安全上下文捕获。 不需要，若要避免安全漏洞安全上下文捕获时，该方法可能会返回 true。  
  
 <xref:System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture%2A> 是安全关键的因为其主要用途是为了避免不必要的安全上下文已捕获，这表明使用它的代码是安全敏感的并且必须进行审核。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
      </Docs>
    </Member>
    <Member MemberName="GetStandardSandbox">
      <MemberSignature Language="C#" Value="public static System.Security.PermissionSet GetStandardSandbox (System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.PermissionSet GetStandardSandbox(class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.GetStandardSandbox(System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::PermissionSet ^ GetStandardSandbox(System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="evidence">要与某个权限集匹配的主机证据。</param>
        <summary>获取一个权限集，对具有提供的证据的应用程序授予此权限集是安全的。</summary>
        <returns>一个权限集，它可用作具有提供的证据的应用程序的权限集。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  在[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]中的主机证据`evidence`必须包含<xref:System.Security.Policy.Zone?displayProperty=nameWithType>证据。  
>   
>  下表显示对于每个区域返回的权限集。  
  
|区域|权限集|  
|----------|--------------------|  
|<xref:System.Security.SecurityZone.MyComputer>|`FullTrust`|  
|<xref:System.Security.SecurityZone.Intranet>|`LocalIntranet`|  
|<xref:System.Security.SecurityZone.Trusted>|`Internet`|  
|<xref:System.Security.SecurityZone.Internet>|`Internet`|  
|<xref:System.Security.SecurityZone.Untrusted>|无|  
|<xref:System.Security.SecurityZone.NoZone>|无|  
  
 其他证据，如<xref:System.Security.Policy.Url>或<xref:System.Security.Policy.Site>，可能被视为。  
  
 沙盒可以使用返回的权限集运行该应用程序。 请注意，此方法未指定策略，但可帮助宿主确定请求的应用程序的权限集是否合理。 此方法可以用于将区域映射到沙盒。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Security.SecurityManager.GetStandardSandbox%2A>为沙盒应用程序设置方法，以获得相应权限。 有关在沙盒中运行应用程序的详细信息，请参阅[如何： 运行部分受信任的代码在沙盒中](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md)。  
  
 [!code-csharp[sandboxingApis#1](~/samples/snippets/csharp/VS_Snippets_CLR/SandboxingAPIs/CS/program.cs#1)]
 [!code-vb[sandboxingApis#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SandboxingAPIs/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="evidence" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetZoneAndOrigin">
      <MemberSignature Language="C#" Value="public static void GetZoneAndOrigin (out System.Collections.ArrayList zone, out System.Collections.ArrayList origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetZoneAndOrigin([out] class System.Collections.ArrayList&amp; zone, [out] class System.Collections.ArrayList&amp; origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.GetZoneAndOrigin(System.Collections.ArrayList@,System.Collections.ArrayList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetZoneAndOrigin (ByRef zone As ArrayList, ByRef origin As ArrayList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetZoneAndOrigin([Runtime::InteropServices::Out] System::Collections::ArrayList ^ % zone, [Runtime::InteropServices::Out] System::Collections::ArrayList ^ % origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="System.Collections.ArrayList&amp;" RefType="out" />
        <Parameter Name="origin" Type="System.Collections.ArrayList&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="zone">一个输出参数，它包含已授予的 <see cref="T:System.Collections.ArrayList" /> 对象的 <see cref="P:System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone" />。</param>
        <param name="origin">一个输出参数，它包含已授予的 <see cref="T:System.Collections.ArrayList" /> 对象的 <see cref="T:System.Security.Permissions.UrlIdentityPermission" />。</param>
        <summary>获取当前程序集的已授予的区域标识和 URL 标识权限集。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法的建议替代方法是使用正在执行的程序集的 URL 和区域证据来调用<xref:System.Security.SecurityManager.ResolvePolicy%2A>为每个证据类型。 从返回的权限集<xref:System.Security.SecurityManager.ResolvePolicy%2A>调用标识基于其区域和 URL 的源上执行的程序集授予的权限。  
  
> [!NOTE]
>  此成员所做的 ECMA 公共密钥，这不是有效的加密密钥，而一个伪密钥的链接要求。 在.NET Framework 中 ECMA 伪密钥此链接要求会自动转换为 Microsoft 公共密钥的链接要求。 安全异常取决于 Microsoft 公钥，不 ECMA 伪键。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">对 <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> 的请求失败。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
      </Docs>
    </Member>
    <Member MemberName="IsGranted">
      <MemberSignature Language="C#" Value="public static bool IsGranted (System.Security.IPermission perm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsGranted(class System.Security.IPermission perm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.IsGranted(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsGranted (perm As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsGranted(System::Security::IPermission ^ perm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="perm" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="perm">针对调用方的权限授予测试的权限。</param>
        <summary>确定是否将权限授予调用方。</summary>
        <returns>
          如果授予调用方的权限包括权限 <paramref name="perm" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 授予的权限由策略和不同于可能重写，例如一个断言的要求。 此外，<xref:System.Security.SecurityManager.IsGranted%2A>仅测试的调用代码程序集，独立于在堆栈上的其他调用方授予。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadPolicyLevelFromFile">
      <MemberSignature Language="C#" Value="public static System.Security.Policy.PolicyLevel LoadPolicyLevelFromFile (string path, System.Security.PolicyLevelType type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Policy.PolicyLevel LoadPolicyLevelFromFile(string path, valuetype System.Security.PolicyLevelType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadPolicyLevelFromFile (path As String, type As PolicyLevelType) As PolicyLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Policy::PolicyLevel ^ LoadPolicyLevelFromFile(System::String ^ path, System::Security::PolicyLevelType type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Policy.PolicyLevel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="type" Type="System.Security.PolicyLevelType" />
      </Parameters>
      <Docs>
        <param name="path">包含安全策略信息的文件的物理文件路径。</param>
        <param name="type">一个枚举值，其指定要加载的策略级别类型。</param>
        <summary>从指定的文件加载 <see cref="T:System.Security.Policy.PolicyLevel" />。</summary>
        <returns>已加载的策略级别。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">由 <paramref name="path" /> 参数指示的文件不存在。</exception>
        <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。  
  
 或  
  
 调用此方法的代码不含 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。  
  
 或  
  
 调用此方法的代码不含 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。  
  
 或  
  
 调用此方法的代码不含 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</exception>
        <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 [&lt;legacyCasPolicy&gt; 元素](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">查看和修改策略的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用于读取和写入文件。 关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
      </Docs>
    </Member>
    <Member MemberName="LoadPolicyLevelFromString">
      <MemberSignature Language="C#" Value="public static System.Security.Policy.PolicyLevel LoadPolicyLevelFromString (string str, System.Security.PolicyLevelType type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Policy.PolicyLevel LoadPolicyLevelFromString(string str, valuetype System.Security.PolicyLevelType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.LoadPolicyLevelFromString(System.String,System.Security.PolicyLevelType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadPolicyLevelFromString (str As String, type As PolicyLevelType) As PolicyLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Policy::PolicyLevel ^ LoadPolicyLevelFromString(System::String ^ str, System::Security::PolicyLevelType type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Policy.PolicyLevel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="type" Type="System.Security.PolicyLevelType" />
      </Parameters>
      <Docs>
        <param name="str">安全策略级别的 XML 表示形式，与它在配置文件出现的形式相同。</param>
        <param name="type">一个枚举值，其指定要加载的策略级别类型。</param>
        <summary>从指定的字符串加载 <see cref="T:System.Security.Policy.PolicyLevel" />。</summary>
        <returns>已加载的策略级别。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" /> 参数无效。</exception>
        <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">查看和修改策略的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
      </Docs>
    </Member>
    <Member MemberName="PolicyHierarchy">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerator PolicyHierarchy ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerator PolicyHierarchy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.PolicyHierarchy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PolicyHierarchy () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerator ^ PolicyHierarchy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>提供一个枚举器，以按等级访问安全策略层次结构，例如计算机策略和用户策略。</summary>
        <returns>构成安全策略层次结构的 <see cref="T:System.Security.Policy.PolicyLevel" /> 对象的枚举器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的枚举器提供了连续<xref:System.Security.Policy.PolicyLevel>表示相应的策略对象 （计算机、 用户、 企业、 应用程序域） 的层次结构级别。 这些对象是实时的策略对象中;更改这些对象可以具有不可预知的结果。  
  
 最小策略层次结构包含计算机级别、 企业级和用户级别。 但是，层次结构可以包含其他级别。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 [&lt;legacyCasPolicy&gt; 元素](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
        <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">查看和修改策略的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResolvePolicy">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定授予代码的权限。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResolvePolicy">
      <MemberSignature Language="C#" Value="public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.PermissionSet ResolvePolicy(class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::PermissionSet ^ ResolvePolicy(System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="evidence">用于评估策略的证据集。</param>
        <summary>根据指定的证据确定向代码授予什么权限。</summary>
        <returns>可由安全系统授予的一组权限。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法调用安全策略引擎，为其提供调用代码的标识的证据。 由安全策略确定结果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 [&lt;legacyCasPolicy&gt; 元素](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResolvePolicy">
      <MemberSignature Language="C#" Value="public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence[] evidences);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.PermissionSet ResolvePolicy(class System.Security.Policy.Evidence[] evidences) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResolvePolicy (evidences As Evidence()) As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::PermissionSet ^ ResolvePolicy(cli::array &lt;System::Security::Policy::Evidence ^&gt; ^ evidences);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evidences" Type="System.Security.Policy.Evidence[]" />
      </Parameters>
      <Docs>
        <param name="evidences">用于评估策略的证据对象的数组。</param>
        <summary>根据指定的证据确定向代码授予什么权限。</summary>
        <returns>适用于所有提供的证据的权限集。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法调用安全策略引擎，为其提供的数组<xref:System.Security.Policy.Evidence>对象。 返回的权限集表示将应用于数组中每个证据的权限。 这些权限是等效于或策略应该已授予每个证据的权限的子集。 此方法的行为方式好像已于解决上每个策略的结果执行交集<xref:System.Security.Policy.Evidence>数组中的对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 [&lt;legacyCasPolicy&gt; 元素](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResolvePolicy">
      <MemberSignature Language="C#" Value="public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence evidence, System.Security.PermissionSet reqdPset, System.Security.PermissionSet optPset, System.Security.PermissionSet denyPset, out System.Security.PermissionSet denied);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.PermissionSet ResolvePolicy(class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet reqdPset, class System.Security.PermissionSet optPset, class System.Security.PermissionSet denyPset, [out] class System.Security.PermissionSet&amp; denied) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::PermissionSet ^ ResolvePolicy(System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ reqdPset, System::Security::PermissionSet ^ optPset, System::Security::PermissionSet ^ denyPset, [Runtime::InteropServices::Out] System::Security::PermissionSet ^ % denied);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="reqdPset" Type="System.Security.PermissionSet" />
        <Parameter Name="optPset" Type="System.Security.PermissionSet" />
        <Parameter Name="denyPset" Type="System.Security.PermissionSet" />
        <Parameter Name="denied" Type="System.Security.PermissionSet&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="evidence">用于评估策略的证据集。</param>
        <param name="reqdPset">该代码需要运行的所需权限。</param>
        <param name="optPset">将使用的可选权限（如授权），但运行代码不需要它。</param>
        <param name="denyPset">决不能授予代码的拒绝权限，即使策略允许。</param>
        <param name="denied">包含未授予的权限集的输出参数。</param>
        <summary>根据指定的证据和请求确定向代码授予什么权限。</summary>
        <returns>可由安全系统授予的一组权限。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法时，安全策略引擎，为其提供的调用代码的标识的证据和权限集的代码将调用请求。 由安全策略确定结果。 此方法返回的安全系统中，将授予的权限集，并返回的作为输出参数会被拒绝的权限集。 有效授予的权限是位于不在拒绝集的授予权限集。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 [&lt;legacyCasPolicy&gt; 元素](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
        <exception cref="T:System.Security.Policy.PolicyException">策略无法授予 <paramref name="reqdPset" /> 参数指定的所需最小权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResolvePolicyGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerator ResolvePolicyGroups (System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerator ResolvePolicyGroups(class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.ResolvePolicyGroups(System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerator ^ ResolvePolicyGroups(System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="evidence">已评估策略的证据集。</param>
        <summary>获取与指定证据相匹配的代码组集合。</summary>
        <returns>与证据匹配的代码组集的枚举。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法是证据的用于分析指定的策略配置如何使用特定类型。  
  
 将从所有适用级别匹配策略层次结构的返回代码组`evidence`参数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 [&lt;legacyCasPolicy&gt; 元素](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResolveSystemPolicy">
      <MemberSignature Language="C#" Value="public static System.Security.PermissionSet ResolveSystemPolicy (System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.PermissionSet ResolveSystemPolicy(class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.ResolveSystemPolicy(System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::PermissionSet ^ ResolveSystemPolicy(System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="evidence">用于评估策略的证据集。</param>
        <summary>根据指定的证据确定授予代码的权限，不包括 <see cref="T:System.AppDomain" /> 级别的策略。</summary>
        <returns>可由安全系统授予的一组权限。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法时，将调用安全策略引擎，它提供调用代码的标识的证据。 通过任何以外的系统安全策略确定结果<xref:System.AppDomain>策略。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 [&lt;legacyCasPolicy&gt; 元素](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="SavePolicy">
      <MemberSignature Language="C#" Value="public static void SavePolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SavePolicy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.SavePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SavePolicy ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SavePolicy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存修改的安全策略状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将策略保存通过公开<xref:System.Security.SecurityManager.PolicyHierarchy%2A>， <xref:System.Security.Policy.PolicyLevel>，和其他类，表示配置安全策略。 除非调用此方法时，对策略对象所做的更改将不会保存，并将不会影响后续的应用程序运行。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 [&lt;legacyCasPolicy&gt; 元素](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
        <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要修改策略的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SavePolicyLevel">
      <MemberSignature Language="C#" Value="public static void SavePolicyLevel (System.Security.Policy.PolicyLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SavePolicyLevel(class System.Security.Policy.PolicyLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.SavePolicyLevel(System.Security.Policy.PolicyLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SavePolicyLevel (level As PolicyLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SavePolicyLevel(System::Security::Policy::PolicyLevel ^ level);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Security.Policy.PolicyLevel" />
      </Parameters>
      <Docs>
        <param name="level">要保存的策略级别对象。</param>
        <summary>保存用 <see cref="M:System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)" /> 加载的已修改的安全策略级别。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Policy.PolicyLevel>将保存到从中加载它的相同位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
        <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 [&lt;legacyCasPolicy&gt; 元素](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要修改策略的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SecurityEnabled">
      <MemberSignature Language="C#" Value="public static bool SecurityEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SecurityEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecurityManager.SecurityEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SecurityEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SecurityEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The security manager cannot be turned off on MS runtime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指示是否启用安全的值。</summary>
        <value>
          如果启用了安全，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性[Caspol.exe （代码访问安全策略工具）](~/docs/framework/tools/caspol-exe-code-access-security-policy-tool.md)  
  
 `-security` (`-s`) 选项可关闭基于代码的安全性。  
  
 <xref:System.Security.SecurityManager.SecurityEnabled%2A> 提供管理员禁用代码访问安全性的方法。 当禁用代码访问安全性时，所有代码访问要求都会成功。 实际上，这将授予的所有代码`FullTrust`。 禁用代码访问安全性可以绕过安全系统，以便代码可能会执行效果略好于等效的安全策略授予`FullTrust`于的所有代码。 此属性不会禁用基于角色的安全性;因此，<xref:System.Security.Permissions.PrincipalPermission>需求不会受到影响。  
  
> [!CAUTION]
>  禁用代码访问安全性会使系统容易受到恶意代码（如病毒和蠕虫）的攻击。 禁用代码访问安全性不会自动阻止从以任何方式运行的托管的代码。 它只会造成托管代码能够运行不受限制的代码访问安全系统，应仅为完成最格外谨慎。 已采取其他安全性措施以帮助保护系统的安全性时应仅完成关闭安全性以获得额外的性能。 其他的安全防范措施包括与公共网络断开连接、从物理上保证计算机的安全等等。  
  
 对此属性的更改不会保留在注册表中，直到<xref:System.Security.SecurityManager.SavePolicy%2A>调用。 新进程将不会影响更改之前会将其保存在注册表中。 更改正在运行的进程中的该属性的值不一定更改状态按预期方式。 若要确保更改生效，必须调用<xref:System.Security.SecurityManager.SavePolicy%2A>并启动新进程。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要修改策略的功能。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>