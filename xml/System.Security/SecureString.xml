<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SecureString.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f06352fcacdabe46f8a02266efc7ecb816129c3b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f06352fcacdabe46f8a02266efc7ecb816129c3b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.SecureString">
          <source>Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed.</source>
          <target state="translated">表示应保密的文本，例如在不再需要时将其从计算机内存中删除。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Security.SecureString">
          <source>This class cannot be inherited.</source>
          <target state="translated">此类不能被继承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> is a string type that provides a measure of security.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 是提供安全的度量值的字符串类型。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>It tries to avoid storing potentially sensitive strings in process memory as plain text.</source>
          <target state="translated">它将尝试以避免将敏感字符串存储在以纯文本形式的进程内存。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>(For limitations, however, see the <bpt id="p1">[</bpt>How secure is SecureString?<ept id="p1">](#HowSecure)</ept> section.) The value of an instance of <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified.</source>
          <target state="translated">(有关限制，但是，请参阅<bpt id="p1">[</bpt>如何安全的方法是 SecureString？<ept id="p1">](#HowSecure)</ept>部分。)实例的值<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>使用支持的基础平台，该实例已初始化或修改值，则一种机制自动保护。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Your application can render the instance immutable and prevent further modification by invoking the <ph id="ph1">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> method.</source>
          <target state="translated">你的应用程序可以呈现实例不可变，以通过调用防止进一步修改<ph id="ph1">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The maximum length of a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance is 65,536 characters.</source>
          <target state="translated">最大长度<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>实例为 65,536 个字符。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">此类型实现<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">在完成使用类型的实例后，您应释放它的中，直接或间接。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">若要直接释放类型，调用其<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>中的方法<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>块。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要间接释放类型，请使用 <ph id="ph1">`using`</ph>（在 C# 中）或 <ph id="ph2">`Using`</ph>（在 Visual Basic 中）等语言构造。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>接口主题。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class and its members are not visible to COM.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>类和其成员都不是对 COM 可见。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute&gt;</ph>.</source>
          <target state="translated">有关详情，请参阅<ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>In this section:</source>
          <target state="translated">本节内容：</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>String vs. SecureString<ept id="p1">](#vsString)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>字符串 vs。SecureString<ept id="p1">](#vsString)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>SecureString operations<ept id="p1">](#Ops)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>SecureString 操作<ept id="p1">](#Ops)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>SecureString and interop<ept id="p1">](#interop)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>SecureString 和互操作<ept id="p1">](#interop)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>How secure is  SecureString?<ept id="p1">](#HowSecure)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>安全是 SecureString？<ept id="p1">](#HowSecure)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>String versus SecureString</source>
          <target state="translated">与 SecureString 的字符串</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>An instance of the <ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory.</source>
          <target state="translated">实例<ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph>类既不可变，并且不再需要时，不能以编程方式计划进行垃圾回收; 也就是说，实例为只读之后创建，并且不可能预测时，该实例将为从计算机内存中删除。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Because <ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate.</source>
          <target state="translated">因为<ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph>实例是不可变，看起来要修改现有实例的操作实际创建它来操作的副本。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Consequently, if a <ph id="ph1">&lt;xref:System.String&gt;</ph> object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.</source>
          <target state="translated">因此，如果<ph id="ph1">&lt;xref:System.String&gt;</ph>对象包含敏感信息，例如密码、 信用卡号或个人数据，则它使用的原因是你的应用程序无法从计算机内存中删除数据后，信息可能被泄漏的风险.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object is similar to a <ph id="ph2">&lt;xref:System.String&gt;</ph> object in that it has a text value.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象都类似于<ph id="ph2">&lt;xref:System.String&gt;</ph>对象，因为它具有一个文本值。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>However, the value of a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the <ph id="ph2">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> method  or by the .NET Framework garbage collector.</source>
          <target state="translated">但是，值<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象被固定在内存中，可以使用一种保护机制，例如可以修改提供的基础的操作系统，加密，直到你的应用程序将其标记为只读的并可以从计算机内存中删除通过应用程序调用<ph id="ph2">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph>方法或.NET Framework 垃圾回收器。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>For a discussion of the limitations of the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class, see the <bpt id="p1">[</bpt>How secure is  SecureString?<ept id="p1">](#HowSecure)</ept> section.</source>
          <target state="translated">有关限制的讨论<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>类，请参阅<bpt id="p1">[</bpt>如何安全的方法是 SecureString？<ept id="p1">](#HowSecure)</ept>部分。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>返回页首<ept id="p1">](#top)</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>SecureString operations</source>
          <target state="translated">SecureString 操作</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class includes members that allow you to do the following:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>类包括的成员，您可以执行以下操作：</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Instantiate a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object</source>
          <target state="translated">实例化<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>You instantiate a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object by calling its parameterless constructor.</source>
          <target state="translated">实例化<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>通过调用其无参数构造函数的对象。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Add characters to a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object</source>
          <target state="translated">添加到字符<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>You can add a single character at a time to a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object  by calling its <ph id="ph2">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph> method.</source>
          <target state="translated">可以将单个字符添加到的一次<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象通过调用其<ph id="ph2">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object should never be constructed from a <ph id="ph2">&lt;xref:System.String&gt;</ph>, because the sensitive data is already subject to the memory persistence consequences of the immutable <ph id="ph3">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象应永远不会从构造<ph id="ph2">&lt;xref:System.String&gt;</ph>，这是因为敏感数据已受到不可变的内存持久性后果<ph id="ph3">&lt;xref:System.String&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The best way to construct a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object is from a character-at-a-time unmanaged source, such as the <ph id="ph2">&lt;xref:System.Console.ReadKey%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">构造的最好办法<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象时字符在时间的非托管源，如<ph id="ph2">&lt;xref:System.Console.ReadKey%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Remove characters from a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object</source>
          <target state="translated">删除从字符<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>You can replace an individual character by calling the <ph id="ph1">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph> method, remove an individual character by calling the <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph> method, or remove all characters from the <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> instance by calling the  <ph id="ph4">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> method.</source>
          <target state="translated">你可以通过调用来替换单个字符<ph id="ph1">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>方法，通过调用中删除单个字符<ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>方法或删除的所有字符从<ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph>实例通过调用<ph id="ph4">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Make the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object read-only</source>
          <target state="translated">请<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象只读的</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Once you have defined the string that the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object represents, you call its  <ph id="ph2">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> method to make the string read-only.</source>
          <target state="translated">定义字符串后，<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象表示，则调用其<ph id="ph2">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph>方法，以使字符串，只读的。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Get information about the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object</source>
          <target state="translated">获取其相关信息<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class has only two members that provide information about the string: its <ph id="ph2">&lt;xref:System.Security.SecureString.Length%2A&gt;</ph> property, which indicates the number of UTF16-encoded code units in the string; and the <ph id="ph3">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph>, method, which indicates whether the instance is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>类具有提供有关字符串的信息的仅有两个成员： 其<ph id="ph2">&lt;xref:System.Security.SecureString.Length%2A&gt;</ph>属性，它指示的字符串; 中的 UTF16 编码的代码单位数和<ph id="ph3">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph>，方法，该值指示实例是否只读的。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Release the memory allocated to the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance</source>
          <target state="translated">释放的内存分配给<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>实例</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Because <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> implements the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> interface, you release its memory by calling the <ph id="ph3">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">因为<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>实现<ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>接口，通过调用释放其内存<ph id="ph3">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class has no members that inspect, compare, or convert the value of a <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>类没有任何成员检查、 比较，或将的值转换<ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The absence of such members helps protect the value of the instance from accidental or malicious exposure.</source>
          <target state="translated">如果未指定此类成员可帮助防止意外或恶意的公开实例的值。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Use appropriate members of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType&gt;</ph> class, such as the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A&gt;</ph> method, to manipulate the value of a <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">使用的相应成员<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType&gt;</ph>类，如<ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A&gt;</ph>方法，以操作的值<ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The .NET Framework Class Library commonly uses <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instances in the following ways:</source>
          <target state="translated">.NET Framework 类库通常使用<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>实例通过以下方式：</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>To provide password information to a process by using the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> structure or by calling an overload of the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType&gt;</ph> method that has a parameter of type <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph>.</source>
          <target state="translated">通过提供到进程的密码信息<ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph>结构，或通过调用的重载<ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType&gt;</ph>具有类型参数的方法<ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>To provide network password information by calling a <ph id="ph1">&lt;xref:System.Net.NetworkCredential&gt;</ph> class constructor that has a parameter of type <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> or by using the <ph id="ph3">&lt;xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">通过调用提供网络密码信息<ph id="ph1">&lt;xref:System.Net.NetworkCredential&gt;</ph>具有类型参数的类构造函数<ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>或通过使用<ph id="ph3">&lt;xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>To provide password information for SQL Server Authentication by calling the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType&gt;</ph> constructor or retrieving the value of the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">通过调用提供 SQL Server 身份验证的密码信息<ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType&gt;</ph>构造函数或检索的值的<ph id="ph2">&lt;xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>To pass a string to unmanaged code.</source>
          <target state="translated">将字符串传递到非托管代码。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>For more information, see the <bpt id="p1">[</bpt>SecureString and interop<ept id="p1">](#interop)</ept> section.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>SecureString 和互操作<ept id="p1">](#interop)</ept>部分。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>返回页首<ept id="p1">](#top)</ept></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>SecureString and interop</source>
          <target state="translated">SecureString 和互操作</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Because the operating system does not  directly support <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>, you must convert the value of the <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> object to the required string type before passing the string to a native method.</source>
          <target state="translated">由于操作系统不直接支持<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>，必须将转换的值<ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>之前将字符串传递给本机方法的必需的字符串类型的对象。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class has five methods that do this:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>类具有执行此操作的五个方法：</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType&gt;</ph>, which converts the <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> string value to a binary string (BSTR) recognized by COM.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType&gt;</ph>哪些将<ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>字符串值与二进制字符串 (BSTR) 后识别由 com 使用。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType&gt;</ph>, which copy the <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> string value to an ANSI string in unmanaged memory.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType&gt;</ph> 和<ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType&gt;</ph>，复制<ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph>字符串到非托管内存中的 ANSI 字符串值。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType&gt;</ph>, which copy the <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> string value to a Unicode string in unmanaged memory.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType&gt;</ph> 和<ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType&gt;</ph>，复制<ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph>字符串到非托管内存中的 Unicode 字符串值。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Each of these methods creates a clear-text string in unmanaged memory.</source>
          <target state="translated">上述每种方法创建非托管内存中的纯文本字符串。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed.</source>
          <target state="translated">它负责的开发人员可以清空并不再需要时，就会立即释放该内存。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:</source>
          <target state="translated">每个字符串转换和内存分配方法有一个相应的方法来清空并释放分配的内存：</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Allocation and conversion method</source>
          <target state="translated">分配和转换方法</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Zero and free method</source>
          <target state="translated">零和 free 方法</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>返回页首<ept id="p1">](#top)</ept></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>How secure is SecureString?</source>
          <target state="translated">安全是 SecureString？</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>When created properly, a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance provides more data protection than a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">正确，创建时<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>实例提供更多的数据保护比<ph id="ph2">&lt;xref:System.String&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>When creating a string from a character-at-a-time source, <ph id="ph1">&lt;xref:System.String&gt;</ph> creates multiple intermediate in memory, whereas  <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> creates just a single instance.</source>
          <target state="translated">字符在时间来源，创建一个字符串时<ph id="ph1">&lt;xref:System.String&gt;</ph>而在内存中，创建多个中间<ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>创建单个实例。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Garbage collection of <ph id="ph1">&lt;xref:System.String&gt;</ph> objects  is non-deterministic.</source>
          <target state="translated">垃圾回收的<ph id="ph1">&lt;xref:System.String&gt;</ph>对象是不确定的。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>In addition, because its memory is not pinned, the garbage collector will make additional copies of <ph id="ph1">&lt;xref:System.String&gt;</ph> values when moving and compacting memory.</source>
          <target state="translated">此外，因为其内存不固定，因此垃圾回收器将制作的其他副本<ph id="ph1">&lt;xref:System.String&gt;</ph>值时移动和压缩内存。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>In contrast, the memory allocated to a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object is pinned,  and that memory can be freed by calling the <ph id="ph2">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">与此相反，内存分配给<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象已固定，并且可以通过调用释放该内存<ph id="ph2">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Although data stored in a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance is more secure than data stored in a <ph id="ph2">&lt;xref:System.String&gt;</ph> instance, there are significant limitations on how secure a <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> instance is.</source>
          <target state="translated">尽管数据存储在<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>实例是比中存储的数据更安全<ph id="ph2">&lt;xref:System.String&gt;</ph>实例时，有一些重要限制如何安全<ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph>实例。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>These include:</source>
          <target state="translated">这些方法包括：</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Platform</source>
          <target state="translated">平台</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>On the Windows operating system, the contents of a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance's internal character array is encrypted.</source>
          <target state="translated">在 Windows 操作系统的内容<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>实例的内部字符数组进行加密。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>However, whether because of missing APIs or key management issues,  encryption is not available on all platforms.</source>
          <target state="translated">但是，由于缺少 Api 或密钥管理问题，加密不是在所有平台上可用。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Because of this, <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> is available on Desktop (Windows only), and not on .NET Core.</source>
          <target state="translated">因此，<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>桌面上 (仅限 Windows)，而不是在.NET 核心可用。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Duration</source>
          <target state="translated">持续时间</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Even if the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> implementation is able to take advantage of encryption, the plain text assigned to the <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> instance may be exposed at various times:</source>
          <target state="translated">即使<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>实现是能够充分利用加密，纯文本分配给<ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>实例可能会暴露在不同时间：</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Because Windows doesn't offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.</source>
          <target state="translated">因为 Windows 不提供操作系统级别的安全字符串实现，.NET Framework 仍必须将安全字符串值转换为其纯文本表示形式，才能使用它。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Whenever the value of the secure string is modified by methods such as <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, it must be decrypted (i.e., converted back to plain text), modified, and then encrypted again.</source>
          <target state="translated">每当修改了值的安全字符串由方法如<ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>，必须解密 （即，已转换的回纯文本），并修改，然后再次加密。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR).</source>
          <target state="translated">如果在互操作调用中使用的安全字符串，则它必须转换为 ANSI 字符串、 Unicode 字符串或二进制字符串 (BSTR) 中。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>For more information, see the <bpt id="p1">[</bpt>SecureString and interop<ept id="p1">](#interop)</ept> section.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>SecureString 和互操作<ept id="p1">](#interop)</ept>部分。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The time interval for which the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance's value is exposed  is merely shortened in comparison to the <ph id="ph2">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">为其的时间间隔<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>公开实例的值相对于只是缩短<ph id="ph2">&lt;xref:System.String&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Storage versus usage</source>
          <target state="translated">与使用情况的存储</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>More generally, the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class defines a storage mechanism for string values that should be protected or kept confidential.</source>
          <target state="translated">一般来说，<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>类定义的字符串值，应受保护或保密的存储机制。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>However, outside of the .NET Framework itself, no usage mechanism supports <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>.</source>
          <target state="translated">但是，在.NET Framework 本身，之外没有使用情况的机制支持<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.</source>
          <target state="translated">这意味着，必须转换为可用形式 （通常明文形式），其目标，可以识别的安全字符串和解密和转换必须出现在用户空间。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Overall, <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> is more secure than <ph id="ph2">&lt;xref:System.String&gt;</ph> because it limits the exposure of sensitive string data.</source>
          <target state="translated">总体，<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>比更安全<ph id="ph2">&lt;xref:System.String&gt;</ph>因为它在限制的敏感字符串数据透露。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file.</source>
          <target state="translated">但是，这些字符串可能仍会暴露给任何进程或有权访问原始的内存，如主计算机、 进程转储或用户可查看交换文件上运行的恶意进程的操作。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Instead of using <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.</source>
          <target state="translated">而不是使用<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>若要保护的密码，建议的替代项是使用的不透明的句柄存储在外部进程的凭据。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>返回页首<ept id="p1">](#top)</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The following example demonstrates how to use a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> to secure a user’s password for use as a credential to start a new process.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>来保护以用作凭据以启动新进程的用户的密码。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="T:System.Security.SecureString">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor">
          <source>The following example uses the default (or parameterless) constructor to instantiate a new <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">下面的示例使用默认值 （或无参数） 构造函数实例化一个新<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> method to add an array of characters to it.</source>
          <target state="translated">然后，它调用<ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>方法以向其中添加字符的数组。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object from the value of a <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">下面的示例创建<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象的值从<ph id="ph2">&lt;xref:System.String&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor">
          <source>An error occurred while protecting or unprotecting the value of this instance.</source>
          <target state="translated">保护或取消保护此实例的值时出错。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor">
          <source>This operation is not supported on this platform.</source>
          <target state="translated">此平台上不支持此操作。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>A pointer to an array of <ph id="ph1">&lt;see cref="T:System.Char" /&gt;</ph> objects.</source>
          <target state="translated">指向 <ph id="ph1">&lt;see cref="T:System.Char" /&gt;</ph> 对象的数组的指针。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>The number of elements of <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> to include in the new instance.</source>
          <target state="translated">要包括到新实例中的 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 的元素数。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> class from a subarray of <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> objects.</source>
          <target state="translated">用 <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> 对象的子数组初始化 <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>This constructor is not CLS-compliant.</source>
          <target state="translated">此构造函数不符合 CLS。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>The CLS-compliant alternative is <ph id="ph1">&lt;see cref="M:System.Security.SecureString.#ctor" /&gt;</ph>.</source>
          <target state="translated">符合 CLS 的替代方法是 <ph id="ph1">&lt;see cref="M:System.Security.SecureString.#ctor" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>This constructor initializes the new <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object to the number of characters in <ph id="ph2">`value`</ph> specified by <ph id="ph3">`length`</ph>; the value of the instance is then encrypted.</source>
          <target state="translated">此构造函数初始化新<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>对象中的字符数<ph id="ph2">`value`</ph>指定的<ph id="ph3">`length`</ph>; 然后加密实例的值。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>In C#, this constructor is defined only in the context of unsafe code.</source>
          <target state="translated">在 C# 中，仅在不安全代码的上下文中定义此构造函数。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>The following example instantiates a new <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object by passing its constructor a pointer to a character array.</source>
          <target state="translated">下面的示例实例化一个新<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>通过将其构造函数指针传递给字符数组的对象。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="length" /&gt;</ph> is less than zero or greater than 65,536.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 小于零或大于 65,536。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保护或取消保护此安全字符串的值时出错。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>This operation is not supported on this platform.</source>
          <target state="translated">此平台上不支持此操作。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>A character to append to this secure string.</source>
          <target state="translated">要追加到此安全字符串的字符。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>Appends a character to the end of the current secure string.</source>
          <target state="translated">在当前安全字符串的末尾追加一个字符。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is appended; then the new value of the secure string is re-protected.</source>
          <target state="translated">如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;<ph id="ph1">`c`</ph>追加; 则安全字符串的新值是重新保护。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> methods affect the value of a <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">下面的示例演示如何<ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>，和<ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph>方法影响的值<ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph> methods can be used to collect the characters in a password.</source>
          <target state="translated">下面的示例演示如何<ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>方法可以用于收集密码中的字符。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已处置此安全字符串。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>This secure string is read-only.</source>
          <target state="translated">此安全字符串是只读的。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>Performing this operation would make the length of this secure string greater than 65,536 characters.</source>
          <target state="translated">执行此操作将使此安全字符串的长度超过 65,536 个字符。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保护或取消保护此安全字符串的值时出错。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Clear">
          <source>Deletes the value of the current secure string.</source>
          <target state="translated">删除当前安全字符串的值。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.Clear">
          <source>The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.</source>
          <target state="translated">计算机内存中包含此安全字符串的值为零，则此安全字符串的值的长度设置为零。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.Clear">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> methods affect the value of a <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">下面的示例演示如何<ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>，和<ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph>方法影响的值<ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Clear">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已处置此安全字符串。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Clear">
          <source>This secure string is read-only.</source>
          <target state="translated">此安全字符串是只读的。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Copy">
          <source>Creates a copy of the current secure string.</source>
          <target state="translated">创建当前安全字符串的副本。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Copy">
          <source>A duplicate of this secure string.</source>
          <target state="translated">此安全字符串的副本。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.Copy">
          <source>If an instance of a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> is marked read-only, the copy of that instance will not be read-only.</source>
          <target state="translated">实例时，如果<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>是标记为只读的该实例的副本将不是只读的。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Copy">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已处置此安全字符串。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Copy">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保护或取消保护此安全字符串的值时出错。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Dispose">
          <source>Releases all resources used by the current <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> object.</source>
          <target state="translated">释放由当前 <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> 对象使用的所有资源。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> method writes binary zeroes to the allocated memory that contains the value of this <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> object, then frees the allocated memory.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph>方法将写入到分配的内存包含此值的二进制零<ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>对象，然后释放分配的内存。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>垃圾回收<ept id="p1">](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)</ept>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>The index position where parameter <bpt id="p1">&lt;c&gt;</bpt>c<ept id="p1">&lt;/c&gt;</ept> is inserted.</source>
          <target state="translated">插入参数 <bpt id="p1">&lt;c&gt;</bpt>c<ept id="p1">&lt;/c&gt;</ept> 的索引位置。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>The character to insert.</source>
          <target state="translated">要插入的字符。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>Inserts a character in this secure string at the specified index position.</source>
          <target state="translated">在此安全字符串中的指定索引位置插入一个字符。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>The index is zero-based; the first character in this secure string is at index position zero.</source>
          <target state="translated">索引是从零开始;此安全字符串中的第一个字符的索引位置零。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is inserted at the specified index position; then the new value is re-protected.</source>
          <target state="translated">如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;<ph id="ph1">`c`</ph>指定的索引位置; 插入新值是重新保护。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph> method yields the same results as the <ph id="ph2">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> method, which inserts a character at the end of a secure string, if the <ph id="ph3">`index`</ph> parameter of <ph id="ph4">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph> is set to the length of this instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>方法生成相同的结果<ph id="ph2">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>方法，如果将一个字符插入一个安全字符串，末尾<ph id="ph3">`index`</ph>参数<ph id="ph4">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>设置为此实例的长度。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> methods affect the value of a <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">下面的示例演示如何<ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>，和<ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph>方法影响的值<ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已处置此安全字符串。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>This secure string is read-only.</source>
          <target state="translated">此安全字符串是只读的。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero, or greater than the length of this secure string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于零，或大于此安全字符串的长度。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>Performing this operation would make the length of this secure string greater than 65,536 characters.</source>
          <target state="translated">执行此操作将使此安全字符串的长度超过 65,536 个字符。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保护或取消保护此安全字符串的值时出错。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.IsReadOnly">
          <source>Indicates whether this secure string is marked read-only.</source>
          <target state="translated">指示此安全字符串是否标记为只读。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this secure string is marked read-only; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此安全字符串标记为只读，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.IsReadOnly">
          <source>After an instance of <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> is marked read-only by the <ph id="ph2">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> method, any attempt to modify the value of the instance throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">实例后<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>只读通过标记<ph id="ph2">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph>任何尝试修改的值的实例引发方法， <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.IsReadOnly">
          <source>Use the <ph id="ph1">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph> method to test whether a <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> is read-only before attempting to modify it.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph>方法来测试是否<ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>是只读的然后再尝试对其进行修改。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.IsReadOnly">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已处置此安全字符串。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="P:System.Security.SecureString.Length">
          <source>Gets the number of characters in the current secure string.</source>
          <target state="translated">获取当前安全字符串中的字符数。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecureString.Length">
          <source>The number of <ph id="ph1">&lt;see cref="T:System.Char" /&gt;</ph> objects in this secure string.</source>
          <target state="translated">此安全字符串中 <ph id="ph1">&lt;see cref="T:System.Char" /&gt;</ph> 对象的数目。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecureString.Length">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString.Length%2A&gt;</ph> property returns the number of <ph id="ph2">&lt;xref:System.Char&gt;</ph> objects in this instance, not the number of Unicode characters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString.Length%2A&gt;</ph>属性返回的数目<ph id="ph2">&lt;xref:System.Char&gt;</ph>此实例中的对象，而非 Unicode 字符的数量。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecureString.Length">
          <source>A Unicode character might be represented by more than one <ph id="ph1">&lt;xref:System.Char&gt;</ph> object.</source>
          <target state="translated">Unicode 字符可能由多个<ph id="ph1">&lt;xref:System.Char&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecureString.Length">
          <source>The maximum length of a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance is 65,536 characters.</source>
          <target state="translated">最大长度<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>实例为 65,536 个字符。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Security.SecureString.Length">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已处置此安全字符串。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>Makes the text value of this secure string read-only.</source>
          <target state="translated">将此安全字符串的文本值设置为只读。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>Initialize the text value of an instance of the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class with the <ph id="ph2">&lt;xref:System.Security.SecureString.%23ctor%2A&gt;</ph> constructors, and modify the value with the <ph id="ph3">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> methods.</source>
          <target state="translated">初始化的实例的文本值<ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>类，该类具有<ph id="ph2">&lt;xref:System.Security.SecureString.%23ctor%2A&gt;</ph>构造函数，并修改的值与<ph id="ph3">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>， <ph id="ph5">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>，和<ph id="ph7">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>After you have made your final modifications, use the <ph id="ph1">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> method to make the value of the instance immutable (read-only).</source>
          <target state="translated">所做的最后一个修改后，使用<ph id="ph1">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph>方法来执行实例的值不可变 （只读）。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>After the value is marked as read-only, any further attempt to modify it throws an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">值标记为只读之后，任何进一步试图修改该值会导致<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>The effect of invoking <ph id="ph1">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> is permanent because the <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> class provides no means to make the secure string modifiable again.</source>
          <target state="translated">调用的效果<ph id="ph1">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph>是永久因为<ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>类提供了进行安全字符串，然后重新可修改任何方法。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>Use the <ph id="ph1">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph> method to test whether an instance of <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> is read-only.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph>方法来测试的实例是<ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>是只读的。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph> methods can be used to collect the characters in a password.</source>
          <target state="translated">下面的示例演示如何<ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>方法可以用于收集密码中的字符。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>After the password is collected, it is made read-only.</source>
          <target state="translated">收集密码后，进行只读的。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已处置此安全字符串。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>The index position of a character in this secure string.</source>
          <target state="translated">此安全字符串中的字符的索引位置。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>Removes the character at the specified index position from this secure string.</source>
          <target state="translated">从此安全字符串中的指定索引位置移除字符。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>The index is zero-based; the first character in this instance is at index position zero.</source>
          <target state="translated">索引是从零开始;此实例中的第一个字符的索引位置零。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.</source>
          <target state="translated">如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;位于指定的索引位置处的字符被删除;然后，新值是重新保护。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> methods affect the value of a <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">下面的示例演示如何<ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>，和<ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph>方法影响的值<ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph> methods can be used to collect the characters in a password.</source>
          <target state="translated">下面的示例演示如何<ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>方法可以用于收集密码中的字符。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已处置此安全字符串。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>This secure string is read-only.</source>
          <target state="translated">此安全字符串是只读的。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero, or greater than or equal to the length of this secure string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于零，或者大于或等于此安全字符串的长度。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保护或取消保护此安全字符串的值时出错。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>The index position of an existing character in this secure string</source>
          <target state="translated">此安全字符串中的某个现有字符的索引位置。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>A character that replaces the existing character.</source>
          <target state="translated">替换现有字符的字符。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>Replaces the existing character at the specified index position with another character.</source>
          <target state="translated">将指定索引位置上的现有字符替换为其他字符。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>The index is zero-based; the first character in this instance is at index position zero.</source>
          <target state="translated">索引是从零开始;此实例中的第一个字符的索引位置零。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is assigned to the specified index position; then the new value is re-protected.</source>
          <target state="translated">如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;<ph id="ph1">`c`</ph>分配给指定的索引位置; 则新值是重新保护。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> methods affect the value of a <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">下面的示例演示如何<ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>，和<ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph>方法影响的值<ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已处置此安全字符串。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>This secure string is read-only.</source>
          <target state="translated">此安全字符串是只读的。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero, or greater than or equal to the length of this secure string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于零，或者大于或等于此安全字符串的长度。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保护或取消保护此安全字符串的值时出错。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>