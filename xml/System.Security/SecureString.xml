<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f06352fcacdabe46f8a02266efc7ecb816129c3b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="efa91-101">表示应保密的文本，例如在不再需要时将其从计算机内存中删除。</span>
      <span class="sxs-lookup">
        <span data-stu-id="efa91-101">Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed.</span>
      </span>
      <span data-ttu-id="efa91-102">此类不能被继承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="efa91-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa91-103"><xref:System.Security.SecureString> 是提供安全的度量值的字符串类型。</span><span class="sxs-lookup"><span data-stu-id="efa91-103"><xref:System.Security.SecureString> is a string type that provides a measure of security.</span></span> <span data-ttu-id="efa91-104">它将尝试以避免将敏感字符串存储在以纯文本形式的进程内存。</span><span class="sxs-lookup"><span data-stu-id="efa91-104">It tries to avoid storing potentially sensitive strings in process memory as plain text.</span></span>  <span data-ttu-id="efa91-105">(有关限制，但是，请参阅[如何安全的方法是 SecureString？](#HowSecure)部分。)实例的值<xref:System.Security.SecureString>使用支持的基础平台，该实例已初始化或修改值，则一种机制自动保护。</span><span class="sxs-lookup"><span data-stu-id="efa91-105">(For limitations, however, see the [How secure is SecureString?](#HowSecure) section.) The value of an instance of <xref:System.Security.SecureString> is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified.</span></span> <span data-ttu-id="efa91-106">你的应用程序可以呈现实例不可变，以通过调用防止进一步修改<xref:System.Security.SecureString.MakeReadOnly%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="efa91-106">Your application can render the instance immutable and prevent further modification by invoking the <xref:System.Security.SecureString.MakeReadOnly%2A> method.</span></span>  
  
 <span data-ttu-id="efa91-107">最大长度<xref:System.Security.SecureString>实例为 65,536 个字符。</span><span class="sxs-lookup"><span data-stu-id="efa91-107">The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="efa91-108">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="efa91-108">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="efa91-109">在完成使用类型的实例后，您应释放它的中，直接或间接。</span><span class="sxs-lookup"><span data-stu-id="efa91-109">When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="efa91-110">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="efa91-110">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="efa91-111">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="efa91-111">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="efa91-112">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="efa91-112">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="efa91-113"><xref:System.Security.SecureString>类和其成员都不是对 COM 可见。</span><span class="sxs-lookup"><span data-stu-id="efa91-113">The <xref:System.Security.SecureString> class and its members are not visible to COM.</span></span> <span data-ttu-id="efa91-114">有关详情，请参阅<xref:System.Runtime.InteropServices.ComVisibleAttribute>。</span><span class="sxs-lookup"><span data-stu-id="efa91-114">For more information, see <xref:System.Runtime.InteropServices.ComVisibleAttribute>.</span></span>  
  
 <span data-ttu-id="efa91-115">本节内容：</span><span class="sxs-lookup"><span data-stu-id="efa91-115">In this section:</span></span>  
  
 <span data-ttu-id="efa91-116">[字符串 vs。SecureString](#vsString) </span><span class="sxs-lookup"><span data-stu-id="efa91-116">[String vs. SecureString](#vsString) </span></span>  
 <span data-ttu-id="efa91-117">[SecureString 操作](#Ops) </span><span class="sxs-lookup"><span data-stu-id="efa91-117">[SecureString operations](#Ops) </span></span>  
 <span data-ttu-id="efa91-118">[SecureString 和互操作](#interop) </span><span class="sxs-lookup"><span data-stu-id="efa91-118">[SecureString and interop](#interop) </span></span>  
 [<span data-ttu-id="efa91-119">安全是 SecureString？</span><span class="sxs-lookup"><span data-stu-id="efa91-119">How secure is  SecureString?</span></span>](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a><span data-ttu-id="efa91-120">与 SecureString 的字符串</span><span class="sxs-lookup"><span data-stu-id="efa91-120">String versus SecureString</span></span>  
 <span data-ttu-id="efa91-121">实例<xref:System.String?displayProperty=nameWithType>类既不可变，并且不再需要时，不能以编程方式计划进行垃圾回收; 也就是说，实例为只读之后创建，并且不可能预测时，该实例将为从计算机内存中删除。</span><span class="sxs-lookup"><span data-stu-id="efa91-121">An instance of the <xref:System.String?displayProperty=nameWithType> class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory.</span></span> <span data-ttu-id="efa91-122">因为<xref:System.String?displayProperty=nameWithType>实例是不可变，看起来要修改现有实例的操作实际创建它来操作的副本。</span><span class="sxs-lookup"><span data-stu-id="efa91-122">Because <xref:System.String?displayProperty=nameWithType> instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate.</span></span> <span data-ttu-id="efa91-123">因此，如果<xref:System.String>对象包含敏感信息，例如密码、 信用卡号或个人数据，则它使用的原因是你的应用程序无法从计算机内存中删除数据后，信息可能被泄漏的风险.</span><span class="sxs-lookup"><span data-stu-id="efa91-123">Consequently, if a <xref:System.String> object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.</span></span>  
  
 <span data-ttu-id="efa91-124">A<xref:System.Security.SecureString>对象都类似于<xref:System.String>对象，因为它具有一个文本值。</span><span class="sxs-lookup"><span data-stu-id="efa91-124">A <xref:System.Security.SecureString> object is similar to a <xref:System.String> object in that it has a text value.</span></span> <span data-ttu-id="efa91-125">但是，值<xref:System.Security.SecureString>对象被固定在内存中，可以使用一种保护机制，例如可以修改提供的基础的操作系统，加密，直到你的应用程序将其标记为只读的并可以从计算机内存中删除通过应用程序调用<xref:System.Security.SecureString.Dispose%2A>方法或.NET Framework 垃圾回收器。</span><span class="sxs-lookup"><span data-stu-id="efa91-125">However, the value of a <xref:System.Security.SecureString> object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the <xref:System.Security.SecureString.Dispose%2A> method  or by the .NET Framework garbage collector.</span></span>  
  
 <span data-ttu-id="efa91-126">有关限制的讨论<xref:System.Security.SecureString>类，请参阅[如何安全的方法是 SecureString？](#HowSecure)部分。</span><span class="sxs-lookup"><span data-stu-id="efa91-126">For a discussion of the limitations of the <xref:System.Security.SecureString> class, see the [How secure is  SecureString?](#HowSecure) section.</span></span>  
  
 [<span data-ttu-id="efa91-127">返回页首</span><span class="sxs-lookup"><span data-stu-id="efa91-127">Back to top</span></span>](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a><span data-ttu-id="efa91-128">SecureString 操作</span><span class="sxs-lookup"><span data-stu-id="efa91-128">SecureString operations</span></span>  
 <span data-ttu-id="efa91-129"><xref:System.Security.SecureString>类包括的成员，您可以执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="efa91-129">The <xref:System.Security.SecureString> class includes members that allow you to do the following:</span></span>  
  
 <span data-ttu-id="efa91-130">实例化<xref:System.Security.SecureString>对象</span><span class="sxs-lookup"><span data-stu-id="efa91-130">Instantiate a <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="efa91-131">实例化<xref:System.Security.SecureString>通过调用其无参数构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="efa91-131">You instantiate a <xref:System.Security.SecureString> object by calling its parameterless constructor.</span></span>  
  
 <span data-ttu-id="efa91-132">添加到字符<xref:System.Security.SecureString>对象</span><span class="sxs-lookup"><span data-stu-id="efa91-132">Add characters to a <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="efa91-133">可以将单个字符添加到的一次<xref:System.Security.SecureString>对象通过调用其<xref:System.Security.SecureString.AppendChar%2A>或<xref:System.Security.SecureString.InsertAt%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="efa91-133">You can add a single character at a time to a <xref:System.Security.SecureString> object  by calling its <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.InsertAt%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="efa91-134">A<xref:System.Security.SecureString>对象应永远不会从构造<xref:System.String>，这是因为敏感数据已受到不可变的内存持久性后果<xref:System.String>类。</span><span class="sxs-lookup"><span data-stu-id="efa91-134">A <xref:System.Security.SecureString> object should never be constructed from a <xref:System.String>, because the sensitive data is already subject to the memory persistence consequences of the immutable <xref:System.String> class.</span></span> <span data-ttu-id="efa91-135">构造的最好办法<xref:System.Security.SecureString>对象时字符在时间的非托管源，如<xref:System.Console.ReadKey%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="efa91-135">The best way to construct a <xref:System.Security.SecureString> object is from a character-at-a-time unmanaged source, such as the <xref:System.Console.ReadKey%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="efa91-136">删除从字符<xref:System.Security.SecureString>对象</span><span class="sxs-lookup"><span data-stu-id="efa91-136">Remove characters from a <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="efa91-137">你可以通过调用来替换单个字符<xref:System.Security.SecureString.SetAt%2A>方法，通过调用中删除单个字符<xref:System.Security.SecureString.RemoveAt%2A>方法或删除的所有字符从<xref:System.Security.SecureString>实例通过调用<xref:System.Security.SecureString.Clear%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="efa91-137">You can replace an individual character by calling the <xref:System.Security.SecureString.SetAt%2A> method, remove an individual character by calling the <xref:System.Security.SecureString.RemoveAt%2A> method, or remove all characters from the <xref:System.Security.SecureString> instance by calling the  <xref:System.Security.SecureString.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="efa91-138">请<xref:System.Security.SecureString>对象只读的</span><span class="sxs-lookup"><span data-stu-id="efa91-138">Make the <xref:System.Security.SecureString> object read-only</span></span>  
 <span data-ttu-id="efa91-139">定义字符串后，<xref:System.Security.SecureString>对象表示，则调用其<xref:System.Security.SecureString.MakeReadOnly%2A>方法，以使字符串，只读的。</span><span class="sxs-lookup"><span data-stu-id="efa91-139">Once you have defined the string that the <xref:System.Security.SecureString> object represents, you call its  <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the string read-only.</span></span>  
  
 <span data-ttu-id="efa91-140">获取其相关信息<xref:System.Security.SecureString>对象</span><span class="sxs-lookup"><span data-stu-id="efa91-140">Get information about the <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="efa91-141"><xref:System.Security.SecureString>类具有提供有关字符串的信息的仅有两个成员： 其<xref:System.Security.SecureString.Length%2A>属性，它指示的字符串; 中的 UTF16 编码的代码单位数和<xref:System.Security.SecureString.IsReadOnly%2A>，方法，该值指示实例是否只读的。</span><span class="sxs-lookup"><span data-stu-id="efa91-141">The <xref:System.Security.SecureString> class has only two members that provide information about the string: its <xref:System.Security.SecureString.Length%2A> property, which indicates the number of UTF16-encoded code units in the string; and the <xref:System.Security.SecureString.IsReadOnly%2A>, method, which indicates whether the instance is read-only.</span></span>  
  
 <span data-ttu-id="efa91-142">释放的内存分配给<xref:System.Security.SecureString>实例</span><span class="sxs-lookup"><span data-stu-id="efa91-142">Release the memory allocated to the <xref:System.Security.SecureString> instance</span></span>  
 <span data-ttu-id="efa91-143">因为<xref:System.Security.SecureString>实现<xref:System.IDisposable>接口，通过调用释放其内存<xref:System.Security.SecureString.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="efa91-143">Because <xref:System.Security.SecureString> implements the <xref:System.IDisposable> interface, you release its memory by calling the <xref:System.Security.SecureString.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="efa91-144"><xref:System.Security.SecureString>类没有任何成员检查、 比较，或将的值转换<xref:System.Security.SecureString>。</span><span class="sxs-lookup"><span data-stu-id="efa91-144">The <xref:System.Security.SecureString> class has no members that inspect, compare, or convert the value of a <xref:System.Security.SecureString>.</span></span> <span data-ttu-id="efa91-145">如果未指定此类成员可帮助防止意外或恶意的公开实例的值。</span><span class="sxs-lookup"><span data-stu-id="efa91-145">The absence of such members helps protect the value of the instance from accidental or malicious exposure.</span></span> <span data-ttu-id="efa91-146">使用的相应成员<xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType>类，如<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>方法，以操作的值<xref:System.Security.SecureString>对象。</span><span class="sxs-lookup"><span data-stu-id="efa91-146">Use appropriate members of the <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> class, such as the <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method, to manipulate the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 <span data-ttu-id="efa91-147">.NET Framework 类库通常使用<xref:System.Security.SecureString>实例通过以下方式：</span><span class="sxs-lookup"><span data-stu-id="efa91-147">The .NET Framework Class Library commonly uses <xref:System.Security.SecureString> instances in the following ways:</span></span>  
  
-   <span data-ttu-id="efa91-148">通过提供到进程的密码信息<xref:System.Diagnostics.ProcessStartInfo>结构，或通过调用的重载<xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType>具有类型参数的方法<xref:System.Security.SecureString>。</span><span class="sxs-lookup"><span data-stu-id="efa91-148">To provide password information to a process by using the <xref:System.Diagnostics.ProcessStartInfo> structure or by calling an overload of the <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> method that has a parameter of type <xref:System.Security.SecureString>.</span></span>  
  
-   <span data-ttu-id="efa91-149">通过调用提供网络密码信息<xref:System.Net.NetworkCredential>具有类型参数的类构造函数<xref:System.Security.SecureString>或通过使用<xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="efa91-149">To provide network password information by calling a <xref:System.Net.NetworkCredential> class constructor that has a parameter of type <xref:System.Security.SecureString> or by using the <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="efa91-150">通过调用提供 SQL Server 身份验证的密码信息<xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType>构造函数或检索的值的<xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="efa91-150">To provide password information for SQL Server Authentication by calling the <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> constructor or retrieving the value of the <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="efa91-151">将字符串传递到非托管代码。</span><span class="sxs-lookup"><span data-stu-id="efa91-151">To pass a string to unmanaged code.</span></span> <span data-ttu-id="efa91-152">有关详细信息，请参阅[SecureString 和互操作](#interop)部分。</span><span class="sxs-lookup"><span data-stu-id="efa91-152">For more information, see the [SecureString and interop](#interop) section.</span></span>  
  
 [<span data-ttu-id="efa91-153">返回页首</span><span class="sxs-lookup"><span data-stu-id="efa91-153">Back to top</span></span>](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a><span data-ttu-id="efa91-154">SecureString 和互操作</span><span class="sxs-lookup"><span data-stu-id="efa91-154">SecureString and interop</span></span>  
 <span data-ttu-id="efa91-155">由于操作系统不直接支持<xref:System.Security.SecureString>，必须将转换的值<xref:System.Security.SecureString>之前将字符串传递给本机方法的必需的字符串类型的对象。</span><span class="sxs-lookup"><span data-stu-id="efa91-155">Because the operating system does not  directly support <xref:System.Security.SecureString>, you must convert the value of the <xref:System.Security.SecureString> object to the required string type before passing the string to a native method.</span></span>  <span data-ttu-id="efa91-156"><xref:System.Runtime.InteropServices.Marshal>类具有执行此操作的五个方法：</span><span class="sxs-lookup"><span data-stu-id="efa91-156">The <xref:System.Runtime.InteropServices.Marshal> class has five methods that do this:</span></span>  
  
-   <span data-ttu-id="efa91-157"><xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>哪些将<xref:System.Security.SecureString>字符串值与二进制字符串 (BSTR) 后识别由 com 使用。</span><span class="sxs-lookup"><span data-stu-id="efa91-157"><xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>, which converts the <xref:System.Security.SecureString> string value to a binary string (BSTR) recognized by COM.</span></span>  
  
-   <span data-ttu-id="efa91-158"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> 和<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>，复制<xref:System.Security.SecureString>字符串到非托管内存中的 ANSI 字符串值。</span><span class="sxs-lookup"><span data-stu-id="efa91-158"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>, which copy the <xref:System.Security.SecureString> string value to an ANSI string in unmanaged memory.</span></span>  
  
-   <span data-ttu-id="efa91-159"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> 和<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>，复制<xref:System.Security.SecureString>字符串到非托管内存中的 Unicode 字符串值。</span><span class="sxs-lookup"><span data-stu-id="efa91-159"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>, which copy the <xref:System.Security.SecureString> string value to a Unicode string in unmanaged memory.</span></span>  
  
 <span data-ttu-id="efa91-160">上述每种方法创建非托管内存中的纯文本字符串。</span><span class="sxs-lookup"><span data-stu-id="efa91-160">Each of these methods creates a clear-text string in unmanaged memory.</span></span> <span data-ttu-id="efa91-161">它负责的开发人员可以清空并不再需要时，就会立即释放该内存。</span><span class="sxs-lookup"><span data-stu-id="efa91-161">It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed.</span></span> <span data-ttu-id="efa91-162">每个字符串转换和内存分配方法有一个相应的方法来清空并释放分配的内存：</span><span class="sxs-lookup"><span data-stu-id="efa91-162">Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:</span></span>  
  
|<span data-ttu-id="efa91-163">分配和转换方法</span><span class="sxs-lookup"><span data-stu-id="efa91-163">Allocation and conversion method</span></span>|<span data-ttu-id="efa91-164">零和 free 方法</span><span class="sxs-lookup"><span data-stu-id="efa91-164">Zero and free method</span></span>|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [<span data-ttu-id="efa91-165">返回页首</span><span class="sxs-lookup"><span data-stu-id="efa91-165">Back to top</span></span>](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a><span data-ttu-id="efa91-166">安全是 SecureString？</span><span class="sxs-lookup"><span data-stu-id="efa91-166">How secure is SecureString?</span></span>  
 <span data-ttu-id="efa91-167">正确，创建时<xref:System.Security.SecureString>实例提供更多的数据保护比<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="efa91-167">When created properly, a <xref:System.Security.SecureString> instance provides more data protection than a <xref:System.String>.</span></span> <span data-ttu-id="efa91-168">字符在时间来源，创建一个字符串时<xref:System.String>而在内存中，创建多个中间<xref:System.Security.SecureString>创建单个实例。</span><span class="sxs-lookup"><span data-stu-id="efa91-168">When creating a string from a character-at-a-time source, <xref:System.String> creates multiple intermediate in memory, whereas  <xref:System.Security.SecureString> creates just a single instance.</span></span>  <span data-ttu-id="efa91-169">垃圾回收的<xref:System.String>对象是不确定的。</span><span class="sxs-lookup"><span data-stu-id="efa91-169">Garbage collection of <xref:System.String> objects  is non-deterministic.</span></span> <span data-ttu-id="efa91-170">此外，因为其内存不固定，因此垃圾回收器将制作的其他副本<xref:System.String>值时移动和压缩内存。</span><span class="sxs-lookup"><span data-stu-id="efa91-170">In addition, because its memory is not pinned, the garbage collector will make additional copies of <xref:System.String> values when moving and compacting memory.</span></span> <span data-ttu-id="efa91-171">与此相反，内存分配给<xref:System.Security.SecureString>对象已固定，并且可以通过调用释放该内存<xref:System.Security.SecureString.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="efa91-171">In contrast, the memory allocated to a <xref:System.Security.SecureString> object is pinned,  and that memory can be freed by calling the <xref:System.Security.SecureString.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="efa91-172">尽管数据存储在<xref:System.Security.SecureString>实例是比中存储的数据更安全<xref:System.String>实例时，有一些重要限制如何安全<xref:System.Security.SecureString>实例。</span><span class="sxs-lookup"><span data-stu-id="efa91-172">Although data stored in a <xref:System.Security.SecureString> instance is more secure than data stored in a <xref:System.String> instance, there are significant limitations on how secure a <xref:System.Security.SecureString> instance is.</span></span> <span data-ttu-id="efa91-173">这些方法包括：</span><span class="sxs-lookup"><span data-stu-id="efa91-173">These include:</span></span>  
  
 <span data-ttu-id="efa91-174">平台</span><span class="sxs-lookup"><span data-stu-id="efa91-174">Platform</span></span>  
 <span data-ttu-id="efa91-175">在 Windows 操作系统的内容<xref:System.Security.SecureString>实例的内部字符数组进行加密。</span><span class="sxs-lookup"><span data-stu-id="efa91-175">On the Windows operating system, the contents of a <xref:System.Security.SecureString> instance's internal character array is encrypted.</span></span> <span data-ttu-id="efa91-176">但是，由于缺少 Api 或密钥管理问题，加密不是在所有平台上可用。</span><span class="sxs-lookup"><span data-stu-id="efa91-176">However, whether because of missing APIs or key management issues,  encryption is not available on all platforms.</span></span> <span data-ttu-id="efa91-177">因此，<xref:System.Security.SecureString>桌面上 (仅限 Windows)，而不是在.NET 核心可用。</span><span class="sxs-lookup"><span data-stu-id="efa91-177">Because of this, <xref:System.Security.SecureString> is available on Desktop (Windows only), and not on .NET Core.</span></span>  
  
 <span data-ttu-id="efa91-178">持续时间</span><span class="sxs-lookup"><span data-stu-id="efa91-178">Duration</span></span>  
 <span data-ttu-id="efa91-179">即使<xref:System.Security.SecureString>实现是能够充分利用加密，纯文本分配给<xref:System.Security.SecureString>实例可能会暴露在不同时间：</span><span class="sxs-lookup"><span data-stu-id="efa91-179">Even if the <xref:System.Security.SecureString> implementation is able to take advantage of encryption, the plain text assigned to the <xref:System.Security.SecureString> instance may be exposed at various times:</span></span>  
  
-   <span data-ttu-id="efa91-180">因为 Windows 不提供操作系统级别的安全字符串实现，.NET Framework 仍必须将安全字符串值转换为其纯文本表示形式，才能使用它。</span><span class="sxs-lookup"><span data-stu-id="efa91-180">Because Windows doesn't offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.</span></span>  
  
-   <span data-ttu-id="efa91-181">每当修改了值的安全字符串由方法如<xref:System.Security.SecureString.AppendChar%2A>或<xref:System.Security.SecureString.RemoveAt%2A>，必须解密 （即，已转换的回纯文本），并修改，然后再次加密。</span><span class="sxs-lookup"><span data-stu-id="efa91-181">Whenever the value of the secure string is modified by methods such as <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.RemoveAt%2A>, it must be decrypted (i.e., converted back to plain text), modified, and then encrypted again.</span></span>  
  
-   <span data-ttu-id="efa91-182">如果在互操作调用中使用的安全字符串，则它必须转换为 ANSI 字符串、 Unicode 字符串或二进制字符串 (BSTR) 中。</span><span class="sxs-lookup"><span data-stu-id="efa91-182">If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR).</span></span> <span data-ttu-id="efa91-183">有关详细信息，请参阅[SecureString 和互操作](#interop)部分。</span><span class="sxs-lookup"><span data-stu-id="efa91-183">For more information, see the [SecureString and interop](#interop) section.</span></span>  
  
 <span data-ttu-id="efa91-184">为其的时间间隔<xref:System.Security.SecureString>公开实例的值相对于只是缩短<xref:System.String>类。</span><span class="sxs-lookup"><span data-stu-id="efa91-184">The time interval for which the <xref:System.Security.SecureString> instance's value is exposed  is merely shortened in comparison to the <xref:System.String> class.</span></span>  
  
 <span data-ttu-id="efa91-185">与使用情况的存储</span><span class="sxs-lookup"><span data-stu-id="efa91-185">Storage versus usage</span></span>  
 <span data-ttu-id="efa91-186">一般来说，<xref:System.Security.SecureString>类定义的字符串值，应受保护或保密的存储机制。</span><span class="sxs-lookup"><span data-stu-id="efa91-186">More generally, the <xref:System.Security.SecureString> class defines a storage mechanism for string values that should be protected or kept confidential.</span></span> <span data-ttu-id="efa91-187">但是，在.NET Framework 本身，之外没有使用情况的机制支持<xref:System.Security.SecureString>。</span><span class="sxs-lookup"><span data-stu-id="efa91-187">However, outside of the .NET Framework itself, no usage mechanism supports <xref:System.Security.SecureString>.</span></span> <span data-ttu-id="efa91-188">这意味着，必须转换为可用形式 （通常明文形式），其目标，可以识别的安全字符串和解密和转换必须出现在用户空间。</span><span class="sxs-lookup"><span data-stu-id="efa91-188">This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.</span></span>  
  
 <span data-ttu-id="efa91-189">总体，<xref:System.Security.SecureString>比更安全<xref:System.String>因为它在限制的敏感字符串数据透露。</span><span class="sxs-lookup"><span data-stu-id="efa91-189">Overall, <xref:System.Security.SecureString> is more secure than <xref:System.String> because it limits the exposure of sensitive string data.</span></span> <span data-ttu-id="efa91-190">但是，这些字符串可能仍会暴露给任何进程或有权访问原始的内存，如主计算机、 进程转储或用户可查看交换文件上运行的恶意进程的操作。</span><span class="sxs-lookup"><span data-stu-id="efa91-190">However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file.</span></span> <span data-ttu-id="efa91-191">而不是使用<xref:System.Security.SecureString>若要保护的密码，建议的替代项是使用的不透明的句柄存储在外部进程的凭据。</span><span class="sxs-lookup"><span data-stu-id="efa91-191">Instead of using <xref:System.Security.SecureString> to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.</span></span>  
  
 [<span data-ttu-id="efa91-192">返回页首</span><span class="sxs-lookup"><span data-stu-id="efa91-192">Back to top</span></span>](#top)  
  
   
  
## Examples  
 <span data-ttu-id="efa91-193">下面的示例演示如何使用<xref:System.Security.SecureString>来保护以用作凭据以启动新进程的用户的密码。</span><span class="sxs-lookup"><span data-stu-id="efa91-193">The following example demonstrates how to use a <xref:System.Security.SecureString> to secure a user’s password for use as a credential to start a new process.</span></span>  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="efa91-194">初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-194">Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="efa91-195">初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-195">Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="efa91-196">下面的示例使用默认值 （或无参数） 构造函数实例化一个新<xref:System.Security.SecureString>对象。</span><span class="sxs-lookup"><span data-stu-id="efa91-196">The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object.</span></span> <span data-ttu-id="efa91-197">然后，它调用<xref:System.Security.SecureString.AppendChar%2A>方法以向其中添加字符的数组。</span><span class="sxs-lookup"><span data-stu-id="efa91-197">It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.</span></span>  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 <span data-ttu-id="efa91-198">下面的示例创建<xref:System.Security.SecureString>对象的值从<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="efa91-198">The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.</span></span>  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="efa91-199">保护或取消保护此实例的值时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-199">An error occurred while protecting or unprotecting the value of this instance.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="efa91-200">此平台上不支持此操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-200">This operation is not supported on this platform.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="efa91-201">指向 <see cref="T:System.Char" /> 对象的数组的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-201">A pointer to an array of <see cref="T:System.Char" /> objects.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="efa91-202">要包括到新实例中的 <c>value</c> 的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-202">The number of elements of <c>value</c> to include in the new instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="efa91-203">用 <see cref="T:System.Char" /> 对象的子数组初始化 <see cref="T:System.Security.SecureString" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-203">Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class from a subarray of <see cref="T:System.Char" /> objects.</span>
          </span>
          <span data-ttu-id="efa91-204">此构造函数不符合 CLS。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-204">This constructor is not CLS-compliant.</span>
          </span>
          <span data-ttu-id="efa91-205">符合 CLS 的替代方法是 <see cref="M:System.Security.SecureString.#ctor" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-205">The CLS-compliant alternative is <see cref="M:System.Security.SecureString.#ctor" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa91-206">此构造函数初始化新<xref:System.Security.SecureString>对象中的字符数`value`指定的`length`; 然后加密实例的值。</span><span class="sxs-lookup"><span data-stu-id="efa91-206">This constructor initializes the new <xref:System.Security.SecureString> object to the number of characters in `value` specified by `length`; the value of the instance is then encrypted.</span></span>  
  
 <span data-ttu-id="efa91-207">在 C# 中，仅在不安全代码的上下文中定义此构造函数。</span><span class="sxs-lookup"><span data-stu-id="efa91-207">In C#, this constructor is defined only in the context of unsafe code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="efa91-208">下面的示例实例化一个新<xref:System.Security.SecureString>通过将其构造函数指针传递给字符数组的对象。</span><span class="sxs-lookup"><span data-stu-id="efa91-208">The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.</span></span>  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="efa91-209">
            <paramref name="value" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-209">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="efa91-210">
            <paramref name="length" /> 小于零或大于 65,536。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-210">
              <paramref name="length" /> is less than zero or greater than 65,536.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="efa91-211">保护或取消保护此安全字符串的值时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-211">An error occurred while protecting or unprotecting the value of this secure string.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="efa91-212">此平台上不支持此操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-212">This operation is not supported on this platform.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="efa91-213">需要完全信任直接调用方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-213">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="efa91-214">此成员不能由部分受信任或不透明的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-214">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="efa91-215">要追加到此安全字符串的字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-215">A character to append to this secure string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="efa91-216">在当前安全字符串的末尾追加一个字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-216">Appends a character to the end of the current secure string.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa91-217">如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;`c`追加; 则安全字符串的新值是重新保护。</span><span class="sxs-lookup"><span data-stu-id="efa91-217">If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; `c` is appended; then the new value of the secure string is re-protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="efa91-218">下面的示例演示如何<xref:System.Security.SecureString.AppendChar%2A>， <xref:System.Security.SecureString.InsertAt%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>，和<xref:System.Security.SecureString.Clear%2A>方法影响的值<xref:System.Security.SecureString>对象。</span><span class="sxs-lookup"><span data-stu-id="efa91-218">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 <span data-ttu-id="efa91-219">下面的示例演示如何<xref:System.Security.SecureString.AppendChar%2A>和<xref:System.Security.SecureString.RemoveAt%2A>方法可以用于收集密码中的字符。</span><span class="sxs-lookup"><span data-stu-id="efa91-219">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.</span></span>  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="efa91-220">已处置此安全字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-220">This secure string has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="efa91-221">此安全字符串是只读的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-221">This secure string is read-only.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="efa91-222">执行此操作将使此安全字符串的长度超过 65,536 个字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-222">Performing this operation would make the length of this secure string greater than 65,536 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="efa91-223">保护或取消保护此安全字符串的值时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-223">An error occurred while protecting or unprotecting the value of this secure string.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="efa91-224">删除当前安全字符串的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-224">Deletes the value of the current secure string.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa91-225">计算机内存中包含此安全字符串的值为零，则此安全字符串的值的长度设置为零。</span><span class="sxs-lookup"><span data-stu-id="efa91-225">The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="efa91-226">下面的示例演示如何<xref:System.Security.SecureString.AppendChar%2A>， <xref:System.Security.SecureString.InsertAt%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>，和<xref:System.Security.SecureString.Clear%2A>方法影响的值<xref:System.Security.SecureString>对象。</span><span class="sxs-lookup"><span data-stu-id="efa91-226">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="efa91-227">已处置此安全字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-227">This secure string has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="efa91-228">此安全字符串是只读的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-228">This secure string is read-only.</span>
          </span>
        </exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="efa91-229">创建当前安全字符串的副本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-229">Creates a copy of the current secure string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="efa91-230">此安全字符串的副本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-230">A duplicate of this secure string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa91-231">实例时，如果<xref:System.Security.SecureString>是标记为只读的该实例的副本将不是只读的。</span><span class="sxs-lookup"><span data-stu-id="efa91-231">If an instance of a <xref:System.Security.SecureString> is marked read-only, the copy of that instance will not be read-only.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="efa91-232">已处置此安全字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-232">This secure string has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="efa91-233">保护或取消保护此安全字符串的值时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-233">An error occurred while protecting or unprotecting the value of this secure string.</span>
          </span>
        </exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="efa91-234">释放由当前 <see cref="T:System.Security.SecureString" /> 对象使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-234">Releases all resources used by the current <see cref="T:System.Security.SecureString" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa91-235"><xref:System.Security.SecureString.Dispose%2A>方法将写入到分配的内存包含此值的二进制零<xref:System.Security.SecureString>对象，然后释放分配的内存。</span><span class="sxs-lookup"><span data-stu-id="efa91-235">The <xref:System.Security.SecureString.Dispose%2A> method writes binary zeroes to the allocated memory that contains the value of this <xref:System.Security.SecureString> object, then frees the allocated memory.</span></span>  
  
 <span data-ttu-id="efa91-236">有关详细信息，请参阅[垃圾回收](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)。</span><span class="sxs-lookup"><span data-stu-id="efa91-236">For more information, see [Garbage Collection](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="efa91-237">插入参数 <c>c</c> 的索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-237">The index position where parameter <c>c</c> is inserted.</span>
          </span>
        </param>
        <param name="c">
          <span data-ttu-id="efa91-238">要插入的字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-238">The character to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="efa91-239">在此安全字符串中的指定索引位置插入一个字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-239">Inserts a character in this secure string at the specified index position.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa91-240">索引是从零开始;此安全字符串中的第一个字符的索引位置零。</span><span class="sxs-lookup"><span data-stu-id="efa91-240">The index is zero-based; the first character in this secure string is at index position zero.</span></span>  
  
 <span data-ttu-id="efa91-241">如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;`c`指定的索引位置; 插入新值是重新保护。</span><span class="sxs-lookup"><span data-stu-id="efa91-241">If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is inserted at the specified index position; then the new value is re-protected.</span></span> <span data-ttu-id="efa91-242"><xref:System.Security.SecureString.InsertAt%2A>方法生成相同的结果<xref:System.Security.SecureString.AppendChar%2A>方法，如果将一个字符插入一个安全字符串，末尾`index`参数<xref:System.Security.SecureString.InsertAt%2A>设置为此实例的长度。</span><span class="sxs-lookup"><span data-stu-id="efa91-242">The <xref:System.Security.SecureString.InsertAt%2A> method yields the same results as the <xref:System.Security.SecureString.AppendChar%2A> method, which inserts a character at the end of a secure string, if the `index` parameter of <xref:System.Security.SecureString.InsertAt%2A> is set to the length of this instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="efa91-243">下面的示例演示如何<xref:System.Security.SecureString.AppendChar%2A>， <xref:System.Security.SecureString.InsertAt%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>，和<xref:System.Security.SecureString.Clear%2A>方法影响的值<xref:System.Security.SecureString>对象。</span><span class="sxs-lookup"><span data-stu-id="efa91-243">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="efa91-244">已处置此安全字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-244">This secure string has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="efa91-245">此安全字符串是只读的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-245">This secure string is read-only.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="efa91-246">
            <paramref name="index" /> 小于零，或大于此安全字符串的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-246">
              <paramref name="index" /> is less than zero, or greater than the length of this secure string.</span>
          </span>
          <span data-ttu-id="efa91-247">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-247">-or-</span>
          </span>
          <span data-ttu-id="efa91-248">执行此操作将使此安全字符串的长度超过 65,536 个字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-248">Performing this operation would make the length of this secure string greater than 65,536 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="efa91-249">保护或取消保护此安全字符串的值时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-249">An error occurred while protecting or unprotecting the value of this secure string.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="efa91-250">指示此安全字符串是否标记为只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-250">Indicates whether this secure string is marked read-only.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="efa91-251">如果此安全字符串标记为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-251">
              <see langword="true" /> if this secure string is marked read-only; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa91-252">实例后<xref:System.Security.SecureString>只读通过标记<xref:System.Security.SecureString.MakeReadOnly%2A>任何尝试修改的值的实例引发方法， <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="efa91-252">After an instance of <xref:System.Security.SecureString> is marked read-only by the <xref:System.Security.SecureString.MakeReadOnly%2A> method, any attempt to modify the value of the instance throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="efa91-253">使用<xref:System.Security.SecureString.IsReadOnly%2A>方法来测试是否<xref:System.Security.SecureString>是只读的然后再尝试对其进行修改。</span><span class="sxs-lookup"><span data-stu-id="efa91-253">Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether a <xref:System.Security.SecureString> is read-only before attempting to modify it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="efa91-254">已处置此安全字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-254">This secure string has already been disposed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="efa91-255">获取当前安全字符串中的字符数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-255">Gets the number of characters in the current secure string.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="efa91-256">此安全字符串中 <see cref="T:System.Char" /> 对象的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-256">The number of <see cref="T:System.Char" /> objects in this secure string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa91-257"><xref:System.Security.SecureString.Length%2A>属性返回的数目<xref:System.Char>此实例中的对象，而非 Unicode 字符的数量。</span><span class="sxs-lookup"><span data-stu-id="efa91-257">The <xref:System.Security.SecureString.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters.</span></span> <span data-ttu-id="efa91-258">Unicode 字符可能由多个<xref:System.Char>对象。</span><span class="sxs-lookup"><span data-stu-id="efa91-258">A Unicode character might be represented by more than one <xref:System.Char> object.</span></span>  
  
 <span data-ttu-id="efa91-259">最大长度<xref:System.Security.SecureString>实例为 65,536 个字符。</span><span class="sxs-lookup"><span data-stu-id="efa91-259">The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="efa91-260">已处置此安全字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-260">This secure string has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="efa91-261">将此安全字符串的文本值设置为只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-261">Makes the text value of this secure string read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa91-262">初始化的实例的文本值<xref:System.Security.SecureString>类，该类具有<xref:System.Security.SecureString.%23ctor%2A>构造函数，并修改的值与<xref:System.Security.SecureString.Clear%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>， <xref:System.Security.SecureString.InsertAt%2A>，和<xref:System.Security.SecureString.AppendChar%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="efa91-262">Initialize the text value of an instance of the <xref:System.Security.SecureString> class with the <xref:System.Security.SecureString.%23ctor%2A> constructors, and modify the value with the <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, and <xref:System.Security.SecureString.AppendChar%2A> methods.</span></span>  
  
 <span data-ttu-id="efa91-263">所做的最后一个修改后，使用<xref:System.Security.SecureString.MakeReadOnly%2A>方法来执行实例的值不可变 （只读）。</span><span class="sxs-lookup"><span data-stu-id="efa91-263">After you have made your final modifications, use the <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the value of the instance immutable (read-only).</span></span> <span data-ttu-id="efa91-264">值标记为只读之后，任何进一步试图修改该值会导致<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="efa91-264">After the value is marked as read-only, any further attempt to modify it throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="efa91-265">调用的效果<xref:System.Security.SecureString.MakeReadOnly%2A>是永久因为<xref:System.Security.SecureString>类提供了进行安全字符串，然后重新可修改任何方法。</span><span class="sxs-lookup"><span data-stu-id="efa91-265">The effect of invoking <xref:System.Security.SecureString.MakeReadOnly%2A> is permanent because the <xref:System.Security.SecureString> class provides no means to make the secure string modifiable again.</span></span> <span data-ttu-id="efa91-266">使用<xref:System.Security.SecureString.IsReadOnly%2A>方法来测试的实例是<xref:System.Security.SecureString>是只读的。</span><span class="sxs-lookup"><span data-stu-id="efa91-266">Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether an instance of <xref:System.Security.SecureString> is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="efa91-267">下面的示例演示如何<xref:System.Security.SecureString.AppendChar%2A>和<xref:System.Security.SecureString.RemoveAt%2A>方法可以用于收集密码中的字符。</span><span class="sxs-lookup"><span data-stu-id="efa91-267">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.</span></span> <span data-ttu-id="efa91-268">收集密码后，进行只读的。</span><span class="sxs-lookup"><span data-stu-id="efa91-268">After the password is collected, it is made read-only.</span></span>  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="efa91-269">已处置此安全字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-269">This secure string has already been disposed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="efa91-270">此安全字符串中的字符的索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-270">The index position of a character in this secure string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="efa91-271">从此安全字符串中的指定索引位置移除字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-271">Removes the character at the specified index position from this secure string.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa91-272">索引是从零开始;此实例中的第一个字符的索引位置零。</span><span class="sxs-lookup"><span data-stu-id="efa91-272">The index is zero-based; the first character in this instance is at index position zero.</span></span>  
  
 <span data-ttu-id="efa91-273">如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;位于指定的索引位置处的字符被删除;然后，新值是重新保护。</span><span class="sxs-lookup"><span data-stu-id="efa91-273">If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="efa91-274">下面的示例演示如何<xref:System.Security.SecureString.AppendChar%2A>， <xref:System.Security.SecureString.InsertAt%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>，和<xref:System.Security.SecureString.Clear%2A>方法影响的值<xref:System.Security.SecureString>对象。</span><span class="sxs-lookup"><span data-stu-id="efa91-274">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 <span data-ttu-id="efa91-275">下面的示例演示如何<xref:System.Security.SecureString.AppendChar%2A>和<xref:System.Security.SecureString.RemoveAt%2A>方法可以用于收集密码中的字符。</span><span class="sxs-lookup"><span data-stu-id="efa91-275">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.</span></span>  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="efa91-276">已处置此安全字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-276">This secure string has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="efa91-277">此安全字符串是只读的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-277">This secure string is read-only.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="efa91-278">
            <paramref name="index" /> 小于零，或者大于或等于此安全字符串的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-278">
              <paramref name="index" /> is less than zero, or greater than or equal to the length of this secure string.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="efa91-279">保护或取消保护此安全字符串的值时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-279">An error occurred while protecting or unprotecting the value of this secure string.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="efa91-280">此安全字符串中的某个现有字符的索引位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-280">The index position of an existing character in this secure string</span>
          </span>
        </param>
        <param name="c">
          <span data-ttu-id="efa91-281">替换现有字符的字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-281">A character that replaces the existing character.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="efa91-282">将指定索引位置上的现有字符替换为其他字符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-282">Replaces the existing character at the specified index position with another character.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efa91-283">索引是从零开始;此实例中的第一个字符的索引位置零。</span><span class="sxs-lookup"><span data-stu-id="efa91-283">The index is zero-based; the first character in this instance is at index position zero.</span></span>  
  
 <span data-ttu-id="efa91-284">如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;`c`分配给指定的索引位置; 则新值是重新保护。</span><span class="sxs-lookup"><span data-stu-id="efa91-284">If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is assigned to the specified index position; then the new value is re-protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="efa91-285">下面的示例演示如何<xref:System.Security.SecureString.AppendChar%2A>， <xref:System.Security.SecureString.InsertAt%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>，和<xref:System.Security.SecureString.Clear%2A>方法影响的值<xref:System.Security.SecureString>对象。</span><span class="sxs-lookup"><span data-stu-id="efa91-285">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="efa91-286">已处置此安全字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-286">This secure string has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="efa91-287">此安全字符串是只读的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-287">This secure string is read-only.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="efa91-288">
            <paramref name="index" /> 小于零，或者大于或等于此安全字符串的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-288">
              <paramref name="index" /> is less than zero, or greater than or equal to the length of this secure string.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="efa91-289">保护或取消保护此安全字符串的值时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efa91-289">An error occurred while protecting or unprotecting the value of this secure string.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>