<Type Name="SecurityState" FullName="System.Security.SecurityState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e5f6c5c35694588d4da90923e89e7255dc5b1ac2" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39864333" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SecurityState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecurityState" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SecurityState" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityState abstract" />
  <TypeSignature Language="F#" Value="type SecurityState = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一个基类，用于从 <see cref="T:System.AppDomainManager" /> 对象中请求操作的安全状态。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须继承此类，以提供一个类，包含一个属性，指定要执行安全敏感操作。 <xref:System.Security.SecurityState>从派生类实例化的对象传递给<xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=nameWithType>方法，以确定主机是否允许要执行该操作。 默认实现<xref:System.AppDomainManager.CheckSecuritySettings%2A>方法始终返回`false`。  必须重写该方法以检测所允许的操作。  
  
 例如，如果你想要访问 Web 摄像机在库代码中的，则会创建`WebcamSecurityState`对象，并调用<xref:System.Security.SecurityState.EnsureState%2A>方法，以确定主机是否允许 Web 照相机访问，如下面的示例中所示。  (您可以找到有关代码`WebcamSecurityState`"示例"部分。)  
  
```  
WebcamSecurityState securityState = new WebcamSecurityState("Safe access to Webcam", WebcamSecurityOptions.SafeAccess);  
try  
{  
   securityState.EnsureState();  
   // Allocate memory.  
   }  
catch (ApplicationException e)  
{  
    // Handle any exception that is thrown.  
    System.Diagnostics.Debug.WriteLine(e.Message);  
}  
```  
  
 若要处理在调用<xref:System.AppDomainManager>必须意识到`WebcamSecurityState`的重写通过<xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=nameWithType>方法，如以下示例所示。  
  
```  
[SecurityCritical]  
public override bool CheckSecuritySettings(System.Security.SecurityState securityState)  
{  
   switch (securityState.ToString())  
   {  
      case "WebcamSecurityState":  
      {  
          if ((securityState as WebcamSecurityState).Options == WebcamSecurityOptions.SafeAccess)  
              return PromptUser((securityState as WebcamSecurityState).Description);  
           return false;  
      }  
   }  
      return false;  
}  
private bool PromptUser(string text)  
{  
   // Replace the OpenFileDialog with a custom user prompt.  
   OpenFileDialog o = new OpenFileDialog();  
   o.Title = text;  
   if (o.ShowDialog() == DialogResult.OK)  
      return true;  
   else  
      return false;  
}  
  
```  
  
   
  
## Examples  
 下面的示例演示如何重写<xref:System.Security.SecurityState>类。  
  
```  
[SecurityCritical]  
public enum WebcamSecurityOptions  
    {  
        SafeAccess,  
        FullAccess  
    }  
[SecurityCritical]  
public class WebcamSecurityState : SecurityState  
{  
    public WebcamSecurityState(string description, WebcamSecurityOptions options)  
    {  
        Options = options;  
        Description = description;  
    }  
    public WebcamSecurityOptions Options { get; set; }  
    public string Description { get; set; }  
    public override void EnsureState()  
    {  
       if (!IsStateAvailable())  
           throw new ApplicationException("WebcamSecurityState not available");  
    }  
 }  
  
```  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 部分受信任的或透明代码不能使用此类。</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">继承者完全信任。 不能由部分受信任代码继承此类。</permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityState.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SecurityState();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.SecurityState" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
      </Docs>
    </Member>
    <Member MemberName="EnsureState">
      <MemberSignature Language="C#" Value="public abstract void EnsureState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityState.EnsureState" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub EnsureState ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void EnsureState();" />
      <MemberSignature Language="F#" Value="abstract member EnsureState : unit -&gt; unit" Usage="securityState.EnsureState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，确保由 <see cref="T:System.Security.SecurityState" /> 表示的状态在宿主上可用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法的实现应类似于下面的示例。  
  
```  
public override void EnsureState()  
{  
    if (!IsStateAvailable())  
          throw new ApplicationException("WebcamSecurityState not available");  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStateAvailable">
      <MemberSignature Language="C#" Value="public bool IsStateAvailable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStateAvailable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityState.IsStateAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Function IsStateAvailable () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStateAvailable();" />
      <MemberSignature Language="F#" Value="member this.IsStateAvailable : unit -&gt; bool" Usage="securityState.IsStateAvailable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Security.SecurityState" /> 类的此实现的状态是否在当前宿主上可用。</summary>
        <returns>如果状态可用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecurityState.IsStateAvailable%2A> 调用<xref:System.AppDomainManager.CheckSecuritySettings%2A?displayProperty=nameWithType>方法来确定此类表示的状态是否是主机上可用。  
  
 请参阅<xref:System.Security.SecurityState>类的实现示例<xref:System.AppDomainManager.CheckSecuritySettings%2A>方法。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
      </Docs>
    </Member>
  </Members>
</Type>