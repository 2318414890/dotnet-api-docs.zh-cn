<Type Name="IRecordSequence" FullName="System.IO.Log.IRecordSequence">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d561530c39638e8e109f6a6b52022d3f3e77384d" /><Meta Name="ms.sourcegitcommit" Value="9e3550fb2088d4faf2043f0acb29da4555519937" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/12/2018" /><Meta Name="ms.locfileid" Value="53290802" /></Metadata><TypeSignature Language="C#" Value="public interface IRecordSequence : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRecordSequence implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.IRecordSequence" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRecordSequence&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRecordSequence : IDisposable" />
  <TypeSignature Language="F#" Value="type IRecordSequence = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="949cd-101">提供一系列记录的泛型接口。</span><span class="sxs-lookup"><span data-stu-id="949cd-101">Provides a generic interface to a sequence of records.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-102"><xref:System.IO.Log.IRecordSequence> 接口提供了面向记录的流的抽象接口。</span><span class="sxs-lookup"><span data-stu-id="949cd-102">The <xref:System.IO.Log.IRecordSequence> interface provides an abstract interface to a record-oriented stream.</span></span> <span data-ttu-id="949cd-103"><xref:System.IO.Log.IRecordSequence> 实例可用于读取和写入日志记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-103">A <xref:System.IO.Log.IRecordSequence> instance can be used to read and write log records.</span></span>  
  
 <span data-ttu-id="949cd-104"><xref:System.IO.Log.IRecordSequence> 接口提供以下功能：</span><span class="sxs-lookup"><span data-stu-id="949cd-104">The <xref:System.IO.Log.IRecordSequence> interface provides the following capabilities,</span></span>  
  
-   <span data-ttu-id="949cd-105">使用 <xref:System.IO.Log.IRecordSequence.Append%2A> 方法追加日志记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-105">Append log records using the <xref:System.IO.Log.IRecordSequence.Append%2A> methods.</span></span>  
  
-   <span data-ttu-id="949cd-106">使用 <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> 方法读取追加的记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-106">Read the appended records using the <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> method.</span></span>  
  
-   <span data-ttu-id="949cd-107">使用 <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> 方法写入特殊的重新开始记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-107">Write a special restart record using the <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> method.</span></span>  
  
-   <span data-ttu-id="949cd-108">使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法从最近写入的重新开始记录中读取重新开始记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-108">Read restart records from the most recently written restart record using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
-   <span data-ttu-id="949cd-109">使用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法将记录刷新到持久存储区。</span><span class="sxs-lookup"><span data-stu-id="949cd-109">Flush the records to durable store using the  <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
-   <span data-ttu-id="949cd-110">为要追加的记录保留空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-110">Reserve space for appending records.</span></span>  
  
-   <span data-ttu-id="949cd-111">通过前调日志基数来释放日志空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-111">Free log space by advancing the base of the log.</span></span>  
  
-   <span data-ttu-id="949cd-112">接收 <xref:System.IO.Log.IRecordSequence.TailPinned> 事件通知，移动日志的基数以释放空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-112">Receive <xref:System.IO.Log.IRecordSequence.TailPinned> event notifications to move the base of the log to free space.</span></span>  
  
 <span data-ttu-id="949cd-113">日志记录被追加到 <xref:System.IO.Log.IRecordSequence> 实例，每条日志记录都分配有一个唯一的序号。</span><span class="sxs-lookup"><span data-stu-id="949cd-113">Log records are appended to a <xref:System.IO.Log.IRecordSequence> instance, and each log record is given a unique sequence number.</span></span> <span data-ttu-id="949cd-114">在给定的记录序列中，序号是严格递增的。</span><span class="sxs-lookup"><span data-stu-id="949cd-114">Sequence numbers are strictly monotonically increasing within a given record sequence.</span></span> <span data-ttu-id="949cd-115">日志记录由不透明数据组成，它们以字节数组段的 <xref:System.IO.Log.IRecordSequence> 的形式提供给 <xref:System.Collections.IList> 实例。</span><span class="sxs-lookup"><span data-stu-id="949cd-115">A log record consists of opaque data, supplied to the <xref:System.IO.Log.IRecordSequence> instance in an <xref:System.Collections.IList> of ArraySegments of bytes.</span></span>  
  
 <span data-ttu-id="949cd-116"><xref:System.IO.Log.IRecordSequence> 接口还公开一些基本属性，这些属性提供有关日志边界的信息。</span><span class="sxs-lookup"><span data-stu-id="949cd-116">The <xref:System.IO.Log.IRecordSequence> interface also exposes a few basic properties which provides information about log boundaries.</span></span>  
  
-   <span data-ttu-id="949cd-117"><xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> 属性包含记录序列中第一条有效记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-117">The <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> property contains the sequence number of the first valid record in the record sequence.</span></span>  
  
-   <span data-ttu-id="949cd-118"><xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A> 属性包含一个序列号，并且保证它大于最后追加的记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-118">The <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A> property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record.</span></span>  
  
-   <span data-ttu-id="949cd-119"><xref:System.IO.Log.IRecordSequence.RestartSequenceNumber%2A> 属性包含最后写入的重新开始区域的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-119">The <xref:System.IO.Log.IRecordSequence.RestartSequenceNumber%2A> property contains the sequence number of the last written restart area.</span></span>  
  
-   <span data-ttu-id="949cd-120"><xref:System.IO.Log.IRecordSequence.MaximumRecordLength%2A> 属性包含可以追加到序列或从序列中读取的最大记录的大小。</span><span class="sxs-lookup"><span data-stu-id="949cd-120">The <xref:System.IO.Log.IRecordSequence.MaximumRecordLength%2A> property contains the size of the largest record that can be appended to, or read from the sequence.</span></span>  
  
-   <span data-ttu-id="949cd-121"><xref:System.IO.Log.IRecordSequence.ReservedBytes%2A> 属性包含在此记录序列中做出的所有预留的总大小。</span><span class="sxs-lookup"><span data-stu-id="949cd-121">The <xref:System.IO.Log.IRecordSequence.ReservedBytes%2A> property contains the total size of all reservations made in this record sequence.</span></span>  
  
-   <span data-ttu-id="949cd-122">如果将 <xref:System.IO.Log.IRecordSequence.RetryAppend%2A> 属性设置为 `true`，且 <xref:System.IO.Log.IRecordSequence.Append%2A> 操作因为序列中没有空间而失败，则记录序列将尝试释放空间，然后重试追加操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-122">If the <xref:System.IO.Log.IRecordSequence.RetryAppend%2A> property is set to `true`, and an <xref:System.IO.Log.IRecordSequence.Append%2A> operation fails because there is no space in the sequence, the record sequence will attempt to free space, and retry the Append operation.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AdvanceBaseSequenceNumber">
      <MemberSignature Language="C#" Value="public void AdvanceBaseSequenceNumber (System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AdvanceBaseSequenceNumber(valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AdvanceBaseSequenceNumber (newBaseSequenceNumber As SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AdvanceBaseSequenceNumber(System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member AdvanceBaseSequenceNumber : System.IO.Log.SequenceNumber -&gt; unit" Usage="iRecordSequence.AdvanceBaseSequenceNumber newBaseSequenceNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="newBaseSequenceNumber"><span data-ttu-id="949cd-123">记录序列的新的基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-123">The new base sequence number of the record sequence.</span></span></param>
        <summary><span data-ttu-id="949cd-124">前移日志的基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-124">Moves the base sequence number of the log forward.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-125">在使用 <xref:System.IO.Log.LogRecordSequence> 实例并尝试前移序列号以释放日志中的空间时，新的基序列号必须位于不同的日志范围中，以便将前一个范围标记为空。</span><span class="sxs-lookup"><span data-stu-id="949cd-125">When you use a <xref:System.IO.Log.LogRecordSequence> instance and try to advance the sequence number to free up space in the log, the new base sequence number must reside in a different log extent for the previous extent to be marked as empty.</span></span> <span data-ttu-id="949cd-126">不支持部分释放范围。</span><span class="sxs-lookup"><span data-stu-id="949cd-126">Freeing extents partially is not supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-127"><paramref name="newBaseSequenceNumber" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-127"><paramref name="newBaseSequenceNumber" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="949cd-128"><paramref name="newBaseSequenceNumber" /> 没有在日志中激活。</span><span class="sxs-lookup"><span data-stu-id="949cd-128"><paramref name="newBaseSequenceNumber" /> is not active in the log.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-129">修改序列时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-129">An I/O error occurred while modifying the sequence.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-130">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-130">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-131">记录序列已满。</span><span class="sxs-lookup"><span data-stu-id="949cd-131">The record sequence is full.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="949cd-132">在派生类中重写时，向 <see cref="T:System.IO.Log.IRecordSequence" /> 写入一条日志记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-132">When overridden in a derived class, writes a log record to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="F#" Value="abstract member Append : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-133">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-133">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="949cd-134">用户指定顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-134">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="949cd-135">“上一个”顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-135">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="949cd-136"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的一个有效值，用于指定应如何写入数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-136">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <summary><span data-ttu-id="949cd-137">在派生类中重写时，向 <see cref="T:System.IO.Log.IRecordSequence" /> 写入一条日志记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-137">When overridden in a derived class, writes a log record to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="949cd-138">追加的日志记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-138">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-139">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-139">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-140">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-140">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-141">通常，此方法在写入记录之前完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-141">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="949cd-142">若要确保记录已写入，请使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 参数指定 `recordAppendOptions` 标志，或者调用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="949cd-142">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-143">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-143">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-144">追加记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-144">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-145">记录序列无法获得足够的可用空间来容纳新记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-145">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-146">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-146">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="F#" Value="abstract member Append : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-147">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-147">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="949cd-148">用户指定顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-148">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="949cd-149">“上一个”顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-149">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="949cd-150"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的一个有效值，用于指定应如何写入数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-150">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <summary><span data-ttu-id="949cd-151">在派生类中重写时，向 <see cref="T:System.IO.Log.IRecordSequence" /> 中追加一条日志记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-151">When overridden in a derived class, appends a log record to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="949cd-152">追加的日志记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-152">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-153">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-153">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-154">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-154">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-155">通常，此方法在写入记录之前完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-155">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="949cd-156">若要确保记录已写入，请使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 参数指定 `recordAppendOptions` 标志，或者调用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="949cd-156">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-157">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-157">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-158">追加记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-158">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-159">记录序列无法获得足够的可用空间来容纳新记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-159">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-160">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-160">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member Append : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-161">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-161">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="949cd-162">用户指定顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-162">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="949cd-163">“上一个”顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-163">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="949cd-164"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的一个有效值，用于指定应如何写入数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-164">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="949cd-165">一个 <see cref="T:System.IO.Log.ReservationCollection" />，它包含应当用于此记录的预留。</span><span class="sxs-lookup"><span data-stu-id="949cd-165">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <summary><span data-ttu-id="949cd-166">在派生类中重写时，将使用序列中先前保留的空间向 <see cref="T:System.IO.Log.IRecordSequence" /> 中追加一条日志记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-166">When overridden in a derived class, appends a log record to the <see cref="T:System.IO.Log.IRecordSequence" />, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="949cd-167">追加的日志记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-167">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-168">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-168">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-169">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-169">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-170">追加的记录将使用 `reservations` 参数指定的预留来占用先前已预留的空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-170">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="949cd-171">如果追加成功，它将占用能容纳数据的最小预留区域，而该预留区域将从集合中移除。</span><span class="sxs-lookup"><span data-stu-id="949cd-171">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="949cd-172">通常，此方法在写入记录之前完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-172">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="949cd-173">若要确保记录已写入，请使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 参数指定 `recordAppendOptions` 标志，或者调用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="949cd-173">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-174">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-174">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-175">追加记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-175">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-176">记录序列无法获得足够的可用空间来容纳新记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-176">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-177">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-177">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member Append : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-178">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-178">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="949cd-179">用户指定顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-179">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="949cd-180">“上一个”顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-180">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="949cd-181"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的一个有效值，用于指定应如何写入数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-181">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="949cd-182">一个 <see cref="T:System.IO.Log.ReservationCollection" />，它包含应当用于此记录的预留。</span><span class="sxs-lookup"><span data-stu-id="949cd-182">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <summary><span data-ttu-id="949cd-183">在派生类中重写时，将使用序列中先前保留的空间向 <see cref="T:System.IO.Log.IRecordSequence" /> 中追加一条日志记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-183">When overridden in a derived class, appends a log record to the <see cref="T:System.IO.Log.IRecordSequence" />, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="949cd-184">追加的日志记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-184">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-185">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-185">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-186">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-186">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-187">追加的记录将使用 `reservations` 参数指定的预留来占用先前已预留的空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-187">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="949cd-188">如果追加成功，它将占用能容纳数据的最小预留区域，而该预留区域将从集合中移除。</span><span class="sxs-lookup"><span data-stu-id="949cd-188">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="949cd-189">通常，此方法在写入记录之前完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-189">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="949cd-190">若要确保记录已写入，请使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 参数指定 `recordAppendOptions` 标志，或者调用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="949cd-190">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-191">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-191">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-192">追加记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-192">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-193">记录序列无法获得足够的可用空间来容纳新记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-193">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-194">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-194">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber BaseSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber BaseSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.BaseSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber BaseSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.IRecordSequence.BaseSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="949cd-195">在派生类中重写时，获取当前 <see cref="T:System.IO.Log.IRecordSequence" /> 中第一条有效记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-195">When overridden in a derived class, gets the sequence number of the first valid record in the current <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <value><span data-ttu-id="949cd-196">与 <see cref="T:System.IO.Log.IRecordSequence" /> 中的有效记录对应的最低序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-196">The lowest sequence number that corresponds to a valid record in the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-197">有效序列号大于或等于 <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> 且小于 <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>。</span><span class="sxs-lookup"><span data-stu-id="949cd-197">Valid sequence numbers are greater than or equal to <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>.</span></span>  
  
 <span data-ttu-id="949cd-198">此属性的值可以通过调用 <xref:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber%2A> 或 <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> 方法来更改。</span><span class="sxs-lookup"><span data-stu-id="949cd-198">The value of this property can be changed by calling the <xref:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber%2A> or <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-199">该属性是在序列已释放之后访问的。</span><span class="sxs-lookup"><span data-stu-id="949cd-199">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="949cd-200">在派生类中重写时，开始异步追加操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-200">When overridden in a derived class, begins an asynchronous append operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-201">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-201">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="949cd-202">用户指定顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-202">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="949cd-203">“上一个”顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-203">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="949cd-204"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的一个有效值，用于指定应如何写入数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-204">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="callback"><span data-ttu-id="949cd-205">可选的异步回调，在追加完成时调用。</span><span class="sxs-lookup"><span data-stu-id="949cd-205">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="949cd-206">用户提供的对象，用于将此特定异步追加请求与其他请求区别开来。</span><span class="sxs-lookup"><span data-stu-id="949cd-206">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="949cd-207">在派生类中重写时，开始异步追加操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-207">When overridden in a derived class, begins an asynchronous append operation.</span></span></summary>
        <returns><span data-ttu-id="949cd-208">一个 <see cref="T:System.IAsyncResult" />，它表示可能仍处于挂起状态的异步追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-208">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-209">应将此方法返回的 <xref:System.IAsyncResult> 传递给 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 方法，以确保追加操作完成并能够适当释放资源。</span><span class="sxs-lookup"><span data-stu-id="949cd-209">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="949cd-210">如果在异步追加过程中发生错误，则在使用此方法返回的 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 调用 <xref:System.IAsyncResult> 方法之前，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-210">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="949cd-211">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-211">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-212">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-212">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-213">通常，此方法在写入记录之前完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-213">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="949cd-214">若要确保记录已写入，请使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 参数指定 `recordAppendOptions` 标志，或者调用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="949cd-214">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-215">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-215">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-216">追加记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-216">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-217">记录序列无法获得足够的可用空间来容纳新记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-217">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-218">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-218">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-219">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-219">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="949cd-220">用户指定顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-220">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="949cd-221">“上一个”顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-221">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="949cd-222"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的一个有效值，用于指定应如何写入数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-222">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="callback"><span data-ttu-id="949cd-223">可选的异步回调，在追加完成时调用。</span><span class="sxs-lookup"><span data-stu-id="949cd-223">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="949cd-224">用户提供的对象，用于将此特定异步追加请求与其他请求区别开来。</span><span class="sxs-lookup"><span data-stu-id="949cd-224">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="949cd-225">在派生类中重写时，将使用序列中先前保留的空间来开始异步追加操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-225">When overridden in a derived class, begins an asynchronous append operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="949cd-226">一个 <see cref="T:System.IAsyncResult" />，它表示可能仍处于挂起状态的异步追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-226">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-227">应将此方法返回的 <xref:System.IAsyncResult> 传递给 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 方法，以确保追加操作完成并能够适当释放资源。</span><span class="sxs-lookup"><span data-stu-id="949cd-227">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="949cd-228">如果在异步追加过程中发生错误，则在使用此方法返回的 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 调用 <xref:System.IAsyncResult> 方法之前，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-228">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="949cd-229">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-229">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-230">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-230">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-231">通常，此方法在写入记录之前完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-231">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="949cd-232">若要确保记录已写入，请使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 参数指定 `recordAppendOptions` 标志，或者调用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="949cd-232">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-233">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-233">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-234">追加记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-234">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-235">记录序列无法获得足够的可用空间来容纳新记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-235">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-236">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-236">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-237">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-237">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="949cd-238">用户指定顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-238">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="949cd-239">“上一个”顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-239">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="949cd-240"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的一个有效值，用于指定应如何写入数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-240">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="949cd-241">一个 <see cref="T:System.IO.Log.ReservationCollection" />，它包含应当用于此记录的预留。</span><span class="sxs-lookup"><span data-stu-id="949cd-241">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <param name="callback"><span data-ttu-id="949cd-242">可选的异步回调，在追加完成时调用。</span><span class="sxs-lookup"><span data-stu-id="949cd-242">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="949cd-243">用户提供的对象，用于将此特定异步追加请求与其他请求区别开来。</span><span class="sxs-lookup"><span data-stu-id="949cd-243">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="949cd-244">在派生类中重写时，将使用序列中先前保留的空间来开始异步追加操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-244">When overridden in a derived class, begins an asynchronous append operation using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="949cd-245">一个 <see cref="T:System.IAsyncResult" />，它表示可能仍处于挂起状态的异步追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-245">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-246">应将此方法返回的 <xref:System.IAsyncResult> 传递给 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 方法，以确保追加操作完成并能够适当释放资源。</span><span class="sxs-lookup"><span data-stu-id="949cd-246">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="949cd-247">如果在异步追加过程中发生错误，则在使用此方法返回的 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 调用 <xref:System.IAsyncResult> 方法之前，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-247">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="949cd-248">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-248">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-249">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-249">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-250">追加的记录将使用 `reservations` 参数指定的预留来占用先前已预留的空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-250">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="949cd-251">如果追加成功，它将占用能容纳数据的最小预留区域，而该预留区域将从集合中移除。</span><span class="sxs-lookup"><span data-stu-id="949cd-251">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="949cd-252">通常，此方法在写入记录之前完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-252">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="949cd-253">若要确保记录已写入，请使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 参数指定 `recordAppendOptions` 标志，或者调用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="949cd-253">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-254">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-254">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-255">追加记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-255">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-256">记录序列无法获得足够的可用空间来容纳新记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-256">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-257">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-257">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousUndoRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousUndoRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousUndoRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousUndoRecord, recordAppendOptions, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-258">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-258">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="949cd-259">用户指定顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-259">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousUndoRecord"><span data-ttu-id="949cd-260">“上一个”顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-260">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="949cd-261"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的一个有效值，用于指定应如何写入数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-261">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservations"><span data-ttu-id="949cd-262">一个 <see cref="T:System.IO.Log.ReservationCollection" />，它包含应当用于此记录的预留。</span><span class="sxs-lookup"><span data-stu-id="949cd-262">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this record.</span></span></param>
        <param name="callback"><span data-ttu-id="949cd-263">可选的异步回调，在追加完成时调用。</span><span class="sxs-lookup"><span data-stu-id="949cd-263">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="949cd-264">用户提供的对象，用于将此特定异步追加请求与其他请求区别开来。</span><span class="sxs-lookup"><span data-stu-id="949cd-264">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="949cd-265">在派生类中重写时，将使用序列中先前保留的空间来开始异步追加操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-265">When overridden in a derived class, begins an asynchronous append operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="949cd-266">一个 <see cref="T:System.IAsyncResult" />，它表示可能仍处于挂起状态的异步追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-266">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous append, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-267">应将此方法返回的 <xref:System.IAsyncResult> 传递给 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 方法，以确保追加操作完成并能够适当释放资源。</span><span class="sxs-lookup"><span data-stu-id="949cd-267">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="949cd-268">如果在异步追加过程中发生错误，则在使用此方法返回的 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 调用 <xref:System.IAsyncResult> 方法之前，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-268">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="949cd-269">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-269">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-270">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-270">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-271">追加的记录将使用 `reservations` 参数指定的预留来占用先前已预留的空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-271">The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter.</span></span> <span data-ttu-id="949cd-272">如果追加成功，它将占用能容纳数据的最小预留区域，而该预留区域将从集合中移除。</span><span class="sxs-lookup"><span data-stu-id="949cd-272">If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.</span></span>  
  
 <span data-ttu-id="949cd-273">通常，此方法在写入记录之前完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-273">Normally, this method completes before the record has been written.</span></span> <span data-ttu-id="949cd-274">若要确保记录已写入，请使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 参数指定 `recordAppendOptions` 标志，或者调用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="949cd-274">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-275">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-275">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-276">追加记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-276">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-277">记录序列无法获得足够的可用空间来容纳新记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-277">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-278">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-278">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginFlush">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginFlush (System.IO.Log.SequenceNumber sequenceNumber, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginFlush(valuetype System.IO.Log.SequenceNumber sequenceNumber, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginFlush(System::IO::Log::SequenceNumber sequenceNumber, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginFlush : System.IO.Log.SequenceNumber * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginFlush (sequenceNumber, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber"><span data-ttu-id="949cd-279">必须写入的最新记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-279">The sequence number of the latest record that must be written.</span></span> <span data-ttu-id="949cd-280">如果此 <see cref="T:System.IO.Log.SequenceNumber" /> 无效，则必须写入所有记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-280">If this <see cref="T:System.IO.Log.SequenceNumber" /> is invalid, then all records must be written.</span></span></param>
        <param name="callback"><span data-ttu-id="949cd-281">可选的异步回调，在刷新完成时调用。</span><span class="sxs-lookup"><span data-stu-id="949cd-281">An optional asynchronous callback, to be called when the flush is complete.</span></span></param>
        <param name="state"><span data-ttu-id="949cd-282">用户提供的对象，用于将此特定异步刷新请求与其他请求区别开来。</span><span class="sxs-lookup"><span data-stu-id="949cd-282">A user-provided object that distinguishes this particular asynchronous flush request from other requests.</span></span></param>
        <summary><span data-ttu-id="949cd-283">在派生类中重写时，将使用序列中先前保留的空间来开始异步刷新操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-283">When overridden in a derived class, begins an asynchronous flush operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="949cd-284">一个 <see cref="T:System.IAsyncResult" />，表示可能仍处于挂起状态的异步刷新操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-284">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous flush operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-285">应将当前方法返回的 <xref:System.IAsyncResult> 传递给 <xref:System.IO.Log.IRecordSequence.EndFlush%2A> 方法，以确保刷新完成并适当释放资源。</span><span class="sxs-lookup"><span data-stu-id="949cd-285">You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.IRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately.</span></span> <span data-ttu-id="949cd-286">如果在异步刷新过程中发生错误，则在使用此方法返回的 <xref:System.IO.Log.IRecordSequence.EndFlush%2A> 调用 <xref:System.IAsyncResult> 方法之前，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-286">If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="949cd-287">调用此方法可以确保已追加到 <xref:System.IO.Log.IRecordSequence> 的所有记录都是持久写入的。</span><span class="sxs-lookup"><span data-stu-id="949cd-287">Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.IRecordSequence> are durably written.</span></span>  
  
 <span data-ttu-id="949cd-288">如果记录序列已经释放，或者如果传递了无效自变量，此操作内将立即引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-288">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="949cd-289">异步刷新请求过程中发生的错误（例如，I/O 请求过程中的磁盘故障）将导致在调用 <xref:System.IO.Log.IRecordSequence.EndFlush%2A> 方法时引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-289">Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndFlush%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-290">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-290">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-291">刷新数据时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-291">An I/O error occurred while flushing the data.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-292">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-292">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginReserveAndAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="949cd-293">在派生类中重写时，开始异步保留和追加操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-293">When overridden in a derived class, begins an asynchronous reserve and append operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReserveAndAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReserveAndAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReserveAndAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReserveAndAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, cli::array &lt;long&gt; ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReserveAndAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-294">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-294">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="949cd-295">用户指定顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-295">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="949cd-296">“上一个”顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-296">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="949cd-297"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的一个有效值，用于指定应如何写入数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-297">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="949cd-298">要在其中生成预留的预留集合。</span><span class="sxs-lookup"><span data-stu-id="949cd-298">The reservation collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="949cd-299">要生成的预留（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="949cd-299">The reservations to make, in bytes.</span></span></param>
        <param name="callback"><span data-ttu-id="949cd-300">可选的异步回调，在追加完成时调用。</span><span class="sxs-lookup"><span data-stu-id="949cd-300">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="949cd-301">用户提供的对象，用于将此特定异步追加请求与其他请求区别开来。</span><span class="sxs-lookup"><span data-stu-id="949cd-301">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="949cd-302">在派生类中重写时，开始异步保留和追加操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-302">When overridden in a derived class, begins an asynchronous reserve and append operation.</span></span></summary>
        <returns><span data-ttu-id="949cd-303">一个 <see cref="T:System.IAsyncResult" />，它表示可能仍处于挂起状态的当前异步操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-303">An <see cref="T:System.IAsyncResult" /> that represents this asynchronous operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-304">应将此方法返回的 <xref:System.IAsyncResult> 传递给 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 方法，以确保追加操作完成并能够适当释放资源。</span><span class="sxs-lookup"><span data-stu-id="949cd-304">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="949cd-305">如果在异步追加过程中发生错误，则在使用此方法返回的 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 调用 <xref:System.IAsyncResult> 方法之前，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-305">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="949cd-306">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-306">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-307">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-307">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-308">在原子操作中，使用记录追加操作将指定的预留添加到所提供的预留集合。</span><span class="sxs-lookup"><span data-stu-id="949cd-308">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="949cd-309">如果追加失败，将不保留任何空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-309">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="949cd-310">通常，此方法可以在写入记录之前完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-310">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="949cd-311">若要确保记录已写入，请使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 参数指定 `recordAppendOptions` 标志，或者调用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="949cd-311">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 <span data-ttu-id="949cd-312">如果记录序列已经释放，或者如果传递了无效自变量，此操作内将立即引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-312">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="949cd-313">异步追加请求过程中发生的错误（例如，I/O 请求过程中的磁盘故障）将导致在调用 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 方法时引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-313">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-314">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-314">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-315">追加记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-315">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-316">记录序列无法获得足够的可用空间来容纳新记录或生成预留。</span><span class="sxs-lookup"><span data-stu-id="949cd-316">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-317">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-317">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReserveAndAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReserveAndAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReserveAndAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReserveAndAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, cli::array &lt;long&gt; ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReserveAndAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-318">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-318">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="949cd-319">用户指定顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-319">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="949cd-320">“上一个”顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-320">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="949cd-321"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的一个有效值，用于指定应如何写入数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-321">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="949cd-322">要在其中生成预留的预留集合。</span><span class="sxs-lookup"><span data-stu-id="949cd-322">The reservation collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="949cd-323">要生成的预留（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="949cd-323">The reservations to make, in bytes.</span></span></param>
        <param name="callback"><span data-ttu-id="949cd-324">可选的异步回调，在追加完成时调用。</span><span class="sxs-lookup"><span data-stu-id="949cd-324">An optional asynchronous callback, to be called when the append is complete.</span></span></param>
        <param name="state"><span data-ttu-id="949cd-325">用户提供的对象，用于将此特定异步追加请求与其他请求区别开来。</span><span class="sxs-lookup"><span data-stu-id="949cd-325">A user-provided object that distinguishes this particular asynchronous append request from other requests.</span></span></param>
        <summary><span data-ttu-id="949cd-326">在派生类中重写时，开始异步保留和追加操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-326">When overridden in a derived class, begins an asynchronous reserve and append operation.</span></span></summary>
        <returns><span data-ttu-id="949cd-327">一个 <see cref="T:System.IAsyncResult" />，它表示可能仍处于挂起状态的当前异步操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-327">An <see cref="T:System.IAsyncResult" /> that represents this asynchronous operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-328">应将此方法返回的 <xref:System.IAsyncResult> 传递给 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 方法，以确保追加操作完成并能够适当释放资源。</span><span class="sxs-lookup"><span data-stu-id="949cd-328">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="949cd-329">如果在异步追加过程中发生错误，则在使用此方法返回的 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 调用 <xref:System.IAsyncResult> 方法之前，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-329">If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="949cd-330">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-330">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-331">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-331">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-332">在原子操作中，使用记录追加操作将指定的预留添加到所提供的预留集合。</span><span class="sxs-lookup"><span data-stu-id="949cd-332">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="949cd-333">如果追加失败，将不保留任何空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-333">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="949cd-334">通常，此方法可以在写入记录之前完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-334">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="949cd-335">若要确保记录已写入，请使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 参数指定 `recordAppendOptions` 标志，或者调用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="949cd-335">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 <span data-ttu-id="949cd-336">如果记录序列已经释放，或者如果传递了无效自变量，此操作内将立即引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-336">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="949cd-337">异步追加请求过程中发生的错误（例如，I/O 请求过程中的磁盘故障）将导致在调用 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 方法时引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-337">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-338">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-338">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-339">追加记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-339">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-340">记录序列无法获得足够的可用空间来容纳新记录或生成预留。</span><span class="sxs-lookup"><span data-stu-id="949cd-340">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-341">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-341">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginWriteRestartArea">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="949cd-342">在派生类中重写时，开始异步重新开始区域写入操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-342">When overridden in a derived class, begins an asynchronous restart area write operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginWriteRestartArea">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginWriteRestartArea (data, newBaseSequenceNumber, reservation, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-343">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-343">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="949cd-344">新的基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-344">The new base sequence number.</span></span> <span data-ttu-id="949cd-345">指定的序列号必须大于或等于当前基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-345">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="949cd-346">一个 <see cref="T:System.IO.Log.ReservationCollection" />，它包含应当用于此重新开始区域的预留。</span><span class="sxs-lookup"><span data-stu-id="949cd-346">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <param name="callback"><span data-ttu-id="949cd-347">可选的异步回调，在重新开始区域写入完成时调用。</span><span class="sxs-lookup"><span data-stu-id="949cd-347">An optional asynchronous callback, to be called when the restart area write is complete.</span></span></param>
        <param name="state"><span data-ttu-id="949cd-348">用户提供的对象，用于将此特定异步重新开始区域写入请求与其他请求区别开来。</span><span class="sxs-lookup"><span data-stu-id="949cd-348">A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.</span></span></param>
        <summary><span data-ttu-id="949cd-349">在派生类中重写时，将使用序列中先前保留的空间来开始异步重新开始区域写入操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-349">When overridden in a derived class, begins an asynchronous restart area write operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="949cd-350">一个 <see cref="T:System.IAsyncResult" />，它表示可能仍处于挂起状态的异步重新开始区域写入操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-350">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous restart area write operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-351">应将此方法返回的 <xref:System.IAsyncResult> 传递给 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 方法，以确保重新开始区域写入操作完成并能够适当释放资源。</span><span class="sxs-lookup"><span data-stu-id="949cd-351">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="949cd-352">如果在异步重新开始区域写入操作过程中发生错误，则在使用此方法返回的 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 调用 <xref:System.IAsyncResult> 方法之前，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-352">If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="949cd-353">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-353">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-354">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-354">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-355">操作成功完成时，基序列号已更新。</span><span class="sxs-lookup"><span data-stu-id="949cd-355">When the operation successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="949cd-356">其序列号小于新的基序列号的所有日志记录都不可访问。</span><span class="sxs-lookup"><span data-stu-id="949cd-356">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="949cd-357">如果指定了 <xref:System.IO.Log.ReservationCollection>，写入的重新开始区域将使用集合中包含的预留来占用先前已预留的空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-357">If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="949cd-358">如果该方法成功，它将占用能容纳数据的最小预留，而该预留将从集合中移除。</span><span class="sxs-lookup"><span data-stu-id="949cd-358">If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="949cd-359">如果记录序列已经释放，或者如果传递了无效自变量，此操作内将立即引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-359">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="949cd-360">异步追加请求过程中发生的错误（例如，I/O 请求过程中的磁盘故障）将导致在调用 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 方法时引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-360">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginWriteRestartArea">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginWriteRestartArea (data, newBaseSequenceNumber, reservation, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-361">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-361">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="949cd-362">新的基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-362">The new base sequence number.</span></span> <span data-ttu-id="949cd-363">指定的序列号必须大于或等于当前基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-363">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="949cd-364">一个 <see cref="T:System.IO.Log.ReservationCollection" />，它包含应当用于此重新开始区域的预留。</span><span class="sxs-lookup"><span data-stu-id="949cd-364">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <param name="callback"><span data-ttu-id="949cd-365">可选的异步回调，在重新开始区域写入完成时调用。</span><span class="sxs-lookup"><span data-stu-id="949cd-365">An optional asynchronous callback, to be called when the restart area write is complete.</span></span></param>
        <param name="state"><span data-ttu-id="949cd-366">用户提供的对象，用于将此特定异步重新开始区域写入请求与其他请求区别开来。</span><span class="sxs-lookup"><span data-stu-id="949cd-366">A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.</span></span></param>
        <summary><span data-ttu-id="949cd-367">在派生类中重写时，将使用序列中先前保留的空间来开始异步重新开始区域写入操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-367">When overridden in a derived class, begins an asynchronous restart area write operation, using space previously reserved in the sequence.</span></span></summary>
        <returns><span data-ttu-id="949cd-368">一个 <see cref="T:System.IAsyncResult" />，它表示可能仍处于挂起状态的异步重新开始区域写入操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-368">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous restart area write operation, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-369">应将此方法返回的 <xref:System.IAsyncResult> 传递给 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 方法，以确保重新开始区域写入操作完成并能够适当释放资源。</span><span class="sxs-lookup"><span data-stu-id="949cd-369">You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately.</span></span> <span data-ttu-id="949cd-370">如果在异步重新开始区域写入操作过程中发生错误，则在使用此方法返回的 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 调用 <xref:System.IAsyncResult> 方法之前，不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-370">If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.</span></span>  
  
 <span data-ttu-id="949cd-371">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-371">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-372">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-372">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-373">操作成功完成时，基序列号已更新。</span><span class="sxs-lookup"><span data-stu-id="949cd-373">When the operation successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="949cd-374">其序列号小于新的基序列号的所有日志记录都不可访问。</span><span class="sxs-lookup"><span data-stu-id="949cd-374">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="949cd-375">如果指定了 <xref:System.IO.Log.ReservationCollection>，写入的重新开始区域将使用集合中包含的预留来占用先前已预留的空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-375">If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="949cd-376">如果该方法成功，它将占用能容纳数据的最小预留，而该预留将从集合中移除。</span><span class="sxs-lookup"><span data-stu-id="949cd-376">If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="949cd-377">如果记录序列已经释放，或者如果传递了无效自变量，此操作内将立即引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-377">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="949cd-378">异步追加请求过程中发生的错误（例如，I/O 请求过程中的磁盘故障）将导致在调用 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 方法时引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-378">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-379">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-379">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-380">写入重新开始区域时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-380">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-381">记录序列无法获得足够的可用空间来容纳新记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-381">The record sequence could not make enough free space to contain the new record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-382">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-382">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReservationCollection">
      <MemberSignature Language="C#" Value="public System.IO.Log.ReservationCollection CreateReservationCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Log.ReservationCollection CreateReservationCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.CreateReservationCollection" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateReservationCollection () As ReservationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::ReservationCollection ^ CreateReservationCollection();" />
      <MemberSignature Language="F#" Value="abstract member CreateReservationCollection : unit -&gt; System.IO.Log.ReservationCollection" Usage="iRecordSequence.CreateReservationCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.ReservationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="949cd-383">在派生的类中重写时，创建一个新的 <see cref="T:System.IO.Log.ReservationCollection" />。</span><span class="sxs-lookup"><span data-stu-id="949cd-383">When overridden in a derived class, creates a new <see cref="T:System.IO.Log.ReservationCollection" />.</span></span></summary>
        <returns><span data-ttu-id="949cd-384">新创建的 <see cref="T:System.IO.Log.ReservationCollection" />。</span><span class="sxs-lookup"><span data-stu-id="949cd-384">The newly created <see cref="T:System.IO.Log.ReservationCollection" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-385">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-385">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndAppend (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndAppend(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAppend (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndAppend(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndAppend : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndAppend result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="949cd-386">对未完成的异步 I/O 请求的引用。</span><span class="sxs-lookup"><span data-stu-id="949cd-386">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="949cd-387">在派生类中重写时，结束异步追加操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-387">When overridden in a derived class, ends an asynchronous append operation.</span></span></summary>
        <returns><span data-ttu-id="949cd-388">追加的日志记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-388">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-389">此方法将一直阻塞，直到 I/O 操作已完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-389">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="949cd-390">调用 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 时，异步写入请求过程中发生的错误（例如，I/O 请求过程中的磁盘故障）将变得可见。</span><span class="sxs-lookup"><span data-stu-id="949cd-390">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndAppend%2A> is called.</span></span>  
  
 <span data-ttu-id="949cd-391">必须对 <xref:System.IAsyncResult> 方法返回的每个 <xref:System.IO.Log.IRecordSequence.BeginAppend%2A> 调用此方法且只能调用一次。</span><span class="sxs-lookup"><span data-stu-id="949cd-391">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginAppend%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-392">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-392">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-393">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-393">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndFlush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndFlush (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndFlush(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndFlush (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndFlush(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndFlush : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndFlush result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="949cd-394">对未完成的异步 I/O 请求的引用。</span><span class="sxs-lookup"><span data-stu-id="949cd-394">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="949cd-395">在派生类中重写时，结束异步刷新操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-395">When overridden in a derived class, ends an asynchronous flush operation.</span></span></summary>
        <returns><span data-ttu-id="949cd-396">写入的最新记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-396">The sequence number of the last record written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-397">此方法将一直阻塞，直到 I/O 操作已完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-397">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="949cd-398">调用 <xref:System.IO.Log.IRecordSequence.EndFlush%2A> 时，异步刷新请求过程中发生的错误（例如，I/O 请求过程中的磁盘故障）将变得可见。</span><span class="sxs-lookup"><span data-stu-id="949cd-398">Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndFlush%2A> is called.</span></span>  
  
 <span data-ttu-id="949cd-399">必须对 <xref:System.IAsyncResult> 方法返回的每个 <xref:System.IO.Log.IRecordSequence.BeginFlush%2A> 调用此方法且只能调用一次。</span><span class="sxs-lookup"><span data-stu-id="949cd-399">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginFlush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-400">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-400">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-401">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-401">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndReserveAndAppend (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndReserveAndAppend(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReserveAndAppend (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndReserveAndAppend(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReserveAndAppend : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndReserveAndAppend result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="949cd-402">对未完成的异步 I/O 请求的引用。</span><span class="sxs-lookup"><span data-stu-id="949cd-402">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="949cd-403">在派生类中重写时，结束异步保留和追加操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-403">When overridden in a derived class, ends an asynchronous reserve and append operation.</span></span></summary>
        <returns><span data-ttu-id="949cd-404">追加的日志记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-404">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-405">此方法将一直阻塞，直到 I/O 操作已完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-405">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="949cd-406">调用 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 时，异步写入请求过程中发生的错误（例如，I/O 请求过程中的磁盘故障）将变得可见。</span><span class="sxs-lookup"><span data-stu-id="949cd-406">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> is called.</span></span>  
  
 <span data-ttu-id="949cd-407">必须对 <xref:System.IAsyncResult> 方法返回的每个 <xref:System.IO.Log.IRecordSequence.BeginReserveAndAppend%2A> 调用此方法且只能调用一次。</span><span class="sxs-lookup"><span data-stu-id="949cd-407">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginReserveAndAppend%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-408">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-408">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-409">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-409">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndWriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndWriteRestartArea (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndWriteRestartArea(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWriteRestartArea (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndWriteRestartArea(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWriteRestartArea : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndWriteRestartArea result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="949cd-410">对未完成的异步 I/O 请求的引用。</span><span class="sxs-lookup"><span data-stu-id="949cd-410">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="949cd-411">在派生类中重写时，结束异步重新开始区域写入操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-411">When overridden in a derived class, ends an asynchronous restart area write operation.</span></span></summary>
        <returns><span data-ttu-id="949cd-412">写入的日志记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-412">The sequence number of the written log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-413">此方法将一直阻塞，直到 I/O 操作已完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-413">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="949cd-414">调用 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 时，异步写入请求过程中发生的错误（例如，I/O 请求过程中的磁盘故障）将变得可见。</span><span class="sxs-lookup"><span data-stu-id="949cd-414">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> is called.</span></span>  
  
 <span data-ttu-id="949cd-415">必须对 <xref:System.IAsyncResult> 方法返回的每个 <xref:System.IO.Log.IRecordSequence.BeginWriteRestartArea%2A> 调用此方法且只能调用一次。</span><span class="sxs-lookup"><span data-stu-id="949cd-415">This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.IRecordSequence.BeginWriteRestartArea%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-416">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-416">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-417">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-417">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="949cd-418">在派生类中重写时，导致写入追加的记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-418">When overridden in a derived class, causes appended records to be written.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Function Flush () As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="949cd-419">在派生类中重写时，确保所有追加的记录都已写入。</span><span class="sxs-lookup"><span data-stu-id="949cd-419">When overridden in a derived class, ensures that all appended records have been written.</span></span></summary>
        <returns><span data-ttu-id="949cd-420">写入的最新记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-420">The sequence number of the last record written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-421">调用此方法可以确保已追加到 <xref:System.IO.Log.IRecordSequence> 的所有记录都已持久写入。</span><span class="sxs-lookup"><span data-stu-id="949cd-421">Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.IRecordSequence> have been durably written.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-422">刷新数据时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-422">An I/O error occurred while flushing the data.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-423">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-423">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Flush (System.IO.Log.SequenceNumber sequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Flush(valuetype System.IO.Log.SequenceNumber sequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Flush(System::IO::Log::SequenceNumber sequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member Flush : System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Flush sequenceNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber"><span data-ttu-id="949cd-424">必须写入的最新记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-424">The sequence number of the latest record that must be written.</span></span> <span data-ttu-id="949cd-425">如果此 <see cref="T:System.IO.Log.SequenceNumber" /> 无效，则必须写入所有记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-425">If this <see cref="T:System.IO.Log.SequenceNumber" /> is invalid, then all records must be written.</span></span></param>
        <summary><span data-ttu-id="949cd-426">在派生类中重写时，确保其序列号不高于指定序列号的所有记录都已持久写入。</span><span class="sxs-lookup"><span data-stu-id="949cd-426">When overridden in a derived class, ensures that all appended records up to and including the record with the specified sequence number have been durably written.</span></span></summary>
        <returns><span data-ttu-id="949cd-427">写入的最新记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-427">The sequence number of the last record written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-428">调用此方法可以确保序列号不高于指定序列号的所有记录都已持久写入。</span><span class="sxs-lookup"><span data-stu-id="949cd-428">Calling this method ensures that all records with sequence numbers up to and including the specified sequence number have been durably written.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-429">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-429">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-430">刷新数据时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-430">An I/O error occurred while flushing the data.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-431">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-431">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LastSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber LastSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber LastSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.LastSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber LastSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.LastSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.IRecordSequence.LastSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="949cd-432">在派生类中重写时，获取比追加的最新记录大的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-432">When overridden in a derived class, gets the sequence number which is greater than the last record appended.</span></span></summary>
        <value><span data-ttu-id="949cd-433">比追加的最新记录大的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-433">A sequence number which is greater than the last record appended.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-434">此属性包含一个序列号，并且保证它大于最后追加的记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-434">This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record.</span></span> <span data-ttu-id="949cd-435">有效序列号大于或等于 <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> 且小于 <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>。</span><span class="sxs-lookup"><span data-stu-id="949cd-435">Valid sequence numbers are greater than or equal to <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="949cd-436">使用 <xref:System.IO.Log.LogRecordSequence> 实例时，在将记录刷新到日志之前，<xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A> 值可能会过期。</span><span class="sxs-lookup"><span data-stu-id="949cd-436">When using a <xref:System.IO.Log.LogRecordSequence> instance, the <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A> value can become out of date until records are flushed to the log.</span></span> <span data-ttu-id="949cd-437">请参阅<xref:System.IO.Log.IRecordSequence.Flush%2A>和<xref:System.IO.Log.RecordAppendOptions>有关刷新记录的详细信息。</span><span class="sxs-lookup"><span data-stu-id="949cd-437">See <xref:System.IO.Log.IRecordSequence.Flush%2A> and <xref:System.IO.Log.RecordAppendOptions> for more information on flushing records.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-438">该属性是在序列已释放之后访问的。</span><span class="sxs-lookup"><span data-stu-id="949cd-438">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumRecordLength">
      <MemberSignature Language="C#" Value="public long MaximumRecordLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumRecordLength" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.MaximumRecordLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumRecordLength As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumRecordLength { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MaximumRecordLength : int64" Usage="System.IO.Log.IRecordSequence.MaximumRecordLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="949cd-439">在派生类中重写时，获取可以追加到此序列或者从此序列中读取的最大记录的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="949cd-439">When overridden in a derived class, gets the size of the largest record that can be appended to or read from this sequence, in bytes.</span></span></summary>
        <value><span data-ttu-id="949cd-440">可以追加到此序列或者从此序列中读取的最大记录的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="949cd-440">The size of the largest record that can be appended to or read from this sequence, in bytes.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-441">该属性是在序列已释放之后访问的。</span><span class="sxs-lookup"><span data-stu-id="949cd-441">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLogRecords">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt; ReadLogRecords (System.IO.Log.SequenceNumber start, System.IO.Log.LogRecordEnumeratorType logRecordEnum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogRecord&gt; ReadLogRecords(valuetype System.IO.Log.SequenceNumber start, valuetype System.IO.Log.LogRecordEnumeratorType logRecordEnum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLogRecords (start As SequenceNumber, logRecordEnum As LogRecordEnumeratorType) As IEnumerable(Of LogRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogRecord ^&gt; ^ ReadLogRecords(System::IO::Log::SequenceNumber start, System::IO::Log::LogRecordEnumeratorType logRecordEnum);" />
      <MemberSignature Language="F#" Value="abstract member ReadLogRecords : System.IO.Log.SequenceNumber * System.IO.Log.LogRecordEnumeratorType -&gt; seq&lt;System.IO.Log.LogRecord&gt;" Usage="iRecordSequence.ReadLogRecords (start, logRecordEnum)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="logRecordEnum" Type="System.IO.Log.LogRecordEnumeratorType" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="949cd-442">读取操作开始处的第一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-442">The sequence number of the first record where the reading starts.</span></span></param>
        <param name="logRecordEnum"><span data-ttu-id="949cd-443">一个有效的 <see cref="T:System.IO.Log.LogRecordEnumeratorType" /> 值，该值指定从 <see cref="T:System.IO.Log.LogRecordSequence" /> 中读取记录的方式（即，向前或向后）。</span><span class="sxs-lookup"><span data-stu-id="949cd-443">A valid <see cref="T:System.IO.Log.LogRecordEnumeratorType" /> value that specifies the manner (that is, forward or backward) in which records should be read from a <see cref="T:System.IO.Log.LogRecordSequence" />.</span></span></param>
        <summary><span data-ttu-id="949cd-444">在派生类中重写时，返回序列中记录的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="949cd-444">When overridden in a derived class, returns an enumerable collection of records in the sequence.</span></span></summary>
        <returns><span data-ttu-id="949cd-445">序列中记录的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="949cd-445">An enumerable collection of records in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-446">在派生类中重写时，返回序列中记录的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="949cd-446">When overridden in a derived class, returns an enumerable collection of records in the sequence.</span></span> <span data-ttu-id="949cd-447">所枚举记录的顺序取决于 `logRecordEnum` 参数的值。</span><span class="sxs-lookup"><span data-stu-id="949cd-447">The order of the enumerated records depends on the value of the `logRecordEnum` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="949cd-448">以下示例演示了 <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="949cd-448">This sample demonstrates the use of the <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> method.</span></span>  
  
```csharp  
using System;  
 using System.IO;  
 using System.IO.Log;  
  
 class ReadRecordsSample  
 {  
     static SequenceNumber AppendRecord(IRecordSequence sequence,  
                                        string message,  
                                        SequenceNumber user,  
                                        SequenceNumber previous)  
     {  
         MemoryStream data = new MemoryStream();  
         BinaryWriter writer = new BinaryWriter(data);  
         writer.Write(message);  
  
         ArraySegment<byte>[] segments;  
         segments = new ArraySegment<byte>[1];  
         segments[0] = new ArraySegment(data.GetBuffer(),  
                                        0,  
                                        Data.Length);  
  
         return sequence.Append(segments,  
                                user,  
                                previous,  
                                WriteFlags.None);  
     }  
  
     public static void Main(string[] args)  
     {  
         IRecordSequence sequence;  
         sequence = new FileIRecordSequence(args[0]);  
  
         SequenceNumber a, b, c, d;  
  
         a = AppendRecord(sequence,  
                          "This is record A",  
                          SequenceNumber.Invalid,  
                          SequenceNumber.Invalid);  
         Console.WriteLine("Record A has sequence number System.IO.Log", a);  
  
         b = AppendRecord(sequence,  
                          "This is record B",  
                          a,  
                          a);  
         Console.WriteLine("Record B has sequence number System.IO.Log", b);  
  
         c = AppendRecord(sequence,  
                          "This is record C",  
                          a,  
                          a);  
         Console.WriteLine("Record C has sequence number System.IO.Log", c);  
  
         d = AppendRecord(sequence,  
                          "This is record D",  
                          b,  
                          c);  
         Console.WriteLine("Record D has sequence number System.IO.Log", d);  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(a, ReadDirection.Forward))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine("System.IO.Log: T:System.IO.Log.IRecordSequence",  
                               record.SequenceNumber,  
                               reader.ReadString());  
         }  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(d, ReadDirection.User))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine("System.IO.Log: T:System.IO.Log.IRecordSequence",  
                               record.SequenceNumber,  
                               reader.ReadString());  
         }  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(d, ReadDirection.Previous))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine("System.IO.Log: T:System.IO.Log.IRecordSequence",  
                               record.SequenceNumber,  
                               reader.ReadString());  
         }  
     }  
       }  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-449">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-449">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-450">读取记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-450">An I/O error occurred while reading the record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-451">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-451">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadRestartAreas">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt; ReadRestartAreas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogRecord&gt; ReadRestartAreas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReadRestartAreas" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadRestartAreas () As IEnumerable(Of LogRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogRecord ^&gt; ^ ReadRestartAreas();" />
      <MemberSignature Language="F#" Value="abstract member ReadRestartAreas : unit -&gt; seq&lt;System.IO.Log.LogRecord&gt;" Usage="iRecordSequence.ReadRestartAreas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="949cd-452">在派生类中重写时，返回序列中重新开始区域的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="949cd-452">When overridden in a derived class, returns an enumerable collection of the restart areas in the sequence.</span></span></summary>
        <returns><span data-ttu-id="949cd-453">序列中重新开始区域的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="949cd-453">An enumerable collection of the restart areas in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-454">重新开始区域按序列号的倒序枚举，即从最高序列号到最低序列号枚举。</span><span class="sxs-lookup"><span data-stu-id="949cd-454">The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number.</span></span> <span data-ttu-id="949cd-455">仅枚举序列号介于最后一个序列号和基序列号之间的重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-455">Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="949cd-456">如果包含 <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> 的日志范围损坏，此方法会引发 <xref:System.IO.IOException>，且显示错误消息“由于意外的 I/O 异常，无法执行请求。</span><span class="sxs-lookup"><span data-stu-id="949cd-456">If the log extent containing the <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> becomes corrupted, this method can throw an <xref:System.IO.IOException> with the error message "The request could not be performed because of an unexpected I/O exception.</span></span> <span data-ttu-id="949cd-457">返回以下错误代码:‘80070026’”。</span><span class="sxs-lookup"><span data-stu-id="949cd-457">The following error code was returned: '80070026'".</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-458">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-458">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-459">读取记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-459">An I/O error occurred while reading the record.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-460">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-460">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReserveAndAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="949cd-461">在派生类中重写时，自动生成一个预留，并向序列中追加一条记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-461">When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber ReserveAndAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, params long[] reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber ReserveAndAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber ReserveAndAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, ... cli::array &lt;long&gt; ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member ReserveAndAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.ReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-462">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-462">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="949cd-463">用户指定顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-463">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="949cd-464">“上一个”顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-464">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="949cd-465"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的一个有效值，用于指定应如何写入数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-465">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="949cd-466">一个 <see cref="T:System.IO.Log.ReservationCollection" />，它包含要在其中生成预留的集合。</span><span class="sxs-lookup"><span data-stu-id="949cd-466">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="949cd-467">要生成的预留（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="949cd-467">The reservations to make, in bytes.</span></span></param>
        <summary><span data-ttu-id="949cd-468">在派生类中重写时，自动生成一个预留，并向序列中追加一条记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-468">When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</span></span></summary>
        <returns><span data-ttu-id="949cd-469">追加的日志记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-469">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-470">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-470">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-471">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-471">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-472">在原子操作中，使用记录追加操作将指定的预留添加到所提供的预留集合。</span><span class="sxs-lookup"><span data-stu-id="949cd-472">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="949cd-473">如果追加失败，将不保留任何空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-473">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="949cd-474">通常，此方法可以在写入记录之前完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-474">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="949cd-475">若要确保记录已写入，请使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 参数指定 `recordAppendOptions` 标志，或者调用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="949cd-475">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-476">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-476">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-477">追加记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-477">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-478">记录序列无法获得足够的可用空间来容纳新记录或生成预留。</span><span class="sxs-lookup"><span data-stu-id="949cd-478">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-479">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-479">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber ReserveAndAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, params long[] reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber ReserveAndAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber ReserveAndAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, ... cli::array &lt;long&gt; ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member ReserveAndAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.ReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-480">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-480">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="nextUndoRecord"><span data-ttu-id="949cd-481">用户指定顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-481">The sequence number of the next record in the user-specified order.</span></span></param>
        <param name="previousRecord"><span data-ttu-id="949cd-482">“上一个”顺序中下一条记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-482">The sequence number of the next record in Previous order.</span></span></param>
        <param name="recordAppendOptions"><span data-ttu-id="949cd-483"><see cref="T:System.IO.Log.RecordAppendOptions" /> 的一个有效值，用于指定应如何写入数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-483">A valid value of <see cref="T:System.IO.Log.RecordAppendOptions" /> that specifies how the data should be written.</span></span></param>
        <param name="reservationCollection"><span data-ttu-id="949cd-484">要在其中生成预留的预留集合。</span><span class="sxs-lookup"><span data-stu-id="949cd-484">The reservation collection to make reservations in.</span></span></param>
        <param name="reservations"><span data-ttu-id="949cd-485">要生成的预留（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="949cd-485">The reservations to make, in bytes.</span></span></param>
        <summary><span data-ttu-id="949cd-486">在派生类中重写时，自动生成一个预留，并向序列中追加一条记录。</span><span class="sxs-lookup"><span data-stu-id="949cd-486">When overridden in a derived class, automatically makes a single reservation and appends a record to the sequence.</span></span></summary>
        <returns><span data-ttu-id="949cd-487">追加的日志记录的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-487">The sequence number of the appended log record.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-488">包含在 `data` 参数中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-488">Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-489">但在读取记录时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-489">However, no provision is made for splitting data back into array segments when the record is read.</span></span>  
  
 <span data-ttu-id="949cd-490">在原子操作中，使用记录追加操作将指定的预留添加到所提供的预留集合。</span><span class="sxs-lookup"><span data-stu-id="949cd-490">The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.</span></span> <span data-ttu-id="949cd-491">如果追加失败，将不保留任何空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-491">If the append fails, no space is reserved.</span></span>  
  
 <span data-ttu-id="949cd-492">通常，此方法可以在写入记录之前完成。</span><span class="sxs-lookup"><span data-stu-id="949cd-492">Normally, this method may complete before the record has been written.</span></span> <span data-ttu-id="949cd-493">若要确保记录已写入，请使用 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 参数指定 `recordAppendOptions` 标志，或者调用 <xref:System.IO.Log.IRecordSequence.Flush%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="949cd-493">To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-494">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-494">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-495">追加记录时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-495">An I/O error occurred while appending the record.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-496">记录序列无法获得足够的可用空间来容纳新记录或生成预留。</span><span class="sxs-lookup"><span data-stu-id="949cd-496">The record sequence could not make enough free space to contain the new record, or to make the reservation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-497">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-497">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReservedBytes">
      <MemberSignature Language="C#" Value="public long ReservedBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReservedBytes" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.ReservedBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReservedBytes As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReservedBytes { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ReservedBytes : int64" Usage="System.IO.Log.IRecordSequence.ReservedBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="949cd-498">在派生类中重写时，获取已保留的总字节数。</span><span class="sxs-lookup"><span data-stu-id="949cd-498">When overridden in a derived class, gets the total number of bytes that have been reserved.</span></span></summary>
        <value><span data-ttu-id="949cd-499">此记录序列中做出的所有预留的总大小。</span><span class="sxs-lookup"><span data-stu-id="949cd-499">The total size of all reservations made in this record sequence.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-500">该属性是在序列已释放之后访问的。</span><span class="sxs-lookup"><span data-stu-id="949cd-500">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RestartSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber RestartSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber RestartSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.RestartSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestartSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber RestartSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.RestartSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.IRecordSequence.RestartSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="949cd-501">在派生类中重写时，获取最近写入的重新开始区域的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-501">When overridden in a derived class, gets the sequence number of the most recently written restart area.</span></span></summary>
        <value><span data-ttu-id="949cd-502">最近写入的重新开始区域的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-502">The sequence number of the most recently written restart area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-503">重新开始区域用于临时存储包含客户端最后一次检查点操作的信息。</span><span class="sxs-lookup"><span data-stu-id="949cd-503">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="949cd-504">需要恢复时，可以分析重新开始区域，以检索最后一次检查点操作中的所有数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-504">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="949cd-505">这些数据将初始化事务表、脏页表和打开文件表，以便它们能够用于恢复过程。</span><span class="sxs-lookup"><span data-stu-id="949cd-505">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-506">该属性是在序列已释放之后访问的。</span><span class="sxs-lookup"><span data-stu-id="949cd-506">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RetryAppend">
      <MemberSignature Language="C#" Value="public bool RetryAppend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RetryAppend" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.RetryAppend" />
      <MemberSignature Language="VB.NET" Value="Public Property RetryAppend As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RetryAppend { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RetryAppend : bool with get, set" Usage="System.IO.Log.IRecordSequence.RetryAppend" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="949cd-507">获取或设置一个值，该值指示如果日志已满，是否自动重试追加操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-507">Gets or sets a value indicating whether appends are automatically retried if the log is full.</span></span></summary>
        <value><span data-ttu-id="949cd-508">如果在日志已满时自动重试追加操作，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="949cd-508"><see langword="true" /> if appends are automatically retried if the log is full; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="949cd-509">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="949cd-509">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-510">如果此属性的值为 `true`，且 <xref:System.IO.Log.IRecordSequence.Append%2A> 调用因为序列中没有足够的空间而失败，则记录序列将尝试释放空间，然后重试追加操作。</span><span class="sxs-lookup"><span data-stu-id="949cd-510">If the value of this property is `true`, and an <xref:System.IO.Log.IRecordSequence.Append%2A> call fails because there is not enough space in the sequence, the record sequence will try to free space and retry the append.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-511">该属性是在序列已释放之后访问的。</span><span class="sxs-lookup"><span data-stu-id="949cd-511">The property was accessed after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TailPinned">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; TailPinned;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IO.Log.TailPinnedEventArgs&gt; TailPinned" />
      <MemberSignature Language="DocId" Value="E:System.IO.Log.IRecordSequence.TailPinned" />
      <MemberSignature Language="VB.NET" Value="Event TailPinned As EventHandler(Of TailPinnedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IO::Log::TailPinnedEventArgs ^&gt; ^ TailPinned;" />
      <MemberSignature Language="F#" Value="member this.TailPinned : EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; " Usage="member this.TailPinned : System.EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="949cd-512">当记录序列确定必须前移尾数据时发生。</span><span class="sxs-lookup"><span data-stu-id="949cd-512">Occurs when the record sequence determines that the tail must be moved forward.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-513">可以在记录序列空间不足时激发此事件。</span><span class="sxs-lookup"><span data-stu-id="949cd-513">You can fire this event when the record sequence has run out of space.</span></span> <span data-ttu-id="949cd-514">此事件激发时，序列的尾数据（即基序列号）将前移以释放空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-514">When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRestartArea">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="949cd-515">在派生类中重写时，向 <see cref="T:System.IO.Log.IRecordSequence" /> 中写入一个重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-515">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-516">重新开始区域用于临时存储包含客户端最后一次检查点操作的信息。</span><span class="sxs-lookup"><span data-stu-id="949cd-516">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="949cd-517">需要恢复时，可以分析重新开始区域，以检索最后一次检查点操作中的所有数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-517">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="949cd-518">这些数据将初始化事务表、脏页表和打开文件表，以便它们能够用于恢复过程。</span><span class="sxs-lookup"><span data-stu-id="949cd-518">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="949cd-519">可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法来读取重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-519">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte)) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-520">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-520">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <summary><span data-ttu-id="949cd-521">在派生类中重写时，向 <see cref="T:System.IO.Log.IRecordSequence" /> 中写入一个重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-521">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="949cd-522">写入的重新开始区域的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-522">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-523">重新开始区域用于临时存储包含客户端最后一次检查点操作的信息。</span><span class="sxs-lookup"><span data-stu-id="949cd-523">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="949cd-524">公用日志文件系统 (CLFS) 维护两个重新开始区域，以确保至少有一个有效区域总是可用。</span><span class="sxs-lookup"><span data-stu-id="949cd-524">The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available.</span></span> <span data-ttu-id="949cd-525">需要恢复时，CLFS 读取自己的重新开始区域和最后一个检查点操作中的所有数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-525">When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation.</span></span> <span data-ttu-id="949cd-526">这些数据将初始化事务表、脏页表和打开文件表，以便它们能够用于恢复过程。</span><span class="sxs-lookup"><span data-stu-id="949cd-526">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span>  
  
 <span data-ttu-id="949cd-527">可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法来读取重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-527">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="949cd-528">字节数组段中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-528">The data in the byte array segments will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-529">在读取重新开始区域时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-529">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-530">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-530">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-531">写入重新开始区域时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-531">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-532">记录序列无法获得足够的可用空间来容纳新的重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-532">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-533">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-533">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte))) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-534">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-534">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <summary><span data-ttu-id="949cd-535">在派生类中重写时，向 <see cref="T:System.IO.Log.IRecordSequence" /> 中写入一个重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-535">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" />.</span></span></summary>
        <returns><span data-ttu-id="949cd-536">写入的重新开始区域的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-536">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-537">重新开始区域用于临时存储包含客户端最后一次检查点操作的信息。</span><span class="sxs-lookup"><span data-stu-id="949cd-537">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="949cd-538">需要恢复时，可以分析重新开始区域，以检索最后一次检查点操作中的所有数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-538">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="949cd-539">这些数据将初始化事务表、脏页表和打开文件表，以便它们能够用于恢复过程。</span><span class="sxs-lookup"><span data-stu-id="949cd-539">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="949cd-540">可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法来读取重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-540">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="949cd-541">字节数组段中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-541">The data in the byte array segments will be concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-542">在读取重新开始区域时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-542">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-543">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-543">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-544">写入重新开始区域时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-544">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-545">记录序列无法获得足够的可用空间来容纳新的重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-545">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-546">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-546">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-547">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-547">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="949cd-548">新的基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-548">The new base sequence number.</span></span> <span data-ttu-id="949cd-549">指定的序列号必须大于或等于当前基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-549">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <summary><span data-ttu-id="949cd-550">在派生类中重写时，向 <see cref="T:System.IO.Log.IRecordSequence" /> 中写入一个重新开始区域，并更新基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-550">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> and updates the base sequence number</span></span></summary>
        <returns><span data-ttu-id="949cd-551">写入的重新开始区域的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-551">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-552">重新开始区域用于临时存储包含客户端最后一次检查点操作的信息。</span><span class="sxs-lookup"><span data-stu-id="949cd-552">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="949cd-553">需要恢复时，可以分析重新开始区域，以检索最后一次检查点操作中的所有数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-553">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="949cd-554">这些数据将初始化事务表、脏页表和打开文件表，以便它们能够用于恢复过程。</span><span class="sxs-lookup"><span data-stu-id="949cd-554">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="949cd-555">可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法来读取重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-555">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="949cd-556">写入重新开始区域时，字节数组段中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-556">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-557">在读取重新开始区域时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-557">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="949cd-558">此方法成功完成时，基序列号已更新。</span><span class="sxs-lookup"><span data-stu-id="949cd-558">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="949cd-559">其序列号小于新的基序列号的所有日志记录都不可访问。</span><span class="sxs-lookup"><span data-stu-id="949cd-559">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-560">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-560">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-561">写入重新开始区域时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-561">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-562">记录序列无法获得足够的可用空间来容纳新的重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-562">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-563">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-563">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-564">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-564">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="949cd-565">新的基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-565">The new base sequence number.</span></span> <span data-ttu-id="949cd-566">指定的序列号必须大于或等于当前基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-566">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <summary><span data-ttu-id="949cd-567">在派生类中重写时，向 <see cref="T:System.IO.Log.IRecordSequence" /> 中写入一个重新开始区域，并更新基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-567">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> and updates the base sequence number.</span></span></summary>
        <returns><span data-ttu-id="949cd-568">写入的重新开始区域的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-568">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-569">重新开始区域用于临时存储包含客户端最后一次检查点操作的信息。</span><span class="sxs-lookup"><span data-stu-id="949cd-569">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="949cd-570">需要恢复时，可以分析重新开始区域，以检索最后一次检查点操作中的所有数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-570">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="949cd-571">这些数据将初始化事务表、脏页表和打开文件表，以便它们能够用于恢复过程。</span><span class="sxs-lookup"><span data-stu-id="949cd-571">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="949cd-572">可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法来读取重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-572">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="949cd-573">写入重新开始区域时，字节数组段中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-573">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-574">在读取重新开始区域时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-574">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="949cd-575">此方法成功完成时，基序列号已更新。</span><span class="sxs-lookup"><span data-stu-id="949cd-575">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="949cd-576">其序列号小于新的基序列号的所有日志记录都不可访问。</span><span class="sxs-lookup"><span data-stu-id="949cd-576">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-577">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-577">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-578">写入重新开始区域时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-578">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-579">记录序列无法获得足够的可用空间来容纳新的重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-579">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-580">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-580">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber, reservation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-581">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-581">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="949cd-582">新的基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-582">The new base sequence number.</span></span> <span data-ttu-id="949cd-583">指定的序列号必须大于或等于当前基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-583">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="949cd-584">一个 <see cref="T:System.IO.Log.ReservationCollection" />，它包含应当用于此重新开始区域的预留。</span><span class="sxs-lookup"><span data-stu-id="949cd-584">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <summary><span data-ttu-id="949cd-585">在派生类中重写时，利用预留向 <see cref="T:System.IO.Log.IRecordSequence" /> 中写入一个重新开始区域，并更新基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-585">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> using a reservation, and updates the base sequence number</span></span></summary>
        <returns><span data-ttu-id="949cd-586">写入的重新开始区域的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-586">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-587">重新开始区域用于临时存储包含客户端最后一次检查点操作的信息。</span><span class="sxs-lookup"><span data-stu-id="949cd-587">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="949cd-588">需要恢复时，可以分析重新开始区域，以检索最后一次检查点操作中的所有数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-588">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="949cd-589">这些数据将初始化事务表、脏页表和打开文件表，以便它们能够用于恢复过程。</span><span class="sxs-lookup"><span data-stu-id="949cd-589">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="949cd-590">可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法来读取重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-590">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="949cd-591">写入重新开始区域时，字节数组段中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-591">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-592">在读取重新开始区域时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-592">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="949cd-593">如果指定了预留，写入的重新开始区域将使用集合中包含的预留来占用先前已预留的空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-593">If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="949cd-594">如果该方法成功，它将占用能容纳数据的最小预留，而该预留将从集合中移除。</span><span class="sxs-lookup"><span data-stu-id="949cd-594">If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="949cd-595">此方法成功完成时，基序列号已更新。</span><span class="sxs-lookup"><span data-stu-id="949cd-595">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="949cd-596">其序列号小于新的基序列号的所有日志记录都不可访问。</span><span class="sxs-lookup"><span data-stu-id="949cd-596">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="949cd-597">如果记录序列已经释放，或者如果传递了无效自变量，此操作内将立即引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-597">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="949cd-598">异步追加请求过程中发生的错误（例如，I/O 请求过程中的磁盘故障）将导致在调用 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 方法时引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-598">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-599">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-599">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-600">写入重新开始区域时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-600">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-601">记录序列无法获得足够的可用空间来容纳新的重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-601">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-602">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-602">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber, reservation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="949cd-603">将连接在一起并以记录形式追加的字节数组段的列表。</span><span class="sxs-lookup"><span data-stu-id="949cd-603">A list of byte array segments that will be concatenated and appended as the record.</span></span></param>
        <param name="newBaseSequenceNumber"><span data-ttu-id="949cd-604">新的基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-604">The new base sequence number.</span></span> <span data-ttu-id="949cd-605">指定的序列号必须大于或等于当前基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-605">The specified sequence number must be greater than or equal to the current base sequence number.</span></span></param>
        <param name="reservation"><span data-ttu-id="949cd-606">一个 <see cref="T:System.IO.Log.ReservationCollection" />，它包含应当用于此重新开始区域的预留。</span><span class="sxs-lookup"><span data-stu-id="949cd-606">A <see cref="T:System.IO.Log.ReservationCollection" /> that contains the reservation that should be used for this restart area.</span></span></param>
        <summary><span data-ttu-id="949cd-607">在派生类中重写时，利用预留向 <see cref="T:System.IO.Log.IRecordSequence" /> 中写入一个重新开始区域，并更新基序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-607">When overridden in a derived class, writes a restart area to the <see cref="T:System.IO.Log.IRecordSequence" /> using a reservation, and updates the base sequence number.</span></span></summary>
        <returns><span data-ttu-id="949cd-608">写入的重新开始区域的序列号。</span><span class="sxs-lookup"><span data-stu-id="949cd-608">The sequence number of the written restart area.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="949cd-609">重新开始区域用于临时存储包含客户端最后一次检查点操作的信息。</span><span class="sxs-lookup"><span data-stu-id="949cd-609">A restart area is used to temporarily store information containing a client's last checkpoint operation.</span></span> <span data-ttu-id="949cd-610">需要恢复时，可以分析重新开始区域，以检索最后一次检查点操作中的所有数据。</span><span class="sxs-lookup"><span data-stu-id="949cd-610">When a recovery is necessary, you can parse the restart area to retrieve all the data from the last checkpoint operation.</span></span> <span data-ttu-id="949cd-611">这些数据将初始化事务表、脏页表和打开文件表，以便它们能够用于恢复过程。</span><span class="sxs-lookup"><span data-stu-id="949cd-611">This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.</span></span> <span data-ttu-id="949cd-612">可以使用 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 方法来读取重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-612">A restart area can be read using the <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> method.</span></span>  
  
 <span data-ttu-id="949cd-613">写入重新开始区域时，字节数组段中的数据将连接成单个字节数组，以便以记录形式追加。</span><span class="sxs-lookup"><span data-stu-id="949cd-613">When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.</span></span> <span data-ttu-id="949cd-614">在读取重新开始区域时，无法将数据重新拆分为数组段。</span><span class="sxs-lookup"><span data-stu-id="949cd-614">No provision is made for splitting data back into array segments when the restart area is read.</span></span>  
  
 <span data-ttu-id="949cd-615">如果指定了预留，写入的重新开始区域将使用集合中包含的预留来占用先前已预留的空间。</span><span class="sxs-lookup"><span data-stu-id="949cd-615">If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.</span></span> <span data-ttu-id="949cd-616">如果该方法成功，它将占用能容纳数据的最小预留，而该预留将从集合中移除。</span><span class="sxs-lookup"><span data-stu-id="949cd-616">If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.</span></span>  
  
 <span data-ttu-id="949cd-617">此方法成功完成时，基序列号已更新。</span><span class="sxs-lookup"><span data-stu-id="949cd-617">When this method successfully completes, the base sequence number has been updated.</span></span> <span data-ttu-id="949cd-618">其序列号小于新的基序列号的所有日志记录都不可访问。</span><span class="sxs-lookup"><span data-stu-id="949cd-618">All log records with sequence numbers less than the new base sequence number are inaccessible.</span></span>  
  
 <span data-ttu-id="949cd-619">如果记录序列已经释放，或者如果传递了无效自变量，此操作内将立即引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-619">If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.</span></span> <span data-ttu-id="949cd-620">异步追加请求过程中发生的错误（例如，I/O 请求过程中的磁盘故障）将导致在调用 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 方法时引发异常。</span><span class="sxs-lookup"><span data-stu-id="949cd-620">Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="949cd-621">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="949cd-621">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="949cd-622">写入重新开始区域时，发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="949cd-622">An I/O error occurred while writing the restart area.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="949cd-623">记录序列无法获得足够的可用空间来容纳新的重新开始区域。</span><span class="sxs-lookup"><span data-stu-id="949cd-623">The record sequence could not make enough free space to contain the new restart area.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="949cd-624">该方法是在序列已释放之后调用的。</span><span class="sxs-lookup"><span data-stu-id="949cd-624">The method was called after the sequence has been disposed of.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>