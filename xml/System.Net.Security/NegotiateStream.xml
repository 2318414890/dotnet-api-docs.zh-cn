<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c14dd401696189bb315395ed828de5f1c0c89ba3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30461131" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NegotiateStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NegotiateStream : System::Net::Security::AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一个使用协商安全协议的流，以便对客户端-服务器通信中的客户端及服务器（可选）进行身份验证。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Net.Security.NegotiateStream>客户端和服务器之间传输的身份验证和协助保护的信息的类。 使用<xref:System.Net.Security.NegotiateStream>，你可以执行以下操作。  
  
-   为模拟或委托向服务器发送客户端的凭据。  
  
-   请求服务器身份验证。  
  
-   加密和/或签名前将其传输的数据。  
  
 在将信息传输之前，必须执行身份验证。 客户端请求进行身份验证使用同步<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法，身份验证完成之前阻止，或异步<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>方法，不会阻止等待身份验证完成时。 服务器请求进行身份验证使用同步<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>或异步<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。 客户端和服务器上，（可选） 进行身份验证使用 Negotiate 安全协议。 在 Windows 95/98 系统中，Windows NT LAN Manager (NTLM) 是用于身份验证的协议。 在 Kerberos 其他平台上使用协议进行身份验证客户端和服务器支持它; 如果否则使用 NTLM。 这些协议的详细说明，请参阅平台 SDK 文档 MSDN 上，在 msdn.microsoft.com/library/。 <xref:System.Net.Security.NegotiateStream>类执行使用安全支持提供程序接口 (SSPI) 身份验证。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定哪些安全服务将使用<xref:System.Net.Security.NegotiateStream>来帮助保护你的数据在传输过程。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。 你可以获取有关远程客户端或服务器使用信息<xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>属性。  
  
 如果身份验证失败，你将收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 你将使用同步的数据发送<xref:System.Net.Security.NegotiateStream.Write%2A>或异步<xref:System.Net.Security.NegotiateStream.BeginWrite%2A>方法。 接收数据的数据使用同步<xref:System.Net.Security.NegotiateStream.Read%2A>或异步<xref:System.Net.Security.NegotiateStream.BeginRead%2A>方法。 如果安全服务 （如启用加密或签名），这些自动应用于您的数据<xref:System.Net.Security.NegotiateStream>。  
  
 <xref:System.Net.Security.NegotiateStream>将使用在创建时提供的流的数据传输<xref:System.Net.Security.NegotiateStream>。 当提供此基础流时，你可以选择以指定是否关闭<xref:System.Net.Security.NegotiateStream>也会关闭基础流。  
  
   
  
## Examples  
 下面的代码示例演示一个使用的客户端-服务器连接的客户端<xref:System.Net.Security.NegotiateStream>。 客户端进行身份验证，并以异步方式将消息发送到服务器。  
  
 [!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
 [!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
  
 下面的代码示例演示一个使用的客户端-服务器连接的服务器端<xref:System.Net.Security.NegotiateStream>进行身份验证客户端并读取客户端发送的消息。  
  
 [!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
 [!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Net.Security.NegotiateStream" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要防止<xref:System.Net.Security.NegotiateStream>关闭你提供的流，使用<xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29>构造函数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream">一个 <see cref="T:System.IO.Stream" /> 对象，<see cref="T:System.Net.Security.NegotiateStream" /> 使用此对象发送和接收数据。</param>
        <summary>使用指定的 <see cref="T:System.Net.Security.NegotiateStream" /> 初始化 <see cref="T:System.IO.Stream" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何调用此构造函数。  
  
 [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream">一个 <see cref="T:System.IO.Stream" /> 对象，<see cref="T:System.Net.Security.NegotiateStream" /> 使用此对象发送和接收数据。</param>
        <param name="leaveInnerStreamOpen">
          如果为 <see langword="true" />，表示关闭此 <see cref="T:System.Net.Security.NegotiateStream" /> 不影响 <c>innerstream</c>；若为 <see langword="false" />，则表示关闭此 <see cref="T:System.Net.Security.NegotiateStream" /> 也会同时关闭 <c>innerStream</c>。</param>
        <summary>使用指定的 <see cref="T:System.Net.Security.NegotiateStream" /> 和流封闭行为初始化 <see cref="T:System.IO.Stream" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当指定`true`为`leaveStreamOpen`参数，关闭<xref:System.Net.Security.NegotiateStream>不起任何作用`innerStream`流式传输; 您必须显式关闭`innerStream`当不再需要它。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此构造函数。 此代码示例摘自更大的示例为提供<xref:System.Net.Security.NegotiateStream>类。  
  
 [!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
 [!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> 为 <see langword="null" />。  
  
 \- 或 -  
  
 <paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>客户端调用此方法，以便对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>客户端调用此方法，以便对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 身份验证使用客户端的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 为服务器不指定任何服务主体名称 (SPN)。 模拟级别是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全级别是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>，并进行相互身份验证的请求。 <xref:System.Net.Security.NegotiateStream>类将构造用于相互身份验证的 SPN。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
        <summary>客户端调用此方法，以便对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的客户端凭据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模拟级别是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全级别是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>，并进行相互身份验证的请求。 <xref:System.Net.Security.NegotiateStream>类将构造用于相互身份验证的 SPN。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 为 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="binding">用于扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</param>
        <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
        <summary>客户端调用此方法，以便对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的客户端凭据和通道绑定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模拟级别是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全级别是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>，并进行相互身份验证的请求。 <xref:System.Net.Security.NegotiateStream>类将构造用于相互身份验证的 SPN。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>用于传递给此方法的扩展保护`binding`参数将检索应用程序从<xref:System.Net.Security.SslStream.TransportContext%2A>属性关联的<xref:System.Net.Security.SslStream>。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 为 <see langword="null" />。  
  
 \- 或 -  
  
 <paramref name="credential" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
        <param name="requiredProtectionLevel">
          <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
        <param name="allowedImpersonationLevel">
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
        <summary>客户端调用此方法，以便对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的凭据和身份验证选项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`对的请求安全服务的使用经过身份验证的流传输的数据的参数。 例如，若要让数据进行加密和签名，指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功通过身份验证并不保证，请求<xref:System.Net.Security.ProtectionLevel>已被授予。 必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> 不是有效值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 为 null。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="binding">用于扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</param>
        <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
        <param name="requiredProtectionLevel">
          <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
        <param name="allowedImpersonationLevel">
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
        <summary>客户端调用此方法，以便对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的凭据、身份验证选项和通道绑定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`对的请求安全服务的使用经过身份验证的流传输的数据的参数。 例如，若要让数据进行加密和签名，指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功通过身份验证并不保证，请求<xref:System.Net.Security.ProtectionLevel>已被授予。 必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>用于传递给此方法的扩展保护`binding`参数将检索应用程序从<xref:System.Net.Security.SslStream.TransportContext%2A>属性关联的<xref:System.Net.Security.SslStream>。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 为 <see langword="null" />。  
  
 \- 或 -  
  
 <paramref name="credential" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> 不是有效值。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>客户端调用此方法，对客户端/服务器连接中的客户端及服务器（可选）进行身份验证以作为异步操作。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>客户端调用此方法，对客户端/服务器连接中的客户端及服务器（可选）进行身份验证以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task" />  
  
 表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 身份验证使用客户端的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 为服务器不指定任何服务主体名称 (SPN)。 模拟级别是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全级别是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>，并进行相互身份验证的请求。 <xref:System.Net.Security.NegotiateStream>类将构造用于相互身份验证的 SPN。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
        <summary>客户端调用此方法，对客户端/服务器连接中的客户端及服务器（可选）进行身份验证以作为异步操作。 身份验证过程使用指定的客户端凭据。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task" />  
  
 表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模拟级别是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全级别是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>，并进行相互身份验证的请求。 <xref:System.Net.Security.NegotiateStream>类将构造用于相互身份验证的 SPN。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 为 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="binding">用于扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</param>
        <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
        <summary>客户端调用此方法，对客户端/服务器连接中的客户端及服务器（可选）进行身份验证以作为异步操作。 身份验证过程使用指定的客户端凭据和通道绑定。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task" />  
  
 表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模拟级别是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全级别是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>，并进行相互身份验证的请求。 <xref:System.Net.Security.NegotiateStream>类将构造用于相互身份验证的 SPN。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>用于传递给此方法的扩展保护`binding`参数将检索应用程序从<xref:System.Net.Security.SslStream.TransportContext%2A>属性关联的<xref:System.Net.Security.SslStream>。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 为 <see langword="null" />。  
  
 \- 或 -  
  
 <paramref name="credential" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
        <param name="requiredProtectionLevel">
          <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
        <param name="allowedImpersonationLevel">
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
        <summary>客户端调用此方法，对客户端/服务器连接中的客户端及服务器（可选）进行身份验证以作为异步操作。 身份验证过程使用指定的凭据和身份验证选项。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task" />  
  
 表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`对的请求安全服务的使用经过身份验证的流传输的数据的参数。 例如，若要让数据进行加密和签名，指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功通过身份验证并不保证，请求<xref:System.Net.Security.ProtectionLevel>已被授予。 必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> 不是有效值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 为 null。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="binding">用于扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</param>
        <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
        <param name="requiredProtectionLevel">
          <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
        <param name="allowedImpersonationLevel">
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
        <summary>客户端调用此方法，对客户端/服务器连接中的客户端及服务器（可选）进行身份验证以作为异步操作。 身份验证过程使用指定的凭据、身份验证选项和通道绑定。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task" />  
  
 表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`对的请求安全服务的使用经过身份验证的流传输的数据的参数。 例如，若要让数据进行加密和签名，指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功通过身份验证并不保证，请求<xref:System.Net.Security.ProtectionLevel>已被授予。 必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>用于传递给此方法的扩展保护`binding`参数将检索应用程序从<xref:System.Net.Security.SslStream.TransportContext%2A>属性关联的<xref:System.Net.Security.SslStream>。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> 为 <see langword="null" />。  
  
 \- 或 -  
  
 <paramref name="credential" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> 不是有效值。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>处理客户端-服务器连接的身份验证的服务器端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正在进行身份验证时，将阻止这些方法。 若要阻止应用程序阻止等待身份验证完成时，使用<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>服务器调用此方法，以便对客户端-服务器连接中的客户端及服务器（可选）进行身份验证。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 身份验证使用服务器的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 为服务器不指定任何服务主体名称 (SPN)。 模拟级别是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，和的安全级别是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 此方法阻止，直至该操作完成。 若要防止在操作完成之前一直阻止，使用之一<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法重载。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (policy As ExtendedProtectionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">用于扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</param>
        <summary>服务器调用此方法，以便对客户端-服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的扩展保护策略。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 身份验证使用服务器的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 为服务器不指定任何服务主体名称 (SPN)。 模拟级别是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，和的安全级别是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。  
  
 如果`policy`参数是`null`，则扩展的保护策略使用具有<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>设置为<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 此方法阻止，直至该操作完成。 若要防止在操作完成之前一直阻止，使用之一<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法重载。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在 <paramref name="policy" /> 参数中传递的扩展保护策略上，<see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 都是 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在不支持扩展保护的平台上，<paramref name="policy" /> 参数设置为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立服务器身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="requiredProtectionLevel">
          <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
        <param name="requiredImpersonationLevel">
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
        <summary>服务器调用此方法，以便对客户端-服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的服务器凭据和身份验证选项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 此方法阻止，直至该操作完成。 若要防止在操作完成之前一直阻止，使用之一<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法重载。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必须为 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />，</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被用作客户端尝试进行身份验证。 不能尝试将该流作为服务器重新进行身份验证。</exception>
        <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="policy">用于扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</param>
        <param name="requiredProtectionLevel">
          <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
        <param name="requiredImpersonationLevel">
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
        <summary>服务器调用此方法，以便对客户端-服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的服务器凭据、身份验证选项和扩展保护策略。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`policy`参数是`null`，则扩展的保护策略使用具有<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>设置为<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 此方法阻止，直至该操作完成。 若要防止在操作完成之前一直阻止，使用之一<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法重载。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在 <paramref name="policy" /> 参数中传递的扩展保护策略上，<see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 都是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必须为 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />，</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被用作客户端尝试进行身份验证。 不能尝试将该流作为服务器重新进行身份验证。</exception>
        <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在不支持扩展保护的平台上，<paramref name="policy" /> 参数设置为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以异步操作方式处理某个客户端-服务器连接的身份验证的服务器端。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>服务器调用此方法，对客户端-服务器连接中的客户端及服务器（可选）进行身份验证以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task" />  
  
 表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 身份验证使用服务器的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 为服务器不指定任何服务主体名称 (SPN)。 模拟级别是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，和的安全级别是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (policy As ExtendedProtectionPolicy) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">用于扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</param>
        <summary>服务器调用此方法，对客户端-服务器连接中的客户端及服务器（可选）进行身份验证以作为异步操作。 身份验证过程使用指定的扩展保护策略。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task" />  
  
 表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 身份验证使用服务器的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 为服务器不指定任何服务主体名称 (SPN)。 模拟级别是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，和的安全级别是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。  
  
 如果`policy`参数是`null`，则扩展的保护策略使用具有<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>设置为<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在 <paramref name="policy" /> 参数中传递的扩展保护策略上，<see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 都是 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在不支持扩展保护的平台上，<paramref name="policy" /> 参数设置为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立服务器身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="requiredProtectionLevel">
          <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
        <param name="requiredImpersonationLevel">
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
        <summary>服务器调用此方法，对客户端-服务器连接中的客户端及服务器（可选）进行身份验证以作为异步操作。 身份验证过程使用指定的服务器凭据和身份验证选项。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task" />  
  
 表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必须为 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />，</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被用作客户端尝试进行身份验证。 不能尝试将该流作为服务器重新进行身份验证。</exception>
        <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="policy">用于扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</param>
        <param name="requiredProtectionLevel">
          <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
        <param name="requiredImpersonationLevel">
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
        <summary>服务器调用此方法，对客户端-服务器连接中的客户端及服务器（可选）进行身份验证以作为异步操作。 身份验证过程使用指定的服务器凭据、身份验证选项和扩展保护策略。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task" />  
  
 表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`policy`参数是`null`，则扩展的保护策略使用具有<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>设置为<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在 <paramref name="policy" /> 参数中传递的扩展保护策略上，<see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 都是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必须为 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />，</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被用作客户端尝试进行身份验证。 不能尝试将该流作为服务器重新进行身份验证。</exception>
        <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在不支持扩展保护的平台上，<paramref name="policy" /> 参数设置为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>开始一个异步操作，以对客户端-服务器连接中的客户端进行身份验证。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正在进行身份验证时，此方法的重载不会阻止。 若要阻止等待身份验证完成时，请使用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，该委托引用当身份验证完成时要调用的方法。</param>
        <param name="asyncState">一个用户定义对象，其中包含该操作的相关信息。 当操作完成后，此对象会被传递给 asyncCallback<c></c> 委托。</param>
        <summary>客户端调用此方法开始一个异步操作，以对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。 此方法不会进入阻止状态。</summary>
        <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 身份验证使用客户端的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 为服务器不指定任何服务主体名称 (SPN)。 模拟级别是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，和的安全级别是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。 <xref:System.Net.Security.NegotiateStream>类将构造用于相互身份验证的 SPN。  
  
 此方法是异步的不会阻止在操作完成时。 若要阻止该操作完成之前，请使用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法重载。  
  
 必须通过调用完成异步身份验证操作<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>方法。 通常情况下，通过调用该方法`asyncCallback`委托。 有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法可为客户端开始异步身份验证。  
  
 [!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
 [!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
        <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，该委托引用当身份验证完成时要调用的方法。</param>
        <param name="asyncState">一个用户定义对象，其中包含写操作的相关信息。 当操作完成后，此对象会被传递给 asyncCallback<c></c> 委托。</param>
        <summary>客户端调用此方法开始一个异步操作，以对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的凭据。 此方法不会进入阻止状态。</summary>
        <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法是异步的不会阻止在操作完成时。 若要阻止该操作完成之前，请使用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法重载。  
  
 必须通过调用完成异步身份验证操作<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>方法。 通常情况下，通过调用该方法`asyncCallback`委托。 有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 为 <see langword="null" />。  
  
 \- 或 -  
  
 <paramref name="targetName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="binding">用于扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</param>
        <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
        <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，该委托引用当身份验证完成时要调用的方法。</param>
        <param name="asyncState">一个用户定义对象，其中包含写操作的相关信息。 当操作完成后，此对象会被传递给 asyncCallback<c></c> 委托。</param>
        <summary>客户端调用此方法开始一个异步操作，以对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的凭据和通道绑定。 此方法不会进入阻止状态。</summary>
        <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法是异步的不会阻止在操作完成时。 若要阻止该操作完成之前，请使用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法重载。  
  
 必须通过调用完成异步身份验证操作<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>方法。 通常情况下，通过调用该方法`asyncCallback`委托。 有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 为 <see langword="null" />。  
  
 \- 或 -  
  
 <paramref name="targetName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
        <param name="requiredProtectionLevel">
          <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
        <param name="allowedImpersonationLevel">
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
        <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，该委托引用当身份验证完成时要调用的方法。</param>
        <param name="asyncState">一个用户定义对象，其中包含写操作的相关信息。 当操作完成后，此对象会被传递给 asyncCallback<c></c> 委托。</param>
        <summary>客户端调用此方法开始一个异步操作，以对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的凭据和身份验证选项。 此方法不会进入阻止状态。</summary>
        <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`对的请求安全服务的使用经过身份验证的流传输的数据的参数。 例如，若要让数据进行加密和签名，指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功通过身份验证并不保证，请求<xref:System.Net.Security.ProtectionLevel>已被授予。 必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。  
  
 此方法是异步的不会阻止在操作完成时。 若要阻止该操作完成之前，请使用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法重载。  
  
 必须通过调用完成异步身份验证操作<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>方法。 通常情况下，通过调用该方法`asyncCallback`委托。 有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 为 <see langword="null" />。  
  
 \- 或 -  
  
 <paramref name="targetName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="binding">用于扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</param>
        <param name="targetName">唯一标识要进行身份验证的服务器的服务主体名称 (SPN)。</param>
        <param name="requiredProtectionLevel">
          <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
        <param name="allowedImpersonationLevel">
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
        <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，该委托引用当身份验证完成时要调用的方法。</param>
        <param name="asyncState">一个用户定义对象，其中包含写操作的相关信息。 当操作完成后，此对象会被传递给 asyncCallback<c></c> 委托。</param>
        <summary>客户端调用此方法开始一个异步操作，以对客户端/服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的凭据、身份验证选项和通道绑定。 此方法不会进入阻止状态。</summary>
        <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`对的请求安全服务的使用经过身份验证的流传输的数据的参数。 例如，若要让数据进行加密和签名，指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功通过身份验证并不保证，请求<xref:System.Net.Security.ProtectionLevel>已被授予。 必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。  
  
 此方法是异步的不会阻止在操作完成时。 若要阻止该操作完成之前，请使用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法重载。  
  
 必须通过调用完成异步身份验证操作<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>方法。 通常情况下，通过调用该方法`asyncCallback`委托。 有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 为 <see langword="null" />。  
  
 \- 或 -  
  
 <paramref name="targetName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被尝试作为服务器进行身份验证。 不能尝试将该流作为客户端重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>开始一个异步操作，以处理进行身份验证的客户端-服务器连接中的服务器端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正在进行身份验证时，此方法的重载不会阻止。 若要阻止等待身份验证完成时，请使用<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，该委托引用当身份验证完成时要调用的方法。</param>
        <param name="asyncState">一个用户定义对象，其中包含该操作的相关信息。 当操作完成后，此对象会被传递给 asyncCallback<c></c> 委托。</param>
        <summary>服务器调用此方法开始一个异步操作，以对客户端-服务器连接中的客户端及服务器（可选）进行身份验证。 此方法不会进入阻止状态。</summary>
        <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 身份验证使用服务器的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 为服务器不指定任何服务主体名称 (SPN)。 模拟级别是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全级别是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 若要阻止该操作完成之前，请使用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>方法重载。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy">用于扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</param>
        <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，该委托引用当身份验证完成时要调用的方法。</param>
        <param name="asyncState">一个用户定义对象，其中包含写操作的相关信息。 当操作完成后，此对象会被传递给 asyncCallback<c></c> 委托。</param>
        <summary>服务器调用此方法开始一个异步操作，以对客户端-服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的扩展保护策略。 此方法不会进入阻止状态。</summary>
        <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 身份验证使用服务器的<xref:System.Net.CredentialCache.DefaultCredentials%2A>。 为服务器不指定任何服务主体名称 (SPN)。 模拟级别是<xref:System.Security.Principal.TokenImpersonationLevel.Identification>，安全级别是<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>。  
  
 如果`policy`参数是`null`，则扩展的保护策略使用具有<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>设置为<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 若要阻止该操作完成之前，请使用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>方法重载。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在 <paramref name="policy" /> 参数中传递的扩展保护策略上，<see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 都是 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在不支持扩展保护的平台上，<paramref name="policy" /> 参数设置为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="requiredProtectionLevel">
          <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
        <param name="requiredImpersonationLevel">
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
        <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，该委托引用当身份验证完成时要调用的方法。</param>
        <param name="asyncState">一个用户定义对象，其中包含该操作的相关信息。 当操作完成后，此对象会被传递给 asyncCallback<c></c> 委托。</param>
        <summary>服务器调用此方法开始一个异步操作，以对客户端-服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的服务器凭据和身份验证选项。 此方法不会进入阻止状态。</summary>
        <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`对的请求安全服务的使用经过身份验证的流传输的数据的参数。 例如，若要让数据进行加密和签名，指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功通过身份验证并不保证，请求<xref:System.Net.Security.ProtectionLevel>已被授予。 必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。  
  
 此方法是异步的不会阻止在操作完成时。 若要阻止该操作完成之前，请使用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>方法重载。  
  
 必须通过调用完成异步身份验证操作<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>方法。 通常情况下，通过调用该方法`asyncCallback`委托。 有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必须为 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />，</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被用作客户端尝试进行身份验证。 不能尝试将该流作为服务器重新进行身份验证。</exception>
        <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要使用显式<see cref="T:System.Net.NetworkCredential" />。 关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">用于确立客户端身份的 <see cref="T:System.Net.NetworkCredential" />。</param>
        <param name="policy">用于扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</param>
        <param name="requiredProtectionLevel">
          <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一，指示流的安全服务。</param>
        <param name="requiredImpersonationLevel">
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，指示服务器使用客户端凭据访问资源的方式。</param>
        <param name="asyncCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，该委托引用当身份验证完成时要调用的方法。</param>
        <param name="asyncState">一个用户定义对象，其中包含写操作的相关信息。 当操作完成后，此对象会被传递给 asyncCallback<c></c> 委托。</param>
        <summary>服务器调用此方法开始一个异步操作，以对客户端-服务器连接中的客户端及服务器（可选）进行身份验证。 身份验证过程使用指定的服务器凭据、身份验证选项和扩展保护策略。 此方法不会进入阻止状态。</summary>
        <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`requiredProtectionLevel`对的请求安全服务的使用经过身份验证的流传输的数据的参数。 例如，若要让数据进行加密和签名，指定<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>值。 成功通过身份验证并不保证，请求<xref:System.Net.Security.ProtectionLevel>已被授予。 必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。  
  
 如果`policy`参数是`null`，则扩展的保护策略使用具有<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>设置为<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 此方法是异步的不会阻止在操作完成时。 若要阻止该操作完成之前，请使用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>方法重载。  
  
 必须通过调用完成异步身份验证操作<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>方法。 通常情况下，通过调用该方法`asyncCallback`委托。 有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在 <paramref name="policy" /> 参数中传递的扩展保护策略上，<see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 都是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必须为 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />，</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.InvalidOperationException">已进行了身份验证。  
  
 \- 或 -  
  
 此流先前被用作客户端尝试进行身份验证。 不能尝试将该流作为服务器重新进行身份验证。</exception>
        <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.PlatformNotSupportedException">在不支持扩展保护的平台上，<paramref name="policy" /> 参数设置为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，该数组接收从流中读取的字节。</param>
        <param name="offset">
          <c>缓冲区</c>中从零开始的位置，从此处开始存储从此流中读取的数据。</param>
        <param name="count">要从流中读取的最大字节数。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 委托，该委托引用读操作完成时要调用的方法。</param>
        <param name="asyncState">用户定义的对象，其中包含读操作的相关信息。 当操作完成后，此对象会被传递给 asyncCallback<c></c> 委托。</param>
        <summary>开始一个异步读操作，此操作读取流中的数据并将其存储在指定的数组中。</summary>
        <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果启用了加密、 签名或加密和签名，读取的操作将从基础流中读取数据、 检查的数据的完整性和对其进行解密。 如果任何安全不服务 （如数据加密或签名） 中使用，此方法会启动对基础流的异步读取的操作。  
  
 此方法是异步的不会阻止在操作完成时。 若要阻止该操作完成之前，请使用<xref:System.Net.Security.NegotiateStream.Read%2A>方法。  
  
 异步读的操作必须由调用完成<xref:System.Net.Security.NegotiateStream.EndRead%2A>方法。 通常情况下，通过调用该方法`asyncCallback`委托。 有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 <xref:System.Net.Security.NegotiateStream>类不支持多个同时进行的读取操作。 如果你尝试开始读取的操作，而另一个读取操作已经在执行对同一个流，<xref:System.NotSupportedException>将引发异常。  
  
 你已成功通过身份验证之前，不能调用此方法。 若要进行身份验证，调用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>，或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何启动异步读的操作。 此代码示例摘自更大的示例为提供<xref:System.Net.Security.NegotiateStream>类。  
  
 [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> 小于 0。  
  
 \- 或 -  
  
 <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。  
  
 \- 或 -  
  
 <paramref name="offset" /> 加上 <paramref name="count" /> 大于 <paramref name="buffer" /> 的长度。</exception>
        <exception cref="T:System.IO.IOException">读操作失败。  
  
 \- 或 -  
  
 使用了加密服务，但未能解密该数据。</exception>
        <exception cref="T:System.NotSupportedException">已存在一个正在执行的读取操作。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">未进行身份验证。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，该数组提供要写入流中的字节。</param>
        <param name="offset">
          <c>缓冲区</c>中从零开始的位置，从此处开始读取要写入流中的字节。</param>
        <param name="count">
          <see cref="T:System.Int32" /> 值，该值指定要从<c>缓冲区</c>中读取的字节数。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 委托，它引用写操作完成时要调用的方法。</param>
        <param name="asyncState">一个用户定义对象，其中包含写操作的相关信息。 当操作完成后，此对象会被传递给 asyncCallback<c></c> 委托。</param>
        <summary>开始一个异步写操作，此操作将指定缓冲区中的 <see cref="T:System.Byte" /> 写入到流中。</summary>
        <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果启用了加密、 签名或加密和签名，此方法从缓冲区中读取数据、 加密，符号，或对进行加密和签名，以及传输使用基础流。 如果任何安全不服务 （如数据加密或签名） 中使用，此方法会启动对基础流的异步写入操作。  
  
 此方法是异步的不会阻止在操作完成时。 若要阻止该操作完成之前，请使用<xref:System.Net.Security.NegotiateStream.Read%2A>方法。  
  
 异步读的操作必须由调用完成<xref:System.Net.Security.NegotiateStream.EndWrite%2A>方法。 通常情况下，通过调用该方法`asyncCallback`委托。 有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 <xref:System.Net.Security.NegotiateStream>类不支持多个同时进行的写入操作。 如果你尝试开始写入操作，而另一个写入操作已经在执行对同一个流，<xref:System.NotSupportedException>将引发异常。  
  
 你已成功通过身份验证之前，不能调用此方法。 若要进行身份验证，调用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>，或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何开始异步写操作。  
  
 [!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
 [!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
  
 在操作完成时调用以下方法。  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />。  
  
 \- 或 -  
  
 <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。  
  
 \- 或 -  
  
 <paramref name="offset" /> 加上计数大于 <paramref name="buffer" /> 的长度。</exception>
        <exception cref="T:System.IO.IOException">写操作失败。  
  
 \- 或 -  
  
 正在使用加密，但未能加密该数据。</exception>
        <exception cref="T:System.NotSupportedException">已存在一个正在执行的写操作。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">未进行身份验证。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示基础流是否可读。</summary>
        <value>
          如果已进行身份验证且基础流为可读，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果发生了成功的身份验证，此属性返回通过调用返回的值<xref:System.IO.Stream.CanRead%2A>对基础流的属性。 基础流时创建的实例指定<xref:System.Net.Security.NegotiateStream>类。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示基础流是否可查找。</summary>
        <value>此属性始终返回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不应尝试设置的位置<xref:System.Net.Security.NegotiateStream>对象或其基础流。 基础流时创建的实例指定<xref:System.Net.Security.NegotiateStream>类。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示基础流是否支持超时。</summary>
        <value>
          如果基础流支持超时，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回通过调用返回的值<xref:System.IO.Stream.CanTimeout%2A>对基础流的属性。 基础流时创建的实例指定<xref:System.Net.Security.NegotiateStream>类。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示基础流是否可写。</summary>
        <value>
          如果已进行身份验证且基础流可写，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果发生了成功的身份验证，此属性返回通过调用返回的值<xref:System.IO.Stream.CanWrite%2A>对基础流的属性。 基础流时创建的实例指定<xref:System.Net.Security.NegotiateStream>类。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.Net.Security.NegotiateStream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法称为由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。 `Dispose()` 调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A> 调用`Dispose`与`disposing`设置为`false`。  
  
 当`disposing`参数为 true 时，此方法释放由任何托管对象持有的全部资源此<xref:System.Net.Security.NegotiateStream>引用。 此方法调用每个引用对象的 `Dispose()` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> 可以由其他对象多次调用。 在重写<see langword="Dispose(Boolean)" />请注意不要引用已释放的以前调用中的对象<see langword="Dispose" />。 有关如何实现详细信息<see langword="Dispose(Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
 有关详细信息<see langword="Dispose" />和<see cref="M:System.Object.Finalize" />，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[重写 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">调用 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> 后返回的 <see cref="T:System.IAsyncResult" /> 实例。</param>
        <summary>结束通过调用 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> 而启动的、正处于挂起状态的异步客户端身份验证操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该操作未完成，此方法阻止，直至它执行。 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 若要以同步方式执行此操作，请使用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> 并不是通过对 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> 的调用创建的。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.InvalidOperationException">没有需要完成的处于挂起状态的客户端身份验证。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">调用 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> 后返回的 <see cref="T:System.IAsyncResult" /> 实例。</param>
        <summary>结束通过调用 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> 而启动的、正处于挂起状态的异步客户端身份验证操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该操作未完成，此方法阻止，直至它执行。  
  
 当身份验证成功时，必须检查<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>和<xref:System.Net.Security.NegotiateStream.IsSigned%2A>属性来确定由哪些安全服务<xref:System.Net.Security.NegotiateStream>。 检查<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。  
  
 如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>或<xref:System.Security.Authentication.InvalidCredentialException>。 在这种情况下，你可以重试使用不同的凭据进行身份验证。  
  
 若要以同步方式执行此操作，使用<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> 并不是通过对 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> 的调用创建的。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 可以使用此对象尝试重新进行身份验证。</exception>
        <exception cref="T:System.InvalidOperationException">没有要完成的处于挂起状态的身份验证。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">调用 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 后返回的 <see cref="T:System.IAsyncResult" /> 实例</param>
        <summary>结束通过调用 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 而启动的异步读操作。</summary>
        <returns>
          <see cref="T:System.Int32" /> 值，该值指定从基础流中读取的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该操作未完成，此方法阻止，直至它执行。  
  
 若要以同步方式执行此操作，使用<xref:System.Net.Security.NegotiateStream.Read%2A>方法。  
  
 你已成功通过身份验证之前，不能调用此方法。 若要进行身份验证，调用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>，或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示结束异步读取操作。 有关演示如何启动该操作的示例，请参阅<xref:System.Net.Security.NegotiateStream.BeginRead%2A>。  
  
 [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">asyncResult 并不是通过调用 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 而创建的。</exception>
        <exception cref="T:System.InvalidOperationException">未进行身份验证。</exception>
        <exception cref="T:System.IO.IOException">读操作失败。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">调用 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 后返回的 <see cref="T:System.IAsyncResult" /> 实例</param>
        <summary>结束通过调用 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 而启动的异步写操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该操作未完成，此方法阻止，直至它执行。  
  
 你已成功通过身份验证之前，不能调用此方法。 若要进行身份验证，调用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>，或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
 若要以同步方式执行此操作，使用<xref:System.Net.Security.NegotiateStream.Write%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示调用以完成异步写入操作的方法。 有关演示如何启动该操作的示例，请参阅<xref:System.Net.Security.NegotiateStream.BeginWrite%2A>。  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">asyncResult 并不是通过调用 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 而创建的。</exception>
        <exception cref="T:System.InvalidOperationException">未进行身份验证。</exception>
        <exception cref="T:System.IO.IOException">写操作失败。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>导致所有缓冲数据都要写入基础设备。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法调用<xref:System.IO.Stream.Flush%2A>对基础流。  
  
   
  
## Examples  
 下面的代码示例演示如何刷新流。  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示服务器使用客户端凭据的方法。</summary>
        <value>
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你必须调用此方法之前已成功验证。 通过调用其中一个请求身份验证时，客户端指定的模拟级别<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>方法。 如果进行身份验证而无需指定<xref:System.Security.Principal.TokenImpersonationLevel>，<xref:System.Security.Principal.TokenImpersonationLevel.Identification>使用。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">身份验证失败或没有进行身份验证。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示身份验证是否成功。</summary>
        <value>
          如果身份验证成功，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 客户端进行身份验证通过调用<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>方法。 服务器进行身份验证通过调用<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示此 <see cref="T:System.Net.Security.NegotiateStream" /> 是否使用数据加密。</summary>
        <value>
          如果在通过网络传输数据前将其加密，并在数据到达远程终结点后将其解密，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 加密有助于保护的数据; 的隐私也就是说，它可帮助确保，在传输过程中的数据时它不能破译由第三方。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示服务器和客户端是否均已进行身份验证。</summary>
        <value>
          如果服务器已进行身份验证，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当客户端想要提供身份验证的凭据的服务器，客户端指定相互身份验证。 默认情况下，客户端请求相互身份验证。  
  
 协商协议选择 NTLM 或 Kerberos，具体取决于支持的客户端和服务器的安全协议。 NTLM 不支持相互身份验证。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示此 <see cref="T:System.Net.Security.NegotiateStream" /> 使用的连接的本地端是否作为服务器进行了身份验证。</summary>
        <value>
          如果本地终结点作为经过身份验证的连接的服务器端成功地经过了身份验证，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果身份验证失败，或者没有出现，则此属性返回`false`。  
  
 若要与服务器进行身份验证，调用<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示使用此流发送的数据是否进行签名。</summary>
        <value>
          如果在传输数据前对其进行签名，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据签名有助于保护的数据中; 完整性也就是说，它可帮助收件人确定是否数据已被篡改在传输过程中。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取基础流的长度。</summary>
        <value>
          <see cref="T:System.Int64" />，指定基础流的长度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回通过调用返回的值<xref:System.IO.Stream.Length%2A>对基础流的属性。 如果基础流是不可查找的此属性通常将引发异常。 基础流的运行时类型确定引发的异常的运行时类型。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">当基础流为 <see cref="T:System.Net.Sockets.NetworkStream" /> 时，不支持获取此属性的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置基础流中的当前位置。</summary>
        <value>
          <see cref="T:System.Int64" />，指定基础流中的当前位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回通过调用返回的值<xref:System.IO.Stream.Position%2A>对基础流的属性。 如果基础流是不可查找的此属性通常将引发异常。 基础流的运行时类型确定引发的异常的运行时类型。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">不支持设置此属性。  
  
 \- 或 -  
  
 当基础流为 <see cref="T:System.Net.Sockets.NetworkStream" /> 时，不支持获取此属性的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，该数组接收从流中读取的字节。</param>
        <param name="offset">
          <see cref="T:System.Int32" />，其中包含<c>缓冲区</c>中从零开始的位置，从此处开始存储从流中读取的数据。</param>
        <param name="count">
          <see cref="T:System.Int32" />，包含要从流中读取的最大字节数。</param>
        <summary>读取此流中的数据并将其存储在指定的数组中。</summary>
        <returns>
          <see cref="T:System.Int32" /> 值，该值指定从基础流中读取的字节数。 如果再也没有要读取的数据，将返回 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 该方法读取的最多`count`字节从当前流，并且将它们存储在`buffer`开始`offset`。  
  
 你已成功通过身份验证之前，不能调用此方法。 若要进行身份验证，调用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>，或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
 若要以异步方式执行此操作，使用<xref:System.Net.Security.NegotiateStream.BeginRead%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示从读取<xref:System.Net.Security.NegotiateStream>。  
  
 [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">读操作失败。</exception>
        <exception cref="T:System.InvalidOperationException">未进行身份验证。</exception>
        <exception cref="T:System.NotSupportedException">已在进行 <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> 操作。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置读操作阻止等待数据的时间。</summary>
        <value>
          <see cref="T:System.Int32" />，指定读操作失败前经过的时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回通过调用返回的值<xref:System.IO.Stream.ReadTimeout%2A>对基础流的属性。 当设置此属性，<xref:System.IO.Stream.ReadTimeout%2A>对基础流的值设置为指定的值。  
  
 如果基础流已<xref:System.Net.Sockets.NetworkStream>，<xref:System.Net.Security.NegotiateStream.ReadTimeout%2A>以毫秒为单位并将设置为<xref:System.Threading.Timeout.Infinite>默认情况下，这样一来，读取操作不会超时。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ RemoteIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取有关共享此已验证身份的流的远程方的身份信息。</summary>
        <value>
          <see cref="T:System.Security.Principal.IIdentity" /> 对象，介绍远程端点的标识。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果客户端访问，该属性返回<xref:System.Security.Principal.GenericIdentity>包含服务的服务器和使用的身份验证协议主体名称 (SPN)。 如果服务器可以访问，该属性返回<xref:System.Security.Principal.WindowsIdentity>描述客户端。 如果<xref:System.Security.Principal.WindowsIdentity>是不可用，客户端信息返回到的服务器<xref:System.Security.Principal.GenericIdentity>。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">身份验证失败或没有进行身份验证。</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">忽略此值。</param>
        <param name="origin">忽略此值。</param>
        <summary>引发 <see cref="T:System.NotSupportedException" />。</summary>
        <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请勿调用此方法。 它继承的但不是支持<xref:System.Net.Security.NegotiateStream>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Net.Security.NegotiateStream" /> 上不支持查找。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Int64" /> 值，该值指定流的长度。</param>
        <summary>设置基础流的长度。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，该数组提供要写入流中的字节。</param>
        <param name="offset">
          <see cref="T:System.Int32" />，包含<c>缓冲区</c>中的从零开始的位置，将从该位置开始读取要写入到流中的字节。</param>
        <param name="count">
          <see cref="T:System.Int32" />，其中包含要从<c>缓冲区</c>中读取的字节数。</param>
        <summary>使用指定的缓冲区和偏移将指定数目的 <see cref="T:System.Byte" /> 写入基础流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果启用了加密、 签名或加密和签名，此方法从缓冲区中读取数据、 加密，符号，或对进行加密和签名，以及传输使用基础流。 如果任何安全不服务 （如数据加密或签名） 中使用，此方法将调用<xref:System.IO.Stream.Write%2A>对基础流。  
  
 当在写入操作完成时，将阻止此方法。 若要防止阻塞操作完成时，使用<xref:System.Net.Security.NegotiateStream.Write%2A>方法。  
  
 你已成功通过身份验证之前，不能调用此方法。 若要进行身份验证，调用之一<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>，或<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>方法。  
  
 <xref:System.Net.Security.NegotiateStream>类不支持多个同时进行的写入操作。 如果你尝试开始写入操作，而另一个写入操作已经在执行对同一个流，<xref:System.NotSupportedException>将引发异常。  
  
   
  
## Examples  
 下面的代码示例演示如何写入<xref:System.Net.Security.NegotiateStream>。  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />。  
  
 \- 或 -  
  
 <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。  
  
 \- 或 -  
  
 <paramref name="offset" /> 加上计数大于 <paramref name="buffer" /> 的长度。</exception>
        <exception cref="T:System.IO.IOException">写操作失败。  
  
 \- 或 -  
  
 正在使用加密，但未能加密该数据。</exception>
        <exception cref="T:System.NotSupportedException">已存在一个正在执行的写操作。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.InvalidOperationException">未进行身份验证。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置写操作阻止等待数据的时间。</summary>
        <value>
          <see cref="T:System.Int32" />，指定写操作失败前经过的时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回通过调用返回的值<xref:System.IO.Stream.WriteTimeout%2A>对基础流的属性。 对于集合运算指定的值设置<xref:System.IO.Stream.WriteTimeout%2A>对基础流的值。  
  
 如果基础流已<xref:System.Net.Sockets.NetworkStream>，<xref:System.Net.Security.NegotiateStream.WriteTimeout%2A>以毫秒为单位并将设置为<xref:System.Threading.Timeout.Infinite>默认情况下，因此写操作就不会超时。  
  
   
  
## Examples  
 下面的代码示例演示如何显示此属性的值。  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>