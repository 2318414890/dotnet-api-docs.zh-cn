<Type Name="Stream" FullName="System.IO.Stream">
  <TypeSignature Language="C#" Value="public abstract class Stream : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Stream extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Stream" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Stream&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stream abstract : MarshalByRefObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8ff38-101">提供字节序列的一般视图。</span><span class="sxs-lookup"><span data-stu-id="8ff38-101">Provides a generic view of a sequence of bytes.</span></span> <span data-ttu-id="8ff38-102">这是一个抽象类。</span><span class="sxs-lookup"><span data-stu-id="8ff38-102">This is an abstract class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-103"><xref:System.IO.Stream> 是所有流的抽象基类。</span><span class="sxs-lookup"><span data-stu-id="8ff38-103"><xref:System.IO.Stream> is the abstract base class of all streams.</span></span> <span data-ttu-id="8ff38-104">流是字节序列的抽象，例如文件、输入/输出设备、进程中通信管道或 TCP/IP 套接字。</span><span class="sxs-lookup"><span data-stu-id="8ff38-104">A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket.</span></span> <span data-ttu-id="8ff38-105"><xref:System.IO.Stream>类和派生的类提供的输入和输出，这些不同类型的通用视图，并使程序员不必了解操作系统和基础设备的具体细节。</span><span class="sxs-lookup"><span data-stu-id="8ff38-105">The <xref:System.IO.Stream> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.</span></span>  
  
 <span data-ttu-id="8ff38-106">流涉及三个基本操作：</span><span class="sxs-lookup"><span data-stu-id="8ff38-106">Streams involve three fundamental operations:</span></span>  
  
-   <span data-ttu-id="8ff38-107">你可以从流中读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-107">You can read from streams.</span></span> <span data-ttu-id="8ff38-108">读取，则将数据从流传送到数据结构，如的字节数组。</span><span class="sxs-lookup"><span data-stu-id="8ff38-108">Reading is the transfer of data from a stream into a data structure, such as an array of bytes.</span></span>  
  
-   <span data-ttu-id="8ff38-109">你可以写入流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-109">You can write to streams.</span></span> <span data-ttu-id="8ff38-110">写入是数据的数据结构传输到流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-110">Writing is the transfer of data from a data structure into a stream.</span></span>  
  
-   <span data-ttu-id="8ff38-111">流可以支持查找。</span><span class="sxs-lookup"><span data-stu-id="8ff38-111">Streams can support seeking.</span></span> <span data-ttu-id="8ff38-112">查找引用查询实体和修改流中的当前位置。</span><span class="sxs-lookup"><span data-stu-id="8ff38-112">Seeking refers to querying and modifying the current position within a stream.</span></span> <span data-ttu-id="8ff38-113">查找功能依赖于某个流是否的后备存储的类型。</span><span class="sxs-lookup"><span data-stu-id="8ff38-113">Seek capability depends on the kind of backing store a stream has.</span></span> <span data-ttu-id="8ff38-114">例如，网络流的当前位置，没有统一概念，因此通常不支持查找。</span><span class="sxs-lookup"><span data-stu-id="8ff38-114">For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.</span></span>  
  
 <span data-ttu-id="8ff38-115">一些较常用继承的流<xref:System.IO.Stream>是<xref:System.IO.FileStream>，和<xref:System.IO.MemoryStream>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-115">Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.</span></span>  
  
 <span data-ttu-id="8ff38-116">具体取决于基础数据源或存储库中，流可能支持只有某些这些功能。</span><span class="sxs-lookup"><span data-stu-id="8ff38-116">Depending on the underlying data source or repository, streams might support only some of these capabilities.</span></span> <span data-ttu-id="8ff38-117">你可以使用查询其功能的流<xref:System.IO.Stream.CanRead%2A>， <xref:System.IO.Stream.CanWrite%2A>，和<xref:System.IO.Stream.CanSeek%2A>属性<xref:System.IO.Stream>类。</span><span class="sxs-lookup"><span data-stu-id="8ff38-117">You can query a stream for its capabilities by using the <xref:System.IO.Stream.CanRead%2A>, <xref:System.IO.Stream.CanWrite%2A>, and <xref:System.IO.Stream.CanSeek%2A> properties of the <xref:System.IO.Stream> class.</span></span>  
  
 <span data-ttu-id="8ff38-118"><xref:System.IO.Stream.Read%2A>和<xref:System.IO.Stream.Write%2A>方法读取和写入各种格式的数据。</span><span class="sxs-lookup"><span data-stu-id="8ff38-118">The <xref:System.IO.Stream.Read%2A> and <xref:System.IO.Stream.Write%2A> methods read and write data in a variety of formats.</span></span> <span data-ttu-id="8ff38-119">对于支持查找的流，使用<xref:System.IO.Stream.Seek%2A>和<xref:System.IO.Stream.SetLength%2A>方法和<xref:System.IO.Stream.Position%2A>和<xref:System.IO.Stream.Length%2A>属性，以查询和修改的当前位置和流的长度。</span><span class="sxs-lookup"><span data-stu-id="8ff38-119">For streams that support seeking, use the <xref:System.IO.Stream.Seek%2A> and <xref:System.IO.Stream.SetLength%2A> methods and the <xref:System.IO.Stream.Position%2A> and <xref:System.IO.Stream.Length%2A> properties to query and modify the current position and length of a stream.</span></span>  
  
 <span data-ttu-id="8ff38-120">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="8ff38-120">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="8ff38-121">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="8ff38-121">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="8ff38-122">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="8ff38-122">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="8ff38-123">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="8ff38-123">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="8ff38-124">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="8ff38-124">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="8ff38-125">释放<xref:System.IO.Stream>对象刷新任何缓冲的数据，并实质上调用<xref:System.IO.Stream.Flush%2A>为你的方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-125">Disposing a <xref:System.IO.Stream> object flushes any buffered data, and essentially calls the <xref:System.IO.Stream.Flush%2A> method for you.</span></span> <span data-ttu-id="8ff38-126"><xref:System.IO.Stream.Dispose%2A> 也会释放文件句柄、 网络连接或所用的任何内部缓冲内存等的操作系统资源。</span><span class="sxs-lookup"><span data-stu-id="8ff38-126"><xref:System.IO.Stream.Dispose%2A> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering.</span></span> <span data-ttu-id="8ff38-127"><xref:System.IO.BufferedStream>类提供了缓冲的流环绕以便提高读取和写入性能的另一个流的功能。</span><span class="sxs-lookup"><span data-stu-id="8ff38-127">The <xref:System.IO.BufferedStream> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.</span></span>  
  
 <span data-ttu-id="8ff38-128">从开始[!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<xref:System.IO.Stream>类包括异步方法，用于简化异步操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-128">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.IO.Stream> class includes async methods to simplify asynchronous operations.</span></span> <span data-ttu-id="8ff38-129">异步方法包含`Async`在其名称，如<xref:System.IO.Stream.ReadAsync%2A>， <xref:System.IO.Stream.WriteAsync%2A>， <xref:System.IO.Stream.CopyToAsync%2A>，和<xref:System.IO.Stream.FlushAsync%2A>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-129">An async method contains `Async` in its name, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>.</span></span> <span data-ttu-id="8ff38-130">这些方法，可在不阻塞主线程的情况下执行占用大量资源的 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-130">These methods enable you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="8ff38-131">在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 应用中一个耗时的流操作可能阻塞 UI 线程并让您的应用看起来好像不工作时，这种性能的考虑就显得尤为重要了。</span><span class="sxs-lookup"><span data-stu-id="8ff38-131">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="8ff38-132">结合使用异步方法`async`和`await`Visual Basic 和 C# 中的关键字。</span><span class="sxs-lookup"><span data-stu-id="8ff38-132">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="8ff38-133">当在中使用[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]应用，<xref:System.IO.Stream>包括两个扩展方法：<xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A>和<xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-133">When used in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app, <xref:System.IO.Stream> includes two extension methods: <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>.</span></span> <span data-ttu-id="8ff38-134">这些方法将转换<xref:System.IO.Stream>向流中的对象[!INCLUDE[wrt](~/includes/wrt-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="8ff38-134">These methods convert a <xref:System.IO.Stream> object to a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)].</span></span> <span data-ttu-id="8ff38-135">此外可以将转换的流[!INCLUDE[wrt](~/includes/wrt-md.md)]到<xref:System.IO.Stream>对象使用<xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A>和<xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-135">You can also convert a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)] to a <xref:System.IO.Stream> object by using the <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> methods.</span></span> <span data-ttu-id="8ff38-136">有关详细信息，请参阅[如何： 转换之间.NET Framework 流与 Windows 运行时流](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</span><span class="sxs-lookup"><span data-stu-id="8ff38-136">For more information, see [How to: Convert Between .NET Framework Streams and Windows Runtime Streams](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</span></span>  
  
 <span data-ttu-id="8ff38-137">某些流实现执行本地缓冲的基础的数据，以改进性能。</span><span class="sxs-lookup"><span data-stu-id="8ff38-137">Some stream implementations perform local buffering of the underlying data to improve performance.</span></span> <span data-ttu-id="8ff38-138">对于这样的流，你可以使用<xref:System.IO.Stream.Flush%2A>或<xref:System.IO.Stream.FlushAsync%2A>方法以清除所有内部缓冲区，并确保所有数据已都写入到基础数据源或存储库。</span><span class="sxs-lookup"><span data-stu-id="8ff38-138">For such streams, you can use the <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.FlushAsync%2A> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.</span></span>  
  
 <span data-ttu-id="8ff38-139">如果你需要一种数据流无后备存储区 （也称为位存储桶），使用<xref:System.IO.Stream.Null>字段来检索为此用途设计的流的实例。</span><span class="sxs-lookup"><span data-stu-id="8ff38-139">If you need a stream with no backing store (also known as a bit bucket), use the <xref:System.IO.Stream.Null> field to retrieve an instance of a stream that is designed for this purpose.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff38-140">下面的示例演示如何使用两个<xref:System.IO.FileStream>要以异步方式将文件从一个目录复制到另一个目录对象。</span><span class="sxs-lookup"><span data-stu-id="8ff38-140">The following example demonstrates how to use two <xref:System.IO.FileStream> objects to asynchronously copy the files from one directory to another directory.</span></span> <span data-ttu-id="8ff38-141"><xref:System.IO.FileStream> 类是从 <xref:System.IO.Stream> 类派生的。</span><span class="sxs-lookup"><span data-stu-id="8ff38-141">The <xref:System.IO.FileStream> class derives from the <xref:System.IO.Stream> class.</span></span> <span data-ttu-id="8ff38-142">需要注意 <xref:System.Web.UI.WebControls.Button.Click> 控件的 <xref:System.Windows.Controls.Button> 事件处理程序具有 `async` 修饰符标记，因为它调用异步方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-142">Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#1](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)]
 [!code-vb[Asynchronous_File_IO_async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="8ff38-143">当您实现的派生的类<see cref="T:System.IO.Stream" />，你必须提供实现<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />和<see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-143">When you implement a derived class of <see cref="T:System.IO.Stream" />, you must provide implementations for the <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> methods.</span></span> <span data-ttu-id="8ff38-144">异步方法<see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />， <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />，和<see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" />使用同步方法<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />和<see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />在其实现中。</span><span class="sxs-lookup"><span data-stu-id="8ff38-144">The asynchronous methods <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />, <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />, and <see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /> use the synchronous methods <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> in their implementations.</span></span> <span data-ttu-id="8ff38-145">因此，你的实现<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />和<see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />将与异步方法一起正常工作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-145">Therefore, your implementations of <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> will work correctly with the asynchronous methods.</span></span> <span data-ttu-id="8ff38-146">默认实现<see cref="M:System.IO.Stream.ReadByte" />和<see cref="M:System.IO.Stream.WriteByte(System.Byte)" />创建一个新的单元素字节数组，然后调用的实现<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />和<see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-146">The default implementations of <see cref="M:System.IO.Stream.ReadByte" /> and <see cref="M:System.IO.Stream.WriteByte(System.Byte)" /> create a new single-element byte array, and then call your implementations of <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />.</span></span> <span data-ttu-id="8ff38-147">派生自<see cref="T:System.IO.Stream" />，我们建议你重写这些方法以访问内部缓冲区，如果你有一个，以得到显著提高性能。</span><span class="sxs-lookup"><span data-stu-id="8ff38-147">When you derive from <see cref="T:System.IO.Stream" />, we recommend that you override these methods to access your internal buffer, if you have one, for substantially better performance.</span></span> <span data-ttu-id="8ff38-148">你还必须提供的实现<see cref="P:System.IO.Stream.CanRead" />， <see cref="P:System.IO.Stream.CanSeek" />， <see cref="P:System.IO.Stream.CanWrite" />， <see cref="M:System.IO.Stream.Flush" />， <see cref="P:System.IO.Stream.Length" />， <see cref="P:System.IO.Stream.Position" />， <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" />，和<see cref="M:System.IO.Stream.SetLength(System.Int64)" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-148">You must also provide implementations of <see cref="P:System.IO.Stream.CanRead" />, <see cref="P:System.IO.Stream.CanSeek" />, <see cref="P:System.IO.Stream.CanWrite" />, <see cref="M:System.IO.Stream.Flush" />, <see cref="P:System.IO.Stream.Length" />, <see cref="P:System.IO.Stream.Position" />, <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" />, and <see cref="M:System.IO.Stream.SetLength(System.Int64)" />.</span></span>  
  
 <span data-ttu-id="8ff38-149">不会重写<see cref="M:System.IO.Stream.Close" />方法，而是将所有放<see cref="T:System.IO.Stream" />中的清理逻辑<see cref="M:System.IO.Stream.Dispose(System.Boolean)" />方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-149">Do not override the <see cref="M:System.IO.Stream.Close" /> method, instead, put all the <see cref="T:System.IO.Stream" /> cleanup logic in the <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> method.</span></span> <span data-ttu-id="8ff38-150">有关详细信息，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="8ff38-150">For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span></para>
    </block>
    <altmember cref="T:System.IO.FileStream" />
    <altmember cref="T:System.IO.MemoryStream" />
    <altmember cref="T:System.IO.BufferedStream" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Stream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Stream();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ff38-151">初始化 <see cref="T:System.IO.Stream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="8ff38-151">Initializes a new instance of the <see cref="T:System.IO.Stream" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-152"><xref:System.IO.Stream> 是所有流的抽象基类。</span><span class="sxs-lookup"><span data-stu-id="8ff38-152"><xref:System.IO.Stream> is the abstract base class of all streams.</span></span>  
  
 <span data-ttu-id="8ff38-153">一些较常用继承的流<xref:System.IO.Stream>是<xref:System.IO.FileStream>，和<xref:System.IO.MemoryStream>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-153">Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginRead (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ff38-154">数据读入的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="8ff38-154">The buffer to read the data into.</span></span></param>
        <param name="offset"><span data-ttu-id="8ff38-155"><c>buffer</c> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</span><span class="sxs-lookup"><span data-stu-id="8ff38-155">The byte offset in <c>buffer</c> at which to begin writing data read from the stream.</span></span></param>
        <param name="count"><span data-ttu-id="8ff38-156">最多读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-156">The maximum number of bytes to read.</span></span></param>
        <param name="callback"><span data-ttu-id="8ff38-157">可选的异步回调，在完成读取时调用。</span><span class="sxs-lookup"><span data-stu-id="8ff38-157">An optional asynchronous callback, to be called when the read is complete.</span></span></param>
        <param name="state"><span data-ttu-id="8ff38-158">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</span><span class="sxs-lookup"><span data-stu-id="8ff38-158">A user-provided object that distinguishes this particular asynchronous read request from other requests.</span></span></param>
        <summary><span data-ttu-id="8ff38-159">开始异步读操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-159">Begins an asynchronous read operation.</span></span> <span data-ttu-id="8ff38-160">（请考虑改用 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />。）</span><span class="sxs-lookup"><span data-stu-id="8ff38-160">(Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span></span></summary>
        <returns><span data-ttu-id="8ff38-161">表示异步读取的 <see cref="T:System.IAsyncResult" />（可能仍处于挂起状态）。</span><span class="sxs-lookup"><span data-stu-id="8ff38-161">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-162">在 .NET Framework 4 和更早的版本中，您必须使用 <xref:System.IO.Stream.BeginRead%2A> 和 <xref:System.IO.Stream.EndRead%2A> 之类的方法来实现异步 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-162">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="8ff38-163">这些方法是在中仍然可用[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以支持旧版代码; 但是，新的异步方法，如<xref:System.IO.Stream.ReadAsync%2A>， <xref:System.IO.Stream.WriteAsync%2A>， <xref:System.IO.Stream.CopyToAsync%2A>，和<xref:System.IO.Stream.FlushAsync%2A>，帮助你更轻松地实现异步 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-163">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="8ff38-164">默认实现`BeginRead`流调用<xref:System.IO.Stream.Read%2A>方法以同步方式，这意味着，`Read`可能会阻止在某些流上。</span><span class="sxs-lookup"><span data-stu-id="8ff38-164">The default implementation of `BeginRead` on a stream calls the <xref:System.IO.Stream.Read%2A> method synchronously, which means that `Read` might block on some streams.</span></span> <span data-ttu-id="8ff38-165">但是，实例的类，如`FileStream`和`NetworkStream`完全支持异步操作，如果实例具有已以异步方式打开。</span><span class="sxs-lookup"><span data-stu-id="8ff38-165">However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously.</span></span> <span data-ttu-id="8ff38-166">因此，调用到`BeginRead`不会阻止在这些流上。</span><span class="sxs-lookup"><span data-stu-id="8ff38-166">Therefore, calls to `BeginRead` will not block on those streams.</span></span> <span data-ttu-id="8ff38-167">您可以重写`BeginRead`（通过使用异步委托，例如） 提供异步行为。</span><span class="sxs-lookup"><span data-stu-id="8ff38-167">You can override `BeginRead` (by using async delegates, for example) to provide asynchronous behavior.</span></span>  
  
 <span data-ttu-id="8ff38-168">传递`IAsyncResult`返回到值<xref:System.IO.Stream.EndRead%2A>以确定已读取的字节数并释放用于进行读取的操作系统资源的流的方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-168">Pass the `IAsyncResult` return value to the <xref:System.IO.Stream.EndRead%2A> method of the stream to determine how many bytes were read and to release operating system resources used for reading.</span></span> <span data-ttu-id="8ff38-169"><xref:System.IO.Stream.EndRead%2A> 必须为对每个调用一次调用<xref:System.IO.Stream.BeginRead%2A>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-169"><xref:System.IO.Stream.EndRead%2A> must be called once for every call to <xref:System.IO.Stream.BeginRead%2A>.</span></span> <span data-ttu-id="8ff38-170">你可完成此操作通过使用相同的代码调用`BeginRead`或传递给回调`BeginRead`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-170">You can do this either by using the same code that called `BeginRead` or in a callback passed to `BeginRead`.</span></span>  
  
 <span data-ttu-id="8ff38-171">异步读取或写入时，会发出，未完成 I/O 操作时，将更新流中的当前位置。</span><span class="sxs-lookup"><span data-stu-id="8ff38-171">The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.</span></span>  
  
 <span data-ttu-id="8ff38-172">多个同时进行的异步请求呈现请求完成顺序不确定。</span><span class="sxs-lookup"><span data-stu-id="8ff38-172">Multiple simultaneous asynchronous requests render the request completion order uncertain.</span></span>  
  
 <span data-ttu-id="8ff38-173">使用<xref:System.IO.Stream.CanRead%2A>属性来确定当前实例是否支持读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-173">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="8ff38-174">如果流已关闭或传递了无效参数，将立即引发异常从`BeginRead`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-174">If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginRead`.</span></span> <span data-ttu-id="8ff38-175">异步读取请求，例如，I/O 请求过程的磁盘故障过程中发生的错误发生在线程池线程和调用时引发异常`EndRead`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-175">Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndRead`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8ff38-176">尝试的异步读取超过了流的结尾，或者发生了磁盘错误。</span><span class="sxs-lookup"><span data-stu-id="8ff38-176">Attempted an asynchronous read past the end of the stream, or a disk error occurs.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ff38-177">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="8ff38-177">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-178">在流关闭后调用方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-178">Methods were called after the stream was closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-179">当前 <see langword="Stream" /> 实现不支持读取操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-179">The current <see langword="Stream" /> implementation does not support the read operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginWrite (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ff38-180">从中写入数据的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="8ff38-180">The buffer to write data from.</span></span></param>
        <param name="offset"><span data-ttu-id="8ff38-181">从中开始写入的 <c>buffer</c> 中的字节偏移量。</span><span class="sxs-lookup"><span data-stu-id="8ff38-181">The byte offset in <c>buffer</c> from which to begin writing.</span></span></param>
        <param name="count"><span data-ttu-id="8ff38-182">最多写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-182">The maximum number of bytes to write.</span></span></param>
        <param name="callback"><span data-ttu-id="8ff38-183">可选的异步回调，在完成写入时调用。</span><span class="sxs-lookup"><span data-stu-id="8ff38-183">An optional asynchronous callback, to be called when the write is complete.</span></span></param>
        <param name="state"><span data-ttu-id="8ff38-184">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</span><span class="sxs-lookup"><span data-stu-id="8ff38-184">A user-provided object that distinguishes this particular asynchronous write request from other requests.</span></span></param>
        <summary><span data-ttu-id="8ff38-185">开始异步写操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-185">Begins an asynchronous write operation.</span></span> <span data-ttu-id="8ff38-186">（请考虑改用 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />。）</span><span class="sxs-lookup"><span data-stu-id="8ff38-186">(Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span></span></summary>
        <returns><span data-ttu-id="8ff38-187">表示异步写入的 <see langword="IAsyncResult" />（可能仍处于挂起状态）。</span><span class="sxs-lookup"><span data-stu-id="8ff38-187">An <see langword="IAsyncResult" /> that represents the asynchronous write, which could still be pending.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-188">在 .NET Framework 4 和更早的版本中，您必须使用 <xref:System.IO.Stream.BeginWrite%2A> 和 <xref:System.IO.Stream.EndWrite%2A> 之类的方法来实现异步 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-188">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="8ff38-189">这些方法是在中仍然可用[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以支持旧版代码; 但是，新的异步方法，如<xref:System.IO.Stream.ReadAsync%2A>， <xref:System.IO.Stream.WriteAsync%2A>， <xref:System.IO.Stream.CopyToAsync%2A>，和<xref:System.IO.Stream.FlushAsync%2A>，帮助你更轻松地实现异步 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-189">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="8ff38-190">默认实现`BeginWrite`流调用<xref:System.IO.Stream.Write%2A>方法以同步方式，这意味着，`Write`可能会阻止在某些流上。</span><span class="sxs-lookup"><span data-stu-id="8ff38-190">The default implementation of `BeginWrite` on a stream calls the <xref:System.IO.Stream.Write%2A> method synchronously, which means that `Write` might block on some streams.</span></span> <span data-ttu-id="8ff38-191">但是，实例的类，如`FileStream`和`NetworkStream`完全支持异步操作，如果实例具有已以异步方式打开。</span><span class="sxs-lookup"><span data-stu-id="8ff38-191">However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously.</span></span> <span data-ttu-id="8ff38-192">因此，调用到`BeginWrite`不会阻止在这些流上。</span><span class="sxs-lookup"><span data-stu-id="8ff38-192">Therefore, calls to `BeginWrite` will not block on those streams.</span></span> <span data-ttu-id="8ff38-193">您可以重写`BeginWrite`（通过使用异步委托，例如） 提供异步行为。</span><span class="sxs-lookup"><span data-stu-id="8ff38-193">You can override `BeginWrite` (by using async delegates, for example) to provide asynchronous behavior.</span></span>  
  
 <span data-ttu-id="8ff38-194">传递`IAsyncResult`返回在当前方法<xref:System.IO.Stream.EndWrite%2A>以确保写入完成，并相应地释放资源。</span><span class="sxs-lookup"><span data-stu-id="8ff38-194">Pass the `IAsyncResult` returned by the current method to <xref:System.IO.Stream.EndWrite%2A> to ensure that the write completes and frees resources appropriately.</span></span> <span data-ttu-id="8ff38-195"><xref:System.IO.Stream.EndWrite%2A> 必须为对每个调用一次调用<xref:System.IO.Stream.BeginWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-195"><xref:System.IO.Stream.EndWrite%2A> must be called once for every call to <xref:System.IO.Stream.BeginWrite%2A>.</span></span> <span data-ttu-id="8ff38-196">你可完成此操作通过使用相同的代码调用`BeginWrite`或传递给回调`BeginWrite`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-196">You can do this either by using the same code that called `BeginWrite` or in a callback passed to `BeginWrite`.</span></span> <span data-ttu-id="8ff38-197">如果异步写入过程中发生错误，将不会引发异常之前`EndWrite`使用调用`IAsyncResult`此方法返回。</span><span class="sxs-lookup"><span data-stu-id="8ff38-197">If an error occurs during an asynchronous write, an exception will not be thrown until `EndWrite` is called with the `IAsyncResult` returned by this method.</span></span>  
  
 <span data-ttu-id="8ff38-198">如果流是可写，在流末尾写入将扩展流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-198">If a stream is writable, writing at the end of the stream expands the stream.</span></span>  
  
 <span data-ttu-id="8ff38-199">当不是在 I/O 操作完成时发出的异步读取或写入时，将更新流中的当前位置。</span><span class="sxs-lookup"><span data-stu-id="8ff38-199">The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.</span></span> <span data-ttu-id="8ff38-200">多个同时进行的异步请求呈现请求完成顺序不确定。</span><span class="sxs-lookup"><span data-stu-id="8ff38-200">Multiple simultaneous asynchronous requests render the request completion order uncertain.</span></span>  
  
 <span data-ttu-id="8ff38-201">使用<xref:System.IO.Stream.CanWrite%2A>属性来确定当前实例是否支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-201">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 <span data-ttu-id="8ff38-202">如果流已关闭或传递了无效参数，将立即引发异常从`BeginWrite`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-202">If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginWrite`.</span></span> <span data-ttu-id="8ff38-203">异步写入请求，例如，I/O 请求过程的磁盘故障过程中发生的错误发生在线程池线程和调用时引发异常`EndWrite`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-203">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndWrite`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8ff38-204">尝试进行的异步写入超过了流的结尾，或者发生了磁盘错误。</span><span class="sxs-lookup"><span data-stu-id="8ff38-204">Attempted an asynchronous write past the end of the stream, or a disk error occurs.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ff38-205">一个或多个自变量无效。</span><span class="sxs-lookup"><span data-stu-id="8ff38-205">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-206">在流关闭后调用方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-206">Methods were called after the stream was closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-207">当前 <see langword="Stream" /> 实现不支持写入操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-207">The current <see langword="Stream" /> implementation does not support the write operation.</span></span></exception>
        <altmember cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)" />
        <altmember cref="P:System.IO.Stream.CanWrite" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public abstract bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff38-208">当在派生类中重写时，获取指示当前流是否支持读取的值。</span><span class="sxs-lookup"><span data-stu-id="8ff38-208">When overridden in a derived class, gets a value indicating whether the current stream supports reading.</span></span></summary>
        <value>
          <span data-ttu-id="8ff38-209">如果流支持读取，为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-209"><see langword="true" /> if the stream supports reading; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-210">如果从派生的类<xref:System.IO.Stream>不支持读取，则调用<xref:System.IO.Stream.Read%2A>， <xref:System.IO.Stream.ReadByte%2A>，和<xref:System.IO.Stream.BeginRead%2A>方法将引发<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-210">If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.Stream.Read%2A>, <xref:System.IO.Stream.ReadByte%2A>, and <xref:System.IO.Stream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="8ff38-211">如果流已关闭，则此属性返回`false`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-211">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff38-212">以下是使用的示例`CanRead`属性。</span><span class="sxs-lookup"><span data-stu-id="8ff38-212">The following is an example of using the `CanRead` property.</span></span>  
  
 [!code-cpp[Classic FileStream.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileStream.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CS/source.cs#1)]
 [!code-vb[Classic FileStream.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public abstract bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff38-213">当在派生类中重写时，获取指示当前流是否支持查找功能的值。</span><span class="sxs-lookup"><span data-stu-id="8ff38-213">When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</span></span></summary>
        <value>
          <span data-ttu-id="8ff38-214">如果流支持查找，为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-214"><see langword="true" /> if the stream supports seeking; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-215">如果从派生的类<xref:System.IO.Stream>不支持查找，则调用<xref:System.IO.Stream.Length%2A>， <xref:System.IO.Stream.SetLength%2A>， <xref:System.IO.Stream.Position%2A>，和<xref:System.IO.Stream.Seek%2A>引发<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-215">If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.Stream.Length%2A>, <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Position%2A>, and <xref:System.IO.Stream.Seek%2A> throw a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="8ff38-216">如果流已关闭，则此属性返回`false`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-216">If the stream is closed, this property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public virtual bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff38-217">获取一个值，该值确定当前流是否可以超时。</span><span class="sxs-lookup"><span data-stu-id="8ff38-217">Gets a value that determines whether the current stream can time out.</span></span></summary>
        <value><span data-ttu-id="8ff38-218">一个确定当前流是否可以超时的值。</span><span class="sxs-lookup"><span data-stu-id="8ff38-218">A value that determines whether the current stream can time out.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-219"><xref:System.IO.Stream.CanTimeout%2A> 属性总是返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-219">The <xref:System.IO.Stream.CanTimeout%2A> property always returns `false`.</span></span> <span data-ttu-id="8ff38-220">某些流实现要求不同的行为，如<xref:System.Net.Sockets.NetworkStream>，如果中断或丢失网络连接超时的情况。</span><span class="sxs-lookup"><span data-stu-id="8ff38-220">Some stream implementations require different behavior, such as <xref:System.Net.Sockets.NetworkStream>, which times out if network connectivity is interrupted or lost.</span></span> <span data-ttu-id="8ff38-221">如果你要实现一个流，它必须能超时，应替代此属性返回`true`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-221">If you are implementing a stream that must be able to time out, this property should be overridden to return `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.Stream.ReadTimeout" />
        <altmember cref="P:System.IO.Stream.WriteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public abstract bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff38-222">当在派生类中重写时，获取指示当前流是否支持写入功能的值。</span><span class="sxs-lookup"><span data-stu-id="8ff38-222">When overridden in a derived class, gets a value indicating whether the current stream supports writing.</span></span></summary>
        <value>
          <span data-ttu-id="8ff38-223">如果流支持写入，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-223"><see langword="true" /> if the stream supports writing; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-224">如果从派生的类<xref:System.IO.Stream>不支持写入，调用<xref:System.IO.Stream.Write%2A>， <xref:System.IO.Stream.BeginWrite%2A>，或<xref:System.IO.Stream.WriteByte%2A>引发<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-224">If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.Write%2A>, <xref:System.IO.Stream.BeginWrite%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="8ff38-225">如果流已关闭，则此属性返回`false`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-225">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff38-226">以下是使用的示例`CanWrite`属性。</span><span class="sxs-lookup"><span data-stu-id="8ff38-226">The following is an example of using the `CanWrite` property.</span></span>  
  
 [!code-cpp[Classic Stream.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stream.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/CS/source.cs#1)]
 [!code-vb[Classic Stream.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ff38-227">关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。</span><span class="sxs-lookup"><span data-stu-id="8ff38-227">Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</span></span> <span data-ttu-id="8ff38-228">不直接调用此方法，而应确保流得以正确释放。</span><span class="sxs-lookup"><span data-stu-id="8ff38-228">Instead of calling this method, ensure that the stream is properly disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-229">此方法调用<xref:System.IO.Stream.Dispose%2A>，并指定`true`释放所有资源。</span><span class="sxs-lookup"><span data-stu-id="8ff38-229">This method calls <xref:System.IO.Stream.Dispose%2A>, specifying `true` to release all resources.</span></span> <span data-ttu-id="8ff38-230">不需要明确调用<xref:System.IO.Stream.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-230">You do not have to specifically call the <xref:System.IO.Stream.Close%2A> method.</span></span> <span data-ttu-id="8ff38-231">相反，确保每个<xref:System.IO.Stream>正确释放对象。</span><span class="sxs-lookup"><span data-stu-id="8ff38-231">Instead, ensure that every <xref:System.IO.Stream> object is properly disposed.</span></span> <span data-ttu-id="8ff38-232">你可以声明<xref:System.IO.Stream>对象内`using`块 (或`Using`阻止在 Visual Basic 中) 以确保释放的流和它的所有资源，或你可以明确地调用<xref:System.IO.Stream.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-232">You can declare <xref:System.IO.Stream> objects within a `using` block (or `Using` block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <xref:System.IO.Stream.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="8ff38-233">如果不显式调用的实现，刷新该流不会刷新其基础编码器<xref:System.IO.Stream.Flush%2A>或`Close`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-233">Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <xref:System.IO.Stream.Flush%2A> or `Close`.</span></span> <span data-ttu-id="8ff38-234">设置<xref:System.IO.StreamWriter.AutoFlush%2A>到`true`意味着数据从缓冲区刷新到流中，但不是会刷新编码器状态。</span><span class="sxs-lookup"><span data-stu-id="8ff38-234">Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="8ff38-235">这将允许编码器，以便它可以正确编码的字符的下一步块保持其状态 （部分字符）。</span><span class="sxs-lookup"><span data-stu-id="8ff38-235">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="8ff38-236">这种情况下会影响 UTF8 和 UTF7 编码器收到的相邻字符后才可以编码某些字符。</span><span class="sxs-lookup"><span data-stu-id="8ff38-236">This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="8ff38-237">尝试操作流已关闭流后可能会引发<xref:System.ObjectDisposedException>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-237">Attempts to manipulate the stream after the stream has been closed might throw an <xref:System.ObjectDisposedException>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="8ff38-238">在派生类中，不会重写<see cref="M:System.IO.Stream.Close" />方法，而是将所有放<see langword="Stream" />中的清理逻辑<see cref="M:System.IO.Stream.Dispose(System.Boolean)" />方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-238">In derived classes, do not override the <see cref="M:System.IO.Stream.Close" /> method, instead, put all of the <see langword="Stream" /> cleanup logic in the <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> method.</span></span> <span data-ttu-id="8ff38-239">有关详细信息，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="8ff38-239">For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ff38-240">从当前流中读取字节并将其写入到另一流中。</span><span class="sxs-lookup"><span data-stu-id="8ff38-240">Reads the bytes from the current stream and writes them to another stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.IO.Stream destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.IO.Stream destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyTo(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(System::IO::Stream ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="8ff38-241">当前流的内容将复制到的流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-241">The stream to which the contents of the current stream will be copied.</span></span></param>
        <summary><span data-ttu-id="8ff38-242">从当前流中读取字节并将其写入到另一流中。</span><span class="sxs-lookup"><span data-stu-id="8ff38-242">Reads the bytes from the current stream and writes them to another stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-243">复制开始的当前流中当前位置，并不重置目标流的当前位置复制操作完成后。</span><span class="sxs-lookup"><span data-stu-id="8ff38-243">Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff38-244">下面的示例将复制的内容<xref:System.IO.FileStream>到<xref:System.IO.MemoryStream>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-244">The following example copies the contents of a <xref:System.IO.FileStream> to a <xref:System.IO.MemoryStream>.</span></span>  
  
 [!code-csharp[System.IO.Stream.CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stream.copyto/cs/program.cs#1)]
 [!code-vb[System.IO.Stream.CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stream.copyto/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-245"><paramref name="destination" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-245"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-246">当前流不支持读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-246">The current stream does not support reading.</span></span>  
  
 <span data-ttu-id="8ff38-247">或</span><span class="sxs-lookup"><span data-stu-id="8ff38-247">-or-</span></span>  
  
 <span data-ttu-id="8ff38-248"><paramref name="destination" /> 不支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-248"><paramref name="destination" /> does not support writing.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-249">在调用 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法前当前流或 <paramref name="destination" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="8ff38-249">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8ff38-250">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="8ff38-250">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.IO.Stream destination, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.IO.Stream destination, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Stream, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(System::IO::Stream ^ destination, int bufferSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="8ff38-251">当前流的内容将复制到的流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-251">The stream to which the contents of the current stream will be copied.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="8ff38-252">缓冲区的大小。</span><span class="sxs-lookup"><span data-stu-id="8ff38-252">The size of the buffer.</span></span> <span data-ttu-id="8ff38-253">此值必须大于零。</span><span class="sxs-lookup"><span data-stu-id="8ff38-253">This value must be greater than zero.</span></span> <span data-ttu-id="8ff38-254">默认大小为 81920。</span><span class="sxs-lookup"><span data-stu-id="8ff38-254">The default size is 81920.</span></span></param>
        <summary><span data-ttu-id="8ff38-255">使用指定的缓冲区大小，从当前流中读取字节并将其写入到另一流中。</span><span class="sxs-lookup"><span data-stu-id="8ff38-255">Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-256">复制开始的当前流中当前位置，并不重置目标流的当前位置复制操作完成后。</span><span class="sxs-lookup"><span data-stu-id="8ff38-256">Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-257"><paramref name="destination" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-257"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8ff38-258"><paramref name="bufferSize" /> 为负数或零。</span><span class="sxs-lookup"><span data-stu-id="8ff38-258"><paramref name="bufferSize" /> is negative or zero.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-259">当前流不支持读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-259">The current stream does not support reading.</span></span>  
  
 <span data-ttu-id="8ff38-260">或</span><span class="sxs-lookup"><span data-stu-id="8ff38-260">-or-</span></span>  
  
 <span data-ttu-id="8ff38-261"><paramref name="destination" /> 不支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-261"><paramref name="destination" /> does not support writing.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-262">在调用 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法前当前流或 <paramref name="destination" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="8ff38-262">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8ff38-263">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="8ff38-263">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ff38-264">从当前流中异步读取字节并将其写入到另一个流中。</span><span class="sxs-lookup"><span data-stu-id="8ff38-264">Asynchronously reads the bytes from the current stream and writes them to another stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyToAsync (destination As Stream) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="8ff38-265">当前流的内容将复制到的流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-265">The stream to which the contents of the current stream will be copied.</span></span></param>
        <summary><span data-ttu-id="8ff38-266">从当前流中异步读取字节并将其写入到另一个流中。</span><span class="sxs-lookup"><span data-stu-id="8ff38-266">Asynchronously reads the bytes from the current stream and writes them to another stream.</span></span></summary>
        <returns><span data-ttu-id="8ff38-267">表示异步复制操作的任务。</span><span class="sxs-lookup"><span data-stu-id="8ff38-267">A task that represents the asynchronous copy operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-268"><xref:System.IO.Stream.CopyToAsync%2A>方法使您能够在不阻塞主线程的情况下执行占用大量资源的 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-268">The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="8ff38-269">在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 应用中一个耗时的流操作可能阻塞 UI 线程并让您的应用看起来好像不工作时，这种性能的考虑就显得尤为重要了。</span><span class="sxs-lookup"><span data-stu-id="8ff38-269">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="8ff38-270">结合使用异步方法`async`和`await`Visual Basic 和 C# 中的关键字。</span><span class="sxs-lookup"><span data-stu-id="8ff38-270">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="8ff38-271">复制当前流中当前位置开始。</span><span class="sxs-lookup"><span data-stu-id="8ff38-271">Copying begins at the current position in the current stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff38-272">下面的示例演示如何使用两个<xref:System.IO.FileStream>要以异步方式将文件从一个目录复制到另一个对象。</span><span class="sxs-lookup"><span data-stu-id="8ff38-272">The following example demonstrates how to use two <xref:System.IO.FileStream> objects to asynchronously copy the files from one directory to another.</span></span> <span data-ttu-id="8ff38-273"><xref:System.IO.FileStream> 类是从 <xref:System.IO.Stream> 类派生的。</span><span class="sxs-lookup"><span data-stu-id="8ff38-273">The <xref:System.IO.FileStream> class derives from the <xref:System.IO.Stream> class.</span></span>  <span data-ttu-id="8ff38-274">请注意，<xref:System.Web.UI.WebControls.Button.Click>事件处理程序<xref:System.Windows.Controls.Button>控件将标有`async`修饰符因为它调用异步方法</span><span class="sxs-lookup"><span data-stu-id="8ff38-274">Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#1](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)]
 [!code-vb[Asynchronous_File_IO_async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-275"><paramref name="destination" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-275"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-276">当前流或目标流已释放。</span><span class="sxs-lookup"><span data-stu-id="8ff38-276">Either the current stream or the destination stream is disposed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-277">当前流不支持阅读，或目标流不支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-277">The current stream does not support reading, or the destination stream does not support writing.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyToAsync (destination As Stream, bufferSize As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination, int bufferSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="8ff38-278">当前流的内容将复制到的流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-278">The stream to which the contents of the current stream will be copied.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="8ff38-279">缓冲区的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="8ff38-279">The size, in bytes, of the buffer.</span></span> <span data-ttu-id="8ff38-280">此值必须大于零。</span><span class="sxs-lookup"><span data-stu-id="8ff38-280">This value must be greater than zero.</span></span> <span data-ttu-id="8ff38-281">默认大小为 81920。</span><span class="sxs-lookup"><span data-stu-id="8ff38-281">The default size is 81920.</span></span></param>
        <summary><span data-ttu-id="8ff38-282">使用指定的缓冲区大小，从当前流中异步读取字节并将其写入到另一流中。</span><span class="sxs-lookup"><span data-stu-id="8ff38-282">Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</span></span></summary>
        <returns><span data-ttu-id="8ff38-283">表示异步复制操作的任务。</span><span class="sxs-lookup"><span data-stu-id="8ff38-283">A task that represents the asynchronous copy operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-284"><xref:System.IO.Stream.CopyToAsync%2A>方法使您能够在不阻塞主线程的情况下执行占用大量资源的 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-284">The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="8ff38-285">在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 应用中一个耗时的流操作可能阻塞 UI 线程并让您的应用看起来好像不工作时，这种性能的考虑就显得尤为重要了。</span><span class="sxs-lookup"><span data-stu-id="8ff38-285">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="8ff38-286">结合使用异步方法`async`和`await`Visual Basic 和 C# 中的关键字。</span><span class="sxs-lookup"><span data-stu-id="8ff38-286">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="8ff38-287">复制当前流中当前位置开始。</span><span class="sxs-lookup"><span data-stu-id="8ff38-287">Copying begins at the current position in the current stream.</span></span>  
  
 <span data-ttu-id="8ff38-288">两个流之间复制的示例，请参阅<xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29>重载。</span><span class="sxs-lookup"><span data-stu-id="8ff38-288">For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-289"><paramref name="destination" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-289"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8ff38-290"><paramref name="buffersize" /> 为负数或零。</span><span class="sxs-lookup"><span data-stu-id="8ff38-290"><paramref name="buffersize" /> is negative or zero.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-291">当前流或目标流已释放。</span><span class="sxs-lookup"><span data-stu-id="8ff38-291">Either the current stream or the destination stream is disposed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-292">当前流不支持阅读，或目标流不支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-292">The current stream does not support reading, or the destination stream does not support writing.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination, int32 bufferSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination, int bufferSize, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="8ff38-293">当前流的内容将复制到的流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-293">The stream to which the contents of the current stream will be copied.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="8ff38-294">缓冲区的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="8ff38-294">The size, in bytes, of the buffer.</span></span> <span data-ttu-id="8ff38-295">此值必须大于零。</span><span class="sxs-lookup"><span data-stu-id="8ff38-295">This value must be greater than zero.</span></span> <span data-ttu-id="8ff38-296">默认大小为 81920。</span><span class="sxs-lookup"><span data-stu-id="8ff38-296">The default size is 81920.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="8ff38-297">要监视取消请求的标记。</span><span class="sxs-lookup"><span data-stu-id="8ff38-297">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="8ff38-298">默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-298">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="8ff38-299">使用指定的缓冲区大小和取消令牌，从当前流中异步读取字节并将其写入到另一个流中。</span><span class="sxs-lookup"><span data-stu-id="8ff38-299">Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</span></span></summary>
        <returns><span data-ttu-id="8ff38-300">表示异步复制操作的任务。</span><span class="sxs-lookup"><span data-stu-id="8ff38-300">A task that represents the asynchronous copy operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-301"><xref:System.IO.Stream.CopyToAsync%2A>方法使您能够在不阻塞主线程的情况下执行占用大量资源的 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-301">The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="8ff38-302">在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 应用中一个耗时的流操作可能阻塞 UI 线程并让您的应用看起来好像不工作时，这种性能的考虑就显得尤为重要了。</span><span class="sxs-lookup"><span data-stu-id="8ff38-302">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="8ff38-303">结合使用异步方法`async`和`await`Visual Basic 和 C# 中的关键字。</span><span class="sxs-lookup"><span data-stu-id="8ff38-303">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="8ff38-304">如果在完成之前，将取消该操作，返回的任务包含<xref:System.Threading.Tasks.TaskStatus.Canceled>值<xref:System.Threading.Tasks.Task.Status%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="8ff38-304">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="8ff38-305">复制当前流中当前位置开始。</span><span class="sxs-lookup"><span data-stu-id="8ff38-305">Copying begins at the current position in the current stream.</span></span>  
  
 <span data-ttu-id="8ff38-306">两个流之间复制的示例，请参阅<xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29>重载。</span><span class="sxs-lookup"><span data-stu-id="8ff38-306">For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-307"><paramref name="destination" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-307"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8ff38-308"><paramref name="buffersize" /> 为负数或零。</span><span class="sxs-lookup"><span data-stu-id="8ff38-308"><paramref name="buffersize" /> is negative or zero.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-309">当前流或目标流已释放。</span><span class="sxs-lookup"><span data-stu-id="8ff38-309">Either the current stream or the destination stream is disposed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-310">当前流不支持阅读，或目标流不支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-310">The current stream does not support reading, or the destination stream does not support writing.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWaitHandle">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.WaitHandle CreateWaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.WaitHandle CreateWaitHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CreateWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateWaitHandle () As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Threading::WaitHandle ^ CreateWaitHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CreateWaitHandle will be removed eventually.  Please use "new ManualResetEvent(false)" instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ff38-311">分配 <see cref="T:System.Threading.WaitHandle" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="8ff38-311">Allocates a <see cref="T:System.Threading.WaitHandle" /> object.</span></span></summary>
        <returns><span data-ttu-id="8ff38-312">对已分配的 <see langword="WaitHandle" /> 的引用。</span><span class="sxs-lookup"><span data-stu-id="8ff38-312">A reference to the allocated <see langword="WaitHandle" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-313">当对第一次调用，当前方法将创建`WaitHandle`对象并将其返回。</span><span class="sxs-lookup"><span data-stu-id="8ff38-313">When called for the first time, the current method creates a `WaitHandle` object and returns it.</span></span> <span data-ttu-id="8ff38-314">在后续调用中，`CreateWaitHandle`返回到新的等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="8ff38-314">On subsequent calls, `CreateWaitHandle` returns a reference to a new wait handle.</span></span>  
  
 <span data-ttu-id="8ff38-315">使用此方法，如果你实现异步方法，并且需要一种方法中进行阻止<xref:System.IO.Stream.EndRead%2A>或<xref:System.IO.Stream.EndWrite%2A>直到异步操作已完成。</span><span class="sxs-lookup"><span data-stu-id="8ff38-315">Use this method if you implement the asynchronous methods and require a way of blocking in <xref:System.IO.Stream.EndRead%2A> or <xref:System.IO.Stream.EndWrite%2A> until the asynchronous operation is complete.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ff38-316">释放由 <see cref="T:System.IO.Stream" /> 对象使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="8ff38-316">Releases all resources used by the <see cref="T:System.IO.Stream" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ff38-317">释放由 <see cref="T:System.IO.Stream" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="8ff38-317">Releases all resources used by the <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-318">此方法释放流中，通过写入后备存储的任何更改并关闭流，以释放资源。</span><span class="sxs-lookup"><span data-stu-id="8ff38-318">This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.</span></span>  
  
 <span data-ttu-id="8ff38-319">调用`Dispose`允许使用的资源<xref:System.IO.Stream>可以重新分配用于其他目的。</span><span class="sxs-lookup"><span data-stu-id="8ff38-319">Calling `Dispose` allows the resources used by the <xref:System.IO.Stream> to be reallocated for other purposes.</span></span> <span data-ttu-id="8ff38-320">有关详细信息`Dispose`，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="8ff38-320">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="8ff38-321">将你的流对象中的所有清理逻辑<see cref="M:System.IO.Stream.Dispose(System.Boolean)" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-321">Place all cleanup logic for your stream object in <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />.</span></span> <span data-ttu-id="8ff38-322">不会重写<see cref="M:System.IO.Stream.Close" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-322">Do not override <see cref="M:System.IO.Stream.Close" />.</span></span>  
  
 <span data-ttu-id="8ff38-323">请注意，由于向后兼容性要求，此方法的实现不同于推荐的指导的释放模式。</span><span class="sxs-lookup"><span data-stu-id="8ff38-323">Note that because of backward compatibility requirements, this method's implementation differs from the recommended guidance for the Dispose pattern.</span></span>  <span data-ttu-id="8ff38-324">此方法调用<see cref="M:System.IO.Stream.Close" />，后者随后调用<see cref="M:System.IO.Stream.Dispose(System.Boolean)" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-324">This method calls <see cref="M:System.IO.Stream.Close" />, which then calls <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="8ff38-325">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-325"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="8ff38-326">释放由 <see cref="T:System.IO.Stream" /> 占用的非托管资源，还可以另外再释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="8ff38-326">Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-327">你应通过指定释放所有资源`true`为`disposing`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-327">You should release all resources by specifying `true` for `disposing`.</span></span> <span data-ttu-id="8ff38-328">当`disposing`是`true`，流还可确保数据刷新到基础的缓冲区，并访问其他可终结的对象。</span><span class="sxs-lookup"><span data-stu-id="8ff38-328">When `disposing` is `true`, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.</span></span>  <span data-ttu-id="8ff38-329">这不可能从由于缺乏终结器之间的排序终结器中调用时。</span><span class="sxs-lookup"><span data-stu-id="8ff38-329">This may not be possible when called from a finalizer due a lack of ordering among finalizers.</span></span>  
  
 <span data-ttu-id="8ff38-330">如果你的流使用操作系统句柄来与其源进行通信，请考虑使用的一个子类<xref:System.Runtime.InteropServices.SafeHandle>为此目的。</span><span class="sxs-lookup"><span data-stu-id="8ff38-330">If your stream is using an operating system handle to communicate with its source, consider using a subclass of <xref:System.Runtime.InteropServices.SafeHandle> for this purpose.</span></span>  
  
 <span data-ttu-id="8ff38-331">此方法称为由公共<xref:System.ComponentModel.Component.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-331">This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="8ff38-332"><xref:System.ComponentModel.Component.Dispose%2A> 调用受保护<xref:System.IO.Stream.Dispose%2A>方法替换`disposing`参数设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-332"><xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.Stream.Dispose%2A> method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="8ff38-333"><xref:System.Object.Finalize%2A> 调用<xref:System.IO.Stream.Dispose%2A>与`disposing`设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-333"><xref:System.Object.Finalize%2A> invokes <xref:System.IO.Stream.Dispose%2A> with `disposing` set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="8ff38-334">在派生类中，不会重写<see cref="M:System.IO.Stream.Close" />方法，而是将所有中的流清理逻辑放<see cref="M:System.IO.Stream.Dispose(System.Boolean)" />方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-334">In derived classes, do not override the <see cref="M:System.IO.Stream.Close" /> method, instead, put all of the Stream cleanup logic in the <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> method.</span></span>  
  
 <span data-ttu-id="8ff38-335"><see cref="M:System.ComponentModel.Component.Dispose" /> 可以由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="8ff38-335"><see cref="M:System.ComponentModel.Component.Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="8ff38-336">重写 <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> 时，请注意不要引用在以前调用 <see cref="M:System.ComponentModel.Component.Dispose" /> 时已释放的对象。</span><span class="sxs-lookup"><span data-stu-id="8ff38-336">When overriding <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see cref="M:System.ComponentModel.Component.Dispose" />.</span></span> <span data-ttu-id="8ff38-337">有关如何实现详细信息<see cref="M:System.IO.Stream.Dispose(System.Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="8ff38-337">For more information about how to implement <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 <span data-ttu-id="8ff38-338">有关详细信息<see cref="M:System.ComponentModel.Component.Dispose" />和<see cref="M:System.Object.Finalize" />，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="8ff38-338">For more information about <see cref="M:System.ComponentModel.Component.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public virtual int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8ff38-339">对要完成的挂起异步请求的引用。</span><span class="sxs-lookup"><span data-stu-id="8ff38-339">The reference to the pending asynchronous request to finish.</span></span></param>
        <summary><span data-ttu-id="8ff38-340">等待挂起的异步读取完成。</span><span class="sxs-lookup"><span data-stu-id="8ff38-340">Waits for the pending asynchronous read to complete.</span></span> <span data-ttu-id="8ff38-341">（请考虑改用 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />。）</span><span class="sxs-lookup"><span data-stu-id="8ff38-341">(Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span></span></summary>
        <returns><span data-ttu-id="8ff38-342">从流中读取的字节数，介于零 (0) 和所请求的字节数之间。</span><span class="sxs-lookup"><span data-stu-id="8ff38-342">The number of bytes read from the stream, between zero (0) and the number of bytes you requested.</span></span> <span data-ttu-id="8ff38-343">流仅在流结尾返回零 (0)，否则在至少有 1 个字节可用之前应一直进行阻止。</span><span class="sxs-lookup"><span data-stu-id="8ff38-343">Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-344">在 .NET Framework 4 和更早的版本中，您必须使用 <xref:System.IO.Stream.BeginRead%2A> 和 <xref:System.IO.Stream.EndRead%2A> 之类的方法来实现异步 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-344">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="8ff38-345">这些方法是在中仍然可用[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以支持旧版代码; 但是，新的异步方法，如<xref:System.IO.Stream.ReadAsync%2A>， <xref:System.IO.Stream.WriteAsync%2A>， <xref:System.IO.Stream.CopyToAsync%2A>，和<xref:System.IO.Stream.FlushAsync%2A>，帮助你更轻松地实现异步 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-345">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="8ff38-346">调用`EndRead`以确定已从流中读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-346">Call `EndRead` to determine how many bytes were read from the stream.</span></span>  
  
 <span data-ttu-id="8ff38-347">`EndRead` 可以在上一次调用每个<xref:System.IAsyncResult>从<xref:System.IO.Stream.BeginRead%2A>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-347">`EndRead` can be called once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginRead%2A>.</span></span>  
  
 <span data-ttu-id="8ff38-348">此方法将一直阻塞，直到 I/O 操作已完成。</span><span class="sxs-lookup"><span data-stu-id="8ff38-348">This method blocks until the I/O operation has completed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-349"><paramref name="asyncResult" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-349"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ff38-350">处于挂起状态的读取操作的句柄不可用。</span><span class="sxs-lookup"><span data-stu-id="8ff38-350">A handle to the pending read operation is not available.</span></span>  
  
 <span data-ttu-id="8ff38-351">或</span><span class="sxs-lookup"><span data-stu-id="8ff38-351">-or-</span></span>  
  
 <span data-ttu-id="8ff38-352">挂起操作不支持读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-352">The pending operation does not support reading.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8ff38-353"><paramref name="asyncResult" /> 不是源自当前流的 <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-353"><paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8ff38-354">流已关闭或出现了内部错误。</span><span class="sxs-lookup"><span data-stu-id="8ff38-354">The stream is closed or an internal error has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public virtual void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8ff38-355">对未完成的异步 I/O 请求的引用。</span><span class="sxs-lookup"><span data-stu-id="8ff38-355">A reference to the outstanding asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="8ff38-356">结束异步写操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-356">Ends an asynchronous write operation.</span></span> <span data-ttu-id="8ff38-357">（请考虑改用 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />。）</span><span class="sxs-lookup"><span data-stu-id="8ff38-357">(Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-358">在 .NET Framework 4 和更早的版本中，您必须使用 <xref:System.IO.Stream.BeginWrite%2A> 和 <xref:System.IO.Stream.EndWrite%2A> 之类的方法来实现异步 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-358">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="8ff38-359">这些方法是在中仍然可用[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以支持旧版代码; 但是，新的异步方法，如<xref:System.IO.Stream.ReadAsync%2A>， <xref:System.IO.Stream.WriteAsync%2A>， <xref:System.IO.Stream.CopyToAsync%2A>，和<xref:System.IO.Stream.FlushAsync%2A>，帮助你更轻松地实现异步 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-359">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="8ff38-360">`EndWrite` 必须在上一次调用每个<xref:System.IAsyncResult>从<xref:System.IO.Stream.BeginWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-360">`EndWrite` must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginWrite%2A>.</span></span>  
  
 <span data-ttu-id="8ff38-361">此方法将一直阻塞，直到 I/O 操作已完成。</span><span class="sxs-lookup"><span data-stu-id="8ff38-361">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="8ff38-362">异步写入请求，例如，I/O 请求过程的磁盘故障过程中发生的错误发生在线程池线程和调用时变得可见`EndWrite`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-362">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to `EndWrite`.</span></span> <span data-ttu-id="8ff38-363">由线程池线程引发的异常时调用将无法看到`EndWrite`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-363">Exceptions thrown by the thread pool thread will not be visible when calling `EndWrite`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-364"><paramref name="asyncResult" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-364"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ff38-365">处于挂起状态的写入操作的句柄不可用。</span><span class="sxs-lookup"><span data-stu-id="8ff38-365">A handle to the pending write operation is not available.</span></span>  
  
 <span data-ttu-id="8ff38-366">或</span><span class="sxs-lookup"><span data-stu-id="8ff38-366">-or-</span></span>  
  
 <span data-ttu-id="8ff38-367">挂起操作不支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-367">The pending operation does not support writing.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8ff38-368"><paramref name="asyncResult" /> 不是源自当前流的 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-368"><paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8ff38-369">流已关闭或出现了内部错误。</span><span class="sxs-lookup"><span data-stu-id="8ff38-369">The stream is closed or an internal error has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ff38-370">当在派生类中重写时，将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。</span><span class="sxs-lookup"><span data-stu-id="8ff38-370">When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-371">重写`Flush`上实现缓冲区的流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-371">Override `Flush` on streams that implement a buffer.</span></span> <span data-ttu-id="8ff38-372">使用此方法将任何信息从基础缓冲区移动到其目标、 清除和 / 或缓冲区。</span><span class="sxs-lookup"><span data-stu-id="8ff38-372">Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both.</span></span> <span data-ttu-id="8ff38-373">根据对象的状态，你可能需要修改流中的当前位置 （例如，如果在基础流支持查找）。</span><span class="sxs-lookup"><span data-stu-id="8ff38-373">Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking).</span></span> <span data-ttu-id="8ff38-374">有关其他信息，请参见 <xref:System.IO.Stream.CanSeek%2A>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-374">For additional information see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
 <span data-ttu-id="8ff38-375">使用时<xref:System.IO.StreamWriter>或<xref:System.IO.BinaryWriter>类中，不刷新基<xref:System.IO.Stream>对象。</span><span class="sxs-lookup"><span data-stu-id="8ff38-375">When using the <xref:System.IO.StreamWriter> or <xref:System.IO.BinaryWriter> class, do not flush the base <xref:System.IO.Stream> object.</span></span> <span data-ttu-id="8ff38-376">请改用类的<xref:System.IO.Stream.Flush%2A>或<xref:System.IO.Stream.Close%2A>方法，可确保数据是第一次刷新到基础流，然后写入到文件。</span><span class="sxs-lookup"><span data-stu-id="8ff38-376">Instead, use the class's <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.Close%2A> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8ff38-377">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="8ff38-377">An I/O error occurs.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FlushAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ff38-378">异步清除此流的所有缓冲区并导致所有缓冲数据都写入基础设备中。</span><span class="sxs-lookup"><span data-stu-id="8ff38-378">Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.FlushAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function FlushAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FlushAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ff38-379">异步清除此流的所有缓冲区并导致所有缓冲数据都写入基础设备中。</span><span class="sxs-lookup"><span data-stu-id="8ff38-379">Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span></span></summary>
        <returns><span data-ttu-id="8ff38-380">表示异步刷新操作的任务。</span><span class="sxs-lookup"><span data-stu-id="8ff38-380">A task that represents the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-381">如果派生的类，如<xref:System.IO.Compression.DeflateStream>或<xref:System.IO.Compression.GZipStream>，不要将它刷新的缓冲区在其实现<xref:System.IO.Stream.Flush%2A>方法，<xref:System.IO.Stream.FlushAsync%2A>方法时不会刷新缓冲区。</span><span class="sxs-lookup"><span data-stu-id="8ff38-381">If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-382">已释放流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-382">The stream has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="8ff38-383">要监视取消请求的标记。</span><span class="sxs-lookup"><span data-stu-id="8ff38-383">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="8ff38-384">默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-384">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="8ff38-385">异步清理这个流的所有缓冲区，并使所有缓冲数据写入基础设备，并且监控取消请求。</span><span class="sxs-lookup"><span data-stu-id="8ff38-385">Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</span></span></summary>
        <returns><span data-ttu-id="8ff38-386">表示异步刷新操作的任务。</span><span class="sxs-lookup"><span data-stu-id="8ff38-386">A task that represents the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-387">如果在完成之前，将取消该操作，返回的任务包含<xref:System.Threading.Tasks.TaskStatus.Canceled>值<xref:System.Threading.Tasks.Task.Status%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="8ff38-387">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="8ff38-388">如果派生的类，如<xref:System.IO.Compression.DeflateStream>或<xref:System.IO.Compression.GZipStream>，不要将它刷新的缓冲区在其实现<xref:System.IO.Stream.Flush%2A>方法，<xref:System.IO.Stream.FlushAsync%2A>方法时不会刷新缓冲区。</span><span class="sxs-lookup"><span data-stu-id="8ff38-388">If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-389">已释放流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-389">The stream has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public abstract long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.Length" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff38-390">当在派生类中重写时，获取流长度（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="8ff38-390">When overridden in a derived class, gets the length in bytes of the stream.</span></span></summary>
        <value><span data-ttu-id="8ff38-391">表示流长度（以字节为单位）的长值。</span><span class="sxs-lookup"><span data-stu-id="8ff38-391">A long value representing the length of the stream in bytes.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-392">从 <see langword="Stream" /> 派生的类不支持查找。</span><span class="sxs-lookup"><span data-stu-id="8ff38-392">A class derived from <see langword="Stream" /> does not support seeking.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-393">在流关闭后调用方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-393">Methods were called after the stream was closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.IO.Stream Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.IO.Stream Null" />
      <MemberSignature Language="DocId" Value="F:System.IO.Stream.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As Stream " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::IO::Stream ^ Null;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff38-394">无后备存储区的 <see langword="Stream" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-394">A <see langword="Stream" /> with no backing store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-395">使用`Null`输出重定向到一个流，它将不占用任何操作系统资源。</span><span class="sxs-lookup"><span data-stu-id="8ff38-395">Use `Null` to redirect output to a stream that will not consume any operating system resources.</span></span> <span data-ttu-id="8ff38-396">时的方法`Stream`提供写入调用在`Null`，只是返回调用，并且会不写入任何数据。</span><span class="sxs-lookup"><span data-stu-id="8ff38-396">When the methods of `Stream` that provide writing are invoked on `Null`, the call simply returns, and no data is written.</span></span> <span data-ttu-id="8ff38-397">`Null` 此外实现`Read`返回零，而无需读取数据的方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-397">`Null` also implements a `Read` method that returns zero without reading data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectInvariant">
      <MemberSignature Language="C#" Value="protected virtual void ObjectInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ObjectInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ObjectInvariant" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ObjectInvariant ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ObjectInvariant();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Do not call or override this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ff38-398">提供对 <see cref="T:System.Diagnostics.Contracts.Contract" /> 的支持。</span><span class="sxs-lookup"><span data-stu-id="8ff38-398">Provides support for a <see cref="T:System.Diagnostics.Contracts.Contract" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public abstract long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.Position" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property long Position { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff38-399">当在派生类中重写时，获取或设置当前流中的位置。</span><span class="sxs-lookup"><span data-stu-id="8ff38-399">When overridden in a derived class, gets or sets the position within the current stream.</span></span></summary>
        <value><span data-ttu-id="8ff38-400">流中的当前位置。</span><span class="sxs-lookup"><span data-stu-id="8ff38-400">The current position within the stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-401">流必须支持查找要获取或设置位置。</span><span class="sxs-lookup"><span data-stu-id="8ff38-401">The stream must support seeking to get or set the position.</span></span> <span data-ttu-id="8ff38-402">使用<xref:System.IO.Stream.CanSeek%2A>属性以确定流是否支持查找。</span><span class="sxs-lookup"><span data-stu-id="8ff38-402">Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the stream supports seeking.</span></span>  
  
 <span data-ttu-id="8ff38-403">支持查找到流的长度超出任何位置。</span><span class="sxs-lookup"><span data-stu-id="8ff38-403">Seeking to any location beyond the length of the stream is supported.</span></span>  
  
 <span data-ttu-id="8ff38-404">`Position`属性不会不跟踪的从和 / 或已用完，跳过，流的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-404">The `Position` property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8ff38-405">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="8ff38-405">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-406">流不支持查找。</span><span class="sxs-lookup"><span data-stu-id="8ff38-406">The stream does not support seeking.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-407">在流关闭后调用方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-407">Methods were called after the stream was closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Read(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Read (buffer As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Read(Span&lt;System::Byte&gt; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read([out] unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ff38-408">字节数组。</span><span class="sxs-lookup"><span data-stu-id="8ff38-408">An array of bytes.</span></span> <span data-ttu-id="8ff38-409">此方法返回时，该缓冲区包含指定的字节数组，该数组的 <c>offset</c> 和 (<c>offset</c> + <c>count</c> - 1) 之间的值由从当前源中读取的字节替换。</span><span class="sxs-lookup"><span data-stu-id="8ff38-409">When this method returns, the buffer contains the specified byte array with the values between <c>offset</c> and (<c>offset</c> + <c>count</c> - 1) replaced by the bytes read from the current source.</span></span></param>
        <param name="offset"><span data-ttu-id="8ff38-410"><c>buffer</c> 中从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</span><span class="sxs-lookup"><span data-stu-id="8ff38-410">The zero-based byte offset in <c>buffer</c> at which to begin storing the data read from the current stream.</span></span></param>
        <param name="count"><span data-ttu-id="8ff38-411">要从当前流中最多读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-411">The maximum number of bytes to be read from the current stream.</span></span></param>
        <summary><span data-ttu-id="8ff38-412">当在派生类中重写时，从当前流读取字节序列，并将此流中的位置提升读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-412">When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span></span></summary>
        <returns><span data-ttu-id="8ff38-413">读入缓冲区中的总字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-413">The total number of bytes read into the buffer.</span></span> <span data-ttu-id="8ff38-414">如果很多字节当前不可用，则总字节数可能小于请求的字节数；如果已到达流结尾，则为零 (0)。</span><span class="sxs-lookup"><span data-stu-id="8ff38-414">This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-415">使用<xref:System.IO.Stream.CanRead%2A>属性来确定当前实例是否支持读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-415">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span> <span data-ttu-id="8ff38-416">使用<xref:System.IO.Stream.ReadAsync%2A>方法从当前流异步读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-416">Use the <xref:System.IO.Stream.ReadAsync%2A> method to read asynchronously from the current stream.</span></span>  
  
 <span data-ttu-id="8ff38-417">此方法的实现读取的最多`count`字节从当前流，并且将它们存储在`buffer`开始`offset`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-417">Implementations of this method read a maximum of `count` bytes from the current stream and store them in `buffer` beginning at `offset`.</span></span> <span data-ttu-id="8ff38-418">流中的当前位置高级通过读取; 的字节数但是，如果发生异常，将流中的当前位置保持不变。</span><span class="sxs-lookup"><span data-stu-id="8ff38-418">The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged.</span></span> <span data-ttu-id="8ff38-419">实现可返回读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-419">Implementations return the number of bytes read.</span></span> <span data-ttu-id="8ff38-420">实现将一直阻止到至少一个字节的数据可供读取的事件中不会提供数据。</span><span class="sxs-lookup"><span data-stu-id="8ff38-420">The implementation will block until at least one byte of data can be read, in the event that no data is available.</span></span> <span data-ttu-id="8ff38-421"><xref:System.IO.Stream.Read%2A> 仅当没有更多数据在流中并且没有更多预期 （如套接字已关闭或文件结尾），则返回 0。</span><span class="sxs-lookup"><span data-stu-id="8ff38-421"><xref:System.IO.Stream.Read%2A> returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file).</span></span> <span data-ttu-id="8ff38-422">实现可以自由地返回少于所请求的字节，即使尚未达到流结尾。</span><span class="sxs-lookup"><span data-stu-id="8ff38-422">An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</span></span>  
  
 <span data-ttu-id="8ff38-423">使用<xref:System.IO.BinaryReader>读取基元数据类型。</span><span class="sxs-lookup"><span data-stu-id="8ff38-423">Use <xref:System.IO.BinaryReader> for reading primitive data types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff38-424">下面的示例演示如何使用<xref:System.IO.Stream.Read%2A>读取的数据块。</span><span class="sxs-lookup"><span data-stu-id="8ff38-424">The following example shows how to use <xref:System.IO.Stream.Read%2A> to read a block of data.</span></span>  
  
 [!code-cpp[Classic Stream.Read Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stream.Read Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stream.Read Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stream.Read Example/CS/source.cs#1)]
 [!code-vb[Classic Stream.Read Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stream.Read Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ff38-425"><paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</span><span class="sxs-lookup"><span data-stu-id="8ff38-425">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-426"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-426"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8ff38-427"><paramref name="offset" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-427"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8ff38-428">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="8ff38-428">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-429">流不支持读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-429">The stream does not support reading.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-430">在流关闭后调用方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-430">Methods were called after the stream was closed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ff38-431">从当前流异步读取字节序列，并将流中的位置提升读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-431">Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;int&gt; ReadAsync (Memory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; ReadAsync(valuetype System.Memory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Memory&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAsync (buffer As Byte(), offset As Integer, count As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ff38-432">数据写入的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="8ff38-432">The buffer to write the data into.</span></span></param>
        <param name="offset"><span data-ttu-id="8ff38-433"><c>buffer</c> 中的字节偏移量，从该偏移量开始写入流中的数据。</span><span class="sxs-lookup"><span data-stu-id="8ff38-433">The byte offset in <c>buffer</c> at which to begin writing data from the stream.</span></span></param>
        <param name="count"><span data-ttu-id="8ff38-434">最多读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-434">The maximum number of bytes to read.</span></span></param>
        <summary><span data-ttu-id="8ff38-435">从当前流异步读取字节序列，并将流中的位置提升读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-435">Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span></span></summary>
        <returns><span data-ttu-id="8ff38-436">表示异步读取操作的任务。</span><span class="sxs-lookup"><span data-stu-id="8ff38-436">A task that represents the asynchronous read operation.</span></span> <span data-ttu-id="8ff38-437"><paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-437">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span></span> <span data-ttu-id="8ff38-438">如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</span><span class="sxs-lookup"><span data-stu-id="8ff38-438">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-439"><xref:System.IO.Stream.ReadAsync%2A>方法使您能够在不阻塞主线程的情况下执行占用大量资源的 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-439">The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="8ff38-440">在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 应用中一个耗时的流操作可能阻塞 UI 线程并让您的应用看起来好像不工作时，这种性能的考虑就显得尤为重要了。</span><span class="sxs-lookup"><span data-stu-id="8ff38-440">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="8ff38-441">结合使用异步方法`async`和`await`Visual Basic 和 C# 中的关键字。</span><span class="sxs-lookup"><span data-stu-id="8ff38-441">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="8ff38-442">使用<xref:System.IO.Stream.CanRead%2A>属性来确定当前实例是否支持读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-442">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff38-443">下面的示例演示如何以异步方式从文件读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-443">The following example shows how to read from a file asynchronously.</span></span> <span data-ttu-id="8ff38-444">该示例使用<xref:System.IO.FileStream>类，该类派生自<xref:System.IO.Stream>类。</span><span class="sxs-lookup"><span data-stu-id="8ff38-444">The example uses the <xref:System.IO.FileStream> class, which derives from the <xref:System.IO.Stream> class.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#4](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example4.cs#4)]
 [!code-vb[Asynchronous_File_IO_async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-445"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-445"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8ff38-446"><paramref name="offset" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-446"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ff38-447"><paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</span><span class="sxs-lookup"><span data-stu-id="8ff38-447">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-448">流不支持读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-448">The stream does not support reading.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-449">已释放流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-449">The stream has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ff38-450">之前的读取操作当前正在使用流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-450">The stream is currently in use by a previous read operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ff38-451">数据写入的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="8ff38-451">The buffer to write the data into.</span></span></param>
        <param name="offset"><span data-ttu-id="8ff38-452"><c>buffer</c> 中的字节偏移量，从该偏移量开始写入流中的数据。</span><span class="sxs-lookup"><span data-stu-id="8ff38-452">The byte offset in <c>buffer</c> at which to begin writing data from the stream.</span></span></param>
        <param name="count"><span data-ttu-id="8ff38-453">最多读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-453">The maximum number of bytes to read.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="8ff38-454">要监视取消请求的标记。</span><span class="sxs-lookup"><span data-stu-id="8ff38-454">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="8ff38-455">默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-455">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="8ff38-456">从当前流异步读取字节的序列，将流中的位置提升读取的字节数，并监视取消请求。</span><span class="sxs-lookup"><span data-stu-id="8ff38-456">Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</span></span></summary>
        <returns><span data-ttu-id="8ff38-457">表示异步读取操作的任务。</span><span class="sxs-lookup"><span data-stu-id="8ff38-457">A task that represents the asynchronous read operation.</span></span> <span data-ttu-id="8ff38-458"><paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-458">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span></span> <span data-ttu-id="8ff38-459">如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</span><span class="sxs-lookup"><span data-stu-id="8ff38-459">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-460"><xref:System.IO.Stream.ReadAsync%2A>方法使您能够在不阻塞主线程的情况下执行占用大量资源的 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-460">The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="8ff38-461">在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 应用中一个耗时的流操作可能阻塞 UI 线程并让您的应用看起来好像不工作时，这种性能的考虑就显得尤为重要了。</span><span class="sxs-lookup"><span data-stu-id="8ff38-461">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="8ff38-462">结合使用异步方法`async`和`await`Visual Basic 和 C# 中的关键字。</span><span class="sxs-lookup"><span data-stu-id="8ff38-462">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="8ff38-463">使用<xref:System.IO.Stream.CanRead%2A>属性来确定当前实例是否支持读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-463">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="8ff38-464">如果在完成之前，将取消该操作，返回的任务包含<xref:System.Threading.Tasks.TaskStatus.Canceled>值<xref:System.Threading.Tasks.Task.Status%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="8ff38-464">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="8ff38-465">有关示例，请参阅<xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29>重载。</span><span class="sxs-lookup"><span data-stu-id="8ff38-465">For an example, see the <xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-466"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-466"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8ff38-467"><paramref name="offset" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-467"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ff38-468"><paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</span><span class="sxs-lookup"><span data-stu-id="8ff38-468">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-469">流不支持读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-469">The stream does not support reading.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-470">已释放流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-470">The stream has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ff38-471">之前的读取操作当前正在使用流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-471">The stream is currently in use by a previous read operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public virtual int ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadByte" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadByte () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ReadByte();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ff38-472">从流中读取一个字节，并将流内的位置向前提升一个字节，或者如果已到达流结尾，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="8ff38-472">Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</span></span></summary>
        <returns><span data-ttu-id="8ff38-473">强制转换为 <see langword="Int32" /> 的无符号字节，如果到达流的末尾，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="8ff38-473">The unsigned byte cast to an <see langword="Int32" />, or -1 if at the end of the stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-474">使用<xref:System.IO.Stream.CanRead%2A>属性来确定当前实例是否支持读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-474">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="8ff38-475">尝试操作流已关闭流后可能会引发<xref:System.ObjectDisposedException>。</span><span class="sxs-lookup"><span data-stu-id="8ff38-475">Attempts to manipulate the stream after the stream has been closed could throw an <xref:System.ObjectDisposedException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-476">流不支持读取。</span><span class="sxs-lookup"><span data-stu-id="8ff38-476">The stream does not support reading.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-477">在流关闭后调用方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-477">Methods were called after the stream was closed.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="8ff38-478">上的默认实现<see langword="Stream" />创建一个新的单字节数组，然后调用<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-478">The default implementation on <see langword="Stream" /> creates a new single-byte array and then calls <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />.</span></span> <span data-ttu-id="8ff38-479">虽然这是正式正确的效率低。</span><span class="sxs-lookup"><span data-stu-id="8ff38-479">While this is formally correct, it is inefficient.</span></span> <span data-ttu-id="8ff38-480">所有具有内部缓冲区的流应重写此方法，并提供一个要高效得多的读取缓冲区直接，避免额外的数组分配每次调用的版本。</span><span class="sxs-lookup"><span data-stu-id="8ff38-480">Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public virtual int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff38-481">获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试读取多长时间。</span><span class="sxs-lookup"><span data-stu-id="8ff38-481">Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.</span></span></summary>
        <value><span data-ttu-id="8ff38-482">一个确定流在超时前尝试读取多长时间的值（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="8ff38-482">A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ff38-483"><see cref="P:System.IO.Stream.ReadTimeout" /> 方法总是引发 <see cref="T:System.InvalidOperationException" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-483">The <see cref="P:System.IO.Stream.ReadTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="8ff38-484"><see cref="P:System.IO.Stream.ReadTimeout" />应重写属性，以便为流提供的适当行为。</span><span class="sxs-lookup"><span data-stu-id="8ff38-484">The <see cref="P:System.IO.Stream.ReadTimeout" /> property should be overridden to provide the appropriate behavior for the stream.</span></span> <span data-ttu-id="8ff38-485">流不支持超时，如果此属性应引发<see cref="T:System.InvalidOperationException" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-485">If the stream does not support timing out, this property should raise an <see cref="T:System.InvalidOperationException" />.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public abstract long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset"><span data-ttu-id="8ff38-486">相对于 <c>origin</c> 参数的字节偏移量。</span><span class="sxs-lookup"><span data-stu-id="8ff38-486">A byte offset relative to the <c>origin</c> parameter.</span></span></param>
        <param name="origin"><span data-ttu-id="8ff38-487"><see cref="T:System.IO.SeekOrigin" /> 类型的值，指示用于获取新位置的参考点。</span><span class="sxs-lookup"><span data-stu-id="8ff38-487">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</span></span></param>
        <summary><span data-ttu-id="8ff38-488">当在派生类中重写时，设置当前流中的位置。</span><span class="sxs-lookup"><span data-stu-id="8ff38-488">When overridden in a derived class, sets the position within the current stream.</span></span></summary>
        <returns><span data-ttu-id="8ff38-489">当前流中的新位置。</span><span class="sxs-lookup"><span data-stu-id="8ff38-489">The new position within the current stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-490">使用<xref:System.IO.Stream.CanSeek%2A>属性来确定当前实例是否支持查找。</span><span class="sxs-lookup"><span data-stu-id="8ff38-490">Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the current instance supports seeking.</span></span>  
  
 <span data-ttu-id="8ff38-491">如果`offset`为负，则要求新位置指定的位置之前`origin`按指定的字节数`offset`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-491">If `offset` is negative, the new position is required to precede the position specified by `origin` by the number of bytes specified by `offset`.</span></span> <span data-ttu-id="8ff38-492">如果`offset`是零 (0)，需要为指定的位置的新位置`origin`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-492">If `offset` is zero (0), the new position is required to be the position specified by `origin`.</span></span> <span data-ttu-id="8ff38-493">如果`offset`为正，则要求按照指定的位置新位置位于`origin`按指定的字节数`offset`。</span><span class="sxs-lookup"><span data-stu-id="8ff38-493">If `offset` is positive, the new position is required to follow the position specified by `origin` by the number of bytes specified by `offset`.</span></span>  
  
 <span data-ttu-id="8ff38-494">类派生自`Stream`支持查找必须重写该方法以提供上面所述的功能。</span><span class="sxs-lookup"><span data-stu-id="8ff38-494">Classes derived from `Stream` that support seeking must override this method to provide the functionality described above.</span></span>  
  
 <span data-ttu-id="8ff38-495">支持查找到流的长度超出任何位置。</span><span class="sxs-lookup"><span data-stu-id="8ff38-495">Seeking to any location beyond the length of the stream is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8ff38-496">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="8ff38-496">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-497">流不支持查找，例如在流通过管道或控制台输出构造的情况下即为如此。</span><span class="sxs-lookup"><span data-stu-id="8ff38-497">The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-498">在流关闭后调用方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-498">Methods were called after the stream was closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public abstract void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ff38-499">所需的当前流的长度（以字节表示）。</span><span class="sxs-lookup"><span data-stu-id="8ff38-499">The desired length of the current stream in bytes.</span></span></param>
        <summary><span data-ttu-id="8ff38-500">当在派生类中重写时，设置当前流的长度。</span><span class="sxs-lookup"><span data-stu-id="8ff38-500">When overridden in a derived class, sets the length of the current stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-501">如果指定的值小于当前流的长度，则流将被截断。</span><span class="sxs-lookup"><span data-stu-id="8ff38-501">If the specified value is less than the current length of the stream, the stream is truncated.</span></span> <span data-ttu-id="8ff38-502">如果指定的值大于当前流的长度，则流被扩展。</span><span class="sxs-lookup"><span data-stu-id="8ff38-502">If the specified value is larger than the current length of the stream, the stream is expanded.</span></span> <span data-ttu-id="8ff38-503">如果流已展开，未定义旧和新的长度之间流的内容。</span><span class="sxs-lookup"><span data-stu-id="8ff38-503">If the stream is expanded, the contents of the stream between the old and the new length are not defined.</span></span>  
  
 <span data-ttu-id="8ff38-504">流必须支持写入和查找有关`SetLength`工作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-504">A stream must support both writing and seeking for `SetLength` to work.</span></span>  
  
 <span data-ttu-id="8ff38-505">使用<xref:System.IO.Stream.CanWrite%2A>属性来确定当前实例是否支持写入，和<xref:System.IO.Stream.CanSeek%2A>属性来确定是否支持查找。</span><span class="sxs-lookup"><span data-stu-id="8ff38-505">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.Stream.CanSeek%2A> property to determine whether seeking is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8ff38-506">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="8ff38-506">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-507">流不支持写入和查找，例如在流通过管道或控制台输出构造的情况下即为如此。</span><span class="sxs-lookup"><span data-stu-id="8ff38-507">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-508">在流关闭后调用方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-508">Methods were called after the stream was closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.IO.Stream Synchronized (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream Synchronized(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Synchronized(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ Synchronized(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="8ff38-509">要同步的 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="8ff38-509">The <see cref="T:System.IO.Stream" /> object to synchronize.</span></span></param>
        <summary><span data-ttu-id="8ff38-510">在指定的 <see cref="T:System.IO.Stream" /> 对象周围创建线程安全（同步）包装。</span><span class="sxs-lookup"><span data-stu-id="8ff38-510">Creates a thread-safe (synchronized) wrapper around the specified <see cref="T:System.IO.Stream" /> object.</span></span></summary>
        <returns><span data-ttu-id="8ff38-511">一个线程安全的 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="8ff38-511">A thread-safe <see cref="T:System.IO.Stream" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-512">此方法返回包装指定的类<xref:System.IO.Stream>对象，并限制从多个线程访问它。</span><span class="sxs-lookup"><span data-stu-id="8ff38-512">This method returns a class that wraps the specified <xref:System.IO.Stream> object and restricts access to it from multiple threads.</span></span> <span data-ttu-id="8ff38-513">所有访问<xref:System.IO.Stream>对象将是线程安全。</span><span class="sxs-lookup"><span data-stu-id="8ff38-513">All access to the <xref:System.IO.Stream> object will be thread safe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-514"><paramref name="stream" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-514"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ReadOnlySpan&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(ReadOnlySpan&lt;System::Byte&gt; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ff38-515">字节数组。</span><span class="sxs-lookup"><span data-stu-id="8ff38-515">An array of bytes.</span></span> <span data-ttu-id="8ff38-516">此方法将 <c>count</c> 个字节从 <c>buffer</c> 复制到当前流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-516">This method copies <c>count</c> bytes from <c>buffer</c> to the current stream.</span></span></param>
        <param name="offset"><span data-ttu-id="8ff38-517"><c>buffer</c> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-517">The zero-based byte offset in <c>buffer</c> at which to begin copying bytes to the current stream.</span></span></param>
        <param name="count"><span data-ttu-id="8ff38-518">要写入当前流的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-518">The number of bytes to be written to the current stream.</span></span></param>
        <summary><span data-ttu-id="8ff38-519">当在派生类中重写时，向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-519">When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-520">使用<xref:System.IO.Stream.CanWrite%2A>属性来确定当前实例是否支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-520">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span> <span data-ttu-id="8ff38-521">使用<xref:System.IO.Stream.WriteAsync%2A>方法异步写入当前流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-521">Use the <xref:System.IO.Stream.WriteAsync%2A> method to write asynchronously to the current stream.</span></span>  
  
 <span data-ttu-id="8ff38-522">如果写入操作成功，将流内的位置向前移动写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-522">If the write operation is successful, the position within the stream advances by the number of bytes written.</span></span> <span data-ttu-id="8ff38-523">如果发生异常，流中的位置将保持不变。</span><span class="sxs-lookup"><span data-stu-id="8ff38-523">If an exception occurs, the position within the stream remains unchanged.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ff38-524"><paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</span><span class="sxs-lookup"><span data-stu-id="8ff38-524">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-525"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-525"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8ff38-526"><paramref name="offset" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-526"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8ff38-527">发生 I/O 错误，例如找不到指定文件。</span><span class="sxs-lookup"><span data-stu-id="8ff38-527">An I/O error occured, such as the specified file cannot be found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-528">流不支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-528">The stream does not support writing.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="8ff38-529">在流关闭后调用 <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-529"><see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> was called after the stream was closed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ff38-530">将字节序列异步写入当前流，并将流的当前位置提升写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-530">Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask WriteAsync (ReadOnlyMemory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask WriteAsync(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteAsync (buffer As Byte(), offset As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ff38-531">从中写入数据的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="8ff38-531">The buffer to write data from.</span></span></param>
        <param name="offset"><span data-ttu-id="8ff38-532"><c>buffer</c> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-532">The zero-based byte offset in <c>buffer</c> from which to begin copying bytes to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="8ff38-533">最多写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-533">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="8ff38-534">将字节序列异步写入当前流，并将流的当前位置提升写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-534">Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span></span></summary>
        <returns><span data-ttu-id="8ff38-535">表示异步写入操作的任务。</span><span class="sxs-lookup"><span data-stu-id="8ff38-535">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-536"><xref:System.IO.Stream.WriteAsync%2A>方法使您能够在不阻塞主线程的情况下执行占用大量资源的 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-536">The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="8ff38-537">在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 应用中一个耗时的流操作可能阻塞 UI 线程并让您的应用看起来好像不工作时，这种性能的考虑就显得尤为重要了。</span><span class="sxs-lookup"><span data-stu-id="8ff38-537">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="8ff38-538">结合使用异步方法`async`和`await`Visual Basic 和 C# 中的关键字。</span><span class="sxs-lookup"><span data-stu-id="8ff38-538">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="8ff38-539">使用<xref:System.IO.Stream.CanWrite%2A>属性来确定当前实例是否支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-539">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff38-540">下面的示例演示如何以异步方式写入到的文件。</span><span class="sxs-lookup"><span data-stu-id="8ff38-540">The following example shows how to write asynchronously to a file.</span></span> <span data-ttu-id="8ff38-541">该示例使用<xref:System.IO.FileStream>类，该类派生自<xref:System.IO.Stream>类。</span><span class="sxs-lookup"><span data-stu-id="8ff38-541">The example uses the <xref:System.IO.FileStream> class, which derives from the <xref:System.IO.Stream> class.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#3](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example3.cs#3)]
 [!code-vb[Asynchronous_File_IO_async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-542"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-542"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8ff38-543"><paramref name="offset" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-543"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ff38-544"><paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</span><span class="sxs-lookup"><span data-stu-id="8ff38-544">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-545">流不支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-545">The stream does not support writing.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-546">已释放流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-546">The stream has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ff38-547">流正在由前一次写操作使用。</span><span class="sxs-lookup"><span data-stu-id="8ff38-547">The stream is currently in use by a previous write operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ff38-548">从中写入数据的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="8ff38-548">The buffer to write data from.</span></span></param>
        <param name="offset"><span data-ttu-id="8ff38-549"><c>buffer</c> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-549">The zero-based byte offset in <c>buffer</c> from which to begin copying bytes to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="8ff38-550">最多写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-550">The maximum number of bytes to write.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="8ff38-551">要监视取消请求的标记。</span><span class="sxs-lookup"><span data-stu-id="8ff38-551">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="8ff38-552">默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-552">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="8ff38-553">将字节的序列异步写入当前流，将该流中的当前位置提升写入的字节数，并监视取消请求。</span><span class="sxs-lookup"><span data-stu-id="8ff38-553">Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</span></span></summary>
        <returns><span data-ttu-id="8ff38-554">表示异步写入操作的任务。</span><span class="sxs-lookup"><span data-stu-id="8ff38-554">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-555"><xref:System.IO.Stream.WriteAsync%2A>方法使您能够在不阻塞主线程的情况下执行占用大量资源的 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="8ff38-555">The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="8ff38-556">在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 应用中一个耗时的流操作可能阻塞 UI 线程并让您的应用看起来好像不工作时，这种性能的考虑就显得尤为重要了。</span><span class="sxs-lookup"><span data-stu-id="8ff38-556">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="8ff38-557">结合使用异步方法`async`和`await`Visual Basic 和 C# 中的关键字。</span><span class="sxs-lookup"><span data-stu-id="8ff38-557">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="8ff38-558">使用<xref:System.IO.Stream.CanWrite%2A>属性来确定当前实例是否支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-558">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 <span data-ttu-id="8ff38-559">如果在完成之前，将取消该操作，返回的任务包含<xref:System.Threading.Tasks.TaskStatus.Canceled>值<xref:System.Threading.Tasks.Task.Status%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="8ff38-559">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="8ff38-560">有关示例，请参阅<xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29>重载。</span><span class="sxs-lookup"><span data-stu-id="8ff38-560">For an example, see the <xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8ff38-561"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-561"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="8ff38-562"><paramref name="offset" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="8ff38-562"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ff38-563"><paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</span><span class="sxs-lookup"><span data-stu-id="8ff38-563">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-564">流不支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-564">The stream does not support writing.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-565">已释放流。</span><span class="sxs-lookup"><span data-stu-id="8ff38-565">The stream has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ff38-566">流正在由前一次写操作使用。</span><span class="sxs-lookup"><span data-stu-id="8ff38-566">The stream is currently in use by a previous write operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public virtual void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteByte(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ff38-567">要写入流中的字节。</span><span class="sxs-lookup"><span data-stu-id="8ff38-567">The byte to write to the stream.</span></span></param>
        <summary><span data-ttu-id="8ff38-568">将一个字节写入流内的当前位置，并将流内的位置向前提升一个字节。</span><span class="sxs-lookup"><span data-stu-id="8ff38-568">Writes a byte to the current position in the stream and advances the position within the stream by one byte.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff38-569">使用<xref:System.IO.Stream.CanWrite%2A>属性来确定当前实例是否支持写入。</span><span class="sxs-lookup"><span data-stu-id="8ff38-569">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8ff38-570">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="8ff38-570">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ff38-571">该流不支持写入，或者该流已关闭。</span><span class="sxs-lookup"><span data-stu-id="8ff38-571">The stream does not support writing, or the stream is already closed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ff38-572">在流关闭后调用方法。</span><span class="sxs-lookup"><span data-stu-id="8ff38-572">Methods were called after the stream was closed.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="8ff38-573">上的默认实现<see langword="Stream" />创建一个新的单字节数组，然后调用<see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-573">The default implementation on <see langword="Stream" /> creates a new single-byte array and then calls <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />.</span></span> <span data-ttu-id="8ff38-574">虽然这是正式正确的效率低。</span><span class="sxs-lookup"><span data-stu-id="8ff38-574">While this is formally correct, it is inefficient.</span></span> <span data-ttu-id="8ff38-575">所有具有内部缓冲区的流应重写此方法，并提供将写入缓冲区直接，避免每次调用的额外的数组分配的高效得多版本。</span><span class="sxs-lookup"><span data-stu-id="8ff38-575">Any stream with an internal buffer should override this method and provide a much more efficient version that writes to the buffer directly, avoiding the extra array allocation on every call.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public virtual int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff38-576">获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试写入多长时间。</span><span class="sxs-lookup"><span data-stu-id="8ff38-576">Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.</span></span></summary>
        <value><span data-ttu-id="8ff38-577">一个确定流在超时前尝试写入多长时间的值（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="8ff38-577">A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ff38-578"><see cref="P:System.IO.Stream.WriteTimeout" /> 方法总是引发 <see cref="T:System.InvalidOperationException" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-578">The <see cref="P:System.IO.Stream.WriteTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="8ff38-579"><see cref="P:System.IO.Stream.WriteTimeout" />应重写属性，以便为流提供的适当行为。</span><span class="sxs-lookup"><span data-stu-id="8ff38-579">The <see cref="P:System.IO.Stream.WriteTimeout" /> property should be overridden to provide the appropriate behavior for the stream.</span></span> <span data-ttu-id="8ff38-580">流不支持超时，如果此属性应引发<see cref="T:System.InvalidOperationException" />。</span><span class="sxs-lookup"><span data-stu-id="8ff38-580">If the stream does not support timing out, this property should raise an <see cref="T:System.InvalidOperationException" />.</span></span></para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>