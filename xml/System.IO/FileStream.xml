<Type Name="FileStream" FullName="System.IO.FileStream">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dc5ed181a3b71bafd66689b0d61664367786fda3" /><Meta Name="ms.sourcegitcommit" Value="662f143e6be46d519ff8ab4451d543d91e651478" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/18/2018" /><Meta Name="ms.locfileid" Value="53568702" /></Metadata><TypeSignature Language="C#" Value="public class FileStream : System.IO.Stream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileStream extends System.IO.Stream" />
  <TypeSignature Language="DocId" Value="T:System.IO.FileStream" />
  <TypeSignature Language="VB.NET" Value="Public Class FileStream&#xA;Inherits Stream" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileStream : System::IO::Stream" />
  <TypeSignature Language="F#" Value="type FileStream = class&#xA;    inherit Stream" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e3693-101">为文件提供 <see cref="T:System.IO.Stream" />，既支持同步读写操作，也支持异步读写操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-101">Provides a <see cref="T:System.IO.Stream" /> for a file, supporting both synchronous and asynchronous read and write operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-102">使用<xref:System.IO.FileStream>类，以从读取、 写入、 打开和关闭文件系统上的文件以及处理其他文件相关的操作系统句柄，包括管道、 标准输入和标准输出。</span><span class="sxs-lookup"><span data-stu-id="e3693-102">Use the <xref:System.IO.FileStream> class to read from, write to, open, and close files on a file system, and to manipulate other file-related operating system handles, including pipes, standard input, and standard output.</span></span> <span data-ttu-id="e3693-103">可以使用<xref:System.IO.FileStream.Read%2A>， <xref:System.IO.FileStream.Write%2A>， <xref:System.IO.Stream.CopyTo%2A>，和<xref:System.IO.FileStream.Flush%2A>方法来执行同步操作，或<xref:System.IO.FileStream.ReadAsync%2A>， <xref:System.IO.FileStream.WriteAsync%2A>， <xref:System.IO.Stream.CopyToAsync%2A>，和<xref:System.IO.FileStream.FlushAsync%2A>方法来执行异步操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-103">You can use the <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.Stream.CopyTo%2A>, and <xref:System.IO.FileStream.Flush%2A> methods to perform synchronous operations, or the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A> methods to perform asynchronous operations.</span></span> <span data-ttu-id="e3693-104">使用异步方法而不会阻止主线程执行占用大量资源的文件操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-104">Use the asynchronous methods to perform resource-intensive file operations without blocking the main thread.</span></span> <span data-ttu-id="e3693-105">在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 应用中一个耗时的流操作可能阻塞 UI 线程并让您的应用看起来好像不工作时，这种性能的考虑就显得尤为重要了。</span><span class="sxs-lookup"><span data-stu-id="e3693-105">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="e3693-106"><xref:System.IO.FileStream> 输入缓冲区和输出更好的性能。</span><span class="sxs-lookup"><span data-stu-id="e3693-106"><xref:System.IO.FileStream> buffers input and output for better performance.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3693-107">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="e3693-107">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="e3693-108">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="e3693-108">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="e3693-109">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="e3693-109">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="e3693-110">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="e3693-110">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="e3693-111">有关详细信息，请参阅中的"使用对象实现 IDisposable"一节<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="e3693-111">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="e3693-112"><xref:System.IO.FileStream.IsAsync%2A>属性检测到是否异步打开的文件句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-112">The <xref:System.IO.FileStream.IsAsync%2A> property detects whether the file handle was opened asynchronously.</span></span> <span data-ttu-id="e3693-113">在创建的实例时指定此值<xref:System.IO.FileStream>类使用的构造函数`isAsync`， `useAsync`，或`options`参数。</span><span class="sxs-lookup"><span data-stu-id="e3693-113">You specify this value when you create an instance of the <xref:System.IO.FileStream> class using a constructor that has an `isAsync`, `useAsync`, or `options` parameter.</span></span> <span data-ttu-id="e3693-114">当该属性是`true`，stream 利用重叠的 I/O 异步执行文件操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-114">When the property is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously.</span></span> <span data-ttu-id="e3693-115">但是，<xref:System.IO.FileStream.IsAsync%2A>属性不一定要`true`调用<xref:System.IO.FileStream.ReadAsync%2A>， <xref:System.IO.FileStream.WriteAsync%2A>，或<xref:System.IO.Stream.CopyToAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-115">However, the <xref:System.IO.FileStream.IsAsync%2A> property does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method.</span></span> <span data-ttu-id="e3693-116">当<xref:System.IO.FileStream.IsAsync%2A>属性是`false`和调用异步读取和写入操作，仍将不阻止 UI 线程，但以同步方式执行实际的 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-116">When the <xref:System.IO.FileStream.IsAsync%2A> property is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</span></span>  
  
 <span data-ttu-id="e3693-117"><xref:System.IO.FileStream.Seek%2A>方法支持随机访问文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-117">The <xref:System.IO.FileStream.Seek%2A> method supports random access to files.</span></span> <span data-ttu-id="e3693-118"><xref:System.IO.FileStream.Seek%2A> 允许读/写位置移动到文件中的任意位置。</span><span class="sxs-lookup"><span data-stu-id="e3693-118"><xref:System.IO.FileStream.Seek%2A> allows the read/write position to be moved to any position within the file.</span></span> <span data-ttu-id="e3693-119">这是通过字节偏移量的引用点参数。</span><span class="sxs-lookup"><span data-stu-id="e3693-119">This is done with byte offset reference point parameters.</span></span> <span data-ttu-id="e3693-120">字节偏移量是相对于查找引用点，可以是开头、 当前的位置或基础文件末尾的三个成员由表示<xref:System.IO.SeekOrigin>枚举。</span><span class="sxs-lookup"><span data-stu-id="e3693-120">The byte offset is relative to the seek reference point, which can be the beginning, the current position, or the end of the underlying file, as represented by the three members of the <xref:System.IO.SeekOrigin> enumeration.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-121">磁盘文件始终支持随机访问。</span><span class="sxs-lookup"><span data-stu-id="e3693-121">Disk files always support random access.</span></span> <span data-ttu-id="e3693-122">在构造时<xref:System.IO.FileStream.CanSeek%2A>属性值设置为`true`或`false`具体取决于基础文件类型。如果基础文件类型 FILE_TYPE_DISK，如在 winbase.h，定义<xref:System.IO.FileStream.CanSeek%2A>属性值是`true`。</span><span class="sxs-lookup"><span data-stu-id="e3693-122">At the time of construction, the <xref:System.IO.FileStream.CanSeek%2A> property value is set to `true` or `false` depending on the underlying file type.If the underlying file type is FILE_TYPE_DISK, as defined in winbase.h, the <xref:System.IO.FileStream.CanSeek%2A> property value is `true`.</span></span> <span data-ttu-id="e3693-123">否则为<xref:System.IO.FileStream.CanSeek%2A>属性值是`false`。</span><span class="sxs-lookup"><span data-stu-id="e3693-123">Otherwise, the <xref:System.IO.FileStream.CanSeek%2A> property value is `false`.</span></span>  
  
 <span data-ttu-id="e3693-124">如果进程终止，并显示锁定文件的一部分，或关闭具有未解除锁定的文件，该行为不确定。</span><span class="sxs-lookup"><span data-stu-id="e3693-124">If a process terminates with part of a file locked or closes a file that has outstanding locks, the behavior is undefined.</span></span>  
  
 <span data-ttu-id="e3693-125">目录操作和其他文件操作，请参阅<xref:System.IO.File>， <xref:System.IO.Directory>，和<xref:System.IO.Path>类。</span><span class="sxs-lookup"><span data-stu-id="e3693-125">For directory operations and other file operations, see the <xref:System.IO.File>, <xref:System.IO.Directory>, and <xref:System.IO.Path> classes.</span></span> <span data-ttu-id="e3693-126"><xref:System.IO.File>类是一个实用工具类具有静态方法主要用于创建<xref:System.IO.FileStream>对象基于文件路径。</span><span class="sxs-lookup"><span data-stu-id="e3693-126">The <xref:System.IO.File> class is a utility class that has static methods primarily for the creation of <xref:System.IO.FileStream> objects based on file paths.</span></span> <span data-ttu-id="e3693-127"><xref:System.IO.MemoryStream>类从字节数组创建一个流，类似于<xref:System.IO.FileStream>类。</span><span class="sxs-lookup"><span data-stu-id="e3693-127">The <xref:System.IO.MemoryStream> class creates a stream from a byte array and is similar to the <xref:System.IO.FileStream> class.</span></span>  
  
 <span data-ttu-id="e3693-128">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-128">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
## <a name="detection-of-stream-position-changes"></a><span data-ttu-id="e3693-129">Stream 位置更改检测</span><span class="sxs-lookup"><span data-stu-id="e3693-129">Detection of Stream Position Changes</span></span>  
 <span data-ttu-id="e3693-130">当<xref:System.IO.FileStream>对象不具有独占持有其句柄上，另一个线程可以同时访问的文件句柄和更改与文件句柄关联的操作系统的文件指针的位置。</span><span class="sxs-lookup"><span data-stu-id="e3693-130">When a <xref:System.IO.FileStream> object does not have an exclusive hold on its handle, another thread could access the file handle concurrently and change the position of the operating system's file pointer that is associated with the file handle.</span></span> <span data-ttu-id="e3693-131">在此情况下中的缓存位置<xref:System.IO.FileStream>对象，并在缓冲区中的缓存的数据可能会损害。</span><span class="sxs-lookup"><span data-stu-id="e3693-131">In this case, the cached position in the <xref:System.IO.FileStream> object and the cached data in the buffer could be compromised.</span></span> <span data-ttu-id="e3693-132"><xref:System.IO.FileStream>对象时定期执行访问缓存的缓冲区，以确保操作系统的句柄位置与缓存的位置使用的相同的方法检查<xref:System.IO.FileStream>对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-132">The <xref:System.IO.FileStream> object routinely performs checks on methods that access the cached buffer to ensure that the operating system's handle position is the same as the cached position used by the <xref:System.IO.FileStream> object.</span></span>  
  
 <span data-ttu-id="e3693-133">如果句柄位置中的发生意外的更改对的调用中检测到<xref:System.IO.FileStream.Read%2A>方法中，.NET Framework 将丢弃缓冲区的内容并再次从文件读取的流。</span><span class="sxs-lookup"><span data-stu-id="e3693-133">If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Read%2A> method, the .NET Framework discards the contents of the buffer and reads the stream from the file again.</span></span> <span data-ttu-id="e3693-134">这会影响性能，具体取决于文件和可能会影响文件流的位置的任何其他进程的大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-134">This can affect performance, depending on the size of the file and any other processes that could affect the position of the file stream.</span></span>  
  
 <span data-ttu-id="e3693-135">如果句柄位置中的发生意外的更改对的调用中检测到<xref:System.IO.FileStream.Write%2A>方法，缓冲区的内容将被丢弃和<xref:System.IO.IOException>引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-135">If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Write%2A> method, the contents of the buffer are discarded and an <xref:System.IO.IOException> exception is thrown.</span></span>  
  
 <span data-ttu-id="e3693-136">一个<xref:System.IO.FileStream>对象将不具有独占持有其句柄上时任一<xref:System.IO.FileStream.SafeFileHandle%2A>属性访问要公开句柄或<xref:System.IO.FileStream>对象都提供了<xref:System.IO.FileStream.SafeFileHandle%2A>其构造函数中的属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-136">A <xref:System.IO.FileStream> object will not have an exclusive hold on its handle when either the <xref:System.IO.FileStream.SafeFileHandle%2A> property is accessed to expose the handle or the <xref:System.IO.FileStream> object is given the <xref:System.IO.FileStream.SafeFileHandle%2A> property in its constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-137">以下示例演示了部分<xref:System.IO.FileStream>构造函数。</span><span class="sxs-lookup"><span data-stu-id="e3693-137">The following example demonstrates some of the <xref:System.IO.FileStream> constructors.</span></span>  
  
 [!code-cpp[fstream class#1](~/samples/snippets/cpp/VS_Snippets_CLR/FStream Class/CPP/fstream class.cpp#1)]
 [!code-csharp[fstream class#1](~/samples/snippets/csharp/VS_Snippets_CLR/FStream Class/CS/fstream class.cs#1)]
 [!code-vb[fstream class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FStream Class/VB/fstream class.vb#1)]  
  
 <span data-ttu-id="e3693-138">下面的示例演示如何以异步方式写入文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-138">The following example shows how to write to a file asynchronously.</span></span> <span data-ttu-id="e3693-139">此代码在具有一个名为 /userinput&gt 和连接到名为 Button_Click Click 事件处理程序的按钮的文本块的 WPF 应用中运行。</span><span class="sxs-lookup"><span data-stu-id="e3693-139">This code runs in a WPF app that has a TextBlock named UserInput and a button hooked up to a Click event handler that is named Button_Click.</span></span> <span data-ttu-id="e3693-140">需要将更改为在计算机存在的文件的文件路径。</span><span class="sxs-lookup"><span data-stu-id="e3693-140">The file path needs to be changed to a file that exists on the computer.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#3](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example3.cs#3)]
 [!code-vb[Asynchronous_File_IO_async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.FileAccess" />
    <altmember cref="T:System.IO.FileMode" />
    <altmember cref="T:System.IO.FileShare" />
    <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-141">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-141">File and Stream I/O</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-142">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-142">How to: Read Text from a File</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-143">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-143">How to: Write Text to a File</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md"><span data-ttu-id="e3693-144">如何：对新建的数据文件进行读取和写入</span><span class="sxs-lookup"><span data-stu-id="e3693-144">How to: Read and Write to a Newly Created Data File</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e3693-145">初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-145">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Win32.SafeHandles.SafeFileHandle handle, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As SafeFileHandle, access As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(Microsoft::Win32::SafeHandles::SafeFileHandle ^ handle, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : Microsoft.Win32.SafeHandles.SafeFileHandle * System.IO.FileAccess -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="Microsoft.Win32.SafeHandles.SafeFileHandle" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="e3693-146">当前 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-146">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</span></span></param>
        <param name="access"><span data-ttu-id="e3693-147">一个常数，用于设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-147">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span></span></param>
        <summary><span data-ttu-id="e3693-148">使用指定的读/写权限为指定的文件句柄初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-148">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-149">当<xref:System.IO.Stream.Close%2A>是调用，同时关闭句柄和文件的句柄计数将减少。</span><span class="sxs-lookup"><span data-stu-id="e3693-149">When <xref:System.IO.Stream.Close%2A> is called, the handle is also closed and the file's handle count is decremented.</span></span>  
  
 <span data-ttu-id="e3693-150">`FileStream` 假定它具有该句柄的独有控制。</span><span class="sxs-lookup"><span data-stu-id="e3693-150">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="e3693-151">读取、 写入或查找时`FileStream`还持有句柄可能会导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="e3693-151">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="e3693-152">对于数据的安全，请调用<xref:System.IO.FileStream.Flush%2A>之前使用句柄，并避免而不调用任何方法`Close`完成后使用句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-152">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-153">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-153">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-154">`FileShare.Read` 这些是默认值<xref:System.IO.FileStream>构造函数而无需`FileShare`参数。</span><span class="sxs-lookup"><span data-stu-id="e3693-154">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
 <span data-ttu-id="e3693-155">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-155">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-156"><paramref name="access" /> 不是 <see cref="T:System.IO.FileAccess" /> 的字段。</span><span class="sxs-lookup"><span data-stu-id="e3693-156"><paramref name="access" /> is not a field of <see cref="T:System.IO.FileAccess" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-157">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-157">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-158">出现 I/O 错误，例如磁盘错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-158">An I/O error, such as a disk error, occurred.</span></span>  
  
<span data-ttu-id="e3693-159">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-159">-or-</span></span> 
<span data-ttu-id="e3693-160">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-160">The stream has been closed.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-161">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-161">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-162">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-162">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-163">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-163">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-164">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-164">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-165">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-165">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-166">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-166">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (IntPtr handle, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As IntPtr, access As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(IntPtr handle, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : nativeint * System.IO.FileAccess -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use FileStream(SafeFileHandle handle, FileAccess access) instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This constructor has been deprecated.  Please use new FileStream(SafeFileHandle handle, FileAccess access) instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="e3693-167">当前 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-167">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</span></span></param>
        <param name="access"><span data-ttu-id="e3693-168">一个常数，用于设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-168">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span></span></param>
        <summary><span data-ttu-id="e3693-169">使用指定的读/写权限为指定的文件句柄初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-169">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-170">当<xref:System.IO.Stream.Close%2A>是调用，同时关闭句柄和文件的句柄计数将减少。</span><span class="sxs-lookup"><span data-stu-id="e3693-170">When <xref:System.IO.Stream.Close%2A> is called, the handle is also closed and the file's handle count is decremented.</span></span>  
  
 <span data-ttu-id="e3693-171">`FileStream` 假定它具有该句柄的独有控制。</span><span class="sxs-lookup"><span data-stu-id="e3693-171">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="e3693-172">读取、 写入或查找时`FileStream`还持有句柄可能会导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="e3693-172">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="e3693-173">对于数据的安全，请调用<xref:System.IO.FileStream.Flush%2A>之前使用句柄，并避免而不调用任何方法`Close`完成后使用句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-173">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-174">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-174">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-175">`FileShare.Read` 这些是默认值<xref:System.IO.FileStream>构造函数而无需`FileShare`参数。</span><span class="sxs-lookup"><span data-stu-id="e3693-175">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
 <span data-ttu-id="e3693-176">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-176">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-177"><paramref name="access" /> 不是 <see cref="T:System.IO.FileAccess" /> 的字段。</span><span class="sxs-lookup"><span data-stu-id="e3693-177"><paramref name="access" /> is not a field of <see cref="T:System.IO.FileAccess" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-178">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-178">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-179">出现 I/O 错误，例如磁盘错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-179">An I/O error, such as a disk error, occurred.</span></span>  
  
<span data-ttu-id="e3693-180">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-180">-or-</span></span> 
<span data-ttu-id="e3693-181">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-181">The stream has been closed.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-182">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-182">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-183">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-183">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-184">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-184">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-185">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-185">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-186">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-186">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-187">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-187">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="e3693-188">当前 <see langword="FileStream" /> 对象将封装的文件的相对路径或绝对路径。</span><span class="sxs-lookup"><span data-stu-id="e3693-188">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</span></span></param>
        <param name="mode"><span data-ttu-id="e3693-189">一个确定如何打开或创建文件的常数。</span><span class="sxs-lookup"><span data-stu-id="e3693-189">A constant that determines how to open or create the file.</span></span></param>
        <summary><span data-ttu-id="e3693-190">使用指定的路径和创建模式初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-190">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path and creation mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-191">.NET Framework 不支持直接访问通过路径是设备名称，如物理磁盘"\\\\。 \PHYSICALDRIVE0"。</span><span class="sxs-lookup"><span data-stu-id="e3693-191">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="e3693-192">`path`参数可以是文件名，包括通用命名约定 (UNC) 共享上的文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-192">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
 <span data-ttu-id="e3693-193">构造函数被授予读/写访问权限，对该文件，并且打开共享读访问权限 (即，请求打开文件进行写入由这个或另一个进程之前，无法`FileStream`对象已关闭，但读取尝试将会成功)。</span><span class="sxs-lookup"><span data-stu-id="e3693-193">The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed).</span></span>  
  
 <span data-ttu-id="e3693-194">不能使用此构造函数可用来打开只读文件;相反，必须使用构造函数接受`FileAccess`参数值设置为`FileAccess.Read`。</span><span class="sxs-lookup"><span data-stu-id="e3693-194">You cannot use this constructor to open read-only files; instead, you must use a constructor that accepts a `FileAccess` parameter with the value set to `FileAccess.Read`.</span></span>  
  
 <span data-ttu-id="e3693-195">缓冲区大小设置为 4096 个字节 (4 KB) 的默认大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-195">The buffer size is set to the default size of 4096 bytes (4 KB).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-196">`path` 不需要为存储在磁盘; 上的文件它可以是一个系统，支持通过流访问的任何部分。</span><span class="sxs-lookup"><span data-stu-id="e3693-196">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="e3693-197">例如，具体取决于系统，此类可以访问物理设备。</span><span class="sxs-lookup"><span data-stu-id="e3693-197">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="e3693-198"><xref:System.IO.Stream.CanSeek%2A> 是`true`所有<xref:System.IO.FileStream>封装文件的对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-198"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="e3693-199">如果`path`指示不支持查找，设备<xref:System.IO.FileStream.CanSeek%2A>属性所产生<xref:System.IO.FileStream>是`false`。</span><span class="sxs-lookup"><span data-stu-id="e3693-199">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="e3693-200">有关附加信息，请参见 <xref:System.IO.Stream.CanSeek%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-200">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
 <span data-ttu-id="e3693-201">`FileShare.Read` 这些是默认值<xref:System.IO.FileStream>构造函数而无需`FileShare`参数。</span><span class="sxs-lookup"><span data-stu-id="e3693-201">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
 <span data-ttu-id="e3693-202">对于构造函数而无需<xref:System.IO.FileAccess>参数，如果`mode`参数设置为<xref:System.IO.FileMode.Append>，<xref:System.IO.FileAccess.Write>是默认访问权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-202">For constructors without a <xref:System.IO.FileAccess> parameter, if the `mode` parameter is set to <xref:System.IO.FileMode.Append>, <xref:System.IO.FileAccess.Write> is the default access.</span></span> <span data-ttu-id="e3693-203">否则，将访问权限设置为<xref:System.IO.FileAccess.ReadWrite>。</span><span class="sxs-lookup"><span data-stu-id="e3693-203">Otherwise, the access is set to <xref:System.IO.FileAccess.ReadWrite>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-204">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-204">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-205">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-205">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-206">下面的代码示例演示如何将数据写入到文件，按字节，然后验证数据是否被正确写入。</span><span class="sxs-lookup"><span data-stu-id="e3693-206">The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.FileStream1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream1/CPP/source.cpp#1)]
 [!code-csharp[System.IO.FileStream1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream1/CS/source.cs#1)]
 [!code-vb[System.IO.FileStream1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-207"><paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="e3693-207"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span></span>  
  
<span data-ttu-id="e3693-208">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-208">-or-</span></span> 
 <span data-ttu-id="e3693-209"><paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-209"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-210"><paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-210"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-211"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-211"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-212">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-212">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="e3693-213">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-213">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span></span> <span data-ttu-id="e3693-214">该文件必须以这些模式存在。</span><span class="sxs-lookup"><span data-stu-id="e3693-214">The file must already exist in these modes.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-215">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-215">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span></span>  
  
<span data-ttu-id="e3693-216">或</span><span class="sxs-lookup"><span data-stu-id="e3693-216">-or-</span></span> 
<span data-ttu-id="e3693-217">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-217">The stream has been closed.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="e3693-218">指定的路径无效，例如位于未映射的驱动器上。</span><span class="sxs-lookup"><span data-stu-id="e3693-218">The specified path is invalid, such as being on an unmapped drive.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="e3693-219">指定的路径和/或文件名超过了系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="e3693-219">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-220"><paramref name="mode" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="e3693-220"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-221">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-221">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-222">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-222">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <altmember cref="F:System.IO.Path.InvalidPathChars" />
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-223">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-223">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-224">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-224">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-225">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-225">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Win32.SafeHandles.SafeFileHandle handle, valuetype System.IO.FileAccess access, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As SafeFileHandle, access As FileAccess, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(Microsoft::Win32::SafeHandles::SafeFileHandle ^ handle, System::IO::FileAccess access, int bufferSize);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : Microsoft.Win32.SafeHandles.SafeFileHandle * System.IO.FileAccess * int -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access, bufferSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="Microsoft.Win32.SafeHandles.SafeFileHandle" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="e3693-226">当前 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-226">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</span></span></param>
        <param name="access"><span data-ttu-id="e3693-227">一个 <see cref="T:System.IO.FileAccess" /> 常数，它设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-227">A <see cref="T:System.IO.FileAccess" /> constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="e3693-228">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-228">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span></span> <span data-ttu-id="e3693-229">默认缓冲区大小为 4096。</span><span class="sxs-lookup"><span data-stu-id="e3693-229">The default buffer size is 4096.</span></span></param>
        <summary><span data-ttu-id="e3693-230">使用指定的读/写权限和缓冲区大小为指定的文件句柄初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-230">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, and buffer size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-231">`FileStream` 假定它具有该句柄的独有控制。</span><span class="sxs-lookup"><span data-stu-id="e3693-231">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="e3693-232">读取、 写入或查找时`FileStream`还持有句柄可能会导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="e3693-232">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="e3693-233">对于数据的安全，请调用<xref:System.IO.FileStream.Flush%2A>之前使用句柄，并避免而不调用任何方法`Close`完成后使用句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-233">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.</span></span> <span data-ttu-id="e3693-234">或者，对读取和写入句柄之前调用此`FileStream`构造函数。</span><span class="sxs-lookup"><span data-stu-id="e3693-234">Alternately, read and write to the handle before calling this `FileStream` constructor.</span></span>  
  
 <span data-ttu-id="e3693-235">`FileShare.Read` 这些是默认值<xref:System.IO.FileStream>构造函数而无需`FileShare`参数。</span><span class="sxs-lookup"><span data-stu-id="e3693-235">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-236">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-236">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-237">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-237">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-238"><paramref name="handle" /> 参数是无效的句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-238">The <paramref name="handle" /> parameter is an invalid handle.</span></span>  
  
<span data-ttu-id="e3693-239">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-239">-or-</span></span> 
<span data-ttu-id="e3693-240"><paramref name="handle" /> 参数是同步句柄，但被异步使用。</span><span class="sxs-lookup"><span data-stu-id="e3693-240">The <paramref name="handle" /> parameter is a synchronous handle and it was used asynchronously.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-241"><paramref name="bufferSize" /> 参数为负。</span><span class="sxs-lookup"><span data-stu-id="e3693-241">The <paramref name="bufferSize" /> parameter is negative.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-242">出现 I/O 错误，例如磁盘错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-242">An I/O error, such as a disk error, occurred.</span></span>  
  
<span data-ttu-id="e3693-243">或</span><span class="sxs-lookup"><span data-stu-id="e3693-243">-or-</span></span> 
<span data-ttu-id="e3693-244">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-244">The stream has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-245">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-245">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-246">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-246">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-247">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-247">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-248">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-248">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="e3693-249">若要调用非托管的代码的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-249">for permission to call unmanaged code.</span></span> <span data-ttu-id="e3693-250">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="e3693-250">Associated enumerations: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-251">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-251">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-252">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-252">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-253">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-253">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, valuetype System.IO.FileAccess access, bool ownsHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As IntPtr, access As FileAccess, ownsHandle As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(IntPtr handle, System::IO::FileAccess access, bool ownsHandle);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : nativeint * System.IO.FileAccess * bool -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access, ownsHandle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use FileStream(SafeFileHandle handle, FileAccess access) instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This constructor has been deprecated.  Please use new FileStream(SafeFileHandle handle, FileAccess access) instead, and optionally make a new SafeFileHandle with ownsHandle=false if needed.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="e3693-254">当前 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-254">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</span></span></param>
        <param name="access"><span data-ttu-id="e3693-255">一个常数，用于设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-255">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span></span></param>
        <param name="ownsHandle"><span data-ttu-id="e3693-256">如果文件句柄将由此 <see langword="FileStream" /> 实例所有，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-256"><see langword="true" /> if the file handle will be owned by this <see langword="FileStream" /> instance; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e3693-257">使用指定的读/写权限和 <see langword="FileStream" /> 实例所属权为指定的文件句柄初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-257">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission and <see langword="FileStream" /> instance ownership.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-258">`FileStream`对象为文件指定指定的访问权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-258">The `FileStream` object is given the specified access to the file.</span></span> <span data-ttu-id="e3693-259">将句柄所有权将按指定。</span><span class="sxs-lookup"><span data-stu-id="e3693-259">The ownership of the handle will be as specified.</span></span> <span data-ttu-id="e3693-260">如果此过程在拥有句柄，调用<xref:System.IO.Stream.Close%2A>方法还将关闭句柄和文件的句柄计数将减少。</span><span class="sxs-lookup"><span data-stu-id="e3693-260">If this process owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle and the file's handle count is decremented.</span></span> <span data-ttu-id="e3693-261">`FileStream`对象都提供了默认缓冲区大小为 4096 字节。</span><span class="sxs-lookup"><span data-stu-id="e3693-261">The `FileStream` object is given the default buffer size of 4096 bytes.</span></span>  
  
 <span data-ttu-id="e3693-262">`FileStream` 假定它具有该句柄的独有控制。</span><span class="sxs-lookup"><span data-stu-id="e3693-262">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="e3693-263">读取、 写入或查找时`FileStream`还持有句柄可能会导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="e3693-263">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="e3693-264">对于数据的安全，请调用<xref:System.IO.FileStream.Flush%2A>之前使用句柄，并避免调用的方法以外`Close`完成后使用句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-264">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling methods other than `Close` after you are done using the handle.</span></span>  
  
 <span data-ttu-id="e3693-265">`FileShare.Read` 这些是默认值<xref:System.IO.FileStream>构造函数而无需`FileShare`参数。</span><span class="sxs-lookup"><span data-stu-id="e3693-265">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-266">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-266">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-267">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-267">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-268"><paramref name="access" /> 不是 <see cref="T:System.IO.FileAccess" /> 的字段。</span><span class="sxs-lookup"><span data-stu-id="e3693-268"><paramref name="access" /> is not a field of <see cref="T:System.IO.FileAccess" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-269">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-269">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-270">出现 I/O 错误，例如磁盘错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-270">An I/O error, such as a disk error, occurred.</span></span>  
  
<span data-ttu-id="e3693-271">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-271">-or-</span></span> 
<span data-ttu-id="e3693-272">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-272">The stream has been closed.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-273">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-273">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-274">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-274">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-275">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-275">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-276">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-276">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-277">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-277">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-278">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-278">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="e3693-279">当前 <see langword="FileStream" /> 对象将封装的文件的相对路径或绝对路径。</span><span class="sxs-lookup"><span data-stu-id="e3693-279">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</span></span></param>
        <param name="mode"><span data-ttu-id="e3693-280">一个确定如何打开或创建文件的常数。</span><span class="sxs-lookup"><span data-stu-id="e3693-280">A constant that determines how to open or create the file.</span></span></param>
        <param name="access"><span data-ttu-id="e3693-281">一个常数，用于确定 <see langword="FileStream" /> 对象访问文件的方式。</span><span class="sxs-lookup"><span data-stu-id="e3693-281">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object.</span></span> <span data-ttu-id="e3693-282">该常数还可以确定由 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性返回的值。</span><span class="sxs-lookup"><span data-stu-id="e3693-282">This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span></span> <span data-ttu-id="e3693-283">如果 <paramref name="path" /> 指定磁盘文件，则 <see cref="P:System.IO.FileStream.CanSeek" /> 为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-283"><see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</span></span></param>
        <summary><span data-ttu-id="e3693-284">使用指定的路径、创建模式和读/写权限初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-284">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, and read/write permission.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-285">.NET Framework 不支持直接访问通过路径是设备名称，如物理磁盘"\\\\。 \PHYSICALDRIVE0"。</span><span class="sxs-lookup"><span data-stu-id="e3693-285">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="e3693-286">`path`参数可以是文件名，包括通用命名约定 (UNC) 共享上的文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-286">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
 <span data-ttu-id="e3693-287">构造函数被授予读/写访问权限，对该文件，并且打开共享读访问权限 (即，请求打开文件进行写入由这个或另一个进程之前，无法`FileStream`对象已关闭，但读取尝试将会成功)。</span><span class="sxs-lookup"><span data-stu-id="e3693-287">The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed).</span></span> <span data-ttu-id="e3693-288">缓冲区大小设置为 4096 个字节 (4 KB) 的默认大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-288">The buffer size is set to the default size of 4096 bytes (4 KB).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-289">`path` 不需要为存储在磁盘; 上的文件它可以是一个系统，支持通过流访问的任何部分。</span><span class="sxs-lookup"><span data-stu-id="e3693-289">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="e3693-290">例如，具体取决于系统，此类可以访问物理设备。</span><span class="sxs-lookup"><span data-stu-id="e3693-290">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="e3693-291"><xref:System.IO.Stream.CanSeek%2A> 是`true`所有<xref:System.IO.FileStream>封装文件的对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-291"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="e3693-292">如果`path`指示不支持查找，设备<xref:System.IO.FileStream.CanSeek%2A>属性所产生<xref:System.IO.FileStream>是`false`。</span><span class="sxs-lookup"><span data-stu-id="e3693-292">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="e3693-293">有关附加信息，请参见 <xref:System.IO.Stream.CanSeek%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-293">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
 <span data-ttu-id="e3693-294">`FileShare.Read` 这些是默认值<xref:System.IO.FileStream>构造函数而无需`FileShare`参数。</span><span class="sxs-lookup"><span data-stu-id="e3693-294">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-295">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-295">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-296">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-296">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-297"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-297"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-298"><paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="e3693-298"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span></span>  
  
<span data-ttu-id="e3693-299">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-299">-or-</span></span> 
 <span data-ttu-id="e3693-300"><paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-300"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-301"><paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-301"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="e3693-302">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-302">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span></span> <span data-ttu-id="e3693-303">该文件必须以这些模式存在。</span><span class="sxs-lookup"><span data-stu-id="e3693-303">The file must already exist in these modes.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-304">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-304">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span></span>  
  
<span data-ttu-id="e3693-305">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-305">-or-</span></span> 
<span data-ttu-id="e3693-306">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-306">The stream has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-307">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-307">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="e3693-308">指定的路径无效，例如位于未映射的驱动器上。</span><span class="sxs-lookup"><span data-stu-id="e3693-308">The specified path is invalid, such as being on an unmapped drive.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-309">对于指定的 <paramref name="path" />，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件或目录设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-309">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="e3693-310">指定的路径和/或文件名超过了系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="e3693-310">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-311"><paramref name="mode" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="e3693-311"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-312">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-312">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-313">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-313">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-314">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-314">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-315">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-315">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-316">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-316">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize, bool isAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Win32.SafeHandles.SafeFileHandle handle, valuetype System.IO.FileAccess access, int32 bufferSize, bool isAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As SafeFileHandle, access As FileAccess, bufferSize As Integer, isAsync As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(Microsoft::Win32::SafeHandles::SafeFileHandle ^ handle, System::IO::FileAccess access, int bufferSize, bool isAsync);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : Microsoft.Win32.SafeHandles.SafeFileHandle * System.IO.FileAccess * int * bool -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access, bufferSize, isAsync)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="Microsoft.Win32.SafeHandles.SafeFileHandle" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="isAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="e3693-317">此 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-317">A file handle for the file that this <see langword="FileStream" /> object will encapsulate.</span></span></param>
        <param name="access"><span data-ttu-id="e3693-318">一个常数，用于设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-318">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="e3693-319">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-319">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span></span> <span data-ttu-id="e3693-320">默认缓冲区大小为 4096。</span><span class="sxs-lookup"><span data-stu-id="e3693-320">The default buffer size is 4096.</span></span></param>
        <param name="isAsync"><span data-ttu-id="e3693-321">如果异步打开句柄（即以重叠的 I/O 模式），则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-321"><see langword="true" /> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e3693-322">使用指定的读/写权限、缓冲区大小和同步或异步状态为指定的文件句柄初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-322">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, buffer size, and synchronous or asynchronous state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-323">您设置`isAsync`参数`true`以异步方式打开的文件句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-323">You set the `isAsync` parameter to `true` to open the file handle asynchronously.</span></span> <span data-ttu-id="e3693-324">当该参数是`true`，stream 利用重叠的 I/O 异步执行文件操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-324">When the parameter is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously.</span></span> <span data-ttu-id="e3693-325">但是，该参数不一定要`true`来调用<xref:System.IO.FileStream.ReadAsync%2A>， <xref:System.IO.FileStream.WriteAsync%2A>，或<xref:System.IO.Stream.CopyToAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-325">However, the parameter does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method.</span></span> <span data-ttu-id="e3693-326">当`isAsync`参数是`false`和调用异步读取和写入操作，仍将不阻止 UI 线程，但以同步方式执行实际的 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-326">When the `isAsync` parameter is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</span></span>  
  
 <span data-ttu-id="e3693-327">`FileStream` 假定它具有该句柄的独有控制。</span><span class="sxs-lookup"><span data-stu-id="e3693-327">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="e3693-328">读取、 写入或查找时`FileStream`还持有句柄可能会导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="e3693-328">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="e3693-329">对于数据的安全，请调用<xref:System.IO.FileStream.Flush%2A>之前使用句柄，并避免而不调用任何方法`Close`完成后使用句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-329">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.</span></span> <span data-ttu-id="e3693-330">或者，对读取和写入句柄之前调用此`FileStream`构造函数。</span><span class="sxs-lookup"><span data-stu-id="e3693-330">Alternately, read and write to the handle before calling this `FileStream` constructor.</span></span>  
  
 <span data-ttu-id="e3693-331">`FileShare.Read` 这些是默认值<xref:System.IO.FileStream>构造函数而无需`FileShare`参数。</span><span class="sxs-lookup"><span data-stu-id="e3693-331">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-332">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-332">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-333">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-333">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-334"><paramref name="handle" /> 参数是无效的句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-334">The <paramref name="handle" /> parameter is an invalid handle.</span></span>  
  
<span data-ttu-id="e3693-335">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-335">-or-</span></span> 
<span data-ttu-id="e3693-336"><paramref name="handle" /> 参数是同步句柄，但被异步使用。</span><span class="sxs-lookup"><span data-stu-id="e3693-336">The <paramref name="handle" /> parameter is a synchronous handle and it was used asynchronously.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-337"><paramref name="bufferSize" /> 参数为负。</span><span class="sxs-lookup"><span data-stu-id="e3693-337">The <paramref name="bufferSize" /> parameter is negative.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-338">出现 I/O 错误，例如磁盘错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-338">An I/O error, such as a disk error, occurred.</span></span>  
  
<span data-ttu-id="e3693-339">或</span><span class="sxs-lookup"><span data-stu-id="e3693-339">-or-</span></span> 
<span data-ttu-id="e3693-340">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-340">The stream has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-341">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-341">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-342">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-342">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-343">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-343">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-344">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-344">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="e3693-345">若要调用非托管的代码的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-345">for permission to call unmanaged code.</span></span> <span data-ttu-id="e3693-346">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="e3693-346">Associated enumerations: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-347">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-347">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-348">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-348">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-349">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-349">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, valuetype System.IO.FileAccess access, bool ownsHandle, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As IntPtr, access As FileAccess, ownsHandle As Boolean, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(IntPtr handle, System::IO::FileAccess access, bool ownsHandle, int bufferSize);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : nativeint * System.IO.FileAccess * bool * int -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access, ownsHandle, bufferSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use FileStream(SafeFileHandle handle, FileAccess access, int bufferSize) instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This constructor has been deprecated.  Please use new FileStream(SafeFileHandle handle, FileAccess access, int bufferSize) instead, and optionally make a new SafeFileHandle with ownsHandle=false if needed.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="e3693-350">此 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-350">A file handle for the file that this <see langword="FileStream" /> object will encapsulate.</span></span></param>
        <param name="access"><span data-ttu-id="e3693-351">一个常数，用于设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-351">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span></span></param>
        <param name="ownsHandle"><span data-ttu-id="e3693-352">如果文件句柄将由此 <see langword="FileStream" /> 实例所有，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-352"><see langword="true" /> if the file handle will be owned by this <see langword="FileStream" /> instance; otherwise, <see langword="false" />.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="e3693-353">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-353">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span></span> <span data-ttu-id="e3693-354">默认缓冲区大小为 4096。</span><span class="sxs-lookup"><span data-stu-id="e3693-354">The default buffer size is 4096.</span></span></param>
        <summary><span data-ttu-id="e3693-355">使用指定的读/写权限、<see langword="FileStream" /> 实例所属权和缓冲区大小为指定的文件句柄初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-355">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, <see langword="FileStream" /> instance ownership, and buffer size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-356">`FileStream`对象为文件指定指定的访问权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-356">The `FileStream` object is given the specified access to the file.</span></span> <span data-ttu-id="e3693-357">将句柄所有权将按指定。</span><span class="sxs-lookup"><span data-stu-id="e3693-357">The ownership of the handle will be as specified.</span></span> <span data-ttu-id="e3693-358">如果此`FileStream`拥有句柄调用<xref:System.IO.Stream.Close%2A>方法还将关闭句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-358">If this `FileStream` owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle.</span></span> <span data-ttu-id="e3693-359">具体而言，该文件的句柄计数将减少。</span><span class="sxs-lookup"><span data-stu-id="e3693-359">In particular, the file's handle count is decremented.</span></span> <span data-ttu-id="e3693-360">`FileStream`对象都提供了指定的缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-360">The `FileStream` object is given the specified buffer size.</span></span>  
  
 <span data-ttu-id="e3693-361">`FileStream` 假定它具有该句柄的独有控制。</span><span class="sxs-lookup"><span data-stu-id="e3693-361">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="e3693-362">读取、 写入或查找时`FileStream`还持有句柄可能会导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="e3693-362">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="e3693-363">对于数据的安全，请调用<xref:System.IO.FileStream.Flush%2A>之前使用句柄，并避免而不调用任何方法`Close`完成后使用句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-363">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.</span></span> <span data-ttu-id="e3693-364">或者，对读取和写入句柄之前调用此`FileStream`构造函数。</span><span class="sxs-lookup"><span data-stu-id="e3693-364">Alternately, read and write to the handle before calling this `FileStream` constructor.</span></span>  
  
 <span data-ttu-id="e3693-365">`FileShare.Read` 这些是默认值<xref:System.IO.FileStream>构造函数而无需`FileShare`参数。</span><span class="sxs-lookup"><span data-stu-id="e3693-365">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-366">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-366">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-367">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-367">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-368"><paramref name="bufferSize" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="e3693-368"><paramref name="bufferSize" /> is negative.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-369">出现 I/O 错误，例如磁盘错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-369">An I/O error, such as a disk error, occurred.</span></span>  
  
<span data-ttu-id="e3693-370">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-370">-or-</span></span> 
<span data-ttu-id="e3693-371">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-371">The stream has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-372">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-372">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-373">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-373">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-374">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-374">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-375">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-375">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-376">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-376">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-377">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-377">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-378">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-378">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess, share As FileShare)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, access, share)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="e3693-379">当前 <see langword="FileStream" /> 对象将封装的文件的相对路径或绝对路径。</span><span class="sxs-lookup"><span data-stu-id="e3693-379">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</span></span></param>
        <param name="mode"><span data-ttu-id="e3693-380">一个确定如何打开或创建文件的常数。</span><span class="sxs-lookup"><span data-stu-id="e3693-380">A constant that determines how to open or create the file.</span></span></param>
        <param name="access"><span data-ttu-id="e3693-381">一个常数，用于确定 <see langword="FileStream" /> 对象访问文件的方式。</span><span class="sxs-lookup"><span data-stu-id="e3693-381">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object.</span></span> <span data-ttu-id="e3693-382">该常数还可以确定由 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性返回的值。</span><span class="sxs-lookup"><span data-stu-id="e3693-382">This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span></span> <span data-ttu-id="e3693-383">如果 <paramref name="path" /> 指定磁盘文件，则 <see cref="P:System.IO.FileStream.CanSeek" /> 为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-383"><see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</span></span></param>
        <param name="share"><span data-ttu-id="e3693-384">一个常数，确定文件将如何由进程共享。</span><span class="sxs-lookup"><span data-stu-id="e3693-384">A constant that determines how the file will be shared by processes.</span></span></param>
        <summary><span data-ttu-id="e3693-385">使用指定的路径、创建模式、读/写权限和共享权限创建 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-385">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write permission, and sharing permission.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-386">.NET Framework 不支持直接访问通过路径是设备名称，如物理磁盘"\\\\。 \PHYSICALDRIVE0"。</span><span class="sxs-lookup"><span data-stu-id="e3693-386">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="e3693-387">`path`参数可以是文件名，包括通用命名约定 (UNC) 共享上的文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-387">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
 <span data-ttu-id="e3693-388">构造函数被授予读/写访问权限，对该文件，并且打开共享读访问权限 (即，请求打开文件进行写入由这个或另一个进程之前，无法`FileStream`对象已关闭，但读取尝试将会成功)。</span><span class="sxs-lookup"><span data-stu-id="e3693-388">The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed).</span></span> <span data-ttu-id="e3693-389">缓冲区大小设置为 4096 个字节 (4 KB) 的默认大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-389">The buffer size is set to the default size of 4096 bytes (4 KB).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-390">`path` 不需要为存储在磁盘; 上的文件它可以是一个系统，支持通过流访问的任何部分。</span><span class="sxs-lookup"><span data-stu-id="e3693-390">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="e3693-391">例如，具体取决于系统，此类可以访问物理设备。</span><span class="sxs-lookup"><span data-stu-id="e3693-391">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="e3693-392"><xref:System.IO.Stream.CanSeek%2A> 是`true`所有<xref:System.IO.FileStream>封装文件的对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-392"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="e3693-393">如果`path`指示不支持查找，设备<xref:System.IO.FileStream.CanSeek%2A>属性所产生<xref:System.IO.FileStream>是`false`。</span><span class="sxs-lookup"><span data-stu-id="e3693-393">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="e3693-394">有关附加信息，请参见 <xref:System.IO.Stream.CanSeek%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-394">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-395">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-395">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-396">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-396">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-397">此代码示例是为提供一个更大示例的一部分<xref:System.IO.FileStream.Lock%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-397">This code example is part of a larger example provided for the <xref:System.IO.FileStream.Lock%2A> method.</span></span>  
  
 [!code-cpp[System.IO.FileStream3#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#2)]
 [!code-csharp[System.IO.FileStream3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#2)]
 [!code-vb[System.IO.FileStream3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-398"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-398"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-399"><paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="e3693-399"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span></span>  
  
<span data-ttu-id="e3693-400">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-400">-or-</span></span> 
 <span data-ttu-id="e3693-401"><paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-401"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-402"><paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-402"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="e3693-403">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-403">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span></span> <span data-ttu-id="e3693-404">该文件必须以这些模式存在。</span><span class="sxs-lookup"><span data-stu-id="e3693-404">The file must already exist in these modes.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-405">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-405">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span></span>  
  
<span data-ttu-id="e3693-406">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-406">-or-</span></span> 
<span data-ttu-id="e3693-407">系统正在运行 Windows 98 或 Windows 98 Second Edition，并将 <paramref name="share" /> 设置为 <see langword="FileShare.Delete" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-407">The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to <see langword="FileShare.Delete" />.</span></span>  
  
<span data-ttu-id="e3693-408">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-408">-or-</span></span> 
<span data-ttu-id="e3693-409">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-409">The stream has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-410">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-410">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="e3693-411">指定的路径无效，例如位于未映射的驱动器上。</span><span class="sxs-lookup"><span data-stu-id="e3693-411">The specified path is invalid, such as being on an unmapped drive.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-412">对于指定的 <paramref name="path" />，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件或目录设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-412">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="e3693-413">指定的路径和/或文件名超过了系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="e3693-413">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-414"><paramref name="mode" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="e3693-414"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-415">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-415">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-416">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-416">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-417">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-417">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-418">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-418">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-419">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-419">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, valuetype System.IO.FileAccess access, bool ownsHandle, int32 bufferSize, bool isAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As IntPtr, access As FileAccess, ownsHandle As Boolean, bufferSize As Integer, isAsync As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(IntPtr handle, System::IO::FileAccess access, bool ownsHandle, int bufferSize, bool isAsync);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : nativeint * System.IO.FileAccess * bool * int * bool -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access, ownsHandle, bufferSize, isAsync)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use FileStream(SafeFileHandle handle, FileAccess access, int bufferSize, bool isAsync) instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This constructor has been deprecated.  Please use new FileStream(SafeFileHandle handle, FileAccess access, int bufferSize, bool isAsync) instead, and optionally make a new SafeFileHandle with ownsHandle=false if needed.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="isAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="e3693-420">此 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-420">A file handle for the file that this <see langword="FileStream" /> object will encapsulate.</span></span></param>
        <param name="access"><span data-ttu-id="e3693-421">一个常数，用于设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-421">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span></span></param>
        <param name="ownsHandle"><span data-ttu-id="e3693-422">如果文件句柄将由此 <see langword="FileStream" /> 实例所有，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-422"><see langword="true" /> if the file handle will be owned by this <see langword="FileStream" /> instance; otherwise, <see langword="false" />.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="e3693-423">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-423">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span></span> <span data-ttu-id="e3693-424">默认缓冲区大小为 4096。</span><span class="sxs-lookup"><span data-stu-id="e3693-424">The default buffer size is 4096.</span></span></param>
        <param name="isAsync"><span data-ttu-id="e3693-425">如果异步打开句柄（即以重叠的 I/O 模式），则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-425"><see langword="true" /> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e3693-426">使用指定的读/写权限、<see langword="FileStream" /> 实例所属权、缓冲区大小和同步或异步状态为指定的文件句柄初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-426">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, <see langword="FileStream" /> instance ownership, buffer size, and synchronous or asynchronous state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-427">`FileStream`对象为文件指定指定的访问权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-427">The `FileStream` object is given the specified access to the file.</span></span> <span data-ttu-id="e3693-428">将句柄所有权将按指定。</span><span class="sxs-lookup"><span data-stu-id="e3693-428">The ownership of the handle will be as specified.</span></span> <span data-ttu-id="e3693-429">如果此`FileStream`拥有句柄调用<xref:System.IO.Stream.Close%2A>方法还将关闭句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-429">If this `FileStream` owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle.</span></span> <span data-ttu-id="e3693-430">具体而言，该文件的句柄计数将减少。</span><span class="sxs-lookup"><span data-stu-id="e3693-430">In particular, the file's handle count is decremented.</span></span> <span data-ttu-id="e3693-431">`FileStream`对象都提供了指定的缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-431">The `FileStream` object is given the specified buffer size.</span></span>  
  
 <span data-ttu-id="e3693-432">`FileStream` 假定它具有该句柄的独有控制。</span><span class="sxs-lookup"><span data-stu-id="e3693-432">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="e3693-433">读取、 写入或查找时`FileStream`还持有句柄可能会导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="e3693-433">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="e3693-434">对于数据的安全，请调用<xref:System.IO.FileStream.Flush%2A>之前使用句柄，并避免而不调用任何方法`Close`完成后使用句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-434">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.</span></span> <span data-ttu-id="e3693-435">或者，对读取和写入句柄之前调用此`FileStream`构造函数。</span><span class="sxs-lookup"><span data-stu-id="e3693-435">Alternately, read and write to the handle before calling this `FileStream` constructor.</span></span>  
  
 <span data-ttu-id="e3693-436">`FileShare.Read` 这些是默认值<xref:System.IO.FileStream>构造函数而无需`FileShare`参数。</span><span class="sxs-lookup"><span data-stu-id="e3693-436">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-437">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-437">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-438">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-438">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-439"><paramref name="access" /> 小于 <see langword="FileAccess.Read" /> 或大于 <see langword="FileAccess.ReadWrite" />，或者 <paramref name="bufferSize" /> 小于等于 0。</span><span class="sxs-lookup"><span data-stu-id="e3693-439"><paramref name="access" /> is less than <see langword="FileAccess.Read" /> or greater than <see langword="FileAccess.ReadWrite" /> or <paramref name="bufferSize" /> is less than or equal to 0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-440">该句柄无效。</span><span class="sxs-lookup"><span data-stu-id="e3693-440">The handle is invalid.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-441">出现 I/O 错误，例如磁盘错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-441">An I/O error, such as a disk error, occurred.</span></span>  
  
<span data-ttu-id="e3693-442">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-442">-or-</span></span> 
<span data-ttu-id="e3693-443">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-443">The stream has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-444">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-444">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-445">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-445">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="e3693-446">用于访问非托管代码。</span><span class="sxs-lookup"><span data-stu-id="e3693-446">for access to unmanaged code.</span></span> <span data-ttu-id="e3693-447">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-447">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-448">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-448">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-449">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-449">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-450">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-450">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess, share As FileShare, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int bufferSize);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare * int -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, access, share, bufferSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="e3693-451">当前 <see langword="FileStream" /> 对象将封装的文件的相对路径或绝对路径。</span><span class="sxs-lookup"><span data-stu-id="e3693-451">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</span></span></param>
        <param name="mode"><span data-ttu-id="e3693-452">一个确定如何打开或创建文件的常数。</span><span class="sxs-lookup"><span data-stu-id="e3693-452">A constant that determines how to open or create the file.</span></span></param>
        <param name="access"><span data-ttu-id="e3693-453">一个常数，用于确定 <see langword="FileStream" /> 对象访问文件的方式。</span><span class="sxs-lookup"><span data-stu-id="e3693-453">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object.</span></span> <span data-ttu-id="e3693-454">该常数还可以确定由 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性返回的值。</span><span class="sxs-lookup"><span data-stu-id="e3693-454">This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span></span> <span data-ttu-id="e3693-455">如果 <paramref name="path" /> 指定磁盘文件，则 <see cref="P:System.IO.FileStream.CanSeek" /> 为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-455"><see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</span></span></param>
        <param name="share"><span data-ttu-id="e3693-456">一个常数，确定文件将如何由进程共享。</span><span class="sxs-lookup"><span data-stu-id="e3693-456">A constant that determines how the file will be shared by processes.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="e3693-457">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-457">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span></span> <span data-ttu-id="e3693-458">默认缓冲区大小为 4096。</span><span class="sxs-lookup"><span data-stu-id="e3693-458">The default buffer size is 4096.</span></span></param>
        <summary><span data-ttu-id="e3693-459">用指定的路径、创建模式、读/写及共享权限和缓冲区大小初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-459">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, and buffer size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-460">.NET Framework 不支持直接访问通过路径是设备名称，如物理磁盘"\\\\。 \PHYSICALDRIVE0"。</span><span class="sxs-lookup"><span data-stu-id="e3693-460">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="e3693-461">`path`参数可以是文件名，包括通用命名约定 (UNC) 共享上的文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-461">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-462">`path` 不需要为存储在磁盘; 上的文件它可以是一个系统，支持通过流访问的任何部分。</span><span class="sxs-lookup"><span data-stu-id="e3693-462">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="e3693-463">例如，具体取决于系统，此类可以访问物理设备。</span><span class="sxs-lookup"><span data-stu-id="e3693-463">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="e3693-464"><xref:System.IO.Stream.CanSeek%2A> 是`true`所有<xref:System.IO.FileStream>封装文件的对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-464"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="e3693-465">如果`path`指示不支持查找，设备<xref:System.IO.FileStream.CanSeek%2A>属性所产生<xref:System.IO.FileStream>是`false`。</span><span class="sxs-lookup"><span data-stu-id="e3693-465">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="e3693-466">有关附加信息，请参见 <xref:System.IO.Stream.CanSeek%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-466">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-467">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-467">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-468">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-468">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-469"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-469"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-470"><paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="e3693-470"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span></span>  
  
<span data-ttu-id="e3693-471">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-471">-or-</span></span> 
 <span data-ttu-id="e3693-472"><paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-472"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-473"><paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-473"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-474"><paramref name="bufferSize" /> 为负数或零。</span><span class="sxs-lookup"><span data-stu-id="e3693-474"><paramref name="bufferSize" /> is negative or zero.</span></span>  
  
<span data-ttu-id="e3693-475">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-475">-or-</span></span> 
 <span data-ttu-id="e3693-476"><paramref name="mode" />、<paramref name="access" /> 或 <paramref name="share" /> 包含无效的值。</span><span class="sxs-lookup"><span data-stu-id="e3693-476"><paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="e3693-477">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-477">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span></span> <span data-ttu-id="e3693-478">该文件必须以这些模式存在。</span><span class="sxs-lookup"><span data-stu-id="e3693-478">The file must already exist in these modes.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-479">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-479">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span></span>  
  
<span data-ttu-id="e3693-480">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-480">-or-</span></span> 
<span data-ttu-id="e3693-481">系统正在运行 Windows 98 或 Windows 98 Second Edition，并将 <paramref name="share" /> 设置为 <see langword="FileShare.Delete" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-481">The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to <see langword="FileShare.Delete" />.</span></span>  
  
<span data-ttu-id="e3693-482">或</span><span class="sxs-lookup"><span data-stu-id="e3693-482">-or-</span></span> 
<span data-ttu-id="e3693-483">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-483">The stream has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-484">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-484">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="e3693-485">指定的路径无效，例如位于未映射的驱动器上。</span><span class="sxs-lookup"><span data-stu-id="e3693-485">The specified path is invalid, such as being on an unmapped drive.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-486">对于指定的 <paramref name="path" />，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件或目录设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-486">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="e3693-487">指定的路径和/或文件名超过了系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="e3693-487">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-488">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-488">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-489">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-489">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-490">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-490">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-491">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-491">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-492">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-492">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, int32 bufferSize, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess, share As FileShare, bufferSize As Integer, useAsync As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int bufferSize, bool useAsync);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare * int * bool -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, access, share, bufferSize, useAsync)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="e3693-493">当前 <see langword="FileStream" /> 对象将封装的文件的相对路径或绝对路径。</span><span class="sxs-lookup"><span data-stu-id="e3693-493">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</span></span></param>
        <param name="mode"><span data-ttu-id="e3693-494">一个确定如何打开或创建文件的常数。</span><span class="sxs-lookup"><span data-stu-id="e3693-494">A constant that determines how to open or create the file.</span></span></param>
        <param name="access"><span data-ttu-id="e3693-495">一个常数，用于确定 <see langword="FileStream" /> 对象访问文件的方式。</span><span class="sxs-lookup"><span data-stu-id="e3693-495">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object.</span></span> <span data-ttu-id="e3693-496">该常数还可以确定由 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性返回的值。</span><span class="sxs-lookup"><span data-stu-id="e3693-496">This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span></span> <span data-ttu-id="e3693-497">如果 <paramref name="path" /> 指定磁盘文件，则 <see cref="P:System.IO.FileStream.CanSeek" /> 为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-497"><see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</span></span></param>
        <param name="share"><span data-ttu-id="e3693-498">一个常数，确定文件将如何由进程共享。</span><span class="sxs-lookup"><span data-stu-id="e3693-498">A constant that determines how the file will be shared by processes.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="e3693-499">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-499">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span></span> <span data-ttu-id="e3693-500">默认缓冲区大小为 4096。</span><span class="sxs-lookup"><span data-stu-id="e3693-500">The default buffer size is 4096.</span></span></param>
        <param name="useAsync"><span data-ttu-id="e3693-501">指定使用异步 I/O 还是同步 I/O。</span><span class="sxs-lookup"><span data-stu-id="e3693-501">Specifies whether to use asynchronous I/O or synchronous I/O.</span></span> <span data-ttu-id="e3693-502">但是，请注意，基础操作系统可能不支持异步 I/O，因此在指定 <see langword="true" /> 后，根据所用平台，句柄可能同步打开。</span><span class="sxs-lookup"><span data-stu-id="e3693-502">However, note that the underlying operating system might not support asynchronous I/O, so when specifying <see langword="true" />, the handle might be opened synchronously depending on the platform.</span></span> <span data-ttu-id="e3693-503">当异步打开时，<see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 和 <see cref="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法在执行大量读或写时效果更好，但对于少量的读/写，这些方法速度可能要慢得多。</span><span class="sxs-lookup"><span data-stu-id="e3693-503">When opened asynchronously, the <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> and <see cref="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> methods perform better on large reads or writes, but they might be much slower for small reads or writes.</span></span> <span data-ttu-id="e3693-504">如果应用程序打算利用异步 I/O，将 <paramref name="useAsync" /> 参数设置为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-504">If the application is designed to take advantage of asynchronous I/O, set the <paramref name="useAsync" /> parameter to <see langword="true" />.</span></span> <span data-ttu-id="e3693-505">正确使用异步 I/O 可以使应用程序的速度加快 10 倍，但是如果在没有为异步 I/O 重新设计应用程序的情况下使用异步 I/O，则可能使性能降低 10 倍。</span><span class="sxs-lookup"><span data-stu-id="e3693-505">Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.</span></span></param>
        <summary><span data-ttu-id="e3693-506">使用指定的路径、创建模式、读/写和共享权限、缓冲区大小和同步或异步状态初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-506">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-507">.NET Framework 不支持直接访问通过路径是设备名称，如物理磁盘"\\\\。 \PHYSICALDRIVE0"。</span><span class="sxs-lookup"><span data-stu-id="e3693-507">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="e3693-508">`path`参数可以是文件名，包括通用命名约定 (UNC) 共享上的文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-508">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-509">`path` 不需要为存储在磁盘; 上的文件它可以是一个系统，支持通过流访问的任何部分。</span><span class="sxs-lookup"><span data-stu-id="e3693-509">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="e3693-510">例如，具体取决于系统，此类可以访问物理设备。</span><span class="sxs-lookup"><span data-stu-id="e3693-510">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="e3693-511"><xref:System.IO.Stream.CanSeek%2A> 是`true`所有<xref:System.IO.FileStream>封装文件的对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-511"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="e3693-512">如果`path`指示不支持查找，设备<xref:System.IO.FileStream.CanSeek%2A>属性所产生<xref:System.IO.FileStream>是`false`。</span><span class="sxs-lookup"><span data-stu-id="e3693-512">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="e3693-513">有关附加信息，请参见 <xref:System.IO.Stream.CanSeek%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-513">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-514">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-514">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-515">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-515">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-516">下面的代码示例演示如何以异步方式将数据写入到一个文件，然后验证数据是否被正确写入。</span><span class="sxs-lookup"><span data-stu-id="e3693-516">The following code example shows how to asynchronously write data to a file and then verify that the data was written correctly.</span></span> <span data-ttu-id="e3693-517">一个`State`创建对象将信息从主线程传递`EndReadCallback`和`EndWriteCallback`方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-517">A `State` object is created to pass information from the main thread to the `EndReadCallback` and `EndWriteCallback` methods.</span></span>  
  
 [!code-cpp[System.IO.FileStream2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#1)]
 [!code-csharp[System.IO.FileStream2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#1)]
 [!code-vb[System.IO.FileStream2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-518"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-518"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-519"><paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="e3693-519"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span></span>  
  
<span data-ttu-id="e3693-520">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-520">-or-</span></span> 
 <span data-ttu-id="e3693-521"><paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-521"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-522"><paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-522"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-523"><paramref name="bufferSize" /> 为负数或零。</span><span class="sxs-lookup"><span data-stu-id="e3693-523"><paramref name="bufferSize" /> is negative or zero.</span></span>  
  
<span data-ttu-id="e3693-524">或</span><span class="sxs-lookup"><span data-stu-id="e3693-524">-or-</span></span> 
 <span data-ttu-id="e3693-525"><paramref name="mode" />、<paramref name="access" /> 或 <paramref name="share" /> 包含无效的值。</span><span class="sxs-lookup"><span data-stu-id="e3693-525"><paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="e3693-526">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-526">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span></span> <span data-ttu-id="e3693-527">该文件必须以这些模式存在。</span><span class="sxs-lookup"><span data-stu-id="e3693-527">The file must already exist in these modes.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-528">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-528">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span></span>  
  
<span data-ttu-id="e3693-529">或</span><span class="sxs-lookup"><span data-stu-id="e3693-529">-or-</span></span> 
<span data-ttu-id="e3693-530">系统正在运行 Windows 98 或 Windows 98 Second Edition，并将 <paramref name="share" /> 设置为 <see langword="FileShare.Delete" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-530">The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to <see langword="FileShare.Delete" />.</span></span>  
  
<span data-ttu-id="e3693-531">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-531">-or-</span></span> 
<span data-ttu-id="e3693-532">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-532">The stream has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-533">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-533">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="e3693-534">指定的路径无效，例如位于未映射的驱动器上。</span><span class="sxs-lookup"><span data-stu-id="e3693-534">The specified path is invalid, such as being on an unmapped drive.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-535">对于指定的 <paramref name="path" />，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件或目录设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-535">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="e3693-536">指定的路径和/或文件名超过了系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="e3693-536">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-537">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-537">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-538">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-538">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <altmember cref="T:System.IO.File" />
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-539">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-539">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-540">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-540">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-541">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-541">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, int32 bufferSize, valuetype System.IO.FileOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess, share As FileShare, bufferSize As Integer, options As FileOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int bufferSize, System::IO::FileOptions options);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare * int * System.IO.FileOptions -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, access, share, bufferSize, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="options" Type="System.IO.FileOptions" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="e3693-542">当前 <see langword="FileStream" /> 对象将封装的文件的相对路径或绝对路径。</span><span class="sxs-lookup"><span data-stu-id="e3693-542">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</span></span></param>
        <param name="mode"><span data-ttu-id="e3693-543">一个确定如何打开或创建文件的常数。</span><span class="sxs-lookup"><span data-stu-id="e3693-543">A constant that determines how to open or create the file.</span></span></param>
        <param name="access"><span data-ttu-id="e3693-544">一个常数，用于确定 <see langword="FileStream" /> 对象访问文件的方式。</span><span class="sxs-lookup"><span data-stu-id="e3693-544">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object.</span></span> <span data-ttu-id="e3693-545">该常数还可以确定由 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性返回的值。</span><span class="sxs-lookup"><span data-stu-id="e3693-545">This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span></span> <span data-ttu-id="e3693-546">如果 <paramref name="path" /> 指定磁盘文件，则 <see cref="P:System.IO.FileStream.CanSeek" /> 为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-546"><see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</span></span></param>
        <param name="share"><span data-ttu-id="e3693-547">一个常数，确定文件将如何由进程共享。</span><span class="sxs-lookup"><span data-stu-id="e3693-547">A constant that determines how the file will be shared by processes.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="e3693-548">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-548">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span></span> <span data-ttu-id="e3693-549">默认缓冲区大小为 4096。</span><span class="sxs-lookup"><span data-stu-id="e3693-549">The default buffer size is 4096.</span></span></param>
        <param name="options"><span data-ttu-id="e3693-550">一个指定附加文件选项的值。</span><span class="sxs-lookup"><span data-stu-id="e3693-550">A value that specifies additional file options.</span></span></param>
        <summary><span data-ttu-id="e3693-551">使用指定的路径、创建模式、读/写和共享权限、其他 FileStreams 可以具有的对此文件的访问权限、缓冲区大小和附加文件选项初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-551">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-552">.NET Framework 不支持直接访问通过路径是设备名称，如物理磁盘"\\\\。 \PHYSICALDRIVE0"。</span><span class="sxs-lookup"><span data-stu-id="e3693-552">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="e3693-553">`fileOptions`参数用于提供更高级的操作创建时可以利用对访问<xref:System.IO.FileStream>对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-553">The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.</span></span>  
  
 <span data-ttu-id="e3693-554">`path`参数可以是文件名，包括通用命名约定 (UNC) 共享上的文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-554">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-555">`path` 不需要为存储在磁盘; 上的文件它可以是一个系统，支持通过流访问的任何部分。</span><span class="sxs-lookup"><span data-stu-id="e3693-555">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="e3693-556">例如，具体取决于系统，此类可以访问物理设备。</span><span class="sxs-lookup"><span data-stu-id="e3693-556">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="e3693-557"><xref:System.IO.Stream.CanSeek%2A> 是`true`所有<xref:System.IO.FileStream>封装文件的对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-557"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="e3693-558">如果`path`指示不支持查找，设备<xref:System.IO.FileStream.CanSeek%2A>属性所产生<xref:System.IO.FileStream>是`false`。</span><span class="sxs-lookup"><span data-stu-id="e3693-558">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="e3693-559">有关附加信息，请参见 <xref:System.IO.Stream.CanSeek%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-559">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-560">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-560">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-561">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-561">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-562">下面的示例将数据写入到文件，然后读数据使用<xref:System.IO.FileStream>对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-562">The following example writes data to a file and then reads the data using the <xref:System.IO.FileStream> object.</span></span>  
  
 [!code-cpp[IO.FileStream.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.FileStream.ctor1/cpp/example.cpp#1)]
 [!code-csharp[IO.FileStream.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.FileStream.ctor1/CS/example.cs#1)]
 [!code-vb[IO.FileStream.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.FileStream.ctor1/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-563"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-563"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-564"><paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="e3693-564"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span></span>  
  
<span data-ttu-id="e3693-565">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-565">-or-</span></span> 
 <span data-ttu-id="e3693-566"><paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-566"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-567"><paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-567"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-568"><paramref name="bufferSize" /> 为负数或零。</span><span class="sxs-lookup"><span data-stu-id="e3693-568"><paramref name="bufferSize" /> is negative or zero.</span></span>  
  
<span data-ttu-id="e3693-569">或</span><span class="sxs-lookup"><span data-stu-id="e3693-569">-or-</span></span> 
 <span data-ttu-id="e3693-570"><paramref name="mode" />、<paramref name="access" /> 或 <paramref name="share" /> 包含无效的值。</span><span class="sxs-lookup"><span data-stu-id="e3693-570"><paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="e3693-571">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-571">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span></span> <span data-ttu-id="e3693-572">该文件必须以这些模式存在。</span><span class="sxs-lookup"><span data-stu-id="e3693-572">The file must already exist in these modes.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-573">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-573">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span></span>  
  
<span data-ttu-id="e3693-574">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-574">-or-</span></span> 
<span data-ttu-id="e3693-575">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-575">The stream has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-576">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-576">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="e3693-577">指定的路径无效，例如位于未映射的驱动器上。</span><span class="sxs-lookup"><span data-stu-id="e3693-577">The specified path is invalid, such as being on an unmapped drive.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-578">对于指定的 <paramref name="path" />，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件或目录设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-578">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span></span>  
  
<span data-ttu-id="e3693-579">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-579">-or-</span></span> 
 <span data-ttu-id="e3693-580"><see cref="F:System.IO.FileOptions.Encrypted" /> 指定用于 <paramref name="options" />，但在当前平台上不支持文件加密。</span><span class="sxs-lookup"><span data-stu-id="e3693-580"><see cref="F:System.IO.FileOptions.Encrypted" /> is specified for <paramref name="options" />, but file encryption is not supported on the current platform.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="e3693-581">指定的路径和/或文件名超过了系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="e3693-581">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-582">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-582">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-583">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-583">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-584">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-584">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-585">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-585">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-586">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-586">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.Security.AccessControl.FileSystemRights rights, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.Security.AccessControl.FileSystemRights rights, valuetype System.IO.FileShare share, int32 bufferSize, valuetype System.IO.FileOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, rights As FileSystemRights, share As FileShare, bufferSize As Integer, options As FileOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::Security::AccessControl::FileSystemRights rights, System::IO::FileShare share, int bufferSize, System::IO::FileOptions options);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.Security.AccessControl.FileSystemRights * System.IO.FileShare * int * System.IO.FileOptions -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, rights, share, bufferSize, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="rights" Type="System.Security.AccessControl.FileSystemRights" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="options" Type="System.IO.FileOptions" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="e3693-587">当前 <see cref="T:System.IO.FileStream" /> 对象将封装的文件的相对路径或绝对路径。</span><span class="sxs-lookup"><span data-stu-id="e3693-587">A relative or absolute path for the file that the current <see cref="T:System.IO.FileStream" /> object will encapsulate.</span></span></param>
        <param name="mode"><span data-ttu-id="e3693-588">一个确定如何打开或创建文件的常数。</span><span class="sxs-lookup"><span data-stu-id="e3693-588">A constant that determines how to open or create the file.</span></span></param>
        <param name="rights"><span data-ttu-id="e3693-589">一个常数，确定为文件创建访问和审核规则时要使用的访问权。</span><span class="sxs-lookup"><span data-stu-id="e3693-589">A constant that determines the access rights to use when creating access and audit rules for the file.</span></span></param>
        <param name="share"><span data-ttu-id="e3693-590">一个常数，确定文件将如何由进程共享。</span><span class="sxs-lookup"><span data-stu-id="e3693-590">A constant that determines how the file will be shared by processes.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="e3693-591">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-591">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span></span> <span data-ttu-id="e3693-592">默认缓冲区大小为 4096。</span><span class="sxs-lookup"><span data-stu-id="e3693-592">The default buffer size is 4096.</span></span></param>
        <param name="options"><span data-ttu-id="e3693-593">一个指定附加文件选项的常数。</span><span class="sxs-lookup"><span data-stu-id="e3693-593">A constant that specifies additional file options.</span></span></param>
        <summary><span data-ttu-id="e3693-594">使用指定的路径、创建模式、访问权限和共享权限、缓冲区大小和附加文件选项初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-594">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, access rights and sharing permission, the buffer size, and additional file options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-595">.NET Framework 不支持直接访问通过路径是设备名称，如物理磁盘"\\\\。 \PHYSICALDRIVE0"。</span><span class="sxs-lookup"><span data-stu-id="e3693-595">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="e3693-596">使用此<xref:System.IO.FileStream.%23ctor%2A>构造函数来应用访问权限时创建一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-596">Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file.</span></span> <span data-ttu-id="e3693-597">若要访问或修改现有文件上的权限，请考虑使用<xref:System.IO.File.GetAccessControl%2A>和<xref:System.IO.File.SetAccessControl%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-597">To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="e3693-598">`fileOptions`参数用于提供更高级的操作创建时可以利用对访问<xref:System.IO.FileStream>对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-598">The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.</span></span>  
  
 <span data-ttu-id="e3693-599">`path`参数可以是文件名，包括通用命名约定 (UNC) 共享上的文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-599">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-600">`path` 不需要为存储在磁盘; 上的文件它可以是一个系统，支持通过流访问的任何部分。</span><span class="sxs-lookup"><span data-stu-id="e3693-600">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="e3693-601">例如，具体取决于系统，此类可以访问物理设备。</span><span class="sxs-lookup"><span data-stu-id="e3693-601">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="e3693-602"><xref:System.IO.Stream.CanSeek%2A> 是`true`所有<xref:System.IO.FileStream>封装文件的对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-602"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="e3693-603">如果`path`指示不支持查找，设备<xref:System.IO.FileStream.CanSeek%2A>属性所产生<xref:System.IO.FileStream>是`false`。</span><span class="sxs-lookup"><span data-stu-id="e3693-603">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="e3693-604">有关附加信息，请参见 <xref:System.IO.Stream.CanSeek%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-604">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-605">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-605">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-606">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-606">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-607"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-607"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-608"><paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="e3693-608"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span></span>  
  
<span data-ttu-id="e3693-609">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-609">-or-</span></span> 
 <span data-ttu-id="e3693-610"><paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-610"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-611"><paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-611"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-612"><paramref name="bufferSize" /> 为负数或零。</span><span class="sxs-lookup"><span data-stu-id="e3693-612"><paramref name="bufferSize" /> is negative or zero.</span></span>  
  
<span data-ttu-id="e3693-613">或</span><span class="sxs-lookup"><span data-stu-id="e3693-613">-or-</span></span> 
 <span data-ttu-id="e3693-614"><paramref name="mode" />、<paramref name="access" /> 或 <paramref name="share" /> 包含无效的值。</span><span class="sxs-lookup"><span data-stu-id="e3693-614"><paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="e3693-615">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-615">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span></span> <span data-ttu-id="e3693-616">该文件必须以这些模式存在。</span><span class="sxs-lookup"><span data-stu-id="e3693-616">The file must already exist in these modes.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="e3693-617">当前操作系统不是 Windows NT 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="e3693-617">The current operating system is not Windows NT or later.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-618">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-618">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span></span>  
  
<span data-ttu-id="e3693-619">或</span><span class="sxs-lookup"><span data-stu-id="e3693-619">-or-</span></span> 
<span data-ttu-id="e3693-620">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-620">The stream has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-621">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-621">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="e3693-622">指定的路径无效，例如位于未映射的驱动器上。</span><span class="sxs-lookup"><span data-stu-id="e3693-622">The specified path is invalid, such as being on an unmapped drive.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-623">对于指定的 <paramref name="path" />，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件或目录设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-623">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span></span>  
  
<span data-ttu-id="e3693-624">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-624">-or-</span></span> 
 <span data-ttu-id="e3693-625"><see cref="F:System.IO.FileOptions.Encrypted" />被指定用于 <paramref name="options" />，但在当前平台上不支持文件加密。</span><span class="sxs-lookup"><span data-stu-id="e3693-625"><see cref="F:System.IO.FileOptions.Encrypted" /> is specified for <paramref name="options" />, but file encryption is not supported on the current platform.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="e3693-626">指定的 <paramref name="path" />、文件名或这两者都超过了系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="e3693-626">The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-627">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-627">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-628">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-628">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-629">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-629">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-630">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-630">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-631">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-631">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.Security.AccessControl.FileSystemRights rights, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options, System.Security.AccessControl.FileSecurity fileSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.Security.AccessControl.FileSystemRights rights, valuetype System.IO.FileShare share, int32 bufferSize, valuetype System.IO.FileOptions options, class System.Security.AccessControl.FileSecurity fileSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::Security::AccessControl::FileSystemRights rights, System::IO::FileShare share, int bufferSize, System::IO::FileOptions options, System::Security::AccessControl::FileSecurity ^ fileSecurity);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.Security.AccessControl.FileSystemRights * System.IO.FileShare * int * System.IO.FileOptions * System.Security.AccessControl.FileSecurity -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, rights, share, bufferSize, options, fileSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="rights" Type="System.Security.AccessControl.FileSystemRights" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="options" Type="System.IO.FileOptions" />
        <Parameter Name="fileSecurity" Type="System.Security.AccessControl.FileSecurity" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="e3693-632">当前 <see cref="T:System.IO.FileStream" /> 对象将封装的文件的相对路径或绝对路径。</span><span class="sxs-lookup"><span data-stu-id="e3693-632">A relative or absolute path for the file that the current <see cref="T:System.IO.FileStream" /> object will encapsulate.</span></span></param>
        <param name="mode"><span data-ttu-id="e3693-633">一个确定如何打开或创建文件的常数。</span><span class="sxs-lookup"><span data-stu-id="e3693-633">A constant that determines how to open or create the file.</span></span></param>
        <param name="rights"><span data-ttu-id="e3693-634">一个常数，确定为文件创建访问和审核规则时要使用的访问权。</span><span class="sxs-lookup"><span data-stu-id="e3693-634">A constant that determines the access rights to use when creating access and audit rules for the file.</span></span></param>
        <param name="share"><span data-ttu-id="e3693-635">一个常数，确定文件将如何由进程共享。</span><span class="sxs-lookup"><span data-stu-id="e3693-635">A constant that determines how the file will be shared by processes.</span></span></param>
        <param name="bufferSize"><span data-ttu-id="e3693-636">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="e3693-636">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span></span> <span data-ttu-id="e3693-637">默认缓冲区大小为 4096。</span><span class="sxs-lookup"><span data-stu-id="e3693-637">The default buffer size is 4096.</span></span></param>
        <param name="options"><span data-ttu-id="e3693-638">一个指定附加文件选项的常数。</span><span class="sxs-lookup"><span data-stu-id="e3693-638">A constant that specifies additional file options.</span></span></param>
        <param name="fileSecurity"><span data-ttu-id="e3693-639">一个常数，确定文件的访问控制和审核安全。</span><span class="sxs-lookup"><span data-stu-id="e3693-639">A constant that determines the access control and audit security for the file.</span></span></param>
        <summary><span data-ttu-id="e3693-640">使用指定的路径、创建模式、访问权限和共享权限、缓冲区大小、附加文件选项、访问控制和审核安全初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3693-640">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-641">.NET Framework 不支持直接访问通过路径是设备名称，如物理磁盘"\\\\。 \PHYSICALDRIVE0"。</span><span class="sxs-lookup"><span data-stu-id="e3693-641">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="e3693-642">使用此<xref:System.IO.FileStream.%23ctor%2A>构造函数来应用访问权限时创建一个文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-642">Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file.</span></span> <span data-ttu-id="e3693-643">若要访问或修改现有文件上的权限，请考虑使用<xref:System.IO.File.GetAccessControl%2A>和<xref:System.IO.File.SetAccessControl%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-643">To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="e3693-644">`fileOptions`参数用于提供更高级的操作创建时可以利用对访问<xref:System.IO.FileStream>对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-644">The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.</span></span>  
  
 <span data-ttu-id="e3693-645">`path`参数可以是文件名，包括通用命名约定 (UNC) 共享上的文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-645">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-646">`path` 不需要为存储在磁盘; 上的文件它可以是一个系统，支持通过流访问的任何部分。</span><span class="sxs-lookup"><span data-stu-id="e3693-646">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="e3693-647">例如，具体取决于系统，此类可以访问物理设备。</span><span class="sxs-lookup"><span data-stu-id="e3693-647">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="e3693-648"><xref:System.IO.Stream.CanSeek%2A> 是`true`所有<xref:System.IO.FileStream>封装文件的对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-648"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="e3693-649">如果`path`指示不支持查找，设备<xref:System.IO.FileStream.CanSeek%2A>属性所产生<xref:System.IO.FileStream>是`false`。</span><span class="sxs-lookup"><span data-stu-id="e3693-649">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="e3693-650">有关附加信息，请参见 <xref:System.IO.Stream.CanSeek%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-650">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-651">当你使用特定的区域性设置进行编译的一组字符和检索个不同的区域性设置这些相同的字符时，字符可能无法解释，和可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-651">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="e3693-652">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-652">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-653">下面的示例将数据写入到文件，然后读数据使用<xref:System.IO.FileStream>对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-653">The following example writes data to a file and then reads the data using the <xref:System.IO.FileStream> object.</span></span>  
  
 [!code-cpp[IO.FileStream.ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.FileStream.ctor2/cpp/example.cpp#1)]
 [!code-csharp[IO.FileStream.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.FileStream.ctor2/CS/example.cs#1)]
 [!code-vb[IO.FileStream.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.FileStream.ctor2/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-654"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-654"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-655"><paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="e3693-655"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span></span>  
  
<span data-ttu-id="e3693-656">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-656">-or-</span></span> 
 <span data-ttu-id="e3693-657"><paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-657"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-658"><paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</span><span class="sxs-lookup"><span data-stu-id="e3693-658"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-659"><paramref name="bufferSize" /> 为负数或零。</span><span class="sxs-lookup"><span data-stu-id="e3693-659"><paramref name="bufferSize" /> is negative or zero.</span></span>  
  
<span data-ttu-id="e3693-660">或</span><span class="sxs-lookup"><span data-stu-id="e3693-660">-or-</span></span> 
 <span data-ttu-id="e3693-661"><paramref name="mode" />、<paramref name="access" /> 或 <paramref name="share" /> 包含无效的值。</span><span class="sxs-lookup"><span data-stu-id="e3693-661"><paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="e3693-662">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-662">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span></span> <span data-ttu-id="e3693-663">该文件必须以这些模式存在。</span><span class="sxs-lookup"><span data-stu-id="e3693-663">The file must already exist in these modes.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-664">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-664">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span></span>  
  
<span data-ttu-id="e3693-665">或</span><span class="sxs-lookup"><span data-stu-id="e3693-665">-or-</span></span> 
<span data-ttu-id="e3693-666">已关闭流。</span><span class="sxs-lookup"><span data-stu-id="e3693-666">The stream has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-667">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-667">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="e3693-668">指定的路径无效，例如位于未映射的驱动器上。</span><span class="sxs-lookup"><span data-stu-id="e3693-668">The specified path is invalid, such as being on an unmapped drive.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-669">对于指定的 <paramref name="path" />，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件或目录设置为只读访问时会出现此情况。</span><span class="sxs-lookup"><span data-stu-id="e3693-669">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span></span>  
  
<span data-ttu-id="e3693-670">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-670">-or-</span></span> 
 <span data-ttu-id="e3693-671"><see cref="F:System.IO.FileOptions.Encrypted" />被指定用于 <paramref name="options" />，但在当前平台上不支持文件加密。</span><span class="sxs-lookup"><span data-stu-id="e3693-671"><see cref="F:System.IO.FileOptions.Encrypted" /> is specified for <paramref name="options" />, but file encryption is not supported on the current platform.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="e3693-672">指定的 <paramref name="path" />、文件名或这两者都超过了系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="e3693-672">The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="e3693-673">当前操作系统不是 Windows NT 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="e3693-673">The current operating system is not Windows NT or later.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-674">用于读取、 写入和追加到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-674">for reading, writing, and appending to files.</span></span> <span data-ttu-id="e3693-675">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />，和<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-675">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-676">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-676">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-677">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-677">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-678">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-678">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] array, int32 offset, int32 numBytes, class System.AsyncCallback userCallback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginRead (array As Byte(), offset As Integer, numBytes As Integer, userCallback As AsyncCallback, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ array, int offset, int numBytes, AsyncCallback ^ userCallback, System::Object ^ stateObject);" />
      <MemberSignature Language="F#" Value="override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="fileStream.BeginRead (array, offset, numBytes, userCallback, stateObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numBytes" Type="System.Int32" />
        <Parameter Name="userCallback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="e3693-679">将数据读入的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e3693-679">The buffer to read data into.</span></span></param>
        <param name="offset"><span data-ttu-id="e3693-680"><paramref name="array" /> 中的字节偏移量，从此处开始读取。</span><span class="sxs-lookup"><span data-stu-id="e3693-680">The byte offset in <paramref name="array" /> at which to begin reading.</span></span></param>
        <param name="numBytes"><span data-ttu-id="e3693-681">最多读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-681">The maximum number of bytes to read.</span></span></param>
        <param name="userCallback"><span data-ttu-id="e3693-682">异步读操作完成后调用的方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-682">The method to be called when the asynchronous read operation is completed.</span></span></param>
        <param name="stateObject"><span data-ttu-id="e3693-683">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</span><span class="sxs-lookup"><span data-stu-id="e3693-683">A user-provided object that distinguishes this particular asynchronous read request from other requests.</span></span></param>
        <summary><span data-ttu-id="e3693-684">开始异步读操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-684">Begins an asynchronous read operation.</span></span> <span data-ttu-id="e3693-685">请考虑改用 <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-685">Consider using <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> instead.</span></span></summary>
        <returns><span data-ttu-id="e3693-686">引用异步读取的对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-686">An object that references the asynchronous read.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-687">数组长度减去 <paramref name="offset" /> 小于 <paramref name="numBytes" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-687">The array length minus <paramref name="offset" /> is less than <paramref name="numBytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-688"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-688"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-689"><paramref name="offset" /> 或 <paramref name="numBytes" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="e3693-689"><paramref name="offset" /> or <paramref name="numBytes" /> is negative.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-690">尝试在文件的末尾后进行异步读取。</span><span class="sxs-lookup"><span data-stu-id="e3693-690">An asynchronous read was attempted past the end of the file.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] array, int32 offset, int32 numBytes, class System.AsyncCallback userCallback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginWrite (array As Byte(), offset As Integer, numBytes As Integer, userCallback As AsyncCallback, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ array, int offset, int numBytes, AsyncCallback ^ userCallback, System::Object ^ stateObject);" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="fileStream.BeginWrite (array, offset, numBytes, userCallback, stateObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numBytes" Type="System.Int32" />
        <Parameter Name="userCallback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="e3693-691">包含要写入当前流的数据的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e3693-691">The buffer containing data to write to the current stream.</span></span></param>
        <param name="offset"><span data-ttu-id="e3693-692"><paramref name="array" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</span><span class="sxs-lookup"><span data-stu-id="e3693-692">The zero-based byte offset in <paramref name="array" /> at which to begin copying bytes to the current stream.</span></span></param>
        <param name="numBytes"><span data-ttu-id="e3693-693">最多写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-693">The maximum number of bytes to write.</span></span></param>
        <param name="userCallback"><span data-ttu-id="e3693-694">异步写操作完成后调用的方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-694">The method to be called when the asynchronous write operation is completed.</span></span></param>
        <param name="stateObject"><span data-ttu-id="e3693-695">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</span><span class="sxs-lookup"><span data-stu-id="e3693-695">A user-provided object that distinguishes this particular asynchronous write request from other requests.</span></span></param>
        <summary><span data-ttu-id="e3693-696">开始异步写操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-696">Begins an asynchronous write operation.</span></span> <span data-ttu-id="e3693-697">请考虑改用 <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-697">Consider using <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> instead.</span></span></summary>
        <returns><span data-ttu-id="e3693-698">引用异步写入的对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-698">An object that references the asynchronous write.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-699"><paramref name="array" /> 长度减去 <paramref name="offset" /> 小于 <paramref name="numBytes" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-699"><paramref name="array" /> length minus <paramref name="offset" /> is less than <paramref name="numBytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-700"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-700"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-701"><paramref name="offset" /> 或 <paramref name="numBytes" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="e3693-701"><paramref name="offset" /> or <paramref name="numBytes" /> is negative.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-702">流不支持写入。</span><span class="sxs-lookup"><span data-stu-id="e3693-702">The stream does not support writing.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e3693-703">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="e3693-703">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-704">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-704">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.IO.FileStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3693-705">获取一个值，该值指示当前流是否支持读取。</span><span class="sxs-lookup"><span data-stu-id="e3693-705">Gets a value that indicates whether the current stream supports reading.</span></span></summary>
        <value><span data-ttu-id="e3693-706">如果流支持读取，则为 <see langword="true" />；如果流已关闭或是通过只写访问方式打开的，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-706"><see langword="true" /> if the stream supports reading; <see langword="false" /> if the stream is closed or was opened with write-only access.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-707">如果一个类派生自<xref:System.IO.Stream>不支持读取，而对调用<xref:System.IO.FileStream.Read%2A>， <xref:System.IO.FileStream.ReadByte%2A>，和<xref:System.IO.FileStream.BeginRead%2A>方法将引发<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="e3693-707">If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.ReadByte%2A>, and <xref:System.IO.FileStream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="e3693-708">如果流已关闭，此属性返回`false`。</span><span class="sxs-lookup"><span data-stu-id="e3693-708">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-709">下面的示例演示使用的`CanRead`属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-709">The following example demonstrates a use of the `CanRead` property.</span></span> <span data-ttu-id="e3693-710">此代码的输出是"MyFile.txt 不是可写。"</span><span class="sxs-lookup"><span data-stu-id="e3693-710">The output of this code is "MyFile.txt is not writable."</span></span> <span data-ttu-id="e3693-711">若要获取输出消息"MyFile.txt 可以同时为读取和写入来自。"，更改`FileAccess`参数`ReadWrite`中`FileStream`构造函数。</span><span class="sxs-lookup"><span data-stu-id="e3693-711">To get the output message "MyFile.txt can be both written to and read from.", change the `FileAccess` parameter to `ReadWrite` in the `FileStream` constructor.</span></span>  
  
 [!code-cpp[Classic FileStream.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileStream.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CS/source.cs#1)]
 [!code-vb[Classic FileStream.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-712">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-712">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-713">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-713">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-714">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-714">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.IO.FileStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3693-715">获取一个值，该值指示当前流是否支持查找。</span><span class="sxs-lookup"><span data-stu-id="e3693-715">Gets a value that indicates whether the current stream supports seeking.</span></span></summary>
        <value><span data-ttu-id="e3693-716">如果流支持查找，则为 <see langword="true" />；如果流已关闭或者如果 <see langword="FileStream" /> 是从操作系统句柄（如管道或到控制台的输出）构造的，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-716"><see langword="true" /> if the stream supports seeking; <see langword="false" /> if the stream is closed or if the <see langword="FileStream" /> was constructed from an operating-system handle such as a pipe or output to the console.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-717">如果一个类派生自<xref:System.IO.Stream>不支持查找，则调用<xref:System.IO.FileStream.Length%2A>， <xref:System.IO.FileStream.SetLength%2A>， <xref:System.IO.FileStream.Position%2A>，并<xref:System.IO.FileStream.Seek%2A>引发<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="e3693-717">If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.FileStream.Length%2A>, <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Position%2A>, and <xref:System.IO.FileStream.Seek%2A> throw a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="e3693-718">如果流已关闭，此属性返回`false`。</span><span class="sxs-lookup"><span data-stu-id="e3693-718">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-719">下面的示例使用`CanSeek`要检查流是否支持查找属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-719">The following example uses the `CanSeek` property to check whether a stream supports seeking.</span></span>  
  
 [!code-cpp[fstream canseek#1](~/samples/snippets/cpp/VS_Snippets_CLR/FStream CanSeek/CPP/fstream canseek.cpp#1)]
 [!code-csharp[fstream canseek#1](~/samples/snippets/csharp/VS_Snippets_CLR/FStream CanSeek/CS/fstream canseek.cs#1)]
 [!code-vb[fstream canseek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FStream CanSeek/VB/fstream canseek.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-720">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-720">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-721">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-721">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-722">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-722">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.IO.FileStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3693-723">获取一个值，该值指示当前流是否支持写入。</span><span class="sxs-lookup"><span data-stu-id="e3693-723">Gets a value that indicates whether the current stream supports writing.</span></span></summary>
        <value><span data-ttu-id="e3693-724">如果流支持写入，则为 <see langword="true" />；如果流已关闭或是通过只读访问方式打开的，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-724"><see langword="true" /> if the stream supports writing; <see langword="false" /> if the stream is closed or was opened with read-only access.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-725">如果一个类派生自<xref:System.IO.Stream>不支持写入，调用<xref:System.IO.FileStream.SetLength%2A>， <xref:System.IO.FileStream.Write%2A>， <xref:System.IO.FileStream.BeginWrite%2A>，或<xref:System.IO.FileStream.WriteByte%2A>引发<xref:System.NotSupportedException>。</span><span class="sxs-lookup"><span data-stu-id="e3693-725">If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.FileStream.BeginWrite%2A>, or <xref:System.IO.FileStream.WriteByte%2A> throws a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="e3693-726">如果流已关闭，此属性返回`false`。</span><span class="sxs-lookup"><span data-stu-id="e3693-726">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-727">下面的示例使用`CanWrite`要检查流是否支持写入属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-727">The following example uses the `CanWrite` property to check whether a stream supports writing.</span></span>  
  
 [!code-cpp[fstream canwrite#1](~/samples/snippets/cpp/VS_Snippets_CLR/FStream CanWrite/CPP/fstream canwrite.cpp#1)]
 [!code-csharp[fstream canwrite#1](~/samples/snippets/csharp/VS_Snippets_CLR/FStream CanWrite/CS/fstream canwrite.cs#1)]
 [!code-vb[fstream canwrite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FStream CanWrite/VB/fstream canwrite.vb#1)]  
  
 <span data-ttu-id="e3693-728">以下是一个示例使用`CanWrite`属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-728">The following is an example using the `CanWrite` property.</span></span> <span data-ttu-id="e3693-729">此代码的输出为"可写 ' MyFile.txt"。</span><span class="sxs-lookup"><span data-stu-id="e3693-729">The output of this code is "MyFile.txt is writable."</span></span> <span data-ttu-id="e3693-730">若要获取输出消息"MyFile.txt 可以同时为读取和写入来自。"，更改`FileAccess`参数`ReadWrite`中`FileStream`构造函数。</span><span class="sxs-lookup"><span data-stu-id="e3693-730">To get the output message "MyFile.txt can be both written to and read from.", change the `FileAccess` parameter to `ReadWrite` in the `FileStream` constructor.</span></span>  
  
 [!code-cpp[Classic FileStream.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.CanWrite Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileStream.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.CanWrite Example/CS/source.cs#1)]
 [!code-vb[Classic FileStream.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.CanWrite Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-731">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-731">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-732">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-732">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-733">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-733">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="fileStream.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3693-734">此成员替代 <see cref="M:System.IO.Stream.Close" /> 且该主题可能包括更完整的文档。</span><span class="sxs-lookup"><span data-stu-id="e3693-734">This member overrides <see cref="M:System.IO.Stream.Close" />, and more complete documentation might be available in that topic.</span></span>

<span data-ttu-id="e3693-735">关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。</span><span class="sxs-lookup"><span data-stu-id="e3693-735">Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="fileStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="e3693-736">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-736"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="e3693-737">释放由 <see cref="T:System.IO.FileStream" /> 占用的非托管资源，还可以另外再释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="e3693-737">Releases the unmanaged resources used by the <see cref="T:System.IO.FileStream" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-738">调用此方法由公共<xref:System.ComponentModel.Component.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-738">This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="e3693-739"><xref:System.ComponentModel.Component.Dispose%2A> 调用受保护<xref:System.IO.FileStream.Dispose%2A>方法替换`disposing`参数设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="e3693-739"><xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.FileStream.Dispose%2A> method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="e3693-740"><xref:System.Object.Finalize%2A> 调用<xref:System.IO.FileStream.Dispose%2A>与`disposing`设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="e3693-740"><xref:System.Object.Finalize%2A> invokes <xref:System.IO.FileStream.Dispose%2A> with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="e3693-741">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.IO.FileStream> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="e3693-741">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.FileStream> references.</span></span> <span data-ttu-id="e3693-742">此方法调用每个引用对象的 <xref:System.ComponentModel.Component.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-742">This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3693-743">
            <see cref="M:System.ComponentModel.Component.Dispose" /> 可以由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="e3693-743">
            <see cref="M:System.ComponentModel.Component.Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="e3693-744">重写时<see cref="M:System.IO.FileStream.Dispose(System.Boolean)" />小心不要引用已经释放的早期调用中的对象<see cref="M:System.ComponentModel.Component.Dispose" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-744">When overriding <see cref="M:System.IO.FileStream.Dispose(System.Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see cref="M:System.ComponentModel.Component.Dispose" />.</span></span> <span data-ttu-id="e3693-745">有关如何实现详细信息<see cref="M:System.IO.FileStream.Dispose(System.Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-745">For more information about how to implement <see cref="M:System.IO.FileStream.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="e3693-746">有关详细信息<see cref="M:System.ComponentModel.Component.Dispose" />并<see cref="M:System.Object.Finalize" />，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-746">For more information about <see cref="M:System.ComponentModel.Component.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span></para></block>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-747">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-747">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-748">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-748">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-749">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-749">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndRead : IAsyncResult -&gt; int" Usage="fileStream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="e3693-750">对所等待的挂起异步请求的引用。</span><span class="sxs-lookup"><span data-stu-id="e3693-750">The reference to the pending asynchronous request to wait for.</span></span></param>
        <summary><span data-ttu-id="e3693-751">等待挂起的异步读操作完成。</span><span class="sxs-lookup"><span data-stu-id="e3693-751">Waits for the pending asynchronous read operation to complete.</span></span> <span data-ttu-id="e3693-752">（请考虑改用 <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。）</span><span class="sxs-lookup"><span data-stu-id="e3693-752">(Consider using <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> instead.)</span></span></summary>
        <returns><span data-ttu-id="e3693-753">从流中读取的字节数，介于 0 和所请求的字节数之间。</span><span class="sxs-lookup"><span data-stu-id="e3693-753">The number of bytes read from the stream, between 0 and the number of bytes you requested.</span></span> <span data-ttu-id="e3693-754">流仅在流结尾返回 0，否则在至少有 1 个字节可用之前应一直进行阻止。</span><span class="sxs-lookup"><span data-stu-id="e3693-754">Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-755">在.NET Framework 4 和更早版本中，您必须使用如下所示方法<xref:System.IO.FileStream.BeginRead%2A>和<xref:System.IO.FileStream.EndRead%2A>实现异步文件操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-755">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginRead%2A> and <xref:System.IO.FileStream.EndRead%2A> to implement asynchronous file operations.</span></span> <span data-ttu-id="e3693-756">这些方法是在中仍然可用[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以支持旧版代码; 但是，新的异步方法，如<xref:System.IO.FileStream.ReadAsync%2A>， <xref:System.IO.FileStream.WriteAsync%2A>， <xref:System.IO.Stream.CopyToAsync%2A>，和<xref:System.IO.FileStream.FlushAsync%2A>，帮助您更轻松地实现异步文件操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-756">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.</span></span>  
  
 <span data-ttu-id="e3693-757"><xref:System.IO.FileStream.EndRead%2A> 必须正好为每个调用调用<xref:System.IO.FileStream.BeginRead%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-757"><xref:System.IO.FileStream.EndRead%2A> must be called exactly for every call to <xref:System.IO.FileStream.BeginRead%2A>.</span></span> <span data-ttu-id="e3693-758">无法开始另一个读取之前结束读取的进程可能会导致意外的行为，例如死锁。</span><span class="sxs-lookup"><span data-stu-id="e3693-758">Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.</span></span>  
  
 <span data-ttu-id="e3693-759">此方法重写 <xref:System.IO.Stream.EndRead%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-759">This method overrides <xref:System.IO.Stream.EndRead%2A>.</span></span>  
  
 <span data-ttu-id="e3693-760"><xref:System.IO.FileStream.EndRead%2A> 可以调用每个<xref:System.IAsyncResult>从<xref:System.IO.FileStream.BeginRead%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-760"><xref:System.IO.FileStream.EndRead%2A> can be called on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginRead%2A>.</span></span> <span data-ttu-id="e3693-761">调用<xref:System.IO.FileStream.EndRead%2A>告诉您从流读取字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-761">Calling <xref:System.IO.FileStream.EndRead%2A> tells you how many bytes were read from the stream.</span></span> <span data-ttu-id="e3693-762"><xref:System.IO.FileStream.EndRead%2A> 之前已完成 I/O 操作将阻塞。</span><span class="sxs-lookup"><span data-stu-id="e3693-762"><xref:System.IO.FileStream.EndRead%2A> will block until the I/O operation has completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-763">此代码示例是为提供一个更大示例的一部分<xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="e3693-763">This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.</span></span>  
  
 [!code-cpp[System.IO.FileStream2#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#4)]
 [!code-csharp[System.IO.FileStream2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#4)]
 [!code-vb[System.IO.FileStream2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-764"><paramref name="asyncResult" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-764"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-765">此 <see cref="T:System.IAsyncResult" /> 对象不是通过对该类调用 <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 来创建的。</span><span class="sxs-lookup"><span data-stu-id="e3693-765">This <see cref="T:System.IAsyncResult" /> object was not created by calling <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> on this class.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e3693-766">多次调用了 <see cref="M:System.IO.FileStream.EndRead(System.IAsyncResult)" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-766"><see cref="M:System.IO.FileStream.EndRead(System.IAsyncResult)" /> is called multiple times.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-767">流已关闭或出现了内部错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-767">The stream is closed or an internal error has occurred.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-768">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-768">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-769">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-769">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-770">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-770">How to: Write Text to a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/asynchronous-file-i-o.md"><span data-ttu-id="e3693-771">异步文件 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-771">Asynchronous File I/O</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="fileStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="e3693-772">挂起的异步 I/O 请求。</span><span class="sxs-lookup"><span data-stu-id="e3693-772">The pending asynchronous I/O request.</span></span></param>
        <summary><span data-ttu-id="e3693-773">结束异步写入操作，在 I/O 操作完成之前一直阻止。</span><span class="sxs-lookup"><span data-stu-id="e3693-773">Ends an asynchronous write operation and blocks until the I/O operation is complete.</span></span> <span data-ttu-id="e3693-774">（请考虑改用 <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。）</span><span class="sxs-lookup"><span data-stu-id="e3693-774">(Consider using <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> instead.)</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-775">在.NET Framework 4 和更早版本中，您必须使用如下所示方法<xref:System.IO.FileStream.BeginWrite%2A>和<xref:System.IO.FileStream.EndWrite%2A>实现异步文件操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-775">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginWrite%2A> and <xref:System.IO.FileStream.EndWrite%2A> to implement asynchronous file operations.</span></span> <span data-ttu-id="e3693-776">这些方法是在中仍然可用[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以支持旧版代码; 但是，新的异步方法，如<xref:System.IO.FileStream.ReadAsync%2A>， <xref:System.IO.FileStream.WriteAsync%2A>， <xref:System.IO.Stream.CopyToAsync%2A>，和<xref:System.IO.FileStream.FlushAsync%2A>，帮助您更轻松地实现异步文件操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-776">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.</span></span>  
  
 <span data-ttu-id="e3693-777">此方法重写 <xref:System.IO.Stream.EndWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-777">This method overrides <xref:System.IO.Stream.EndWrite%2A>.</span></span>  
  
 <span data-ttu-id="e3693-778"><xref:System.IO.FileStream.EndWrite%2A> 必须在上一次调用每个<xref:System.IAsyncResult>从<xref:System.IO.FileStream.BeginWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-778"><xref:System.IO.FileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginWrite%2A>.</span></span> <span data-ttu-id="e3693-779"><xref:System.IO.FileStream.EndWrite%2A> 之前已完成 I/O 操作将阻塞。</span><span class="sxs-lookup"><span data-stu-id="e3693-779"><xref:System.IO.FileStream.EndWrite%2A> will block until the I/O operation has completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-780">此代码示例是为提供一个更大示例的一部分<xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="e3693-780">This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.</span></span>  
  
 [!code-cpp[System.IO.FileStream2#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#3)]
 [!code-csharp[System.IO.FileStream2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#3)]
 [!code-vb[System.IO.FileStream2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-781"><paramref name="asyncResult" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-781"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-782">此 <see cref="T:System.IAsyncResult" /> 对象不是通过对该类调用 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 来创建的。</span><span class="sxs-lookup"><span data-stu-id="e3693-782">This <see cref="T:System.IAsyncResult" /> object was not created by calling <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> on this class.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e3693-783">多次调用了 <see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-783"><see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" /> is called multiple times.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-784">流已关闭或出现了内部错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-784">The stream is closed or an internal error has occurred.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-785">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-785">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-786">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-786">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-787">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-787">How to: Write Text to a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/asynchronous-file-i-o.md"><span data-ttu-id="e3693-788">异步文件 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-788">Asynchronous File I/O</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~FileStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!FileStream ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="fileStream.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3693-789">确保垃圾回收器回收 <see langword="FileStream" /> 时释放资源并执行其他清理操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-789">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see langword="FileStream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-790">垃圾回收器调用`Finalize`何时可以完成而当前对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-790">The garbage collector calls `Finalize` when the current object is ready to be finalized.</span></span> <span data-ttu-id="e3693-791">`Finalize` 关闭`FileStream`。</span><span class="sxs-lookup"><span data-stu-id="e3693-791">`Finalize` closes the `FileStream`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-792">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-792">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-793">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-793">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-794">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-794">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e3693-795">清除此流的缓冲区，使得所有缓冲数据都写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="e3693-795">Clears buffers for this stream and causes any buffered data to be written to the file.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="fileStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3693-796">清除此流的缓冲区，使得所有缓冲数据都写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="e3693-796">Clears buffers for this stream and causes any buffered data to be written to the file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-797">此方法重写 <xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e3693-797">This method overrides <xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e3693-798">当您调用<xref:System.IO.FileStream.Flush%2A?displayProperty=nameWithType>方法中，操作系统 I/O 缓冲区，也会刷新。</span><span class="sxs-lookup"><span data-stu-id="e3693-798">When you call the <xref:System.IO.FileStream.Flush%2A?displayProperty=nameWithType> method, the operating system I/O buffer is also flushed.</span></span>  
  
 <span data-ttu-id="e3693-799">除非显式调用，否则不会刷新流的编码器<xref:System.IO.FileStream.Flush%2A>或释放对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-799">A stream's encoder is not flushed unless you explicitly call <xref:System.IO.FileStream.Flush%2A> or dispose of the object.</span></span> <span data-ttu-id="e3693-800">设置<xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType>到`true`意味着数据从缓冲区刷新到流中，但编码器状态不会进行刷新。</span><span class="sxs-lookup"><span data-stu-id="e3693-800">Setting <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="e3693-801">这将允许编码器，以便它可以正确编码的字符的下一步块保持其状态 （部分字符）。</span><span class="sxs-lookup"><span data-stu-id="e3693-801">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="e3693-802">这种情况下会影响 UTF8，UTF7 其中某些字符仅后才能进行编码的编码器收到的相邻字符。</span><span class="sxs-lookup"><span data-stu-id="e3693-802">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="e3693-803">因为缓冲区可以用于读取或写入，<xref:System.IO.FileStream.Flush>执行以下两个函数：</span><span class="sxs-lookup"><span data-stu-id="e3693-803">Because a buffer can be used for either reading or writing, <xref:System.IO.FileStream.Flush> performs the following two functions:</span></span>  
  
-   <span data-ttu-id="e3693-804">以前写入到缓冲区的任何数据复制到文件和缓冲区清除其编码器状态除外。</span><span class="sxs-lookup"><span data-stu-id="e3693-804">Any data previously written to the buffer is copied to the file and the buffer is cleared except for its encoder state.</span></span>  
  
-   <span data-ttu-id="e3693-805">如果<xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=nameWithType>是`true`和以前将数据从文件复制到缓冲区以进行读取，该文件中的当前位置会减少在缓冲区中的未读字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-805">If <xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=nameWithType> is `true` and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer.</span></span> <span data-ttu-id="e3693-806">然后清除缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e3693-806">The buffer is then cleared.</span></span>  
  
 <span data-ttu-id="e3693-807">使用<xref:System.IO.FileStream.Flush%28System.Boolean%29>方法重载时你想要确保所有中间文件缓冲区中缓冲数据写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3693-807">Use the <xref:System.IO.FileStream.Flush%28System.Boolean%29> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-808">此代码示例是为提供一个更大示例的一部分<xref:System.IO.FileStream.Lock%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-808">This code example is part of a larger example provided for the <xref:System.IO.FileStream.Lock%2A> method.</span></span>  
  
 [!code-cpp[System.IO.FileStream3#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#4)]
 [!code-csharp[System.IO.FileStream3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#4)]
 [!code-vb[System.IO.FileStream3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-809">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-809">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e3693-810">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="e3693-810">The stream is closed.</span></span></exception>
        <altmember cref="M:System.IO.FileStream.Flush(System.Boolean)" />
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-811">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-811">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public virtual void Flush (bool flushToDisk);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush(bool flushToDisk) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Flush (flushToDisk As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Flush(bool flushToDisk);" />
      <MemberSignature Language="F#" Value="override this.Flush : bool -&gt; unit" Usage="fileStream.Flush flushToDisk" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flushToDisk" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="flushToDisk"><span data-ttu-id="e3693-812">如果刷新所有中间文件缓冲区，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-812"><see langword="true" /> to flush all intermediate file buffers; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e3693-813">清除此流的缓冲区，将所有缓冲数据都写入到文件中，并且也清除所有中间文件缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e3693-813">Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-814">使用此重载时你想要确保所有中间文件缓冲区中缓冲数据写入到磁盘。</span><span class="sxs-lookup"><span data-stu-id="e3693-814">Use this overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.</span></span>  
  
 <span data-ttu-id="e3693-815">当您调用<xref:System.IO.FileStream.Flush%2A>方法中，操作系统 I/O 缓冲区，也会刷新。</span><span class="sxs-lookup"><span data-stu-id="e3693-815">When you call the <xref:System.IO.FileStream.Flush%2A> method, the operating system I/O buffer is also flushed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileStream.Flush" />
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="fileStream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="e3693-816">要监视取消请求的标记。</span><span class="sxs-lookup"><span data-stu-id="e3693-816">The token to monitor for cancellation requests.</span></span></param>
        <summary><span data-ttu-id="e3693-817">异步清理这个流的所有缓冲区，并使所有缓冲数据写入基础设备，并且监控取消请求。</span><span class="sxs-lookup"><span data-stu-id="e3693-817">Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</span></span></summary>
        <returns><span data-ttu-id="e3693-818">表示异步刷新操作的任务。</span><span class="sxs-lookup"><span data-stu-id="e3693-818">A task that represents the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-819">当您调用<xref:System.IO.FileStream.FlushAsync%2A>方法中，操作系统 I/O 缓冲区，也会刷新。</span><span class="sxs-lookup"><span data-stu-id="e3693-819">When you call the <xref:System.IO.FileStream.FlushAsync%2A> method, the operating system I/O buffer is also flushed.</span></span>  
  
 <span data-ttu-id="e3693-820">如果在完成之前，将取消该操作，则返回的任务将包含<xref:System.Threading.Tasks.TaskStatus.Canceled>值<xref:System.Threading.Tasks.Task.Status%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-820">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span> <span data-ttu-id="e3693-821">如果释放文件句柄，则返回的任务将包含<xref:System.ObjectDisposedException>中的异常<xref:System.Threading.Tasks.Task.Exception%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-821">If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e3693-822">已释放流。</span><span class="sxs-lookup"><span data-stu-id="e3693-822">The stream has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="e3693-823">取消</span><span class="sxs-lookup"><span data-stu-id="e3693-823">Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.FileSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.FileSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As FileSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::FileSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.FileSecurity" Usage="fileStream.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.FileSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3693-824">获取 <see cref="T:System.Security.AccessControl.FileSecurity" /> 对象，该对象封装当前 <see cref="T:System.IO.FileStream" /> 对象所描述的文件的访问控制列表 (ACL) 项。</span><span class="sxs-lookup"><span data-stu-id="e3693-824">Gets a <see cref="T:System.Security.AccessControl.FileSecurity" /> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:System.IO.FileStream" /> object.</span></span></summary>
        <returns><span data-ttu-id="e3693-825">一个对象，该对象封装当前 <see cref="T:System.IO.FileStream" /> 对象所描述的文件的访问控制设置。</span><span class="sxs-lookup"><span data-stu-id="e3693-825">An object that encapsulates the access control settings for the file described by the current <see cref="T:System.IO.FileStream" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-826">虽然<xref:System.IO.FileStream>类和<xref:System.IO.FileStream.GetAccessControl%2A>可用于检索现有文件的访问控制列表 (ACL) 项，请考虑使用<xref:System.IO.File.GetAccessControl%2A?displayProperty=nameWithType>方法，因为它是易于使用。</span><span class="sxs-lookup"><span data-stu-id="e3693-826">While the <xref:System.IO.FileStream> class and <xref:System.IO.FileStream.GetAccessControl%2A> can be used to retrieve the access control list (ACL) entries of an existing file, consider using <xref:System.IO.File.GetAccessControl%2A?displayProperty=nameWithType> method, as it is easier to use.</span></span>  
  
 <span data-ttu-id="e3693-827">使用<xref:System.IO.FileStream.GetAccessControl%2A>方法来检索文件的 ACL 条目。</span><span class="sxs-lookup"><span data-stu-id="e3693-827">Use the <xref:System.IO.FileStream.GetAccessControl%2A> method to retrieve the ACL entries for a file.</span></span>  
  
 <span data-ttu-id="e3693-828">ACL 描述个人和/或组具有或没有执行到对给定文件的特定操作的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-828">An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file.</span></span> <span data-ttu-id="e3693-829">有关详细信息，请参阅[如何：添加或移除访问控制列表项](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-829">For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e3693-830">文件关闭。</span><span class="sxs-lookup"><span data-stu-id="e3693-830">The file is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-831">打开文件时发生 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-831">An I/O error occurred while opening the file.</span></span></exception>
        <exception cref="T:System.SystemException"><span data-ttu-id="e3693-832">找不到文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-832">The file could not be found.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-833">当前平台不支持此操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-833">This operation is not supported on the current platform.</span></span>  
  
<span data-ttu-id="e3693-834">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-834">-or-</span></span> 
<span data-ttu-id="e3693-835">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-835">The caller does not have the required permission.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.IO.FileStream.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use SafeFileHandle instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use FileStream's SafeFileHandle property instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3693-836">获取当前 <see langword="FileStream" /> 对象所封装文件的操作系统文件句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-836">Gets the operating system file handle for the file that the current <see langword="FileStream" /> object encapsulates.</span></span></summary>
        <value><span data-ttu-id="e3693-837">此 <see langword="FileStream" /> 对象所封装文件的操作系统文件句柄；如果 <see langword="FileStream" /> 已关闭，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="e3693-837">The operating system file handle for the file encapsulated by this <see langword="FileStream" /> object, or -1 if the <see langword="FileStream" /> has been closed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-838">此属性是与操作系统的系统提供的系统调用一起使用的操作系统句柄 (如`ReadFile`在 Windows 上)。</span><span class="sxs-lookup"><span data-stu-id="e3693-838">This property is an operating system handle for use with operating-system-provided system calls (such as `ReadFile` on Windows).</span></span> <span data-ttu-id="e3693-839">它不会使用 C 库函数，如预期的文件描述符， `fread`。</span><span class="sxs-lookup"><span data-stu-id="e3693-839">It will not work with C library functions that expect a file descriptor, such as `fread`.</span></span>  
  
 <span data-ttu-id="e3693-840">操作系统句柄可能已打开以同步方式还是以异步方式，具体取决于`FileStream`构造函数得到调用。</span><span class="sxs-lookup"><span data-stu-id="e3693-840">The operating system handle might have been opened synchronously or asynchronously, depending on which `FileStream` constructor was called.</span></span> <span data-ttu-id="e3693-841">使用<xref:System.IO.FileStream.IsAsync%2A>属性来发现是否以异步方式打开此句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-841">Use the <xref:System.IO.FileStream.IsAsync%2A> property to discover whether this handle was opened asynchronously.</span></span> <span data-ttu-id="e3693-842">在 Win32 中，这意味着打开句柄为重叠的 IO，并且它需要不同的参数`ReadFile`和`WriteFile`。</span><span class="sxs-lookup"><span data-stu-id="e3693-842">In Win32, this means the handle was opened for overlapped IO, and it requires different parameters to `ReadFile` and `WriteFile`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-843">如果可能发生数据损坏`FileStream`是创建，一起传递其句柄，则某些操作移动句柄的文件指针，然后`FileStream`再次使用。</span><span class="sxs-lookup"><span data-stu-id="e3693-843">Data corruption might occur if a `FileStream` is created, its handle is passed, some operation moves the handle's file pointer, and then the `FileStream` is used again.</span></span> <span data-ttu-id="e3693-844">多个线程无法同时安全地写入到相同的文件，和`FileStream`缓冲代码假定它以独占方式控制该句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-844">Multiple threads cannot safely write to the same file simultaneously, and `FileStream` buffering code assumes that it exclusively controls the handle.</span></span> <span data-ttu-id="e3693-845">`FileStream` 可能会引发<xref:System.IO.IOException>如果`FileStream`检测到某些其他进程已移动的文件指针。</span><span class="sxs-lookup"><span data-stu-id="e3693-845">`FileStream` might throw an <xref:System.IO.IOException> if `FileStream` detects that some other process has moved the file pointer.</span></span> <span data-ttu-id="e3693-846">若要避免此问题，不要不写入任何数据到文件的一部分的`FileStream`可能已缓冲，并还原到在上一次调用方法时的位置的文件指针`FileStream`。</span><span class="sxs-lookup"><span data-stu-id="e3693-846">To avoid this, do not write any data into a portion of the file that `FileStream` might have buffered, and restore the file pointer to the location it had when methods were last called on `FileStream`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3693-847">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-847">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="e3693-848">用于访问非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="e3693-848">for the ability to access unmanaged code.</span></span> <span data-ttu-id="e3693-849">关联的枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> 安全操作： <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-849">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="e3693-850">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="e3693-850">requires full trust for the immediate caller.</span></span> <span data-ttu-id="e3693-851">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="e3693-851">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-852">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-852">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-853">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-853">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-854">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-854">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="public virtual bool IsAsync { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.IsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsAsync As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAsync { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAsync : bool" Usage="System.IO.FileStream.IsAsync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3693-855">获取一个值，它指示 <see langword="FileStream" /> 是异步打开还是同步打开的。</span><span class="sxs-lookup"><span data-stu-id="e3693-855">Gets a value that indicates whether the <see langword="FileStream" /> was opened asynchronously or synchronously.</span></span></summary>
        <value><span data-ttu-id="e3693-856">如果 <see langword="FileStream" /> 是异步打开的，则为 <see langword="true" />，否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-856"><see langword="true" /> if the <see langword="FileStream" /> was opened asynchronously; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-857">`IsAsync`属性会检测是否`FileStream`异步打开句柄，使您的代码使用<xref:System.IO.FileStream.Handle%2A>属性正确。</span><span class="sxs-lookup"><span data-stu-id="e3693-857">The `IsAsync` property detects whether the `FileStream` handle was opened asynchronously, enabling your code to use the <xref:System.IO.FileStream.Handle%2A> property correctly.</span></span> <span data-ttu-id="e3693-858">在 Win32 中，`IsAsync`正在 true 表示为重叠 I/O 打开句柄，并需要不同的参数`ReadFile`和`WriteFile`。</span><span class="sxs-lookup"><span data-stu-id="e3693-858">In Win32, `IsAsync` being true means the handle was opened for overlapped I/O, and thus requires different parameters to `ReadFile` and `WriteFile`.</span></span>  
  
 <span data-ttu-id="e3693-859">在创建的实例时指定此值<xref:System.IO.FileStream>类使用的构造函数`isAsync`， `useAsync`，或`options`参数。</span><span class="sxs-lookup"><span data-stu-id="e3693-859">You specify this value when you create an instance of the <xref:System.IO.FileStream> class using a constructor that has an `isAsync`, `useAsync`, or `options` parameter.</span></span> <span data-ttu-id="e3693-860">当该属性是`true`，stream 利用重叠的 I/O 异步执行文件操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-860">When the property is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously.</span></span> <span data-ttu-id="e3693-861">但是，<xref:System.IO.FileStream.IsAsync%2A>属性不一定要`true`调用<xref:System.IO.FileStream.ReadAsync%2A>， <xref:System.IO.FileStream.WriteAsync%2A>，或<xref:System.IO.Stream.CopyToAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-861">However, the <xref:System.IO.FileStream.IsAsync%2A> property does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method.</span></span> <span data-ttu-id="e3693-862">当<xref:System.IO.FileStream.IsAsync%2A>属性是`false`和调用异步读取和写入操作，仍将不阻止 UI 线程，但以同步方式执行实际的 I/O 操作。</span><span class="sxs-lookup"><span data-stu-id="e3693-862">When the <xref:System.IO.FileStream.IsAsync%2A> property is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-863">此代码示例是为提供一个更大示例的一部分<xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="e3693-863">This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.</span></span>  
  
 [!code-cpp[System.IO.FileStream2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#2)]
 [!code-csharp[System.IO.FileStream2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#2)]
 [!code-vb[System.IO.FileStream2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-864">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-864">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-865">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-865">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-866">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-866">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.IO.FileStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3693-867">获取用字节表示的流长度。</span><span class="sxs-lookup"><span data-stu-id="e3693-867">Gets the length in bytes of the stream.</span></span></summary>
        <value><span data-ttu-id="e3693-868">表示流长度（以字节为单位）的长值。</span><span class="sxs-lookup"><span data-stu-id="e3693-868">A long value representing the length of the stream in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-869">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-869">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-870">下面的示例使用`Length`和`Position`属性以检查是否为文件尾条件。</span><span class="sxs-lookup"><span data-stu-id="e3693-870">The following example uses the `Length` and `Position` properties to check for an end-of-file condition.</span></span>  
  
 [!code-cpp[Classic FileStream.Length Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.Length Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileStream.Length Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.Length Example/CS/source.cs#1)]
 [!code-vb[Classic FileStream.Length Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.Length Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-871">此流的 <see cref="P:System.IO.FileStream.CanSeek" /> 为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-871"><see cref="P:System.IO.FileStream.CanSeek" /> for this stream is <see langword="false" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-872">出现 I/O 错误，例如文件被关闭。</span><span class="sxs-lookup"><span data-stu-id="e3693-872">An I/O error, such as the file being closed, occurred.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-873">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-873">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-874">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-874">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-875">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-875">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public virtual void Lock (long position, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Lock(int64 position, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Lock(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Lock (position As Long, length As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Lock(long position, long length);" />
      <MemberSignature Language="F#" Value="abstract member Lock : int64 * int64 -&gt; unit&#xA;override this.Lock : int64 * int64 -&gt; unit" Usage="fileStream.Lock (position, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="position"><span data-ttu-id="e3693-876">要锁定的范围的起始处。</span><span class="sxs-lookup"><span data-stu-id="e3693-876">The beginning of the range to lock.</span></span> <span data-ttu-id="e3693-877">此参数的值必须大于或等于零 (0)。</span><span class="sxs-lookup"><span data-stu-id="e3693-877">The value of this parameter must be equal to or greater than zero (0).</span></span></param>
        <param name="length"><span data-ttu-id="e3693-878">要锁定的范围。</span><span class="sxs-lookup"><span data-stu-id="e3693-878">The range to be locked.</span></span></param>
        <summary><span data-ttu-id="e3693-879">防止其他进程读取或写入 <see cref="T:System.IO.FileStream" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-879">Prevents other processes from reading from or writing to the <see cref="T:System.IO.FileStream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-880">锁定文件流的范围为文件流的该范围的锁定的进程独占访问权的线程。</span><span class="sxs-lookup"><span data-stu-id="e3693-880">Locking a range of a file stream gives the threads of the locking process exclusive access to that range of the file stream.</span></span>  
  
 <span data-ttu-id="e3693-881">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-881">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-882">下面的代码示例演示如何锁定文件的一部分，以便另一个进程无法访问该文件的一部分，即使它到该文件具有读/写访问权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-882">The following code example demonstrates how to lock part of a file so another process cannot access that part of the file even though it has read/write access to the file.</span></span> <span data-ttu-id="e3693-883">同时在不同的命令窗口中运行程序，并调查使用不同的控制台输入的选项。</span><span class="sxs-lookup"><span data-stu-id="e3693-883">Run the program simultaneously in different command windows and investigate using the different console input options.</span></span>  
  
 [!code-cpp[System.IO.FileStream3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#1)]
 [!code-csharp[System.IO.FileStream3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#1)]
 [!code-vb[System.IO.FileStream3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-884"><paramref name="position" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="e3693-884"><paramref name="position" /> or <paramref name="length" /> is negative.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e3693-885">文件关闭。</span><span class="sxs-lookup"><span data-stu-id="e3693-885">The file is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-886">另一个进程已锁定了文件的一部分，因此进程无法访问该文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-886">The process cannot access the file because another process has locked a portion of the file.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-887">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-887">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-888">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-888">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-889">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-889">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.IO.FileStream.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3693-890">获取 <see langword="FileStream" /> 中已打开的文件的绝对路径。</span><span class="sxs-lookup"><span data-stu-id="e3693-890">Gets the absolute path of the file opened in the <see langword="FileStream" />.</span></span></summary>
        <value><span data-ttu-id="e3693-891">一个字符串，是该文件的绝对路径。</span><span class="sxs-lookup"><span data-stu-id="e3693-891">A string that is the absolute path of the file.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="e3693-892">如果不知道的绝对路径，则此属性返回一个字符串，类似于"[未知]"。</span><span class="sxs-lookup"><span data-stu-id="e3693-892">If the absolute path is not known, this property returns a string similar to "[Unknown]".</span></span>

 <span data-ttu-id="e3693-893">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-893">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-894">此代码示例是为提供一个更大示例的一部分<xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="e3693-894">This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.</span></span>  
  
 [!code-cpp[System.IO.FileStream2#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#4)]
 [!code-csharp[System.IO.FileStream2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#4)]
 [!code-vb[System.IO.FileStream2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="e3693-895">用于访问该路径。</span><span class="sxs-lookup"><span data-stu-id="e3693-895">for access to the path.</span></span> <span data-ttu-id="e3693-896">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="e3693-896">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-897">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-897">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-898">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-898">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-899">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-899">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.IO.FileStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3693-900">获取或设置此流的当前位置。</span><span class="sxs-lookup"><span data-stu-id="e3693-900">Gets or sets the current position of this stream.</span></span></summary>
        <value><span data-ttu-id="e3693-901">此流的当前位置。</span><span class="sxs-lookup"><span data-stu-id="e3693-901">The current position of this stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-902">支持查找到流的长度超出任何位置。</span><span class="sxs-lookup"><span data-stu-id="e3693-902">Seeking to any location beyond the length of the stream is supported.</span></span>  <span data-ttu-id="e3693-903">如果要定位的文件的长度之外，文件大小的增长。</span><span class="sxs-lookup"><span data-stu-id="e3693-903">When you seek beyond the length of the file, the file size grows.</span></span>  <span data-ttu-id="e3693-904">在 Microsoft Windows NT 和更高版本，则将添加到文件末尾的所有数据都设置为零。</span><span class="sxs-lookup"><span data-stu-id="e3693-904">In Microsoft Windows NT and newer, any data added to the end of the file is set to zero.</span></span>  <span data-ttu-id="e3693-905">在 Microsoft Windows 98 或更早版本，添加到文件末尾的所有数据不会设置为零，这意味着，以前已删除的数据是可见的流。</span><span class="sxs-lookup"><span data-stu-id="e3693-905">In Microsoft Windows 98 or earlier, any data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.</span></span> <span data-ttu-id="e3693-906">将流的当前位置设置为在 Windows 98 或更早版本的流的末尾之外较大的值可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-906">Setting the position of the stream to a large value beyond the end of the stream in Windows 98 or earlier may result in an exception being raised.</span></span>  
  
 <span data-ttu-id="e3693-907">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-907">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-908">下面的示例使用`Length`和`Position`属性以检查是否为文件尾条件。</span><span class="sxs-lookup"><span data-stu-id="e3693-908">The following example uses the `Length` and `Position` properties to check for an end-of-file condition.</span></span>  
  
 [!code-cpp[Classic FileStream.Length Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.Length Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileStream.Length Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.Length Example/CS/source.cs#1)]
 [!code-vb[Classic FileStream.Length Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.Length Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-909">流不支持查找。</span><span class="sxs-lookup"><span data-stu-id="e3693-909">The stream does not support seeking.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-910">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-910">An I/O error occurred.</span></span>  
  
<span data-ttu-id="e3693-911">或</span><span class="sxs-lookup"><span data-stu-id="e3693-911">-or-</span></span> 
<span data-ttu-id="e3693-912">将位置设置为非常大的值，此值超出 Windows 98 或更早版本中的流的末尾。</span><span class="sxs-lookup"><span data-stu-id="e3693-912">The position was set to a very large value beyond the end of the stream in Windows 98 or earlier.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-913">试图将位置设置为负值。</span><span class="sxs-lookup"><span data-stu-id="e3693-913">Attempted to set the position to a negative value.</span></span></exception>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="e3693-914">试图越过不支持此值的流的末尾进行查找。</span><span class="sxs-lookup"><span data-stu-id="e3693-914">Attempted seeking past the end of a stream that does not support this.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-915">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-915">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-916">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-916">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-917">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-917">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] array, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read([out] unsigned int8[] array, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (array As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ array, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="fileStream.Read (array, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="e3693-918">当此方法返回时，包含指定的字节数组，此数组中 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" /> - 1<c>)</c> 之间的值被从当前源中读取的字节所替换。</span><span class="sxs-lookup"><span data-stu-id="e3693-918">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1<c>)</c> replaced by the bytes read from the current source.</span></span></param>
        <param name="offset"><span data-ttu-id="e3693-919"><paramref name="array" /> 中的字节偏移量，将在此处放置读取的字节。</span><span class="sxs-lookup"><span data-stu-id="e3693-919">The byte offset in <paramref name="array" /> at which the read bytes will be placed.</span></span></param>
        <param name="count"><span data-ttu-id="e3693-920">最多读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-920">The maximum number of bytes to read.</span></span></param>
        <summary><span data-ttu-id="e3693-921">从流中读取字节块并将该数据写入给定缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="e3693-921">Reads a block of bytes from the stream and writes the data in a given buffer.</span></span></summary>
        <returns><span data-ttu-id="e3693-922">读入缓冲区中的总字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-922">The total number of bytes read into the buffer.</span></span> <span data-ttu-id="e3693-923">如果字节数当前不可用，则总字节数可能小于所请求的字节数；如果已到达流结尾，则为零。</span><span class="sxs-lookup"><span data-stu-id="e3693-923">This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-924">此方法重写 <xref:System.IO.Stream.Read%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-924">This method overrides <xref:System.IO.Stream.Read%2A>.</span></span>  
  
 <span data-ttu-id="e3693-925">`offset`参数指定了中的字节偏移量`array`（缓冲区索引） 在此处开始读取，和`count`参数给出的最大要从此流读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-925">The `offset` parameter gives the offset of the byte in `array` (the buffer index) at which to begin reading, and the `count` parameter gives the maximum number of bytes to be read from this stream.</span></span> <span data-ttu-id="e3693-926">如果已到达流的结尾，返回的值是字节读取，则为零的实际数目。</span><span class="sxs-lookup"><span data-stu-id="e3693-926">The returned value is the actual number of bytes read, or zero if the end of the stream is reached.</span></span> <span data-ttu-id="e3693-927">如果读取的操作成功，流的当前位置前进读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-927">If the read operation is successful, the current position of the stream is advanced by the number of bytes read.</span></span> <span data-ttu-id="e3693-928">如果发生异常，则流的当前位置不变。</span><span class="sxs-lookup"><span data-stu-id="e3693-928">If an exception occurs, the current position of the stream is unchanged.</span></span>  
  
 <span data-ttu-id="e3693-929"><xref:System.IO.FileStream.Read%2A>方法将返回仅在到达流的末尾后的零。</span><span class="sxs-lookup"><span data-stu-id="e3693-929">The <xref:System.IO.FileStream.Read%2A> method returns zero only after reaching the end of the stream.</span></span> <span data-ttu-id="e3693-930">否则为<xref:System.IO.FileStream.Read%2A>始终至少一个字节从流中读取返回之前。</span><span class="sxs-lookup"><span data-stu-id="e3693-930">Otherwise, <xref:System.IO.FileStream.Read%2A> always reads at least one byte from the stream before returning.</span></span> <span data-ttu-id="e3693-931">没有数据时调用流中是否可用<xref:System.IO.FileStream.Read%2A>，直到可以返回至少一个字节的数据，将阻止该方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-931">If no data is available from the stream upon a call to <xref:System.IO.FileStream.Read%2A>, the method will block until at least one byte of data can be returned.</span></span> <span data-ttu-id="e3693-932">实现可以自由地返回少于所请求的字节，即使尚未达到流结尾。</span><span class="sxs-lookup"><span data-stu-id="e3693-932">An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</span></span>  
  
 <span data-ttu-id="e3693-933">使用<xref:System.IO.BinaryReader>读取基元数据类型。</span><span class="sxs-lookup"><span data-stu-id="e3693-933">Use <xref:System.IO.BinaryReader> for reading primitive data types.</span></span>  
  
 <span data-ttu-id="e3693-934">不会中断正在执行的读取的操作的线程。</span><span class="sxs-lookup"><span data-stu-id="e3693-934">Do not interrupt a thread that is performing a read operation.</span></span> <span data-ttu-id="e3693-935">虽然应用程序看上去要取消阻止该线程后成功运行，应用程序的性能和可靠性，可以减少中断。</span><span class="sxs-lookup"><span data-stu-id="e3693-935">Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.</span></span>  
  
 <span data-ttu-id="e3693-936">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-936">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-937">下面的示例读取的内容<xref:System.IO.FileStream>并将其写入到另一个<xref:System.IO.FileStream>。</span><span class="sxs-lookup"><span data-stu-id="e3693-937">The following example reads the contents from a <xref:System.IO.FileStream> and writes it into another <xref:System.IO.FileStream>.</span></span>  
  
 [!code-csharp[FSRead#1](~/samples/snippets/csharp/VS_Snippets_CLR/FSRead/CS/fsread.cs#1)]
 [!code-vb[FSRead#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FSRead/VB/fsread.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-938"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-938"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-939"><paramref name="offset" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="e3693-939"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-940">流不支持读取。</span><span class="sxs-lookup"><span data-stu-id="e3693-940">The stream does not support reading.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-941">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-941">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-942"><paramref name="offset" /> 和 <paramref name="count" /> 描述 <paramref name="array" /> 中的无效范围。</span><span class="sxs-lookup"><span data-stu-id="e3693-942"><paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e3693-943">在流关闭后调用方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-943">Methods were called after the stream was closed.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-944">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-944">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-945">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-945">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-946">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-946">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ReadAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="fileStream.ReadAsync (buffer, offset, count, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="e3693-947">数据写入的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e3693-947">The buffer to write the data into.</span></span></param>
        <param name="offset"><span data-ttu-id="e3693-948"><paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</span><span class="sxs-lookup"><span data-stu-id="e3693-948">The byte offset in <paramref name="buffer" /> at which to begin writing data from the stream.</span></span></param>
        <param name="count"><span data-ttu-id="e3693-949">最多读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-949">The maximum number of bytes to read.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="e3693-950">要监视取消请求的标记。</span><span class="sxs-lookup"><span data-stu-id="e3693-950">The token to monitor for cancellation requests.</span></span></param>
        <summary><span data-ttu-id="e3693-951">从当前流异步读取字节的序列，将流中的位置提升读取的字节数，并监视取消请求。</span><span class="sxs-lookup"><span data-stu-id="e3693-951">Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</span></span></summary>
        <returns><span data-ttu-id="e3693-952">表示异步读取操作的任务。</span><span class="sxs-lookup"><span data-stu-id="e3693-952">A task that represents the asynchronous read operation.</span></span> <span data-ttu-id="e3693-953"><paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-953">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span></span> <span data-ttu-id="e3693-954">如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</span><span class="sxs-lookup"><span data-stu-id="e3693-954">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-955"><xref:System.IO.FileStream.ReadAsync%2A>方法使您能够执行占用大量资源的文件操作，而不会阻止主线程。</span><span class="sxs-lookup"><span data-stu-id="e3693-955">The <xref:System.IO.FileStream.ReadAsync%2A> method enables you to perform resource-intensive file operations without blocking the main thread.</span></span> <span data-ttu-id="e3693-956">在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 应用中一个耗时的流操作可能阻塞 UI 线程并让您的应用看起来好像不工作时，这种性能的考虑就显得尤为重要了。</span><span class="sxs-lookup"><span data-stu-id="e3693-956">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="e3693-957">结合使用异步方法`async`和`await`Visual Basic 和 C# 中的关键字。</span><span class="sxs-lookup"><span data-stu-id="e3693-957">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="e3693-958">使用<xref:System.IO.FileStream.CanRead%2A>属性来确定当前实例是否支持读取。</span><span class="sxs-lookup"><span data-stu-id="e3693-958">Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="e3693-959">如果在完成之前，将取消该操作，则返回的任务将包含<xref:System.Threading.Tasks.TaskStatus.Canceled>值<xref:System.Threading.Tasks.Task.Status%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-959">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span> <span data-ttu-id="e3693-960">如果释放文件句柄，则返回的任务将包含<xref:System.ObjectDisposedException>中的异常<xref:System.Threading.Tasks.Task.Exception%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-960">If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-961">下面的示例演示如何以异步方式从文件读取。</span><span class="sxs-lookup"><span data-stu-id="e3693-961">The following example shows how to read from a file asynchronously.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#4](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example4.cs#4)]
 [!code-vb[Asynchronous_File_IO_async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-962"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-962"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-963"><paramref name="offset" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="e3693-963"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-964"><paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</span><span class="sxs-lookup"><span data-stu-id="e3693-964">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-965">流不支持读取。</span><span class="sxs-lookup"><span data-stu-id="e3693-965">The stream does not support reading.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e3693-966">已释放流。</span><span class="sxs-lookup"><span data-stu-id="e3693-966">The stream has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e3693-967">之前的读取操作当前正在使用流。</span><span class="sxs-lookup"><span data-stu-id="e3693-967">The stream is currently in use by a previous read operation.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="e3693-968">取消</span><span class="sxs-lookup"><span data-stu-id="e3693-968">Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public override int ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.ReadByte" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadByte () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadByte();" />
      <MemberSignature Language="F#" Value="override this.ReadByte : unit -&gt; int" Usage="fileStream.ReadByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3693-969">从文件中读取一个字节，并将读取位置提升一个字节。</span><span class="sxs-lookup"><span data-stu-id="e3693-969">Reads a byte from the file and advances the read position one byte.</span></span></summary>
        <returns><span data-ttu-id="e3693-970">强制转换为 <see cref="T:System.Int32" /> 的字节；或者如果已到达流的末尾，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="e3693-970">The byte, cast to an <see cref="T:System.Int32" />, or -1 if the end of the stream has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-971">此方法重写 <xref:System.IO.Stream.ReadByte%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-971">This method overrides <xref:System.IO.Stream.ReadByte%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-972">使用<xref:System.IO.FileStream.CanRead%2A>属性来确定当前实例是否支持读取。</span><span class="sxs-lookup"><span data-stu-id="e3693-972">Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading.</span></span> <span data-ttu-id="e3693-973">有关附加信息，请参见 <xref:System.IO.Stream.CanRead%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-973">For additional information, see <xref:System.IO.Stream.CanRead%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-974">下面的代码示例演示如何将数据写入到文件，按字节，然后验证数据是否被正确写入。</span><span class="sxs-lookup"><span data-stu-id="e3693-974">The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.FileStream1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream1/CPP/source.cpp#1)]
 [!code-csharp[System.IO.FileStream1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream1/CS/source.cs#1)]
 [!code-vb[System.IO.FileStream1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-975">当前流不支持读取。</span><span class="sxs-lookup"><span data-stu-id="e3693-975">The current stream does not support reading.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e3693-976">当前流已关闭。</span><span class="sxs-lookup"><span data-stu-id="e3693-976">The current stream is closed.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3693-977">上的默认实现<see langword="Stream" />创建一个新的单字节数组，然后调用<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-977">The default implementation on <see langword="Stream" /> creates a new single-byte array and then calls <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />.</span></span> <span data-ttu-id="e3693-978">虽然这是正式正确，它是低效的。</span><span class="sxs-lookup"><span data-stu-id="e3693-978">While this is formally correct, it is inefficient.</span></span> <span data-ttu-id="e3693-979">所有具有内部缓冲区的流应重写此方法并提供一个高效得多的读取缓冲区直接，避免在每次调用额外的数组分配的版本。</span><span class="sxs-lookup"><span data-stu-id="e3693-979">Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</span></span>  
  
<span data-ttu-id="e3693-980">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-980">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span></para></block>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-981">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-981">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-982">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-982">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-983">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-983">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SafeFileHandle">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.SafeFileHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SafeFileHandle As SafeFileHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::Win32::SafeHandles::SafeFileHandle ^ SafeFileHandle { Microsoft::Win32::SafeHandles::SafeFileHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SafeFileHandle : Microsoft.Win32.SafeHandles.SafeFileHandle" Usage="System.IO.FileStream.SafeFileHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeFileHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3693-984">获取 <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> 对象，它代表当前 <see cref="T:System.IO.FileStream" /> 对象所封装的文件的操作系统文件句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-984">Gets a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> object that represents the operating system file handle for the file that the current <see cref="T:System.IO.FileStream" /> object encapsulates.</span></span></summary>
        <value><span data-ttu-id="e3693-985">一个对象，该对象表示当前 <see cref="T:System.IO.FileStream" /> 对象封装的文件的操作系统文件句柄。</span><span class="sxs-lookup"><span data-stu-id="e3693-985">An object that represents the operating system file handle for the file that the current <see cref="T:System.IO.FileStream" /> object encapsulates.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-986"><xref:System.IO.FileStream.SafeFileHandle%2A>属性自动刷新流并将当前流位置设置为 0。</span><span class="sxs-lookup"><span data-stu-id="e3693-986">The <xref:System.IO.FileStream.SafeFileHandle%2A> property automatically flushes the stream and sets the current stream position to 0.</span></span>  <span data-ttu-id="e3693-987">这允许要移动的文件或流的位置重置通过另一个流使用<xref:System.IO.FileStream.SafeFileHandle%2A>此属性返回。</span><span class="sxs-lookup"><span data-stu-id="e3693-987">This allows the file to be moved or the stream position to be reset by another stream using the <xref:System.IO.FileStream.SafeFileHandle%2A> returned by this property.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="e3693-988">若要调用非托管的代码的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-988">for permission to call unmanaged code.</span></span>  
  
<span data-ttu-id="e3693-989">安全操作：链接要求</span><span class="sxs-lookup"><span data-stu-id="e3693-989">Security action: Link Demand</span></span> 
<span data-ttu-id="e3693-990">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="e3693-990">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="e3693-991">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="e3693-991">requires full trust for the immediate caller.</span></span> <span data-ttu-id="e3693-992">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="e3693-992">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-993">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-993">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-994">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-994">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-995">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-995">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="fileStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset"><span data-ttu-id="e3693-996">相对于 <paramref name="origin" /> 的点，从此处开始查找。</span><span class="sxs-lookup"><span data-stu-id="e3693-996">The point relative to <paramref name="origin" /> from which to begin seeking.</span></span></param>
        <param name="origin"><span data-ttu-id="e3693-997">使用 <see cref="T:System.IO.SeekOrigin" /> 类型的值，将开始位置、结束位置或当前位置指定为 <paramref name="offset" /> 的参考点。</span><span class="sxs-lookup"><span data-stu-id="e3693-997">Specifies the beginning, the end, or the current position as a reference point for <paramref name="offset" />, using a value of type <see cref="T:System.IO.SeekOrigin" />.</span></span></param>
        <summary><span data-ttu-id="e3693-998">将该流的当前位置设置为给定值。</span><span class="sxs-lookup"><span data-stu-id="e3693-998">Sets the current position of this stream to the given value.</span></span></summary>
        <returns><span data-ttu-id="e3693-999">流中的新位置。</span><span class="sxs-lookup"><span data-stu-id="e3693-999">The new position in the stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-1000">此方法重写 <xref:System.IO.Stream.Seek%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e3693-1000">This method overrides <xref:System.IO.Stream.Seek%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-1001">使用<xref:System.IO.FileStream.CanSeek%2A?displayProperty=nameWithType>属性来确定当前实例是否支持查找。</span><span class="sxs-lookup"><span data-stu-id="e3693-1001">Use the <xref:System.IO.FileStream.CanSeek%2A?displayProperty=nameWithType> property to determine whether the current instance supports seeking.</span></span> <span data-ttu-id="e3693-1002">有关附加信息，请参见 <xref:System.IO.Stream.CanSeek%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e3693-1002">For additional information, see <xref:System.IO.Stream.CanSeek%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e3693-1003">您可以搜索到的流的长度之外的任何位置。</span><span class="sxs-lookup"><span data-stu-id="e3693-1003">You can seek to any location beyond the length of the stream.</span></span> <span data-ttu-id="e3693-1004">如果要定位的文件的长度之外，文件大小的增长。</span><span class="sxs-lookup"><span data-stu-id="e3693-1004">When you seek beyond the length of the file, the file size grows.</span></span> <span data-ttu-id="e3693-1005">在 Windows NT 和更高版本中，添加到文件末尾的数据设置为零。</span><span class="sxs-lookup"><span data-stu-id="e3693-1005">In Windows NT and later versions, data added to the end of the file is set to zero.</span></span> <span data-ttu-id="e3693-1006">在 Windows 98 或更早版本中，添加到文件末尾的数据未设置为零，这意味着，以前已删除的数据是可见的流。</span><span class="sxs-lookup"><span data-stu-id="e3693-1006">In Windows 98 or earlier versions, data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.</span></span>  
  
 <span data-ttu-id="e3693-1007">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-1007">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-1008">下面的示例演示如何将数据写入到文件，按字节，然后验证数据是否被正确写入。</span><span class="sxs-lookup"><span data-stu-id="e3693-1008">The following example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.FileStream1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream1/CPP/source.cpp#1)]
 [!code-csharp[System.IO.FileStream1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream1/CS/source.cs#1)]
 [!code-vb[System.IO.FileStream1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream1/VB/source.vb#1)]  
  
 <span data-ttu-id="e3693-1009">下面的示例可读取文件的开头到末尾的使用不同的文本按反方向<xref:System.IO.SeekOrigin>值替换<xref:System.IO.FileStream.Seek%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-1009">The following example reads text in the reverse direction, from the end of file to the beginning of the file, by using the various <xref:System.IO.SeekOrigin> values with the <xref:System.IO.FileStream.Seek%2A> method.</span></span>  
  
 [!code-csharp[System.IO.FileStream.Seek#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.filestream.seek/cs/source.cs#1)]
 [!code-vb[System.IO.FileStream.Seek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.filestream.seek/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-1010">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-1010">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-1011">该流不支持查找，例如如果 <see langword="FileStream" /> 是从管道或控制台输出构造的，则不支持查找。</span><span class="sxs-lookup"><span data-stu-id="e3693-1011">The stream does not support seeking, such as if the <see langword="FileStream" /> is constructed from a pipe or console output.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-1012">试图在流的开始位置之前进行查找。</span><span class="sxs-lookup"><span data-stu-id="e3693-1012">Seeking is attempted before the beginning of the stream.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e3693-1013">在流关闭后调用方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-1013">Methods were called after the stream was closed.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-1014">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-1014">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-1015">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-1015">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-1016">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-1016">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.FileSecurity fileSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.FileSecurity fileSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::FileSecurity ^ fileSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.FileSecurity -&gt; unit" Usage="fileStream.SetAccessControl fileSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileSecurity" Type="System.Security.AccessControl.FileSecurity" />
      </Parameters>
      <Docs>
        <param name="fileSecurity"><span data-ttu-id="e3693-1017">描述要应用于当前文件的 ACL 项的对象。</span><span class="sxs-lookup"><span data-stu-id="e3693-1017">An object that describes an ACL entry to apply to the current file.</span></span></param>
        <summary><span data-ttu-id="e3693-1018">将 <see cref="T:System.Security.AccessControl.FileSecurity" /> 对象所描述的访问控制列表 (ACL) 项应用于当前 <see cref="T:System.IO.FileStream" /> 对象所描述的文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-1018">Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity" /> object to the file described by the current <see cref="T:System.IO.FileStream" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-1019">虽然<xref:System.IO.FileStream>类和<xref:System.IO.FileStream.SetAccessControl%2A>可对现有文件，请考虑使用<xref:System.IO.File.SetAccessControl%2A?displayProperty=nameWithType>方法，因为它是易于使用。</span><span class="sxs-lookup"><span data-stu-id="e3693-1019">While the <xref:System.IO.FileStream> class and <xref:System.IO.FileStream.SetAccessControl%2A> can be used on an existing file, consider using the <xref:System.IO.File.SetAccessControl%2A?displayProperty=nameWithType> method as it is easier to use.</span></span>  
  
 <span data-ttu-id="e3693-1020"><xref:System.IO.FileStream.SetAccessControl%2A>方法适用于表示非继承的 ACL 列表的文件的访问控制列表 (ACL) 项。</span><span class="sxs-lookup"><span data-stu-id="e3693-1020">The <xref:System.IO.FileStream.SetAccessControl%2A> method applies access control list (ACL) entries to a file that represents the noninherited ACL list.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3693-1021">为 ACL 指定`fileSecurity`参数将替换现有文件 ACL。</span><span class="sxs-lookup"><span data-stu-id="e3693-1021">The ACL specified for the `fileSecurity` parameter replaces the existing ACL for the file.</span></span> <span data-ttu-id="e3693-1022">若要添加新用户的权限，请使用<xref:System.IO.FileStream.GetAccessControl%2A>方法以获取现有 ACL，对其进行修改，然后使用<xref:System.IO.FileStream.SetAccessControl%2A>以将其应用到的文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-1022">To add permissions for a new user, use the <xref:System.IO.FileStream.GetAccessControl%2A> method to obtain the existing ACL, modify it, and then use <xref:System.IO.FileStream.SetAccessControl%2A> to apply it back to the file.</span></span>  
  
 <span data-ttu-id="e3693-1023">ACL 描述个人和/或组具有或没有执行到对给定文件的特定操作的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-1023">An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file.</span></span> <span data-ttu-id="e3693-1024">有关详细信息，请参阅[如何：添加或移除访问控制列表项](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-1024">For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e3693-1025">文件关闭。</span><span class="sxs-lookup"><span data-stu-id="e3693-1025">The file is closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-1026"><paramref name="fileSecurity" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-1026">The <paramref name="fileSecurity" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.SystemException"><span data-ttu-id="e3693-1027">未能找到或修改该文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-1027">The file could not be found or modified.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="e3693-1028">当前进程不具有打开该文件的权限。</span><span class="sxs-lookup"><span data-stu-id="e3693-1028">The current process does not have access to open the file.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="fileStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3693-1029">流的新长度。</span><span class="sxs-lookup"><span data-stu-id="e3693-1029">The new length of the stream.</span></span></param>
        <summary><span data-ttu-id="e3693-1030">将该流的长度设置为给定值。</span><span class="sxs-lookup"><span data-stu-id="e3693-1030">Sets the length of this stream to the given value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-1031">此方法重写 <xref:System.IO.Stream.SetLength%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-1031">This method overrides <xref:System.IO.Stream.SetLength%2A>.</span></span>  
  
 <span data-ttu-id="e3693-1032">如果给定的值小于当前流的长度，则流被截断。</span><span class="sxs-lookup"><span data-stu-id="e3693-1032">If the given value is less than the current length of the stream, the stream is truncated.</span></span> <span data-ttu-id="e3693-1033">在此方案中，如果当前的位置大于新的长度，当前位置移动到流的最后一个字节。</span><span class="sxs-lookup"><span data-stu-id="e3693-1033">In this scenario, if the current position is greater than the new length, the current position is moved to the last byte of the stream.</span></span> <span data-ttu-id="e3693-1034">如果给定的值大于流的当前长度，则流被扩展，以及当前的位置保持不变。</span><span class="sxs-lookup"><span data-stu-id="e3693-1034">If the given value is larger than the current length of the stream, the stream is expanded, and the current position remains the same.</span></span> <span data-ttu-id="e3693-1035">如果流已展开，旧的和新的长度之间的流的内容未定义。</span><span class="sxs-lookup"><span data-stu-id="e3693-1035">If the stream is expanded, the contents of the stream between the old and the new length are undefined.</span></span>  
  
 <span data-ttu-id="e3693-1036">流必须支持写入和查找有关`SetLength`工作。</span><span class="sxs-lookup"><span data-stu-id="e3693-1036">A stream must support both writing and seeking for `SetLength` to work.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-1037">使用<xref:System.IO.FileStream.CanWrite%2A>属性来确定当前实例是否支持写入，和<xref:System.IO.FileStream.CanSeek%2A>属性来确定是否支持查找。</span><span class="sxs-lookup"><span data-stu-id="e3693-1037">Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.FileStream.CanSeek%2A> property to determine whether seeking is supported.</span></span> <span data-ttu-id="e3693-1038">有关更多信息，请参阅 <xref:System.IO.Stream.CanWrite%2A> 和 <xref:System.IO.Stream.CanSeek%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-1038">For additional information, see <xref:System.IO.Stream.CanWrite%2A> and <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
 <span data-ttu-id="e3693-1039">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-1039">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-1040">发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-1040">An I/O error has occurred.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-1041">该流不支持写入和查找。</span><span class="sxs-lookup"><span data-stu-id="e3693-1041">The stream does not support both writing and seeking.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-1042">试图将 <paramref name="value" /> 参数设置为小于 0。</span><span class="sxs-lookup"><span data-stu-id="e3693-1042">Attempted to set the <paramref name="value" /> parameter to less than 0.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-1043">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-1043">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-1044">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-1044">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-1045">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-1045">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public virtual void Unlock (long position, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unlock(int64 position, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Unlock (position As Long, length As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Unlock(long position, long length);" />
      <MemberSignature Language="F#" Value="abstract member Unlock : int64 * int64 -&gt; unit&#xA;override this.Unlock : int64 * int64 -&gt; unit" Usage="fileStream.Unlock (position, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="position"><span data-ttu-id="e3693-1046">要取消锁定的范围的开始处。</span><span class="sxs-lookup"><span data-stu-id="e3693-1046">The beginning of the range to unlock.</span></span></param>
        <param name="length"><span data-ttu-id="e3693-1047">要取消锁定的范围。</span><span class="sxs-lookup"><span data-stu-id="e3693-1047">The range to be unlocked.</span></span></param>
        <summary><span data-ttu-id="e3693-1048">允许其他进程访问以前锁定的某个文件的全部或部分。</span><span class="sxs-lookup"><span data-stu-id="e3693-1048">Allows access by other processes to all or part of a file that was previously locked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-1049">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-1049">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-1050">下面的代码示例演示如何锁定文件的一部分，以便另一个进程无法访问该文件的一部分，即使它到文件中，具有读/写访问权限，然后解锁该文件的指定的部分。</span><span class="sxs-lookup"><span data-stu-id="e3693-1050">The following code example demonstrates how to lock part of a file so another process cannot access that part of the file even though it has read/write access to the file, and then unlock the specified part of the file .</span></span> <span data-ttu-id="e3693-1051">同时在不同的命令窗口中运行程序，并调查使用不同的控制台输入的选项。</span><span class="sxs-lookup"><span data-stu-id="e3693-1051">Run the program simultaneously in different command windows and investigate using the different console input options.</span></span>  
  
 [!code-cpp[System.IO.FileStream3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#1)]
 [!code-csharp[System.IO.FileStream3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#1)]
 [!code-vb[System.IO.FileStream3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-1052"><paramref name="position" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="e3693-1052"><paramref name="position" /> or <paramref name="length" /> is negative.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-1053">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-1053">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-1054">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-1054">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-1055">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-1055">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] array, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] array, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (array As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ array, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="fileStream.Write (array, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="e3693-1056">包含要写入该流的数据的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e3693-1056">The buffer containing data to write to the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="e3693-1057"><paramref name="array" /> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</span><span class="sxs-lookup"><span data-stu-id="e3693-1057">The zero-based byte offset in <paramref name="array" /> from which to begin copying bytes to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="e3693-1058">最多写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-1058">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="e3693-1059">将字节块写入文件流。</span><span class="sxs-lookup"><span data-stu-id="e3693-1059">Writes a block of bytes to the file stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-1060">此方法重写 <xref:System.IO.Stream.Write%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-1060">This method overrides <xref:System.IO.Stream.Write%2A>.</span></span>  
  
 <span data-ttu-id="e3693-1061">`offset`参数指定了中的字节偏移量`array`（缓冲区索引） 在此处开始复制，和`count`参数提供了将写入到流的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-1061">The `offset` parameter gives the offset of the byte in `array` (the buffer index) at which to begin copying, and the `count` parameter gives the number of bytes that will be written to the stream.</span></span> <span data-ttu-id="e3693-1062">如果写入操作成功，流的当前位置前进写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-1062">If the write operation is successful, the current position of the stream is advanced by the number of bytes written.</span></span> <span data-ttu-id="e3693-1063">如果发生异常，则流的当前位置不变。</span><span class="sxs-lookup"><span data-stu-id="e3693-1063">If an exception occurs, the current position of the stream is unchanged.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-1064">使用<xref:System.IO.FileStream.CanWrite%2A>属性来确定当前实例是否支持写入。</span><span class="sxs-lookup"><span data-stu-id="e3693-1064">Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span> <span data-ttu-id="e3693-1065">有关附加信息，请参见 <xref:System.IO.Stream.CanWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-1065">For additional information, see <xref:System.IO.Stream.CanWrite%2A>.</span></span>  
  
 <span data-ttu-id="e3693-1066">不会中断正在执行写操作的线程。</span><span class="sxs-lookup"><span data-stu-id="e3693-1066">Do not interrupt a thread that is performing a write operation.</span></span> <span data-ttu-id="e3693-1067">虽然应用程序看上去要取消阻止该线程后成功运行，应用程序的性能和可靠性，可以减少中断。</span><span class="sxs-lookup"><span data-stu-id="e3693-1067">Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.</span></span>  
  
 <span data-ttu-id="e3693-1068">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-1068">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-1069">此代码示例是为提供一个更大示例的一部分<xref:System.IO.FileStream.Lock%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e3693-1069">This code example is part of a larger example provided for the <xref:System.IO.FileStream.Lock%2A> method.</span></span>  
  
 [!code-cpp[System.IO.FileStream3#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#3)]
 [!code-csharp[System.IO.FileStream3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#3)]
 [!code-vb[System.IO.FileStream3#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-1070"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-1070"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-1071"><paramref name="offset" /> 和 <paramref name="count" /> 描述 <paramref name="array" /> 中的无效范围。</span><span class="sxs-lookup"><span data-stu-id="e3693-1071"><paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-1072"><paramref name="offset" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="e3693-1072"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="e3693-1073">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="e3693-1073">An I/O error occurred.</span></span>  
  
<span data-ttu-id="e3693-1074">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e3693-1074">-or-</span></span> 
<span data-ttu-id="e3693-1075">另一个线程可能导致操作系统的文件句柄的位置发生意外更改。</span><span class="sxs-lookup"><span data-stu-id="e3693-1075">Another thread may have caused an unexpected change in the position of the operating system's file handle.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e3693-1076">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="e3693-1076">The stream is closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-1077">当前的流实例不支持写入。</span><span class="sxs-lookup"><span data-stu-id="e3693-1077">The current stream instance does not support writing.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-1078">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-1078">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-1079">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-1079">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-1080">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-1080">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="fileStream.WriteAsync (buffer, offset, count, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="e3693-1081">从中写入数据的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="e3693-1081">The buffer to write data from.</span></span></param>
        <param name="offset"><span data-ttu-id="e3693-1082"><paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</span><span class="sxs-lookup"><span data-stu-id="e3693-1082">The zero-based byte offset in <paramref name="buffer" /> from which to begin copying bytes to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="e3693-1083">最多写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="e3693-1083">The maximum number of bytes to write.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="e3693-1084">要监视取消请求的标记。</span><span class="sxs-lookup"><span data-stu-id="e3693-1084">The token to monitor for cancellation requests.</span></span></param>
        <summary><span data-ttu-id="e3693-1085">将字节的序列异步写入当前流，将该流中的当前位置提升写入的字节数，并监视取消请求。</span><span class="sxs-lookup"><span data-stu-id="e3693-1085">Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</span></span></summary>
        <returns><span data-ttu-id="e3693-1086">表示异步写入操作的任务。</span><span class="sxs-lookup"><span data-stu-id="e3693-1086">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-1087"><xref:System.IO.FileStream.WriteAsync%2A>方法使您能够执行占用大量资源的文件操作，而不会阻止主线程。</span><span class="sxs-lookup"><span data-stu-id="e3693-1087">The <xref:System.IO.FileStream.WriteAsync%2A> method enables you to perform resource-intensive file operations without blocking the main thread.</span></span> <span data-ttu-id="e3693-1088">在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用或 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 应用中一个耗时的流操作可能阻塞 UI 线程并让您的应用看起来好像不工作时，这种性能的考虑就显得尤为重要了。</span><span class="sxs-lookup"><span data-stu-id="e3693-1088">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="e3693-1089">结合使用异步方法`async`和`await`Visual Basic 和 C# 中的关键字。</span><span class="sxs-lookup"><span data-stu-id="e3693-1089">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="e3693-1090">使用<xref:System.IO.FileStream.CanWrite%2A>属性来确定当前实例是否支持写入。</span><span class="sxs-lookup"><span data-stu-id="e3693-1090">Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 <span data-ttu-id="e3693-1091">如果在完成之前，将取消该操作，则返回的任务将包含<xref:System.Threading.Tasks.TaskStatus.Canceled>值<xref:System.Threading.Tasks.Task.Status%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-1091">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span> <span data-ttu-id="e3693-1092">如果释放文件句柄，则返回的任务将包含<xref:System.ObjectDisposedException>中的异常<xref:System.Threading.Tasks.Task.Exception%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e3693-1092">If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-1093">下面的示例演示如何以异步方式写入文件。</span><span class="sxs-lookup"><span data-stu-id="e3693-1093">The following example shows how to write asynchronously to a file.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#3](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example3.cs#3)]
 [!code-vb[Asynchronous_File_IO_async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3693-1094"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-1094"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3693-1095"><paramref name="offset" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="e3693-1095"><paramref name="offset" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3693-1096"><paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</span><span class="sxs-lookup"><span data-stu-id="e3693-1096">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-1097">流不支持写入。</span><span class="sxs-lookup"><span data-stu-id="e3693-1097">The stream does not support writing.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e3693-1098">已释放流。</span><span class="sxs-lookup"><span data-stu-id="e3693-1098">The stream has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e3693-1099">流正在由前一次写操作使用。</span><span class="sxs-lookup"><span data-stu-id="e3693-1099">The stream is currently in use by a previous write operation.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="e3693-1100">取消</span><span class="sxs-lookup"><span data-stu-id="e3693-1100">Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="override this.WriteByte : byte -&gt; unit" Usage="fileStream.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3693-1101">要写入流的字节。</span><span class="sxs-lookup"><span data-stu-id="e3693-1101">A byte to write to the stream.</span></span></param>
        <summary><span data-ttu-id="e3693-1102">一个字节写入文件流中的当前位置。</span><span class="sxs-lookup"><span data-stu-id="e3693-1102">Writes a byte to the current position in the file stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3693-1103">此方法重写 <xref:System.IO.Stream.WriteByte%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-1103">This method overrides <xref:System.IO.Stream.WriteByte%2A>.</span></span>  
  
 <span data-ttu-id="e3693-1104">使用`WriteByte`写入到一个字节`FileStream`高效。</span><span class="sxs-lookup"><span data-stu-id="e3693-1104">Use `WriteByte` to write a byte to a `FileStream` efficiently.</span></span> <span data-ttu-id="e3693-1105">如果流已关闭或不可写，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="e3693-1105">If the stream is closed or not writable, an exception will be thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3693-1106">使用<xref:System.IO.FileStream.CanWrite%2A>属性来确定当前实例是否支持写入。</span><span class="sxs-lookup"><span data-stu-id="e3693-1106">Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span> <span data-ttu-id="e3693-1107">有关附加信息，请参见 <xref:System.IO.Stream.CanWrite%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3693-1107">For additional information, see <xref:System.IO.Stream.CanWrite%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3693-1108">下面的代码示例演示如何将数据写入到文件，按字节，然后验证数据是否被正确写入。</span><span class="sxs-lookup"><span data-stu-id="e3693-1108">The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.FileStream1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream1/CPP/source.cpp#1)]
 [!code-csharp[System.IO.FileStream1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream1/CS/source.cs#1)]
 [!code-vb[System.IO.FileStream1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e3693-1109">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="e3693-1109">The stream is closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3693-1110">流不支持写入。</span><span class="sxs-lookup"><span data-stu-id="e3693-1110">The stream does not support writing.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3693-1111">上的默认实现<see langword="Stream" />创建一个新的单字节数组，然后调用<see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />。</span><span class="sxs-lookup"><span data-stu-id="e3693-1111">The default implementation on <see langword="Stream" /> creates a new single-byte array and then calls <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />.</span></span> <span data-ttu-id="e3693-1112">虽然这是正式正确，它是低效的。</span><span class="sxs-lookup"><span data-stu-id="e3693-1112">While this is formally correct, it is inefficient.</span></span> <span data-ttu-id="e3693-1113">所有具有内部缓冲区的流应重写此方法并提供一个高效得多的读取缓冲区直接，避免在每次调用额外的数组分配的版本。</span><span class="sxs-lookup"><span data-stu-id="e3693-1113">Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</span></span>  
  
<span data-ttu-id="e3693-1114">常见的文件和目录操作的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="e3693-1114">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span></para></block>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="e3693-1115">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="e3693-1115">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="e3693-1116">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="e3693-1116">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="e3693-1117">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="e3693-1117">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>