<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnmanagedMemoryStream.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5118ab17a373e7e3ec2e224596d6e7345bcbabc38.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">118ab17a373e7e3ec2e224596d6e7345bcbabc38</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.UnmanagedMemoryStream">
          <source>Provides access to unmanaged blocks of memory from managed code.</source>
          <target state="translated">提供从托管代码访问非托管内存块的能力。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.UnmanagedMemoryStream">
          <source>This class supports access to unmanaged memory using the existing stream-based model and does not require that the contents in the unmanaged memory be copied to the heap.</source>
          <target state="translated">此类支持对非托管内存使用现有的基于流的模型的访问，并且不需要的非托管内存中的内容复制到堆。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.UnmanagedMemoryStream">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何读取和写入到非托管的内存使用<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.UnmanagedMemoryStream">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">非托管内存块是分配和解除分配使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.IO.UnmanagedMemoryStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor">
          <source>The user does not have the required permission.</source>
          <target state="translated">用户没有所必需的权限。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">用于访问非托管的内存。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">指向非托管内存位置的指针。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The length of the memory to use.</source>
          <target state="translated">要使用的内存的长度。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class using the specified location and memory length.</source>
          <target state="translated">用指定的位置和内存长度初始化 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>This constructor creates a new instance of the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class, and by default sets the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> property to <ph id="ph3">`false`</ph> and the <ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> property to <ph id="ph5">`true`</ph>.</source>
          <target state="translated">此构造函数创建的新实例<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>类，并且默认情况下设置<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph>属性<ph id="ph3">`false`</ph>和<ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>属性<ph id="ph5">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Length%2A&gt;</ph> property is set to the value of the <ph id="ph2">`length`</ph> parameter and cannot be changed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Length%2A&gt;</ph>属性设置为的值<ph id="ph2">`length`</ph>参数并且不能更改。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何读取和写入到非托管的内存使用<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">非托管内存块是分配和解除分配使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The user does not have the required permission.</source>
          <target state="translated">用户没有所必需的权限。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> 值为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 值小于零。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> is large enough to cause an overflow.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 太大，引起溢出。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">用于访问非托管的内存。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">要包含非托管内存流的缓冲区。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">启动非托管内存流的缓冲区字节位置。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">非托管内存流的长度。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer with a specified offset and length.</source>
          <target state="translated">在具有指定的偏移量和长度的安全缓冲区中初始化 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">指向非托管内存位置的指针。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the memory to use.</source>
          <target state="translated">要使用的内存的长度。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The total amount of memory assigned to the stream.</source>
          <target state="translated">分配给流的内存总量。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class using the specified location, memory length, total amount of memory, and file access values.</source>
          <target state="translated">使用指定的位置、内存长度、内存总量和文件访问值初始化 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">`length`</ph> parameter defines the current amount of memory in use.</source>
          <target state="translated"><ph id="ph1">`length`</ph>参数定义中使用的当前内存量。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>If reading or appending data to the stream, the <ph id="ph1">`length`</ph> value should be equal to the amount of valid data in the stream to be read from or preserved.</source>
          <target state="translated">如果读取或追加到流中，数据<ph id="ph1">`length`</ph>值应该等于从读取的流中的有效数据量或保留。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>If writing to the stream, this value should be zero.</source>
          <target state="translated">写入流，则此值应为零。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">`capacity`</ph> parameter indicates the amount of total memory available.</source>
          <target state="translated"><ph id="ph1">`capacity`</ph>参数指示可用的总内存量。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This value can describe a region that is longer than the length specified, or indicate a region that can be appended to.</source>
          <target state="translated">此值可以描述的长度超过指定的长度的区域，或指示可以追加到的区域。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Any attempt to write beyond this value will fail.</source>
          <target state="translated">任何尝试写入超出此值将失败。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">`access`</ph> parameter sets the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> properties.</source>
          <target state="translated"><ph id="ph1">`access`</ph>参数集<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Note that specifying <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph> does not guarantee that the stream will be writable.</source>
          <target state="translated">请注意该指定<ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>不保证的流将是可写。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The access parameters allow the implementer to create an object whose implementation can match the actual stream that is exposed.</source>
          <target state="translated">访问参数允许实施者创建其实现可以匹配实际流公开的对象。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何读取和写入到非托管的内存使用<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">非托管内存块是分配和解除分配使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The user does not have the required permission.</source>
          <target state="translated">用户没有所必需的权限。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> 值为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 值小于零。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> 值小于零。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is greater than the <ph id="ph2">&lt;paramref name="capacity" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 值大于 <ph id="ph2">&lt;paramref name="capacity" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">用于访问非托管的内存。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">要包含非托管内存流的缓冲区。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">启动非托管内存流的缓冲区字节位置。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">非托管内存流的长度。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The mode of file access to the unmanaged memory stream.</source>
          <target state="translated">非托管内存流的文件访问模式。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer with a specified offset, length, and file access.</source>
          <target state="translated">在具有指定的偏移量、长度和文件访问的安全缓冲区中初始化 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>Gets a value indicating whether a stream supports reading.</source>
          <target state="translated">获取一个值，该值指示流是否支持读取。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the object was created by a constructor with an <ph id="ph2">&lt;paramref name="access" /&gt;</ph> parameter that did not include reading the stream and if the stream is closed; otherwise, <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">如果对象是用一个构造函数创建的，而该构造函数的 <ph id="ph2">&lt;paramref name="access" /&gt;</ph> 参数不包括读取流，或者如果流已关闭，则为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，否则为 <ph id="ph3">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>This property indicates whether the current stream object supports reading.</source>
          <target state="translated">此属性指示当前的流对象是否支持读取。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何读取和写入到非托管的内存使用<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">非托管内存块是分配和解除分配使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> property before attempting to display the contents to the console.</source>
          <target state="translated">在此示例中，<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>对象传递给检查的方法<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>然后再尝试向控制台显示内容的属性。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.CanSeek">
          <source>Gets a value indicating whether a stream supports seeking.</source>
          <target state="translated">获取一个值，该值指示流是否支持查找。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the stream is closed; otherwise, <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">如果流已关闭，则为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanSeek">
          <source>This property indicates whether the current stream object supports seeking.</source>
          <target state="translated">此属性指示当前的流对象是否支持查找。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>Gets a value indicating whether a stream supports writing.</source>
          <target state="translated">获取一个值，该值指示流是否支持写入。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the object was created by a constructor with an <ph id="ph2">&lt;paramref name="access" /&gt;</ph> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">如果对象是用一个构造函数创建的，而该构造函数的 <ph id="ph2">&lt;paramref name="access" /&gt;</ph> 参数值支持写入，或者对象是用一个不带参数的构造函数创建的，或者如果流已关闭，则为 <ph id="ph1">&lt;see langword="false" /&gt;</ph>，否则为 <ph id="ph3">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>This property indicates whether the current stream object supports writing.</source>
          <target state="translated">此属性指示当前的流对象是否支持写入。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何读取和写入到非托管的内存使用<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">非托管内存块是分配和解除分配使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> property before attempting to write the data to the stream.</source>
          <target state="translated">在此示例中，<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>对象传递给检查的方法<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph>尝试将数据写入流之前的属性。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).</source>
          <target state="translated">获取流的长度（大小）或分配给流的内存总量（容量）。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>The size or capacity of the stream.</source>
          <target state="translated">流的大小或容量。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>This property returns the <ph id="ph1">`capacity`</ph> value provided to the constructor.</source>
          <target state="translated">此属性返回<ph id="ph1">`capacity`</ph>为构造函数提供的值。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>If no <ph id="ph1">`capacity`</ph> value was specified when the stream was initialized, this property returns the stream length.</source>
          <target state="translated">如果没有<ph id="ph1">`capacity`</ph>初始化流时指定的值，则此属性返回的流长度。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">若要释放托管资源和非托管资源，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；若仅释放非托管资源，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">释放由 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 占用的非托管资源，还可以另外再释放托管资源。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">此方法称为由公共<ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 调用受保护<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph>方法替换<ph id="ph3">`disposing`</ph>参数设置为<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 调用<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph>与<ph id="ph3">`disposing`</ph>设置为<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> references.</source>
          <target state="translated">当 <ph id="ph1">`disposing`</ph> 参数为 <ph id="ph2">`true`</ph> 时，此方法释放该 <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 引用的、由任何托管对象持有的全部资源。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.</source>
          <target state="translated">此方法调用每个引用对象的 <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> 可以由其他对象多次调用。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">在重写<ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph>请注意不要引用已释放的以前调用中的对象<ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">有关如何实现详细信息<ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph>，请参阅<bpt id="p1">[</bpt>实现 Dispose 方法<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">有关详细信息<ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>和<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>Overrides the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph> method so that no action is performed.</source>
          <target state="translated">重写 <ph id="ph1">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph> 方法以便不执行任何操作。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>This method performs no action for this class but is included as part of the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> base class.</source>
          <target state="translated">此方法不执行任何操作且此类不作为的一部分包括<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>基类。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>Since any data is written to RAM, this method is redundant.</source>
          <target state="translated">由于任何数据写入 RAM，此方法是冗余的。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">要监视取消请求的标记。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Overrides the <ph id="ph1">&lt;see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /&gt;</ph> method so that the operation is cancelled if specified, but no other action is performed.</source>
          <target state="translated">重写 <ph id="ph1">&lt;see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /&gt;</ph> 方法，以便取消操作（如果已指定），但不执行其他任何操作。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Available starting in <ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph></source>
          <target state="translated">可以开始于 <ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">表示异步刷新操作的任务。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>If the operation isn’t cancelled, the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> calls the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Flush%2A&gt;</ph> method, which means that no action performed.</source>
          <target state="translated">如果未取消该操作，<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>调用<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Flush%2A&gt;</ph>方法，这意味着不执行任何操作。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.IO.UnmanagedMemoryStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer, or by using a pointer to an unmanaged memory location.</source>
          <target state="translated">在安全缓冲区中或使用指向非托管内存位置的指针初始化 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">指向非托管内存位置的指针。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the memory to use.</source>
          <target state="translated">要使用的内存的长度。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The total amount of memory assigned to the stream.</source>
          <target state="translated">分配给流的内存总量。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class by using a pointer to an unmanaged memory location.</source>
          <target state="translated">使用指向非托管内存位置的指针初始化 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This method is equivalent to the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">此方法相当于<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor%2A&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>It supports methods that need to initialize the pointer before setting stream variables and, therefore, cannot call the parameterized constructor.</source>
          <target state="translated">它支持需要初始化之前设置流变量的指针，因此，不能调用参数化构造函数的方法。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Such methods should use the default constructor, <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor&gt;</ph>, initialize the pointer, and then invoke the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Initialize%2A&gt;</ph> method.</source>
          <target state="translated">此类方法应使用默认构造函数，<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor&gt;</ph>初始化指针，，然后调用<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Initialize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The user does not have the required permission.</source>
          <target state="translated">用户没有所必需的权限。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> 值为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 值小于零。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> 值小于零。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is large enough to cause an overflow.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 值太大，导致溢出。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">用于访问非托管的内存。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">要包含非托管内存流的缓冲区。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">启动非托管内存流的缓冲区字节位置。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">非托管内存流的长度。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The mode of file access to the unmanaged memory stream.</source>
          <target state="translated">非托管内存流的文件访问模式。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer with a specified offset, length, and file access.</source>
          <target state="translated">在具有指定的偏移量、长度和文件访问的安全缓冲区中初始化 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>Gets the length of the data in a stream.</source>
          <target state="translated">获取流中数据的长度。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>The length of the data in the stream.</source>
          <target state="translated">流中数据的长度。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>If unchanged since the stream was initialized, this property returns the length value provided to the constructor.</source>
          <target state="translated">如果流已初始化，因为保持不变，此属性将返回提供给构造函数的长度值。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>If changes to the stream have occurred, this property reflects any changes to the length of the data.</source>
          <target state="translated">如果发生了更改写入流，此属性将反映对数据的长度的任何更改。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何读取和写入到非托管的内存使用<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">非托管内存块是分配和解除分配使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>Gets or sets the current position in a stream.</source>
          <target state="translated">获取或设置流中的当前位置。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>The current position in the stream.</source>
          <target state="translated">流中的当前新位置。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>When a stream is initialized, this property is set to zero.</source>
          <target state="translated">初始化流时，此属性设置为零。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>Although you can set the position of the stream beyond the stream's capacity, you will not be able to access that area using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> methods.</source>
          <target state="translated">虽然你可以设置流的容量超出流的当前位置，你将无法访问该区域使用<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> will return 0 and <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> will throw a <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> 将返回 0 和<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph>将引发<ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>This support is primarily for design and code compatibility with basic stream operations.</source>
          <target state="translated">此支持是主要用于与基本的流操作的设计和代码兼容性。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>The position is set to a value that is less than zero, or the position is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> or results in overflow when added to the current pointer.</source>
          <target state="translated">位置被设置为小于 0 的值，或者位置大于 <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 或在添加到当前指针时导致溢出。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>Gets or sets a byte pointer to a stream based on the current position in the stream.</source>
          <target state="translated">获取或设置基于流中当前位置的指向流的字节指针。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>A byte pointer.</source>
          <target state="translated">字节指针。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>To return a pointer to the entire stream, set the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Position%2A&gt;</ph> property to zero, and then call this property.</source>
          <target state="translated">若要将指针返回到整个流，将设置<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Position%2A&gt;</ph>以零，然后调用此属性的属性。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The current position is larger than the capacity of the stream.</source>
          <target state="translated">当前位置大于流的容量。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The position is being set is not a valid position in the current stream.</source>
          <target state="translated">所设置的位置不是当前流中的有效位置。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The pointer is being set to a lower value than the starting position of the stream.</source>
          <target state="translated">指针被设置为比流的开始位置小的值。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The stream was initialized for use with a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph>.</source>
          <target state="translated">流已初始化，可用于 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /&gt;</ph> property is valid only for streams that are initialized with a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> pointer.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /&gt;</ph> 属性仅对使用 <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> 指针初始化的流有效。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>for calling unmanaged code, such as calling native code with platform invoke or COM integration.</source>
          <target state="translated">对于调用非托管的代码，例如调用本机代码使用平台调用或 COM 集成。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">安全操作： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified byte array with the values between <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the bytes read from the current source.</source>
          <target state="translated">此方法返回时，该缓冲区包含指定的字节数组，该数组的 <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> 和 (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) 之间的值由从当前源中读取的字节替换。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">此参数未经初始化即被传递。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin storing the data read from the current stream.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 中从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to read from the current stream.</source>
          <target state="translated">要从当前流中读取的最大字节数。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads the specified number of bytes into the specified array.</source>
          <target state="translated">将指定数量的字节读入指定的数组。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes read into the buffer.</source>
          <target state="translated">读入缓冲区中的总字节数。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</source>
          <target state="translated">如果很多字节当前不可用，则总字节数可能小于请求的字节数；如果已到达流结尾，则为零 (0)。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> parameter gives the offset of the byte in the <ph id="ph2">`array`</ph> parameter (the buffer index) at which to begin reading, and the <ph id="ph3">`count`</ph> parameter gives the maximum number of bytes to be read from this stream.</source>
          <target state="translated"><ph id="ph1">`offset`</ph>参数指定了中的字节的偏移量<ph id="ph2">`array`</ph>从此处开始读取，参数 （缓冲区索引） 和<ph id="ph3">`count`</ph>参数指定了最大要从此流中读取的字节数。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The returned value is the actual number of bytes read, or zero if the end of the stream is reached.</source>
          <target state="translated">如果已到达流结尾，则返回的值是实际数字节，则为零。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the read operation is successful, the current position of the stream is advanced by the number of bytes read.</source>
          <target state="translated">如果读取的操作成功，是通过读取的字节数高级流的当前位置。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If an exception occurs, the current position of the stream is unchanged.</source>
          <target state="translated">如果发生异常，则流的当前位置不变。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> method returns zero only after reaching the end of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>方法返回仅在到达流的末尾后的零。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Otherwise, <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> always reads at least one byte from the stream before returning.</source>
          <target state="translated">否则为<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>始终至少 1 个字节从流中读取在返回之前。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If no data is available from the stream upon a call to <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>, the method will block until at least one byte of data can be returned.</source>
          <target state="translated">如果不会提供数据时调用流中<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>，该方法将一直阻止到至少一个字节的数据可以返回。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">实现可以自由地返回少于所请求的字节，即使尚未达到流结尾。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何读取和写入到非托管的内存使用<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">非托管内存块是分配和解除分配使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The underlying memory does not support reading.</source>
          <target state="translated">基础内存不支持读取。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /&gt;</ph> property is set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /&gt;</ph> 属性设置为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is set to <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 参数设置为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 参数小于零。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="count" /&gt;</ph> parameter is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 参数小于零。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The length of the buffer array minus the <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than the <ph id="ph2">&lt;paramref name="count" /&gt;</ph> parameter.</source>
          <target state="translated">缓冲区数组的长度减去 <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 参数小于 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 参数。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write the data into.</source>
          <target state="translated">数据写入的缓冲区。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 中的字节偏移量，从该偏移量开始写入流中的数据。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">最多读取的字节数。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">要监视取消请求的标记。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads the specified number of bytes into the specified array.</source>
          <target state="translated">将指定数量的字节异步读入指定的数组。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Available starting in <ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph></source>
          <target state="translated">可以开始于 <ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">表示异步读取操作的任务。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> 参数的值包含读入缓冲区的总字节数。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If an exception occurs during the read operation, it will be set as the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> of the property of the returned task.</source>
          <target state="translated">如果读取操作过程中发生异常，它将设置为<ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph>返回的任务的属性。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</source>
          <target state="translated">从流中读取一个字节，并将流内的位置前移一个字节，或者如果已到达流的末尾，则返回 -1。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The unsigned byte cast to an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> object, or -1 if at the end of the stream.</source>
          <target state="translated">转换为 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 对象的无符号字节，或者如果到达流的末尾，则为 -1。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>Use this method to return integer values from the stream.</source>
          <target state="translated">使用此方法从流中返回整数值。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何读取和写入到非托管的内存使用<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">非托管内存块是分配和解除分配使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> property before attempting to read and display the contents to the console.</source>
          <target state="translated">在此示例中，<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>对象传递给检查的方法<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>之前正在尝试读取并向控制台显示内容的属性。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The underlying memory does not support reading.</source>
          <target state="translated">基础内存不支持读取。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The current position is at the end of the stream.</source>
          <target state="translated">当前位置在流的末尾。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The point relative to <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> to begin seeking from.</source>
          <target state="translated">相对于 <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> 的点，从此处开始查找。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Specifies the beginning, the end, or the current position as a reference point for <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>, using a value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> 类型的值，将开始位置、结束位置或当前位置指定为 <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> 的参考点。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the current position of the current stream to the given value.</source>
          <target state="translated">将当前流的当前位置设置为给定值。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position in the stream.</source>
          <target state="translated">流中的新位置。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>For more information about seeking, see <ph id="ph1">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph>.</source>
          <target state="translated">有关查找的详细信息，请参阅<ph id="ph1">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>An attempt was made to seek before the beginning of the stream.</source>
          <target state="translated">尝试在流的开始位置之前查找。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> value is larger than the maximum size of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 值大于流的最大大小。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source><ph id="ph1">&lt;paramref name="loc" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="loc" /&gt;</ph> 无效。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The length of the stream.</source>
          <target state="translated">流的长度。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>Sets the length of a stream to a specified value.</source>
          <target state="translated">将流的长度设置为指定的值。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>If the given value is less than the current length of the stream, the stream is truncated.</source>
          <target state="translated">如果给定的值小于当前流的长度，则流将被截断。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>If the given value is larger than the current length of the stream, the stream is expanded.</source>
          <target state="translated">如果给定的值大于当前流的长度，则流被扩展。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>If the stream is expanded, the contents of the stream between the old and the new lengths are undefined.</source>
          <target state="translated">如果流已展开，旧和新的长度之间流的内容是不确定的。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>A stream must support both writing and seeking for <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.SetLength%2A&gt;</ph> to work.</source>
          <target state="translated">流必须支持写入和查找有关<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.SetLength%2A&gt;</ph>工作。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>An I/O error has occurred.</source>
          <target state="translated">发生了 I/O 错误。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The underlying memory does not support writing.</source>
          <target state="translated">基础内存不支持写入。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>An attempt is made to write to the stream and the <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">尝试写入流，但 <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> 属性为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The specified <ph id="ph1">&lt;paramref name="value" /&gt;</ph> exceeds the capacity of the stream.</source>
          <target state="translated">指定的 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 超出流的容量。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The specified <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is negative.</source>
          <target state="translated">指定的 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 是负数。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array from which to copy bytes to the current stream.</source>
          <target state="translated">字节数组，从该字节数组将字节复制到当前流中。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The offset in the buffer at which to begin copying bytes to the current stream.</source>
          <target state="translated">缓冲区中的偏移量，从此处开始将字节复制到当前流中。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write to the current stream.</source>
          <target state="translated">要写入当前流的字节数。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes a block of bytes to the current stream using data from a buffer.</source>
          <target state="translated">使用缓冲区中的数据将字节块写入当前流。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writing occurs at the current position in the stream.</source>
          <target state="translated">在流中当前位置发生写操作。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何读取和写入到非托管的内存使用<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">非托管内存块是分配和解除分配使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The underlying memory does not support writing.</source>
          <target state="translated">基础内存不支持写入。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An attempt is made to write to the stream and the <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">尝试写入流，但 <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> 属性为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="count" /&gt;</ph> value is greater than the capacity of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 值大于流的容量。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The position is at the end of the stream capacity.</source>
          <target state="translated">位置在流容量的末尾。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>One of the specified parameters is less than zero.</source>
          <target state="translated">其中一个指定的参数小于 0。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter minus the length of the <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> parameter is less than the <ph id="ph3">&lt;paramref name="count" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 参数减去 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> 参数的长度小于 <ph id="ph3">&lt;paramref name="count" /&gt;</ph> 参数。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 参数为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write data from.</source>
          <target state="translated">从中写入数据的缓冲区。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">最多写入的字节数。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">要监视取消请求的标记。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">将字节的序列异步写入当前流，将该流中的当前位置提升写入的字节数，并监视取消请求。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Available starting in <ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph></source>
          <target state="translated">可以开始于 <ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">表示异步写入操作的任务。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If an exception occurs during the write operation, it will be set as the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> of the property of the returned task.</source>
          <target state="translated">如果在写入操作期间发生异常，它将设置为<ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph>返回的任务的属性。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>A byte value written to the stream.</source>
          <target state="translated">写入流的字节值。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>Writes a byte to the current position in the file stream.</source>
          <target state="translated">一个字节写入文件流中的当前位置。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何读取和写入到非托管的内存使用<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">非托管内存块是分配和解除分配使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> property before attempting to write the data to the stream.</source>
          <target state="translated">在此示例中，<ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>对象传递给检查的方法<ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph>尝试将数据写入流之前的属性。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The underlying memory does not support writing.</source>
          <target state="translated">基础内存不支持写入。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>An attempt is made to write to the stream and the <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">尝试写入流，但 <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> 属性为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 或 -</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The current position is at the end of the capacity of the stream.</source>
          <target state="translated">当前位置在流容量的末尾。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The supplied <ph id="ph1">&lt;paramref name="value" /&gt;</ph> causes the stream exceed its maximum capacity.</source>
          <target state="translated">提供的 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 导致流超出它的最大容量。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>