<Type Name="FileSystemWatcher" FullName="System.IO.FileSystemWatcher">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="10cab9d5d130cd5e31ba2f2a3417bc5bac002972" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37652563" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileSystemWatcher : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileSystemWatcher extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.IO.FileSystemWatcher" />
  <TypeSignature Language="VB.NET" Value="Public Class FileSystemWatcher&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystemWatcher : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type FileSystemWatcher = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Changed")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.IO.IODescription("")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="202f4-101">Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</span>
      <span class="sxs-lookup">
        <span data-stu-id="202f4-101">Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-102">使用<xref:System.IO.FileSystemWatcher>要监视的指定目录中的更改。</span><span class="sxs-lookup"><span data-stu-id="202f4-102">Use <xref:System.IO.FileSystemWatcher> to watch for changes in a specified directory.</span></span> <span data-ttu-id="202f4-103">可监视文件和指定的目录的子目录中的更改。</span><span class="sxs-lookup"><span data-stu-id="202f4-103">You can watch for changes in files and subdirectories of the specified directory.</span></span> <span data-ttu-id="202f4-104">可以创建一个组件来监视本地计算机、 网络驱动器或远程计算机上的文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-104">You can create a component to watch files on a local computer, a network drive, or a remote computer.</span></span>  
  
 <span data-ttu-id="202f4-105">若要监视的所有文件中的更改，请设置<xref:System.IO.FileSystemWatcher.Filter%2A>属性为空字符串 ("") 或使用通配符 ("*。\*")。</span><span class="sxs-lookup"><span data-stu-id="202f4-105">To watch for changes in all files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to an empty string ("") or use wildcards ("*.\*").</span></span> <span data-ttu-id="202f4-106">若要监视特定文件，请设置<xref:System.IO.FileSystemWatcher.Filter%2A>属性设置为的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="202f4-106">To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.</span></span> <span data-ttu-id="202f4-107">例如，若要监视的文件 MyDoc.txt 中的更改，请设置<xref:System.IO.FileSystemWatcher.Filter%2A>属性设置为"MyDoc.txt"。</span><span class="sxs-lookup"><span data-stu-id="202f4-107">For example, to watch for changes in the file MyDoc.txt, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "MyDoc.txt".</span></span> <span data-ttu-id="202f4-108">此外可以监视特定类型的文件中的更改。</span><span class="sxs-lookup"><span data-stu-id="202f4-108">You can also watch for changes in a certain type of file.</span></span> <span data-ttu-id="202f4-109">例如，若要监视的文本文件中的更改，请设置<xref:System.IO.FileSystemWatcher.Filter%2A>属性设置为"\*.txt"。</span><span class="sxs-lookup"><span data-stu-id="202f4-109">For example, to watch for changes in text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "\*.txt".</span></span>  
  
 <span data-ttu-id="202f4-110">有几种类型的可监视的目录或文件中的更改。</span><span class="sxs-lookup"><span data-stu-id="202f4-110">There are several types of changes you can watch for in a directory or file.</span></span> <span data-ttu-id="202f4-111">例如，可以监视中更改`Attributes`，则`LastWrite`日期和时间，或`Size`的文件或目录。</span><span class="sxs-lookup"><span data-stu-id="202f4-111">For example, you can watch for changes in `Attributes`, the `LastWrite` date and time, or the `Size` of files or directories.</span></span> <span data-ttu-id="202f4-112">这是通过设置<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>属性设置为其中一个<xref:System.IO.NotifyFilters>值。</span><span class="sxs-lookup"><span data-stu-id="202f4-112">This is done by setting the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to one of the <xref:System.IO.NotifyFilters> values.</span></span> <span data-ttu-id="202f4-113">您可以观看上的更改的类型的详细信息，请参阅<xref:System.IO.NotifyFilters>。</span><span class="sxs-lookup"><span data-stu-id="202f4-113">For more information on the type of changes you can watch, see <xref:System.IO.NotifyFilters>.</span></span>  
  
 <span data-ttu-id="202f4-114">你可以监视重命名，删除或创建文件或目录。</span><span class="sxs-lookup"><span data-stu-id="202f4-114">You can watch for renaming, deletion, or creation of files or directories.</span></span> <span data-ttu-id="202f4-115">例如，若要监视的重命名的文本文件，请设置<xref:System.IO.FileSystemWatcher.Filter%2A>属性设置为"\*.txt"，并调用<xref:System.IO.FileSystemWatcher.WaitForChanged%2A>方法替换<xref:System.IO.WatcherChangeTypes.Renamed>为其参数指定。</span><span class="sxs-lookup"><span data-stu-id="202f4-115">For example, to watch for renaming of text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "\*.txt" and call the <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method with a <xref:System.IO.WatcherChangeTypes.Renamed> specified for its parameter.</span></span>  
  
 <span data-ttu-id="202f4-116">Windows 操作系统会通知您的组件的创建的缓冲区中的文件更改<xref:System.IO.FileSystemWatcher>。</span><span class="sxs-lookup"><span data-stu-id="202f4-116">The Windows operating system notifies your component of file changes in a buffer created by the <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="202f4-117">如果在短时间有很多更改，则缓冲区可能溢出。</span><span class="sxs-lookup"><span data-stu-id="202f4-117">If there are many changes in a short time, the buffer can overflow.</span></span> <span data-ttu-id="202f4-118">这会导致组件无法在目录中，更改跟踪并且它将只提供一般性通知。</span><span class="sxs-lookup"><span data-stu-id="202f4-118">This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</span></span> <span data-ttu-id="202f4-119">增加使用的缓冲区的大小<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>属性开销较大，因为它来自无法换出到磁盘中，所以尚未保持缓冲区尽可能小的非分页内存大足以不会遗漏任何文件更改事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-119">Increasing the size of the buffer with the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events.</span></span> <span data-ttu-id="202f4-120">若要避免缓冲区溢出，请使用<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>和<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>属性，以便您可以筛选出不需要更改通知。</span><span class="sxs-lookup"><span data-stu-id="202f4-120">To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties so you can filter out unwanted change notifications.</span></span>  
  
 <span data-ttu-id="202f4-121">有关实例的初始属性值的列表<xref:System.IO.FileSystemWatcher>，请参阅<xref:System.IO.FileSystemWatcher.%23ctor%2A>构造函数。</span><span class="sxs-lookup"><span data-stu-id="202f4-121">For a list of initial property values for an instance of <xref:System.IO.FileSystemWatcher>, see the <xref:System.IO.FileSystemWatcher.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="202f4-122">使用时，请注意以下<xref:System.IO.FileSystemWatcher>类。</span><span class="sxs-lookup"><span data-stu-id="202f4-122">Please note the following when using the <xref:System.IO.FileSystemWatcher> class.</span></span>  
  
-   <span data-ttu-id="202f4-123">不忽略隐藏的文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-123">Hidden files are not ignored.</span></span>  
  
-   <span data-ttu-id="202f4-124">在某些系统<xref:System.IO.FileSystemWatcher>报告使用短 8.3 文件名称格式的文件更改。</span><span class="sxs-lookup"><span data-stu-id="202f4-124">In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format.</span></span> <span data-ttu-id="202f4-125">例如，对"LongFileName.LongExtension"的更改可能被报告为"LongFil ~。Lon"。</span><span class="sxs-lookup"><span data-stu-id="202f4-125">For example, a change to  "LongFileName.LongExtension" could be reported as "LongFil~.Lon".</span></span>  
  
-   <span data-ttu-id="202f4-126">此类包含一个链接要求和继承要求在类级别应用于所有成员。</span><span class="sxs-lookup"><span data-stu-id="202f4-126">This class contains a link demand and an inheritance demand at the class level that applies to all members.</span></span> <span data-ttu-id="202f4-127">一个<xref:System.Security.SecurityException>直接调用方或派生的类没有完全信任权限时引发。</span><span class="sxs-lookup"><span data-stu-id="202f4-127">A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission.</span></span> <span data-ttu-id="202f4-128">有关安全要求的详细信息，请参阅[链接要求](~/docs/framework/misc/link-demands.md)。</span><span class="sxs-lookup"><span data-stu-id="202f4-128">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md).</span></span>  
  
-   <span data-ttu-id="202f4-129">可以为设置的最大大小<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>属性用于在网络上监视目录为 64 KB。</span><span class="sxs-lookup"><span data-stu-id="202f4-129">The maximum size you can set for the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property for monitoring a directory over the network is 64 KB.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="202f4-130">运行<xref:System.IO.FileSystemWatcher>不支持在 Windows 98 上。</span><span class="sxs-lookup"><span data-stu-id="202f4-130">Running <xref:System.IO.FileSystemWatcher> on Windows 98 is not supported.</span></span>  
  
## <a name="copying-and-moving-folders"></a><span data-ttu-id="202f4-131">复制和移动文件夹</span><span class="sxs-lookup"><span data-stu-id="202f4-131">Copying and moving folders</span></span>  
 <span data-ttu-id="202f4-132">操作系统和<xref:System.IO.FileSystemWatcher>对象解释剪切和粘贴操作或作为文件夹及其内容的重命名操作的移动操作。</span><span class="sxs-lookup"><span data-stu-id="202f4-132">The operating system and <xref:System.IO.FileSystemWatcher> object interpret a cut-and-paste action or a move action as a rename action for a folder and its contents.</span></span> <span data-ttu-id="202f4-133">如果要剪切并粘贴到受监视的文件夹的文件的文件夹<xref:System.IO.FileSystemWatcher>对象报告仅为新的该文件夹，但而非其内容，因为它们实质上只重命名。</span><span class="sxs-lookup"><span data-stu-id="202f4-133">If you cut and paste a folder with files into a folder being watched, the <xref:System.IO.FileSystemWatcher> object reports only the folder as new, but not its contents because they are essentially only renamed.</span></span>  
  
 <span data-ttu-id="202f4-134">若要得到通知文件夹的内容已移动或复制到受监视的文件夹，请提供<xref:System.IO.FileSystemWatcher.OnChanged%2A>和<xref:System.IO.FileSystemWatcher.OnRenamed%2A>根据下表中的建议事件处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="202f4-134">To be notified that the contents of folders have been moved or copied into a watched folder, provide <xref:System.IO.FileSystemWatcher.OnChanged%2A> and <xref:System.IO.FileSystemWatcher.OnRenamed%2A> event handler methods as suggested in the following table.</span></span>  
  
|<span data-ttu-id="202f4-135">事件处理程序</span><span class="sxs-lookup"><span data-stu-id="202f4-135">Event Handler</span></span>|<span data-ttu-id="202f4-136">处理事件</span><span class="sxs-lookup"><span data-stu-id="202f4-136">Events Handled</span></span>|<span data-ttu-id="202f4-137">执行</span><span class="sxs-lookup"><span data-stu-id="202f4-137">Performs</span></span>|  
|-------------------|--------------------|--------------|  
|<xref:System.IO.FileSystemWatcher.OnChanged%2A>|<span data-ttu-id="202f4-138"><xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted></span><span class="sxs-lookup"><span data-stu-id="202f4-138"><xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted></span></span>|<span data-ttu-id="202f4-139">报告中的文件属性、 创建的文件和已删除的文件的更改。</span><span class="sxs-lookup"><span data-stu-id="202f4-139">Report changes in file attributes, created files, and deleted files.</span></span>|  
|<xref:System.IO.FileSystemWatcher.OnRenamed%2A>|<xref:System.IO.FileSystemWatcher.Renamed>|<span data-ttu-id="202f4-140">中列出的旧的和新路径的重命名的文件和文件夹，如果需要扩展以递归方式。</span><span class="sxs-lookup"><span data-stu-id="202f4-140">List the old and new paths of renamed files and folders, expanding recursively if needed.</span></span>|  
  
## <a name="events-and-buffer-sizes"></a><span data-ttu-id="202f4-141">事件和缓冲区大小</span><span class="sxs-lookup"><span data-stu-id="202f4-141">Events and Buffer Sizes</span></span>  
 <span data-ttu-id="202f4-142">请注意，几个因素可以影响引发哪些文件系统更改事件，如以下所述：</span><span class="sxs-lookup"><span data-stu-id="202f4-142">Note that several factors can affect which file system change events are raised, as described by the following:</span></span>  
  
-   <span data-ttu-id="202f4-143">常见的文件系统操作可能会引发多个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-143">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="202f4-144">例如，当文件从一个目录移到另一个、 多个<xref:System.IO.FileSystemWatcher.OnChanged%2A>和某些<xref:System.IO.FileSystemWatcher.OnCreated%2A>和<xref:System.IO.FileSystemWatcher.OnDeleted%2A>可能引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-144">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="202f4-145">移动文件由多个简单操作组成的复杂操作，因此会引发多个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-145">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="202f4-146">同样，某些应用程序 （例如，防病毒软件） 可能会导致检测到的其他文件系统事件<xref:System.IO.FileSystemWatcher>。</span><span class="sxs-lookup"><span data-stu-id="202f4-146">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
-   <span data-ttu-id="202f4-147"><xref:System.IO.FileSystemWatcher>可以观看磁盘，只要它们不切换或删除。</span><span class="sxs-lookup"><span data-stu-id="202f4-147">The <xref:System.IO.FileSystemWatcher> can watch disks as long as they are not switched or removed.</span></span> <span data-ttu-id="202f4-148"><xref:System.IO.FileSystemWatcher>不会引发事件的 Cd 和 Dvd，因为时间戳和属性不能更改。</span><span class="sxs-lookup"><span data-stu-id="202f4-148">The <xref:System.IO.FileSystemWatcher> does not raise events for CDs and DVDs, because time stamps and properties cannot change.</span></span> <span data-ttu-id="202f4-149">远程计算机必须有一个安装组件才能正常工作所需平台。</span><span class="sxs-lookup"><span data-stu-id="202f4-149">Remote computers must have one of the required platforms installed for the component to function properly.</span></span>  
  
-   <span data-ttu-id="202f4-150">如果多个<xref:System.IO.FileSystemWatcher>对象正在监视在 Windows XP Service Pack 1 之前的同一个 UNC 路径或 Windows 2000 SP2 或更早版本，则仅一个对象将引发一个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-150">If multiple <xref:System.IO.FileSystemWatcher> objects are watching the same UNC path in Windows XP prior to Service Pack 1, or Windows 2000 SP2 or earlier, then only one of the objects will raise an event.</span></span> <span data-ttu-id="202f4-151">在计算机上运行 Windows XP SP1 和更高版本，Windows 2000 SP3 或更高版本或 Windows Server 2003 中，所有<xref:System.IO.FileSystemWatcher>对象会引发相应事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-151">On machines running Windows XP SP1 and newer, Windows 2000 SP3 or newer or Windows Server 2003, all <xref:System.IO.FileSystemWatcher> objects will raise the appropriate events.</span></span>  
  
 <span data-ttu-id="202f4-152">请注意，<xref:System.IO.FileSystemWatcher>可能会错过的缓冲区大小超出时发生的事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-152">Note that a <xref:System.IO.FileSystemWatcher> may miss an event when the buffer size is exceeded.</span></span> <span data-ttu-id="202f4-153">若要避免丢失事件，请遵循以下准则：</span><span class="sxs-lookup"><span data-stu-id="202f4-153">To avoid missing events, follow these guidelines:</span></span>  
  
-   <span data-ttu-id="202f4-154">通过设置增加缓冲区大小<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="202f4-154">Increase the buffer size by setting the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property.</span></span>  
  
-   <span data-ttu-id="202f4-155">避免监视具有长文件名的文件，因为长文件名可能会导致填满缓冲区。</span><span class="sxs-lookup"><span data-stu-id="202f4-155">Avoid watching files with long file names, because a long file name contributes to filling up the buffer.</span></span> <span data-ttu-id="202f4-156">请考虑重命名这些文件使用较短的名称。</span><span class="sxs-lookup"><span data-stu-id="202f4-156">Consider renaming these files using shorter names.</span></span>  
  
-   <span data-ttu-id="202f4-157">使事件处理代码尽可能短。</span><span class="sxs-lookup"><span data-stu-id="202f4-157">Keep your event handling code as short as possible.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="202f4-158">下面的示例创建<xref:System.IO.FileSystemWatcher>监视在运行时指定的目录。</span><span class="sxs-lookup"><span data-stu-id="202f4-158">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="202f4-159">该组件设置为监视中的更改`LastWrite`和`LastAccess`时间、 创建、 删除、 或重命名的目录中的文本文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-159">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="202f4-160">如果文件是更改、 创建，或删除，文件的路径将打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="202f4-160">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="202f4-161">在一个文件重命名后，旧的和新路径将打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="202f4-161">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 <span data-ttu-id="202f4-162">使用<xref:System.Diagnostics>和<xref:System.IO>对于此示例的命名空间。</span><span class="sxs-lookup"><span data-stu-id="202f4-162">Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">
      <span data-ttu-id="202f4-163">从派生<see cref="T:System.Diagnostics.ProcessStartInfo" />类。</span>
      <span class="sxs-lookup">
        <span data-stu-id="202f4-163">for deriving from the <see cref="T:System.Diagnostics.ProcessStartInfo" /> class.</span>
      </span>
      <span data-ttu-id="202f4-164">要求值： <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />;命名权限集： <see langword="FullTrust" />。</span>
      <span class="sxs-lookup">
        <span data-stu-id="202f4-164">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />; Named Permission Sets: <see langword="FullTrust" />.</span>
      </span>
    </permission>
    <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
    <altmember cref="T:System.IO.NotifyFilters" />
    <altmember cref="T:System.IO.FileSystemEventArgs" />
    <altmember cref="T:System.IO.FileSystemEventHandler" />
    <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
    <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
    <altmember cref="T:System.IO.InternalBufferOverflowException" />
    <altmember cref="T:System.IO.RenamedEventArgs" />
    <altmember cref="T:System.IO.RenamedEventHandler" />
    <altmember cref="T:System.IO.WaitForChangedResult" />
    <altmember cref="T:System.IO.WatcherChangeTypes" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-165">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-165">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="202f4-166">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-166">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-167">不能观看不具有 Windows NT 或 Windows 2000 的远程计算机。</span><span class="sxs-lookup"><span data-stu-id="202f4-167">You cannot watch a remote computer that does not have Windows NT or Windows 2000.</span></span> <span data-ttu-id="202f4-168">不能观看从 Windows NT 4.0 计算机的远程 Windows NT 4.0 计算机。</span><span class="sxs-lookup"><span data-stu-id="202f4-168">You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</span></span>  
  
 <span data-ttu-id="202f4-169">下表显示的实例的初始属性值<xref:System.IO.FileSystemWatcher>。</span><span class="sxs-lookup"><span data-stu-id="202f4-169">The following table shows initial property values for an instance of <xref:System.IO.FileSystemWatcher>.</span></span>  
  
|<span data-ttu-id="202f4-170">属性</span><span class="sxs-lookup"><span data-stu-id="202f4-170">Property</span></span>|<span data-ttu-id="202f4-171">初始值</span><span class="sxs-lookup"><span data-stu-id="202f4-171">Initial Value</span></span>|  
|--------------|-------------------|  
|<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>|<span data-ttu-id="202f4-172">按位 OR 组合`LastWrite`， `FileName`，和 `DirectoryName`</span><span class="sxs-lookup"><span data-stu-id="202f4-172">bitwise OR combination of `LastWrite`, `FileName`, and `DirectoryName`</span></span>|  
|<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>|`false`|  
|<xref:System.IO.FileSystemWatcher.Filter%2A>|<span data-ttu-id="202f4-173">"*.\*"（监视所有文件。）</span><span class="sxs-lookup"><span data-stu-id="202f4-173">"*.\*" (Watch all files.)</span></span>|  
|<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>|`false`|  
|<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>|<span data-ttu-id="202f4-174">8192</span><span class="sxs-lookup"><span data-stu-id="202f4-174">8192</span></span>|  
|<xref:System.IO.FileSystemWatcher.Path%2A>|<span data-ttu-id="202f4-175">空字符串 ("")</span><span class="sxs-lookup"><span data-stu-id="202f4-175">empty string ("")</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="202f4-176">该组件将不监视指定的目录，直到<xref:System.IO.FileSystemWatcher.Path%2A>设置，并<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="202f4-176">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="202f4-177">下面的示例创建<xref:System.IO.FileSystemWatcher>要监视在运行时指定的目录对象。</span><span class="sxs-lookup"><span data-stu-id="202f4-177">The following example creates a <xref:System.IO.FileSystemWatcher> object to watch the directory specified at run time.</span></span> <span data-ttu-id="202f4-178"><xref:System.IO.FileSystemWatcher>对象中的更改会监视`LastWrite`和`LastAccess`时间，以及创建、 删除或重命名的文本目录中的文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-178">The <xref:System.IO.FileSystemWatcher> object watches for changes in `LastWrite` and `LastAccess` times, and for the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="202f4-179">如果文件是更改、 创建，或删除，将显示在控制台文件的路径。</span><span class="sxs-lookup"><span data-stu-id="202f4-179">If a file is changed, created, or deleted, the path to the file displays to the console.</span></span> <span data-ttu-id="202f4-180">在一个文件重命名后，旧的和新路径将显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="202f4-180">When a file is renamed, the old and new paths display to the console.</span></span>  
  
 <span data-ttu-id="202f4-181">此示例使用<xref:System.Diagnostics>和<xref:System.IO>命名空间。</span><span class="sxs-lookup"><span data-stu-id="202f4-181">This example uses the <xref:System.Diagnostics> and <xref:System.IO> namespaces.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="202f4-182">对于直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-182">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="202f4-183">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-183">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.IO.FileSystemWatcher : string -&gt; System.IO.FileSystemWatcher" Usage="new System.IO.FileSystemWatcher path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="202f4-184">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-184">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="202f4-185">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class, given the specified directory to monitor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-185">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class, given the specified directory to monitor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="202f4-186">该组件将不监视指定的目录，直到<xref:System.IO.FileSystemWatcher.Path%2A>设置，并<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="202f4-186">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
 <span data-ttu-id="202f4-187">该组件可以监视您的个人计算机、 网络驱动器或远程计算机上的文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-187">The component can watch files on your personal computer, a network drive, or a remote computer.</span></span>  
  
 <span data-ttu-id="202f4-188">不能观看不具有 Windows NT 或 Windows 2000 的远程计算机。</span><span class="sxs-lookup"><span data-stu-id="202f4-188">You cannot watch a remote computer that does not have Windows NT or Windows 2000.</span></span> <span data-ttu-id="202f4-189">不能观看从 Windows NT 4.0 计算机的远程 Windows NT 4.0 计算机。</span><span class="sxs-lookup"><span data-stu-id="202f4-189">You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</span></span> <span data-ttu-id="202f4-190"><xref:System.IO.FileSystemWatcher.Filter%2A>属性设置默认情况下，若要监视的所有文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-190">The <xref:System.IO.FileSystemWatcher.Filter%2A> property is set by default to watch all files.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="202f4-191">The <paramref name="path" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-191">The <paramref name="path" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="202f4-192">The <paramref name="path" /> parameter is an empty string ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-192">The <paramref name="path" /> parameter is an empty string ("").</span>
          </span>
          <span data-ttu-id="202f4-193">-or-  The path specified through the <paramref name="path" /> parameter does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-193">-or-  The path specified through the <paramref name="path" /> parameter does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="202f4-194">
            <paramref name="path" /> is too long.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-194">
              <paramref name="path" /> is too long.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="202f4-195">对于直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-195">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="202f4-196">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-196">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher (string path, string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, filter As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher(System::String ^ path, System::String ^ filter);" />
      <MemberSignature Language="F#" Value="new System.IO.FileSystemWatcher : string * string -&gt; System.IO.FileSystemWatcher" Usage="new System.IO.FileSystemWatcher (path, filter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="202f4-197">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-197">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="202f4-198">The type of files to watch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-198">The type of files to watch.</span>
          </span>
          <span data-ttu-id="202f4-199">For example, "\*.txt" watches for changes to all text files.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-199">For example, "\*.txt" watches for changes to all text files.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="202f4-200">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class, given the specified directory and type of files to monitor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-200">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class, given the specified directory and type of files to monitor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="202f4-201">该组件将不监视指定的目录，直到<xref:System.IO.FileSystemWatcher.Path%2A>设置，并<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="202f4-201">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
 <span data-ttu-id="202f4-202">该组件可以监视您的个人计算机、 网络驱动器或远程计算机上的文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-202">The component can watch files on your personal computer, a network drive, or a remote computer.</span></span>  
  
 <span data-ttu-id="202f4-203">不能观看不具有 Windows NT 或 Windows 2000 的远程计算机。</span><span class="sxs-lookup"><span data-stu-id="202f4-203">You cannot watch a remote computer that does not have Windows NT or Windows 2000.</span></span> <span data-ttu-id="202f4-204">不能观看从 Windows NT 4.0 计算机的远程 Windows NT 4.0 计算机。</span><span class="sxs-lookup"><span data-stu-id="202f4-204">You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="202f4-205">The <paramref name="path" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-205">The <paramref name="path" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="202f4-206">-or-  The <paramref name="filter" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-206">-or-  The <paramref name="filter" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="202f4-207">The <paramref name="path" /> parameter is an empty string ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-207">The <paramref name="path" /> parameter is an empty string ("").</span>
          </span>
          <span data-ttu-id="202f4-208">-or-  The path specified through the <paramref name="path" /> parameter does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-208">-or-  The path specified through the <paramref name="path" /> parameter does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="202f4-209">
            <paramref name="path" /> is too long.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-209">
              <paramref name="path" /> is too long.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="202f4-210">对于直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-210">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="202f4-211">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-211">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="fileSystemWatcher.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="202f4-212">Begins the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-212">Begins the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component.</span>
          </span>
          <span data-ttu-id="202f4-213">The initialization occurs at run time.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-213">The initialization occurs at run time.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-214">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]设计环境使用此方法来启动组件的初始化在窗体上使用或由另一个组件使用。</span><span class="sxs-lookup"><span data-stu-id="202f4-214">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component used on a form or used by another component.</span></span> <span data-ttu-id="202f4-215"><xref:System.IO.FileSystemWatcher.EndInit%2A>方法结束初始化。</span><span class="sxs-lookup"><span data-stu-id="202f4-215">The <xref:System.IO.FileSystemWatcher.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="202f4-216">使用<xref:System.IO.FileSystemWatcher.BeginInit%2A>和<xref:System.IO.FileSystemWatcher.EndInit%2A>方法可以防止该控件完全初始化之前使用。</span><span class="sxs-lookup"><span data-stu-id="202f4-216">Using the <xref:System.IO.FileSystemWatcher.BeginInit%2A> and <xref:System.IO.FileSystemWatcher.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.EndInit" />
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Changed" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Changed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changed As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Changed;" />
      <MemberSignature Language="F#" Value="member this.Changed : System.IO.FileSystemEventHandler " Usage="member this.Changed : System.IO.FileSystemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.IO.IODescription("Occurs when a file/directory change matches the filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-217">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is changed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-217">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-218"><xref:System.IO.FileSystemWatcher.Changed>大小发生更改时引发事件时，系统属性、 上次写入时间、 上次访问时间或文件或目录的安全权限在所监视的目录中。</span><span class="sxs-lookup"><span data-stu-id="202f4-218">The <xref:System.IO.FileSystemWatcher.Changed> event is raised when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="202f4-219">常见的文件系统操作可能会引发多个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-219">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="202f4-220">例如，当文件从一个目录移到另一个、 多个<xref:System.IO.FileSystemWatcher.OnChanged%2A>和某些<xref:System.IO.FileSystemWatcher.OnCreated%2A>和<xref:System.IO.FileSystemWatcher.OnDeleted%2A>可能引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-220">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="202f4-221">移动文件由多个简单操作组成的复杂操作，因此会引发多个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-221">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="202f4-222">同样，某些应用程序 （例如，防病毒软件） 可能会导致检测到的其他文件系统事件<xref:System.IO.FileSystemWatcher>。</span><span class="sxs-lookup"><span data-stu-id="202f4-222">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
 <span data-ttu-id="202f4-223">使用<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>来限制处理此事件时引发的通知数。</span><span class="sxs-lookup"><span data-stu-id="202f4-223">Use <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> to restrict the number of notifications raised when this event is handled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="202f4-224"><xref:System.IO.FileSystemWatcher.Changed>时文件重命名，但如果重命名目录，则不会引发意外引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-224">The <xref:System.IO.FileSystemWatcher.Changed> event is raised unexpectedly when a file is renamed, but is not raised when a directory is renamed.</span></span> <span data-ttu-id="202f4-225">若要监视的重命名，请使用<xref:System.IO.FileSystemWatcher.Renamed>事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-225">To watch for renaming, use the <xref:System.IO.FileSystemWatcher.Renamed> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="202f4-226">依据的顺序<xref:System.IO.FileSystemWatcher.Changed>相对于其他引发事件<xref:System.IO.FileSystemWatcher>事件可能会更改何时<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>属性不是`null`。</span><span class="sxs-lookup"><span data-stu-id="202f4-226">The order in which the <xref:System.IO.FileSystemWatcher.Changed> event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="202f4-227">下面的示例使用<xref:System.IO.FileSystemWatcher.Changed>事件时对受监视的文件发生更改的文件路径显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="202f4-227">The following example uses the <xref:System.IO.FileSystemWatcher.Changed> event to display the file path to the console whenever the watched file is changed.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Created">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Created;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Created" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Created" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Created As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Created;" />
      <MemberSignature Language="F#" Value="member this.Created : System.IO.FileSystemEventHandler " Usage="member this.Created : System.IO.FileSystemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.IO.IODescription("Occurs when a file/directory creation matches the filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-228">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-228">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-229">一些常见的事件，如复制和移动文件或目录，并直接对应一个事件，但这些事件执行操作会导致要在引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-229">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="202f4-230">复制文件或目录时，系统会引发<xref:System.IO.FileSystemWatcher.Created>文件被复制到，如果该目录正在受监视的目录中的事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-230">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="202f4-231">如果正在监视从其复制的目录的另一实例<xref:System.IO.FileSystemWatcher>，会引发任何事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-231">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="202f4-232">例如，创建的两个实例<xref:System.IO.FileSystemWatcher>。</span><span class="sxs-lookup"><span data-stu-id="202f4-232">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="202f4-233">FileSystemWatcher1 设置为监视"C:\My Documents"，并设置 FileSystemWatcher2 观看"C:\Your 文档"。</span><span class="sxs-lookup"><span data-stu-id="202f4-233">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="202f4-234">如果将文件从"我的文档"复制到"您的文档"， <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2，将引发事件，但对于 FileSystemWatcher1 不引发任何事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-234">If you copy a file from "My Documents" into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="202f4-235">与复制不同，移动文件或目录将引发两个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-235">Unlike copying, moving a file or directory would raise two events.</span></span> <span data-ttu-id="202f4-236">上述示例中，如果"我的文档"从文件移至"您的文档"，从<xref:System.IO.FileSystemWatcher.Created>FileSystemWatcher2 会引发事件和一个<xref:System.IO.FileSystemWatcher.Deleted>FileSystemWatcher1 会引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-236">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="202f4-237">常见的文件系统操作可能会引发多个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-237">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="202f4-238">例如，当文件从一个目录移到另一个、 多个<xref:System.IO.FileSystemWatcher.OnChanged%2A>和某些<xref:System.IO.FileSystemWatcher.OnCreated%2A>和<xref:System.IO.FileSystemWatcher.OnDeleted%2A>可能引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-238">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="202f4-239">移动文件由多个简单操作组成的复杂操作，因此会引发多个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-239">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="202f4-240">同样，某些应用程序 （例如，防病毒软件） 可能会导致检测到的其他文件系统事件<xref:System.IO.FileSystemWatcher>。</span><span class="sxs-lookup"><span data-stu-id="202f4-240">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="202f4-241">依据的顺序<xref:System.IO.FileSystemWatcher.Created>相对于其他引发事件<xref:System.IO.FileSystemWatcher>事件可能会更改何时<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>属性不是`null`。</span><span class="sxs-lookup"><span data-stu-id="202f4-241">The order in which the <xref:System.IO.FileSystemWatcher.Created> event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.</span></span>  
  
 <span data-ttu-id="202f4-242"><xref:System.IO.FileSystemWatcher.OnCreated%2A>文件创建时立即引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-242">The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created.</span></span> <span data-ttu-id="202f4-243">是否有文件被复制或传输到受监视的目录，<xref:System.IO.FileSystemWatcher.OnCreated%2A>事件会立即发生后, 跟一个或多个<xref:System.IO.FileSystemWatcher.OnChanged%2A>事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-243">If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="202f4-244">下面的示例使用<xref:System.IO.FileSystemWatcher.Created>事件时对受监视的文件创建向控制台显示的文件路径。</span><span class="sxs-lookup"><span data-stu-id="202f4-244">The following example uses the <xref:System.IO.FileSystemWatcher.Created> event to display the file path to the console whenever the watched file is created.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.IO.FileSystemEventHandler " Usage="member this.Deleted : System.IO.FileSystemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.IO.IODescription("Occurs when a file/directory deletion matches the filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-245">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is deleted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-245">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is deleted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-246">一些常见的事件，如复制和移动文件或目录，并直接对应一个事件，但这些事件执行操作会导致要在引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-246">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="202f4-247">复制文件或目录时，系统会引发<xref:System.IO.FileSystemWatcher.Created>文件被复制到，如果该目录正在受监视的目录中的事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-247">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="202f4-248">如果正在监视从其复制的目录的另一实例<xref:System.IO.FileSystemWatcher>，会引发任何事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-248">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="202f4-249">例如，创建的两个实例<xref:System.IO.FileSystemWatcher>。</span><span class="sxs-lookup"><span data-stu-id="202f4-249">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="202f4-250">FileSystemWatcher1 设置为监视"C:\My Documents"，并设置 FileSystemWatcher2 观看"C:\Your 文档"。</span><span class="sxs-lookup"><span data-stu-id="202f4-250">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="202f4-251">如果将文件从"我的文档"复制到"您的文档"， <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2，将引发事件，但对于 FileSystemWatcher1 不引发任何事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-251">If you copy a file from "My Documents" into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="202f4-252">与复制不同，移动文件或目录将引发两个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-252">Unlike copying, moving a file or directory would raise two events.</span></span> <span data-ttu-id="202f4-253">上述示例中，如果"我的文档"从文件移至"您的文档"，从<xref:System.IO.FileSystemWatcher.Created>FileSystemWatcher2 会引发事件和一个<xref:System.IO.FileSystemWatcher.Deleted>FileSystemWatcher1 会引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-253">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="202f4-254">常见的文件系统操作可能会引发多个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-254">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="202f4-255">例如，当文件从一个目录移到另一个、 多个<xref:System.IO.FileSystemWatcher.OnChanged%2A>和某些<xref:System.IO.FileSystemWatcher.OnCreated%2A>和<xref:System.IO.FileSystemWatcher.OnDeleted%2A>可能引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-255">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="202f4-256">移动文件由多个简单操作组成的复杂操作，因此会引发多个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-256">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="202f4-257">同样，某些应用程序 （例如，防病毒软件） 可能会导致检测到的其他文件系统事件<xref:System.IO.FileSystemWatcher>。</span><span class="sxs-lookup"><span data-stu-id="202f4-257">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="202f4-258">依据的顺序<xref:System.IO.FileSystemWatcher.Deleted>相对于其他引发事件<xref:System.IO.FileSystemWatcher>事件可能会更改何时<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>属性不是`null`。</span><span class="sxs-lookup"><span data-stu-id="202f4-258">The order in which the <xref:System.IO.FileSystemWatcher.Deleted> event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="202f4-259">下面的示例使用<xref:System.IO.FileSystemWatcher.Deleted>事件，以删除对受监视的文件时向控制台显示的文件路径。</span><span class="sxs-lookup"><span data-stu-id="202f4-259">The following example uses the <xref:System.IO.FileSystemWatcher.Deleted> event to display the file path to the console whenever the watched file is deleted.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="override this.Dispose : unit -&gt; unit" Usage="fileSystemWatcher.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="fileSystemWatcher.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="202f4-260">
            <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-260">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="202f4-261">Releases the unmanaged resources used by the <see cref="T:System.IO.FileSystemWatcher" /> and optionally releases the managed resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-261">Releases the unmanaged resources used by the <see cref="T:System.IO.FileSystemWatcher" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-262">调用此方法由公共<xref:System.ComponentModel.Component.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="202f4-262">This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="202f4-263"><xref:System.ComponentModel.Component.Dispose%2A> 调用受保护<xref:System.IO.FileSystemWatcher.Dispose%2A>方法替换`disposing`参数设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="202f4-263"><xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.FileSystemWatcher.Dispose%2A> method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="202f4-264"><xref:System.Object.Finalize%2A> 调用<xref:System.IO.FileSystemWatcher.Dispose%2A>与`disposing`设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="202f4-264"><xref:System.Object.Finalize%2A> invokes <xref:System.IO.FileSystemWatcher.Dispose%2A> with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="202f4-265">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.IO.Compression.DeflateStream> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="202f4-265">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.Compression.DeflateStream> references.</span></span> <span data-ttu-id="202f4-266">此方法调用每个引用对象的 <xref:System.ComponentModel.Component.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="202f4-266">This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="202f4-267">
            <para>
              <see cref="M:System.ComponentModel.Component.Dispose" /> 可以多次调用由其他对象。重写时<see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />小心不要引用已经释放的早期调用中的对象<see cref="M:System.ComponentModel.Component.Dispose" />。详细了解如何实现<see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />，请参阅 [实现 Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)。有关详细信息<see cref="M:System.ComponentModel.Component.Dispose" />和<see cref="M:System.Object.Finalize" />，请参阅 [清理了非托管 Resources](~/docs/standard/garbage-collection/unmanaged.md)。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-267">
              <para>
                <see cref="M:System.ComponentModel.Component.Dispose" /> can be called multiple times by other objects. When overriding <see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see cref="M:System.ComponentModel.Component.Dispose" />. For more information about how to implement <see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  For more information about <see cref="M:System.ComponentModel.Component.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EnableRaisingEvents">
      <MemberSignature Language="C#" Value="public bool EnableRaisingEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableRaisingEvents" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.EnableRaisingEvents" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableRaisingEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableRaisingEvents { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableRaisingEvents : bool with get, set" Usage="System.IO.FileSystemWatcher.EnableRaisingEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("Flag to indicate if this instance is active")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-268">Gets or sets a value indicating whether the component is enabled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-268">Gets or sets a value indicating whether the component is enabled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="202f4-269">如果启用此组件，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-269">
              <see langword="true" /> if the component is enabled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="202f4-270">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-270">The default is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="202f4-271">如果您使用该组件中的设计器上 [！INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]，默认值是<see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-271">If you are using the component on a designer in [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], the default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-272">除非设置，该组件不会引发事件<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>到`true`。</span><span class="sxs-lookup"><span data-stu-id="202f4-272">The component will not raise events unless you set <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="202f4-273">该组件将不监视指定的目录，直到<xref:System.IO.FileSystemWatcher.Path%2A>已设置属性和<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="202f4-273">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> property has been set and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
 <span data-ttu-id="202f4-274"><xref:System.IO.FileSystemWatcher.WaitForChanged%2A>方法允许事件处理程序调用以响应的文件更改，即使此属性设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="202f4-274">The <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method allows event handlers to be invoked to respond to file changes even if this property is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="202f4-275">下面的示例创建<xref:System.IO.FileSystemWatcher>监视在运行时指定的目录。</span><span class="sxs-lookup"><span data-stu-id="202f4-275">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="202f4-276">该组件设置为监视中的更改`LastWrite`和`LastAccess`时间、 创建、 删除、 或重命名的目录中的文本文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-276">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="202f4-277">如果文件是更改、 创建，或删除，文件的路径将打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="202f4-277">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="202f4-278">在一个文件重命名后，旧的和新路径将打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="202f4-278">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 <span data-ttu-id="202f4-279">使用<xref:System.Diagnostics>和<xref:System.IO>对于此示例的命名空间。</span><span class="sxs-lookup"><span data-stu-id="202f4-279">Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="202f4-280">The <see cref="T:System.IO.FileSystemWatcher" /> object has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-280">The <see cref="T:System.IO.FileSystemWatcher" /> object has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="202f4-281">The current operating system is not Microsoft Windows NT or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-281">The current operating system is not Microsoft Windows NT or later.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="202f4-282">The directory specified in <see cref="P:System.IO.FileSystemWatcher.Path" /> could not be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-282">The directory specified in <see cref="P:System.IO.FileSystemWatcher.Path" /> could not be found.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="202f4-283">
            <see cref="P:System.IO.FileSystemWatcher.Path" /> has not been set or is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-283">
              <see cref="P:System.IO.FileSystemWatcher.Path" /> has not been set or is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="fileSystemWatcher.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="202f4-284">Ends the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-284">Ends the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component.</span>
          </span>
          <span data-ttu-id="202f4-285">The initialization occurs at run time.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-285">The initialization occurs at run time.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-286">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]设计环境使用此方法来结束对组件的初始化在窗体上使用或由另一个组件使用。</span><span class="sxs-lookup"><span data-stu-id="202f4-286">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component used on a form or used by another component.</span></span> <span data-ttu-id="202f4-287"><xref:System.IO.FileSystemWatcher.BeginInit%2A>方法开始初始化。</span><span class="sxs-lookup"><span data-stu-id="202f4-287">The <xref:System.IO.FileSystemWatcher.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="202f4-288">使用<xref:System.IO.FileSystemWatcher.BeginInit%2A>和<xref:System.IO.FileSystemWatcher.EndInit%2A>方法可以防止该控件完全初始化之前使用。</span><span class="sxs-lookup"><span data-stu-id="202f4-288">Using the <xref:System.IO.FileSystemWatcher.BeginInit%2A> and <xref:System.IO.FileSystemWatcher.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.BeginInit" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.IO.ErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.ErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As ErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::ErrorEventHandler ^ Error;" />
      <MemberSignature Language="F#" Value="member this.Error : System.IO.ErrorEventHandler " Usage="member this.Error : System.IO.ErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.ErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-289">Occurs when the instance of <see cref="T:System.IO.FileSystemWatcher" /> is unable to continue monitoring changes or when the internal buffer overflows.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-289">Occurs when the instance of <see cref="T:System.IO.FileSystemWatcher" /> is unable to continue monitoring changes or when the internal buffer overflows.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-290">某些内容阻止时将引发此事件<xref:System.IO.FileSystemWatcher>从监视更改的对象。</span><span class="sxs-lookup"><span data-stu-id="202f4-290">This event is raised whenever something prevents the <xref:System.IO.FileSystemWatcher> object from monitoring changes.</span></span> <span data-ttu-id="202f4-291">例如，如果对象正在监视远程目录中的更改和与该目录的连接已丢失，<xref:System.IO.FileSystemWatcher.Error>引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-291">For example, if the object is monitoring changes in a remote directory and the connection to that directory is lost, the <xref:System.IO.FileSystemWatcher.Error> event is raised.</span></span>  
  
 <span data-ttu-id="202f4-292">系统会通知您文件发生更改，并将这些更改存储的缓冲区中，在组件创建并传递给 Api。</span><span class="sxs-lookup"><span data-stu-id="202f4-292">The system notifies you of file changes, and it stores those changes in a buffer that the component creates and passes to the APIs.</span></span> <span data-ttu-id="202f4-293">如果在短时间有很多更改，则缓冲区可能溢出。</span><span class="sxs-lookup"><span data-stu-id="202f4-293">If there are many changes in a short time, the buffer can overflow.</span></span> <span data-ttu-id="202f4-294">这会导致组件无法在目录中，更改跟踪并且它将只提供一般性通知。</span><span class="sxs-lookup"><span data-stu-id="202f4-294">This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</span></span> <span data-ttu-id="202f4-295">增加缓冲区的大小较大，因为它来自非分页内存无法换出到磁盘，因此保持缓冲区尽可能小。</span><span class="sxs-lookup"><span data-stu-id="202f4-295">Increasing the size of the buffer is expensive, because it comes from non paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</span></span> <span data-ttu-id="202f4-296">若要避免缓冲区溢出，请使用<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>， <xref:System.IO.FileSystemWatcher.Filter%2A>，和<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>属性筛选掉不需要的更改通知。</span><span class="sxs-lookup"><span data-stu-id="202f4-296">To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.Filter%2A>, and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties to filter out unwanted change notifications.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="202f4-297">常见的文件系统操作可能会引发多个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-297">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="202f4-298">例如，当文件从一个目录移到另一个、 多个<xref:System.IO.FileSystemWatcher.OnChanged%2A>和某些<xref:System.IO.FileSystemWatcher.OnCreated%2A>和<xref:System.IO.FileSystemWatcher.OnDeleted%2A>可能引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-298">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="202f4-299">移动文件由多个简单操作组成的复杂操作，因此会引发多个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-299">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="202f4-300">同样，某些应用程序 （例如，防病毒软件） 可能会导致检测到的其他文件系统事件<xref:System.IO.FileSystemWatcher>。</span><span class="sxs-lookup"><span data-stu-id="202f4-300">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.ErrorEventArgs" />
        <altmember cref="T:System.IO.ErrorEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter : string with get, set" Usage="System.IO.FileSystemWatcher.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("*.*")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("File name filter pattern")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-301">Gets or sets the filter string used to determine what files are monitored in a directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-301">Gets or sets the filter string used to determine what files are monitored in a directory.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="202f4-302">筛选器字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-302">The filter string.</span>
          </span>
          <span data-ttu-id="202f4-303">默认值为"*。\*"（监视所有文件。）</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-303">The default is "*.\*" (Watches all files.)</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-304">若要监视的所有文件中的更改，将设置<xref:System.IO.FileSystemWatcher.Filter%2A>属性为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="202f4-304">To watch changes in all files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to an empty string ("").</span></span> <span data-ttu-id="202f4-305">若要监视特定文件，请设置<xref:System.IO.FileSystemWatcher.Filter%2A>属性设置为的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="202f4-305">To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.</span></span> <span data-ttu-id="202f4-306">例如，若要监视的文件 MyDoc.txt 中的更改，请设置<xref:System.IO.FileSystemWatcher.Filter%2A>属性设置为"MyDoc.txt"。</span><span class="sxs-lookup"><span data-stu-id="202f4-306">For example, to watch for changes in the file MyDoc.txt, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "MyDoc.txt".</span></span> <span data-ttu-id="202f4-307">此外可以监视特定类型的文件中的更改。</span><span class="sxs-lookup"><span data-stu-id="202f4-307">You can also watch for changes in a certain type of file.</span></span> <span data-ttu-id="202f4-308">例如，若要监视的任何文本文件中的更改，请设置<xref:System.IO.FileSystemWatcher.Filter%2A>属性设置为"\*.txt"。</span><span class="sxs-lookup"><span data-stu-id="202f4-308">For example, to watch for changes in any text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "\*.txt".</span></span> <span data-ttu-id="202f4-309">使用多个筛选器，如"\*.txt&#124;\*.doc"不受支持。</span><span class="sxs-lookup"><span data-stu-id="202f4-309">Use of multiple filters such as "\*.txt&#124;\*.doc" is not supported.</span></span>  
  
 <span data-ttu-id="202f4-310"><xref:System.IO.FileSystemWatcher.Filter%2A>后，可以更改属性<xref:System.IO.FileSystemWatcher>对象已开始接收事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-310">The <xref:System.IO.FileSystemWatcher.Filter%2A> property can be changed after the <xref:System.IO.FileSystemWatcher> object has started receiving events.</span></span>  
  
 <span data-ttu-id="202f4-311">有关筛选掉不需要的通知的详细信息，请参阅<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>， <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>，和<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="202f4-311">For more information about filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.</span></span>  
  
 <span data-ttu-id="202f4-312"><xref:System.IO.FileSystemWatcher.Filter%2A> 接受通配符来匹配文件，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="202f4-312"><xref:System.IO.FileSystemWatcher.Filter%2A> accepts wildcards for matching files, as shown in the following examples.</span></span>  
  
|<span data-ttu-id="202f4-313">筛选器字符串</span><span class="sxs-lookup"><span data-stu-id="202f4-313">Filter string</span></span>|<span data-ttu-id="202f4-314">监视以下文件</span><span class="sxs-lookup"><span data-stu-id="202f4-314">Watches the following files</span></span>|  
|-------------------|---------------------------------|  
|<span data-ttu-id="202f4-315">*.\*</span><span class="sxs-lookup"><span data-stu-id="202f4-315">*.\*</span></span>|<span data-ttu-id="202f4-316">所有文件 （默认值）。</span><span class="sxs-lookup"><span data-stu-id="202f4-316">All files (default).</span></span> <span data-ttu-id="202f4-317">空字符串 ("") 还会监视所有文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-317">An empty string ("") also watches all files.</span></span>|  
|<span data-ttu-id="202f4-318">\*.txt</span><span class="sxs-lookup"><span data-stu-id="202f4-318">\*.txt</span></span>|<span data-ttu-id="202f4-319">使用"txt"扩展的所有文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-319">All files with a "txt" extension.</span></span>|  
|<span data-ttu-id="202f4-320">\*recipe.doc</span><span class="sxs-lookup"><span data-stu-id="202f4-320">\*recipe.doc</span></span>|<span data-ttu-id="202f4-321">"Recipe"扩展名"doc"结尾的所有文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-321">All files ending in "recipe" with a "doc" extension.</span></span>|  
|<span data-ttu-id="202f4-322">win\*.xml</span><span class="sxs-lookup"><span data-stu-id="202f4-322">win\*.xml</span></span>|<span data-ttu-id="202f4-323">"Xml"扩展与"win"开头的所有文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-323">All files beginning with "win" with an "xml" extension.</span></span>|  
|<span data-ttu-id="202f4-324">Sales \* 200？。xls</span><span class="sxs-lookup"><span data-stu-id="202f4-324">Sales\*200?.xls</span></span>|<span data-ttu-id="202f4-325">匹配以下项：</span><span class="sxs-lookup"><span data-stu-id="202f4-325">Matches the following:</span></span><br /><br /> <span data-ttu-id="202f4-326">销售年 7 月 2001.xlsSales 年 8 月 2002.xlsSales 年 3 月 2004.xls</span><span class="sxs-lookup"><span data-stu-id="202f4-326">Sales July 2001.xlsSales Aug 2002.xlsSales March 2004.xls</span></span><br /><br /> <span data-ttu-id="202f4-327">但不匹配：</span><span class="sxs-lookup"><span data-stu-id="202f4-327">but does not match:</span></span><br /><br /> <span data-ttu-id="202f4-328">销售年 11 月 1999.xls</span><span class="sxs-lookup"><span data-stu-id="202f4-328">Sales Nov 1999.xls</span></span>|  
|<span data-ttu-id="202f4-329">MyReport.Doc</span><span class="sxs-lookup"><span data-stu-id="202f4-329">MyReport.Doc</span></span>|<span data-ttu-id="202f4-330">监视仅 MyReport.doc</span><span class="sxs-lookup"><span data-stu-id="202f4-330">Watches only MyReport.doc</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="202f4-331">下面的示例创建<xref:System.IO.FileSystemWatcher>监视在运行时指定的目录。</span><span class="sxs-lookup"><span data-stu-id="202f4-331">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="202f4-332">该组件设置为监视中的更改`LastWrite`和`LastAccess`时间、 创建、 删除、 或重命名的目录中的文本文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-332">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="202f4-333">如果文件是更改、 创建，或删除，文件的路径将打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="202f4-333">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="202f4-334">在一个文件重命名后，旧的和新路径将打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="202f4-334">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 <span data-ttu-id="202f4-335">使用<xref:System.Diagnostics>和<xref:System.IO>对于此示例的命名空间。</span><span class="sxs-lookup"><span data-stu-id="202f4-335">Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~FileSystemWatcher ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!FileSystemWatcher ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="fileSystemWatcher.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeSubdirectories">
      <MemberSignature Language="C#" Value="public bool IncludeSubdirectories { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeSubdirectories" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeSubdirectories As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeSubdirectories { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeSubdirectories : bool with get, set" Usage="System.IO.FileSystemWatcher.IncludeSubdirectories" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("Flag to indicate we want to watch subdirectories")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-336">Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-336">Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="202f4-337">如果要监视子目录，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-337">
              <see langword="true" /> if you want to monitor subdirectories; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="202f4-338">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-338">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-339">设置<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>到`true`当你想要监视的文件和目录中通过指定的目录包含的更改通知<xref:System.IO.FileSystemWatcher.Path%2A>属性和及其子目录。</span><span class="sxs-lookup"><span data-stu-id="202f4-339">Set <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> to `true` when you want to watch for change notifications for files and directories contained within the directory specified through the <xref:System.IO.FileSystemWatcher.Path%2A> property, and its subdirectories.</span></span> <span data-ttu-id="202f4-340">设置<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>属性设置为`false`有助于减少发送到内部缓冲区的通知数。</span><span class="sxs-lookup"><span data-stu-id="202f4-340">Setting the <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> property to `false` helps reduce the number of notifications sent to the internal buffer.</span></span> <span data-ttu-id="202f4-341">筛选掉不需要的通知的详细信息，请参阅<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>和<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="202f4-341">For more information on filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.</span></span>  
  
 <span data-ttu-id="202f4-342">当`true`，<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>通过整个子树，而不仅仅是直接子目录进行递归。</span><span class="sxs-lookup"><span data-stu-id="202f4-342">When `true`, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> is recursive through the entire sub tree, not just the immediate child directories.</span></span> <span data-ttu-id="202f4-343">文件或子树内的目录的相对路径返回中<xref:System.IO.FileSystemEventArgs.Name%2A>的属性<xref:System.IO.FileSystemEventArgs>并<xref:System.IO.RenamedEventArgs.OldName%2A>属性的<xref:System.IO.RenamedEventArgs>，取决于正在监视的更改。</span><span class="sxs-lookup"><span data-stu-id="202f4-343">The relative path to a file or directory within the sub tree returns in the <xref:System.IO.FileSystemEventArgs.Name%2A> property of <xref:System.IO.FileSystemEventArgs> and the <xref:System.IO.RenamedEventArgs.OldName%2A> property of <xref:System.IO.RenamedEventArgs>, depending on changes you are watching for.</span></span> <span data-ttu-id="202f4-344">可以获取从的完全限定的路径<xref:System.IO.FileSystemEventArgs.FullPath%2A>的属性<xref:System.IO.FileSystemEventArgs>并<xref:System.IO.RenamedEventArgs.OldFullPath%2A>属性<xref:System.IO.RenamedEventArgs>，取决于正在监视的更改。</span><span class="sxs-lookup"><span data-stu-id="202f4-344">You can get the fully qualified path from the <xref:System.IO.FileSystemEventArgs.FullPath%2A> property of <xref:System.IO.FileSystemEventArgs> and the <xref:System.IO.RenamedEventArgs.OldFullPath%2A> property of <xref:System.IO.RenamedEventArgs>, depending on the changes you are watching for.</span></span>  
  
 <span data-ttu-id="202f4-345">如果您正在监视的目录的子树中创建一个目录并<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>是`true`，该目录将自动进行监视。</span><span class="sxs-lookup"><span data-stu-id="202f4-345">If a directory is created in the sub tree of the directory you are watching, and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> is `true`, that directory will automatically be watched.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemEventArgs.FullPath" />
        <altmember cref="P:System.IO.RenamedEventArgs.OldFullPath" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
        <altmember cref="P:System.IO.FileSystemEventArgs.Name" />
        <altmember cref="P:System.IO.RenamedEventArgs.OldName" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="InternalBufferSize">
      <MemberSignature Language="C#" Value="public int InternalBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InternalBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property InternalBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int InternalBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.InternalBufferSize : int with get, set" Usage="System.IO.FileSystemWatcher.InternalBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(8192)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-346">Gets or sets the size (in bytes) of the internal buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-346">Gets or sets the size (in bytes) of the internal buffer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="202f4-347">内部缓冲区的大小（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-347">The internal buffer size in bytes.</span>
          </span>
          <span data-ttu-id="202f4-348">默认值为 8192 (8 KB)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-348">The default is 8192 (8 KB).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-349">您可以设置缓冲区，为 4 KB 或更大，但它不能超过 64 KB。</span><span class="sxs-lookup"><span data-stu-id="202f4-349">You can set the buffer to 4 KB or larger, but it must not exceed 64 KB.</span></span> <span data-ttu-id="202f4-350">如果您尝试设置<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>属性为小于 4096 个字节，你的值将被丢弃和<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>属性设置为 4096 个字节。</span><span class="sxs-lookup"><span data-stu-id="202f4-350">If you try to set the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property to less than 4096 bytes, your value is discarded and the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property is set to 4096 bytes.</span></span> <span data-ttu-id="202f4-351">为了获得最佳性能，在基于 Intel 的计算机上使用 4 KB 的倍数。</span><span class="sxs-lookup"><span data-stu-id="202f4-351">For best performance, use a multiple of 4 KB on Intel-based computers.</span></span>  
  
 <span data-ttu-id="202f4-352">系统会通知文件更改的组件并将这些更改存储该组件创建并传递给 Api 的缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="202f4-352">The system notifies the component of file changes, and it stores those changes in a buffer the component creates and passes to the APIs.</span></span> <span data-ttu-id="202f4-353">每个事件可以使用最多 16 个字节的内存中，不包括的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="202f4-353">Each event can use up to 16 bytes of memory, not including the file name.</span></span> <span data-ttu-id="202f4-354">如果在短时间有很多更改，则缓冲区可能溢出。</span><span class="sxs-lookup"><span data-stu-id="202f4-354">If there are many changes in a short time, the buffer can overflow.</span></span> <span data-ttu-id="202f4-355">这会导致组件无法在目录中，更改跟踪并且它将只提供一般性通知。</span><span class="sxs-lookup"><span data-stu-id="202f4-355">This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</span></span> <span data-ttu-id="202f4-356">增加缓冲区的大小可以防止丢失文件系统更改事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-356">Increasing the size of the buffer can prevent missing file system change events.</span></span> <span data-ttu-id="202f4-357">但是，增加缓冲区大小很高的因为它来自无法换出到磁盘中，因此保持缓冲区尽可能小的非分页内存。</span><span class="sxs-lookup"><span data-stu-id="202f4-357">However, increasing buffer size is expensive, because it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</span></span> <span data-ttu-id="202f4-358">若要避免缓冲区溢出，请使用<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>和<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>属性筛选掉不需要的更改通知。</span><span class="sxs-lookup"><span data-stu-id="202f4-358">To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties to filter out unwanted change notifications.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
      </Docs>
    </Member>
    <Member MemberName="NotifyFilter">
      <MemberSignature Language="C#" Value="public System.IO.NotifyFilters NotifyFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.NotifyFilters NotifyFilter" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.NotifyFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyFilter As NotifyFilters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::NotifyFilters NotifyFilter { System::IO::NotifyFilters get(); void set(System::IO::NotifyFilters value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyFilter : System.IO.NotifyFilters with get, set" Usage="System.IO.FileSystemWatcher.NotifyFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("Flag to indicate which change event we want to monitor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.NotifyFilters</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-359">Gets or sets the type of changes to watch for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-359">Gets or sets the type of changes to watch for.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="202f4-360">
            <see cref="T:System.IO.NotifyFilters" /> 值之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-360">One of the <see cref="T:System.IO.NotifyFilters" /> values.</span>
          </span>
          <span data-ttu-id="202f4-361">默认值为 <see langword="LastWrite" />、<see langword="FileName" /> 和 <see langword="DirectoryName" /> 的按位“或”组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-361">The default is the bitwise OR combination of <see langword="LastWrite" />, <see langword="FileName" />, and <see langword="DirectoryName" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-362">你可以组合的成员<xref:System.IO.NotifyFilters>枚举要监视的多个类型一次更改。</span><span class="sxs-lookup"><span data-stu-id="202f4-362">You can combine the members of the <xref:System.IO.NotifyFilters> enumeration to watch for more than one type of change at a time.</span></span> <span data-ttu-id="202f4-363">例如，可以监视的更改的文件的大小和中的更改`LastWrite`时间。</span><span class="sxs-lookup"><span data-stu-id="202f4-363">For example, you can watch for changes in size of a file, and for changes in the `LastWrite` time.</span></span> <span data-ttu-id="202f4-364">这引发一个事件，每当文件或文件夹大小的更改或中的更改`LastWrite`文件或文件夹的时间。</span><span class="sxs-lookup"><span data-stu-id="202f4-364">This raises an event anytime there is a change in file or folder size, or a change in the `LastWrite` time of the file or folder.</span></span>  
  
 <span data-ttu-id="202f4-365">这是筛选掉不需要通知的一种方法。</span><span class="sxs-lookup"><span data-stu-id="202f4-365">This is one way to filter out unwanted notifications.</span></span> <span data-ttu-id="202f4-366">筛选掉不需要的通知的详细信息，请参阅<xref:System.IO.FileSystemWatcher.Filter%2A>， <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>，和<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="202f4-366">For more information on filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.Filter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="202f4-367">下面的示例创建<xref:System.IO.FileSystemWatcher>监视在运行时指定的目录。</span><span class="sxs-lookup"><span data-stu-id="202f4-367">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="202f4-368">该组件设置为监视中的更改`LastWrite`和`LastAccess`时间、 创建、 删除、 或重命名的目录中的文本文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-368">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="202f4-369">如果文件是更改、 创建，或删除，文件的路径将打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="202f4-369">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="202f4-370">在一个文件重命名后，旧的和新路径将打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="202f4-370">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 <span data-ttu-id="202f4-371">使用<xref:System.Diagnostics>和<xref:System.IO>对于此示例的命名空间。</span><span class="sxs-lookup"><span data-stu-id="202f4-371">Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="202f4-372">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-372">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters" /> values.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="202f4-373">The value that is being set is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-373">The value that is being set is not valid.</span>
          </span>
        </exception>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::IO::FileSystemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : System.IO.FileSystemEventArgs -&gt; unit" Usage="fileSystemWatcher.OnChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="202f4-374">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-374">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="202f4-375">Raises the <see cref="E:System.IO.FileSystemWatcher.Changed" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-375">Raises the <see cref="E:System.IO.FileSystemWatcher.Changed" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-376"><xref:System.IO.FileSystemWatcher.OnChanged%2A> 对大小、 系统属性、 上次写入时间、 上次访问时间或安全权限的文件或目录在所监视的目录中进行更改时调用。</span><span class="sxs-lookup"><span data-stu-id="202f4-376"><xref:System.IO.FileSystemWatcher.OnChanged%2A> is called when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</span></span>  
  
 <span data-ttu-id="202f4-377">使用<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>属性来限制事件数目时引发<xref:System.IO.FileSystemWatcher.Changed>处理事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-377">Use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to restrict the number of events raised when the <xref:System.IO.FileSystemWatcher.Changed> event is handled.</span></span>  
  
 <span data-ttu-id="202f4-378"><xref:System.IO.FileSystemWatcher.OnCreated%2A>文件创建时立即引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-378">The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created.</span></span> <span data-ttu-id="202f4-379">是否有文件被复制或传输到受监视的目录，<xref:System.IO.FileSystemWatcher.OnCreated%2A>事件会立即发生后, 跟一个或多个<xref:System.IO.FileSystemWatcher.OnChanged%2A>事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-379">If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.</span></span>  
  
 <span data-ttu-id="202f4-380">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="202f4-380">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="202f4-381">有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="202f4-381">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="202f4-382">
            <para>重写时<see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />方法。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-382">
              <para>When overriding <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Changed" />
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnCreated">
      <MemberSignature Language="C#" Value="protected void OnCreated (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnCreated(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnCreated (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnCreated(System::IO::FileSystemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnCreated : System.IO.FileSystemEventArgs -&gt; unit" Usage="fileSystemWatcher.OnCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="202f4-383">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-383">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="202f4-384">Raises the <see cref="E:System.IO.FileSystemWatcher.Created" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-384">Raises the <see cref="E:System.IO.FileSystemWatcher.Created" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-385"><xref:System.IO.FileSystemWatcher.OnCreated%2A> 所监视的目录中创建文件或目录时调用。</span><span class="sxs-lookup"><span data-stu-id="202f4-385"><xref:System.IO.FileSystemWatcher.OnCreated%2A> is called when a file or directory is created in the directory being monitored.</span></span>  
  
 <span data-ttu-id="202f4-386">一些常见的事件，如复制和移动文件或目录，并直接对应一个事件，但这些事件执行操作会导致要在引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-386">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="202f4-387">复制文件或目录时，系统会引发<xref:System.IO.FileSystemWatcher.Created>文件被复制到，如果该目录正在受监视的目录中的事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-387">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="202f4-388">如果正在监视从其复制的目录的另一实例<xref:System.IO.FileSystemWatcher>，会引发任何事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-388">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="202f4-389">例如，创建的两个实例<xref:System.IO.FileSystemWatcher>。</span><span class="sxs-lookup"><span data-stu-id="202f4-389">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="202f4-390">FileSystemWatcher1 设置为监视"C:\My Documents"，并设置 FileSystemWatcher2 观看"C:\Your 文档"。</span><span class="sxs-lookup"><span data-stu-id="202f4-390">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="202f4-391">如果您从"我的文档"复制文件并将其粘贴到"您的文档"，<xref:System.IO.FileSystemWatcher.Created>中 FileSystemWatcher2，将引发事件，但对于 FileSystemWatcher1 不引发任何事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-391">If you copy a file from "My Documents" and paste it into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="202f4-392">与复制不同，移动文件或目录将引发两个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-392">Unlike copying, moving a file or directory raises two events.</span></span> <span data-ttu-id="202f4-393">上述示例中，如果"我的文档"从文件移至"您的文档"，从<xref:System.IO.FileSystemWatcher.Created>FileSystemWatcher2 中会引发事件和一个<xref:System.IO.FileSystemWatcher.Deleted>FileSystemWatcher1 中会引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-393">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised in FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised in FileSystemWatcher1.</span></span>  
  
 <span data-ttu-id="202f4-394"><xref:System.IO.FileSystemWatcher.OnCreated%2A>文件创建时立即引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-394">The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created.</span></span> <span data-ttu-id="202f4-395">是否有文件被复制或传输到受监视的目录，<xref:System.IO.FileSystemWatcher.OnCreated%2A>事件会立即发生后, 跟一个或多个<xref:System.IO.FileSystemWatcher.OnChanged%2A>事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-395">If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.</span></span>  
  
 <span data-ttu-id="202f4-396">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="202f4-396">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="202f4-397">有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="202f4-397">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="202f4-398">
            <para>重写时<see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />方法。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-398">
              <para>When overriding <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnDeleted">
      <MemberSignature Language="C#" Value="protected void OnDeleted (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnDeleted(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnDeleted (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnDeleted(System::IO::FileSystemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnDeleted : System.IO.FileSystemEventArgs -&gt; unit" Usage="fileSystemWatcher.OnDeleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="202f4-399">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-399">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="202f4-400">Raises the <see cref="E:System.IO.FileSystemWatcher.Deleted" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-400">Raises the <see cref="E:System.IO.FileSystemWatcher.Deleted" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-401"><xref:System.IO.FileSystemWatcher.OnDeleted%2A> 删除文件或目录，在所监视的目录中时调用。</span><span class="sxs-lookup"><span data-stu-id="202f4-401"><xref:System.IO.FileSystemWatcher.OnDeleted%2A> is called when a file or directory, within the directory being monitored, is deleted.</span></span>  
  
 <span data-ttu-id="202f4-402">一些常见的事件，如复制和移动文件或目录，并直接对应一个事件，但这些事件执行操作会导致要在引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-402">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="202f4-403">复制文件或目录时，系统会引发<xref:System.IO.FileSystemWatcher.Created>文件被复制到，如果该目录正在受监视的目录中的事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-403">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="202f4-404">如果正在监视从其复制的目录的另一实例<xref:System.IO.FileSystemWatcher>，会引发任何事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-404">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="202f4-405">例如，创建的两个实例<xref:System.IO.FileSystemWatcher>。</span><span class="sxs-lookup"><span data-stu-id="202f4-405">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="202f4-406">FileSystemWatcher1 设置为监视"C:\My Documents"，并设置 FileSystemWatcher2 观看"C:\Your 文档"。</span><span class="sxs-lookup"><span data-stu-id="202f4-406">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="202f4-407">如果将文件从"我的文档"复制到"您的文档"， <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2，将引发事件，但对于 FileSystemWatcher1 不引发任何事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-407">If you copy a file from "My Documents" into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="202f4-408">与复制不同，移动文件或目录将引发两个事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-408">Unlike copying, moving a file or directory raises two events.</span></span> <span data-ttu-id="202f4-409">上述示例中，如果"我的文档"从文件移至"您的文档"，从<xref:System.IO.FileSystemWatcher.Created>FileSystemWatcher2 会引发事件和一个<xref:System.IO.FileSystemWatcher.Deleted>FileSystemWatcher1 会引发事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-409">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.</span></span>  
  
 <span data-ttu-id="202f4-410">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="202f4-410">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="202f4-411">有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="202f4-411">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="202f4-412">
            <para>重写时<see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />方法。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-412">
              <para>When overriding <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="protected void OnError (System.IO.ErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnError(class System.IO.ErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnError (e As ErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnError(System::IO::ErrorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnError : System.IO.ErrorEventArgs -&gt; unit" Usage="fileSystemWatcher.OnError e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.ErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="202f4-413">An <see cref="T:System.IO.ErrorEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-413">An <see cref="T:System.IO.ErrorEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="202f4-414">Raises the <see cref="E:System.IO.FileSystemWatcher.Error" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-414">Raises the <see cref="E:System.IO.FileSystemWatcher.Error" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-415"><xref:System.IO.FileSystemWatcher.OnError%2A> 发生错误时调用。</span><span class="sxs-lookup"><span data-stu-id="202f4-415"><xref:System.IO.FileSystemWatcher.OnError%2A> is called when an error occurs.</span></span>  
  
 <span data-ttu-id="202f4-416">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="202f4-416">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="202f4-417">有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="202f4-417">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="202f4-418">
            <para>重写时<see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />方法。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-418">
              <para>When overriding <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Error" />
        <altmember cref="T:System.IO.ErrorEventArgs" />
        <altmember cref="T:System.IO.ErrorEventHandler" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
      </Docs>
    </Member>
    <Member MemberName="OnRenamed">
      <MemberSignature Language="C#" Value="protected void OnRenamed (System.IO.RenamedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnRenamed(class System.IO.RenamedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnRenamed (e As RenamedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnRenamed(System::IO::RenamedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnRenamed : System.IO.RenamedEventArgs -&gt; unit" Usage="fileSystemWatcher.OnRenamed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.RenamedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="202f4-419">A <see cref="T:System.IO.RenamedEventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-419">A <see cref="T:System.IO.RenamedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="202f4-420">Raises the <see cref="E:System.IO.FileSystemWatcher.Renamed" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-420">Raises the <see cref="E:System.IO.FileSystemWatcher.Renamed" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-421"><xref:System.IO.FileSystemWatcher.OnRenamed%2A> 重命名文件或目录在所监视的目录中时调用。</span><span class="sxs-lookup"><span data-stu-id="202f4-421"><xref:System.IO.FileSystemWatcher.OnRenamed%2A> is called when a file or directory within the directory being monitored is renamed.</span></span> <span data-ttu-id="202f4-422">其<xref:System.IO.RenamedEventArgs>参数包含有关重命名操作，如更改、 旧的和新路径和旧的和新名称的类型的信息。</span><span class="sxs-lookup"><span data-stu-id="202f4-422">Its <xref:System.IO.RenamedEventArgs> argument contains information about the renaming operation, such as the type of change, the old and new path, and the old and new name.</span></span> <span data-ttu-id="202f4-423">请注意，其<xref:System.IO.FileSystemEventArgs.Name>属性可为 null 如果重命名事件<xref:System.IO.FileSystemWatcher>不会获得匹配来自操作系统的新旧名称事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-423">Note that its <xref:System.IO.FileSystemEventArgs.Name> property may be null for renamed events if the <xref:System.IO.FileSystemWatcher> does not get matching old and new name events from the operating system.</span></span> 
  
 <span data-ttu-id="202f4-424">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="202f4-424">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="202f4-425">有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="202f4-425">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="202f4-426">
            <para>重写时<see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />方法。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-426">
              <para>When overriding <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Renamed" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.IO.FileSystemWatcher.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Diagnostics.Design.FSWPathEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("The directory to monitor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-427">Gets or sets the path of the directory to watch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-427">Gets or sets the path of the directory to watch.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="202f4-428">要监视的路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-428">The path to monitor.</span>
          </span>
          <span data-ttu-id="202f4-429">默认值为空字符串("")。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-429">The default is an empty string ("").</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-430">这是一个目录的完全限定的路径。</span><span class="sxs-lookup"><span data-stu-id="202f4-430">This is a fully qualified path to a directory.</span></span> <span data-ttu-id="202f4-431">如果<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>属性是`true`，此目录为的根的系统监视的更改; 否则它为受监视的唯一目录。</span><span class="sxs-lookup"><span data-stu-id="202f4-431">If the <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> property is `true`, this directory is the root at which the system watches for changes; otherwise it is the only directory watched.</span></span> <span data-ttu-id="202f4-432">若要监视特定文件，请设置<xref:System.IO.FileSystemWatcher.Path%2A>属性设置为完全限定的正确目录中，和<xref:System.IO.FileSystemWatcher.Filter%2A>属性设置为的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="202f4-432">To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Path%2A> property to the fully qualified, correct directory, and the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.</span></span>  
  
 <span data-ttu-id="202f4-433"><xref:System.IO.FileSystemWatcher.Path%2A>属性支持通用命名约定 (UNC) 路径。</span><span class="sxs-lookup"><span data-stu-id="202f4-433">The <xref:System.IO.FileSystemWatcher.Path%2A> property supports Universal Naming Convention (UNC) paths.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="202f4-434">该组件可监视更改之前，必须设置此属性。</span><span class="sxs-lookup"><span data-stu-id="202f4-434">This property must be set before the component can watch for changes.</span></span>  
  
 <span data-ttu-id="202f4-435">如果重命名目录，，<xref:System.IO.FileSystemWatcher>自动重新自身附加到新的重命名项。</span><span class="sxs-lookup"><span data-stu-id="202f4-435">When a directory is renamed, the <xref:System.IO.FileSystemWatcher> automatically reattaches itself to the newly renamed item.</span></span> <span data-ttu-id="202f4-436">例如，如果您设置<xref:System.IO.FileSystemWatcher.Path%2A>属性设置为"C:\My Documents"，然后手动重命名为"C:\Your 文档"目录，该组件会继续侦听新的重命名目录上的更改通知。</span><span class="sxs-lookup"><span data-stu-id="202f4-436">For example, if you set the <xref:System.IO.FileSystemWatcher.Path%2A> property to "C:\My Documents" and then manually rename the directory to "C:\Your Documents", the component continues listening for change notifications on the newly renamed directory.</span></span> <span data-ttu-id="202f4-437">但是，当要求提供<xref:System.IO.FileSystemWatcher.Path%2A>属性，它包含旧路径。</span><span class="sxs-lookup"><span data-stu-id="202f4-437">However, when you ask for the <xref:System.IO.FileSystemWatcher.Path%2A> property, it contains the old path.</span></span> <span data-ttu-id="202f4-438">这是因为该组件确定所监视基于句柄，而不是目录的名称。</span><span class="sxs-lookup"><span data-stu-id="202f4-438">This happens because the component determines what directory watches based on the handle, rather than the name of the directory.</span></span> <span data-ttu-id="202f4-439">重命名并不影响该句柄。</span><span class="sxs-lookup"><span data-stu-id="202f4-439">Renaming does not affect the handle.</span></span> <span data-ttu-id="202f4-440">因此，如果销毁该组件，然后重新创建它而不更新<xref:System.IO.FileSystemWatcher.Path%2A>属性，你的应用程序将失败，因为该目录不再存在。</span><span class="sxs-lookup"><span data-stu-id="202f4-440">So, if you destroy the component, and then recreate it without updating the <xref:System.IO.FileSystemWatcher.Path%2A> property, your application will fail because the directory no longer exists.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="202f4-441">下面的示例创建<xref:System.IO.FileSystemWatcher>监视在运行时指定的目录。</span><span class="sxs-lookup"><span data-stu-id="202f4-441">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="202f4-442">该组件设置为监视中的更改`LastWrite`和`LastAccess`时间、 创建、 删除、 或重命名的目录中的文本文件。</span><span class="sxs-lookup"><span data-stu-id="202f4-442">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="202f4-443">如果文件是更改、 创建，或删除，文件的路径将打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="202f4-443">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="202f4-444">在一个文件重命名后，旧的和新路径将打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="202f4-444">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 <span data-ttu-id="202f4-445">使用<xref:System.Diagnostics>和<xref:System.IO>对于此示例的命名空间。</span><span class="sxs-lookup"><span data-stu-id="202f4-445">Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="202f4-446">The specified path does not exist or could not be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-446">The specified path does not exist or could not be found.</span>
          </span>
          <span data-ttu-id="202f4-447">-or-  The specified path contains wildcard characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-447">-or-  The specified path contains wildcard characters.</span>
          </span>
          <span data-ttu-id="202f4-448">-or-  The specified path contains invalid path characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-448">-or-  The specified path contains invalid path characters.</span>
          </span>
        </exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
      </Docs>
    </Member>
    <Member MemberName="Renamed">
      <MemberSignature Language="C#" Value="public event System.IO.RenamedEventHandler Renamed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.RenamedEventHandler Renamed" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Renamed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Renamed As RenamedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::RenamedEventHandler ^ Renamed;" />
      <MemberSignature Language="F#" Value="member this.Renamed : System.IO.RenamedEventHandler " Usage="member this.Renamed : System.IO.RenamedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.IO.IODescription("Occurs when a file/directory rename matches the filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.RenamedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-449">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is renamed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-449">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is renamed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-450">`Renamed`事件是<xref:System.IO.RenamedEventHandler>具有以下签名的委托：</span><span class="sxs-lookup"><span data-stu-id="202f4-450">The `Renamed` event is an <xref:System.IO.RenamedEventHandler> delegate that has the following signature:</span></span>

 ```csharp
public delegate void Renamed(object sender, RenamedEventArgs e);
 ```
 ```vb
Public Delegate Sub RenamedEventHandler(sender As Object, e As RenamedEventArgs)
 ```
 <span data-ttu-id="202f4-451"><xref:System.IO.RenamedEventArgs>对象提供有关重命名操作，例如重命名的类型信息 (<xref:System.IO.FileSystemEventArgs.ChangeType>属性)，旧的和新名称和旧的和新路径。</span><span class="sxs-lookup"><span data-stu-id="202f4-451">The <xref:System.IO.RenamedEventArgs> object provides information about the renaming operation, such as the type of the rename (the <xref:System.IO.FileSystemEventArgs.ChangeType> property), the old and new name, and the old and new path.</span></span> <span data-ttu-id="202f4-452">请注意，<xref:System.IO.FileSystemEventArgs.Name>属性可为 null 如果重命名事件<xref:System.IO.FileSystemWatcher>不会获得匹配来自操作系统的新旧名称事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-452">Note that the <xref:System.IO.FileSystemEventArgs.Name> property may be null for renamed events if the <xref:System.IO.FileSystemWatcher> does not get matching old and new name events from the operating system.</span></span>

 <span data-ttu-id="202f4-453">重命名正在监视的目录不会引发通知。</span><span class="sxs-lookup"><span data-stu-id="202f4-453">Renaming the directory you are watching will not raise a notification.</span></span> <span data-ttu-id="202f4-454">您正在监视的目录中的条目，才引发通知。</span><span class="sxs-lookup"><span data-stu-id="202f4-454">Notifications are only raised for entries inside the directory you are watching.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="202f4-455">下面的示例使用<xref:System.IO.FileSystemWatcher.Renamed>事件时对受监视的文件重命名的文件路径显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="202f4-455">The following example uses the <xref:System.IO.FileSystemWatcher.Renamed> event to display the file path to the console whenever the watched file is renamed.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.IO.FileSystemWatcher.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-456">Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-456">Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="202f4-457">
            <see cref="T:System.ComponentModel.ISite" /> 的一个 <see cref="T:System.IO.FileSystemWatcher" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-457">An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-458">站点绑定<xref:System.ComponentModel.Component>到<xref:System.ComponentModel.Design.IDesignerHost.Container%2A>启用它们之间的通信，以及为要管理其组件的容器提供的方法。</span><span class="sxs-lookup"><span data-stu-id="202f4-458">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Design.IDesignerHost.Container%2A> and enable communication between them, as well as provide a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.IO.FileSystemWatcher.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("The object used to marshal the event handler calls resulting from a directory change")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-459">Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-459">Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="202f4-460">
            <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，表示一个对象，该对象用于封送因目录更改而发出的事件处理程序调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-460">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> that represents the object used to marshal the event handler calls issued as a result of a directory change.</span>
          </span>
          <span data-ttu-id="202f4-461">默认值为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-461">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-462">当<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>是`null`，方法处理<xref:System.IO.FileSystemWatcher.Changed>， <xref:System.IO.FileSystemWatcher.Created>， <xref:System.IO.FileSystemWatcher.Deleted>，并<xref:System.IO.FileSystemWatcher.Renamed>从系统线程池线程上调用事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-462">When <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> is `null`, methods handling the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events are called on a thread from the system thread pool.</span></span> <span data-ttu-id="202f4-463">系统线程池的详细信息，请参阅<xref:System.Threading.ThreadPool>。</span><span class="sxs-lookup"><span data-stu-id="202f4-463">For more information on system thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="202f4-464">当<xref:System.IO.FileSystemWatcher.Changed>， <xref:System.IO.FileSystemWatcher.Created>， <xref:System.IO.FileSystemWatcher.Deleted>，和<xref:System.IO.FileSystemWatcher.Renamed>事件由 visual 的 Windows 窗体组件，如处理<xref:System.Windows.Forms.Button>，通过系统线程池访问组件可能无法工作，或可能会导致异常。</span><span class="sxs-lookup"><span data-stu-id="202f4-464">When the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events are handled by a visual Windows Forms component, such as a <xref:System.Windows.Forms.Button>, accessing the component through the system thread pool might not work, or may result in an exception.</span></span> <span data-ttu-id="202f4-465">通过设置来避免这<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>到 Windows 窗体组件时，这将导致处理的方法<xref:System.IO.FileSystemWatcher.Changed>， <xref:System.IO.FileSystemWatcher.Created>， <xref:System.IO.FileSystemWatcher.Deleted>，和<xref:System.IO.FileSystemWatcher.Renamed>要在其创建该组件在同一线程上调用事件。</span><span class="sxs-lookup"><span data-stu-id="202f4-465">Avoid this by setting <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> to a Windows Forms component, which causes the methods that handle the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events to be called on the same thread on which the component was created.</span></span>  
  
 <span data-ttu-id="202f4-466">如果<xref:System.IO.FileSystemWatcher>内部使用[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]在 Windows 窗体设计器中，<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>自动设置为包含的控件<xref:System.IO.FileSystemWatcher>。</span><span class="sxs-lookup"><span data-stu-id="202f4-466">If the <xref:System.IO.FileSystemWatcher> is used inside [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] in a Windows Forms designer, <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> automatically sets to the control that contains the <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="202f4-467">例如，如果将置于<xref:System.IO.FileSystemWatcher>Form1 的设计器上 (派生自<xref:System.Windows.Forms.Form>)<xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>属性的<xref:System.IO.FileSystemWatcher>设置为 Form1 的实例。</span><span class="sxs-lookup"><span data-stu-id="202f4-467">For example, if you place a <xref:System.IO.FileSystemWatcher> on a designer for Form1 (which inherits from <xref:System.Windows.Forms.Form>) the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property of <xref:System.IO.FileSystemWatcher> is set to the instance of Form1.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForChanged">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="202f4-468">A synchronous method that returns a structure that contains specific information on the change that occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-468">A synchronous method that returns a structure that contains specific information on the change that occurred.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForChanged">
      <MemberSignature Language="C#" Value="public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.IO.WaitForChangedResult WaitForChanged(valuetype System.IO.WatcherChangeTypes changeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForChanged (changeType As WatcherChangeTypes) As WaitForChangedResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::WaitForChangedResult WaitForChanged(System::IO::WatcherChangeTypes changeType);" />
      <MemberSignature Language="F#" Value="member this.WaitForChanged : System.IO.WatcherChangeTypes -&gt; System.IO.WaitForChangedResult" Usage="fileSystemWatcher.WaitForChanged changeType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.WaitForChangedResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeType" Type="System.IO.WatcherChangeTypes" />
      </Parameters>
      <Docs>
        <param name="changeType">
          <span data-ttu-id="202f4-469">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-469">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="202f4-470">A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-470">A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="202f4-471">A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-471">A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-472">此方法将等到无限期第一次更改发生，并返回。</span><span class="sxs-lookup"><span data-stu-id="202f4-472">This method waits indefinitely until the first change occurs and then returns.</span></span> <span data-ttu-id="202f4-473">这是使用相同<xref:System.IO.FileSystemWatcher.WaitForChanged%2A>与`timeout`参数设置为-1。</span><span class="sxs-lookup"><span data-stu-id="202f4-473">This is the same as using <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> with the `timeout` parameter set to -1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="202f4-474">此方法允许事件处理程序调用来响应文件的更改，即使<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>属性设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="202f4-474">This method allows an event handler to be invoked to respond to file changes even if the <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="202f4-475">在某些系统<xref:System.IO.FileSystemWatcher>报告使用短 8.3 文件名称格式的文件更改。</span><span class="sxs-lookup"><span data-stu-id="202f4-475">In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format.</span></span> <span data-ttu-id="202f4-476">例如，对"LongFileName.LongExtension"的更改可能被报告为"LongFi ~。Lon"。</span><span class="sxs-lookup"><span data-stu-id="202f4-476">For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.WaitForChangedResult" />
      </Docs>
    </Member>
    <Member MemberName="WaitForChanged">
      <MemberSignature Language="C#" Value="public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.IO.WaitForChangedResult WaitForChanged(valuetype System.IO.WatcherChangeTypes changeType, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForChanged (changeType As WatcherChangeTypes, timeout As Integer) As WaitForChangedResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::WaitForChangedResult WaitForChanged(System::IO::WatcherChangeTypes changeType, int timeout);" />
      <MemberSignature Language="F#" Value="member this.WaitForChanged : System.IO.WatcherChangeTypes * int -&gt; System.IO.WaitForChangedResult" Usage="fileSystemWatcher.WaitForChanged (changeType, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.WaitForChangedResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeType" Type="System.IO.WatcherChangeTypes" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="changeType">
          <span data-ttu-id="202f4-477">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-477">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="202f4-478">The time (in milliseconds) to wait before timing out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-478">The time (in milliseconds) to wait before timing out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="202f4-479">A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-479">A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="202f4-480">A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="202f4-480">A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="202f4-481">此方法等待，直到发生更改或已超时。值为-1 表示`timeout`参数表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="202f4-481">This method waits until a change occurs or it has timed out. A value of -1 for the `timeout` parameter means wait indefinitely.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="202f4-482">此方法允许事件处理程序调用来响应文件的更改，即使<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>属性设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="202f4-482">This method allows an event handler to be invoked to respond to file changes even if the <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="202f4-483">在某些系统<xref:System.IO.FileSystemWatcher>报告使用短 8.3 文件名称格式的文件更改。</span><span class="sxs-lookup"><span data-stu-id="202f4-483">In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format.</span></span> <span data-ttu-id="202f4-484">例如，对"LongFileName.LongExtension"的更改可能被报告为"LongFi ~。Lon"。</span><span class="sxs-lookup"><span data-stu-id="202f4-484">For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.WaitForChangedResult" />
      </Docs>
    </Member>
  </Members>
</Type>