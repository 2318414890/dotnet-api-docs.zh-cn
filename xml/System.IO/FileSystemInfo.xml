<Type Name="FileSystemInfo" FullName="System.IO.FileSystemInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6e983351fb3a33574ad750cdcb0c907561412719" />
    <Meta Name="ms.sourcegitcommit" Value="29c771f79cf4eac4f49e5fae5f1aa8b457acf146" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/21/2018" />
    <Meta Name="ms.locfileid" Value="36298825" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class FileSystemInfo : MarshalByRefObject, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit FileSystemInfo extends System.MarshalByRefObject implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.IO.FileSystemInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FileSystemInfo&#xA;Inherits MarshalByRefObject&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystemInfo abstract : MarshalByRefObject, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为 <see cref="T:System.IO.FileInfo" /> 和 <see cref="T:System.IO.DirectoryInfo" /> 对象提供基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.FileSystemInfo>类包含共有的文件和目录的操作的方法。 A<xref:System.IO.FileSystemInfo>对象可以表示一个文件或目录，因此充当的基础<xref:System.IO.FileInfo>或<xref:System.IO.DirectoryInfo>对象。 在分析大量的文件和目录时，请使用此基类的类。  
  
 派生的类可以继承<xref:System.IO.FileSystemInfo>仅当派生的类具有从 AllAccess 权限<xref:System.Security.Permissions.FileIOPermissionAccess>枚举。  
  
 在接受路径的成员，路径可以引用一个文件或仅是目录。 指定的路径也可以指相对路径或服务器和共享名称的通用命名约定 (UNC) 路径。 例如，以下所有条件都可接受的路径：  
  
-   "c:\\\MyDir\\\MyFile.txt"在 C# 或 Visual Basic 中的"c:\MyDir\MyFile.txt"。  
  
-   "c:\\\MyDir"在 C# 或 Visual Basic 中的"c:\MyDir"。  
  
-   "MyDir\\\MySubdir"在 C# 或 Visual Basic 中的"MyDir\MySubDir"。  
  
-   "\\\\\\\MyServer\\\MyShare"在 C# 中，或"\\\MyServer\MyShare"在 Visual Basic 中。  
  
 通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下面的示例演示如何循环访问所有文件和目录，查询有关每个条目的一些信息。  
  
 [!code-cpp[FileSystemInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/FileSystemInfo/cpp/program.cpp#1)]
 [!code-csharp[FileSystemInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/FileSystemInfo/CS/program.cs#1)]
 [!code-vb[FileSystemInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FileSystemInfo/VB/FileSystemInfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.FileIOPermission">若要从此类继承的权限。 关联的枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />安全操作： 继承要求</permission>
    <altmember cref="T:System.IO.FileSystemWatcher" />
    <altmember cref="T:System.IO.DriveInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IO.FileSystemInfo" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FileSystemInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; FileSystemInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.IO.FileSystemInfo" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FileSystemInfo (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; FileSystemInfo(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
        <summary>用序列化数据初始化 <see cref="T:System.IO.FileSystemInfo" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 为空。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.IO.FileAttributes Attributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Property Attributes As FileAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileAttributes Attributes { System::IO::FileAttributes get(); void set(System::IO::FileAttributes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前文件或目录的特性。</summary>
        <value>当前 <see cref="T:System.IO.FileAttributes" /> 的 <see cref="T:System.IO.FileSystemInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.IO.FileSystemInfo.Attributes%2A>属性会预先缓存，如果当前实例的<xref:System.IO.FileSystemInfo>从以下任一返回了对象<xref:System.IO.DirectoryInfo>方法：  
  
-   <xref:System.IO.DirectoryInfo.GetDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A?displayProperty=nameWithType>  
  
 值可能是缓存时的值本身或其他<xref:System.IO.FileSystemInfo>属性可以访问。 若要获取最新值，请调用<xref:System.IO.FileSystemInfo.Refresh%2A>方法。

 如果路径不存在自上次缓存状态起，则返回值是`(FileAttributes)(-1)`。 <xref:System.IO.FileNotFoundException> 或<xref:System.IO.DirectoryNotFoundException>可能仅在设置值时引发。
  
 此属性的值是 archive、 compressed、 目录、 隐藏、 脱机、 只读的系统和临时文件属性标志的组合。  
  
 当设置此值时，使用按位 OR 运算符 (`|`在 C# 或`Or`在 Visual Basic 中) 将多个值。 若要保留中的任何现有值<xref:System.IO.FileSystemInfo.Attributes%2A>属性，包括的值<xref:System.IO.FileSystemInfo.Attributes%2A>你分配中的属性。 例如:  
  
 `exampleFile.Attributes = exampleFile.Attributes | FileAttributes.ReadOnly;`  
  
   
  
## Examples  
 下面的示例演示<xref:System.IO.FileSystemInfo.Attributes%2A>属性。 此代码示例摘自更大的示例为提供<xref:System.IO.FileSystemInfo>类。  
  
 [!code-cpp[FileSystemInfo#2](~/samples/snippets/cpp/VS_Snippets_CLR/FileSystemInfo/cpp/program.cpp#2)]
 [!code-csharp[FileSystemInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/FileSystemInfo/CS/program.cs#2)]
 [!code-vb[FileSystemInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/FileSystemInfo/VB/FileSystemInfo.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定的文件不存在。 仅在设置属性值时引发。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定路径无效。 例如，它位于未映射的驱动器上。 仅在设置属性值时引发。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所需权限。</exception>
        <exception cref="T:System.ArgumentException">调用方试图设置无效的文件属性。  - 或 -  用户尝试设置属性值，但没有写入权限。</exception>
        <exception cref="T:System.IO.IOException">
          <see cref="M:System.IO.FileSystemInfo.Refresh" /> 不能初始化数据。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用于写入文件和目录。 关联的枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />安全操作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="CreationTime">
      <MemberSignature Language="C#" Value="public DateTime CreationTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime CreationTime" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemInfo.CreationTime" />
      <MemberSignature Language="VB.NET" Value="Public Property CreationTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime CreationTime { DateTime get(); void set(DateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前文件或目录的创建时间。</summary>
        <value>当前 <see cref="T:System.IO.FileSystemInfo" /> 对象的创建日期和时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!NOTE]
>  此方法可能返回了不准确值，因为它使用其值可能不会持续更新由操作系统的本机函数。  
    
 值<xref:System.IO.FileSystemInfo.CreationTime%2A>属性会预先缓存，如果当前实例的<xref:System.IO.FileSystemInfo>从以下任一返回了对象<xref:System.IO.DirectoryInfo>方法：  
  
-   <xref:System.IO.DirectoryInfo.GetDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A?displayProperty=nameWithType>  
  
 若要获取最新值，请调用<xref:System.IO.FileSystemInfo.Refresh%2A>方法。  
  
 如果该文件中所述<xref:System.IO.FileSystemInfo>对象不存在，则此属性返回第午夜 12:00 到公元 1601 年 1 月 1 日 (C.E.)为本地时间调整协调世界时 (UTC)。  

不支持创建或出生时间的 Unix 平台，将此属性返回了较旧的最后一个状态更改的时间和上次修改时间。 其他平台，它将返回第午夜 12:00 到公元 1601 年 1 月 1 日 (C.E.)为本地时间调整协调世界时 (UTC)。

 NTFS 格式化的驱动器可能缓存文件元信息，例如短时间内的文件创建时间。 此过程被称为文件隧道。 因此，可能有必要显式设置文件的创建时间，如果要覆盖或替换现有文件。  
  
## Examples  
 下面的示例演示<xref:System.IO.FileSystemInfo.CreationTime%2A>属性。 此代码示例摘自更大的示例为提供<xref:System.IO.FileSystemInfo>类。  
  
 [!code-cpp[FileSystemInfo#2](~/samples/snippets/cpp/VS_Snippets_CLR/FileSystemInfo/cpp/program.cpp#2)]
 [!code-csharp[FileSystemInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/FileSystemInfo/CS/program.cs#2)]
 [!code-vb[FileSystemInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/FileSystemInfo/VB/FileSystemInfo.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <see cref="M:System.IO.FileSystemInfo.Refresh" /> 不能初始化数据。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效：例如，它位于未映射的驱动器上。</exception>
        <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Windows NT 或更高版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">调用方试图设置无效的创建时间。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用于设置的创建时间。 关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="CreationTimeUtc">
      <MemberSignature Language="C#" Value="public DateTime CreationTimeUtc { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime CreationTimeUtc" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemInfo.CreationTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Property CreationTimeUtc As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime CreationTimeUtc { DateTime get(); void set(DateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前文件或目录的创建时间，其格式为协调世界时 (UTC)。</summary>
        <value>当前 <see cref="T:System.IO.FileSystemInfo" /> 对象的创建日期及时间（UTC 格式）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!NOTE]
>  此方法可能返回了不准确值，因为它使用其值可能不会持续更新由操作系统的本机函数。  
  
 值<xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>属性会预先缓存，如果当前实例的<xref:System.IO.FileSystemInfo>从以下任一返回了对象<xref:System.IO.DirectoryInfo>方法：  
  
-   <xref:System.IO.DirectoryInfo.GetDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A?displayProperty=nameWithType>  
  
 若要获取最新值，请调用<xref:System.IO.FileSystemInfo.Refresh%2A>方法。  
  
 如果该文件中所述<xref:System.IO.FileSystemInfo>对象不存在，则此属性返回第午夜 12:00 到公元 1601 年 1 月 1 日 (C.E.)协调世界时 (UTC)。  

不支持创建或出生时间的 Unix 平台，将此属性返回了较旧的最后一个状态更改的时间和上次修改时间。 其他平台，它将返回第午夜 12:00 到公元 1601 年 1 月 1 日 (C.E.)为本地时间调整协调世界时 (UTC)。

 NTFS 格式化的驱动器可能缓存文件元信息，例如短时间内的文件创建时间。 此过程被称为文件隧道。 因此，可能有必要显式设置文件的创建时间，如果要覆盖或替换现有文件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <see cref="M:System.IO.FileSystemInfo.Refresh" /> 不能初始化数据。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效：例如，它位于未映射的驱动器上。</exception>
        <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Windows NT 或更高版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">调用方试图设置无效的访问时间。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用于设置的创建时间。 关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public abstract void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemInfo.Delete" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Delete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Delete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除文件或目录。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效：例如，它位于未映射的驱动器上。</exception>
        <exception cref="T:System.IO.IOException">对于文件或目录有打开句柄，并且操作系统是 Windows XP 或更早版本。 枚举目录和文件可能会导致此开放句柄出现。 有关详细信息，请参阅 [如何：枚举目录和文件](~/docs/standard/io/how-to-enumerate-directories-and-files.md)。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public abstract bool Exists { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Exists" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemInfo.Exists" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Exists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool Exists { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指示文件或目录是否存在的值。</summary>
        <value>如果文件或目录存在，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="Extension">
      <MemberSignature Language="C#" Value="public string Extension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Extension" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemInfo.Extension" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extension As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Extension { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示文件扩展名部分的字符串。</summary>
        <value>包含 <see cref="T:System.IO.FileSystemInfo" /> 扩展名的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Extension`属性返回<xref:System.IO.FileSystemInfo>扩展，包括句点 （.）。 例如，对于文件 c:\NewFile.txt，此属性返回".txt"。  
  
 下表列出的其他典型或相关的 I/O 任务的示例。  
  
|若要执行此操作...|请参见本主题中的示例...|  
|-------------------|--------------------------------------|  
|创建文本文件。|[如何：向文件写入文本](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|写入文本文件。|[如何：向文件写入文本](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|从文本文件中读取。|[如何：从文件读取文本](~/docs/standard/io/how-to-read-text-from-a-file.md)|  
|检索文件的完全限定的路径。|<xref:System.IO.Path.GetFullPath%2A>|  
|只检索文件名路径。|<xref:System.IO.Path.GetFileNameWithoutExtension%2A>|  
|检索路径中的目录名。|<xref:System.IO.Path.GetDirectoryName%2A>|  
|更改文件扩展名。|<xref:System.IO.Path.ChangeExtension%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public virtual string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemInfo.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取目录或文件的完整目录。</summary>
        <value>包含完整目录的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例如，对于文件 c:\NewFile.txt，此属性返回"c:\NewFile.txt"。  
  
 通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。  
  
   
  
## Examples  
 下面的示例演示<xref:System.IO.FileSystemInfo.FullName%2A>属性。 此代码示例摘自更大的示例为提供<xref:System.IO.FileSystemInfo>类。  
  
 [!code-cpp[FileSystemInfo#2](~/samples/snippets/cpp/VS_Snippets_CLR/FileSystemInfo/cpp/program.cpp#2)]
 [!code-csharp[FileSystemInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/FileSystemInfo/CS/program.cs#2)]
 [!code-vb[FileSystemInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/FileSystemInfo/VB/FileSystemInfo.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.PathTooLongException">完全限定路径名称和文件名的长度超出系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用于访问路径。 关联的枚举： <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="FullPath">
      <MemberSignature Language="C#" Value="protected string FullPath;" />
      <MemberSignature Language="ILAsm" Value=".field family string FullPath" />
      <MemberSignature Language="DocId" Value="F:System.IO.FileSystemInfo.FullPath" />
      <MemberSignature Language="VB.NET" Value="Protected FullPath As String " />
      <MemberSignature Language="C++ CLI" Value="protected: System::String ^ FullPath;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示目录或文件的完全限定目录。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.PathTooLongException">完全限定路径的长度超出系统定义的最大长度。</exception>
        <block subset="none" type="overrides">
          <para>类派生自<see cref="T:System.IO.FileSystemInfo" />可以使用<see langword="FullPath" />字段，以确定操作的对象的完整路径。通用 I/O 任务的列表，请参阅 [常见 I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)。</para>
        </block>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
        <summary>设置带有文件名和附加异常信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要访问当前实例所描述的路径相关信息的权限。 关联的枚举：<see cref="T:System.Security.Permissions.FileIOPermissionAccess" />安全操作： 需</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要链接到此类的权限。 关联的枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />安全操作： 链接要求</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任直接调用方。 此成员不能由部分受信任或不透明的代码。</permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="LastAccessTime">
      <MemberSignature Language="C#" Value="public DateTime LastAccessTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LastAccessTime" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemInfo.LastAccessTime" />
      <MemberSignature Language="VB.NET" Value="Public Property LastAccessTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LastAccessTime { DateTime get(); void set(DateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置上次访问当前文件或目录的时间。</summary>
        <value>上次访问当前文件或目录的时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
> [!NOTE]
>  此方法可能返回了不准确值，因为它使用其值可能不会持续更新由操作系统的本机函数。  
 
 如果该文件中所述<xref:System.IO.FileSystemInfo>对象不存在，则此属性返回第午夜 12:00 到公元 1601 年 1 月 1 日 (C.E.)为本地时间调整协调世界时 (UTC)。  
  
 值<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>属性会预先缓存，如果当前实例的<xref:System.IO.FileSystemInfo>从以下任一返回了对象<xref:System.IO.DirectoryInfo>方法：  
  
-   <xref:System.IO.DirectoryInfo.GetDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A?displayProperty=nameWithType>  
  
 若要获取最新值，请调用<xref:System.IO.FileSystemInfo.Refresh%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示了的更新<xref:System.IO.FileSystemInfo.LastAccessTime%2A>通过"触摸"操作的属性。 在此示例中，该文件"接触"，更新<xref:System.IO.FileSystemInfo.CreationTime%2A>，<xref:System.IO.FileSystemInfo.LastAccessTime%2A>和<xref:System.IO.FileSystemInfo.LastWriteTime%2A>属性设置为当前日期和时间。  
  
 [!code-csharp[System.IO.FileSystemInfo_touch#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileSystemInfo_touch/cs/touch.cs#00)]
 [!code-vb[System.IO.FileSystemInfo_touch#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileSystemInfo_touch/vb/touch.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <see cref="M:System.IO.FileSystemInfo.Refresh" /> 不能初始化数据。</exception>
        <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Windows NT 或更高版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">调用方试图设置无效的访问时间</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用于设置上次访问时间。 关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="LastAccessTimeUtc">
      <MemberSignature Language="C#" Value="public DateTime LastAccessTimeUtc { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LastAccessTimeUtc" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemInfo.LastAccessTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Property LastAccessTimeUtc As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LastAccessTimeUtc { DateTime get(); void set(DateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置上次访问当前文件或目录的时间，其格式为协调世界时 (UTC)。</summary>
        <value>上次访问当前文件或目录的 UTC 时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
> [!NOTE]
>  此方法可能返回了不准确值，因为它使用其值可能不会持续更新由操作系统的本机函数。  
  
 值<xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>属性会预先缓存，如果当前实例的<xref:System.IO.FileSystemInfo>从以下任一返回了对象<xref:System.IO.DirectoryInfo>方法：  
  
-   <xref:System.IO.DirectoryInfo.GetDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A?displayProperty=nameWithType>  
  
 若要获取最新值，请调用<xref:System.IO.FileSystemInfo.Refresh%2A>方法。  
  
 如果该文件中所述<xref:System.IO.FileSystemInfo>对象不存在，则此属性返回第午夜 12:00 到公元 1601 年 1 月 1 日 (C.E.)协调世界时 (UTC)。  
  
 通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <see cref="M:System.IO.FileSystemInfo.Refresh" /> 不能初始化数据。</exception>
        <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Windows NT 或更高版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">调用方试图设置无效的访问时间。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用于设置上次访问时间。 关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="LastWriteTime">
      <MemberSignature Language="C#" Value="public DateTime LastWriteTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LastWriteTime" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemInfo.LastWriteTime" />
      <MemberSignature Language="VB.NET" Value="Public Property LastWriteTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LastWriteTime { DateTime get(); void set(DateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置上次写入当前文件或目录的时间。</summary>
        <value>上次写入当前文件的时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!NOTE]
>  此方法可能返回了不准确值，因为它使用其值可能不会持续更新由操作系统的本机函数。  
  
 值<xref:System.IO.FileSystemInfo.LastWriteTime%2A>属性会预先缓存，如果当前实例的<xref:System.IO.FileSystemInfo>从以下任一返回了对象<xref:System.IO.DirectoryInfo>方法：  
  
-   <xref:System.IO.DirectoryInfo.GetDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A?displayProperty=nameWithType>  
  
 若要获取最新值，请调用<xref:System.IO.FileSystemInfo.Refresh%2A>方法。  
  
 如果文件或目录中所述<xref:System.IO.FileSystemInfo>对象不存在，或者如果包含此文件或目录的文件系统不支持此信息，则此属性将返回第午夜 12:00 到公元 1601 年 1 月 1 日 (C.E.)为本地时间调整协调世界时 (UTC)。  
  
## Examples  
 下面的代码示例演示了的更新<xref:System.IO.FileSystemInfo.LastWriteTime%2A>通过"触摸"操作的属性。 在此示例中，该文件"接触"，更新<xref:System.IO.FileSystemInfo.CreationTime%2A>，<xref:System.IO.FileSystemInfo.LastAccessTime%2A>和<xref:System.IO.FileSystemInfo.LastWriteTime%2A>属性设置为当前日期和时间。  
  
 [!code-csharp[System.IO.FileSystemInfo_touch#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileSystemInfo_touch/cs/touch.cs#00)]
 [!code-vb[System.IO.FileSystemInfo_touch#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileSystemInfo_touch/vb/touch.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <see cref="M:System.IO.FileSystemInfo.Refresh" /> 不能初始化数据。</exception>
        <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Windows NT 或更高版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">调用方试图设置无效的写入时间。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">设置上次写入时间。 关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="LastWriteTimeUtc">
      <MemberSignature Language="C#" Value="public DateTime LastWriteTimeUtc { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LastWriteTimeUtc" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemInfo.LastWriteTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Property LastWriteTimeUtc As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LastWriteTimeUtc { DateTime get(); void set(DateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置上次写入当前文件或目录的时间，其格式为协调世界时 (UTC)。</summary>
        <value>上次写入当前文件的 UTC 时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!NOTE]
>  此方法可能返回了不准确值，因为它使用其值可能不会持续更新由操作系统的本机函数。  
    
 值<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>属性会预先缓存，如果当前实例的<xref:System.IO.FileSystemInfo>从以下任一返回了对象<xref:System.IO.DirectoryInfo>方法：  
  
-   <xref:System.IO.DirectoryInfo.GetDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A?displayProperty=nameWithType>  
  
-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A?displayProperty=nameWithType>  
  
 若要获取最新值，请调用<xref:System.IO.FileSystemInfo.Refresh%2A>方法。  
  
 如果文件或目录中所述<xref:System.IO.FileSystemInfo>对象不存在，或者如果包含此文件或目录的文件系统不支持此信息，则此属性将返回第午夜 12:00 到公元 1601 年 1 月 1 日 (C.E.)协调世界时 (UTC)。  

 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <see cref="M:System.IO.FileSystemInfo.Refresh" /> 不能初始化数据。</exception>
        <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Windows NT 或更高版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">调用方试图设置无效的写入时间。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">设置上次写入时间。 关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>对于文件，获取该文件的名称。 对于目录，如果存在层次结构，则获取层次结构中最后一个目录的名称。 否则，<see langword="Name" /> 属性获取该目录的名称。</summary>
        <value>一个字符串，它是父目录的名称、层次结构中最后一个目录的名称或文件的名称（包括文件扩展名）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于目录，`Name`返回仅父目录，如 Dir，不 c:\Dir 的名称。 子目录，`Name`返回仅子目录，例如 Sub1，不 c:\Dir\Sub1 的名称。  
  
 对于文件，`Name`返回文件名和文件扩展名，例如 MyFile.txt，不 c:\Dir\Myfile.txt。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="OriginalPath">
      <MemberSignature Language="C#" Value="protected string OriginalPath;" />
      <MemberSignature Language="ILAsm" Value=".field family string OriginalPath" />
      <MemberSignature Language="DocId" Value="F:System.IO.FileSystemInfo.OriginalPath" />
      <MemberSignature Language="VB.NET" Value="Protected OriginalPath As String " />
      <MemberSignature Language="C++ CLI" Value="protected: System::String ^ OriginalPath;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最初由用户指定的目录（不论是相对目录还是绝对目录）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemInfo.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>刷新对象的状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileSystemInfo.Refresh` 获取当前的文件系统中的文件的快照。 `Refresh` 不能更正基础文件系统，即使文件系统返回不正确或过期信息。 这可能发生在例如 Windows 98 平台上。  
  
 必须对进行调用`Refresh`尝试获取属性信息或信息可能已过期之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">设备（如磁盘驱动器）未准备好。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
  </Members>
</Type>