<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BinaryReader.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac522a75f9b356ec6c35a6b7fdfaaf1447ea2b69f02.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22a75f9b356ec6c35a6b7fdfaaf1447ea2b69f02</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryReader">
          <source>Reads primitive data types as binary values in a specific encoding.</source>
          <target state="translated">用特定的编码将基元数据类型读作二进制值。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>The <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> class provides methods that simplify reading primitive data types from a stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph>类提供了简化从流读取基元数据类型的方法。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>For example, you can use the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadBoolean%2A&gt;</ph> method to read the next byte as a Boolean value and advance the current position in the stream by one byte.</source>
          <target state="translated">例如，你可以使用<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadBoolean%2A&gt;</ph>方法读取为一个布尔值的下一个字节和 1 个字节器向前移动在流中当前的位置。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>The class includes read methods that support different data types.</source>
          <target state="translated">类包含支持不同的数据类型的读取的方法。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>When you create a new instance of the <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> class, you provide the stream to read from, and optionally specify the type of encoding and whether to leave the stream open after disposing the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> object.</source>
          <target state="translated">当你创建的新实例<ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph>类，提供要读取的流并 （可选） 指定的编码类型以及是释放后是否保持流处于打开<ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>If you do not specify an encoding type, UTF-8 is used.</source>
          <target state="translated">如果未指定编码类型，则使用 utf-8。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">此类型实现<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">在使用完类型后，您应直接或间接释放类型。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">若要直接释放类型，调用其<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>中的方法<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>块。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要间接释放类型，请使用 <ph id="ph1">`using`</ph>（在 C# 中）或 <ph id="ph2">`Using`</ph>（在 Visual Basic 中）等语言构造。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>接口主题。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">下面的代码示例演示如何存储和检索文件中的应用程序设置。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryReader">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>The input stream.</source>
          <target state="translated">输入流。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class based on the specified stream and using UTF-8 encoding.</source>
          <target state="translated">基于所指定的流和特定的 UTF-8 编码，初始化 <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">下面的代码示例演示如何存储和检索文件中的应用程序设置。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>The stream does not support reading, is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, or is already closed.</source>
          <target state="translated">该流不支持读取，为<ph id="ph1">&lt;see langword="null" /&gt;</ph> 或已关闭。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The input stream.</source>
          <target state="translated">输入流。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The character encoding to use.</source>
          <target state="translated">要使用的字符编码。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class based on the specified stream and character encoding.</source>
          <target state="translated">基于所指定的流和特定的字符编码，初始化 <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The stream does not support reading, is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, or is already closed.</source>
          <target state="translated">该流不支持读取，为<ph id="ph1">&lt;see langword="null" /&gt;</ph> 或已关闭。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="encoding" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="encoding" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The input stream.</source>
          <target state="translated">输入流。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The character encoding to use.</source>
          <target state="translated">要使用的字符编码。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to leave the stream open after the <ph id="ph2">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> object is disposed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果在释放 <ph id="ph2">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 对象后保持流处于打开状态，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class based on the specified stream and character encoding, and optionally leaves the stream open.</source>
          <target state="translated">基于所提供的流和特定的字符编码，初始化 <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 类的新实例，有选择性的打开流。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The stream does not support reading, is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, or is already closed.</source>
          <target state="translated">该流不支持读取，为<ph id="ph1">&lt;see langword="null" /&gt;</ph> 或已关闭。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="encoding" /&gt;</ph> or <ph id="ph2">&lt;paramref name="input" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="encoding" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="input" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.IO.BinaryReader.BaseStream">
          <source>Exposes access to the underlying stream of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph>.</source>
          <target state="translated">公开对 <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 的基础流的访问。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>The underlying stream associated with the <ph id="ph1">&lt;see langword="BinaryReader" /&gt;</ph>.</source>
          <target state="translated">与 <ph id="ph1">&lt;see langword="BinaryReader" /&gt;</ph> 关联的基础流。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>Using the underlying stream while reading or while using the <ph id="ph1">`BinaryReader`</ph> can cause data loss and corruption.</source>
          <target state="translated">使用基础流读取时或在使用<ph id="ph1">`BinaryReader`</ph>可能会导致数据丢失和损坏。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>For example, the same bytes might be read more than once, bytes might be skipped, or character reading might become unpredictable.</source>
          <target state="translated">例如，可能会不止一次读取的相同的字节数、 字节数可能会跳过，或字符读取可能变得不可预知。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>The following code example shows how to read and write <ph id="ph1">`Double`</ph> data to memory by using the <ph id="ph2">`BinaryReader`</ph> and <ph id="ph3">&lt;xref:System.IO.BinaryWriter&gt;</ph> classes on top of the <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何读取和写入<ph id="ph1">`Double`</ph>数据写到使用的内存<ph id="ph2">`BinaryReader`</ph>和<ph id="ph3">&lt;xref:System.IO.BinaryWriter&gt;</ph>类的顶部<ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source><ph id="ph1">`MemoryStream`</ph> only reads and writes <ph id="ph2">`Byte`</ph> data.</source>
          <target state="translated"><ph id="ph1">`MemoryStream`</ph> 仅读取和写入<ph id="ph2">`Byte`</ph>数据。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Close">
          <source>Closes the current reader and the underlying stream.</source>
          <target state="translated">关闭当前阅读器及基础流。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>This implementation of <ph id="ph1">`Close`</ph> calls the <ph id="ph2">&lt;xref:System.IO.BinaryReader.Dispose%2A&gt;</ph> method passing a <ph id="ph3">`true`</ph> value.</source>
          <target state="translated">此实现的<ph id="ph1">`Close`</ph>调用<ph id="ph2">&lt;xref:System.IO.BinaryReader.Dispose%2A&gt;</ph>方法并传递<ph id="ph3">`true`</ph>值。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">`Close`</ph>.</source>
          <target state="translated">刷新流将不会刷新其基础的编码器，除非你明确地调用<ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph>或<ph id="ph2">`Close`</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">设置<ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph>到<ph id="ph2">`true`</ph>意味着数据从缓冲区刷新到流中，但不是会刷新编码器状态。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">这将允许编码器，以便它可以正确编码的字符的下一步块保持其状态 （部分字符）。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</source>
          <target state="translated">这种情况下会影响 UTF8 和 UTF7 其中某些字符仅后才能进行编码的编码器收到的相邻字符。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryReader">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 类使用的资源。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 类的当前实例所使用的所有资源。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>.</source>
          <target state="translated">在完成使用 <ph id="ph1">`Dispose`</ph> 后，应调用 <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 方法使 <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> 处于不可用状态。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> was occupying.</source>
          <target state="translated">在调用<ph id="ph1">`Dispose`</ph>，必须释放对所有引用<ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>以便垃圾回收器才能回收的内存，<ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph>占用。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>和<bpt id="p2">[</bpt>实现 Dispose 方法<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>.</source>
          <target state="translated">每次释放对 <ph id="ph1">`Dispose`</ph> 的最后一个引用前，均应调用 <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">否则，在垃圾回收器调用 <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 对象的 <ph id="ph2">`Finalize`</ph> 方法之前，该对象正在使用的资源不会被释放。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">若要释放托管资源和非托管资源，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；若仅释放非托管资源，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class and optionally releases the managed resources.</source>
          <target state="translated">释放 <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 类使用的非托管资源，并可以选择释放托管资源。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>This method is called by <ph id="ph1">`Dispose`</ph> and <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>.</source>
          <target state="translated">调用此方法<ph id="ph1">`Dispose`</ph>和<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>By default, this method specifies the <ph id="ph1">`disposing`</ph> parameter as <ph id="ph2">`true`</ph>.</source>
          <target state="translated">默认情况下，此方法指定<ph id="ph1">`disposing`</ph>参数作为<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> specifies the <ph id="ph2">`disposing`</ph> parameter as <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 指定<ph id="ph2">`disposing`</ph>参数作为<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> references.</source>
          <target state="translated">当 <ph id="ph1">`disposing`</ph> 参数为 <ph id="ph2">`true`</ph> 时，此方法释放该 <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> 引用的、由任何托管对象持有的全部资源。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">此方法调用每个引用对象的 <ph id="ph1">`Dispose`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.IO.BinaryReader.Dispose(System.Boolean)" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.IO.BinaryReader.Dispose(System.Boolean)" /&gt;</ph> 可以由其他对象多次调用。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>When overriding this method, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">在重写此方法，请注意不要引用已释放的以前调用中的对象<ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>For more information about how to implement this method, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">有关如何实现此方法的详细信息，请参阅<bpt id="p1">[</bpt>实现 Dispose 方法<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">有关详细信息<ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph>和<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>The number of bytes to be read.</source>
          <target state="translated">要读取的字节数。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>Fills the internal buffer with the specified number of bytes read from the stream.</source>
          <target state="translated">用从流中读取的指定字节数填充内部缓冲区。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>The internal buffer size is the larger value between 16 and the value returned by <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> for the specified encoding.</source>
          <target state="translated">内部缓冲区的大小是 16 和返回的值之间的较大值<ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph>为指定的编码。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>The end of the stream is reached before <ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> could be read.</source>
          <target state="translated">在可以读取 <ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> 之前到达了流的末尾。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>Requested <ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> is larger than the internal buffer size.</source>
          <target state="translated">请求的 <ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> 大于内部缓冲区大小。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.PeekChar">
          <source>Returns the next available character and does not advance the byte or character position.</source>
          <target state="translated">返回下一个可用的字符，并且不提升字节或字符的位置。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.PeekChar">
          <source>The next available character, or -1 if no more characters are available or the stream does not support seeking.</source>
          <target state="translated">下一个可用的字符，或者，如果没有可用字符或者流不支持查找时为 -1。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.PeekChar">
          <source>If surrogate characters can be expected in the stream use the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> method, then set the stream back to the original position.</source>
          <target state="translated">如果代理项字符可出现在流使用<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph>方法，然后设置流返回到原始位置。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.PeekChar">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.PeekChar">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.PeekChar">
          <source>The current character cannot be decoded into the internal character buffer by using the <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> selected for the stream.</source>
          <target state="translated">当前字符无法通过使用为该流选择的 <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> 解码到内部字符缓冲区中。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryReader">
          <source>Reads bytes from the underlying stream and advances the current position of the stream.</source>
          <target state="translated">从基础流中读取字节，并将流的当前位置前移。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read">
          <source>Reads characters from the underlying stream and advances the current position of the stream in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and the specific character being read from the stream.</source>
          <target state="translated">从基础流中读取字符，并根据所使用的 <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> 和从流中读取的特定字符，提升流的当前位置。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read">
          <source>The next character from the input stream, or -1 if no characters are currently available.</source>
          <target state="translated">输入流中的下一个字符，如果当前无可用字符则为 -1。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>The following example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">下面的示例演示如何读取和写入内存使用作为后备存储的数据。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>This example displays a list of invalid file path characters to the console.</source>
          <target state="translated">此示例向控制台显示无效的文件路径字符的列表。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters.</source>
          <target state="translated">尽管该代码尝试显示的所有无效的文件路径字符列表，则并非所有字符都可显示的一组字符中。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>Because the list of invalid characters can vary based on the system, output for this code may also vary.</source>
          <target state="translated">由于无效的字符的列表可能有所不同基于系统上，此代码的输出可能也会有所不同。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to read data into.</source>
          <target state="translated">将数据读入的缓冲区。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The starting point in the buffer at which to begin reading into the buffer.</source>
          <target state="translated">缓冲区中的起始点，在该处开始读入缓冲区。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to read.</source>
          <target state="translated">要读取的字节数。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads the specified number of bytes from the stream, starting from a specified point in the byte array.</source>
          <target state="translated">从字节数组中的指定点开始，从流中读取指定的字节数。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes read into <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated">读入 <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 的字节数。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This might be less than the number of bytes requested if that many bytes are not available, or it might be zero if the end of the stream is reached.</source>
          <target state="translated">如果可用的字节没有请求的那么多，此数可能小于所请求的字节数；如果到达了流的末尾，此数可能为零。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 读取操作失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to write binary data by using memory as a backing store.</source>
          <target state="translated">下面的示例演示如何通过使用作为后备存储的内存写入二进制数据。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>It displays a message to the console that indicates whether the data was written correctly.</source>
          <target state="translated">它会显示到控制台，该值指示数据是否被正确写入消息。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This example reads the contents of a file and displays each byte's numeric value in 16-column format.</source>
          <target state="translated">此示例读取文件的内容，并以 16 列格式显示每个字节的数字值。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The end of the file that is being read is detected when the <ph id="ph1">&lt;xref:System.IO.BinaryReader.Read%2A&gt;</ph> method returns zero bytes.</source>
          <target state="translated">检测到正在读取的文件结束时<ph id="ph1">&lt;xref:System.IO.BinaryReader.Read%2A&gt;</ph>方法返回零字节。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">缓冲区长度减去 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of decoded characters to read is greater than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">要读取的解码字符数大于 <ph id="ph1">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</source>
          <target state="translated">如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The buffer to read data into.</source>
          <target state="translated">将数据读入的缓冲区。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The starting point in the buffer at which to begin reading into the buffer.</source>
          <target state="translated">缓冲区中的起始点，在该处开始读入缓冲区。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to read.</source>
          <target state="translated">要读取的字符数。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>Reads the specified number of characters from the stream, starting from a specified point in the character array.</source>
          <target state="translated">从字符数组中的指定点开始，从流中读取指定的字符数。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The total number of characters read into the buffer.</source>
          <target state="translated">读入缓冲区的总字符数。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.</source>
          <target state="translated">如果当前可用的字节没有请求的那么多，此数可能小于所请求的字符数；如果到达了流的末尾，此数可能为零。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 读取操作失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The following example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">下面的示例演示如何读取和写入内存使用作为后备存储的数据。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>This example displays a list of invalid file path characters to the console.</source>
          <target state="translated">此示例向控制台显示无效的文件路径字符的列表。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters.</source>
          <target state="translated">尽管该代码尝试显示的所有无效的文件路径字符列表，则并非所有字符都可显示的一组字符中。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>Because the list of invalid characters can vary based on the system, output for this code may also vary.</source>
          <target state="translated">由于无效的字符的列表可能有所不同基于系统上，此代码的输出可能也会有所不同。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">缓冲区长度减去 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The number of decoded characters to read is greater than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">要读取的解码字符数大于 <ph id="ph1">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</source>
          <target state="translated">如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>Reads in a 32-bit integer in compressed format.</source>
          <target state="translated">以压缩格式读入 32 位整数。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>A 32-bit integer in compressed format.</source>
          <target state="translated">压缩格式的 32 位整数。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>If the integer will fit in seven bits, the integer takes only one byte of space.</source>
          <target state="translated">如果整数中的七位放不下，整数仅占用一个字节的空间。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>The integer is expected to have been written through <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write7BitEncodedInt%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">应为整数已写入通过<ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write7BitEncodedInt%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>The stream is corrupted.</source>
          <target state="translated">流已损坏。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>Reads a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value from the current stream and advances the current position of the stream by one byte.</source>
          <target state="translated">从当前流中读取 <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> 值，并使该流的当前位置提升 1 个字节。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the byte is nonzero; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果字节为非零则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">下面的代码示例演示如何存储和检索文件中的应用程序设置。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>Reads the next byte from the current stream and advances the current position of the stream by one byte.</source>
          <target state="translated">从当前流中读取下一个字节，并使流的当前位置提升 1 个字节。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>The next byte read from the current stream.</source>
          <target state="translated">从当前流中读取的下一个字节。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>Because of data formatting conflicts, using this method with the following encodings is not recommended:</source>
          <target state="translated">由于数据格式设置冲突，不建议对以下编码方式使用此方法：</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>ISO-2022-JP</source>
          <target state="translated">ISO-2022-JP</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>ISCII</source>
          <target state="translated">ISCII</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</source>
          <target state="translated">下面的代码示例演示如何编写二进制数据作为后备存储，使用内存，然后验证数据是否被正确写入。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The number of bytes to read.</source>
          <target state="translated">要读取的字节数。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>This value must be 0 or a non-negative number or an exception will occur.</source>
          <target state="translated">此值必须为 0 或非负数字，否则将出现异常。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>Reads the specified number of bytes from the current stream into a byte array and advances the current position by that number of bytes.</source>
          <target state="translated">从当前流中读取指定的字节数以写入字节数组中，并将当前位置前移相应的字节数。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>A byte array containing data read from the underlying stream.</source>
          <target state="translated">包含从基础流中读取的数据的字节数组。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>This might be less than the number of bytes requested if the end of the stream is reached.</source>
          <target state="translated">如果到达了流的末尾，则该字节数组可能小于所请求的字节数。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 读取操作失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</source>
          <target state="translated">下面的代码示例演示如何编写二进制数据作为后备存储，使用内存，然后验证数据是否被正确写入。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>This example reads the contents of a file and displays it to the console as dump text.</source>
          <target state="translated">此示例读取文件的内容，并将其显示为转储文本控制台。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The end of the file that is being read is detected when the length of the <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array returned from <ph id="ph2">&lt;xref:System.IO.BinaryReader.ReadBytes%2A&gt;</ph> is zero.</source>
          <target state="translated">检测到正在读取的文件结束时的长度<ph id="ph1">&lt;xref:System.Byte&gt;</ph>从返回的数组<ph id="ph2">&lt;xref:System.IO.BinaryReader.ReadBytes%2A&gt;</ph>为零。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The number of decoded characters to read is greater than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">要读取的解码字符数大于 <ph id="ph1">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</source>
          <target state="translated">如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>Reads the next character from the current stream and advances the current position of the stream in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and the specific character being read from the stream.</source>
          <target state="translated">从当前流中读取下一个字符，并根据所使用的 <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> 和从流中读取的特定字符，提升流的当前位置。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>A character read from the current stream.</source>
          <target state="translated">从当前流中读取的字符。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>If the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChar%2A&gt;</ph> method attempts to read a surrogate character in the stream an exception will be raised and the position in the stream will advance.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChar%2A&gt;</ph>方法尝试读取流中的代理项字符异常将会引发，并且将向前移动在流中的位置。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>The position is restored to the original location before <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChar%2A&gt;</ph> was called if the stream is seekable; however, if the stream is unseekable, the position will not be corrected.</source>
          <target state="translated">位置还原到之前的原始位置<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChar%2A&gt;</ph>调用了如果流是查找; 但是，如果流已 unseekable，位置将不更正。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>If surrogate characters can be expected in the stream, use the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> method instead.</source>
          <target state="translated">如果代理项字符可以出现在流中，使用<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph>方法相反。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>Because of data formatting conflicts, using this method with the following encodings is not recommended:</source>
          <target state="translated">由于数据格式设置冲突，不建议对以下编码方式使用此方法：</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>ISO-2022-JP</source>
          <target state="translated">ISO-2022-JP</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>ISCII</source>
          <target state="translated">ISCII</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>The following code example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">下面的代码示例演示如何读取和写入内存使用作为后备存储的数据。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>A surrogate character was read.</source>
          <target state="translated">读取了一个代理项字符。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>The number of characters to read.</source>
          <target state="translated">要读取的字符数。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>Reads the specified number of characters from the current stream, returns the data in a character array, and advances the current position in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and the specific character being read from the stream.</source>
          <target state="translated">从当前流中读取指定的字符数，并以字符数组的形式返回数据，然后根据所使用的 <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> 和从流中读取的特定字符，将当前位置前移。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>A character array containing data read from the underlying stream.</source>
          <target state="translated">包含从基础流中读取的数据的字节数组。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>This might be less than the number of characters requested if the end of the stream is reached.</source>
          <target state="translated">如果到达了流的末尾，则该字符数组可能小于所请求的字符数。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 读取操作失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>When reading from network streams, in some rare cases, the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> method might read an extra character from the stream if the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> was constructed with Unicode encoding.</source>
          <target state="translated">从网络流时，在某些极少数情况下，读取数据时<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph>方法可能从流读取一个额外字符，如果<ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>构造使用 Unicode 编码。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>If this occurs, you can use the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadBytes%2A&gt;</ph> method to read a fixed-length byte array, and then pass that array to the <ph id="ph2">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> method.</source>
          <target state="translated">如果发生这种情况，则可以使用<ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadBytes%2A&gt;</ph>方法来读取的固定长度的字节数组，然后将传递到该数组<ph id="ph2">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>The following code example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">下面的代码示例演示如何读取和写入内存使用作为后备存储的数据。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>The number of decoded characters to read is greater than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">要读取的解码字符数大于 <ph id="ph1">&lt;paramref name="count" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</source>
          <target state="translated">如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.</source>
          <target state="translated">从当前流中读取十进制数值，并将该流的当前位置提升十六个字节。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>A decimal value read from the current stream.</source>
          <target state="translated">从当前流中读取的十进制数值。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.</source>
          <target state="translated">从当前流中读取 8 字节浮点值，并使流的当前位置提升 8 个字节。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>An 8-byte floating point value read from the current stream.</source>
          <target state="translated">从当前流中读取的 8 字节浮点值。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 读取 little-endian 格式中的使用此数据类型。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>The following code example shows how to read and write <ph id="ph1">`Double`</ph> data to memory by using the <ph id="ph2">`BinaryReader`</ph> and <ph id="ph3">&lt;xref:System.IO.BinaryWriter&gt;</ph> classes on top of the <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示如何读取和写入<ph id="ph1">`Double`</ph>数据写到使用的内存<ph id="ph2">`BinaryReader`</ph>和<ph id="ph3">&lt;xref:System.IO.BinaryWriter&gt;</ph>类的顶部<ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source><ph id="ph1">`MemoryStream`</ph> only reads and writes <ph id="ph2">`Byte`</ph> data.</source>
          <target state="translated"><ph id="ph1">`MemoryStream`</ph> 仅读取和写入<ph id="ph2">`Byte`</ph>数据。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.</source>
          <target state="translated">从当前流中读取 2 字节有符号整数，并使流的当前位置提升 2 个字节。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>A 2-byte signed integer read from the current stream.</source>
          <target state="translated">从当前流中读取的 2 字节有符号整数。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt16">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt16">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 读取 little-endian 格式中的使用此数据类型。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.</source>
          <target state="translated">从当前流中读取 4 字节有符号整数，并使流的当前位置提升 4 个字节。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>A 4-byte signed integer read from the current stream.</source>
          <target state="translated">从当前流中读取的 2 字节有符号整数。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt32">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt32">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 读取 little-endian 格式中的使用此数据类型。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">下面的代码示例演示如何存储和检索文件中的应用程序设置。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.</source>
          <target state="translated">从当前流中读取 8 字节有符号整数，并使流的当前位置提升 8 个字节。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>An 8-byte signed integer read from the current stream.</source>
          <target state="translated">从当前流中读取的 8 字节有符号整数。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt64">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt64">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 读取 little-endian 格式中的使用此数据类型。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>Reads a signed byte from this stream and advances the current position of the stream by one byte.</source>
          <target state="translated">从此流中读取 1 个有符号字节，并使流的当前位置提升 1 个字节。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>A signed byte read from the current stream.</source>
          <target state="translated">从当前流中读取的一个有符号字节。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSByte">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.</source>
          <target state="translated">从当前流中读取 4 字节浮点值，并使流的当前位置提升 4 个字节。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>A 4-byte floating point value read from the current stream.</source>
          <target state="translated">从当前流中读取的 4 字节浮点值。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSingle">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSingle">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 读取 little-endian 格式中的使用此数据类型。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">下面的代码示例演示如何存储和检索文件中的应用程序设置。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>Reads a string from the current stream.</source>
          <target state="translated">从当前流中读取一个字符串。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>The string is prefixed with the length, encoded as an integer seven bits at a time.</source>
          <target state="translated">字符串有长度前缀，一次 7 位地被编码为整数。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>The string being read.</source>
          <target state="translated">正被读取的字符串。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadString">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadString">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadString">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">下面的代码示例演示如何存储和检索文件中的应用程序设置。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.</source>
          <target state="translated">使用 Little-Endian 编码从当前流中读取 2 字节无符号整数，并将流的位置提升 2 个字节。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>A 2-byte unsigned integer read from this stream.</source>
          <target state="translated">从该流中读取的 2 字节无符号整数。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 读取 little-endian 格式中的使用此数据类型。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.</source>
          <target state="translated">从当前流中读取 4 字节无符号整数并使流的当前位置提升 4 个字节。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>A 4-byte unsigned integer read from this stream.</source>
          <target state="translated">从该流中读取的 4 字节无符号整数。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 读取 little-endian 格式中的使用此数据类型。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.</source>
          <target state="translated">从当前流中读取 8 字节无符号整数并使流的当前位置提升 8 个字节。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>An 8-byte unsigned integer read from this stream.</source>
          <target state="translated">从该流中读取的 8 字节无符号整数。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 在读取失败后，不还原的文件位置。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 读取 little-endian 格式中的使用此数据类型。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">通用 I/O 任务的列表，请参阅<bpt id="p1">[</bpt>通用 I/O 任务<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>The end of the stream is reached.</source>
          <target state="translated">已到达流的末尾。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>The stream is closed.</source>
          <target state="translated">流已关闭。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>