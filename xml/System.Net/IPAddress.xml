<Type Name="IPAddress" FullName="System.Net.IPAddress">
  <TypeSignature Language="C#" Value="public class IPAddress" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit IPAddress extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.IPAddress" />
  <TypeSignature Language="VB.NET" Value="Public Class IPAddress" />
  <TypeSignature Language="C++ CLI" Value="public ref class IPAddress" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Primitives</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9a370-101">提供 Internet 协议 (IP) 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-101">Provides an Internet Protocol (IP) address.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-102"><xref:System.Net.IPAddress>类包含 IP 网络上的计算机的地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-102">The <xref:System.Net.IPAddress> class contains the address of a computer on an IP network.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a370-103">下面的代码示例演示如何查询服务器以获取系列的地址和 IP 地址支持。</span><span class="sxs-lookup"><span data-stu-id="9a370-103">The following code example shows how to query a server to obtain the family addresses and the IP addresses it supports.</span></span>  
  
 [!code-cpp[System.Net.IPAddress#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#1)]
 [!code-csharp[System.Net.IPAddress#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#1)]
 [!code-vb[System.Net.IPAddress#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a370-104">初始化 <see cref="T:System.Net.IPAddress" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9a370-104">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (byte[] address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(cli::array &lt;System::Byte&gt; ^ address);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="9a370-105">IP 地址的字节数组值。</span><span class="sxs-lookup"><span data-stu-id="9a370-105">The byte array value of the IP address.</span></span></param>
        <summary><span data-ttu-id="9a370-106">使用指定为 <see cref="T:System.Net.IPAddress" /> 数组的地址初始化 <see cref="T:System.Byte" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9a370-106">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as a <see cref="T:System.Byte" /> array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-107"><xref:System.Net.IPAddress>使用创建<xref:System.Net.IPAddress.Address%2A>属性设置为`address`。</span><span class="sxs-lookup"><span data-stu-id="9a370-107">The <xref:System.Net.IPAddress> is created with the <xref:System.Net.IPAddress.Address%2A> property set to `address`.</span></span>  
  
 <span data-ttu-id="9a370-108">如果的长度`address`是 4，<xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29>构造 IPv4 地址; 否则，构造包含 0 的作用域的 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-108">If the length of `address` is 4, <xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29> constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed.</span></span>  
  
 <span data-ttu-id="9a370-109"><xref:System.Byte>假定数组为在网络字节顺序中与索引位置 0 中的第最高有效字节。</span><span class="sxs-lookup"><span data-stu-id="9a370-109">The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9a370-110"><paramref name="address" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-110"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9a370-111"><paramref name="address" /> 包含错误的 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-111"><paramref name="address" /> contains a bad IP address.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (long newAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 newAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (newAddress As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(long newAddress);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="newAddress" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="newAddress"><span data-ttu-id="9a370-112">IP 地址的长值。</span><span class="sxs-lookup"><span data-stu-id="9a370-112">The long value of the IP address.</span></span> <span data-ttu-id="9a370-113">例如，大端格式的值 0x2414188f 可能为 IP 地址“143.24.20.36”。</span><span class="sxs-lookup"><span data-stu-id="9a370-113">For example, the value 0x2414188f in big-endian format would be the IP address "143.24.20.36".</span></span></param>
        <summary><span data-ttu-id="9a370-114">使用指定为 <see cref="T:System.Net.IPAddress" /> 的地址初始化 <see cref="T:System.Int64" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9a370-114">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as an <see cref="T:System.Int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-115"><xref:System.Net.IPAddress>使用创建实例<xref:System.Net.IPAddress.Address%2A>属性设置为`newAddress`。</span><span class="sxs-lookup"><span data-stu-id="9a370-115">The <xref:System.Net.IPAddress> instance is created with the <xref:System.Net.IPAddress.Address%2A> property set to `newAddress`.</span></span>  
  
 <span data-ttu-id="9a370-116"><xref:System.Int64>值假定网络字节顺序。</span><span class="sxs-lookup"><span data-stu-id="9a370-116">The <xref:System.Int64> value is assumed to be in network byte order.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9a370-117"><paramref name="newAddress" />&lt; 0 或</span><span class="sxs-lookup"><span data-stu-id="9a370-117"><paramref name="newAddress" /> &lt; 0 or</span></span>  
  
 <span data-ttu-id="9a370-118"><paramref name="newAddress" />&gt; 0x00000000FFFFFFFF</span><span class="sxs-lookup"><span data-stu-id="9a370-118"><paramref name="newAddress" /> &gt; 0x00000000FFFFFFFF</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (ReadOnlySpan&lt;byte&gt; address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(ReadOnlySpan&lt;System::Byte&gt; address);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="address">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (byte[] address, long scopeid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] address, int64 scopeid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As Byte(), scopeid As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(cli::array &lt;System::Byte&gt; ^ address, long scopeid);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Byte[]" />
        <Parameter Name="scopeid" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="9a370-119">IP 地址的字节数组值。</span><span class="sxs-lookup"><span data-stu-id="9a370-119">The byte array value of the IP address.</span></span></param>
        <param name="scopeid"><span data-ttu-id="9a370-120">范围标识符的长值。</span><span class="sxs-lookup"><span data-stu-id="9a370-120">The long value of the scope identifier.</span></span></param>
        <summary><span data-ttu-id="9a370-121">使用指定为 <see cref="T:System.Net.IPAddress" /> 数组的地址和指定的范围标识符初始化 <see cref="T:System.Byte" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9a370-121">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as a <see cref="T:System.Byte" /> array and the specified scope identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-122">此构造函数实例化的 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-122">This constructor instantiates an IPv6 address.</span></span> <span data-ttu-id="9a370-123">`scopeid`标识对于链接本地地址的网络接口。</span><span class="sxs-lookup"><span data-stu-id="9a370-123">The `scopeid` identifies a network interface in the case of a link-local address.</span></span> <span data-ttu-id="9a370-124">作用域是仅对链接本地和站点本地地址有效。</span><span class="sxs-lookup"><span data-stu-id="9a370-124">The scope is valid only for link-local and site-local addresses.</span></span>  
  
 <span data-ttu-id="9a370-125"><xref:System.Byte>假定数组为在网络字节顺序中与索引位置 0 中的第最高有效字节。</span><span class="sxs-lookup"><span data-stu-id="9a370-125">The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9a370-126"><paramref name="address" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-126"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9a370-127"><paramref name="address" /> 包含错误的 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-127"><paramref name="address" /> contains a bad IP address.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9a370-128"><paramref name="scopeid" />&lt; 0 或</span><span class="sxs-lookup"><span data-stu-id="9a370-128"><paramref name="scopeid" /> &lt; 0 or</span></span>  
  
 <span data-ttu-id="9a370-129"><paramref name="scopeid" />&gt; 0x00000000FFFFFFFF</span><span class="sxs-lookup"><span data-stu-id="9a370-129"><paramref name="scopeid" /> &gt; 0x00000000FFFFFFFF</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (ReadOnlySpan&lt;byte&gt; address, long scopeid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; address, int64 scopeid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As ReadOnlySpan(Of Byte), scopeid As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(ReadOnlySpan&lt;System::Byte&gt; address, long scopeid);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="scopeid" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="address">To be added.</param>
        <param name="scopeid">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public long Address { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.Address" />
      <MemberSignature Language="VB.NET" Value="Public Property Address As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Address { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property has been deprecated. It is address family dependent. Please use IPAddress.Equals method to perform comparisons. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-130">Internet 协议 (IP) 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-130">An Internet Protocol (IP) address.</span></span></summary>
        <value><span data-ttu-id="9a370-131">IP 地址的长值。</span><span class="sxs-lookup"><span data-stu-id="9a370-131">The long value of the IP address.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-132">此属性已过时。</span><span class="sxs-lookup"><span data-stu-id="9a370-132">This property is obsolete.</span></span> <span data-ttu-id="9a370-133">请使用 <xref:System.Net.IPAddress.GetAddressBytes%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a370-133">Use <xref:System.Net.IPAddress.GetAddressBytes%2A>.</span></span>  
  
 <span data-ttu-id="9a370-134">要转换<xref:System.Net.IPAddress.Address%2A>到点分四部分表示法，使用<xref:System.Net.IPAddress.ToString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9a370-134">To convert <xref:System.Net.IPAddress.Address%2A> to dotted-quad notation, use the <xref:System.Net.IPAddress.ToString%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a370-135">下面的示例使用<xref:System.Net.IPAddress.Address%2A>要检索的 IP 地址参数<xref:System.Net.IPAddress>实例。</span><span class="sxs-lookup"><span data-stu-id="9a370-135">The following example uses the <xref:System.Net.IPAddress.Address%2A> parameter to retrieve the IP address of the <xref:System.Net.IPAddress> instance.</span></span>  
  
 [!code-cpp[IPAddress_Address_AddressFamily#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Address_AddressFamily/CPP/ipaddress_address_addressfamily.cpp#2)]
 [!code-csharp[IPAddress_Address_AddressFamily#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Address_AddressFamily/CS/ipaddress_address_addressfamily.cs#2)]
 [!code-vb[IPAddress_Address_AddressFamily#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Address_AddressFamily/VB/ipaddress_address_addressfamily.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="9a370-136">该地址族为 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-136">The address family is <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddressFamily">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.AddressFamily AddressFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.AddressFamily AddressFamily" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.AddressFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddressFamily As AddressFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::AddressFamily AddressFamily { System::Net::Sockets::AddressFamily get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.AddressFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-137">获取 IP 地址的地址族。</span><span class="sxs-lookup"><span data-stu-id="9a370-137">Gets the address family of the IP address.</span></span></summary>
        <value><span data-ttu-id="9a370-138">对于 IPv4，返回 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />；对于 IPv6，返回 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-138">Returns <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> for IPv4 or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> for IPv6.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9a370-139">请参阅中的示例<xref:System.Net.IPAddress>类主题。</span><span class="sxs-lookup"><span data-stu-id="9a370-139">Refer to the example in the <xref:System.Net.IPAddress> class topic.</span></span>  
  
 [!code-cpp[System.Net.IPAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#3)]
 [!code-csharp[System.Net.IPAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#3)]
 [!code-vb[System.Net.IPAddress#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress Any" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Any As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ Any;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-140">提供一个 IP 地址，指示服务器必须侦听所有网络接口上的客户端活动。</span><span class="sxs-lookup"><span data-stu-id="9a370-140">Provides an IP address that indicates that the server must listen for client activity on all network interfaces.</span></span> <span data-ttu-id="9a370-141">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="9a370-141">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-142"><xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType>方法使用<xref:System.Net.IPAddress.Any>字段，则指示<xref:System.Net.Sockets.Socket>实例必须侦听的所有网络接口上的客户端活动。</span><span class="sxs-lookup"><span data-stu-id="9a370-142">The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> method uses the <xref:System.Net.IPAddress.Any> field to indicate that a <xref:System.Net.Sockets.Socket> instance must listen for client activity on all network interfaces.</span></span>  
  
 <span data-ttu-id="9a370-143"><xref:System.Net.IPAddress.Any>字段等于 0.0.0.0 以点分隔的四表示法。</span><span class="sxs-lookup"><span data-stu-id="9a370-143">The <xref:System.Net.IPAddress.Any> field is equivalent to 0.0.0.0 in dotted-quad notation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Broadcast">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress Broadcast;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress Broadcast" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.Broadcast" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Broadcast As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ Broadcast;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-144">提供 IP 广播地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-144">Provides the IP broadcast address.</span></span> <span data-ttu-id="9a370-145">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="9a370-145">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-146"><xref:System.Net.IPAddress.Broadcast>字段等效于 255.255.255.255 以点分隔的四表示法。</span><span class="sxs-lookup"><span data-stu-id="9a370-146">The <xref:System.Net.IPAddress.Broadcast> field is equivalent to 255.255.255.255 in dotted-quad notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a370-147">下面的示例将打印<xref:System.Net.IPAddress.Broadcast>地址到控制台。</span><span class="sxs-lookup"><span data-stu-id="9a370-147">The following example prints the <xref:System.Net.IPAddress.Broadcast> address to the console.</span></span>  
  
 [!code-cpp[IPAddress_Broadcast_Loopback#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CPP/ipaddress_broadcast_loopback.cpp#2)]
 [!code-csharp[IPAddress_Broadcast_Loopback#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CS/ipaddress_broadcast_loopback.cs#2)]
 [!code-vb[IPAddress_Broadcast_Loopback#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/VB/ipaddress_broadcast_loopback.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (comparand As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="comparand"><span data-ttu-id="9a370-148">要与当前实例比较的 <see cref="T:System.Net.IPAddress" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="9a370-148">An <see cref="T:System.Net.IPAddress" /> instance to compare to the current instance.</span></span></param>
        <summary><span data-ttu-id="9a370-149">比较两个 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-149">Compares two IP addresses.</span></span></summary>
        <returns>
          <span data-ttu-id="9a370-150">如果两个地址相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-150"><see langword="true" /> if the two addresses are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-151"><xref:System.Net.IPAddress.Equals%2A>方法比较当前<xref:System.Net.IPAddress>实例与`comparand`参数并返回`true`如果两个实例都包含相同的 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-151">The <xref:System.Net.IPAddress.Equals%2A> method compares the current <xref:System.Net.IPAddress> instance with the `comparand` parameter and returns `true` if the two instances contain the same IP address.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAddressBytes">
      <MemberSignature Language="C#" Value="public byte[] GetAddressBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetAddressBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.GetAddressBytes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddressBytes () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetAddressBytes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a370-152">以字节数组形式提供 <see cref="T:System.Net.IPAddress" /> 的副本。</span><span class="sxs-lookup"><span data-stu-id="9a370-152">Provides a copy of the <see cref="T:System.Net.IPAddress" /> as an array of bytes.</span></span></summary>
        <returns><span data-ttu-id="9a370-153"><see cref="T:System.Byte" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="9a370-153">A <see cref="T:System.Byte" /> array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9a370-154">下面的代码示例演示如何获取以字节格式的服务器 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-154">The following code example shows how to get a server IP address in byte format.</span></span>  
  
 [!code-cpp[System.Net.IPAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#2)]
 [!code-csharp[System.Net.IPAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#2)]
 [!code-vb[System.Net.IPAddress#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a370-155">返回 IP 地址的哈希值。</span><span class="sxs-lookup"><span data-stu-id="9a370-155">Returns a hash value for an IP address.</span></span></summary>
        <returns><span data-ttu-id="9a370-156">整数哈希值。</span><span class="sxs-lookup"><span data-stu-id="9a370-156">An integer hash value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-157"><xref:System.Net.IPAddress.GetHashCode%2A>方法返回的 IP 地址的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="9a370-157">The <xref:System.Net.IPAddress.GetHashCode%2A> method returns a hash code of the IP address.</span></span> <span data-ttu-id="9a370-158">此值可以用作哈希表中的键。</span><span class="sxs-lookup"><span data-stu-id="9a370-158">This value can be used as a key in hash tables.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HostToNetworkOrder">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a370-159">将值由主机字节顺序转换为网络字节顺序。</span><span class="sxs-lookup"><span data-stu-id="9a370-159">Converts a value from host byte order to network byte order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HostToNetworkOrder">
      <MemberSignature Language="C#" Value="public static short HostToNetworkOrder (short host);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 HostToNetworkOrder(int16 host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HostToNetworkOrder (host As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short HostToNetworkOrder(short host);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="9a370-160">以主机字节顺序表示的要转换的数字。</span><span class="sxs-lookup"><span data-stu-id="9a370-160">The number to convert, expressed in host byte order.</span></span></param>
        <summary><span data-ttu-id="9a370-161">将短值由主机字节顺序转换为网络字节顺序。</span><span class="sxs-lookup"><span data-stu-id="9a370-161">Converts a short value from host byte order to network byte order.</span></span></summary>
        <returns><span data-ttu-id="9a370-162">以网络字节顺序表示的短值。</span><span class="sxs-lookup"><span data-stu-id="9a370-162">A short value, expressed in network byte order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-163">不同的计算机可用于不同的约定排序内多字节的整数值的字节。</span><span class="sxs-lookup"><span data-stu-id="9a370-163">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="9a370-164">首先放置最高有效字节某些计算机 （称为 big endian 顺序） 和其他首先放置的最低有效字节 （称为 little-endian 的顺序）。</span><span class="sxs-lookup"><span data-stu-id="9a370-164">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="9a370-165">若要使用不同的字节顺序的计算机使用，需要将通过网络发送的所有整数值第一次具有最高有效字节的网络字节顺序都发送。</span><span class="sxs-lookup"><span data-stu-id="9a370-165">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="9a370-166"><xref:System.Net.IPAddress.HostToNetworkOrder%2A>方法将转换为网络使用的字节顺序主机所使用的字节顺序从主机系统存储的多字节的整数值。</span><span class="sxs-lookup"><span data-stu-id="9a370-166">The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="HostToNetworkOrder">
      <MemberSignature Language="C#" Value="public static int HostToNetworkOrder (int host);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 HostToNetworkOrder(int32 host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HostToNetworkOrder (host As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int HostToNetworkOrder(int host);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="9a370-167">以主机字节顺序表示的要转换的数字。</span><span class="sxs-lookup"><span data-stu-id="9a370-167">The number to convert, expressed in host byte order.</span></span></param>
        <summary><span data-ttu-id="9a370-168">将整数值由主机字节顺序转换为网络字节顺序。</span><span class="sxs-lookup"><span data-stu-id="9a370-168">Converts an integer value from host byte order to network byte order.</span></span></summary>
        <returns><span data-ttu-id="9a370-169">以网络字节顺序表示的整数值。</span><span class="sxs-lookup"><span data-stu-id="9a370-169">An integer value, expressed in network byte order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-170">不同的计算机可用于不同的约定排序内多字节的整数值的字节。</span><span class="sxs-lookup"><span data-stu-id="9a370-170">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="9a370-171">首先放置最高有效字节某些计算机 （称为 big endian 顺序） 和其他首先放置的最低有效字节 （称为 little-endian 的顺序）。</span><span class="sxs-lookup"><span data-stu-id="9a370-171">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="9a370-172">若要使用不同的字节顺序的计算机使用，需要将通过网络发送的所有整数值第一次具有最高有效字节的网络字节顺序都发送。</span><span class="sxs-lookup"><span data-stu-id="9a370-172">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="9a370-173"><xref:System.Net.IPAddress.HostToNetworkOrder%2A>方法将转换为网络使用的字节顺序主机所使用的字节顺序从主机系统存储的多字节的整数值。</span><span class="sxs-lookup"><span data-stu-id="9a370-173">The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="HostToNetworkOrder">
      <MemberSignature Language="C#" Value="public static long HostToNetworkOrder (long host);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 HostToNetworkOrder(int64 host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HostToNetworkOrder (host As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long HostToNetworkOrder(long host);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="9a370-174">以主机字节顺序表示的要转换的数字。</span><span class="sxs-lookup"><span data-stu-id="9a370-174">The number to convert, expressed in host byte order.</span></span></param>
        <summary><span data-ttu-id="9a370-175">将长值由主机字节顺序转换为网络字节顺序。</span><span class="sxs-lookup"><span data-stu-id="9a370-175">Converts a long value from host byte order to network byte order.</span></span></summary>
        <returns><span data-ttu-id="9a370-176">以网络字节顺序表示的长值。</span><span class="sxs-lookup"><span data-stu-id="9a370-176">A long value, expressed in network byte order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-177">不同的计算机可用于不同的约定排序内多字节的整数值的字节。</span><span class="sxs-lookup"><span data-stu-id="9a370-177">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="9a370-178">首先放置最高有效字节某些计算机 （称为 big endian 顺序） 和其他首先放置的最低有效字节 （称为 little-endian 的顺序）。</span><span class="sxs-lookup"><span data-stu-id="9a370-178">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="9a370-179">若要使用不同的字节顺序的计算机使用，需要将通过网络发送的所有整数值第一次具有最高有效字节的网络字节顺序都发送。</span><span class="sxs-lookup"><span data-stu-id="9a370-179">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="9a370-180"><xref:System.Net.IPAddress.HostToNetworkOrder%2A>方法将转换为网络使用的字节顺序主机所使用的字节顺序从主机系统存储的多字节的整数值。</span><span class="sxs-lookup"><span data-stu-id="9a370-180">The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="IPv6Any">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress IPv6Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress IPv6Any" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.IPv6Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IPv6Any As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ IPv6Any;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-181"><see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 方法使用 <see cref="F:System.Net.IPAddress.IPv6Any" /> 字段指示 <see cref="T:System.Net.Sockets.Socket" /> 必须侦听所有网络接口上的客户端活动。</span><span class="sxs-lookup"><span data-stu-id="9a370-181">The <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> method uses the <see cref="F:System.Net.IPAddress.IPv6Any" /> field to indicate that a <see cref="T:System.Net.Sockets.Socket" /> must listen for client activity on all network interfaces.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-182"><xref:System.Net.IPAddress.IPv6Any>字段等效于 0:0:0:0:0:0:0:0 冒号十六进制表示法，或到:: 的简洁表示法中。</span><span class="sxs-lookup"><span data-stu-id="9a370-182">The <xref:System.Net.IPAddress.IPv6Any> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a370-183">下面的代码示例采用标准的压缩格式显示的值的当前主机的任何地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-183">The following code example displays the value of the current host's Any address in standard compressed format.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#2)]
 [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#2)]
 [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPv6Loopback">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress IPv6Loopback;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress IPv6Loopback" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.IPv6Loopback" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IPv6Loopback As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ IPv6Loopback;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-184">提供 IP 环回地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-184">Provides the IP loopback address.</span></span> <span data-ttu-id="9a370-185">此属性是只读的。</span><span class="sxs-lookup"><span data-stu-id="9a370-185">This property is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-186"><xref:System.Net.IPAddress.IPv6Loopback>字段等效于 0:0:0:0:0:0:0:1 冒号十六进制表示法，或到:: 1 中的简洁表示法。</span><span class="sxs-lookup"><span data-stu-id="9a370-186">The <xref:System.Net.IPAddress.IPv6Loopback> field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a370-187">下面的代码示例采用标准的压缩格式显示的当前主机的环回地址的值。</span><span class="sxs-lookup"><span data-stu-id="9a370-187">The following code example displays the value of the current host's loopback address in standard compressed format.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#1)]
 [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#1)]
 [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPv6None">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress IPv6None;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress IPv6None" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.IPv6None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IPv6None As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ IPv6None;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-188">提供指示不应使用任何网络接口的 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-188">Provides an IP address that indicates that no network interface should be used.</span></span> <span data-ttu-id="9a370-189">此属性是只读的。</span><span class="sxs-lookup"><span data-stu-id="9a370-189">This property is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-190"><xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType>方法使用<xref:System.Net.IPAddress.IPv6None>字段，则指示<xref:System.Net.Sockets.Socket>必须侦听客户端活动。</span><span class="sxs-lookup"><span data-stu-id="9a370-190">The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> method uses the <xref:System.Net.IPAddress.IPv6None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity.</span></span> <span data-ttu-id="9a370-191"><xref:System.Net.IPAddress.IPv6None>字段等效于 0:0:0:0:0:0:0:0 冒号十六进制表示法，或到:: 的简洁表示法中为 0。</span><span class="sxs-lookup"><span data-stu-id="9a370-191">The <xref:System.Net.IPAddress.IPv6None> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a370-192">下面的代码示例采用标准的压缩格式显示的当前主机的 None 地址的值。</span><span class="sxs-lookup"><span data-stu-id="9a370-192">The following code example displays the value of the current host's None address in standard compressed format.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#3)]
 [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#3)]
 [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv4MappedToIPv6">
      <MemberSignature Language="C#" Value="public bool IsIPv4MappedToIPv6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv4MappedToIPv6" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv4MappedToIPv6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv4MappedToIPv6 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv4MappedToIPv6 { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-193">了解 IP 地址是否为 IPv4 映射的 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-193">Gets whether the IP address is an IPv4-mapped IPv6 address.</span></span></summary>
        <value><span data-ttu-id="9a370-194">返回 <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-194">Returns <see cref="T:System.Boolean" />.</span></span>  
  
 <span data-ttu-id="9a370-195">如果 IP 地址为 IPv4 映射的 IPv6 地址，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-195"><see langword="true" /> if the IP address is an IPv4-mapped IPv6 address; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-196">双堆栈套接字始终需要 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-196">Dual-stack sockets always require IPv6 addresses.</span></span> <span data-ttu-id="9a370-197">能够为 IPv4 地址进行交互需要使用 IPv4 映射 IPv6 地址格式。</span><span class="sxs-lookup"><span data-stu-id="9a370-197">The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</span></span> <span data-ttu-id="9a370-198">必须以 IPv4 映射 IPv6 地址格式，这使得 IPv6 唯一应用程序与一个 IPv4 节点进行通信来表示任何 IPv4 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-198">Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</span></span> <span data-ttu-id="9a370-199">IPv4 映射 IPv6 地址格式允许一个 IPv4 节点表示为 IPv6 地址的 IPv4 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-199">The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</span></span> <span data-ttu-id="9a370-200">IPv4 地址编码为低序位 32 位的 IPv6 地址，并且高序位 96 位保留固定的前缀 0:0:0:0:0:FFFF。</span><span class="sxs-lookup"><span data-stu-id="9a370-200">The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</span></span> <span data-ttu-id="9a370-201">RFC 4291 中指定的 IPv4 映射 IPv6 地址格式。</span><span class="sxs-lookup"><span data-stu-id="9a370-201">The IPv4-mapped IPv6 address format is specified in RFC 4291.</span></span> <span data-ttu-id="9a370-202">有关详细信息，请参阅[www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231)。</span><span class="sxs-lookup"><span data-stu-id="9a370-202">For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv6LinkLocal">
      <MemberSignature Language="C#" Value="public bool IsIPv6LinkLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv6LinkLocal" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv6LinkLocal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv6LinkLocal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv6LinkLocal { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-203">了解地址是否为 IPv6 链路本地地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-203">Gets whether the address is an IPv6 link local address.</span></span></summary>
        <value>
          <span data-ttu-id="9a370-204">如果 IP 地址为 IPv6 链接本地地址，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-204"><see langword="true" /> if the IP address is an IPv6 link local address; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv6Multicast">
      <MemberSignature Language="C#" Value="public bool IsIPv6Multicast { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv6Multicast" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv6Multicast" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv6Multicast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv6Multicast { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-205">了解地址是否为 IPv6 多播全局地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-205">Gets whether the address is an IPv6 multicast global address.</span></span></summary>
        <value>
          <span data-ttu-id="9a370-206">如果 IP 地址为 IPv6 多路广播全局地址，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-206"><see langword="true" /> if the IP address is an IPv6 multicast global address; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv6SiteLocal">
      <MemberSignature Language="C#" Value="public bool IsIPv6SiteLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv6SiteLocal" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv6SiteLocal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv6SiteLocal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv6SiteLocal { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-207">了解地址是否为 IPv6 站点本地地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-207">Gets whether the address is an IPv6 site local address.</span></span></summary>
        <value>
          <span data-ttu-id="9a370-208">如果 IP 地址为 IPv6 站点本地地址，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-208"><see langword="true" /> if the IP address is an IPv6 site local address; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv6Teredo">
      <MemberSignature Language="C#" Value="public bool IsIPv6Teredo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv6Teredo" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv6Teredo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv6Teredo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv6Teredo { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-209">了解地址是否为 IPv6 Teredo 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-209">Gets whether the address is an IPv6 Teredo address.</span></span></summary>
        <value>
          <span data-ttu-id="9a370-210">如果 IP 地址为 IPv6 Teredo 地址，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-210"><see langword="true" /> if the IP address is an IPv6 Teredo address; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-211">Teredo 地址是 IPv6 地址的前缀为 2001年:: / 32。</span><span class="sxs-lookup"><span data-stu-id="9a370-211">A Teredo address is an IPv6 address with the prefix of 2001::/32.</span></span> <span data-ttu-id="9a370-212">Teredo 地址可以返回通过正常的 DNS 名称解析或枚举为分配给了本地接口的 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-212">Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)" />
        <altmember cref="M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsLoopback">
      <MemberSignature Language="C#" Value="public static bool IsLoopback (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLoopback(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLoopback (address As IPAddress) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLoopback(System::Net::IPAddress ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="9a370-213">IP 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-213">An IP address.</span></span></param>
        <summary><span data-ttu-id="9a370-214">指示指定的 IP 地址是否为环回地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-214">Indicates whether the specified IP address is the loopback address.</span></span></summary>
        <returns>
          <span data-ttu-id="9a370-215">如果 <paramref name="address" /> 是环回地址，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-215"><see langword="true" /> if <paramref name="address" /> is the loopback address; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-216"><xref:System.Net.IPAddress.IsLoopback%2A>方法进行比较`address`到<xref:System.Net.IPAddress.Loopback>并返回`true`如果两个 IP 地址相同。</span><span class="sxs-lookup"><span data-stu-id="9a370-216">The <xref:System.Net.IPAddress.IsLoopback%2A> method compares `address` to <xref:System.Net.IPAddress.Loopback> and returns `true` if the two IP addresses are the same.</span></span>  
  
 <span data-ttu-id="9a370-217">对于 IPv4，，<xref:System.Net.IPAddress.IsLoopback%2A>方法返回`true`窗体的任何 IP 地址 127.X.Y.Z （其中 X、 Y 和 Z 为 0-255 范围内），不只是<xref:System.Net.IPAddress.Loopback>(127.0.0.1)。</span><span class="sxs-lookup"><span data-stu-id="9a370-217">In the case of IPv4, that the <xref:System.Net.IPAddress.IsLoopback%2A> method returns `true` for any IP address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not just <xref:System.Net.IPAddress.Loopback> (127.0.0.1).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a370-218">下面的代码示例使用<xref:System.Net.IPAddress.IsLoopback%2A>方法来确定指定的地址是否环回地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-218">The following code example uses the <xref:System.Net.IPAddress.IsLoopback%2A> method to determine whether the specified address is a loopback address.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/CPP/isloopback.cpp#1)]
 [!code-csharp[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/CS/isloopback.cs#1)]
 [!code-vb[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/VB/isloopback.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loopback">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress Loopback;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress Loopback" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.Loopback" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Loopback As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ Loopback;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-219">提供 IP 环回地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-219">Provides the IP loopback address.</span></span> <span data-ttu-id="9a370-220">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="9a370-220">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-221"><xref:System.Net.IPAddress.Loopback>字段等效于 127.0.0.1 以点分隔的四表示法。</span><span class="sxs-lookup"><span data-stu-id="9a370-221">The <xref:System.Net.IPAddress.Loopback> field is equivalent to 127.0.0.1 in dotted-quad notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a370-222">下面的示例将打印<xref:System.Net.IPAddress.Loopback>地址到控制台。</span><span class="sxs-lookup"><span data-stu-id="9a370-222">The following example prints the <xref:System.Net.IPAddress.Loopback> address to the console.</span></span>  
  
 [!code-cpp[IPAddress_Broadcast_Loopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CPP/ipaddress_broadcast_loopback.cpp#1)]
 [!code-csharp[IPAddress_Broadcast_Loopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CS/ipaddress_broadcast_loopback.cs#1)]
 [!code-vb[IPAddress_Broadcast_Loopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/VB/ipaddress_broadcast_loopback.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapToIPv4">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress MapToIPv4 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.IPAddress MapToIPv4() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.MapToIPv4" />
      <MemberSignature Language="VB.NET" Value="Public Function MapToIPv4 () As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::IPAddress ^ MapToIPv4();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a370-223">将 <see cref="T:System.Net.IPAddress" /> 对象映射到 IPv4 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-223">Maps the <see cref="T:System.Net.IPAddress" /> object to an IPv4 address.</span></span></summary>
        <returns><span data-ttu-id="9a370-224">返回 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-224">Returns <see cref="T:System.Net.IPAddress" />.</span></span>  
  
 <span data-ttu-id="9a370-225">IPv4 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-225">An IPv4 address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-226">双堆栈套接字始终需要 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-226">Dual-stack sockets always require IPv6 addresses.</span></span> <span data-ttu-id="9a370-227">能够为 IPv4 地址进行交互需要使用 IPv4 映射 IPv6 地址格式。</span><span class="sxs-lookup"><span data-stu-id="9a370-227">The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</span></span> <span data-ttu-id="9a370-228">必须以 IPv4 映射 IPv6 地址格式，这使得 IPv6 唯一应用程序与一个 IPv4 节点进行通信来表示任何 IPv4 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-228">Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</span></span> <span data-ttu-id="9a370-229">IPv4 映射 IPv6 地址格式允许一个 IPv4 节点表示为 IPv6 地址的 IPv4 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-229">The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</span></span> <span data-ttu-id="9a370-230">IPv4 地址编码为低序位 32 位的 IPv6 地址，并且高序位 96 位保留固定的前缀 0:0:0:0:0:FFFF。</span><span class="sxs-lookup"><span data-stu-id="9a370-230">The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</span></span> <span data-ttu-id="9a370-231">RFC 4291 中指定的 IPv4 映射 IPv6 地址格式。</span><span class="sxs-lookup"><span data-stu-id="9a370-231">The IPv4-mapped IPv6 address format is specified in RFC 4291.</span></span> <span data-ttu-id="9a370-232">有关详细信息，请参阅[www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231)。</span><span class="sxs-lookup"><span data-stu-id="9a370-232">For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).</span></span>  
  
 <span data-ttu-id="9a370-233">如果你想要使用<xref:System.Net.IPAddress.MapToIPv4%2A>为从 IPv6 格式的 IPv4 地址转换为 IPv4 格式，你必须首先确保你已获取 IPv4 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-233">If you want to use <xref:System.Net.IPAddress.MapToIPv4%2A> to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you've got an IPv4 address.</span></span> <span data-ttu-id="9a370-234">调用<xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A>，这样就会返回`true`如果 IP 地址最初编写为 IPv6 的 IPv4 或`false`否则为。</span><span class="sxs-lookup"><span data-stu-id="9a370-234">Call <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A>, which will return `true` if the IP address is originally IPv4 written as IPv6, or `false` otherwise.</span></span> <span data-ttu-id="9a370-235">如果<xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A>返回`true`，使用<xref:System.Net.IPAddress.MapToIPv4%2A>进行转换。</span><span class="sxs-lookup"><span data-stu-id="9a370-235">If <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A> returns `true`, use <xref:System.Net.IPAddress.MapToIPv4%2A> to make the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapToIPv6">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress MapToIPv6 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.IPAddress MapToIPv6() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.MapToIPv6" />
      <MemberSignature Language="VB.NET" Value="Public Function MapToIPv6 () As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::IPAddress ^ MapToIPv6();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a370-236">将 <see cref="T:System.Net.IPAddress" /> 对象映射到 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-236">Maps the <see cref="T:System.Net.IPAddress" /> object to an IPv6 address.</span></span></summary>
        <returns><span data-ttu-id="9a370-237">返回 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-237">Returns <see cref="T:System.Net.IPAddress" />.</span></span>  
  
 <span data-ttu-id="9a370-238">IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-238">An IPv6 address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-239">双堆栈套接字始终需要 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-239">Dual-stack sockets always require IPv6 addresses.</span></span> <span data-ttu-id="9a370-240">能够为 IPv4 地址进行交互需要使用 IPv4 映射 IPv6 地址格式。</span><span class="sxs-lookup"><span data-stu-id="9a370-240">The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</span></span> <span data-ttu-id="9a370-241">必须以 IPv4 映射 IPv6 地址格式，这使得 IPv6 唯一应用程序与一个 IPv4 节点进行通信来表示任何 IPv4 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-241">Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</span></span> <span data-ttu-id="9a370-242">IPv4 映射 IPv6 地址格式允许一个 IPv4 节点表示为 IPv6 地址的 IPv4 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-242">The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</span></span> <span data-ttu-id="9a370-243">IPv4 地址编码为低序位 32 位的 IPv6 地址，并且高序位 96 位保留固定的前缀 0:0:0:0:0:FFFF。</span><span class="sxs-lookup"><span data-stu-id="9a370-243">The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</span></span> <span data-ttu-id="9a370-244">RFC 4291 中指定的 IPv4 映射 IPv6 地址格式。</span><span class="sxs-lookup"><span data-stu-id="9a370-244">The IPv4-mapped IPv6 address format is specified in RFC 4291.</span></span> <span data-ttu-id="9a370-245">有关详细信息，请参阅[www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231)。</span><span class="sxs-lookup"><span data-stu-id="9a370-245">For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NetworkToHostOrder">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a370-246">将数字由网络字节顺序转换为主机字节顺序。</span><span class="sxs-lookup"><span data-stu-id="9a370-246">Converts a number from network byte order to host byte order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NetworkToHostOrder">
      <MemberSignature Language="C#" Value="public static short NetworkToHostOrder (short network);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 NetworkToHostOrder(int16 network) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetworkToHostOrder (network As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short NetworkToHostOrder(short network);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="network" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="network"><span data-ttu-id="9a370-247">以网络字节顺序表示的要转换的数字。</span><span class="sxs-lookup"><span data-stu-id="9a370-247">The number to convert, expressed in network byte order.</span></span></param>
        <summary><span data-ttu-id="9a370-248">将短值由网络字节顺序转换为主机字节顺序。</span><span class="sxs-lookup"><span data-stu-id="9a370-248">Converts a short value from network byte order to host byte order.</span></span></summary>
        <returns><span data-ttu-id="9a370-249">以主机字节顺序表示的短值。</span><span class="sxs-lookup"><span data-stu-id="9a370-249">A short value, expressed in host byte order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-250">不同的计算机可用于不同的约定排序内多字节的整数值的字节。</span><span class="sxs-lookup"><span data-stu-id="9a370-250">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="9a370-251">首先放置最高有效字节某些计算机 （称为 big endian 顺序） 和其他首先放置的最低有效字节 （称为 little-endian 的顺序）。</span><span class="sxs-lookup"><span data-stu-id="9a370-251">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="9a370-252">若要使用不同的字节顺序的计算机使用，需要将通过网络发送的所有整数值第一次具有最高有效字节的网络字节顺序都发送。</span><span class="sxs-lookup"><span data-stu-id="9a370-252">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="9a370-253"><xref:System.Net.IPAddress.NetworkToHostOrder%2A>方法将从使用网络与主机所使用的字节顺序的字节顺序主机系统存储的多字节的整数值转换为。</span><span class="sxs-lookup"><span data-stu-id="9a370-253">The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a370-254">下面的示例使用<xref:System.Net.IPAddress.NetworkToHostOrder%2A>方法将从网络字节顺序的较短的值转换为主机字节顺序。</span><span class="sxs-lookup"><span data-stu-id="9a370-254">The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert a short value from network byte order to host byte order.</span></span>  
  
 [!code-cpp[IPAddress_NetworkToHost#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#1)]
 [!code-csharp[IPAddress_NetworkToHost#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#1)]
 [!code-vb[IPAddress_NetworkToHost#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="NetworkToHostOrder">
      <MemberSignature Language="C#" Value="public static int NetworkToHostOrder (int network);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 NetworkToHostOrder(int32 network) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetworkToHostOrder (network As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int NetworkToHostOrder(int network);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="network" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="network"><span data-ttu-id="9a370-255">以网络字节顺序表示的要转换的数字。</span><span class="sxs-lookup"><span data-stu-id="9a370-255">The number to convert, expressed in network byte order.</span></span></param>
        <summary><span data-ttu-id="9a370-256">将整数值由网络字节顺序转换为主机字节顺序。</span><span class="sxs-lookup"><span data-stu-id="9a370-256">Converts an integer value from network byte order to host byte order.</span></span></summary>
        <returns><span data-ttu-id="9a370-257">以主机字节顺序表示的整数值。</span><span class="sxs-lookup"><span data-stu-id="9a370-257">An integer value, expressed in host byte order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-258">不同的计算机可用于不同的约定排序内多字节的整数值的字节。</span><span class="sxs-lookup"><span data-stu-id="9a370-258">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="9a370-259">首先放置最高有效字节某些计算机 （称为 big endian 顺序） 和其他首先放置的最低有效字节 （称为 little-endian 的顺序）。</span><span class="sxs-lookup"><span data-stu-id="9a370-259">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="9a370-260">若要使用不同的字节顺序的计算机使用，需要将通过网络发送的所有整数值第一次具有最高有效字节的网络字节顺序都发送。</span><span class="sxs-lookup"><span data-stu-id="9a370-260">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="9a370-261"><xref:System.Net.IPAddress.NetworkToHostOrder%2A>方法将从使用网络与主机所使用的字节顺序的字节顺序主机系统存储的多字节的整数值转换为。</span><span class="sxs-lookup"><span data-stu-id="9a370-261">The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a370-262">下面的示例使用<xref:System.Net.IPAddress.NetworkToHostOrder%2A>方法将从网络字节顺序的整数值转换为主机字节顺序。</span><span class="sxs-lookup"><span data-stu-id="9a370-262">The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert an integer value from network byte order to host byte order.</span></span>  
  
 [!code-cpp[IPAddress_NetworkToHost#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#2)]
 [!code-csharp[IPAddress_NetworkToHost#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#2)]
 [!code-vb[IPAddress_NetworkToHost#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="NetworkToHostOrder">
      <MemberSignature Language="C#" Value="public static long NetworkToHostOrder (long network);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 NetworkToHostOrder(int64 network) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetworkToHostOrder (network As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long NetworkToHostOrder(long network);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="network" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="network"><span data-ttu-id="9a370-263">以网络字节顺序表示的要转换的数字。</span><span class="sxs-lookup"><span data-stu-id="9a370-263">The number to convert, expressed in network byte order.</span></span></param>
        <summary><span data-ttu-id="9a370-264">将长值由网络字节顺序转换为主机字节顺序。</span><span class="sxs-lookup"><span data-stu-id="9a370-264">Converts a long value from network byte order to host byte order.</span></span></summary>
        <returns><span data-ttu-id="9a370-265">以主机字节顺序表示的长值。</span><span class="sxs-lookup"><span data-stu-id="9a370-265">A long value, expressed in host byte order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-266">不同的计算机可用于不同的约定排序内多字节的整数值的字节。</span><span class="sxs-lookup"><span data-stu-id="9a370-266">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="9a370-267">首先放置最高有效字节某些计算机 （称为 big endian 顺序） 和其他首先放置的最低有效字节 （称为 little-endian 的顺序）。</span><span class="sxs-lookup"><span data-stu-id="9a370-267">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="9a370-268">若要使用不同的字节顺序的计算机使用，需要将通过网络发送的所有整数值第一次具有最高有效字节的网络字节顺序都发送。</span><span class="sxs-lookup"><span data-stu-id="9a370-268">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="9a370-269"><xref:System.Net.IPAddress.NetworkToHostOrder%2A>方法将从使用网络与主机所使用的字节顺序的字节顺序主机系统存储的多字节的整数值转换为。</span><span class="sxs-lookup"><span data-stu-id="9a370-269">The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a370-270">下面的示例使用<xref:System.Net.IPAddress.NetworkToHostOrder%2A>方法将从网络字节顺序的长整型值转换为主机字节顺序。</span><span class="sxs-lookup"><span data-stu-id="9a370-270">The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert a long value from network byte order to host byte order.</span></span>  
  
 [!code-cpp[IPAddress_NetworkToHost#3](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#3)]
 [!code-csharp[IPAddress_NetworkToHost#3](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#3)]
 [!code-vb[IPAddress_NetworkToHost#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress None;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress None" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly None As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ None;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-271">提供指示不应使用任何网络接口的 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-271">Provides an IP address that indicates that no network interface should be used.</span></span> <span data-ttu-id="9a370-272">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="9a370-272">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-273"><xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType>方法使用<xref:System.Net.IPAddress.None>字段，则指示<xref:System.Net.Sockets.Socket>必须侦听客户端活动。</span><span class="sxs-lookup"><span data-stu-id="9a370-273">The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> method uses the <xref:System.Net.IPAddress.None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity.</span></span> <span data-ttu-id="9a370-274"><xref:System.Net.IPAddress.None>字段等效于 255.255.255.255 以点分隔的四表示法。</span><span class="sxs-lookup"><span data-stu-id="9a370-274">The <xref:System.Net.IPAddress.None> field is equivalent to 255.255.255.255 in dotted-quad notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a370-275">下面的示例使用<xref:System.Net.IPAddress.None>属性以指示应使用任何网络接口。</span><span class="sxs-lookup"><span data-stu-id="9a370-275">The following example uses the <xref:System.Net.IPAddress.None> property to indicate that no network interface should be used.</span></span>  
  
 [!code-cpp[IPAddress_None#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_None/CPP/ipaddress_none.cpp#1)]
 [!code-csharp[IPAddress_None#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_None/CS/ipaddress_none.cs#1)]
 [!code-vb[IPAddress_None#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_None/VB/ipaddress_none.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.IPAddress Parse (ReadOnlySpan&lt;char&gt; ipString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPAddress Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; ipString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.Parse(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (ipString As ReadOnlySpan(Of Char)) As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::IPAddress ^ Parse(ReadOnlySpan&lt;char&gt; ipString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipString" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="ipString">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.IPAddress Parse (string ipString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPAddress Parse(string ipString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (ipString As String) As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::IPAddress ^ Parse(System::String ^ ipString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ipString"><span data-ttu-id="9a370-276">包含 IP 地址（IPv4 使用点分四组表示法，IPv6 使用冒号十六进制表示法）的字符串。</span><span class="sxs-lookup"><span data-stu-id="9a370-276">A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</span></span></param>
        <summary><span data-ttu-id="9a370-277">将 IP 地址字符串转换为 <see cref="T:System.Net.IPAddress" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="9a370-277">Converts an IP address string to an <see cref="T:System.Net.IPAddress" /> instance.</span></span></summary>
        <returns><span data-ttu-id="9a370-278">一个 <see cref="T:System.Net.IPAddress" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="9a370-278">An <see cref="T:System.Net.IPAddress" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-279">静态<xref:System.Net.IPAddress.Parse%2A>方法创建<xref:System.Net.IPAddress>来自某个 IP 地址和 IPv6 冒号十六进制表示法中的 IPv4 以点分隔四表示法表示的实例。</span><span class="sxs-lookup"><span data-stu-id="9a370-279">The static <xref:System.Net.IPAddress.Parse%2A> method creates an <xref:System.Net.IPAddress> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</span></span>  
  
 <span data-ttu-id="9a370-280">中的部分数 （由句点分隔每个部分）`ipString`确定如何构造的 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-280">The number of parts (each part is separated by a period) in `ipString` determines how the IP address is constructed.</span></span> <span data-ttu-id="9a370-281">一部分地址是直接存储在网络地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-281">A one part address is stored directly in the network address.</span></span> <span data-ttu-id="9a370-282">由两部分地址，为指定类的地址，方便将前导部分中的第一个字节和尾随部分以最右侧的三个字节为单位的网络地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-282">A two part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address.</span></span> <span data-ttu-id="9a370-283">三个一部分地址，用于指定 B 类地址，方便会将的第一个字节，第二部分中的第二个字节，并以最右侧的两个字节为单位的网络地址的最后一部分的第一部分。</span><span class="sxs-lookup"><span data-stu-id="9a370-283">A three part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address.</span></span> <span data-ttu-id="9a370-284">例如:</span><span class="sxs-lookup"><span data-stu-id="9a370-284">For example:</span></span>  
  
|<span data-ttu-id="9a370-285">部件和示例的数量 `ipString`</span><span class="sxs-lookup"><span data-stu-id="9a370-285">Number of parts and example `ipString`</span></span>|<span data-ttu-id="9a370-286">Ip 地址的 IPv4 地址</span><span class="sxs-lookup"><span data-stu-id="9a370-286">IPv4 address for IPAddress</span></span>|  
|--------------------------------------------|--------------------------------|  
|<span data-ttu-id="9a370-287">1 -- "65535"</span><span class="sxs-lookup"><span data-stu-id="9a370-287">1 -- "65535"</span></span>|<span data-ttu-id="9a370-288">0.0.255.255</span><span class="sxs-lookup"><span data-stu-id="9a370-288">0.0.255.255</span></span>|  
|<span data-ttu-id="9a370-289">2 -- "20.2"</span><span class="sxs-lookup"><span data-stu-id="9a370-289">2 -- "20.2"</span></span>|<span data-ttu-id="9a370-290">20.0.0.2</span><span class="sxs-lookup"><span data-stu-id="9a370-290">20.0.0.2</span></span>|  
|<span data-ttu-id="9a370-291">2 -- "20.65535"</span><span class="sxs-lookup"><span data-stu-id="9a370-291">2 -- "20.65535"</span></span>|<span data-ttu-id="9a370-292">20.0.255.255</span><span class="sxs-lookup"><span data-stu-id="9a370-292">20.0.255.255</span></span>|  
|<span data-ttu-id="9a370-293">3 -- "128.1.2"</span><span class="sxs-lookup"><span data-stu-id="9a370-293">3 -- "128.1.2"</span></span>|<span data-ttu-id="9a370-294">128.1.0.2</span><span class="sxs-lookup"><span data-stu-id="9a370-294">128.1.0.2</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a370-295">下面的代码将包含 IP 地址，或对于 IPv6，到的实例的冒号十六进制表示法中的 IPv4 以点分隔四表示法中的字符串转换<xref:System.Net.IPAddress>类。</span><span class="sxs-lookup"><span data-stu-id="9a370-295">The following code converts a string that contains an IP address, in dotted-quad notation for IPv4 or in colon-hexadecimal notation for IPv6, into an instance of the <xref:System.Net.IPAddress> class.</span></span> <span data-ttu-id="9a370-296">然后，它使用重载<xref:System.Net.IPAddress.ToString%2A>方法以显示在标准表示法的地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-296">Then it uses the overloaded <xref:System.Net.IPAddress.ToString%2A> method to display the address in standard notation.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.Parse#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.Parse/CPP/parse.cpp#1)]
 [!code-csharp[System.Net.IPAddress.Parse#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.Parse/CS/parse.cs#1)]
 [!code-vb[System.Net.IPAddress.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.Parse/VB/parse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9a370-297"><paramref name="ipString" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-297"><paramref name="ipString" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="9a370-298"><paramref name="ipString" /> 不是有效的 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-298"><paramref name="ipString" /> is not a valid IP address.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ScopeId">
      <MemberSignature Language="C#" Value="public long ScopeId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ScopeId" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.ScopeId" />
      <MemberSignature Language="VB.NET" Value="Public Property ScopeId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ScopeId { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a370-299">获取或设置 IPv6 地址范围标识符。</span><span class="sxs-lookup"><span data-stu-id="9a370-299">Gets or sets the IPv6 address scope identifier.</span></span></summary>
        <value><span data-ttu-id="9a370-300">指定地址范围的长整数。</span><span class="sxs-lookup"><span data-stu-id="9a370-300">A long integer that specifies the scope of the address.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-301">含义<xref:System.Net.IPAddress.ScopeId%2A>具体取决于使用它的上下文的更改。</span><span class="sxs-lookup"><span data-stu-id="9a370-301">The meaning of <xref:System.Net.IPAddress.ScopeId%2A> changes depending on the context in which it is used.</span></span>  
  
-   <span data-ttu-id="9a370-302">链接-本地地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-302">Link-local address.</span></span> <span data-ttu-id="9a370-303">在主机上具有多个接口连接到单个链接，可以将相同的链接本地地址分配给多个接口。</span><span class="sxs-lookup"><span data-stu-id="9a370-303">On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces.</span></span> <span data-ttu-id="9a370-304">若要消除这种混乱情况，作用域标识符用于指定交换消息的接口。</span><span class="sxs-lookup"><span data-stu-id="9a370-304">To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a370-305">链接-本地地址，由格式前缀 (FP) FE80，标识节点所使用的与相同链路上的两个邻近节点通信时。</span><span class="sxs-lookup"><span data-stu-id="9a370-305">Link-local addresses, identified by the Format Prefix (FP) FE80, are used by nodes when communicating with neighboring nodes on the same link.</span></span>  
  
-   <span data-ttu-id="9a370-306">站点本地地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-306">Site-local addresses.</span></span> <span data-ttu-id="9a370-307">主机可以连接到多个站点。</span><span class="sxs-lookup"><span data-stu-id="9a370-307">A host can be connected to multiple sites.</span></span> <span data-ttu-id="9a370-308">在这种情况下，作用域标识符用于指示特定站点与进行通信。</span><span class="sxs-lookup"><span data-stu-id="9a370-308">In this case, a scope identifier is used to indicate a specific site to communicate with.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a370-309">站点本地地址，由格式前缀 (FP) FEC0，标识节点所使用的通信在专用 intranet 上时。</span><span class="sxs-lookup"><span data-stu-id="9a370-309">Site-local addresses, identified by the Format Prefix (FP) FEC0, are used by nodes when communicating on private intranets.</span></span>  
  
 <span data-ttu-id="9a370-310">用于指定的表示法`ScopeId`与地址`Address%ScopeId`。</span><span class="sxs-lookup"><span data-stu-id="9a370-310">The notation that is used to specify the `ScopeId` with an address is `Address%ScopeId`.</span></span> <span data-ttu-id="9a370-311">例如，`FE80::5EFE:192.168.41.30%2.`</span><span class="sxs-lookup"><span data-stu-id="9a370-311">For example, `FE80::5EFE:192.168.41.30%2.`</span></span>  
  
   
  
## Examples  
 [!code-cpp[System.Net.IPAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#3)]
 [!code-csharp[System.Net.IPAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#3)]
 [!code-vb[System.Net.IPAddress#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="9a370-312"><see langword="AddressFamily" /> = <see langword="InterNetwork" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-312"><see langword="AddressFamily" /> = <see langword="InterNetwork" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9a370-313"><paramref name="scopeId" /> &lt; 0</span><span class="sxs-lookup"><span data-stu-id="9a370-313"><paramref name="scopeId" /> &lt; 0</span></span>  
  
 <span data-ttu-id="9a370-314">\- 或 -</span><span class="sxs-lookup"><span data-stu-id="9a370-314">\- or -</span></span>  
  
-   <span data-ttu-id="9a370-315"><paramref name="scopeId" />&gt; 0x00000000FFFFFFFF</span><span class="sxs-lookup"><span data-stu-id="9a370-315"><paramref name="scopeId" /> &gt; 0x00000000FFFFFFFF</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a370-316">将 Internet 地址转换为标准表示法。</span><span class="sxs-lookup"><span data-stu-id="9a370-316">Converts an Internet address to its standard notation.</span></span></summary>
        <returns><span data-ttu-id="9a370-317">包含 IP 地址（IPv4 使用点分四组表示法，IPv6 使用冒号十六进制表示法）的字符串。</span><span class="sxs-lookup"><span data-stu-id="9a370-317">A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-318"><xref:System.Net.IPAddress.ToString%2A>方法将转换的存储中的 IP 地址<xref:System.Net.IPAddress.Address%2A>到 IPv4 以点分隔四或 IPv6 冒号十六进制表示法表示的属性。</span><span class="sxs-lookup"><span data-stu-id="9a370-318">The <xref:System.Net.IPAddress.ToString%2A> method converts the IP address that is stored in the <xref:System.Net.IPAddress.Address%2A> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="9a370-319">该地址族为 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />，而且该地址是错误的。</span><span class="sxs-lookup"><span data-stu-id="9a370-319">The address family is <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> and the address is bad.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.TryFormat(System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryFormat(Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; ipString, out System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; ipString, [out] class System.Net.IPAddress&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.TryParse(System.ReadOnlySpan{System.Char},System.Net.IPAddress@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (ipString As ReadOnlySpan(Of Char), ByRef address As IPAddress) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; ipString, [Runtime::InteropServices::Out] System::Net::IPAddress ^ % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipString" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="address" Type="System.Net.IPAddress&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ipString">To be added.</param>
        <param name="address">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string ipString, out System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string ipString, [out] class System.Net.IPAddress&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (ipString As String, ByRef address As IPAddress) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ ipString, [Runtime::InteropServices::Out] System::Net::IPAddress ^ % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipString" Type="System.String" />
        <Parameter Name="address" Type="System.Net.IPAddress&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ipString"><span data-ttu-id="9a370-320">要验证的字符串。</span><span class="sxs-lookup"><span data-stu-id="9a370-320">The string to validate.</span></span></param>
        <param name="address"><span data-ttu-id="9a370-321">字符串的 <see cref="T:System.Net.IPAddress" /> 版本。</span><span class="sxs-lookup"><span data-stu-id="9a370-321">The <see cref="T:System.Net.IPAddress" /> version of the string.</span></span></param>
        <summary><span data-ttu-id="9a370-322">确定字符串是否为有效 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-322">Determines whether a string is a valid IP address.</span></span></summary>
        <returns>
          <span data-ttu-id="9a370-323">如果 <paramref name="ipString" /> 能解析 IP 地址，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a370-323"><see langword="true" /> if <paramref name="ipString" /> was able to be parsed as an IP address; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a370-324">请注意，此方法接受为有效可以解析为 ipString 值<xref:System.Int64>，然后将该 Int64 视为长整型值的网络字节顺序，类似的方式中的 IP 地址和，<xref:System.Net.IPAddress.%23ctor%2A>构造函数未。</span><span class="sxs-lookup"><span data-stu-id="9a370-324">Note that this method accepts as valid an ipString value that can be parsed as an <xref:System.Int64>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <xref:System.Net.IPAddress.%23ctor%2A> constructor does.</span></span> <span data-ttu-id="9a370-325">这意味着此方法返回如果 Int64 解析成功，则为 true，即使它表示不是有效的 IP 地址的地址。</span><span class="sxs-lookup"><span data-stu-id="9a370-325">This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address.</span></span> <span data-ttu-id="9a370-326">例如，如果 ipString 为"1"，此方法返回 true 即使"1"（或 0.0.0.1） 不是有效的 IP 地址和你所料此方法以返回 false。</span><span class="sxs-lookup"><span data-stu-id="9a370-326">For example, if ipString is "1", this method returns true even though "1" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false.</span></span> <span data-ttu-id="9a370-327">修复此 bug 将会破坏现有的应用，因此将不会更改当前行为。</span><span class="sxs-lookup"><span data-stu-id="9a370-327">Fixing this bug would break existing apps, so the current behavior will not be changed.</span></span> <span data-ttu-id="9a370-328">你的代码可以通过确保它仅使用此方法进行分析以点分隔的十进制格式的 IP 地址来避免此行为。</span><span class="sxs-lookup"><span data-stu-id="9a370-328">Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public bool TryWriteBytes (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.TryWriteBytes(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryWriteBytes (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryWriteBytes(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>