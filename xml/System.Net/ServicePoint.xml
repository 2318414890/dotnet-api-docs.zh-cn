<Type Name="ServicePoint" FullName="System.Net.ServicePoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a3a675cc93f75ebd7462a2679bc072e59694b049" />
    <Meta Name="ms.sourcegitcommit" Value="3507e865a3613c00760f25ad1045aaa11bae4dd8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/23/2018" />
    <Meta Name="ms.locfileid" Value="31780499" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServicePoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServicePoint extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.ServicePoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ServicePoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServicePoint" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.ServicePoint</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供 HTTP 连接的连接管理。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.ServicePoint>类处理连接到 Internet 资源基于传递中资源的统一资源标识符 (URI) 的主机信息。 与资源的初始连接确定信息的<xref:System.Net.ServicePoint>对象维护，然后对该资源的所有后续请求的共享。  
  
 <xref:System.Net.ServicePoint> 对象由<xref:System.Net.ServicePointManager>类，并创建，如有必要，通过<xref:System.Net.ServicePointManager.FindServicePoint%2A?displayProperty=nameWithType>方法。 <xref:System.Net.ServicePoint> 对象永远不会直接创建，但始终创建和管理通过<xref:System.Net.ServicePointManager>类。 最大数<xref:System.Net.ServicePoint>可以创建的对象将由<xref:System.Net.ServicePointManager.MaxServicePoints?displayProperty=nameWithType>属性。  
  
 每个<xref:System.Net.ServicePoint>对象维护其连接，对 Internet 资源直到空闲时间超过指定的时间<xref:System.Net.ServicePoint.MaxIdleTime>属性。 当<xref:System.Net.ServicePoint>超过<xref:System.Net.ServicePoint.MaxIdleTime>值，它可以回收到另一个连接。 默认值<xref:System.Net.ServicePoint.MaxIdleTime>由设置<xref:System.Net.ServicePointManager.MaxServicePointIdleTime?displayProperty=nameWithType>属性。  
  
 当<xref:System.Net.ServicePoint.ConnectionLeaseTimeout>属性设置为-1，并且指定的时间过后，活动以外的值<xref:System.Net.ServicePoint>它服务下一个请求之后关闭连接。 这是适用于应用程序就是默认情况下不需要无限期，打开的活动连接。  
  
> [!NOTE]
>  在高负载情况下，某些应用程序可能耗尽线程池，这可能导致系统性能低下 （如高和变量事务时间） 中的可用线程。 请参阅[ http://msdn.microsoft.com/library/default.asp?url=/library/dnpag/html/scalenetchapt17.asp ](http://msdn.microsoft.com/library/default.asp?url=/library/dnpag/html/scalenetchapt17.asp)提供大量可以进行若要解决此问题的配置更改。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Net.ServicePoint>连接到 URI www.contoso.com 的对象。  
  
 [!code-cpp[System.Net.ServicePoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#1)]
 [!code-csharp[System.Net.ServicePoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#1)]
 [!code-vb[System.Net.ServicePoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public Uri Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Address { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此 <see cref="T:System.Net.ServicePoint" /> 对象连接到的服务器的统一资源标识符 (URI)。</summary>
        <value>
          <see cref="T:System.Uri" /> 类的实例，包含此 <see cref="T:System.Net.ServicePoint" /> 对象连接到的 Internet 服务器的 URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例显示此属性的值。  
  
 [!code-cpp[System.Net.ServicePoint#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#2)]
 [!code-csharp[System.Net.ServicePoint#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#2)]
 [!code-vb[System.Net.ServicePoint#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Net.ServicePoint" /> 处于宿主模式。</exception>
        <permission cref="T:System.Net.WebPermission">使用<see cref="P:System.Net.ServicePoint.Address" />如果<see cref="T:System.Net.ServicePoint" />通过代理服务器进行连接。</permission>
      </Docs>
    </Member>
    <Member MemberName="BindIPEndPointDelegate">
      <MemberSignature Language="C#" Value="public System.Net.BindIPEndPoint BindIPEndPointDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.BindIPEndPoint BindIPEndPointDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.BindIPEndPointDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property BindIPEndPointDelegate As BindIPEndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::BindIPEndPoint ^ BindIPEndPointDelegate { System::Net::BindIPEndPoint ^ get(); void set(System::Net::BindIPEndPoint ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.BindIPEndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定用于将本地 <see cref="T:System.Net.IPEndPoint" /> 与 <see cref="T:System.Net.ServicePoint" /> 关联的委托。</summary>
        <value>强制 <see cref="T:System.Net.ServicePoint" /> 使用特定的本地 Internet 协议 (IP) 地址和端口号的委托。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一些负载平衡技术需要客户端使用特定本地 IP 地址和端口号，而不是<xref:System.Net.IPAddress.Any?displayProperty=nameWithType>(或<xref:System.Net.IPAddress.IPv6Any?displayProperty=nameWithType>的 Internet 协议版本 6) 和临时端口。 你<xref:System.Net.ServicePoint.BindIPEndPointDelegate>可满足此要求。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于绑定到的本地端口。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Certificate">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509Certificate Certificate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509Certificate Certificate" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.Certificate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Certificate As X509Certificate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::X509Certificates::X509Certificate ^ Certificate { System::Security::Cryptography::X509Certificates::X509Certificate ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取为此 <see cref="T:System.Net.ServicePoint" /> 对象接收的证书。</summary>
        <value>
          <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 类的实例，包含为此 <see cref="T:System.Net.ServicePoint" /> 对象接收的安全证书。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管<xref:System.Net.ServicePoint>对象可能会使对 Internet 资源的多个连接，它可以维护只有一个证书。  
  
   
  
## Examples  
 下面的代码示例显示此属性的值。  
  
 [!code-cpp[System.Net.ServicePoint#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#5)]
 [!code-csharp[System.Net.ServicePoint#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#5)]
 [!code-vb[System.Net.ServicePoint#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificate">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509Certificate ClientCertificate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509Certificate ClientCertificate" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.ClientCertificate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientCertificate As X509Certificate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::X509Certificates::X509Certificate ^ ClientCertificate { System::Security::Cryptography::X509Certificates::X509Certificate ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取发送到服务器的上一个客户端证书。</summary>
        <value>
          <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象，包含发送到服务器的上一个客户端证书的公共值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例显示此属性的值。  
  
 [!code-cpp[System.Net.ServicePoint#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#5)]
 [!code-csharp[System.Net.ServicePoint#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#5)]
 [!code-vb[System.Net.ServicePoint#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseConnectionGroup">
      <MemberSignature Language="C#" Value="public bool CloseConnectionGroup (string connectionGroupName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CloseConnectionGroup(string connectionGroupName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.ServicePoint.CloseConnectionGroup(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CloseConnectionGroup (connectionGroupName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CloseConnectionGroup(System::String ^ connectionGroupName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionGroupName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionGroupName">连接组的名称，该连接组包含要关闭的和要从此服务点移除的连接。</param>
        <summary>从此 <see cref="T:System.Net.ServicePoint" /> 对象移除指定的连接组。</summary>
        <returns>指示连接组是否关闭的 <see cref="T:System.Boolean" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 连接组将一组请求与一个特定连接或一组的连接相关联。 此方法中删除，并关闭属于指定的连接组的所有连接。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionLeaseTimeout">
      <MemberSignature Language="C#" Value="public int ConnectionLeaseTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionLeaseTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.ConnectionLeaseTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ConnectionLeaseTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ConnectionLeaseTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在多少毫秒之后关闭活动 <see cref="T:System.Net.ServicePoint" /> 连接。</summary>
        <value>
          <see cref="T:System.Int32" />，它指定活动 <see cref="T:System.Net.ServicePoint" /> 连接保持打开的毫秒数。 默认值为 -1，这样活动 <see cref="T:System.Net.ServicePoint" /> 连接可以无限期保持连接。 将此属性设置为 0 可在 <see cref="T:System.Net.ServicePoint" /> 连接为请求提供服务之后强制关闭该连接。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用此属性以确保<xref:System.Net.ServicePoint>对象的活动连接不会保留打开无限期。 此属性适用于方案应删除并定期，如负载平衡方案重新建立连接。  
  
 默认情况下，当<xref:System.Net.HttpWebRequest.KeepAlive>是`true`对于请求，<xref:System.Net.ServicePoint.MaxIdleTime>属性设置为关闭的超时值<xref:System.Net.ServicePoint>由于无活动的连接。 如果<xref:System.Net.ServicePoint>具有活动连接，<xref:System.Net.ServicePoint.MaxIdleTime>有影响，并且连接无限期地保持打开。  
  
 当<xref:System.Net.ServicePoint.ConnectionLeaseTimeout>属性设置为-1，并且指定的时间过后，活动以外的值<xref:System.Net.ServicePoint>为请求提供服务通过设置后关闭连接<xref:System.Net.HttpWebRequest.KeepAlive>到`false`该请求中。  
  
 设置此值将影响所有连接由<xref:System.Net.ServicePoint>对象。  
  
   
  
## Examples  
 下面的代码示例设置此属性的值。  
  
 [!code-cpp[NCLServicePoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLServicePoint/CPP/nclservicepoint.cpp#1)]
 [!code-csharp[NCLServicePoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLServicePoint/CS/nclservicepoint.cs#1)]
 [!code-vb[NCLServicePoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLServicePoint/VB/nclservicepoint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">为 Set 操作指定的值为小于 -1 的负数。</exception>
        <altmember cref="P:System.Net.HttpWebRequest.KeepAlive" />
        <altmember cref="P:System.Net.FtpWebRequest.KeepAlive" />
        <altmember cref="P:System.Net.HttpListenerRequest.KeepAlive" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionLimit">
      <MemberSignature Language="C#" Value="public int ConnectionLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionLimit" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.ConnectionLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property ConnectionLimit As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ConnectionLimit { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Net.ServicePoint" /> 对象上允许的最大连接数。</summary>
        <value>此 <see cref="T:System.Net.ServicePoint" /> 对象上允许的最大连接数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.ServicePoint.ConnectionLimit>属性设置的最大连接数<xref:System.Net.ServicePoint>对象可以对 Internet 资源。 值<xref:System.Net.ServicePoint.ConnectionLimit>属性设置为的值<xref:System.Net.ServicePointManager.DefaultConnectionLimit?displayProperty=nameWithType>属性时<xref:System.Net.ServicePoint>创建对象; 后续更改为<xref:System.Net.ServicePointManager.DefaultConnectionLimit>对现有没有影响<xref:System.Net.ServicePoint>对象。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Net.ServicePoint.ConnectionLimit>属性检查的最大连接数，<xref:System.Net.ServicePoint>对象可以建立到指定的统一资源标识符 (URI)。  
  
 [!code-cpp[System.Net.ServicePoint#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#4)]
 [!code-csharp[System.Net.ServicePoint#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#4)]
 [!code-vb[System.Net.ServicePoint#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">连接限制为 0 或小于 0。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionName">
      <MemberSignature Language="C#" Value="public string ConnectionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionName" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.ConnectionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConnectionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConnectionName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取连接名。</summary>
        <value>一个表示连接名的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Net.ServicePoint>对象通过调用构造<xref:System.Net.ServicePointManager.FindServicePoint%2A>重载<xref:System.Uri>自变量，则<xref:System.Net.ServicePoint.ConnectionName>属性表示<xref:System.Uri.Scheme>属性<xref:System.Uri>使用的对象。  
  
 如果<xref:System.Net.ServicePoint>对象从网络主机和端口，构造<xref:System.Net.ServicePoint.ConnectionName>属性包含一个字符串，表示主机和网络端口。 如果<xref:System.Net.ServicePoint.ConnectionName>属性设置从主机和端口，仅在构造时<xref:System.Net.WebRequest>对象具有相同<xref:System.Net.WebRequest.ConnectionGroupName>值可以使用此<xref:System.Net.ServicePoint>对象。  
  
   
  
## Examples  
 [!code-cpp[System.Net.ServicePoint#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#4)]
 [!code-csharp[System.Net.ServicePoint#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#4)]
 [!code-vb[System.Net.ServicePoint#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentConnections">
      <MemberSignature Language="C#" Value="public int CurrentConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentConnections" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.CurrentConnections" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentConnections As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentConnections { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与此 <see cref="T:System.Net.ServicePoint" /> 对象关联的打开连接的数目。</summary>
        <value>与此 <see cref="T:System.Net.ServicePoint" /> 对象关联的打开连接的数目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.ServicePoint.CurrentConnections>属性包含与此关联的打开 Internet 连接数<xref:System.Net.ServicePoint>对象。 值<xref:System.Net.ServicePoint.CurrentConnections>不能超出<xref:System.Net.ServicePoint.ConnectionLimit>。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Net.ServicePoint.CurrentConnections>属性来确定与此关联的打开 Internet 连接数<xref:System.Net.ServicePoint>对象。  
  
 [!code-cpp[System.Net.ServicePoint#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#2)]
 [!code-csharp[System.Net.ServicePoint#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#2)]
 [!code-vb[System.Net.ServicePoint#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Expect100Continue">
      <MemberSignature Language="C#" Value="public bool Expect100Continue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Expect100Continue" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.Expect100Continue" />
      <MemberSignature Language="VB.NET" Value="Public Property Expect100Continue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Expect100Continue { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值确定是否使用 100-Continue 行为。</summary>
        <value>
          如果 <see langword="POST" /> 请求需要 100-Continue 响应，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当此属性设置为`true`，客户端请求使用`POST`方法应该可以接收 100-继续从要指示客户端应发送要发布的数据的服务器的响应。 此机制允许客户端以避免通过网络发送大量数据时的服务器，根据请求标头，想要拒绝请求。  
  
 例如，假定<xref:System.Net.ServicePoint.Expect100Continue>属性是`false`。 当请求发送到服务器时，它包括数据。 如果在读取请求标头之后, 在服务器要求身份验证和发送的 401 响应，客户端必须重新发送具有正确的身份验证标头的数据。  
  
 如果<xref:System.Net.ServicePoint.Expect100Continue>属性是`true`，请求标头发送到服务器。 如果服务器不拒绝了请求，则将发送一个 100-继续响应信号可以传输数据。 如果如下所示前面的示例中，服务器需要身份验证，将它发送的 401 响应，客户端没有不必要地传输数据。  
  
 更改此属性的值不会影响现有连接。 仅会影响在更改后创建的新连接。  
  
 Expect 100-继续行为完全部分所述 IETF RFC 2616 10.1.1 一起提供。  
  
   
  
## Examples  
 下面的代码示例显示此属性的值。  
  
 [!code-cpp[System.Net.ServicePoint#9](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#9)]
 [!code-csharp[System.Net.ServicePoint#9](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#9)]
 [!code-vb[System.Net.ServicePoint#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IdleSince">
      <MemberSignature Language="C#" Value="public DateTime IdleSince { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime IdleSince" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.IdleSince" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IdleSince As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime IdleSince { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取上次将 <see cref="T:System.Net.ServicePoint" /> 对象连接到主机的日期和时间。</summary>
        <value>
          <see cref="T:System.DateTime" /> 对象，包含上次连接 <see cref="T:System.Net.ServicePoint" /> 对象的日期和时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.ServicePoint.IdleSince>属性记录的最后一个的日期和时间主机中断开服务点。 时的当前时间之间的差异和<xref:System.Net.ServicePoint.IdleSince>超过的值<xref:System.Net.ServicePoint.MaxIdleTime>、<xref:System.Net.ServicePoint>对象是可用于回收到另一个连接。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Net.ServicePoint.IdleSince>属性来设置和检索日期和时间<xref:System.Net.ServicePoint>对象上次连接到主机。  
  
 [!code-cpp[System.Net.ServicePoint#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#3)]
 [!code-csharp[System.Net.ServicePoint#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#3)]
 [!code-vb[System.Net.ServicePoint#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxIdleTime">
      <MemberSignature Language="C#" Value="public int MaxIdleTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxIdleTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.MaxIdleTime" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxIdleTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxIdleTime { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与 <see cref="T:System.Net.ServicePoint" /> 对象关联的连接在关闭前可以持续空闲的时间。</summary>
        <value>与 <see cref="T:System.Net.ServicePoint" /> 对象关联的连接在关闭和重用于另一个连接前可以持续空闲的时间长度（以毫秒为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以设置<xref:System.Net.ServicePoint.MaxIdleTime>到<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>以指示连接是否与<xref:System.Net.ServicePoint>对象永远不应超时。  
  
 默认值<xref:System.Net.ServicePoint.MaxIdleTime>属性是值的<xref:System.Net.ServicePointManager.MaxServicePointIdleTime?displayProperty=nameWithType>属性时<xref:System.Net.ServicePoint>创建对象。 对后续更改<xref:System.Net.ServicePointManager.MaxServicePointIdleTime>属性具有不会影响现有<xref:System.Net.ServicePoint>对象。  
  
 当<xref:System.Net.ServicePoint.MaxIdleTime>与关联的连接<xref:System.Net.ServicePoint>是超出，连接保持打开状态直到应用程序尝试使用该连接。 在那时，框架将关闭连接，并创建一个新连接到远程主机。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Net.ServicePoint.MaxIdleTime>属性用于设置和检索<xref:System.Net.ServicePoint>空闲时间。  
  
 [!code-cpp[System.Net.ServicePoint#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#3)]
 [!code-csharp[System.Net.ServicePoint#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#3)]
 [!code-vb[System.Net.ServicePoint#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Net.ServicePoint.MaxIdleTime" /> 被设置为小于 <see cref="F:System.Threading.Timeout.Infinite" /> 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ProtocolVersion">
      <MemberSignature Language="C#" Value="public virtual Version ProtocolVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version ProtocolVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.ProtocolVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ProtocolVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Version ^ ProtocolVersion { Version ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Net.ServicePoint" /> 对象使用的 HTTP 协议的版本。</summary>
        <value>
          <see cref="T:System.Version" /> 对象，它包含 <see cref="T:System.Net.ServicePoint" /> 对象使用的 HTTP 协议版本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTTP 协议版本是 HTTP/1.0 和 HTTP/1.1。  
  
   
  
## Examples  
 下面的代码示例显示此属性的值。  
  
 [!code-cpp[System.Net.ServicePoint#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#5)]
 [!code-csharp[System.Net.ServicePoint#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#5)]
 [!code-vb[System.Net.ServicePoint#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Net.ServicePoint" /> 使用的套接字的接收缓冲区的大小。</summary>
        <value>包含接收缓冲区的大小（以字节为单位）的 <see cref="T:System.Int32" />。 默认值为 8192。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关附加信息，请参见 <xref:System.Net.Sockets.Socket.ReceiveBufferSize>。  
  
   
  
## Examples  
 下面的代码示例设置此属性的值。  
  
 [!code-cpp[NCLServicePoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLServicePoint/CPP/nclservicepoint.cpp#1)]
 [!code-csharp[NCLServicePoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLServicePoint/CS/nclservicepoint.cs#1)]
 [!code-vb[NCLServicePoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLServicePoint/VB/nclservicepoint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">为 Set 操作指定的值大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetTcpKeepAlive">
      <MemberSignature Language="C#" Value="public void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetTcpKeepAlive(bool enabled, int32 keepAliveTime, int32 keepAliveInterval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetTcpKeepAlive (enabled As Boolean, keepAliveTime As Integer, keepAliveInterval As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetTcpKeepAlive(bool enabled, int keepAliveTime, int keepAliveInterval);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
        <Parameter Name="keepAliveTime" Type="System.Int32" />
        <Parameter Name="keepAliveInterval" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enabled">如果设置为 true，则使用指定的 <c>keepAliveTime</c> 和 <c>keepAliveInterval</c> 值启用 TCP 连接上的 TCP keep-alive 选项。  
  
 如果设置为 false，则将禁用 TCP keep-alive 选项，并忽略剩余参数。  
  
 默认值为 False。</param>
        <param name="keepAliveTime">指定发送第一个 keep-alive 数据包之前没有活动的超时时间（以毫秒为单位）。  
  
 该值必须大于 0。  如果传递的值小于或等于零，则会引发 <see cref="T:System.ArgumentOutOfRangeException" />。</param>
        <param name="keepAliveInterval">指定当未收到确认消息时发送连续 keep-alive 数据包之间的间隔（以毫秒为单位）。  
  
 该值必须大于 0。  如果传递的值小于或等于零，则会引发 <see cref="T:System.ArgumentOutOfRangeException" />。</param>
        <summary>对 TCP 连接启用或禁用 keep-alive 选项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序可以请求 TCP/IP 提供程序启用的 TCP 连接上的保持连接数据包使用。 默认为禁用了 TCP 连接上的保持连接数据包的使用。  
  
 默认设置 TCP 套接字时初始化到 2 小时内保持活动状态设置超时和保持活动状态的间隔为 1 秒。 `keepAliveTime`参数指定超时，以毫秒为单位，发送第一个 keep-alive 数据包之前没有活动。 `keepAliveInterval`参数指定的间隔，以毫秒为单位，之间时收到任何确认消息时发送连续 keep-alive 数据包。 保持活动状态的探测数不能更改，并设置为 10。  
  
 如果 TCP 连接删除 keep-alive，因此<xref:System.Net.Sockets.SocketError>的<xref:System.Net.Sockets.SocketError.NetworkReset>套接字，返回的任何正在进行的调用，任何后续调用将失败并<xref:System.Net.Sockets.SocketError>的<xref:System.Net.Sockets.SocketError.NotConnected>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">为 <paramref name="keepAliveTime" /> 或 <paramref name="keepAliveInterval" /> 参数指定的值小于等于 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsPipelining">
      <MemberSignature Language="C#" Value="public bool SupportsPipelining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsPipelining" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.SupportsPipelining" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsPipelining As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsPipelining { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示 <see cref="T:System.Net.ServicePoint" /> 对象是否支持管道连接。</summary>
        <value>
          如果 <see cref="T:System.Net.ServicePoint" /> 对象支持管道连接，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 管道允许客户端发送的持续性连接跨多个请求，而无需等待来自服务器的每个响应。 已接收到请求，服务器的相同顺序发送响应。  
  
 IETF RFC 2616 8.1.2.2 部分中的详细描述管道。  
  
   
  
## Examples  
 下面的代码示例显示此属性的值。  
  
 [!code-cpp[System.Net.ServicePoint#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#5)]
 [!code-csharp[System.Net.ServicePoint#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#5)]
 [!code-vb[System.Net.ServicePoint#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseNagleAlgorithm">
      <MemberSignature Language="C#" Value="public bool UseNagleAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseNagleAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePoint.UseNagleAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property UseNagleAlgorithm As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseNagleAlgorithm { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值确定在此 <see cref="T:System.Net.ServicePoint" /> 对象所管理的连接上是否使用 Nagle 算法。</summary>
        <value>
          如果使用 Nagle 算法，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nagle 算法用于缓冲的数据的小型数据包并将它们作为单个数据包传输。 此过程中，称为"nagling"广泛使用，因为它减少了传输数据包的数目，并降低了每个数据包的开销。  
  
 更改此属性的值不会影响现有连接。 仅会影响在更改后创建的新连接。  
  
 Nagle 算法完全述 IETF RFC 896。  
  
   
  
## Examples  
 下面的代码示例显示此属性的值。  
  
 [!code-cpp[System.Net.ServicePoint#9](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#9)]
 [!code-csharp[System.Net.ServicePoint#9](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#9)]
 [!code-vb[System.Net.ServicePoint#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>