<Type Name="WebClient" FullName="System.Net.WebClient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="622b389f29d24bccea58a6db66c7b5e6dd2ea16f" />
    <Meta Name="ms.sourcegitcommit" Value="996ba67625b61917bcf75bfefe6dcb016019c2d8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/02/2018" />
    <Meta Name="ms.locfileid" Value="50965586" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebClient : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebClient extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Net.WebClient" />
  <TypeSignature Language="VB.NET" Value="Public Class WebClient&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebClient : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type WebClient = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.WebClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供用于将数据发送到由 URI 标识的资源及从这样的资源接收数据的常用方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

>  [!IMPORTANT]
>  我们不建议你使用`WebClient`类的新的开发。 请改用<xref:System.Net.Http.HttpClient?displayProperty=nameWithType>类。

 <xref:System.Net.WebClient>类提供了将数据发送到或从任何本地、 intranet 或由 URI 标识的 Internet 资源接收数据的常见方法。  
  
 <xref:System.Net.WebClient>类使用<xref:System.Net.WebRequest>类以提供对资源的访问。 <xref:System.Net.WebClient> 实例可以访问任何数据<xref:System.Net.WebRequest>后代注册<xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=nameWithType>方法。  
  
> [!NOTE]
>  默认情况下，.NET Framework 支持开头的 Uri `http:`， `https:`， `ftp:`，和`file:`方案标识符。  
  
 下表描述了<xref:System.Net.WebClient>方法将数据上传到的资源。  
  
|方法|描述|  
|------------|-----------------|  
|<xref:System.Net.WebClient.OpenWrite%2A>|检索<xref:System.IO.Stream>用于将数据发送到的资源。|  
|<xref:System.Net.WebClient.OpenWriteAsync%2A>|检索<xref:System.IO.Stream>用于将数据发送到资源，而不会阻止调用线程。|  
|<xref:System.Net.WebClient.UploadData%2A>|向资源发送的字节数组，并返回<xref:System.Byte>数组，其中包含的任何响应。|  
|<xref:System.Net.WebClient.UploadDataAsync%2A>|将发送<xref:System.Byte>阵列分区到的资源，而不会阻止调用线程。|  
|<xref:System.Net.WebClient.UploadFile%2A>|将本地文件发送到资源，并返回<xref:System.Byte>数组，其中包含的任何响应。|  
|<xref:System.Net.WebClient.UploadFileAsync%2A>|将本地文件发送到该资源，而不会阻止调用线程。|  
|<xref:System.Net.WebClient.UploadValues%2A>|将发送<xref:System.Collections.Specialized.NameValueCollection>资源，并返回到<xref:System.Byte>数组，其中包含的任何响应。|  
|<xref:System.Net.WebClient.UploadValuesAsync%2A>|将发送<xref:System.Collections.Specialized.NameValueCollection>资源，并返回到<xref:System.Byte>数组，包含任何响应，而不会阻止调用线程。|  
|<xref:System.Net.WebClient.UploadString%2A>|将发送<xref:System.String>的资源，而不会阻止调用线程。|  
|<xref:System.Net.WebClient.UploadStringAsync%2A>|将发送<xref:System.String>的资源，而不会阻止调用线程。|  
  
 下表描述了<xref:System.Net.WebClient>从资源下载数据的方法。  
  
|方法|描述|  
|------------|-----------------|  
|<xref:System.Net.WebClient.OpenRead%2A>|从作为资源返回数据<xref:System.IO.Stream>。|  
|<xref:System.Net.WebClient.OpenReadAsync%2A>|返回从资源，而不会阻止调用线程的数据。|  
|<xref:System.Net.WebClient.DownloadData%2A>|从资源下载数据，并返回<xref:System.Byte>数组。|  
|<xref:System.Net.WebClient.DownloadDataAsync%2A>|从资源下载数据，并返回<xref:System.Byte>数组，而不会阻止调用线程。|  
|<xref:System.Net.WebClient.DownloadFile%2A>|将数据从资源下载到本地文件。|  
|<xref:System.Net.WebClient.DownloadFileAsync%2A>|数据从资源下载到本地文件，而不会阻止调用线程。|  
|<xref:System.Net.WebClient.DownloadString%2A>|下载<xref:System.String>资源，并返回从<xref:System.String>。|  
|<xref:System.Net.WebClient.DownloadStringAsync%2A>|下载<xref:System.String>从资源，而不会阻止调用线程。|  
  
 可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法来取消异步操作尚未完成的。  
  
 一个<xref:System.Net.WebClient>实例不会发送默认情况下的可选 HTTP 标头。 如果您的请求需要的可选标头，则必须添加到标头<xref:System.Net.WebClient.Headers%2A>集合。 例如，若要保留在响应中的查询，必须添加的用户代理标头。 此外，服务器可能会返回 500 （内部服务器错误），如果缺少用户代理标头。  
  
 <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> 设置为`true`在<xref:System.Net.WebClient>实例。  
  
   
  
## Examples  
 下面的代码示例采用资源的 URI，检索它，并显示响应。  
  
 [!code-cpp[NCLWebClientUserAgent#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientUserAgent/CPP/useragent.cpp#1)]
 [!code-csharp[NCLWebClientUserAgent#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientUserAgent/CS/useragent.cs#1)]
 [!code-vb[NCLWebClientUserAgent#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientUserAgent/VB/useragent.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.WebPermission">若要访问请求的 URI 或请求重定向到任何 URI。 关联枚举：<see cref="F:System.Net.NetworkAccess.Connect" />。</permission>
    <block subset="none" type="overrides">
      <para>派生的类应调用基类实现<see cref="T:System.Net.WebClient" />以确保派生的类按预期方式工作。</para>
    </block>
    <altmember cref="T:System.Net.WebRequest" />
    <altmember cref="T:System.Net.WebResponse" />
    <altmember cref="T:System.Net.HttpWebRequest" />
    <altmember cref="T:System.Net.HttpWebResponse" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Net.WebClient" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认构造函数创建的新实例<xref:System.Net.WebClient>类。 默认 HTTP 方法是 GET。 默认 FTP 方法是重试次数。 默认的 <xref:System.Net.WebClient.Encoding%2A> 为 <xref:System.Text.Encoding.Default%2A>。 <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> 的默认值为 `true`。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Net.WebClient>实例并使用它来从服务器下载数据并将其显示在系统控制台上，从服务器下载数据并将其写入到文件中，还可以上载到服务器的窗体值和接收响应。  
  
 [!code-cpp[WebClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient/CPP/webclient.cpp#1)]
 [!code-csharp[WebClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient/CS/webclient.cs#1)]
 [!code-vb[WebClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient/VB/webclient.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowReadStreamBuffering">
      <MemberSignature Language="C#" Value="public bool AllowReadStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowReadStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.AllowReadStreamBuffering" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowReadStreamBuffering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowReadStreamBuffering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowReadStreamBuffering : bool with get, set" Usage="System.Net.WebClient.AllowReadStreamBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否对从某一 <see cref="T:System.Net.WebClient" /> 实例的 Internet 资源读取的数据进行缓冲处理。</summary>
        <value>返回 <see cref="T:System.Boolean" />。  
  
 如果为 <see langword="true" />，则启用对从 Internet 资源接收的数据进行缓冲处理；如果为 <see langword="false" />，则禁用缓冲处理。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Net.WebClient.AllowReadStreamBuffering%2A>属性是`true`，在内存中缓冲数据，因此它已准备好读取的应用程序。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowWriteStreamBuffering">
      <MemberSignature Language="C#" Value="public bool AllowWriteStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowWriteStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.AllowWriteStreamBuffering" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowWriteStreamBuffering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowWriteStreamBuffering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowWriteStreamBuffering : bool with get, set" Usage="System.Net.WebClient.AllowWriteStreamBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否对写入到 <see cref="T:System.Net.WebClient" /> 实例的 Internet 资源的数据进行缓冲处理。</summary>
        <value>返回 <see cref="T:System.Boolean" />。  
  
 <see langword="true" /> 允许对写入到 Internet 资源的数据进行缓冲处理；<see langword="false" /> 禁用缓冲处理。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Net.WebClient.AllowWriteStreamBuffering%2A>属性是`true`，在内存中缓冲数据，因此，可以到更大的区块中的 Internet 资源更高效地编写。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public string BaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseAddress { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : string with get, set" Usage="System.Net.WebClient.BaseAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Net.WebClient" /> 发出请求的基 URI。</summary>
        <value>
          <see cref="T:System.String" />，包含 <see cref="T:System.Net.WebClient" /> 请求的基 URI；如果尚未指定基地址，则为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.BaseAddress%2A>属性包含与相对地址组合的基 URI。 当调用的方法，将上传或下载数据，<xref:System.Net.WebClient>对象将与你在方法调用中指定的相对地址相结合此基 URI。 如果指定一个绝对 URI<xref:System.Net.WebClient>不使用<xref:System.Net.WebClient.BaseAddress%2A>属性值。  
  
 若要移除先前设置值时，请将此属性设置为`null`或空字符串 ("")。  
  
   
  
## Examples  
 下面的代码示例从 Internet 服务器下载数据，并在控制台上显示。 它假设对服务器的地址 (如http://www.contoso.com)处于`hostUri`和资源 （例如 /default.htm) 的路径正在`uriSuffix`。  
  
 [!code-cpp[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#1)]
 [!code-csharp[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#1)]
 [!code-vb[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Net.WebClient.BaseAddress" /> 被设置为无效的 URI。 内部异常可能包含有助于找到错误的信息。</exception>
      </Docs>
    </Member>
    <Member MemberName="CachePolicy">
      <MemberSignature Language="C#" Value="public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Cache.RequestCachePolicy CachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.CachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property CachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Cache::RequestCachePolicy ^ CachePolicy { System::Net::Cache::RequestCachePolicy ^ get(); void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CachePolicy : System.Net.Cache.RequestCachePolicy with get, set" Usage="System.Net.WebClient.CachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>对于此 WebClient 实例使用 <see cref="T:System.Net.WebRequest" /> 对象获得的任何资源，获取或设置应用程序的缓存策略。</summary>
        <value>一个 <see cref="T:System.Net.Cache.RequestCachePolicy" /> 对象，表示应用程序的缓存要求。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="webClient.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取消一个挂起的异步操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果操作处于挂起状态，此方法会调用<xref:System.Net.WebRequest.Abort%2A>对基础<xref:System.Net.WebRequest>。  
  
 当您调用<xref:System.Net.WebClient.CancelAsync%2A>，你的应用程序仍然会收到与该操作关联的完成事件。 例如，当您调用<xref:System.Net.WebClient.CancelAsync%2A>取消<xref:System.Net.WebClient.DownloadStringAsync%2A>操作，如果您指定的事件处理程序<xref:System.Net.WebClient.DownloadStringCompleted>事件，事件处理程序接收操作已结束的通知。 若要了解操作是否成功完成，请<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>属性的类的基类<xref:System.Net.DownloadDataCompletedEventArgs>在事件数据对象传递给事件处理程序。  
  
 如果任何异步操作不正在进行，此方法任何影响。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentials Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::ICredentials ^ Credentials { System::Net::ICredentials ^ get(); void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials with get, set" Usage="System.Net.WebClient.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置发送到主机并用于对请求进行身份验证的网络凭据。</summary>
        <value>一个 <see cref="T:System.Net.ICredentials" />，包含该请求的身份验证凭据。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.Credentials%2A>属性包含用于访问主机上的资源的身份验证凭据。 在大多数客户端的情况下，应使用<xref:System.Net.CredentialCache.DefaultCredentials%2A>，这是当前登录用户的凭据。 若要执行此操作，设置<xref:System.Net.WebClient.UseDefaultCredentials%2A>属性设置为`true`而不是设置此属性。  
  
 如果<xref:System.Net.WebClient>类用于在中间层应用程序，ASP.NET 应用程序，如<xref:System.Net.CredentialCache.DefaultCredentials%2A>属于运行 ASP 页面 （服务器端的凭据） 的帐户。 通常情况下，将此属性设置为客户端的名义发出请求的凭据。  
  
 出于安全原因，操作时自动重定向，你想要包括在中的重定向将凭据存储<xref:System.Net.CredentialCache>并将其分配给此属性。 此属性将自动设置为`null`在重定向，如果它包含所有非时<xref:System.Net.CredentialCache>。 具有此属性的值自动设置为`null`在这些情况下阻止凭据发送到任何非预期的目标。
  
## Examples  
 下面的代码示例使用用户的系统凭据进行身份验证请求。  
  
 [!code-cpp[WebClientAuthentication#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClientAuthentication/CPP/webclientauth.cpp#1)]
 [!code-csharp[WebClientAuthentication#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClientAuthentication/CS/webclientauth.cs#1)]
 [!code-vb[WebClientAuthentication#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClientAuthentication/VB/webclientauth.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="P:System.Net.WebRequest.Credentials" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从指定 URI 下载资源作为 <see cref="T:System.Byte" /> 数组。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadData">
      <MemberSignature Language="C#" Value="public byte[] DownloadData (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DownloadData(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadData (address As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DownloadData(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadData : string -&gt; byte[]" Usage="webClient.DownloadData address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">从中下载数据的 URI。</param>
        <summary>从指定 URI 下载资源作为 <see cref="T:System.Byte" /> 数组。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含下载的资源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.DownloadData%2A>方法使用指定的 URI 下载资源`address`参数。 此方法将阻止下载资源时。 若要下载资源，并继续执行等待服务器的响应时，使用之一<xref:System.Net.WebClient.DownloadDataAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例从服务器请求数据，并显示返回的数据。 它假定`remoteUri`包含所请求的数据的有效 URI。  
  
 [!code-cpp[WebClient_DownloadData#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadData/CPP/webclient_downloaddata.cpp#1)]
 [!code-csharp[WebClient_DownloadData#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadData/CS/webclient_downloaddata.cs#1)]
 [!code-vb[WebClient_DownloadData#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadData/VB/webclient_downloaddata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载数据时发生错误。</exception>
        <exception cref="T:System.NotSupportedException">该方法已在多个线程上同时调用。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadData">
      <MemberSignature Language="C#" Value="public byte[] DownloadData (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DownloadData(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadData(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadData (address As Uri) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DownloadData(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadData : Uri -&gt; byte[]" Usage="webClient.DownloadData address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">由 <see cref="T:System.Uri" /> 对象表示的 URI，可从中下载数据。</param>
        <summary>从指定 URI 下载资源作为 <see cref="T:System.Byte" /> 数组。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含下载的资源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.DownloadData%2A>方法使用指定的 URI 下载资源`address`参数。 此方法将阻止下载资源时。 若要下载资源，并继续执行等待服务器的响应时，使用之一<xref:System.Net.WebClient.DownloadDataAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
 **请注意**此成员时应用程序中启用网络跟踪输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadDataAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从指定 URI 中将资源作为 <see cref="T:System.Byte" /> 数组下载以作为异步操作。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadDataAsync">
      <MemberSignature Language="C#" Value="public void DownloadDataAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadDataAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadDataAsync (address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadDataAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadDataAsync : Uri -&gt; unit" Usage="webClient.DownloadDataAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">包含要下载的 URI 的 <see cref="T:System.Uri" />。</param>
        <summary>从指定 URI 中将资源作为 <see cref="T:System.Byte" /> 数组下载以作为异步操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法检索指定的资源中指定的 URI 方案与关联的协议使用的默认方法`address`。 使用从线程池自动分配的线程资源以异步方式下载数据。  
  
 下载资源时，此方法不会阻止调用线程。 若要下载资源和块等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.DownloadData%2A>方法。 下载完成后，<xref:System.Net.WebClient.DownloadDataCompleted>引发事件。 应用程序必须处理此事件以接收通知。 下载的数据现已推出<xref:System.Net.DownloadDataCompletedEventArgs.Result%2A>属性。  
  
 可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法来取消异步操作尚未完成的。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataAsync">
      <MemberSignature Language="C#" Value="public void DownloadDataAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadDataAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadDataAsync (address As Uri, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadDataAsync(Uri ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.DownloadDataAsync : Uri * obj -&gt; unit" Usage="webClient.DownloadDataAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">包含要下载的 URI 的 <see cref="T:System.Uri" />。</param>
        <param name="userToken">一个用户定义对象，此对象将传递给完成异步操作后所调用的方法。</param>
        <summary>从指定 URI 中将资源作为 <see cref="T:System.Byte" /> 数组下载以作为异步操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法检索指定的资源中指定的 URI 方案与关联的协议使用的默认方法`address`。 使用从线程池自动分配的线程资源以异步方式下载数据。  
  
 下载资源时，此方法不会阻止调用线程。 若要下载资源和块等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.DownloadData%2A>方法。 下载完成后，<xref:System.Net.WebClient.DownloadDataCompleted>引发事件。 应用程序必须处理此事件以接收通知。 下载的数据现已推出<xref:System.Net.DownloadDataCompletedEventArgs.Result%2A>属性。  
  
 可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法来取消异步操作尚未完成的。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadDataCompletedEventHandler DownloadDataCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadDataCompletedEventHandler DownloadDataCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadDataCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DownloadDataCompleted As DownloadDataCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::DownloadDataCompletedEventHandler ^ DownloadDataCompleted;" />
      <MemberSignature Language="F#" Value="member this.DownloadDataCompleted : System.Net.DownloadDataCompletedEventHandler " Usage="member this.DownloadDataCompleted : System.Net.DownloadDataCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadDataCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在异步数据下载操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次异步数据下载操作完成后，将引发此事件。 通过调用来启动异步数据下载<xref:System.Net.WebClient.DownloadDataAsync%2A>方法。  
  
 <xref:System.Net.DownloadDataCompletedEventHandler>是此事件的委托。 <xref:System.Net.DownloadDataCompletedEventArgs>类提供事件数据的事件处理程序。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置此事件的事件处理程序。  
  
 [!code-cpp[NCLWebClientAsync#21](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#21)]
 [!code-csharp[NCLWebClientAsync#21](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#21)]
 [!code-vb[NCLWebClientAsync#21](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadDataTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用任务对象从指定 URI 中将资源作为 <see cref="T:System.Byte" /> 数组下载以作为异步操作。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; DownloadDataTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; DownloadDataTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataTaskAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadDataTaskAsync (address As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ DownloadDataTaskAsync(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadDataTaskAsync : string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.DownloadDataTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要下载的资源的 URI。</param>
        <summary>使用任务对象从指定 URI 中将资源作为 <see cref="T:System.Byte" /> 数组下载以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回包含下载的资源的 <see cref="T:System.Byte" /> 数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后已下载的数据资源。  
  
 此方法检索指定的资源中指定的 URI 方案与关联的协议使用的默认方法`address`参数。 使用从线程池自动分配的线程资源以异步方式下载数据。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 下面的代码示例从服务器请求数据，并显示返回的数据。 它假定`remoteUri`包含所请求的数据的有效 URI。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; DownloadDataTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; DownloadDataTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataTaskAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadDataTaskAsync (address As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ DownloadDataTaskAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadDataTaskAsync : Uri -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.DownloadDataTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">要下载的资源的 URI。</param>
        <summary>使用任务对象从指定 URI 中将资源作为 <see cref="T:System.Byte" /> 数组下载以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回包含下载的资源的 <see cref="T:System.Byte" /> 数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后已下载的数据资源。  
  
 此方法检索指定的资源中指定的 URI 方案与关联的协议使用的默认方法`address`参数。 使用从线程池自动分配的线程资源以异步方式下载数据。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
 **请注意**此成员时应用程序中启用网络跟踪输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将具有指定 URI 的资源下载到本地文件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFile(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As String, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(System::String ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : string * string -&gt; unit" Usage="webClient.DownloadFile (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">从中下载数据的 URI。</param>
        <param name="fileName">要接收数据的本地文件的名称。</param>
        <summary>将具有指定 URI 的资源下载到本地文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.DownloadFile%2A>将下载到本地文件数据的方法中指定的 URI 从`address`参数。 此方法将阻止下载资源时。 若要下载资源，并继续执行等待服务器的响应时，使用之一<xref:System.Net.WebClient.DownloadFileAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 在中间层应用程序，如 ASP.NET 页面中，使用此方法时将收到错误，如果在其下执行应用程序的帐户没有权限访问该文件。  
  
   
  
## Examples  
 下面的代码示例下载中的文件http://www.contoso.com到本地硬盘驱动器。  
  
 [!code-cpp[WebClient_DownloadFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadFile/CPP/webclient_downloadfile.cpp#1)]
 [!code-csharp[WebClient_DownloadFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadFile/CS/webclient_downloadfile.cs#1)]
 [!code-vb[WebClient_DownloadFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadFile/VB/webclient_downloadfile.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="filename" /> 是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。  
  
或 
文件不存在。  
  
- 或 - 下载数据时发生错误。</exception>
        <exception cref="T:System.NotSupportedException">该方法已在多个线程上同时调用。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要将该文件写<paramref name="fileName" />。 关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFile(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFile(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As Uri, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(Uri ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : Uri * string -&gt; unit" Usage="webClient.DownloadFile (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">以 <see cref="T:System.String" /> 形式指定的 URI，将从中下载数据。</param>
        <param name="fileName">要接收数据的本地文件的名称。</param>
        <summary>将具有指定 URI 的资源下载到本地文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.DownloadFile%2A>将下载到本地文件数据的方法中指定的 URI 从`address`参数。 此方法将阻止下载资源时。 若要下载资源，并继续执行等待服务器的响应时，使用之一<xref:System.Net.WebClient.DownloadFileAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 在中间层应用程序，如 ASP.NET 页面中，使用此方法时将收到错误，如果在其下执行应用程序的帐户没有权限访问该文件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="filename" /> 是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。  
  
或 
文件不存在。  
  
或 
下载数据时发生错误。</exception>
        <exception cref="T:System.NotSupportedException">该方法已在多个线程上同时调用。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要将该文件写<paramref name="fileName" />。 关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadFileAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将指定资源下载到本地文件以作为异步操作并返回任务对象。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadFileAsync">
      <MemberSignature Language="C#" Value="public void DownloadFileAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFileAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFileAsync (address As Uri, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFileAsync(Uri ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DownloadFileAsync : Uri * string -&gt; unit" Usage="webClient.DownloadFileAsync (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要下载的资源的 URI。</param>
        <param name="fileName">要放在本地计算机上的文件的名称。</param>
        <summary>将具有指定 URI 的资源下载到本地文件。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法中指定的 URI 处的资源下载`address`参数。 下载的文件下载成功完成后，名为`fileName`本地计算机上。 使用从线程池自动分配的线程资源以异步方式下载文件。 若要接收通知，该文件不可用，请添加到事件处理程序<xref:System.Net.WebClient.DownloadFileCompleted>事件。  
  
 在下载资源时，此方法不会阻止调用线程。 若要阻止等待下载完成时，请使用其中一个<xref:System.Net.WebClient.DownloadFile%2A>方法。  
  
 可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法来取消异步操作尚未完成的。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`未指定一个绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 使用此方法时在 ASP.NET 页中，将收到错误，如果页面执行下的帐户不具有访问本地文件的权限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="fileName" /> 指定的本地文件正由另一个线程使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileAsync">
      <MemberSignature Language="C#" Value="public void DownloadFileAsync (Uri address, string fileName, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFileAsync(class System.Uri address, string fileName, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFileAsync (address As Uri, fileName As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFileAsync(Uri ^ address, System::String ^ fileName, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.DownloadFileAsync : Uri * string * obj -&gt; unit" Usage="webClient.DownloadFileAsync (address, fileName, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">要下载的资源的 URI。</param>
        <param name="fileName">要放在本地计算机上的文件的名称。</param>
        <param name="userToken">一个用户定义对象，此对象将传递给完成异步操作后所调用的方法。</param>
        <summary>将具有指定 URI 的资源下载到本地文件。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法中指定的 URI 处的资源下载`address`参数。 下载的文件下载成功完成后，名为`fileName`本地计算机上。 使用从线程池自动分配的线程资源以异步方式下载文件。 若要接收通知，该文件不可用，请添加到事件处理程序<xref:System.Net.WebClient.DownloadFileCompleted>事件。  
  
 在下载资源时，此方法不会阻止调用线程。 若要阻止等待下载完成时，请使用其中一个<xref:System.Net.WebClient.DownloadFile%2A>方法。  
  
 可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法来取消异步操作尚未完成的。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`未指定一个绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 使用此方法时在 ASP.NET 页中，将收到错误，如果页面执行下的帐户不具有访问本地文件的权限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="fileName" /> 指定的本地文件正由另一个线程使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler DownloadFileCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler DownloadFileCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadFileCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DownloadFileCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ DownloadFileCompleted;" />
      <MemberSignature Language="F#" Value="member this.DownloadFileCompleted : System.ComponentModel.AsyncCompletedEventHandler " Usage="member this.DownloadFileCompleted : System.ComponentModel.AsyncCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在异步文件下载操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次异步文件下载操作完成后，将引发此事件。 异步文件下载开始通过调用<xref:System.Net.WebClient.DownloadFileAsync%2A>方法。  
  
 <xref:System.ComponentModel.AsyncCompletedEventHandler>是此事件的委托。 <xref:System.ComponentModel.AsyncCompletedEventArgs>类提供事件数据的事件处理程序。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置此事件的事件处理程序。  
  
 [!code-cpp[NCLWebClientAsync#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]
 [!code-csharp[NCLWebClientAsync#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]
 [!code-vb[NCLWebClientAsync#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadFileTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用任务对象将指定资源下载到本地文件以作为异步操作。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DownloadFileTaskAsync (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DownloadFileTaskAsync(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadFileTaskAsync (address As String, fileName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ DownloadFileTaskAsync(System::String ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DownloadFileTaskAsync : string * string -&gt; System.Threading.Tasks.Task" Usage="webClient.DownloadFileTaskAsync (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要下载的资源的 URI。</param>
        <param name="fileName">要放在本地计算机上的文件的名称。</param>
        <summary>使用任务对象将指定资源下载到本地文件以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。  
  
表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task>对象将完成后已下载的数据资源。  
  
 此方法中指定的 URI 处的资源下载`address`参数。 下载的文件下载成功完成后，名为`fileName`本地计算机上。 使用从线程池自动分配的线程资源以异步方式下载文件。  
  
 可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法来取消异步操作尚未完成的。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`未指定一个绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 使用此方法时在 ASP.NET 页中，将收到错误，如果页面执行下的帐户不具有访问本地文件的权限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="fileName" /> 指定的本地文件正由另一个线程使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DownloadFileTaskAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DownloadFileTaskAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadFileTaskAsync (address As Uri, fileName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ DownloadFileTaskAsync(Uri ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DownloadFileTaskAsync : Uri * string -&gt; System.Threading.Tasks.Task" Usage="webClient.DownloadFileTaskAsync (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要下载的资源的 URI。</param>
        <param name="fileName">要放在本地计算机上的文件的名称。</param>
        <summary>使用任务对象将指定资源下载到本地文件以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。  
  
表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task>对象将完成后已下载的数据资源。  
  
 此方法中指定的 URI 处的资源下载`address`参数。 下载的文件下载成功完成后，名为`fileName`本地计算机上。 使用从线程池自动分配的线程资源以异步方式下载文件。  
  
 可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法来取消异步操作尚未完成的。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`未指定一个绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 使用此方法时在 ASP.NET 页中，将收到错误，如果页面执行下的帐户不具有访问本地文件的权限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="fileName" /> 指定的本地文件正由另一个线程使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadProgressChanged">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadProgressChangedEventHandler DownloadProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadProgressChangedEventHandler DownloadProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DownloadProgressChanged As DownloadProgressChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::DownloadProgressChangedEventHandler ^ DownloadProgressChanged;" />
      <MemberSignature Language="F#" Value="member this.DownloadProgressChanged : System.Net.DownloadProgressChangedEventHandler " Usage="member this.DownloadProgressChanged : System.Net.DownloadProgressChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在异步下载操作成功传输部分或全部数据后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 异步下载取得的进度每次都会引发此事件。 使用任何以下方法启动下载时，引发此事件。  
  
|方法|描述|  
|------------|-----------------|  
|<xref:System.Net.WebClient.DownloadDataAsync%2A>|从资源下载数据，并返回<xref:System.Byte>数组，而不会阻止调用线程。|  
|<xref:System.Net.WebClient.DownloadFileAsync%2A>|数据从资源下载到本地文件，而不会阻止调用线程。|  
|<xref:System.Net.WebClient.OpenReadAsync%2A>|返回从资源，而不会阻止调用线程的数据。|  
  
 <xref:System.Net.DownloadProgressChangedEventHandler>是此事件的委托。 <xref:System.Net.DownloadProgressChangedEventArgs>类提供事件数据的事件处理程序。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
> [!NOTE]
>  被动 FTP 文件传输将始终显示进度百分比为零，因为服务器未发送的文件大小。 若要显示进度，您可以更改 FTP 连接为活动通过重写<xref:System.Net.WebClient.GetWebRequest%2A>虚拟方法：  
  
```csharp  
internal class MyWebClient : WebClient
{  
    protected override WebRequest GetWebRequest(Uri address)
    {  
        FtpWebRequest req = (FtpWebRequest)base.GetWebRequest(address);  
        req.UsePassive = false;  
        return req;  
    }  
}  
```  
  
   
  
## Examples  
 下面的代码示例演示如何设置此事件的事件处理程序。  
  
 [!code-cpp[NCLWebClientAsync#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]
 [!code-csharp[NCLWebClientAsync#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]
 [!code-vb[NCLWebClientAsync#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]  
  
 下面的代码示例显示了此事件的处理程序的实现。  
  
 [!code-cpp[NCLWebClientAsync#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]
 [!code-csharp[NCLWebClientAsync#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]
 [!code-vb[NCLWebClientAsync#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadString">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以 <see cref="T:System.String" /> 形式下载请求的资源。 可以以包含 URI 的 <see cref="T:System.String" /> 或 <see cref="T:System.Uri" /> 的形式指定要下载的资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadString">
      <MemberSignature Language="C#" Value="public string DownloadString (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string DownloadString(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadString (address As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ DownloadString(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadString : string -&gt; string" Usage="webClient.DownloadString address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">包含要下载的 URI 的 <see cref="T:System.String" />。</param>
        <summary>以 <see cref="T:System.String" /> 形式下载请求的资源。 以包含 URI 的 <see cref="T:System.String" /> 的形式指定要下载的资源。</summary>
        <returns>一个 <see cref="T:System.String" />，其中包含请求的资源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法检索指定的资源。 下载资源后，该方法使用中指定的编码<xref:System.Net.WebClient.Encoding%2A>属性来转换到资源<xref:System.String>。 此方法将阻止下载资源时。 若要下载资源，并继续执行等待服务器的响应时，使用之一<xref:System.Net.WebClient.DownloadStringAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLWebClientAsync#25](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#25)]
 [!code-csharp[NCLWebClientAsync#25](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#25)]
 [!code-vb[NCLWebClientAsync#25](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
        <exception cref="T:System.NotSupportedException">该方法已在多个线程上同时调用。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadString">
      <MemberSignature Language="C#" Value="public string DownloadString (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string DownloadString(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadString(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadString (address As Uri) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ DownloadString(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadString : Uri -&gt; string" Usage="webClient.DownloadString address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">一个 <see cref="T:System.Uri" /> 对象，其中包含要下载的 URI。</param>
        <summary>以 <see cref="T:System.String" /> 形式下载请求的资源。 以 <see cref="T:System.Uri" /> 形式指定要下载的资源。</summary>
        <returns>一个 <see cref="T:System.String" />，其中包含请求的资源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法检索指定的资源。 下载资源后，该方法使用中指定的编码<xref:System.Net.WebClient.Encoding%2A>属性来转换到资源<xref:System.String>。 此方法将阻止下载资源时。 若要下载资源，并继续执行等待服务器的响应时，使用之一<xref:System.Net.WebClient.DownloadStringAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
        <exception cref="T:System.NotSupportedException">该方法已在多个线程上同时调用。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadStringAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>下载以 <see cref="T:System.String" /> 或 <see cref="T:System.Uri" /> 形式指定的资源。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadStringAsync">
      <MemberSignature Language="C#" Value="public void DownloadStringAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadStringAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadStringAsync (address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadStringAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadStringAsync : Uri -&gt; unit" Usage="webClient.DownloadStringAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">包含要下载的 URI 的 <see cref="T:System.Uri" />。</param>
        <summary>下载以 <see cref="T:System.Uri" /> 形式指定的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以异步方式从线程池使用自动分配的线程资源下载资源。  
  
 下载后资源，此方法使用中指定的编码<xref:System.Net.WebClient.Encoding%2A>属性来转换到资源<xref:System.String>。 下载资源时，此方法不会阻止调用线程。 若要下载资源和块等待服务器的响应时，使用<xref:System.Net.WebClient.DownloadString%2A>方法。 下载完成后，<xref:System.Net.WebClient.DownloadStringCompleted>引发事件。 应用程序必须处理此事件以接收通知。 下载的字符串现已推出<xref:System.Net.DownloadStringCompletedEventArgs.Result%2A>属性。  
  
 可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法来取消异步操作尚未完成的。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringAsync">
      <MemberSignature Language="C#" Value="public void DownloadStringAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadStringAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadStringAsync (address As Uri, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadStringAsync(Uri ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.DownloadStringAsync : Uri * obj -&gt; unit" Usage="webClient.DownloadStringAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">包含要下载的 URI 的 <see cref="T:System.Uri" />。</param>
        <param name="userToken">一个用户定义对象，此对象将传递给完成异步操作后所调用的方法。</param>
        <summary>将指定的字符串下载到指定的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以异步方式从线程池使用自动分配的线程资源下载资源。  
  
 下载后资源，此方法使用中指定的编码<xref:System.Net.WebClient.Encoding%2A>属性来转换到资源<xref:System.String>。 下载资源时，此方法不会阻止调用线程。 若要下载资源和块等待服务器的响应时，使用<xref:System.Net.WebClient.DownloadString%2A>方法。 下载完成后，<xref:System.Net.WebClient.DownloadStringCompleted>引发事件。 应用程序必须处理此事件以接收通知。 下载的字符串现已推出<xref:System.Net.DownloadStringCompletedEventArgs.Result%2A>属性。  
  
 可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法来取消异步操作尚未完成的。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadStringCompletedEventHandler DownloadStringCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadStringCompletedEventHandler DownloadStringCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadStringCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DownloadStringCompleted As DownloadStringCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::DownloadStringCompletedEventHandler ^ DownloadStringCompleted;" />
      <MemberSignature Language="F#" Value="member this.DownloadStringCompleted : System.Net.DownloadStringCompletedEventHandler " Usage="member this.DownloadStringCompleted : System.Net.DownloadStringCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadStringCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在异步资源下载操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 完成异步操作以下载资源作为一个字符串，每次都会引发此事件。 这些操作由调用启动<xref:System.Net.WebClient.DownloadStringAsync%2A>方法。  
  
 <xref:System.Net.DownloadStringCompletedEventHandler>是此事件的委托。 <xref:System.Net.DownloadStringCompletedEventArgs>类提供事件数据的事件处理程序。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置此事件的事件处理程序。  
  
 [!code-cpp[NCLWebClientAsync#28](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#28)]
 [!code-csharp[NCLWebClientAsync#28](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#28)]
 [!code-vb[NCLWebClientAsync#28](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadStringTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用任务对象从指定 URI 中将资源作为 <see cref="T:System.String" /> 下载以作为异步操作。  这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; DownloadStringTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadStringTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringTaskAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadStringTaskAsync (address As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ DownloadStringTaskAsync(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadStringTaskAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="webClient.DownloadStringTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要下载的资源的 URI。</param>
        <summary>使用任务对象从指定 URI 中将资源作为 <see cref="T:System.String" /> 下载以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回包含下载的资源的 <see cref="T:System.Byte" /> 数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后已下载的数据资源。  以异步方式从线程池使用自动分配的线程资源下载资源。  
  
 下载后资源，此方法使用中指定的编码<xref:System.Net.WebClient.Encoding%2A>属性来转换到资源<xref:System.String>。 下载资源时，此方法不会阻止调用线程。  
  
 可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法来取消异步操作尚未完成的。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
 当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; DownloadStringTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadStringTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringTaskAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadStringTaskAsync (address As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ DownloadStringTaskAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.DownloadStringTaskAsync : Uri -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="webClient.DownloadStringTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">要下载的资源的 URI。</param>
        <summary>使用任务对象从指定 URI 中将资源作为 <see cref="T:System.String" /> 下载以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回包含下载的资源的 <see cref="T:System.Byte" /> 数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后已下载的数据资源。 以异步方式从线程池使用自动分配的线程资源下载资源。  
  
 下载后资源，此方法使用中指定的编码<xref:System.Net.WebClient.Encoding%2A>属性来转换到资源<xref:System.String>。 下载资源时，此方法不会阻止调用线程。  
  
 可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法来取消异步操作尚未完成的。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
 当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载资源时出现错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="System.Net.WebClient.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取和设置用于上载和下载字符串的 <see cref="T:System.Text.Encoding" />。</summary>
        <value>用于对字符串进行编码的 <see cref="T:System.Text.Encoding" />。 此属性的默认值为 <see cref="P:System.Text.Encoding.Default" /> 返回的编码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadString%2A>并<xref:System.Net.WebClient.UploadStringAsync%2A>方法使用此属性可以指定将字符串转换为<xref:System.Byte>之前上传字符串的数组。 有关其他信息，请参阅<xref:System.Text.Encoding.GetBytes%2A>方法。  
  
 当使用下载字符串<xref:System.Net.WebClient.DownloadString%2A>或<xref:System.Net.WebClient.DownloadStringAsync%2A>方法，<xref:System.Net.WebClient>使用<xref:System.Text.Encoding>返回的这将下载<xref:System.Byte>转换为字符串数组。 有关其他信息，请参阅<xref:System.Text.Encoding.GetString%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何设置此属性的值。  
  
 [!code-cpp[NCLWebClientAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]
 [!code-csharp[NCLWebClientAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]
 [!code-vb[NCLWebClientAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebRequest GetWebRequest (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebRequest(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWebRequest (address As Uri) As WebRequest" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Net::WebRequest ^ GetWebRequest(Uri ^ address);" />
      <MemberSignature Language="F#" Value="abstract member GetWebRequest : Uri -&gt; System.Net.WebRequest&#xA;override this.GetWebRequest : Uri -&gt; System.Net.WebRequest" Usage="webClient.GetWebRequest address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">一个 <see cref="T:System.Uri" />，用于标识要请求的资源。</param>
        <summary>为指定资源返回一个 <see cref="T:System.Net.WebRequest" /> 对象。</summary>
        <returns>一个新的 <see cref="T:System.Net.WebRequest" /> 对象，用于指定的资源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法复制现有<xref:System.Net.WebClient.Headers%2A>， <xref:System.Net.WebClient.Credentials%2A>，并为新创建的方法<xref:System.Net.WebRequest>对象。  
  
 可以调用此方法仅由继承的类<xref:System.Net.WebClient>。 目的是让继承者访问基础<xref:System.Net.WebRequest>对象。 派生的类应调用基类实现<xref:System.Net.WebClient.GetWebRequest%2A>以确保按预期方式工作的方法。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#1)]
 [!code-csharp[NCLCustomWebClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetWebResponse">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回指定 <see cref="T:System.Net.WebResponse" /> 的 <see cref="T:System.Net.WebRequest" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetWebResponse">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebResponse GetWebResponse(class System.Net.WebRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWebResponse (request As WebRequest) As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Net::WebResponse ^ GetWebResponse(System::Net::WebRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member GetWebResponse : System.Net.WebRequest -&gt; System.Net.WebResponse&#xA;override this.GetWebResponse : System.Net.WebRequest -&gt; System.Net.WebResponse" Usage="webClient.GetWebResponse request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
      </Parameters>
      <Docs>
        <param name="request">用于获取响应的 <see cref="T:System.Net.WebRequest" />。</param>
        <summary>返回指定 <see cref="T:System.Net.WebResponse" /> 的 <see cref="T:System.Net.WebRequest" />。</summary>
        <returns>
          <see cref="T:System.Net.WebResponse" /> 包含对指定 <see cref="T:System.Net.WebRequest" /> 的响应。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回的对象通过调用<xref:System.Net.WebRequest.GetResponse%2A>方法上指定<xref:System.Net.WebRequest>对象。  
  
 可以调用此方法仅由继承的类<xref:System.Net.WebClient>。 目的是让继承者访问基础<xref:System.Net.WebResponse>对象。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#2)]
 [!code-csharp[NCLCustomWebClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebResponse">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request, IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebResponse GetWebResponse(class System.Net.WebRequest request, class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWebResponse (request As WebRequest, result As IAsyncResult) As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Net::WebResponse ^ GetWebResponse(System::Net::WebRequest ^ request, IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member GetWebResponse : System.Net.WebRequest * IAsyncResult -&gt; System.Net.WebResponse&#xA;override this.GetWebResponse : System.Net.WebRequest * IAsyncResult -&gt; System.Net.WebResponse" Usage="webClient.GetWebResponse (request, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="request">用于获取响应的 <see cref="T:System.Net.WebRequest" />。</param>
        <param name="result">一个 <see cref="T:System.IAsyncResult" /> 对象，来自以前对 <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 的调用。</param>
        <summary>使用指定的 <see cref="T:System.Net.WebResponse" /> 获取对指定 <see cref="T:System.Net.WebRequest" /> 的 <see cref="T:System.IAsyncResult" />。</summary>
        <returns>
          <see cref="T:System.Net.WebResponse" /> 包含对指定 <see cref="T:System.Net.WebRequest" /> 的响应。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回的对象通过调用<xref:System.Net.WebRequest.EndGetResponse%2A>方法上指定<xref:System.Net.WebRequest>对象。  
  
 可以调用此方法仅由继承的类<xref:System.Net.WebClient>。 目的是让继承者访问基础<xref:System.Net.WebResponse>对象。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#3)]
 [!code-csharp[NCLCustomWebClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection Headers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Headers" />
      <MemberSignature Language="VB.NET" Value="Public Property Headers As WebHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::WebHeaderCollection ^ Headers { System::Net::WebHeaderCollection ^ get(); void set(System::Net::WebHeaderCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Headers : System.Net.WebHeaderCollection with get, set" Usage="System.Net.WebClient.Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与请求关联的标头名称/值对集合。</summary>
        <value>一个 <see cref="T:System.Net.WebHeaderCollection" />，包含与此请求关联的标头名称/值对。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.Headers%2A>属性包含<xref:System.Net.WebHeaderCollection>实例，包含的协议标头的<xref:System.Net.WebClient>与请求一起发送。  
  
 一些常见标头被视为受限制和保护的系统和无法设置或更改在<xref:System.Net.WebHeaderCollection>对象。 若要将其中一个这些受限制的标头中设置的任何尝试<xref:System.Net.WebHeaderCollection>与关联的对象<xref:System.Net.WebClient>对象将引发异常更高版本时尝试发送<xref:System.Net.WebClient>请求。  
  
 受保护的系统的受限的标头包括但不限于以下：  
  
-   日期  
  
-   Host  
  
 此外，某些其他标头也会受到限制时使用<xref:System.Net.WebClient>对象。 这些限制的标头包括但不限于以下：  
  
-   接受  
  
-   连接  
  
-   内容长度  
  
-   预期 (当将值设置为"100-继续"  
  
-   如果-修改-自  
  
-   范围  
  
-   传输编码  
  
 <xref:System.Net.HttpWebRequest>类具有用于设置上述标头的一些属性。 如果它很重要的应用程序设置这些标头，则<xref:System.Net.HttpWebRequest>类应使用而不是<xref:System.Net.WebRequest>类。  
  
 不应假定，标头值将保持不变，，因为 Web 服务器和缓存可能会更改或向 Web 请求添加标头。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Net.WebClient.Headers%2A>集合来设置 HTTP`Content-Type`标头与`application/x-www-form-urlencoded,`以表单数据的服务器附加到帖子的通知。  
  
 [!code-cpp[WebClient_UpLoadData_Headers#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]
 [!code-csharp[WebClient_UpLoadData_Headers#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]
 [!code-vb[WebClient_UpLoadData_Headers#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.WebRequest.Headers" />
        <altmember cref="P:System.Net.HttpWebRequest.Headers" />
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBusy : bool" Usage="System.Net.WebClient.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>了解是否存在进行中的 Web 请求。</summary>
        <value>如果存在进行中的 Web 请求，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadDataCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadDataCompleted (System.Net.DownloadDataCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadDataCompleted(class System.Net.DownloadDataCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDownloadDataCompleted (e As DownloadDataCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDownloadDataCompleted(System::Net::DownloadDataCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDownloadDataCompleted : System.Net.DownloadDataCompletedEventArgs -&gt; unit&#xA;override this.OnDownloadDataCompleted : System.Net.DownloadDataCompletedEventArgs -&gt; unit" Usage="webClient.OnDownloadDataCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadDataCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Net.DownloadDataCompletedEventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Net.WebClient.DownloadDataCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从此类继承的类可以重写此方法来执行其他任务时<xref:System.Net.WebClient.DownloadDataCompleted>事件发生。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)  
  
 <xref:System.Net.WebClient.OnDownloadDataCompleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#4)]
 [!code-csharp[NCLCustomWebClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写时<see cref="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" />方法，以便已注册的委托接收事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadFileCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadFileCompleted (System.ComponentModel.AsyncCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadFileCompleted(class System.ComponentModel.AsyncCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDownloadFileCompleted (e As AsyncCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDownloadFileCompleted(System::ComponentModel::AsyncCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDownloadFileCompleted : System.ComponentModel.AsyncCompletedEventArgs -&gt; unit&#xA;override this.OnDownloadFileCompleted : System.ComponentModel.AsyncCompletedEventArgs -&gt; unit" Usage="webClient.OnDownloadFileCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.AsyncCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Net.WebClient.DownloadFileCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从此类继承的类可以重写此方法来执行其他任务时<xref:System.Net.WebClient.DownloadFileCompleted>事件发生。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnDownloadFileCompleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#5)]
 [!code-csharp[NCLCustomWebClient#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写时<see cref="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />方法，以便已注册的委托接收事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadProgressChanged (System.Net.DownloadProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadProgressChanged(class System.Net.DownloadProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDownloadProgressChanged (e As DownloadProgressChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDownloadProgressChanged(System::Net::DownloadProgressChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDownloadProgressChanged : System.Net.DownloadProgressChangedEventArgs -&gt; unit&#xA;override this.OnDownloadProgressChanged : System.Net.DownloadProgressChangedEventArgs -&gt; unit" Usage="webClient.OnDownloadProgressChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Net.DownloadProgressChangedEventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从此类继承的类可以重写此方法来执行其他任务时<xref:System.Net.WebClient.DownloadProgressChanged>事件发生。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnDownloadProgressChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#12)]
 [!code-csharp[NCLCustomWebClient#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写时<see cref="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" />方法，以便已注册的委托接收事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadStringCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadStringCompleted (System.Net.DownloadStringCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadStringCompleted(class System.Net.DownloadStringCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDownloadStringCompleted (e As DownloadStringCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDownloadStringCompleted(System::Net::DownloadStringCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDownloadStringCompleted : System.Net.DownloadStringCompletedEventArgs -&gt; unit&#xA;override this.OnDownloadStringCompleted : System.Net.DownloadStringCompletedEventArgs -&gt; unit" Usage="webClient.OnDownloadStringCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadStringCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Net.DownloadStringCompletedEventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从此类继承的类可以重写此方法来执行其他任务时<xref:System.Net.WebClient.DownloadStringCompleted>事件发生。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnDownloadStringCompleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#6)]
 [!code-csharp[NCLCustomWebClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写时<see cref="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" />方法，以便已注册的委托接收事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnOpenReadCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnOpenReadCompleted (System.Net.OpenReadCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOpenReadCompleted(class System.Net.OpenReadCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnOpenReadCompleted (e As OpenReadCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnOpenReadCompleted(System::Net::OpenReadCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnOpenReadCompleted : System.Net.OpenReadCompletedEventArgs -&gt; unit&#xA;override this.OnOpenReadCompleted : System.Net.OpenReadCompletedEventArgs -&gt; unit" Usage="webClient.OnOpenReadCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.OpenReadCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Net.OpenReadCompletedEventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Net.WebClient.OpenReadCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从此类继承的类可以重写此方法来执行其他任务时<xref:System.Net.WebClient.OpenReadCompleted>事件发生。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnOpenReadCompleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#7)]
 [!code-csharp[NCLCustomWebClient#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#7)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写时<see cref="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" />方法，以便已注册的委托接收事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnOpenWriteCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnOpenWriteCompleted (System.Net.OpenWriteCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOpenWriteCompleted(class System.Net.OpenWriteCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnOpenWriteCompleted (e As OpenWriteCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnOpenWriteCompleted(System::Net::OpenWriteCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnOpenWriteCompleted : System.Net.OpenWriteCompletedEventArgs -&gt; unit&#xA;override this.OnOpenWriteCompleted : System.Net.OpenWriteCompletedEventArgs -&gt; unit" Usage="webClient.OnOpenWriteCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.OpenWriteCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Net.OpenWriteCompletedEventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从此类继承的类可以重写此方法来执行其他任务时<xref:System.Net.WebClient.OpenWriteCompleted>事件发生。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnOpenWriteCompleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#8](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#8)]
 [!code-csharp[NCLCustomWebClient#8](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#8)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写时<see cref="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" />方法，以便已注册的委托接收事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadDataCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadDataCompleted (System.Net.UploadDataCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadDataCompleted(class System.Net.UploadDataCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadDataCompleted (e As UploadDataCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadDataCompleted(System::Net::UploadDataCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUploadDataCompleted : System.Net.UploadDataCompletedEventArgs -&gt; unit&#xA;override this.OnUploadDataCompleted : System.Net.UploadDataCompletedEventArgs -&gt; unit" Usage="webClient.OnUploadDataCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadDataCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Net.UploadDataCompletedEventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Net.WebClient.UploadDataCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从此类继承的类可以重写此方法来执行其他任务时<xref:System.Net.WebClient.UploadDataCompleted>事件发生。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnUploadDataCompleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#9)]
 [!code-csharp[NCLCustomWebClient#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写时<see cref="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" />方法，以便已注册的委托接收事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadFileCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadFileCompleted (System.Net.UploadFileCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadFileCompleted(class System.Net.UploadFileCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadFileCompleted (e As UploadFileCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadFileCompleted(System::Net::UploadFileCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUploadFileCompleted : System.Net.UploadFileCompletedEventArgs -&gt; unit&#xA;override this.OnUploadFileCompleted : System.Net.UploadFileCompletedEventArgs -&gt; unit" Usage="webClient.OnUploadFileCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadFileCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Net.UploadFileCompletedEventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Net.WebClient.UploadFileCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从此类继承的类可以重写此方法来执行其他任务时<xref:System.Net.WebClient.UploadFileCompleted>事件发生。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnUploadFileCompleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#10)]
 [!code-csharp[NCLCustomWebClient#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#10)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写时<see cref="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" />方法，以便已注册的委托接收事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadProgressChanged (System.Net.UploadProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadProgressChanged(class System.Net.UploadProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadProgressChanged (e As UploadProgressChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadProgressChanged(System::Net::UploadProgressChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUploadProgressChanged : System.Net.UploadProgressChangedEventArgs -&gt; unit&#xA;override this.OnUploadProgressChanged : System.Net.UploadProgressChangedEventArgs -&gt; unit" Usage="webClient.OnUploadProgressChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Net.UploadProgressChangedEventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Net.WebClient.UploadProgressChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从此类继承的类可以重写此方法来执行其他任务时<xref:System.Net.WebClient.UploadProgressChanged>事件发生。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnUploadProgressChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#13](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#13)]
 [!code-csharp[NCLCustomWebClient#13](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#13)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写时<see cref="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" />方法，以便已注册的委托接收事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadStringCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadStringCompleted (System.Net.UploadStringCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadStringCompleted(class System.Net.UploadStringCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadStringCompleted (e As UploadStringCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadStringCompleted(System::Net::UploadStringCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUploadStringCompleted : System.Net.UploadStringCompletedEventArgs -&gt; unit&#xA;override this.OnUploadStringCompleted : System.Net.UploadStringCompletedEventArgs -&gt; unit" Usage="webClient.OnUploadStringCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadStringCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Net.UploadStringCompletedEventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Net.WebClient.UploadStringCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从此类继承的类可以重写此方法来执行其他任务时<xref:System.Net.WebClient.UploadStringCompleted>事件发生。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnUploadStringCompleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#11)]
 [!code-csharp[NCLCustomWebClient#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写时<see cref="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" />方法，以便已注册的委托接收事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadValuesCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadValuesCompleted (System.Net.UploadValuesCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadValuesCompleted(class System.Net.UploadValuesCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadValuesCompleted (e As UploadValuesCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadValuesCompleted(System::Net::UploadValuesCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUploadValuesCompleted : System.Net.UploadValuesCompletedEventArgs -&gt; unit&#xA;override this.OnUploadValuesCompleted : System.Net.UploadValuesCompletedEventArgs -&gt; unit" Usage="webClient.OnUploadValuesCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadValuesCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Net.UploadValuesCompletedEventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Net.WebClient.UploadValuesCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从此类继承的类可以重写此方法来执行其他任务时<xref:System.Net.WebClient.UploadValuesCompleted>事件发生。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnUploadValuesCompleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例显示了可通过派生自的类来自定义此方法的实现<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#14)]
 [!code-csharp[NCLCustomWebClient#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#14)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写时<see cref="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" />方法，以便已注册的委托接收事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnWriteStreamClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnWriteStreamClosed (System.Net.WriteStreamClosedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWriteStreamClosed(class System.Net.WriteStreamClosedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWriteStreamClosed (e As WriteStreamClosedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWriteStreamClosed(System::Net::WriteStreamClosedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWriteStreamClosed : System.Net.WriteStreamClosedEventArgs -&gt; unit&#xA;override this.OnWriteStreamClosed : System.Net.WriteStreamClosedEventArgs -&gt; unit" Usage="webClient.OnWriteStreamClosed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.WriteStreamClosedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Net.WriteStreamClosedEventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Net.WebClient.WriteStreamClosed" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenRead">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>为从具有指定 URI 的资源下载的数据打开一个可读的流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenRead (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenRead(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenRead(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenRead (address As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenRead(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenRead : string -&gt; System.IO.Stream" Usage="webClient.OpenRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">以 <see cref="T:System.String" /> 形式指定的 URI，将从中下载数据。</param>
        <summary>为从具有 <see cref="T:System.String" /> 指定的 URI 的资源下载的数据打开一个可读的流。</summary>
        <returns>一个 <see cref="T:System.IO.Stream" />，用于从资源读取数据。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.OpenRead%2A>方法创建<xref:System.IO.Stream>用来读取指定的资源的内容实例`address`参数。 此方法在打开流时阻止。 若要继续执行流在等待时，请使用其中一个<xref:System.Net.WebClient.OpenReadAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不是`null`，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  必须调用<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>时已完成，但<xref:System.IO.Stream>以避免系统资源不足。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例将打开所标识的资源`uriString`，并在系统控制台上显示结果。 请注意，<xref:System.IO.Stream>返回的<xref:System.Net.WebClient.OpenRead%2A>当读取数据时将关闭。  
  
 [!code-cpp[WebClient_OpenRead#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenRead/CPP/webclient_openread.cpp#1)]
 [!code-csharp[WebClient_OpenRead#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenRead/CS/webclient_openread.cs#1)]
 [!code-vb[WebClient_OpenRead#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenRead/VB/webclient_openread.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载数据时发生错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenRead (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenRead(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenRead(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenRead (address As Uri) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenRead(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenRead : Uri -&gt; System.IO.Stream" Usage="webClient.OpenRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">以 <see cref="T:System.Uri" /> 形式指定的 URI，将从中下载数据。</param>
        <summary>为从具有 <see cref="T:System.Uri" /> 指定的 URI 的资源下载的数据打开一个可读的流</summary>
        <returns>一个 <see cref="T:System.IO.Stream" />，用于从资源读取数据。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.OpenRead%2A>方法创建<xref:System.IO.Stream>用来读取指定的资源的内容实例`address`参数。 此方法在打开流时阻止。 若要继续执行流在等待时，请使用其中一个<xref:System.Net.WebClient.OpenReadAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不是`null`，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  必须调用<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>时已完成，但<xref:System.IO.Stream>以避免系统资源不足。  
  
 **请注意**此成员时应用程序中启用网络跟踪输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
下载数据时发生错误。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenReadAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>打开包含指定资源的可读流。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenReadAsync">
      <MemberSignature Language="C#" Value="public void OpenReadAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenReadAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenReadAsync (address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenReadAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenReadAsync : Uri -&gt; unit" Usage="webClient.OpenReadAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">要检索的资源的 URI。</param>
        <summary>打开包含指定资源的可读流。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法检索<xref:System.IO.Stream>用来访问指定的资源实例`address`参数。 流是使用从线程池会自动分配的线程资源获取的。 若要接收通知流可用时，将添加到事件处理程序<xref:System.Net.WebClient.OpenReadCompleted>事件。  
  
> [!NOTE]
>  必须调用<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>当您使用完<xref:System.IO.Stream>以避免系统资源不足。  
  
 打开流时，此方法不会阻止调用线程。 若要阻止等待流时，请使用<xref:System.Net.WebClient.OpenReadAsync%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`未指定一个绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>构成请求的资源的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不是`null`，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 address 所构成的 URI 无效。  
  
或 
下载资源时出现错误。  
  
或 
打开流时发生错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadAsync">
      <MemberSignature Language="C#" Value="public void OpenReadAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenReadAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenReadAsync (address As Uri, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenReadAsync(Uri ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.OpenReadAsync : Uri * obj -&gt; unit" Usage="webClient.OpenReadAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">要检索的资源的 URI。</param>
        <param name="userToken">一个用户定义对象，此对象将传递给完成异步操作后所调用的方法。</param>
        <summary>打开包含指定资源的可读流。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法检索<xref:System.IO.Stream>用来访问指定的资源实例`address`参数。 流是使用从线程池会自动分配的线程资源获取的。 若要接收通知流可用时，将添加到事件处理程序<xref:System.Net.WebClient.OpenReadCompleted>事件。  
  
> [!NOTE]
>  必须调用<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>当您使用完<xref:System.IO.Stream>以避免系统资源不足。  
  
 打开流时，此方法不会阻止调用线程。 若要阻止等待流时，请使用<xref:System.Net.WebClient.OpenRead%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`未指定一个绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>构成请求的资源的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不是`null`，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 address 所构成的 URI 无效。  
  
或 
下载资源时出现错误。  
  
或 
打开流时发生错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.OpenReadCompletedEventHandler OpenReadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.OpenReadCompletedEventHandler OpenReadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.OpenReadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OpenReadCompleted As OpenReadCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::OpenReadCompletedEventHandler ^ OpenReadCompleted;" />
      <MemberSignature Language="F#" Value="member this.OpenReadCompleted : System.Net.OpenReadCompletedEventHandler " Usage="member this.OpenReadCompleted : System.Net.OpenReadCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.OpenReadCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在以下异步操作完成时发生，该操作打开包含某个资源的流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次打开包含资源的流的异步操作完成后，将引发此事件。 这些操作由调用启动<xref:System.Net.WebClient.OpenReadAsync%2A>方法。  
  
 <xref:System.Net.OpenReadCompletedEventHandler>是此事件的委托。 <xref:System.Net.OpenReadCompletedEventArgs>类提供事件数据的事件处理程序。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置此事件的事件处理程序。  
  
 [!code-cpp[NCLWebClientAsync#30](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#30)]
 [!code-csharp[NCLWebClientAsync#30](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#30)]
 [!code-vb[NCLWebClientAsync#30](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenReadTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用任务对象打开包含指定资源的可读流以作为异步操作。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenReadTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenReadTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenReadTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadTaskAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenReadTaskAsync (address As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenReadTaskAsync(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenReadTaskAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="webClient.OpenReadTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要检索的资源的 URI。</param>
        <summary>使用任务对象打开包含指定资源的可读流以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回用于读取资源中的数据的 <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后打开到数据资源的可读流。 打开流时，此方法不会阻止调用线程。  
  
 此方法检索<xref:System.IO.Stream>用来访问指定的资源实例`address`参数。 流是使用从线程池会自动分配的线程资源获取的。  
  
> [!NOTE]
>  必须调用<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>当您使用完<xref:System.IO.Stream>以避免系统资源不足。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`未指定一个绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>构成请求的资源的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不是`null`，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 address 所构成的 URI 无效。  
  
或 
下载资源时出现错误。  
  
或 
打开流时发生错误。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="OpenReadTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenReadTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenReadTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadTaskAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenReadTaskAsync (address As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenReadTaskAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenReadTaskAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="webClient.OpenReadTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">要检索的资源的 URI。</param>
        <summary>使用任务对象打开包含指定资源的可读流以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回用于读取资源中的数据的 <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后打开到数据资源的可读流。 打开流时，此方法不会阻止调用线程。  
  
 此方法检索<xref:System.IO.Stream>用来访问指定的资源实例`address`参数。 流是使用从线程池会自动分配的线程资源获取的。  
  
> [!NOTE]
>  必须调用<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>当您使用完<xref:System.IO.Stream>以避免系统资源不足。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`未指定一个绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>构成请求的资源的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不是`null`，将其追加到`address`。  
  
 此方法使用时重试命令下载 FTP 资源。 对于 HTTP 资源时，将使用 GET 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 address 所构成的 URI 无效。  
  
或 
下载资源时出现错误。  
  
或 
打开流时发生错误。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenWrite">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>打开一个流以将数据写入具有指定 URI 的资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWrite (address As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenWrite(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenWrite : string -&gt; System.IO.Stream" Usage="webClient.OpenWrite address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <summary>打开一个流以将数据写入指定的资源。</summary>
        <returns>用于将数据写入资源的 <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.OpenWrite%2A>方法返回用于将数据发送到的资源的可写流。 此方法在打开流时阻止。 若要继续执行流在等待时，请使用其中一个<xref:System.Net.WebClient.OpenWriteAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例从命令行读取数据并使用<xref:System.Net.WebClient.OpenWrite%2A>获取一个流以便写入数据。 请注意，<xref:System.IO.Stream>返回的<xref:System.Net.WebClient.OpenWrite%2A>发送数据后关闭。  
  
 [!code-cpp[WebClient_OpenWrite2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite2/CPP/webclient_openwrite2.cpp#1)]
 [!code-csharp[WebClient_OpenWrite2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite2/CS/webclient_openwrite2.cs#1)]
 [!code-vb[WebClient_OpenWrite2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite2/VB/webclient_openwrite2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWrite (address As Uri) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenWrite(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenWrite : Uri -&gt; System.IO.Stream" Usage="webClient.OpenWrite address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <summary>打开一个流以将数据写入指定的资源。</summary>
        <returns>用于将数据写入资源的 <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.OpenWrite%2A>方法返回用于将数据发送到的资源的可写流。 此方法在打开流时阻止。 若要继续执行流在等待时，请使用其中一个<xref:System.Net.WebClient.OpenWriteAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (string address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(string address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWrite (address As String, method As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenWrite(System::String ^ address, System::String ^ method);" />
      <MemberSignature Language="F#" Value="member this.OpenWrite : string * string -&gt; System.IO.Stream" Usage="webClient.OpenWrite (address, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <summary>打开一个流以使用指定的方法向指定的资源写入数据。</summary>
        <returns>用于将数据写入资源的 <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.OpenWrite%2A>方法返回用于将数据发送到的资源的可写流。 使用中指定的方法进行基础请求`method`参数。 当关闭流时，将数据发送到服务器中。 此方法在打开流时阻止。 若要继续执行流在等待时，请使用其中一个<xref:System.Net.WebClient.OpenWriteAsync%2A>方法。  
  
 如果`method`参数指定的方法不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`未指定一个绝对地址`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例从命令行读取数据并使用<xref:System.Net.WebClient.OpenWrite%2A>以获取用于将数据写入流。 请注意，<xref:System.IO.Stream>返回的<xref:System.Net.WebClient.OpenWrite%2A>发送数据，必须关闭。  
  
 [!code-cpp[WebClient_OpenWrite#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite/CPP/webclient_openwrite.cpp#1)]
 [!code-csharp[WebClient_OpenWrite#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite/CS/webclient_openwrite.cs#1)]
 [!code-vb[WebClient_OpenWrite#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite/VB/webclient_openwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWrite (address As Uri, method As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenWrite(Uri ^ address, System::String ^ method);" />
      <MemberSignature Language="F#" Value="member this.OpenWrite : Uri * string -&gt; System.IO.Stream" Usage="webClient.OpenWrite (address, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <summary>打开一个流以使用指定的方法将数据写入指定的资源。</summary>
        <returns>用于将数据写入资源的 <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.OpenWrite%2A>方法返回用于将数据发送到的资源的可写流。 此方法在打开流时阻止。 若要继续执行流在等待时，请使用其中一个<xref:System.Net.WebClient.OpenWriteAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenWriteAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>打开一个流以将数据写入指定的资源。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenWriteAsync (address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenWriteAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteAsync : Uri -&gt; unit" Usage="webClient.OpenWriteAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <summary>打开一个流以将数据写入指定的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法检索用于将数据发送到的资源的可写流。 该流被检索使用从线程池会自动分配的线程资源。 若要接收通知流可用时，将添加到事件处理程序<xref:System.Net.WebClient.OpenWriteCompleted>事件。 当您关闭该流时，该线程阻止，直到将请求发送到`address`和收到的响应。  
  
 正在打开流时，此方法不会阻止调用线程。 若要阻止等待流时，请使用其中一个<xref:System.Net.WebClient.OpenWrite%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenWriteAsync (address As Uri, method As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenWriteAsync(Uri ^ address, System::String ^ method);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteAsync : Uri * string -&gt; unit" Usage="webClient.OpenWriteAsync (address, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <summary>打开一个流以将数据写入指定的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法检索用于将数据发送到的资源的可写流。 该流被检索使用从线程池会自动分配的线程资源。 若要接收通知流可用时，将添加到事件处理程序<xref:System.Net.WebClient.OpenWriteCompleted>事件。 当您关闭该流时，该线程阻止，直到将请求发送到`address`和收到的响应。  
  
 正在打开流时，此方法不会阻止调用线程。 若要阻止等待流时，请使用其中一个<xref:System.Net.WebClient.OpenWrite%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address, string method, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address, string method, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenWriteAsync (address As Uri, method As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenWriteAsync(Uri ^ address, System::String ^ method, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteAsync : Uri * string * obj -&gt; unit" Usage="webClient.OpenWriteAsync (address, method, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="userToken">一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法</param>
        <summary>打开一个流以使用指定的方法向指定的资源写入数据。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法检索用于将数据发送到的资源的可写流。 使用从线程池自动分配的线程资源以异步方式检索该流。 若要接收通知流可用时，将添加到事件处理程序<xref:System.Net.WebClient.OpenWriteCompleted>事件。 流的内容发送到服务器时关闭流。  
  
 如果`method`参数指定的方法不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 正在打开流时，此方法不会阻止调用线程。 若要阻止等待流时，请使用其中一个<xref:System.Net.WebClient.OpenWrite%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.OpenWriteCompletedEventHandler OpenWriteCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.OpenWriteCompletedEventHandler OpenWriteCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.OpenWriteCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OpenWriteCompleted As OpenWriteCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::OpenWriteCompletedEventHandler ^ OpenWriteCompleted;" />
      <MemberSignature Language="F#" Value="member this.OpenWriteCompleted : System.Net.OpenWriteCompletedEventHandler " Usage="member this.OpenWriteCompleted : System.Net.OpenWriteCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.OpenWriteCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在打开流以将数据写入资源的异步操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 完成异步操作以打开用于将数据发送到的资源的流每次都会引发此事件。 这些操作由调用启动<xref:System.Net.WebClient.OpenWriteAsync%2A>方法。  
  
 <xref:System.Net.OpenWriteCompletedEventHandler>是此事件的委托。 <xref:System.Net.OpenWriteCompletedEventArgs>类提供事件数据的事件处理程序。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置此事件的事件处理程序。  
  
 [!code-cpp[NCLWebClientAsync#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#14)]
 [!code-csharp[NCLWebClientAsync#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#14)]
 [!code-vb[NCLWebClientAsync#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenWriteTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用任务对象打开用于将数据写入指定资源的流以作为异步操作。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWriteTaskAsync (address As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenWriteTaskAsync(System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteTaskAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="webClient.OpenWriteTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <summary>使用任务对象打开用于将数据写入指定资源的流以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回用于将数据写入资源的 <see cref="T:System.IO.Stream" /> 数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后打开到数据资源的可写流。 打开流时，此方法不会阻止调用线程。  
  
 此方法检索<xref:System.IO.Stream>用来将数据写入到指定的资源实例`address`参数。 流是使用从线程池会自动分配的线程资源获取的。  
  
> [!NOTE]
>  必须调用<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>当您使用完<xref:System.IO.Stream>以避免系统资源不足。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
 当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWriteTaskAsync (address As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenWriteTaskAsync(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteTaskAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="webClient.OpenWriteTaskAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <summary>使用任务对象打开用于将数据写入指定资源的流以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回用于将数据写入资源的 <see cref="T:System.IO.Stream" /> 数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后打开到数据资源的可写流。 打开流时，此方法不会阻止调用线程。  
  
 此方法检索<xref:System.IO.Stream>用来将数据写入到指定的资源实例`address`参数。 流是使用从线程池会自动分配的线程资源获取的。  
  
> [!NOTE]
>  必须调用<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>当您使用完<xref:System.IO.Stream>以避免系统资源不足。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
 当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (string address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(string address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWriteTaskAsync (address As String, method As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenWriteTaskAsync(System::String ^ address, System::String ^ method);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteTaskAsync : string * string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="webClient.OpenWriteTaskAsync (address, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <summary>使用任务对象打开用于将数据写入指定资源的流以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回用于将数据写入资源的 <see cref="T:System.IO.Stream" /> 数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后打开到数据资源的可写流。 打开流时，此方法不会阻止调用线程。  
  
 此方法检索<xref:System.IO.Stream>用来将数据写入到指定的资源实例`address`参数。 流是使用从线程池会自动分配的线程资源获取的。  
  
> [!NOTE]
>  必须调用<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>当您使用完<xref:System.IO.Stream>以避免系统资源不足。  
  
 如果`method`参数指定的方法不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
 当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWriteTaskAsync (address As Uri, method As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenWriteTaskAsync(Uri ^ address, System::String ^ method);" />
      <MemberSignature Language="F#" Value="member this.OpenWriteTaskAsync : Uri * string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="webClient.OpenWriteTaskAsync (address, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <summary>使用任务对象打开用于将数据写入指定资源的流以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回用于将数据写入资源的 <see cref="T:System.IO.Stream" /> 数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后打开到数据资源的可写流。 打开流时，此方法不会阻止调用线程。  
  
 此方法检索<xref:System.IO.Stream>用来将数据写入到指定的资源实例`address`参数。 流是使用从线程池会自动分配的线程资源获取的。  
  
> [!NOTE]
>  必须调用<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>当您使用完<xref:System.IO.Stream>以避免系统资源不足。  
  
 如果`method`参数指定的方法不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
 当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public System.Net.IWebProxy Proxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Proxy" />
      <MemberSignature Language="VB.NET" Value="Public Property Proxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IWebProxy ^ Proxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Proxy : System.Net.IWebProxy with get, set" Usage="System.Net.WebClient.Proxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Net.WebClient" /> 对象使用的代理。</summary>
        <value>用于发送请求的 <see cref="T:System.Net.IWebProxy" /> 实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.Proxy%2A>属性标识<xref:System.Net.IWebProxy>代表这与远程服务器进行通信的实例<xref:System.Net.WebClient>对象。 代理是通过使用配置文件和 Internet Explorer 本地网络设置的系统设置。 若要指定应使用任何代理，请设置<xref:System.Net.WebClient.Proxy%2A>属性设置为`null`。  
  
 自动代理检测的信息，请参阅[自动代理检测](~/docs/framework/network-programming/automatic-proxy-detection.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">将 <see cref="P:System.Net.WebClient.Proxy" /> 设置为 <see langword="null" />。</exception>
        <permission cref="T:System.Net.WebPermission">这就是不受限制。 关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Net.WebResponse" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Net.HttpWebResponse" />
        <altmember cref="T:System.Net.FtpWebRequest" />
        <altmember cref="T:System.Net.FtpWebResponse" />
        <altmember cref="T:System.Net.GlobalProxySelection" />
        <altmember cref="T:System.Net.WebProxy" />
      </Docs>
    </Member>
    <Member MemberName="QueryString">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection QueryString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection QueryString" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.QueryString" />
      <MemberSignature Language="VB.NET" Value="Public Property QueryString As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ QueryString { System::Collections::Specialized::NameValueCollection ^ get(); void set(System::Collections::Specialized::NameValueCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueryString : System.Collections.Specialized.NameValueCollection with get, set" Usage="System.Net.WebClient.QueryString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与请求关联的查询名称/值对集合。</summary>
        <value>一个 <see cref="T:System.Collections.Specialized.NameValueCollection" />，包含与请求关联的查询名称/值对。 如果没有与请求关联的名称/值对，则值为空的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.QueryString%2A>属性包含<xref:System.Collections.Specialized.NameValueCollection>包含名称/值对追加到 URI 作为查询字符串的实例。 内容<xref:System.Net.WebClient.QueryString%2A>属性的前面有一个问号 （？），并以名称/值对分隔从另一个与号 (&)。  
  
   
  
## Examples  
 下面的代码示例接受命令行中的用户输入并生成<xref:System.Collections.Specialized.NameValueCollection>分配给<xref:System.Net.WebClient.QueryString%2A>属性。 它然后响应从服务器下载到本地文件。  
  
 [!code-cpp[WebClient_QueryString#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_QueryString/CPP/webclient_querystring.cpp#1)]
 [!code-csharp[WebClient_QueryString#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_QueryString/CS/webclient_querystring.cs#1)]
 [!code-vb[WebClient_QueryString#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_QueryString/VB/webclient_querystring.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseHeaders">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection ResponseHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection ResponseHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.ResponseHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ResponseHeaders As WebHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::WebHeaderCollection ^ ResponseHeaders { System::Net::WebHeaderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ResponseHeaders : System.Net.WebHeaderCollection" Usage="System.Net.WebClient.ResponseHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与响应关联的标头名称/值对集合。</summary>
        <value>
          <see cref="T:System.Net.WebHeaderCollection" />，包含与响应关联的标头名称/值对；如果尚未收到任何响应，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.ResponseHeaders%2A>属性包含<xref:System.Net.WebHeaderCollection>实例，包含标头信息<xref:System.Net.WebClient>接收响应。  
  
   
  
## Examples  
 下面的代码示例下载并显示<xref:System.Net.WebClient.ResponseHeaders%2A>由服务器返回。  
  
 [!code-cpp[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#2)]
 [!code-csharp[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#2)]
 [!code-vb[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将数据缓冲区上载到具有指定 URI 的资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (string address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(string address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadData (address As String, data As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadData(System::String ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadData : string * byte[] -&gt; byte[]" Usage="webClient.UploadData (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="data">要发送到资源的数据缓冲。</param>
        <summary>将数据缓冲区上载到由 URI 标识的资源。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadData%2A>方法将数据缓冲区发送到资源。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。 如果基础的请求不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 <xref:System.Net.WebClient.UploadData%2A>方法发送的内容`data`到服务器而无需对其进行编码。 此方法在将数据上传时阻止。 若要继续执行等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.UploadDataAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例将从控制台到输入字符串转换<xref:System.Byte>数组，该数组发送到指定的服务器使用<xref:System.Net.WebClient.UploadData%2A>。 向控制台显示来自服务器的任何响应。  
  
 [!code-cpp[WebClient_UpLoadData2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData2/CPP/webclient_uploaddata2.cpp#1)]
 [!code-csharp[WebClient_UpLoadData2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData2/CS/webclient_uploaddata2.cs#1)]
 [!code-vb[WebClient_UpLoadData2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData2/VB/webclient_uploaddata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="data" /> 为 <see langword="null" />。  
  
或 
发送数据时出错。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.Uri,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadData (address As Uri, data As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadData(Uri ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadData : Uri * byte[] -&gt; byte[]" Usage="webClient.UploadData (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="data">要发送到资源的数据缓冲。</param>
        <summary>将数据缓冲区上载到由 URI 标识的资源。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadData%2A>方法将数据缓冲区发送到资源。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。 如果基础的请求不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 <xref:System.Net.WebClient.UploadData%2A>方法发送的内容`data`到服务器而无需对其进行编码。 此方法在将数据上传时阻止。 若要继续执行等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.UploadDataAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="data" /> 为 <see langword="null" />。  
  
或 
发送数据时出错。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (string address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(string address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadData (address As String, method As String, data As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadData(System::String ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadData : string * string * byte[] -&gt; byte[]" Usage="webClient.UploadData (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="method">用于将数据发送到资源的 HTTP 方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要发送到资源的数据缓冲。</param>
        <summary>使用指定的方法将数据缓冲区上载到指定资源。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadData%2A>方法将数据缓冲区发送到使用中指定的 HTTP 方法的资源`method`参数，并从服务器返回任何响应。 此方法在将数据上传时阻止。 若要继续执行等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.UploadDataAsync%2A>方法。  
  
 <xref:System.Net.WebClient.UploadData%2A>方法发送的内容`data`到服务器而无需对其进行编码。  
  
 如果`method`参数指定的谓词不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例将转换为字节数组从控制台输入的字符串，该数组发送到指定的服务器使用<xref:System.Net.WebClient.UploadData%2A>。 向控制台显示来自服务器的任何响应。  
  
 [!code-cpp[WebClient_UpLoadData_Headers#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]
 [!code-csharp[WebClient_UpLoadData_Headers#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]
 [!code-vb[WebClient_UpLoadData_Headers#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="data" /> 为 <see langword="null" />。  
  
或 
上载数据时出错。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadData (address As Uri, method As String, data As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadData(Uri ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadData : Uri * string * byte[] -&gt; byte[]" Usage="webClient.UploadData (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="method">用于将数据发送到资源的 HTTP 方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要发送到资源的数据缓冲。</param>
        <summary>使用指定的方法将数据缓冲区上载到指定资源。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadData%2A>方法将数据缓冲区发送到使用中指定的 HTTP 方法的资源`method`参数，并从服务器返回任何响应。 此方法在将数据上传时阻止。 若要继续执行等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.UploadDataAsync%2A>方法。  
  
 <xref:System.Net.WebClient.UploadData%2A>方法发送的内容`data`到服务器而无需对其进行编码。  
  
 如果`method`参数指定的谓词不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="data" /> 为 <see langword="null" />。  
  
或 
上载数据时出错。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadDataAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将数据缓冲区上载到由 URI 标识的资源。 此方法不会阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadDataAsync (address As Uri, data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadDataAsync(Uri ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadDataAsync : Uri * byte[] -&gt; unit" Usage="webClient.UploadDataAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="data">要发送到资源的数据缓冲。</param>
        <summary>使用 POST 方法将数据缓冲区上载到由 URI 标识的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将数据缓冲区发送到资源。 使用从线程池自动分配的线程资源以异步方式发送的数据缓冲区。 未编码数据。 若要在数据上传完成时接收通知，事件处理程序添加到<xref:System.Net.WebClient.UploadDataCompleted>事件。  
  
 正在发送数据时，此方法不会阻止调用线程。 若要发送数据并阻止等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadData%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，并`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadDataAsync (address As Uri, method As String, data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadDataAsync(Uri ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadDataAsync : Uri * string * byte[] -&gt; unit" Usage="webClient.UploadDataAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 <see langword="null" />，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要发送到资源的数据缓冲。</param>
        <summary>使用指定的方法将数据缓冲区上载到由 URI 标识的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将数据缓冲区发送到资源。 使用从线程池自动分配的线程资源以异步方式发送的数据缓冲区。 未编码数据。 若要在数据上传完成时接收通知，事件处理程序添加到<xref:System.Net.WebClient.UploadDataCompleted>事件。  
  
 正在发送数据时，此方法不会阻止调用线程。 若要发送数据并阻止等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadData%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，并`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, string method, byte[] data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, string method, unsigned int8[] data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadDataAsync (address As Uri, method As String, data As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadDataAsync(Uri ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.UploadDataAsync : Uri * string * byte[] * obj -&gt; unit" Usage="webClient.UploadDataAsync (address, method, data, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 <see langword="null" />，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要发送到资源的数据缓冲。</param>
        <param name="userToken">一个用户定义对象，此对象将传递给完成异步操作后所调用的方法。</param>
        <summary>使用指定的方法和标识标记将数据缓冲区上载到由 URI 标识的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将数据缓冲区发送到资源。 使用从线程池自动分配的线程资源以异步方式发送的数据缓冲区。 未编码数据。 若要在数据上传完成时接收通知，事件处理程序添加到<xref:System.Net.WebClient.UploadDataCompleted>事件。  
  
 正在发送数据时，此方法不会阻止调用线程。 若要发送数据并阻止等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadData%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，并`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadDataCompletedEventHandler UploadDataCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadDataCompletedEventHandler UploadDataCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadDataCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadDataCompleted As UploadDataCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadDataCompletedEventHandler ^ UploadDataCompleted;" />
      <MemberSignature Language="F#" Value="member this.UploadDataCompleted : System.Net.UploadDataCompletedEventHandler " Usage="member this.UploadDataCompleted : System.Net.UploadDataCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadDataCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在异步数据上载操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次异步数据上传操作完成后，将引发此事件。 通过调用来启动异步数据上载<xref:System.Net.WebClient.UploadDataAsync%2A>方法。  
  
 <xref:System.Net.UploadDataCompletedEventHandler>是此事件的委托。 <xref:System.Net.UploadDataCompletedEventArgs>类提供事件数据的事件处理程序。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置此事件的事件处理程序。  
  
 [!code-cpp[NCLWebClientAsync#36](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#36)]
 [!code-csharp[NCLWebClientAsync#36](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#36)]
 [!code-vb[NCLWebClientAsync#36](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadDataTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用任务对象将包含 <see cref="T:System.Byte" /> 数组的数据缓冲区上载到指定 URI 以作为异步操作。  这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (string address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(string address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadDataTaskAsync (address As String, data As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadDataTaskAsync(System::String ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadDataTaskAsync : string * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadDataTaskAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="data">要发送到资源的数据缓冲。</param>
        <summary>使用任务对象将包含 <see cref="T:System.Byte" /> 数组的数据缓冲区上载到指定 URI 以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回 <see cref="T:System.Byte" /> 数组，该数组包含在上载数据缓冲区时从资源接收的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后的数据缓冲区上载到该资源。  
  
 此方法将数据缓冲区发送到资源。 使用从线程池自动分配的线程资源以异步方式发送的数据缓冲区。 未编码数据。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，并`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadDataTaskAsync (address As Uri, data As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadDataTaskAsync(Uri ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadDataTaskAsync : Uri * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadDataTaskAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="data">要发送到资源的数据缓冲。</param>
        <summary>使用任务对象将包含 <see cref="T:System.Byte" /> 数组的数据缓冲区上载到指定 URI 以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回 <see cref="T:System.Byte" /> 数组，该数组包含在上载数据缓冲区时从资源接收的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后的数据缓冲区上载到该资源。  
  
 此方法将数据缓冲区发送到资源。 使用从线程池自动分配的线程资源以异步方式发送的数据缓冲区。 未编码数据。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，并`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (string address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(string address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadDataTaskAsync (address As String, method As String, data As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadDataTaskAsync(System::String ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadDataTaskAsync : string * string * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadDataTaskAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 <see langword="null" />，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要发送到资源的数据缓冲。</param>
        <summary>使用任务对象将包含 <see cref="T:System.Byte" /> 数组的数据缓冲区上载到指定 URI 以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回 <see cref="T:System.Byte" /> 数组，该数组包含在上载数据缓冲区时从资源接收的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后的数据缓冲区上载到该资源。  
  
 此方法将数据缓冲区发送到资源。 使用从线程池自动分配的线程资源以异步方式发送的数据缓冲区。 未编码数据。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，并`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadDataTaskAsync (address As Uri, method As String, data As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadDataTaskAsync(Uri ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadDataTaskAsync : Uri * string * byte[] -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadDataTaskAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">接收数据的资源的 URI。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 <see langword="null" />，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要发送到资源的数据缓冲。</param>
        <summary>使用任务对象将包含 <see cref="T:System.Byte" /> 数组的数据缓冲区上载到指定 URI 以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回 <see cref="T:System.Byte" /> 数组，该数组包含在上载数据缓冲区时从资源接收的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后的数据缓冲区上载到该资源。  
  
 此方法将数据缓冲区发送到资源。 使用从线程池自动分配的线程资源以异步方式发送的数据缓冲区。 未编码数据。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，并`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将本地文件上载到具有指定 URI 的资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFile (address As String, fileName As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadFile(System::String ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * string -&gt; byte[]" Usage="webClient.UploadFile (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收文件的资源的 URI。 例如，ftp://localhost/samplefile.txt。</param>
        <param name="fileName">要发送到资源的文件。 例如，“samplefile.txt”。</param>
        <summary>将指定的本地文件上载到具有指定 URI 的资源。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadFile%2A>方法将本地文件发送到资源。 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
 上载文件时此方法阻止。 若要继续执行等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.UploadFileAsync%2A>方法。  
  
 `POST`方法定义的 HTTP。 如果基础的请求不使用 HTTP 和`POST`不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例将指定的文件上传到指定的 URI 使用<xref:System.Net.WebClient.UploadFile%2A>。 服务器返回任何响应会显示在控制台上。  
  
 [!code-cpp[WebClient_UpLoadFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile/CPP/webclient_uploadfile.cpp#1)]
 [!code-csharp[WebClient_UpLoadFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile/CS/webclient_uploadfile.cs#1)]
 [!code-vb[WebClient_UpLoadFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile/VB/webclient_uploadfile.vb#1)]  
  
 下面的代码示例显示了可接受的 ASP.NET 页发送的文件，非常适合用于<xref:System.Net.WebClient.UploadFile%2A>方法。 页面必须驻留在 Web 服务器上。 其地址提供的值`address`参数的<xref:System.Net.WebClient.UploadFile%2A>方法。  
  
 [!code-aspx-csharp[NCLWebClientAsp#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]
 [!code-aspx-vb[NCLWebClientAsp#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="fileName" /> 为 <see langword="null" />、为 <see cref="F:System.String.Empty" />、包含无效字符或者不存在。  
  
或 
上载文件时出错。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头以 <see langword="multipart" /> 开头。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要访问本地文件。 关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFile (address As Uri, fileName As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadFile(Uri ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : Uri * string -&gt; byte[]" Usage="webClient.UploadFile (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收文件的资源的 URI。 例如，ftp://localhost/samplefile.txt。</param>
        <param name="fileName">要发送到资源的文件。 例如，“samplefile.txt”。</param>
        <summary>将指定的本地文件上载到具有指定 URI 的资源。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadFile%2A>方法将本地文件发送到资源。 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
 上载文件时此方法阻止。 若要继续执行等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.UploadFileAsync%2A>方法。  
  
 `POST`方法定义的 HTTP。 如果基础的请求不使用 HTTP 和`POST`不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="fileName" /> 为 <see langword="null" />、为 <see cref="F:System.String.Empty" />、包含无效字符或者不存在。  
  
或 
上载文件时出错。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头以 <see langword="multipart" /> 开头。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要访问本地文件。 关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (string address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(string address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFile (address As String, method As String, fileName As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadFile(System::String ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * string * string -&gt; byte[]" Usage="webClient.UploadFile (address, method, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收文件的资源的 URI。</param>
        <param name="method">用于将文件发送到资源的方法。 如果为 <see langword="null" />，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="fileName">要发送到资源的文件。</param>
        <summary>使用指定的方法将指定的本地文件上载到指定的资源。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当地址指定 HTTP 资源时，<xref:System.Net.WebClient.UploadFile%2A>方法将本地文件发送到使用中指定的 HTTP 方法的资源`method`参数，并从服务器返回任何响应。 上载文件时此方法阻止。 若要继续执行等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.UploadFileAsync%2A>方法。  
  
 如果`method`参数指定的谓词不理解的服务器或`address`资源，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例将指定的文件上传到指定的 URI 使用<xref:System.Net.WebClient.UploadFile%2A>。 服务器返回任何响应会显示在控制台上。  
  
 [!code-cpp[WebClient_UpLoadFile2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CPP/webclient_uploadfile2.cpp#1)]
 [!code-csharp[WebClient_UpLoadFile2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CS/webclient_uploadfile2.cs#1)]
 [!code-vb[WebClient_UpLoadFile2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile2/VB/webclient_uploadfile2.vb#1)]  
  
 下面的代码示例显示了可接受的 ASP.NET 页发送的文件，非常适合用于<xref:System.Net.WebClient.UploadFile%2A>方法。 页面必须驻留在 Web 服务器上。 其地址提供的值`address`参数的<xref:System.Net.WebClient.UploadFile%2A>方法。  
  
 [!code-aspx-csharp[NCLWebClientAsp#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]
 [!code-aspx-vb[NCLWebClientAsp#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="fileName" /> 为 <see langword="null" />、为 <see cref="F:System.String.Empty" />、包含无效字符或者不存在。  
  
或 
上载文件时出错。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头以 <see langword="multipart" /> 开头。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要访问本地文件。 关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFile (address As Uri, method As String, fileName As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadFile(Uri ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : Uri * string * string -&gt; byte[]" Usage="webClient.UploadFile (address, method, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收文件的资源的 URI。</param>
        <param name="method">用于将文件发送到资源的方法。 如果为 <see langword="null" />，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="fileName">要发送到资源的文件。</param>
        <summary>使用指定的方法将指定的本地文件上载到指定的资源。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当地址指定 HTTP 资源时，<xref:System.Net.WebClient.UploadFile%2A>方法将本地文件发送到使用中指定的 HTTP 方法的资源`method`参数，并从服务器返回任何响应。 上载文件时此方法阻止。 若要继续执行等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.UploadFileAsync%2A>方法。  
  
 如果`method`参数指定的谓词不理解的服务器或`address`资源，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="fileName" /> 为 <see langword="null" />、为 <see cref="F:System.String.Empty" />、包含无效字符或者不存在。  
  
或 
上载文件时出错。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头以 <see langword="multipart" /> 开头。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要访问本地文件。 关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadFileAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将指定的本地文件上载到指定的资源。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFileAsync (address As Uri, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFileAsync(Uri ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFileAsync : Uri * string -&gt; unit" Usage="webClient.UploadFileAsync (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收文件的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="fileName">要发送到资源的文件。</param>
        <summary>使用 POST 方法将指定的本地文件上载到指定的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用从线程池自动分配的线程资源以异步方式发送文件。 文件上传完成时接收通知，请添加事件处理程序到<xref:System.Net.WebClient.UploadFileCompleted>事件。  
  
 正在发送文件时，此方法不会阻止调用线程。 若要将文件和数据块发送等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadFile%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="fileName" /> 为 <see langword="null" />、为 <see cref="F:System.String.Empty" />、包含无效字符或者指定的文件路径不存在。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头以 <see langword="multipart" /> 开头。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要访问本地文件。 关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFileAsync (address As Uri, method As String, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFileAsync(Uri ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFileAsync : Uri * string * string -&gt; unit" Usage="webClient.UploadFileAsync (address, method, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收文件的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 <see langword="null" />，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="fileName">要发送到资源的文件。</param>
        <summary>使用 POST 方法将指定的本地文件上载到指定的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用从线程池自动分配的线程资源以异步方式发送文件。 文件上传完成时接收通知，请添加事件处理程序到<xref:System.Net.WebClient.UploadFileCompleted>事件。  
  
 正在发送文件时，此方法不会阻止调用线程。 若要将文件和数据块发送等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadFile%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="fileName" /> 为 <see langword="null" />、为 <see cref="F:System.String.Empty" />、包含无效字符或者指定的文件路径不存在。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头以 <see langword="multipart" /> 开头。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要访问本地文件。 关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string method, string fileName, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string method, string fileName, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFileAsync (address As Uri, method As String, fileName As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFileAsync(Uri ^ address, System::String ^ method, System::String ^ fileName, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.UploadFileAsync : Uri * string * string * obj -&gt; unit" Usage="webClient.UploadFileAsync (address, method, fileName, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">接收文件的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 <see langword="null" />，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="fileName">要发送到资源的文件。</param>
        <param name="userToken">一个用户定义对象，此对象将传递给完成异步操作后所调用的方法。</param>
        <summary>使用 POST 方法将指定的本地文件上载到指定的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用从线程池自动分配的线程资源以异步方式发送文件。 文件上传完成时接收通知，请添加事件处理程序到<xref:System.Net.WebClient.UploadFileCompleted>事件。  
  
 正在发送文件时，此方法不会阻止调用线程。 若要将文件和数据块发送等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadFile%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="fileName" /> 为 <see langword="null" />、为 <see cref="F:System.String.Empty" />、包含无效字符或者指定的文件路径不存在。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头以 <see langword="multipart" /> 开头。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要访问本地文件。 关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadFileCompletedEventHandler UploadFileCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadFileCompletedEventHandler UploadFileCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadFileCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadFileCompleted As UploadFileCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadFileCompletedEventHandler ^ UploadFileCompleted;" />
      <MemberSignature Language="F#" Value="member this.UploadFileCompleted : System.Net.UploadFileCompletedEventHandler " Usage="member this.UploadFileCompleted : System.Net.UploadFileCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadFileCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在异步文件上载操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次异步文件上传操作完成后，将引发此事件。 异步文件上传开始通过调用<xref:System.Net.WebClient.UploadFileAsync%2A>方法。  
  
 <xref:System.Net.UploadFileCompletedEventHandler>是此事件的委托。 <xref:System.Net.UploadFileCompletedEventArgs>类提供事件数据的事件处理程序。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置此事件的事件处理程序。  
  
 [!code-cpp[NCLWebClientAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]
 [!code-csharp[NCLWebClientAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]
 [!code-vb[NCLWebClientAsync#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadFileTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用任务对象将指定本地文件上载到资源以作为异步操作。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFileTaskAsync (address As String, fileName As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadFileTaskAsync(System::String ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFileTaskAsync : string * string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadFileTaskAsync (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收文件的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="fileName">要发送到资源的本地文件。</param>
        <summary>使用任务对象将指定本地文件上载到资源以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回 <see cref="T:System.Byte" /> 数组，该数组包含在上载文件时从资源接收的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后该文件已上载到该资源。 使用从线程池自动分配的线程资源以异步方式发送文件。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="fileName" /> 为 <see langword="null" />、为 <see cref="F:System.String.Empty" />、包含无效字符或者指定的文件路径不存在。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头以 <see langword="multipart" /> 开头。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFileTaskAsync (address As Uri, fileName As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadFileTaskAsync(Uri ^ address, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFileTaskAsync : Uri * string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadFileTaskAsync (address, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收文件的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="fileName">要发送到资源的本地文件。</param>
        <summary>使用任务对象将指定本地文件上载到资源以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回 <see cref="T:System.Byte" /> 数组，该数组包含在上载文件时从资源接收的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后该文件已上载到该资源。 使用从线程池自动分配的线程资源以异步方式发送文件。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="fileName" /> 为 <see langword="null" />、为 <see cref="F:System.String.Empty" />、包含无效字符或者指定的文件路径不存在。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头以 <see langword="multipart" /> 开头。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (string address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(string address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFileTaskAsync (address As String, method As String, fileName As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadFileTaskAsync(System::String ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFileTaskAsync : string * string * string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadFileTaskAsync (address, method, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收文件的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 <see langword="null" />，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="fileName">要发送到资源的本地文件。</param>
        <summary>使用任务对象将指定本地文件上载到资源以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回 <see cref="T:System.Byte" /> 数组，该数组包含在上载文件时从资源接收的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后该文件已上载到该资源。 使用从线程池自动分配的线程资源以异步方式发送文件。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 默认情况下，此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="fileName" /> 为 <see langword="null" />、为 <see cref="F:System.String.Empty" />、包含无效字符或者指定的文件路径不存在。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头以 <see langword="multipart" /> 开头。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFileTaskAsync (address As Uri, method As String, fileName As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadFileTaskAsync(Uri ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.UploadFileTaskAsync : Uri * string * string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadFileTaskAsync (address, method, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">接收文件的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="method">用于将数据发送到资源的方法。 如果为 <see langword="null" />，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="fileName">要发送到资源的本地文件。</param>
        <summary>使用任务对象将指定本地文件上载到资源以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回 <see cref="T:System.Byte" /> 数组，该数组包含在上载文件时从资源接收的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后该文件已上载到该资源。 使用从线程池自动分配的线程资源以异步方式发送文件。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 默认情况下，此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="fileName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="fileName" /> 为 <see langword="null" />、为 <see cref="F:System.String.Empty" />、包含无效字符或者指定的文件路径不存在。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头以 <see langword="multipart" /> 开头。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadProgressChanged">
      <MemberSignature Language="C#" Value="public event System.Net.UploadProgressChangedEventHandler UploadProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadProgressChangedEventHandler UploadProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadProgressChanged As UploadProgressChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadProgressChangedEventHandler ^ UploadProgressChanged;" />
      <MemberSignature Language="F#" Value="member this.UploadProgressChanged : System.Net.UploadProgressChangedEventHandler " Usage="member this.UploadProgressChanged : System.Net.UploadProgressChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在异步上载操作成功转换部分或全部数据后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在异步上载取得的进度每次都会引发此事件。 使用以下方法之一启动上传时，引发此事件。  
  
|方法|描述|  
|------------|-----------------|  
|<xref:System.Net.WebClient.UploadDataAsync%2A>|将发送<xref:System.Byte>阵列分区到的资源，而不会阻止调用线程。|  
|<xref:System.Net.WebClient.UploadFileAsync%2A>|将本地文件发送到该资源，而不会阻止调用线程。|  
|<xref:System.Net.WebClient.UploadValuesAsync%2A>|将发送<xref:System.Collections.Specialized.NameValueCollection>资源，并返回到<xref:System.Byte>数组，包含任何响应，而不会阻止调用线程。|  
  
 <xref:System.Net.UploadProgressChangedEventHandler>是此事件的委托。 <xref:System.Net.UploadProgressChangedEventArgs>类提供事件数据的事件处理程序。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置此事件的事件处理程序。  
  
 [!code-cpp[NCLWebClientAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]
 [!code-csharp[NCLWebClientAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]
 [!code-vb[NCLWebClientAsync#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]  
  
 下面的代码示例显示了此事件的处理程序的实现。  
  
 [!code-cpp[NCLWebClientAsync#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]
 [!code-csharp[NCLWebClientAsync#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]
 [!code-vb[NCLWebClientAsync#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadString">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将指定的字符串上载到指定的资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (string address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(string address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadString (address As String, data As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UploadString(System::String ^ address, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadString : string * string -&gt; string" Usage="webClient.UploadString (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字符串的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="data">要上载的字符串。</param>
        <summary>使用 POST 方法将指定的字符串上载到指定的资源。</summary>
        <returns>一个 <see cref="T:System.String" />，包含服务器发送的响应。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上传之前该字符串，此方法将其转换为<xref:System.Byte>数组中指定的编码使用<xref:System.Net.WebClient.Encoding%2A>属性。 当传输字符串时，将阻止此方法。 若要将字符串发送并继续执行等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadStringAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，并`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLWebClientAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]
 [!code-csharp[NCLWebClientAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]
 [!code-vb[NCLWebClientAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadString (address As Uri, data As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UploadString(Uri ^ address, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadString : Uri * string -&gt; string" Usage="webClient.UploadString (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字符串的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="data">要上载的字符串。</param>
        <summary>使用 POST 方法将指定的字符串上载到指定的资源。</summary>
        <returns>一个 <see cref="T:System.String" />，包含服务器发送的响应。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上传之前该字符串，此方法将其转换为<xref:System.Byte>数组中指定的编码使用<xref:System.Net.WebClient.Encoding%2A>属性。 当传输字符串时，将阻止此方法。 若要将字符串发送并继续执行等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadStringAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("")，并`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (string address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(string address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadString (address As String, method As String, data As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UploadString(System::String ^ address, System::String ^ method, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadString : string * string * string -&gt; string" Usage="webClient.UploadString (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字符串的资源的 URI。 此 URI 必须标识可以接受使用 <c>method</c> 方法发送的请求的资源。</param>
        <param name="method">用于将字符串发送到资源的 HTTP 方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要上载的字符串。</param>
        <summary>使用指定的方法将指定的字符串上载到指定的资源。</summary>
        <returns>一个 <see cref="T:System.String" />，包含服务器发送的响应。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上传之前该字符串，此方法将其转换为<xref:System.Byte>数组中指定的编码使用<xref:System.Net.WebClient.Encoding%2A>属性。 当传输字符串时，将阻止此方法。 若要将字符串发送并继续执行等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadStringAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLWebClientAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#2)]
 [!code-csharp[NCLWebClientAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#2)]
 [!code-vb[NCLWebClientAsync#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
承载资源的服务器没有响应。  
  
或 
 <paramref name="method" /> 不能用来发送内容。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadString (address As Uri, method As String, data As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UploadString(Uri ^ address, System::String ^ method, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadString : Uri * string * string -&gt; string" Usage="webClient.UploadString (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字符串的资源的 URI。 此 URI 必须标识可以接受使用 <c>method</c> 方法发送的请求的资源。</param>
        <param name="method">用于将字符串发送到资源的 HTTP 方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要上载的字符串。</param>
        <summary>使用指定的方法将指定的字符串上载到指定的资源。</summary>
        <returns>一个 <see cref="T:System.String" />，包含服务器发送的响应。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上传之前该字符串，此方法将其转换为<xref:System.Byte>数组中指定的编码使用<xref:System.Net.WebClient.Encoding%2A>属性。 当传输字符串时，将阻止此方法。 若要将字符串发送并继续执行等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadStringAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
承载资源的服务器没有响应。  
  
或 
 <paramref name="method" /> 不能用来发送内容。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadStringAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将指定的字符串上载到指定的资源。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadStringAsync (address As Uri, data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadStringAsync(Uri ^ address, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadStringAsync : Uri * string -&gt; unit" Usage="webClient.UploadStringAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字符串的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="data">要上载的字符串。</param>
        <summary>将指定的字符串上载到指定的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将字符串发送到的资源。 使用从线程池自动分配的线程资源以异步方式发送字符串。 上传之前该字符串，此方法将其转换为<xref:System.Byte>数组中指定的编码使用<xref:System.Net.WebClient.Encoding%2A>属性。 若要在字符串的上载完成时接收通知，可以添加到事件处理程序<xref:System.Net.WebClient.UploadStringCompleted>事件。  
  
 正在发送字符串时，此方法不会阻止调用线程。 若要将一个字符串并发送等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadString%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadStringAsync (address As Uri, method As String, data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadStringAsync(Uri ^ address, System::String ^ method, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadStringAsync : Uri * string * string -&gt; unit" Usage="webClient.UploadStringAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字符串的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="method">用于将文件发送到资源的 HTTP 方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要上载的字符串。</param>
        <summary>将指定的字符串上载到指定的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将字符串发送到的资源。 使用从线程池自动分配的线程资源以异步方式发送字符串。 上传之前该字符串，此方法将其转换为<xref:System.Byte>数组中指定的编码使用<xref:System.Net.WebClient.Encoding%2A>属性。 若要在字符串的上载完成时接收通知，可以添加到事件处理程序<xref:System.Net.WebClient.UploadStringCompleted>事件。  
  
 正在发送字符串时，此方法不会阻止调用线程。 若要将一个字符串并发送等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadString%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="method" /> 不能用来发送内容。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string method, string data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string method, string data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadStringAsync (address As Uri, method As String, data As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadStringAsync(Uri ^ address, System::String ^ method, System::String ^ data, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.UploadStringAsync : Uri * string * string * obj -&gt; unit" Usage="webClient.UploadStringAsync (address, method, data, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">要接收字符串的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="method">用于将文件发送到资源的 HTTP 方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要上载的字符串。</param>
        <param name="userToken">一个用户定义对象，此对象将传递给完成异步操作后所调用的方法。</param>
        <summary>将指定的字符串上载到指定的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将字符串发送到的资源。 使用从线程池自动分配的线程资源以异步方式发送字符串。 上传之前该字符串，此方法将其转换为<xref:System.Byte>数组中指定的编码使用<xref:System.Net.WebClient.Encoding%2A>属性。 若要在字符串的上载完成时接收通知，可以添加到事件处理程序<xref:System.Net.WebClient.UploadStringCompleted>事件。  
  
 正在发送字符串时，此方法不会阻止调用线程。 若要将一个字符串并发送等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadString%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="method" /> 不能用来发送内容。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadStringCompletedEventHandler UploadStringCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadStringCompletedEventHandler UploadStringCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadStringCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadStringCompleted As UploadStringCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadStringCompletedEventHandler ^ UploadStringCompleted;" />
      <MemberSignature Language="F#" Value="member this.UploadStringCompleted : System.Net.UploadStringCompletedEventHandler " Usage="member this.UploadStringCompleted : System.Net.UploadStringCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadStringCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在异步字符串上载操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次异步字符串上载操作完成后，将引发此事件。 通过调用来启动异步字符串上载<xref:System.Net.WebClient.UploadStringAsync%2A>方法。  
  
 <xref:System.Net.UploadStringCompletedEventHandler>是此事件的委托。 <xref:System.Net.UploadStringCompletedEventArgs>类提供事件数据的事件处理程序。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置此事件的事件处理程序。  
  
 [!code-cpp[NCLWebClientAsync#38](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#38)]
 [!code-csharp[NCLWebClientAsync#38](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#38)]
 [!code-vb[NCLWebClientAsync#38](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadStringTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用任务对象将指定字符串上载到指定资源以作为异步操作。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (string address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(string address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadStringTaskAsync (address As String, data As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ UploadStringTaskAsync(System::String ^ address, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadStringTaskAsync : string * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="webClient.UploadStringTaskAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字符串的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="data">要上载的字符串。</param>
        <summary>使用任务对象将指定字符串上载到指定资源以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回包含服务器发送的响应的 <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后已上载到该资源字符串。 使用从线程池自动分配的线程资源以异步方式发送字符串。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 上传之前该字符串，此方法将其转换为<xref:System.Byte>数组中指定的编码使用<xref:System.Net.WebClient.Encoding%2A>属性。 当传输字符串时，将阻止此方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadStringTaskAsync (address As Uri, data As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ UploadStringTaskAsync(Uri ^ address, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadStringTaskAsync : Uri * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="webClient.UploadStringTaskAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字符串的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="data">要上载的字符串。</param>
        <summary>使用任务对象将指定字符串上载到指定资源以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回包含服务器发送的响应的 <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后已上载到该资源字符串。 使用从线程池自动分配的线程资源以异步方式发送字符串。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 上传之前该字符串，此方法将其转换为<xref:System.Byte>数组中指定的编码使用<xref:System.Net.WebClient.Encoding%2A>属性。 当传输字符串时，将阻止此方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (string address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(string address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadStringTaskAsync (address As String, method As String, data As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ UploadStringTaskAsync(System::String ^ address, System::String ^ method, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadStringTaskAsync : string * string * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="webClient.UploadStringTaskAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字符串的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="method">用于将文件发送到资源的 HTTP 方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要上载的字符串。</param>
        <summary>使用任务对象将指定字符串上载到指定资源以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回包含服务器发送的响应的 <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后已上载到该资源字符串。 使用从线程池自动分配的线程资源以异步方式发送字符串。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 上传之前该字符串，此方法将其转换为<xref:System.Byte>数组中指定的编码使用<xref:System.Net.WebClient.Encoding%2A>属性。 当传输字符串时，将阻止此方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="method" /> 不能用来发送内容。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadStringTaskAsync (address As Uri, method As String, data As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ UploadStringTaskAsync(Uri ^ address, System::String ^ method, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadStringTaskAsync : Uri * string * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="webClient.UploadStringTaskAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字符串的资源的 URI。 对于 HTTP 资源，此 URI 必须标识可以接受用 POST 方法发送的请求的资源，如脚本或 ASP 页。</param>
        <param name="method">用于将文件发送到资源的 HTTP 方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要上载的字符串。</param>
        <summary>使用任务对象将指定字符串上载到指定资源以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回包含服务器发送的响应的 <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后已上载到该资源字符串。 使用从线程池自动分配的线程资源以异步方式发送字符串。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 上传之前该字符串，此方法将其转换为<xref:System.Byte>数组中指定的编码使用<xref:System.Net.WebClient.Encoding%2A>属性。 当传输字符串时，将阻止此方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="method" /> 不能用来发送内容。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadValues">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将名称/值集合上载到具有指定 URI 的资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (string address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(string address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValues (address As String, data As NameValueCollection) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadValues(System::String ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValues : string * System.Collections.Specialized.NameValueCollection -&gt; byte[]" Usage="webClient.UploadValues (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">接收集合的资源的 URI。</param>
        <param name="data">要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>将指定的名称/值集合上载到指定的 URI 所标识的资源。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadValues%2A>方法发送<xref:System.Collections.Specialized.NameValueCollection>到服务器。 此方法在将数据上传时阻止。 若要继续执行等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.UploadValuesAsync%2A>方法。  
  
 如果基础的请求不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果内容类型标头`null`，则<xref:System.Net.WebClient.UploadValues%2A>方法将其设置为"应用程序/x-www 的窗体的 urlencoded"。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例从用户 （姓名、 年龄和地址） 收集信息并将值发布到服务器使用<xref:System.Net.WebClient.UploadValues%2A>。 在控制台上显示来自服务器的任何响应。  
  
 [!code-cpp[WebClient_UploadValues#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues/CPP/webclient_uploadvalues.cpp#1)]
 [!code-csharp[WebClient_UploadValues#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues/CS/webclient_uploadvalues.cs#1)]
 [!code-vb[WebClient_UploadValues#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues/VB/webclient_uploadvalues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="data" /> 为 <see langword="null" />。  
  
或 
承载资源的服务器没有响应。  
  
或 
打开流时发生错误。  
  
或 
<see langword="Content-type" /> 标头不是 <see langword="null" /> 或“application/x-www-form-urlencoded”。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValues (address As Uri, data As NameValueCollection) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadValues(Uri ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValues : Uri * System.Collections.Specialized.NameValueCollection -&gt; byte[]" Usage="webClient.UploadValues (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">接收集合的资源的 URI。</param>
        <param name="data">要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>将指定的名称/值集合上载到指定的 URI 所标识的资源。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadValues%2A>方法发送<xref:System.Collections.Specialized.NameValueCollection>到服务器。 此方法在将数据上传时阻止。 若要继续执行等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.UploadValuesAsync%2A>方法。  
  
 如果基础的请求不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果内容类型标头`null`，则<xref:System.Net.WebClient.UploadValues%2A>方法将其设置为"应用程序/x-www 的窗体的 urlencoded"。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="data" /> 为 <see langword="null" />。  
  
或 
承载资源的服务器没有响应。  
  
或 
打开流时发生错误。  
  
或 
<see langword="Content-type" /> 标头不是 <see langword="null" /> 或“application/x-www-form-urlencoded”。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (string address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(string address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValues (address As String, method As String, data As NameValueCollection) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadValues(System::String ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValues : string * string * System.Collections.Specialized.NameValueCollection -&gt; byte[]" Usage="webClient.UploadValues (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">接收集合的资源的 URI。</param>
        <param name="method">用于将文件发送到资源的 HTTP 方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用指定的方法将指定的名称/值集合上载到指定的 URI 所标识的资源。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadValues%2A>方法发送<xref:System.Collections.Specialized.NameValueCollection>对资源使用中指定的方法`method`参数，并从服务器返回任何响应。 此方法在将数据上传时阻止。 若要继续执行等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.UploadValuesAsync%2A>方法。  
  
 如果`Content-type`标头`null`，则<xref:System.Net.WebClient.UploadValues%2A>方法将其设置为`application/x-www-form-urlencoded`。  
  
 如果`method`参数指定的谓词不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下面的代码示例从用户 （姓名、 年龄和地址） 收集信息并将值发布到服务器使用<xref:System.Net.WebClient.UploadValues%2A>。 在控制台上显示来自服务器的任何响应。  
  
 [!code-cpp[WebClient_UploadValues2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues2/CPP/webclient_uploadvalues2.cpp#1)]
 [!code-csharp[WebClient_UploadValues2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues2/CS/webclient_uploadvalues2.cs#1)]
 [!code-vb[WebClient_UploadValues2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues2/VB/webclient_uploadvalues2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="data" /> 为 <see langword="null" />。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头值既不是 <see langword="null" /> 也不是 <see langword="application/x-www-form-urlencoded" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValues (address As Uri, method As String, data As NameValueCollection) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadValues(Uri ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValues : Uri * string * System.Collections.Specialized.NameValueCollection -&gt; byte[]" Usage="webClient.UploadValues (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">接收集合的资源的 URI。</param>
        <param name="method">用于将文件发送到资源的 HTTP 方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用指定的方法将指定的名称/值集合上载到指定的 URI 所标识的资源。</summary>
        <returns>一个 <see cref="T:System.Byte" /> 数组，它包含来自资源的响应的正文。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadValues%2A>方法发送<xref:System.Collections.Specialized.NameValueCollection>对资源使用中指定的方法`method`参数，并从服务器返回任何响应。 此方法在将数据上传时阻止。 若要继续执行等待服务器的响应时，请使用其中一个<xref:System.Net.WebClient.UploadValuesAsync%2A>方法。  
  
 如果`Content-type`标头`null`，则<xref:System.Net.WebClient.UploadValues%2A>方法将其设置为`application/x-www-form-urlencoded`。  
  
 如果`method`参数指定的谓词不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="data" /> 为 <see langword="null" />。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头值既不是 <see langword="null" /> 也不是 <see langword="application/x-www-form-urlencoded" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadValuesAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将指定的名称/值集合上载到指定的 URI 所标识的资源。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadValuesAsync (address As Uri, data As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadValuesAsync(Uri ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesAsync : Uri * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="webClient.UploadValuesAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">接收集合的资源的 URI。 此 URI 必须标识可以接受使用默认方法发送的请求的资源。</param>
        <param name="data">要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>将指定的名称/值集合中的数据上载到由指定的 URI 标识的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将字符串发送到的资源。 使用从线程池自动分配的线程资源以异步方式发送字符串。 上传之前该字符串，此方法将其转换为<xref:System.Byte>数组中指定的编码使用<xref:System.Net.WebClient.Encoding%2A>属性。 若要在字符串的上载完成时接收通知，可以添加到事件处理程序<xref:System.Net.WebClient.UploadStringCompleted>事件。  
  
 正在发送字符串时，此方法不会阻止调用线程。 若要将一个字符串并发送等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadString%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
承载资源的服务器没有响应。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadValuesAsync (address As Uri, method As String, data As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadValuesAsync(Uri ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesAsync : Uri * string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="webClient.UploadValuesAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">接收集合的资源的 URI。 此 URI 必须标识可以接受使用 <c>method</c> 方法发送的请求的资源。</param>
        <param name="method">用于将字符串发送到资源的方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用指定的方法将指定的名称/值集合中的数据上载到由指定的 URI 标识的资源。 此方法不会阻止调用线程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将发送中包含的数据<xref:System.Collections.Specialized.NameValueCollection>到`address`资源。 此方法用于将窗体数据发送到 URI 进行处理。 使用窗体 url 编码媒体类型; 发送数据内容类型标头值必须设置为"应用程序/x-www 的窗体的 urlencoded"。 默认情况下，标头会正确设置。 <xref:System.Net.WebClient.UploadValuesAsync%2A>方法将引发<xref:System.Net.WebException>如果调用此方法具有不同内容类型标头值集合中<xref:System.Net.WebClient.Headers%2A>集合。  
  
 如果`method`方法不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 <xref:System.Collections.Specialized.NameValueCollection>使用从线程池自动分配的线程资源以异步方式发送。 若要上传操作完成时接收通知，事件处理程序添加到<xref:System.Net.WebClient.UploadValuesCompleted>事件。  
  
 正在发送字符串时，此方法不会阻止调用线程。 若要将一个字符串并发送等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadValues%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空，则追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
承载资源的服务器没有响应。  
  
或 
 <paramref name="method" /> 不能用来发送内容。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadValuesAsync (address As Uri, method As String, data As NameValueCollection, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadValuesAsync(Uri ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesAsync : Uri * string * System.Collections.Specialized.NameValueCollection * obj -&gt; unit" Usage="webClient.UploadValuesAsync (address, method, data, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">接收集合的资源的 URI。 此 URI 必须标识可以接受使用 <c>method</c> 方法发送的请求的资源。</param>
        <param name="method">用于将字符串发送到资源的 HTTP 方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <param name="userToken">一个用户定义对象，此对象将传递给完成异步操作后所调用的方法。</param>
        <summary>使用指定的方法将指定的名称/值集合中的数据上载到由指定的 URI 标识的资源。 此方法不会阻止调用线程，并允许调用方将对象传递给操作完成时所调用的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将发送中包含的数据<xref:System.Collections.Specialized.NameValueCollection>到`address`资源。 此方法用于将窗体数据发送到 URI 进行处理。 使用窗体 url 编码媒体类型; 发送数据内容类型标头值必须设置为"应用程序/x-www 的窗体的 urlencoded"。 默认情况下，标头会正确设置。 <xref:System.Net.WebClient.UploadValuesAsync%2A>方法将引发<xref:System.Net.WebException>如果调用此方法具有不同内容类型标头值集合中<xref:System.Net.WebClient.Headers%2A>集合。  
  
 如果`method`方法不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 <xref:System.Collections.Specialized.NameValueCollection>使用从线程池自动分配的线程资源以异步方式发送。 若要上传操作完成时接收通知，事件处理程序添加到<xref:System.Net.WebClient.UploadValuesCompleted>事件。  
  
 正在发送字符串时，此方法不会阻止调用线程。 若要将一个字符串并发送等待服务器的响应时，使用之一<xref:System.Net.WebClient.UploadValues%2A>方法。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空，则追加到`address`。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
承载资源的服务器没有响应。  
  
或 
 <paramref name="method" /> 不能用来发送内容。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadValuesCompletedEventHandler UploadValuesCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadValuesCompletedEventHandler UploadValuesCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadValuesCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadValuesCompleted As UploadValuesCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadValuesCompletedEventHandler ^ UploadValuesCompleted;" />
      <MemberSignature Language="F#" Value="member this.UploadValuesCompleted : System.Net.UploadValuesCompletedEventHandler " Usage="member this.UploadValuesCompleted : System.Net.UploadValuesCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadValuesCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在名称/值集合的异步上载完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发此事件每次的异步上载<xref:System.Collections.Specialized.NameValueCollection>完成对象的数据。 通过调用这些上载<xref:System.Net.WebClient.UploadValuesAsync%2A>方法。  
  
 <xref:System.Net.UploadValuesCompletedEventHandler>是此事件的委托。 <xref:System.Net.UploadValuesCompletedEventArgs>类提供事件数据的事件处理程序。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadValuesTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用任务对象将指定的名称/值集合上载到由指定 URI 标识的资源以作为异步操作。 这些方法不阻止调用线程。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (string address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(string address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValuesTaskAsync (address As String, data As NameValueCollection) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadValuesTaskAsync(System::String ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesTaskAsync : string * System.Collections.Specialized.NameValueCollection -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadValuesTaskAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">接收集合的资源的 URI。</param>
        <param name="data">要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用任务对象将指定的名称/值集合上载到由指定 URI 标识的资源以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回包含服务器发送的响应的 <see cref="T:System.Byte" /> 数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后已将名称/值集合上载到该资源。 使用从线程池自动分配的线程资源以异步方式发送名称/值集合。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果基础的请求不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果内容类型标头`null`，此方法将其设置为"应用程序/x-www 的窗体的 urlencoded"。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
承载资源的服务器没有响应。  
  
或 
打开流时发生错误。  
  
或 
<see langword="Content-type" /> 标头不是 <see langword="null" /> 或“application/x-www-form-urlencoded”。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValuesTaskAsync (address As Uri, data As NameValueCollection) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadValuesTaskAsync(Uri ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesTaskAsync : Uri * System.Collections.Specialized.NameValueCollection -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadValuesTaskAsync (address, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">接收集合的资源的 URI。</param>
        <param name="data">要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用任务对象将指定的名称/值集合上载到由指定 URI 标识的资源以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回包含服务器发送的响应的 <see cref="T:System.Byte" /> 数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后已将名称/值集合上载到该资源。 使用从线程池自动分配的线程资源以异步方式发送名称/值集合。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果基础的请求不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果内容类型标头`null`，此方法将其设置为"应用程序/x-www 的窗体的 urlencoded"。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
打开流时发生错误。  
  
或 
承载资源的服务器没有响应。  
  
或 
<see langword="Content-type" /> 标头值既不是 <see langword="null" /> 也不是 <see langword="application/x-www-form-urlencoded" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (string address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(string address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValuesTaskAsync (address As String, method As String, data As NameValueCollection) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadValuesTaskAsync(System::String ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesTaskAsync : string * string * System.Collections.Specialized.NameValueCollection -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadValuesTaskAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">接收集合的资源的 URI。</param>
        <param name="method">用于将集合发送到资源的 HTTP 方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用任务对象将指定的名称/值集合上载到由指定 URI 标识的资源以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回包含服务器发送的响应的 <see cref="T:System.Byte" /> 数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后已将名称/值集合上载到该资源。 使用从线程池自动分配的线程资源以异步方式发送名称/值集合。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果基础的请求不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果内容类型标头`null`，此方法将其设置为"应用程序/x-www 的窗体的 urlencoded"。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="method" /> 不能用来发送内容。  
  
或 
承载资源的服务器没有响应。  
  
或 
打开流时发生错误。  
  
或 
<see langword="Content-type" /> 标头不是 <see langword="null" /> 或“application/x-www-form-urlencoded”。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValuesTaskAsync (address As Uri, method As String, data As NameValueCollection) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadValuesTaskAsync(Uri ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberSignature Language="F#" Value="member this.UploadValuesTaskAsync : Uri * string * System.Collections.Specialized.NameValueCollection -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="webClient.UploadValuesTaskAsync (address, method, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">接收集合的资源的 URI。</param>
        <param name="method">用于将集合发送到资源的 HTTP 方法。 如果为 null，则对于 http 默认值为 POST，对于 ftp 默认值为 STOR。</param>
        <param name="data">要发送到资源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用任务对象将指定的名称/值集合上载到由指定 URI 标识的资源以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回包含服务器发送的响应的 <see cref="T:System.Byte" /> 数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将完成后已将名称/值集合上载到该资源。 使用从线程池自动分配的线程资源以异步方式发送名称/值集合。  
  
 可以使用取消异步操作尚未完成的<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果基础的请求不理解的服务器，则基础协议类确定所发生的情况。 通常情况下，<xref:System.Net.WebException>将引发<xref:System.Net.WebException.Status%2A>属性设置，以指示错误。  
  
 如果内容类型标头`null`，此方法将其设置为"应用程序/x-www 的窗体的 urlencoded"。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>属性不是空字符串 ("") 和`address`不包含绝对 URI`address`必须与组合是相对 URI<xref:System.Net.WebClient.BaseAddress%2A>以形成所请求的数据的绝对 URI。 如果<xref:System.Net.WebClient.QueryString%2A>属性不为空字符串，将其追加到`address`。  
  
 此方法使用存储帐户命令上传 FTP 资源。 对于 HTTP 资源，使用 POST 方法。  
  
> [!NOTE]
>  当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 参数为 <see langword="null" />。  
  
或 
<paramref name="data" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">通过组合 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 所构成的 URI 无效。  
  
或 
 <paramref name="method" /> 不能用来发送内容。  
  
或 
承载资源的服务器没有响应。  
  
或 
打开流时发生错误。  
  
或 
<see langword="Content-type" /> 标头不是 <see langword="null" /> 或“application/x-www-form-urlencoded”。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.UseDefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultCredentials As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultCredentials { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultCredentials : bool with get, set" Usage="System.Net.WebClient.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值控制 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 是否随请求一起发送。</summary>
        <value>如果使用默认凭据，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将此属性设置为`true`时发出此请求<xref:System.Net.WebClient>对象应，如果请求服务器进行身份验证使用当前登录用户的默认凭据。 对于客户端应用程序，这是在大多数情况下所需的行为。 对于中间层应用程序，如 ASP.NET 应用程序，而不是使用此属性，通常会设置<xref:System.Net.WebClient.Credentials%2A>属性设置为客户端的名义发出请求的凭据。  
  
   
  
## Examples  
 下面的代码示例演示如何设置此属性。  
  
 [!code-cpp[NCLWebClientAsync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#3)]
 [!code-csharp[NCLWebClientAsync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#3)]
 [!code-vb[NCLWebClientAsync#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStreamClosed">
      <MemberSignature Language="C#" Value="public event System.Net.WriteStreamClosedEventHandler WriteStreamClosed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.WriteStreamClosedEventHandler WriteStreamClosed" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.WriteStreamClosed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WriteStreamClosed As WriteStreamClosedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::WriteStreamClosedEventHandler ^ WriteStreamClosed;" />
      <MemberSignature Language="F#" Value="member this.WriteStreamClosed : System.Net.WriteStreamClosedEventHandler " Usage="member this.WriteStreamClosed : System.Net.WriteStreamClosedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.WriteStreamClosedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在使用写入流将数据写入资源的异步操作结束时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 关闭使用将数据写入资源使用写入流的异步操作每次都会引发此事件。 这些操作产生的调用<xref:System.Net.WebClient.OpenWriteTaskAsync%2A>方法。  
  
 <xref:System.Net.WriteStreamClosedEventHandler>是此事件的委托。 <xref:System.Net.WriteStreamClosedEventArgs>类提供事件数据的事件处理程序。  
  
 有关如何处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>