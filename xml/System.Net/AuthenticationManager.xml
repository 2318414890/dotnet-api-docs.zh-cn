<Type Name="AuthenticationManager" FullName="System.Net.AuthenticationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e1c61f84f768d1468b1eada6f1e535de9ec0816e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36549517" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AuthenticationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AuthenticationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.AuthenticationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AuthenticationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AuthenticationManager" />
  <TypeSignature Language="F#" Value="type AuthenticationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Requests</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>管理客户端身份验证过程中调用的身份验证模块。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.AuthenticationManager> 是一个静态类，管理应用程序使用的身份验证模块。 当请求受保护的资源，<xref:System.Net.AuthenticationManager>调用<xref:System.Net.AuthenticationManager.Authenticate%2A>方法以获取<xref:System.Net.Authorization>要在后续请求中使用的实例。  
  
 <xref:System.Net.AuthenticationManager>查询每个已注册身份验证模块，通过调用<xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=nameWithType>每个模块的方法。 要返回的第一个身份验证模块<xref:System.Net.Authorization>实例用于对请求进行身份验证。  
  
 模块，它们提供基本、 摘要式、 协商、 NTLM、 和 Kerberos 身份验证类型注册到<xref:System.Net.AuthenticationManager>默认情况下。 实现的附加身份验证模块<xref:System.Net.IAuthenticationModule>可以使用添加接口<xref:System.Net.AuthenticationManager.Register%2A>方法。 添加到列表的顺序在称为身份验证模块。  
  
> [!NOTE]
>  Kerberos 和协商身份验证类型不支持在 Windows 95/98 或 Windows NT 4.0 上。  
  
   
  
## Examples  
 [!code-cpp[System.Net.Authentication#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Authentication/CPP/custombasicauthentication.cpp#1)]
 [!code-csharp[System.Net.Authentication#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Authentication/CS/custombasicauthentication.cs#1)]
 [!code-vb[System.Net.Authentication#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Authentication/VB/custombasicauthentication.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public static System.Net.Authorization Authenticate (string challenge, System.Net.WebRequest request, System.Net.ICredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Authorization Authenticate(string challenge, class System.Net.WebRequest request, class System.Net.ICredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Authenticate (challenge As String, request As WebRequest, credentials As ICredentials) As Authorization" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Authorization ^ Authenticate(System::String ^ challenge, System::Net::WebRequest ^ request, System::Net::ICredentials ^ credentials);" />
      <MemberSignature Language="F#" Value="static member Authenticate : string * System.Net.WebRequest * System.Net.ICredentials -&gt; System.Net.Authorization" Usage="System.Net.AuthenticationManager.Authenticate (challenge, request, credentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Authorization</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="System.String" />
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="challenge">Internet 资源返回的质询。</param>
        <param name="request">启动身份验证质询的 <see cref="T:System.Net.WebRequest" />。</param>
        <param name="credentials">与此请求关联的 <see cref="T:System.Net.ICredentials" />。</param>
        <summary>调用每个已注册的身份验证模块以查找第一个可响应身份验证请求的模块。</summary>
        <returns>
          <see cref="T:System.Net.Authorization" /> 类的实例，包含授权尝试的结果。 如果没有身份验证模块响应质询，则此方法返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.AuthenticationManager.Authenticate%2A>方法调用<xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=nameWithType>方法直到模块之一做出响应与每个已注册身份验证模块<xref:System.Net.Authorization>实例。  
  
 第一个<xref:System.Net.Authorization>返回实例用于进行身份验证请求。 如果没有身份验证模块可以验证该请求，<xref:System.Net.AuthenticationManager.Authenticate%2A>方法返回`null`。  
  
 身份验证模块的调用与注册顺序<xref:System.Net.AuthenticationManager>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="challenge" /> 为 <see langword="null" />。  - 或 -  <paramref name="request" /> 为 <see langword="null" />。  - 或 -  <paramref name="credentials" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CredentialPolicy">
      <MemberSignature Language="C#" Value="public static System.Net.ICredentialPolicy CredentialPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.ICredentialPolicy CredentialPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.CredentialPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CredentialPolicy As ICredentialPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::ICredentialPolicy ^ CredentialPolicy { System::Net::ICredentialPolicy ^ get(); void set(System::Net::ICredentialPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CredentialPolicy : System.Net.ICredentialPolicy with get, set" Usage="System.Net.AuthenticationManager.CredentialPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentialPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置凭据策略，该凭据策略将用于使用 <see cref="T:System.Net.HttpWebRequest" /> 类发出的资源请求。</summary>
        <value>一个实现 <see cref="T:System.Net.ICredentialPolicy" /> 接口的对象，该接口确定凭据是否随请求一起发送。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 凭据策略确定是否发送对网络资源，如 Web 页的内容的请求时发送的凭据。 如果发送凭据，需要客户端身份验证服务器可以尝试时收到的请求而不是发送响应，该值指示需要客户端的凭据进行客户端身份验证。 虽然这省去了与服务器的往返行程，这必须与在网络上发送凭据中的固有安全风险进行权衡。 目标服务器不需要客户端身份验证时，最好不发送凭据。  
  
 凭据策略将会仅为指定的凭据或使用的请求调用<xref:System.Net.WebProxy>对象，它指定凭据。  
  
   
  
## Examples  
 下面的代码示例演示如何设置凭据策略。  
  
 [!code-cpp[NclCredPolicy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#2)]
 [!code-csharp[NclCredPolicy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomTargetNameDictionary">
      <MemberSignature Language="C#" Value="public static System.Collections.Specialized.StringDictionary CustomTargetNameDictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Specialized.StringDictionary CustomTargetNameDictionary" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.CustomTargetNameDictionary" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CustomTargetNameDictionary As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Specialized::StringDictionary ^ CustomTargetNameDictionary { System::Collections::Specialized::StringDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomTargetNameDictionary : System.Collections.Specialized.StringDictionary" Usage="System.Net.AuthenticationManager.CustomTargetNameDictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含服务主体名称 (SPN) 的字典，这些 SPN 用于在 Kerberos 身份验证期间为使用 <see cref="T:System.Net.WebRequest" /> 及其派生类发出的请求标识主机。</summary>
        <value>一个可写的 <see cref="T:System.Collections.Specialized.StringDictionary" />，它包含构成主机信息的键的 SPN 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SPN 是依据客户端唯一标识的服务或用于相互身份验证的服务器上的应用程序实例的名称。 默认情况下，请求相互身份验证，你可以通过设置要求<xref:System.Net.WebRequest.AuthenticationLevel%2A?displayProperty=nameWithType>到<xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired>在请求中。  
  
 当<xref:System.Net.WebRequest>目标必须提供客户端需要相互身份验证，SPN。 如果你知道 SPN，你可以将其添加到<xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A>之前发送请求。 如果未向此字典中，添加 SPN 信息<xref:System.Net.AuthenticationManager>使用<xref:System.Net.WebRequest.RequestUri%2A>方法构成最可能的 SPN; 但是，这是一个计算的值，可能不正确。 如果相互身份验证尝试并失败，你可以检查字典以确定计算得出的 SPN。 如果身份验证协议不支持相互身份验证，不会有 SPN 被输入到字典。  
  
 若要将 SPN 值添加到此字典中，使用<xref:System.Uri.AbsoluteUri%2A>的<xref:System.Net.WebRequest.RequestUri%2A>作为键。 在内部，该密钥将被截断以包含<xref:System.Uri.Scheme%2A>， <xref:System.Uri.Host%2A>，和<xref:System.Uri.Port%2A>如果它不是默认端口。  
  
> [!NOTE]
>  访问的方法和属性<xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A>需要不受限制<xref:System.Net.WebPermission>。  
  
> [!NOTE]
>  如果通过代理执行 Kerberos 身份验证，则该代理并将最终主机名需要要解析为 SPN。 代理名称解析受超时。 Ultimate 主机名称解析为 SPN 要求进行 DNS 查找，并且没有与此操作的直接关联无超时。 因此对超时同步操作需要较长时间。 若要解决此问题，请向 SPN 缓存之前发出请求向其添加 ultimate 主机的 URI 前缀。  
  
 当 <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A> 未设置属性时，3.5 SP1 现在默认指定在 NTLM（NT LAN 管理器）身份验证交换中 的 SPN 的请求 URL 中使用的主机名。 在请求 URL 中使用的主机名可能不同于在客户端请求中的 <xref:System.Net.HttpRequestHeader?displayProperty=nameWithType> 中指定的主机标头。 在请求 URL 中使用的主机名可能不同于服务器的实际主机名、服务器的计算机名、计算机的 IP 地址或环回地址。 在这些情况下，Windows 将无法通过身份验证请求。 若要解决此问题，你可能需要通知使用的主机名的 Windows 客户端在请求 URL 中请求 ("contoso"，例如) 实际上是备用名称为本地计算机。  
  
   
  
## Examples  
 下面的代码示例演示如何显示的内容<xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A>。  
  
 [!code-cpp[NclCredPolicy#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#5)]
 [!code-csharp[NclCredPolicy#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreAuthenticate">
      <MemberSignature Language="C#" Value="public static System.Net.Authorization PreAuthenticate (System.Net.WebRequest request, System.Net.ICredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Authorization PreAuthenticate(class System.Net.WebRequest request, class System.Net.ICredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PreAuthenticate (request As WebRequest, credentials As ICredentials) As Authorization" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Authorization ^ PreAuthenticate(System::Net::WebRequest ^ request, System::Net::ICredentials ^ credentials);" />
      <MemberSignature Language="F#" Value="static member PreAuthenticate : System.Net.WebRequest * System.Net.ICredentials -&gt; System.Net.Authorization" Usage="System.Net.AuthenticationManager.PreAuthenticate (request, credentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Authorization</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="request">对 Internet 资源的 <see cref="T:System.Net.WebRequest" />。</param>
        <param name="credentials">与该请求相关联的 <see cref="T:System.Net.ICredentials" />。</param>
        <summary>预身份验证请求。</summary>
        <returns>如果可以对请求进行预身份验证，则为 <see cref="T:System.Net.Authorization" /> 类的实例，否则为 <see langword="null" />。 如果 <paramref name="credentials" /> 为 <see langword="null" />，则此方法返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果身份验证模块可以进行请求时，预身份验证<xref:System.Net.AuthenticationManager.PreAuthenticate%2A>方法返回一个实例，身份验证和授权信息发送至服务器而等待要发出质询的资源不是提前。 此行为所述的 RFC 2617 3.3 节 (HTTP 身份验证： 基本和摘要式访问身份验证)。 支持预身份验证的身份验证模块允许客户端通过避免额外的往返行程引起的身份验证质询提高服务器的效率。  
  
 可以进行预身份验证的授权模块请求组<xref:System.Net.IAuthenticationModule.CanPreAuthenticate%2A?displayProperty=nameWithType>属性`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="request" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static void Register (System.Net.IAuthenticationModule authenticationModule);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Register(class System.Net.IAuthenticationModule authenticationModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Register (authenticationModule As IAuthenticationModule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Register(System::Net::IAuthenticationModule ^ authenticationModule);" />
      <MemberSignature Language="F#" Value="static member Register : System.Net.IAuthenticationModule -&gt; unit" Usage="System.Net.AuthenticationManager.Register authenticationModule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="authenticationModule">要注册到该身份验证管理器的 <see cref="T:System.Net.IAuthenticationModule" />。</param>
        <summary>向身份验证管理器注册身份验证模块。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.AuthenticationManager.Register%2A>方法将身份验证模块添加到由调用的模块的列表的末尾<xref:System.Net.AuthenticationManager.Authenticate%2A>方法。 添加到列表的顺序在称为身份验证模块。 如果具有相同的模块<xref:System.Net.IAuthenticationModule.AuthenticationType%2A>是已经注册，此方法中删除已注册的模块，并添加`authenticationModule`到列表末尾。  
  
   
  
## Examples  
 下面的示例向身份验证管理器注册身份验证模块。 有关完整示例，请参阅<xref:System.Net.AuthenticationManager>类。  
  
 [!code-cpp[System.Net.Sockets.Authentication#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CPP/custombasicauthentication.cpp#2)]
 [!code-csharp[System.Net.Sockets.Authentication#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CS/custombasicauthentication.cs#2)]
 [!code-vb[System.Net.Sockets.Authentication#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Authentication/VB/custombasicauthentication.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationModule" /> 为 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于执行非托管的代码。 关联枚举：<see cref="T:System.Security.Permissions.SecurityPermissionFlag" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="RegisteredModules">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerator RegisteredModules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.IEnumerator RegisteredModules" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.RegisteredModules" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RegisteredModules As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::IEnumerator ^ RegisteredModules { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RegisteredModules : System.Collections.IEnumerator" Usage="System.Net.AuthenticationManager.RegisteredModules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取注册到身份验证管理器中的身份验证模块的列表。</summary>
        <value>
          <see cref="T:System.Collections.IEnumerator" />，它启用要被阅读的已注册的身份验证模块。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.AuthenticationManager.RegisteredModules%2A>属性提供<xref:System.Collections.IEnumerator>启用的列表的实例注册要读取的身份验证模块。 <xref:System.Net.AuthenticationManager.Register%2A>方法将模块添加到列表中，与<xref:System.Net.AuthenticationManager.Unregister%2A>方法从它中删除模块。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Net.AuthenticationManager.RegisteredModules%2A>属性来获取身份验证管理器注册的身份验证模块的列表。 有关完整示例，请参阅<xref:System.Net.AuthenticationManager>类。  
  
 [!code-cpp[System.Net.Authentication#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Authentication/CPP/custombasicauthentication.cpp#8)]
 [!code-csharp[System.Net.Authentication#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Authentication/CS/custombasicauthentication.cs#8)]
 [!code-vb[System.Net.Authentication#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Authentication/VB/custombasicauthentication.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unregister">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将身份验证模块从已注册的模块列表中移除。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (System.Net.IAuthenticationModule authenticationModule);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(class System.Net.IAuthenticationModule authenticationModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (authenticationModule As IAuthenticationModule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::Net::IAuthenticationModule ^ authenticationModule);" />
      <MemberSignature Language="F#" Value="static member Unregister : System.Net.IAuthenticationModule -&gt; unit" Usage="System.Net.AuthenticationManager.Unregister authenticationModule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="authenticationModule">要从已注册模块列表中移除的 <see cref="T:System.Net.IAuthenticationModule" />。</param>
        <summary>将指定的身份验证模块从已注册的模块列表中移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.AuthenticationManager.Unregister%2A>方法从由调用的身份验证模块列表中删除指定的身份验证模块<xref:System.Net.AuthenticationManager.Authenticate%2A>方法。 该模块必须已添加到列表使用<xref:System.Net.AuthenticationManager.Register%2A>方法之前可以从列表中删除。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Net.AuthenticationManager.Unregister%2A>方法以从已注册的模块列表中删除指定的身份验证模块。 有关完整示例，请参阅<xref:System.Net.AuthenticationManager>类。  
  
 [!code-cpp[System.Net.Sockets.Authentication#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CPP/custombasicauthentication.cpp#2)]
 [!code-csharp[System.Net.Sockets.Authentication#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CS/custombasicauthentication.cs#2)]
 [!code-vb[System.Net.Sockets.Authentication#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Authentication/VB/custombasicauthentication.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationModule" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">指定的 <see cref="T:System.Net.IAuthenticationModule" /> 没有注册。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于执行非托管的代码。 关联枚举：<see cref="T:System.Security.Permissions.SecurityPermissionFlag" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (string authenticationScheme);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(string authenticationScheme) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Unregister(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (authenticationScheme As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::String ^ authenticationScheme);" />
      <MemberSignature Language="F#" Value="static member Unregister : string -&gt; unit" Usage="System.Net.AuthenticationManager.Unregister authenticationScheme" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationScheme" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="authenticationScheme">要移除的模块的身份验证方案。</param>
        <summary>将具有指定身份验证方案的身份验证模块从已注册模块列表中移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.AuthenticationManager.Unregister%2A>方法从由调用的身份验证模块列表中删除具有指定的身份验证方案的身份验证模块<xref:System.Net.AuthenticationManager.Authenticate%2A>方法。 该模块必须已添加到列表使用<xref:System.Net.AuthenticationManager.Register%2A>方法之前可以从列表中删除。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Net.AuthenticationManager.Unregister%2A>方法以从已注册的模块列表中删除具有指定的身份验证方案的身份验证模块。  
  
 [!code-cpp[AuthenticationManager_UnRegister2#2](~/samples/snippets/cpp/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/CPP/authenticationmanager_unregister2.cpp#2)]
 [!code-csharp[AuthenticationManager_UnRegister2#2](~/samples/snippets/csharp/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/CS/authenticationmanager_unregister2.cs#2)]
 [!code-vb[AuthenticationManager_UnRegister2#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/VB/authenticationmanager_unregister2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationScheme" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">此身份验证方案的模块没有注册。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于执行非托管的代码。 关联枚举：<see cref="T:System.Security.Permissions.SecurityPermissionFlag" />。</permission>
      </Docs>
    </Member>
  </Members>
</Type>