<Type Name="HttpListener" FullName="System.Net.HttpListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="82573ef12ea9f2297019f9e271a52a13621c873d" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33682631" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpListener : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListener extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListener" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListener&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListener sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供一个简单的、可通过编程方式控制的 HTTP 协议侦听器。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Net.HttpListener>类，你可以创建一个响应 HTTP 请求的简单 HTTP 协议侦听器。 侦听器处于活动状态的生存期内<xref:System.Net.HttpListener>对象，并使用其权限的应用程序中运行。
   
 若要使用<xref:System.Net.HttpListener>，创建的类使用的新实例<xref:System.Net.HttpListener>构造函数，并使用<xref:System.Net.HttpListener.Prefixes%2A>属性来访问保留指定的统一资源标识符 (URI) 的字符串的集合前缀<xref:System.Net.HttpListener>应处理。
  
 URI 的前缀字符串组成的方案 （http 或 https）、 主机、 一个可选端口和一个可选路径。 完整的前缀字符串的一个示例是* http://www.contoso.com:8080/customerData/ *。 前缀必须以正斜杠 （"/"） 结尾。 <xref:System.Net.HttpListener>最匹配所请求的 URI 前缀的对象的请求作出响应。 多个<xref:System.Net.HttpListener>对象不能添加相同的前缀;<xref:System.ComponentModel.Win32Exception>如果引发异常<xref:System.Net.HttpListener>会添加前缀中已被使用。
  
 指定一个端口时，主机元素可以被替换为"\*"，则指示<xref:System.Net.HttpListener>接受请求发送到端口，如果请求的 URI 与任何其他前缀不匹配。 例如，若要接收所有请求发送到端口 8080 时任何未处理请求的 URI <xref:System.Net.HttpListener>，该前缀是*http://\*: 8080 /*。 同样，若要指定<xref:System.Net.HttpListener>接受所有请求都发送到端口，将替换为"+"字符的宿主元素。 For example, *https://+:8080*. "\*"和"+"字符可出现在包含路径的前缀。
  
 从.NET 核心 2.0 或 Windows 10 上的.NET Framework 4.6 开始，在 URI 的前缀中管理的支持通配符子域<xref:System.Net.HttpListener>对象。 若要指定通配符子域，使用"\*"中的 URI 前缀的主机名的一部分的字符。 例如， *http://\*.foo.com/*。 将作为自变量传递<xref:System.Net.HttpListenerPrefixCollection.Add%2A>方法。 之所以能够从.NET 核心 2.0 或 Windows 10; 上的.NET Framework 4.6 开始在早期版本，这会生成<xref:System.Net.HttpListenerException>。

 > [!WARNING]
 > 顶级通配符绑定 (*http://\*: 8080 /* 和* http://+:8080 *) 应**不**使用。 顶级通配符绑定可能会为应用带来安全漏洞。 此行为同时适用于强通配符和弱通配符。 使用显式主机名而不是通配符。 如果可控制整个父域（区别于易受攻击的 `*.com`），则子域通配符绑定（例如，`*.mysub.com`）不具有此安全风险。 有关详细信息，请参阅 [rfc7230 第 5.4 条](https://tools.ietf.org/html/rfc7230#section-5.4)。
  
 若要开始侦听来自客户端的请求，请将的 URI 前缀添加到集合，并且调用<xref:System.Net.HttpListener.Start%2A>方法。 <xref:System.Net.HttpListener> 提供用于处理客户端请求的同步和异步模型。 请求和其关联的响应使用访问<xref:System.Net.HttpListenerContext>返回对象<xref:System.Net.HttpListener.GetContext%2A>方法或其异步对应<xref:System.Net.HttpListener.BeginGetContext%2A>和<xref:System.Net.HttpListener.EndGetContext%2A>方法。
  
 同步模型适合，如果你的应用程序应阻止等待客户端请求时，如果你想要一次处理只请求一次。 使用同步模型，调用<xref:System.Net.HttpListener.GetContext%2A>方法，等待客户端发送请求。 该方法返回<xref:System.Net.HttpListenerContext>对象为你处理一个发生。
  
 在更复杂的异步模型中，你的应用程序不会阻止在其自己的执行线程中等待请求和每个请求正在处理。 使用<xref:System.Net.HttpListener.BeginGetContext%2A>方法，以指定的应用程序定义一个方法调用每个传入请求。 在该方法中，调用<xref:System.Net.HttpListener.EndGetContext%2A>方法以获取请求，处理请求和响应。
  
 在任一模型中，使用访问传入的请求<xref:System.Net.HttpListenerContext.Request%2A?displayProperty=nameWithType>属性和是否由表示<xref:System.Net.HttpListenerRequest>对象。 同样，使用访问响应<xref:System.Net.HttpListenerContext.Response%2A?displayProperty=nameWithType>属性和是否由表示<xref:System.Net.HttpListenerResponse>对象。 这些对象共享某些功能，带有<xref:System.Net.HttpWebRequest>和<xref:System.Net.HttpWebResponse>对象，但后者的对象不能与一起<xref:System.Net.HttpListener>因为它们实现客户端、 不是服务器、 行为。
  
 <xref:System.Net.HttpListener>可以要求客户端身份验证。 你可以指定一种特定的方案，用于进行身份验证，也可以指定一个委托来决定要使用的方案。 你必须要求某种形式的身份验证来获取有关客户端的标识信息。 有关其他信息，请参阅<xref:System.Net.HttpListenerContext.User%2A>， <xref:System.Net.HttpListener.AuthenticationSchemes%2A>，和<xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>属性。
  
> [!NOTE]
> 如果你创建<xref:System.Net.HttpListener>使用 https，你必须为该侦听器选择服务器证书。 否则为<xref:System.Net.HttpWebRequest>此查询<xref:System.Net.HttpListener>并意外关闭的连接将失败。
  
> [!NOTE]
> 可以使用 Network Shell (netsh.exe) 来配置服务器证书和其他侦听器选项。 请参阅[Network Shell (Netsh)](/windows-server/networking/technologies/netsh/netsh)有关详细信息。 可执行文件开始使用 Windows Server 2008 和 Windows Vista 的传送。
  
> [!NOTE]
> 如果指定多个身份验证方案<xref:System.Net.HttpListener>，侦听器将请求客户端按以下顺序： `Negotiate`， `NTLM`， `Digest`，，然后`Basic`。
  
   
  
## Examples
 下面的代码示例演示如何使用<xref:System.Net.HttpListener>。  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Net.HttpListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在使用此构造函数返回的实例之前, 必须调用其<xref:System.Net.HttpListener.Start%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Net.HttpListener>构造函数来创建一个新<xref:System.Net.HttpListener>对象。 有关完整示例，请参阅<xref:System.Net.HttpListener>类主题。  
  
 [!code-csharp[Net_listener_Basic#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">此类不能在当前操作系统上使用。 使用此类的实例需要 Windows Server 2003 或 Windows XP SP2。</exception>
        <block subset="none" type="usage">
          <para>注意： 此成员将输出跟踪信息时您的应用程序中启用网络跟踪。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>立刻关闭 <see cref="T:System.Net.HttpListener" /> 对象，这样会放弃所有当前排队的请求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法释放该侦听器持有的全部资源。 任何挂起的请求将无法完成。  
  
 调用此方法后，你将收到<xref:System.ObjectDisposedException>如果你尝试使用此<xref:System.Net.HttpListener>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-csharp[Net_Listener_Basic#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemes">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemes AuthenticationSchemes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.AuthenticationSchemes AuthenticationSchemes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemes" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationSchemes As AuthenticationSchemes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::AuthenticationSchemes AuthenticationSchemes { System::Net::AuthenticationSchemes get(); void set(System::Net::AuthenticationSchemes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于客户端身份验证的方案。</summary>
        <value>指示如何对客户端进行身份验证的 <see cref="T:System.Net.AuthenticationSchemes" /> 枚举值的按位组合。 默认值为 <see cref="F:System.Net.AuthenticationSchemes.Anonymous" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener>使用指定的方案所有传入的请求进行身份验证。 <xref:System.Net.HttpListener.GetContext%2A>和<xref:System.Net.HttpListener.EndGetContext%2A>方法返回传入的客户端请求，仅当<xref:System.Net.HttpListener>成功进行身份验证请求。  
  
 你可以通过使用询问成功通过身份验证的客户端的标识<xref:System.Net.HttpListenerContext.User%2A?displayProperty=nameWithType>属性。  
  
 如果你想<xref:System.Net.HttpListener>根据它接收的请求的特征对象使用不同的身份验证机制 (例如，请求的<xref:System.Net.HttpListenerRequest.Url%2A>或<xref:System.Net.HttpListenerRequest.UserHostName%2A>属性)，则必须实现的方法，选择身份验证方案。 有关如何执行此操作的说明，请参阅<xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>属性文档。  
  
> [!NOTE]
>  若要设置此属性以启用摘要，NTLM 或协商需要<xref:System.Security.Permissions.SecurityPermission>， <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Net.HttpListener.AuthenticationSchemes%2A>属性来指定身份验证方案。  
  
 [!code-csharp[Net_listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemeSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationSchemeSelectorDelegate As AuthenticationSchemeSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::AuthenticationSchemeSelector ^ AuthenticationSchemeSelectorDelegate { System::Net::AuthenticationSchemeSelector ^ get(); void set(System::Net::AuthenticationSchemeSelector ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemeSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个委托，调用它来确定用于客户端身份验证的协议。</summary>
        <value>
          <see cref="T:System.Net.AuthenticationSchemeSelector" /> 委托，它调用用于选择身份验证协议的方法。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  如果你想要用于处理由的特定实例的所有请求的相同身份验证协议<xref:System.Net.HttpListener>，不需要设置此属性。 若要指定要用于所有客户端请求的协议，使用<xref:System.Net.HttpListener.AuthenticationSchemes%2A>属性。  
  
 如果客户端未在其标头，指定身份验证信息<xref:System.Net.HttpListener>调用为每个未经身份验证的传入请求，以确定，如果有的话，使用协议进行身份验证客户端指定的委托。 <xref:System.Net.HttpListener.GetContext%2A>和<xref:System.Net.HttpListener.EndGetContext%2A>方法返回传入的请求仅当<xref:System.Net.HttpListener>成功通过身份验证请求。 如果无法对请求进行身份验证，<xref:System.Net.HttpListener>自动发回 401 响应。 你可以使用已成功经过身份验证客户端的标识<xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=nameWithType>属性。  
  
 委托所选的身份验证协议为应用程序特定方法的能力是如果你希望的实例大小时<xref:System.Net.HttpListener>使用不同的身份验证协议根据它接收 （对于请求的特性例如，请求的<xref:System.Net.HttpListenerRequest.Url%2A>或<xref:System.Net.HttpListenerRequest.UserHostAddress%2A>属性)。  
  
> [!NOTE]
>  若要设置此属性以启用摘要，NTLM 或协商需要<xref:System.Security.Permissions.SecurityPermission>， <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>。  
  
   
  
## Examples  
 下面的代码示例设置此属性的值。  
  
 [!code-csharp[NclListener#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#2)]
 [!code-vb[NclListener#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#2)]  
  
 下面的代码示例提供的方法由调用实现<xref:System.Net.AuthenticationSchemeSelector>委托。  
  
 [!code-csharp[NclListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#1)]
 [!code-vb[NclListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginGetContext">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginGetContext (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginGetContext(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginGetContext (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginGetContext(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> 委托，引用客户端请求可用时要调用的方法。</param>
        <param name="state">一个用户定义对象，其中包含操作的相关信息。 操作完成后，此对象会被传递给 <c>callback</c> 委托。</param>
        <summary>开始异步检索传入的请求。</summary>
        <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener.BeginGetContext%2A>方法开始异步 （非阻塞） 调用接收传入的客户端请求。 调用此方法之前，必须调用<xref:System.Net.HttpListener.Start%2A>方法并添加至少一个统一资源标识符 (URI) 前缀，用于侦听的 URI 将字符串添加到<xref:System.Net.HttpListenerPrefixCollection>返回<xref:System.Net.HttpListener.Prefixes%2A>属性。  
  
 必须通过调用完成异步操作<xref:System.Net.HttpListener.EndGetContext%2A>方法。 通常情况下，通过调用该方法`callback`委托。  
  
 在操作完成时，此方法不会阻止。 若要获取传入的请求和块，该操作完成之前，调用<xref:System.Net.HttpListener.GetContext%2A>方法。  
  
 有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Net.HttpListener.BeginGetContext%2A>方法，以指定将处理传入的客户端请求的回调方法。  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 下面的代码示例实现一个回调方法。  
  
 [!code-csharp[Net_Listener_Basic#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException">Win32 函数调用失败。 检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性以确定导致异常的原因。</exception>
        <exception cref="T:System.InvalidOperationException">此对象尚未启动或当前已停止。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <block subset="none" type="usage">
          <para>当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭 <see cref="T:System.Net.HttpListener" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法后，你无法再使用<xref:System.Net.HttpListener>对象。 若要临时暂停<xref:System.Net.HttpListener>对象，请使用<xref:System.Net.HttpListener.Stop%2A>方法。  
  
 此方法关闭列表<xref:System.Net.HttpListener>而不会处理排队的请求的对象。 任何挂起的请求将无法完成。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DefaultServiceNames">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.DefaultServiceNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultServiceNames As ServiceNameCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ServiceNameCollection ^ DefaultServiceNames { System::Security::Authentication::ExtendedProtection::ServiceNameCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ServiceNameCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由已注册前缀确定的服务提供程序名 (SPN) 的默认列表。</summary>
        <value>一个包含 SPN 列表的 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener.DefaultServiceNames%2A>属性用于使用集成 Windows 身份验证提供扩展的保护。 Spn 的列表初始化从<xref:System.Net.HttpListener.Prefixes%2A>属性时访问和清除在将新的前缀添加到<xref:System.Net.HttpListener.Prefixes%2A>属性。  
  
 <xref:System.Net.HttpListener.DefaultServiceNames%2A>应用程序不设置，才使用属性<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A>上其扩展的保护策略的属性。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection> ，检索与<xref:System.Net.HttpListener.DefaultServiceNames%2A>从生成属性<xref:System.Net.HttpListener.Prefixes%2A>属性根据下列规则：  
  
1.  如果主机名是"+"，"*"，或 IPv4 或 IPv6 文本 (等效于"\*"但限制为特定的本地接口)，添加以下 SPN:  
  
 `"HTTP/"` 加上的计算机的完全限定的域名。  
  
1.  如果主机名不包含点 （没有域或子域），尝试解析使用 DNS 完全限定的域名称 (相同的行为由<xref:System.Net.HttpWebRequest>)。 如果可以解析的完全限定域名，则添加以下 Spn:  
  
 `"HTTP/"` 加上的主机名 （短名称）。  
  
 `"HTTP/"` 加上为此主机名的完全限定的域名。  
  
1.  如果主机名不包含点 （没有域或子域） 和无法解析的完全限定域名，将添加以下 SPN:  
  
 `"HTTP/"` 加上主机名。  
  
1.  如果主机名中包含点 （域或子域），将添加以下 SPN:  
  
 `"HTTP/"` 加上主机名。  
  
 <xref:System.Net.HttpListener.DefaultServiceNames%2A>属性可以使用应用程序，查看默认 Spn 将用于身份验证如果不提供任何自定义列表的列表。 如果需要其他 Spn，则应用程序可以添加它们使用之一<xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A>方法。  
  
 使用扩展的保护策略基于做出决策所请求的 URL，因为这可以被欺骗时，它是不安全的。 相反，应用程序应依赖于<xref:System.Net.HttpListenerRequest.LocalEndPoint%2A>或<xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A>属性以使此类策略决策。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="EndGetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext EndGetContext (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext EndGetContext(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndGetContext (asyncResult As IAsyncResult) As HttpListenerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::HttpListenerContext ^ EndGetContext(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">启动异步操作时获得的 <see cref="T:System.IAsyncResult" /> 对象。</param>
        <summary>完成检索传入的客户端请求的异步操作。</summary>
        <returns>表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener.EndGetContext%2A>调用方法时，通常在应用程序定义的回调方法中调用的委托，以获取<xref:System.Net.HttpListenerContext>对象，其中包含传入的客户端请求和其关联的响应。 此方法完成以前通过调用启动操作<xref:System.Net.HttpListener.BeginGetContext%2A>方法。 如果该操作未完成，此方法阻止，直至它执行。  
  
 因为调用<xref:System.Net.HttpListener.EndGetContext%2A>方法需要<xref:System.Net.HttpListener>对象，此对象通常传递到回调方法，从而使用传入的状态对象<xref:System.Net.HttpListener.BeginGetContext%2A>方法。 你可以通过使用来获取此状态对象<xref:System.IAsyncResult.AsyncState%2A>属性`asyncResult`对象。  
  
 有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
   
  
## Examples  
 下面的代码示例演示调用的回调方法的实现<xref:System.Net.HttpListener.EndGetContext%2A>方法。  
  
 [!code-csharp[Net_Listener_Basic#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          未通过调用 <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> 方法获取 <paramref name="asyncResult" />。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">已为指定的 <paramref name="asyncResult" /> 对象调用 <see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> 方法。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <block subset="none" type="usage">
          <para>当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionPolicy">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedProtectionPolicy As ExtendedProtectionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ ExtendedProtectionPolicy { System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ get(); void set(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("not used anywhere in the implementation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于会话的扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</summary>
        <value>一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />，它指定要用于扩展保护的策略。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>属性用于使用集成 Windows 身份验证提供扩展的保护。 <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>属性允许的整个的扩展的保护策略配置<xref:System.Net.HttpListener>会话。 <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A>属性允许的每个请求的扩展的保护策略的配置。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> 属性必须为 `null`。 <xref:System.Net.HttpListener>实例在如果还有一个直接从其自己的 TLS 会话获取通道绑定令牌 (CBT)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">尝试设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 属性，但 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 属性不是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">尝试在调用 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 方法后设置 <see cref="M:System.Net.HttpListener.Start" /> 属性。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement" /> 属性设置为平台上的 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />，其不支持扩展的保护。</exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.HttpListener.ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListener/ExtendedProtectionSelector ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedProtectionSelectorDelegate As HttpListener.ExtendedProtectionSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListener::ExtendedProtectionSelector ^ ExtendedProtectionSelectorDelegate { System::Net::HttpListener::ExtendedProtectionSelector ^ get(); void set(System::Net::HttpListener::ExtendedProtectionSelector ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListener+ExtendedProtectionSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在确定要用于每个请求的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 时调用的委托。</summary>
        <value>一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />，它指定要用于扩展保护的策略。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>属性用于使用集成 Windows 身份验证提供扩展的保护。 <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>属性允许的整个的扩展的保护策略配置<xref:System.Net.HttpListener>会话。 <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A>属性允许的每个单个请求的扩展的保护策略配置。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> 属性必须为 `null`。 <xref:System.Net.HttpListener>实例在如果还有一个直接从其自己的 TLS 会话获取通道绑定令牌 (CBT)。  
  
 对于每个请求，该委托可以选择的设置，<xref:System.Net.HttpListener>实例将用于提供扩展的保护。  
  
 如果委托返回`null`对于此属性，这表示<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy>其中<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>属性设置为<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">尝试设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 属性，但 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 属性必须为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">尝试在调用 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 方法后设置 <see cref="M:System.Net.HttpListener.Start" /> 属性。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <exception cref="T:System.PlatformNotSupportedException">已试图在不支持扩展的保护的平台上设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 属性。</exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As HttpListenerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::HttpListenerContext ^ GetContext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>等待传入的请求，接收到请求时返回。</summary>
        <returns>表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法之前，必须调用<xref:System.Net.HttpListener.Start%2A>方法并添加至少一个用于侦听的 URI 将字符串添加到的 URI 前缀<xref:System.Net.HttpListenerPrefixCollection>返回<xref:System.Net.HttpListener.Prefixes%2A>属性。 前缀的详细说明，请参阅<xref:System.Net.HttpListener>类概述。  
  
 等待传入的请求时此方法阻止。 如果您要处理以异步方式 （在单独的线程），以便你的应用程序不会阻止传入请求，使用<xref:System.Net.HttpListener.BeginGetContext%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException">Win32 函数调用失败。 检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性以确定导致异常的原因。</exception>
        <exception cref="T:System.InvalidOperationException">此对象尚未启动或当前已停止。  
  
 或  
  
 <see cref="T:System.Net.HttpListener" /> 没有任何要响应的统一资源标识符 (URI) 前缀。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <block subset="none" type="usage">
          <para>当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetContextAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt; GetContextAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.HttpListenerContext&gt; GetContextAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContextAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextAsync () As Task(Of HttpListenerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::HttpListenerContext ^&gt; ^ GetContextAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>等待传入请求以作为异步操作。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
 表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象完成后将收到传入的请求。  
  
 调用此方法之前，必须调用<xref:System.Net.HttpListener.Start%2A>方法并添加至少一个用于侦听的 URI 将字符串添加到的 URI 前缀<xref:System.Net.HttpListenerPrefixCollection>返回<xref:System.Net.HttpListener.Prefixes%2A>属性。 前缀的详细说明，请参阅<xref:System.Net.HttpListener>类概述。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListenerContext" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWriteExceptions">
      <MemberSignature Language="C#" Value="public bool IgnoreWriteExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWriteExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IgnoreWriteExceptions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWriteExceptions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWriteExceptions { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值指定应用程序是否接收 <see cref="T:System.Net.HttpListener" /> 向客户端发送响应时发生的异常。</summary>
        <value>
          如果此 <see cref="T:System.Net.HttpListener" /> 不返回向客户端发送响应时发生的异常，则返回 <see langword="true" />；否则返回 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将此属性设置为`true`如果你的应用程序不需要响应成功发送到每个客户端。  
  
   
  
## Examples  
 下面的代码示例演示如何设置此属性。  
  
 [!code-csharp[Net_Listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsListening">
      <MemberSignature Language="C#" Value="public bool IsListening { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsListening" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsListening" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsListening As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsListening { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，指示 <see cref="T:System.Net.HttpListener" /> 是否已启动。</summary>
        <value>
          如果已启动 <see cref="T:System.Net.HttpListener" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要启动<xref:System.Net.HttpListener>，调用<xref:System.Net.HttpListener.Start%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此属性以确定实例的侦听状态。  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public static bool IsSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsSupported" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsSupported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsSupported { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，指示 <see cref="T:System.Net.HttpListener" /> 是否可用于当前操作系统。</summary>
        <value>
          如果支持 <see cref="T:System.Net.HttpListener" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类是仅在运行 Windows XP SP2 或 Windows Server 2003 操作系统的系统的计算机上可用。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Net.HttpListener.IsSupported%2A>属性来检测是否<xref:System.Net.HttpListener>对象可以用于当前操作系统。  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixes">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerPrefixCollection Prefixes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerPrefixCollection Prefixes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Prefixes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Prefixes As HttpListenerPrefixCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerPrefixCollection ^ Prefixes { System::Net::HttpListenerPrefixCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerPrefixCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由此 <see cref="T:System.Net.HttpListener" /> 对象处理的统一资源标识符 (URI) 前缀。</summary>
        <value>
          <see cref="T:System.Net.HttpListenerPrefixCollection" />，包含此 <see cref="T:System.Net.HttpListener" /> 对象在经配置后要处理的 URI 前缀。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前缀是采用规范格式。 前缀的详细说明，请参阅<xref:System.Net.HttpListener>类概述。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Net.HttpListener.Prefixes%2A>属性来获取和打印处理的 URI 前缀。  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      </Docs>
    </Member>
    <Member MemberName="Realm">
      <MemberSignature Language="C#" Value="public string Realm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Realm" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Realm" />
      <MemberSignature Language="VB.NET" Value="Public Property Realm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Realm { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与此 <see cref="T:System.Net.HttpListener" /> 对象关联的领域或资源分区。</summary>
        <value>
          <see cref="T:System.String" /> 值，包含与 <see cref="T:System.Net.HttpListener" /> 对象关联的领域名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 服务器使用领域进行分区受保护的资源;每个分区可以有其自己的身份验证方案和/或授权数据库。 领域仅用于基本和摘要式身份验证。 在客户端成功进行身份验证之后，该身份验证对给定领域内的所有资源都有效。 有关领域的详细说明，请参阅在 RFC 2617 [ https://www.ietf.org/ ](https://www.ietf.org/)。  
  
 实例<xref:System.Net.HttpListener>具有只有一个关联的领域。  
  
   
  
## Examples  
 下面的代码示例演示了如何设置<xref:System.Net.HttpListener.Realm%2A>属性。  
  
 [!code-csharp[Net_Listener_Basic#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>允许此实例接收传入的请求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须调用此方法，然后才能调用<xref:System.Net.HttpListener.GetContext%2A>或<xref:System.Net.HttpListener.BeginGetContext%2A>方法。  
  
 已启动之后<xref:System.Net.HttpListener>对象时，可以使用<xref:System.Net.HttpListener.Stop%2A>方法来停止它。  
  
> [!NOTE]
>  如果此侦听器实例使用 https，你必须安装并选择服务器证书。 否则为<xref:System.Net.HttpWebRequest>此查询<xref:System.Net.HttpListener>并意外关闭的连接将失败。 可以通过使用 HttpCfg.exe 配置服务器证书和其他侦听器选项。 请参阅[ http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp ](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp)有关详细信息。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Net.HttpListener.Start%2A>方法，以开始处理传入请求。  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException">Win32 函数调用失败。 检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性以确定导致异常的原因。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <block subset="none" type="usage">
          <para>当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使此实例停止接收传入的请求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此实例已停止，调用此方法无效。  
  
 已停止后<xref:System.Net.HttpListener>对象时，可以使用<xref:System.Net.HttpListener.Start%2A>方法重新启动它。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Net.HttpListener.Stop%2A>方法来停止处理传入请求。  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
        <block subset="none" type="usage">
          <para>当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。 有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放此 <see cref="T:System.Net.HttpListener" /> 对象持有的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序应使用<xref:System.Net.HttpListener.Close%2A>而不是调用此方法的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutManager">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerTimeoutManager TimeoutManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerTimeoutManager TimeoutManager" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.TimeoutManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutManager As HttpListenerTimeoutManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerTimeoutManager ^ TimeoutManager { System::Net::HttpListenerTimeoutManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerTimeoutManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>此 <see cref="T:System.Net.HttpListener" /> 实例的超时管理器。</summary>
        <value>返回 <see cref="T:System.Net.HttpListenerTimeoutManager" />。  
  
 此 <see cref="T:System.Net.HttpListener" /> 实例的超时管理器。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 超时管理器定义的连接超时限制此<xref:System.Net.HttpListener>实例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeConnectionNtlmAuthentication">
      <MemberSignature Language="C#" Value="public bool UnsafeConnectionNtlmAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeConnectionNtlmAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.UnsafeConnectionNtlmAuthentication" />
      <MemberSignature Language="VB.NET" Value="Public Property UnsafeConnectionNtlmAuthentication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnsafeConnectionNtlmAuthentication { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Support for NTLM needs some loving.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值控制当使用 NTLM 时是否需要对使用同一传输控制协议 (TCP) 连接的其他请求进行身份验证。</summary>
        <value>
          如果第一个请求的 <see cref="T:System.Security.Principal.IIdentity" /> 将用于同一连接上的后续请求，则返回 <see langword="true" />；否则返回 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当此属性设置为`true`和通过特定的 TCP 连接的第一个请求进行身份验证使用 NTLM，处理通过相同的 TCP 连接的后续请求使用的身份验证信息 (<xref:System.Security.Principal.IIdentity>) 的初始请求。  
  
 此属性在 NTLM 不是身份验证协议时无效。 当 Negotiate 指定为身份验证协议时，此属性仅当 NTLM 是用于身份验证的实际协议时，才有意义。  
  
> [!NOTE]
>  此属性设置为时`true`提高性能，因为<xref:System.Net.HttpListener>不发送其他 NTLM 身份验证质询，则不需要提供身份验证信息的所有请求中有安全风险。 必须确定为提高性能冒此风险是否值得。  
  
   
  
## Examples  
 下面的代码示例演示如何设置此属性。  
  
 [!code-csharp[Net_Listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      </Docs>
    </Member>
  </Members>
</Type>