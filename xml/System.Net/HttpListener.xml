<Type Name="HttpListener" FullName="System.Net.HttpListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="91b70d957abf611b2f700fc1913f3093e6b419d8" /><Meta Name="ms.sourcegitcommit" Value="b0551d7828f015124aca601dbb64bd913cc5067d" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/13/2018" /><Meta Name="ms.locfileid" Value="53333568" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpListener : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListener extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListener" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListener&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListener sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type HttpListener = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="e080f-101">提供一个简单的、可通过编程方式控制的 HTTP 协议侦听器。</span><span class="sxs-lookup"><span data-stu-id="e080f-101">Provides a simple, programmatically controlled HTTP protocol listener.</span></span> <span data-ttu-id="e080f-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="e080f-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-103">使用<xref:System.Net.HttpListener>类，可以创建一个简单的 HTTP 协议侦听器的响应 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-103">Using the <xref:System.Net.HttpListener> class, you can create a simple HTTP protocol listener that responds to HTTP requests.</span></span> <span data-ttu-id="e080f-104">侦听器处于活动状态的生存期内<xref:System.Net.HttpListener>对象和用其权限的应用程序中运行。</span><span class="sxs-lookup"><span data-stu-id="e080f-104">The listener is active for the lifetime of the <xref:System.Net.HttpListener> object and runs within your application with its permissions.</span></span>
   
 <span data-ttu-id="e080f-105">若要使用<xref:System.Net.HttpListener>，创建的类使用的新实例<xref:System.Net.HttpListener>构造函数，并使用<xref:System.Net.HttpListener.Prefixes%2A>属性来访问集合，它包含指定的统一资源标识符 (URI) 的字符串前缀<xref:System.Net.HttpListener>应处理。</span><span class="sxs-lookup"><span data-stu-id="e080f-105">To use <xref:System.Net.HttpListener>, create a new instance of the class using the <xref:System.Net.HttpListener> constructor and use the <xref:System.Net.HttpListener.Prefixes%2A> property to gain access to the collection that holds the strings that specify which Uniform Resource Identifier (URI) prefixes the <xref:System.Net.HttpListener> should process.</span></span>
  
 <span data-ttu-id="e080f-106">URI 的前缀字符串组成的方案 （http 或 https）、 主机、 可选端口和可选路径。</span><span class="sxs-lookup"><span data-stu-id="e080f-106">A URI prefix string is composed of a scheme (http or https), a host, an optional port, and an optional path.</span></span> <span data-ttu-id="e080f-107">完整的前缀字符串的一个示例是*http://www.contoso.com:8080/customerData/*。</span><span class="sxs-lookup"><span data-stu-id="e080f-107">An example of a complete prefix string is *http://www.contoso.com:8080/customerData/*.</span></span> <span data-ttu-id="e080f-108">前缀必须以正斜杠 （"/"） 结尾。</span><span class="sxs-lookup"><span data-stu-id="e080f-108">Prefixes must end in a forward slash ("/").</span></span> <span data-ttu-id="e080f-109"><xref:System.Net.HttpListener>具有最为匹配请求的 URI 前缀对象响应请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-109">The <xref:System.Net.HttpListener> object with the prefix that most closely matches a requested URI responds to the request.</span></span> <span data-ttu-id="e080f-110">多个<xref:System.Net.HttpListener>对象不能添加相同的前缀;<xref:System.ComponentModel.Win32Exception>如果引发异常<xref:System.Net.HttpListener>添加前缀已被使用。</span><span class="sxs-lookup"><span data-stu-id="e080f-110">Multiple <xref:System.Net.HttpListener> objects cannot add the same prefix; a <xref:System.ComponentModel.Win32Exception> exception is thrown if a <xref:System.Net.HttpListener> adds a prefix that is already in use.</span></span>
  
 <span data-ttu-id="e080f-111">指定端口，主机元素可以被替换为"\*"以指示<xref:System.Net.HttpListener>接受请求发送到端口，如果请求的 URI 与任何其他前缀不匹配。</span><span class="sxs-lookup"><span data-stu-id="e080f-111">When a port is specified, the host element can be replaced with "\*" to indicate that the <xref:System.Net.HttpListener> accepts requests sent to the port if the requested URI does not match any other prefix.</span></span> <span data-ttu-id="e080f-112">例如，若要接收的所有请求发送到端口 8080 时任何未处理请求的 URI <xref:System.Net.HttpListener>，该前缀*http://\*: 8080 /*。</span><span class="sxs-lookup"><span data-stu-id="e080f-112">For example, to receive all requests sent to port 8080 when the requested URI is not handled by any <xref:System.Net.HttpListener>, the prefix is *http://\*:8080/*.</span></span> <span data-ttu-id="e080f-113">同样，若要指定<xref:System.Net.HttpListener>接受发送到的端口的所有请求的主机元素替换为"+"字符。</span><span class="sxs-lookup"><span data-stu-id="e080f-113">Similarly, to specify that the <xref:System.Net.HttpListener> accepts all requests sent to a port, replace the host element with the "+" character.</span></span> <span data-ttu-id="e080f-114">例如，*https://+:8080*。</span><span class="sxs-lookup"><span data-stu-id="e080f-114">For example, *https://+:8080*.</span></span> <span data-ttu-id="e080f-115">"\*"和"+"字符可出现在包含路径的前缀。</span><span class="sxs-lookup"><span data-stu-id="e080f-115">The "\*" and "+" characters can be present in prefixes that include paths.</span></span>
  
 <span data-ttu-id="e080f-116">从.NET Core 2.0 或 Windows 10 上的.NET Framework 4.6 开始，在 URI 的前缀中受支持通配符子域<xref:System.Net.HttpListener>对象。</span><span class="sxs-lookup"><span data-stu-id="e080f-116">Starting with .NET Core 2.0 or .NET Framework 4.6 on Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an <xref:System.Net.HttpListener> object.</span></span> <span data-ttu-id="e080f-117">若要指定通配符子域，请使用"\*"中的 URI 前缀的主机名的一部分的字符。</span><span class="sxs-lookup"><span data-stu-id="e080f-117">To specify a wildcard subdomain, use the "\*" character as part of the hostname in a URI prefix.</span></span> <span data-ttu-id="e080f-118">例如， *http://\*.foo.com/*。</span><span class="sxs-lookup"><span data-stu-id="e080f-118">For example, *http://\*.foo.com/*.</span></span> <span data-ttu-id="e080f-119">将其作为参数传递<xref:System.Net.HttpListenerPrefixCollection.Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-119">Pass this as the argument to the <xref:System.Net.HttpListenerPrefixCollection.Add%2A> method.</span></span> <span data-ttu-id="e080f-120">这适用于自.NET Core 2.0 或 Windows 10; 上的.NET Framework 4.6 起在早期版本中，这会生成<xref:System.Net.HttpListenerException>。</span><span class="sxs-lookup"><span data-stu-id="e080f-120">This works as of .NET Core 2.0 or .NET Framework 4.6 on Windows 10; in earlier versions, this generates an <xref:System.Net.HttpListenerException>.</span></span>

 > [!WARNING]
 > <span data-ttu-id="e080f-121">顶级通配符绑定 (*http://\*: 8080 /* 并*http://+:8080*) 应**不**使用。</span><span class="sxs-lookup"><span data-stu-id="e080f-121">Top-level wildcard bindings (*http://\*:8080/* and *http://+:8080*) should **not** be used.</span></span> <span data-ttu-id="e080f-122">顶级通配符绑定可能会为应用带来安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="e080f-122">Top-level wildcard bindings can open up your app to security vulnerabilities.</span></span> <span data-ttu-id="e080f-123">此行为同时适用于强通配符和弱通配符。</span><span class="sxs-lookup"><span data-stu-id="e080f-123">This applies to both strong and weak wildcards.</span></span> <span data-ttu-id="e080f-124">使用显式主机名而不是通配符。</span><span class="sxs-lookup"><span data-stu-id="e080f-124">Use explicit host names rather than wildcards.</span></span> <span data-ttu-id="e080f-125">如果可控制整个父域（区别于易受攻击的 `*.com`），则子域通配符绑定（例如，`*.mysub.com`）不具有此安全风险。</span><span class="sxs-lookup"><span data-stu-id="e080f-125">Subdomain wildcard binding (for example, `*.mysub.com`) doesn't have this security risk if you control the entire parent domain (as opposed to `*.com`, which is vulnerable).</span></span> <span data-ttu-id="e080f-126">有关详细信息，请参阅 [rfc7230 第 5.4 条](https://tools.ietf.org/html/rfc7230#section-5.4)。</span><span class="sxs-lookup"><span data-stu-id="e080f-126">See [rfc7230 section-5.4](https://tools.ietf.org/html/rfc7230#section-5.4) for more information.</span></span>
  
 <span data-ttu-id="e080f-127">若要开始侦听来自客户端的请求，请将 URI 前缀添加到集合并调用<xref:System.Net.HttpListener.Start%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-127">To begin listening for requests from clients, add the URI prefixes to the collection and call the <xref:System.Net.HttpListener.Start%2A> method.</span></span> <span data-ttu-id="e080f-128"><xref:System.Net.HttpListener> 还提供用于处理客户端请求的同步和异步模型。</span><span class="sxs-lookup"><span data-stu-id="e080f-128"><xref:System.Net.HttpListener> offers both synchronous and asynchronous models for processing client requests.</span></span> <span data-ttu-id="e080f-129">使用访问请求和其关联的响应<xref:System.Net.HttpListenerContext>返回的对象<xref:System.Net.HttpListener.GetContext%2A>方法或其异步对应<xref:System.Net.HttpListener.BeginGetContext%2A>和<xref:System.Net.HttpListener.EndGetContext%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-129">Requests and their associated responses are accessed using the <xref:System.Net.HttpListenerContext> object returned by the <xref:System.Net.HttpListener.GetContext%2A> method or its asynchronous counterparts, the <xref:System.Net.HttpListener.BeginGetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods.</span></span>
  
 <span data-ttu-id="e080f-130">同步模型适合，如果你的应用程序应阻止等待客户端请求时，如果你想要一次处理一个请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-130">The synchronous model is appropriate if your application should block while waiting for a client request and if you want to process only one request at a time.</span></span> <span data-ttu-id="e080f-131">使用同步模型，调用<xref:System.Net.HttpListener.GetContext%2A>方法，它等待客户端发送请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-131">Using the synchronous model, call the <xref:System.Net.HttpListener.GetContext%2A> method, which waits for a client to send a request.</span></span> <span data-ttu-id="e080f-132">该方法将返回<xref:System.Net.HttpListenerContext>对象复制到您的处理时出现。</span><span class="sxs-lookup"><span data-stu-id="e080f-132">The method returns an <xref:System.Net.HttpListenerContext> object to you for processing when one occurs.</span></span>
  
 <span data-ttu-id="e080f-133">在更复杂的异步模型中，你的应用程序不会阻止而将在其自己的执行线程中等待的请求和每个请求进行处理。</span><span class="sxs-lookup"><span data-stu-id="e080f-133">In the more complex asynchronous model, your application does not block while waiting for requests and each request is processed in its own execution thread.</span></span> <span data-ttu-id="e080f-134">使用<xref:System.Net.HttpListener.BeginGetContext%2A>方法，以指定应用程序定义的方法调用每个传入请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-134">Use the <xref:System.Net.HttpListener.BeginGetContext%2A> method to specify an application-defined method to be called for each incoming request.</span></span> <span data-ttu-id="e080f-135">该方法中调用<xref:System.Net.HttpListener.EndGetContext%2A>方法可以获取该请求、 处理它，并做出响应。</span><span class="sxs-lookup"><span data-stu-id="e080f-135">Within that method, call the <xref:System.Net.HttpListener.EndGetContext%2A> method to obtain the request, process it, and respond.</span></span>
  
 <span data-ttu-id="e080f-136">在任一模型中，使用访问传入的请求<xref:System.Net.HttpListenerContext.Request%2A?displayProperty=nameWithType>属性，也由<xref:System.Net.HttpListenerRequest>对象。</span><span class="sxs-lookup"><span data-stu-id="e080f-136">In either model, incoming requests are accessed using the <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=nameWithType> property and are represented by <xref:System.Net.HttpListenerRequest> objects.</span></span> <span data-ttu-id="e080f-137">同样，使用访问响应<xref:System.Net.HttpListenerContext.Response%2A?displayProperty=nameWithType>属性，也由<xref:System.Net.HttpListenerResponse>对象。</span><span class="sxs-lookup"><span data-stu-id="e080f-137">Similarly, responses are accessed using the <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=nameWithType> property and are represented by <xref:System.Net.HttpListenerResponse> objects.</span></span> <span data-ttu-id="e080f-138">这些对象共享的一些功能<xref:System.Net.HttpWebRequest>并<xref:System.Net.HttpWebResponse>不能与结合使用的对象，而后者对象<xref:System.Net.HttpListener>因为它们实现客户端、 不是服务器、 行为。</span><span class="sxs-lookup"><span data-stu-id="e080f-138">These objects share some functionality with the <xref:System.Net.HttpWebRequest> and <xref:System.Net.HttpWebResponse> objects, but the latter objects cannot be used in conjunction with <xref:System.Net.HttpListener> because they implement client, not server, behaviors.</span></span>
  
 <span data-ttu-id="e080f-139"><xref:System.Net.HttpListener>可以要求客户端身份验证。</span><span class="sxs-lookup"><span data-stu-id="e080f-139">An <xref:System.Net.HttpListener> can require client authentication.</span></span> <span data-ttu-id="e080f-140">您可以指定特定的方案使用进行身份验证，也可以指定一个委托来决定要使用的方案。</span><span class="sxs-lookup"><span data-stu-id="e080f-140">You can either specify a particular scheme to use for authentication, or you can specify a delegate that determines the scheme to use.</span></span> <span data-ttu-id="e080f-141">你必须要求某种形式的身份验证，以获取有关客户端的标识信息。</span><span class="sxs-lookup"><span data-stu-id="e080f-141">You must require some form of authentication to obtain information about the client's identity.</span></span> <span data-ttu-id="e080f-142">有关其他信息，请参阅<xref:System.Net.HttpListenerContext.User%2A>， <xref:System.Net.HttpListener.AuthenticationSchemes%2A>，和<xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-142">For additional information, see the <xref:System.Net.HttpListenerContext.User%2A>, <xref:System.Net.HttpListener.AuthenticationSchemes%2A>, and <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> properties.</span></span>
  
> [!NOTE]
> <span data-ttu-id="e080f-143">如果您创建<xref:System.Net.HttpListener>使用 https 时，你必须为该侦听器选择服务器证书。</span><span class="sxs-lookup"><span data-stu-id="e080f-143">If you create an <xref:System.Net.HttpListener> using https, you must select a Server Certificate for that listener.</span></span> <span data-ttu-id="e080f-144">否则为<xref:System.Net.HttpWebRequest>此查询<xref:System.Net.HttpListener>并意外关闭的连接将失败。</span><span class="sxs-lookup"><span data-stu-id="e080f-144">Otherwise, an <xref:System.Net.HttpWebRequest> query of this <xref:System.Net.HttpListener> will fail with an unexpected close of the connection.</span></span>
  
> [!NOTE]
> <span data-ttu-id="e080f-145">可以使用 Network Shell (netsh.exe) 来配置服务器证书和其他侦听器选项。</span><span class="sxs-lookup"><span data-stu-id="e080f-145">You can configure Server Certificates and other listener options by using Network Shell (netsh.exe).</span></span> <span data-ttu-id="e080f-146">请参阅[Network Shell (Netsh)](/windows-server/networking/technologies/netsh/netsh)的更多详细信息。</span><span class="sxs-lookup"><span data-stu-id="e080f-146">See [Network Shell (Netsh)](/windows-server/networking/technologies/netsh/netsh) for more details.</span></span> <span data-ttu-id="e080f-147">可执行文件已开始使用 Windows Server 2008 和 Windows Vista 的传送。</span><span class="sxs-lookup"><span data-stu-id="e080f-147">The executable began shipping with Windows Server 2008 and Windows Vista.</span></span>
  
> [!NOTE]
> <span data-ttu-id="e080f-148">如果指定多个身份验证方案供<xref:System.Net.HttpListener>，该侦听器将请求客户端按以下顺序： `Negotiate`， `NTLM`， `Digest`，然后`Basic`。</span><span class="sxs-lookup"><span data-stu-id="e080f-148">If you specify multiple authentication schemes for the <xref:System.Net.HttpListener>, the listener will challenge clients in the following order: `Negotiate`, `NTLM`, `Digest`, and then `Basic`.</span></span>
  
   
  
## Examples
 <span data-ttu-id="e080f-149">下面的代码示例演示了如何使用<xref:System.Net.HttpListener>。</span><span class="sxs-lookup"><span data-stu-id="e080f-149">The following code example demonstrates using a <xref:System.Net.HttpListener>.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8bf0b428-5a21-4299-8d6e-bf8251fd978a"><span data-ttu-id="e080f-150">版本 3.5 SP1 中对 HTTPWebRequest 的 NTLM 身份验证的更改</span><span class="sxs-lookup"><span data-stu-id="e080f-150">Changes to NTLM authentication for HTTPWebRequest in Version 3.5 SP1</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e080f-151">初始化 <see cref="T:System.Net.HttpListener" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e080f-151">Initializes a new instance of the <see cref="T:System.Net.HttpListener" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-152">在使用此构造函数返回的实例之前, 必须调用其<xref:System.Net.HttpListener.Start%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-152">Before using the instance returned by this constructor, you must invoke its <xref:System.Net.HttpListener.Start%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-153">下面的代码示例演示了如何使用<xref:System.Net.HttpListener>构造函数创建一个新<xref:System.Net.HttpListener>对象。</span><span class="sxs-lookup"><span data-stu-id="e080f-153">The following code example demonstrates using the <xref:System.Net.HttpListener> constructor to create a new <xref:System.Net.HttpListener> object.</span></span> <span data-ttu-id="e080f-154">有关完整示例，请参阅<xref:System.Net.HttpListener>类主题。</span><span class="sxs-lookup"><span data-stu-id="e080f-154">For the complete example, see the <xref:System.Net.HttpListener> class topic.</span></span>  
  
 [!code-csharp[Net_listener_Basic#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="e080f-155">此类不能在当前操作系统上使用。</span><span class="sxs-lookup"><span data-stu-id="e080f-155">This class cannot be used on the current operating system.</span></span> <span data-ttu-id="e080f-156">使用此类的实例需要 Windows Server 2003 或 Windows XP SP2。</span><span class="sxs-lookup"><span data-stu-id="e080f-156">Windows Server 2003 or Windows XP SP2 is required to use instances of this class.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="e080f-157">注意:当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="e080f-157">Note: This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e080f-158">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e080f-158">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="httpListener.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e080f-159">立刻关闭 <see cref="T:System.Net.HttpListener" /> 对象，这样会放弃所有当前排队的请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-159">Shuts down the <see cref="T:System.Net.HttpListener" /> object immediately, discarding all currently queued requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-160">此方法释放持有此侦听器的所有资源。</span><span class="sxs-lookup"><span data-stu-id="e080f-160">This method disposes of all resources held by this listener.</span></span> <span data-ttu-id="e080f-161">任何挂起的请求不能完成。</span><span class="sxs-lookup"><span data-stu-id="e080f-161">Any pending requests are unable to complete.</span></span>  
  
 <span data-ttu-id="e080f-162">调用此方法之后, 将会收到<xref:System.ObjectDisposedException>如果你尝试使用此<xref:System.Net.HttpListener>。</span><span class="sxs-lookup"><span data-stu-id="e080f-162">After calling this method, you will receive an <xref:System.ObjectDisposedException> if you attempt to use this <xref:System.Net.HttpListener>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-163">下面的代码示例演示如何调用此方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-163">The following code example demonstrates calling this method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="e080f-164">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="e080f-164">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e080f-165">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e080f-165">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemes">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemes AuthenticationSchemes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.AuthenticationSchemes AuthenticationSchemes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemes" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationSchemes As AuthenticationSchemes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::AuthenticationSchemes AuthenticationSchemes { System::Net::AuthenticationSchemes get(); void set(System::Net::AuthenticationSchemes value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationSchemes : System.Net.AuthenticationSchemes with get, set" Usage="System.Net.HttpListener.AuthenticationSchemes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e080f-166">获取或设置用于客户端身份验证的方案。</span><span class="sxs-lookup"><span data-stu-id="e080f-166">Gets or sets the scheme used to authenticate clients.</span></span></summary>
        <value><span data-ttu-id="e080f-167">指示如何对客户端进行身份验证的 <see cref="T:System.Net.AuthenticationSchemes" /> 枚举值的按位组合。</span><span class="sxs-lookup"><span data-stu-id="e080f-167">A bitwise combination of <see cref="T:System.Net.AuthenticationSchemes" /> enumeration values that indicates how clients are to be authenticated.</span></span> <span data-ttu-id="e080f-168">默认值为 <see cref="F:System.Net.AuthenticationSchemes.Anonymous" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-168">The default value is <see cref="F:System.Net.AuthenticationSchemes.Anonymous" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-169"><xref:System.Net.HttpListener>使用指定的方案来对所有传入请求进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="e080f-169">The <xref:System.Net.HttpListener> uses the specified scheme to authenticate all incoming requests.</span></span> <span data-ttu-id="e080f-170"><xref:System.Net.HttpListener.GetContext%2A>并<xref:System.Net.HttpListener.EndGetContext%2A>方法返回传入的客户端请求，仅当<xref:System.Net.HttpListener>成功进行身份验证请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-170">The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming client request only if the <xref:System.Net.HttpListener> successfully authenticates the request.</span></span>  
  
 <span data-ttu-id="e080f-171">您可以通过使用查询已成功经过身份验证的客户端的标识<xref:System.Net.HttpListenerContext.User%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-171">You can interrogate the identity of a successfully authenticated client by using the <xref:System.Net.HttpListenerContext.User%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="e080f-172">如果你想<xref:System.Net.HttpListener>对象以使用不同的身份验证机制根据收到的请求的特性 (例如，请求的<xref:System.Net.HttpListenerRequest.Url%2A>或<xref:System.Net.HttpListenerRequest.UserHostName%2A>属性)，你必须实现选择的方法身份验证方案。</span><span class="sxs-lookup"><span data-stu-id="e080f-172">If you want an <xref:System.Net.HttpListener> object to use different authentication mechanisms based on characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostName%2A> property), you must implement a method that chooses the authentication scheme.</span></span> <span data-ttu-id="e080f-173">有关如何执行此操作的说明，请参阅<xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>属性文档。</span><span class="sxs-lookup"><span data-stu-id="e080f-173">For instructions about how to do this, see the <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> property documentation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e080f-174">若要设置此属性来启用摘要式、 NTLM 或 Negotiate 需要<xref:System.Security.Permissions.SecurityPermission>， <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>。</span><span class="sxs-lookup"><span data-stu-id="e080f-174">To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-175">下面的代码示例演示了如何使用<xref:System.Net.HttpListener.AuthenticationSchemes%2A>属性来指定身份验证方案。</span><span class="sxs-lookup"><span data-stu-id="e080f-175">The following code example demonstrates using the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> property to specify an authentication scheme.</span></span>  
  
 [!code-csharp[Net_listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e080f-176">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="e080f-176">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemeSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationSchemeSelectorDelegate As AuthenticationSchemeSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::AuthenticationSchemeSelector ^ AuthenticationSchemeSelectorDelegate { System::Net::AuthenticationSchemeSelector ^ get(); void set(System::Net::AuthenticationSchemeSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationSchemeSelectorDelegate : System.Net.AuthenticationSchemeSelector with get, set" Usage="System.Net.HttpListener.AuthenticationSchemeSelectorDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemeSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e080f-177">获取或设置一个委托，调用它来确定用于客户端身份验证的协议。</span><span class="sxs-lookup"><span data-stu-id="e080f-177">Gets or sets the delegate called to determine the protocol used to authenticate clients.</span></span></summary>
        <value><span data-ttu-id="e080f-178"><see cref="T:System.Net.AuthenticationSchemeSelector" /> 委托，它调用用于选择身份验证协议的方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-178">An <see cref="T:System.Net.AuthenticationSchemeSelector" /> delegate that invokes the method used to select an authentication protocol.</span></span> <span data-ttu-id="e080f-179">默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-179">The default value is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="e080f-180">如果你想要处理的特定实例的所有请求使用的相同身份验证协议<xref:System.Net.HttpListener>，不需要设置此属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-180">If you want the same authentication protocol to be used for all requests handled by a particular instance of <xref:System.Net.HttpListener>, you do not need to set this property.</span></span> <span data-ttu-id="e080f-181">若要指定要用于所有客户端请求的协议，请使用<xref:System.Net.HttpListener.AuthenticationSchemes%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-181">To specify a protocol to be used for all client requests, use the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> property.</span></span>  
  
 <span data-ttu-id="e080f-182">如果客户端未在其标头，指定身份验证信息<xref:System.Net.HttpListener>调用为每个未经身份验证的传入请求，以确定，如果有，协议用于客户端身份验证指定的委托。</span><span class="sxs-lookup"><span data-stu-id="e080f-182">If the client has not specified authentication information in its headers, the <xref:System.Net.HttpListener> calls the specified delegate for each unauthenticated incoming request to determine which, if any, protocol to use to authenticate the client.</span></span> <span data-ttu-id="e080f-183"><xref:System.Net.HttpListener.GetContext%2A>并<xref:System.Net.HttpListener.EndGetContext%2A>方法返回传入的请求仅当<xref:System.Net.HttpListener>成功进行身份验证请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-183">The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming request only if the <xref:System.Net.HttpListener> successfully authenticated the request.</span></span> <span data-ttu-id="e080f-184">如果不能对请求进行身份验证，<xref:System.Net.HttpListener>自动发送回 401 响应。</span><span class="sxs-lookup"><span data-stu-id="e080f-184">If a request cannot be authenticated, the <xref:System.Net.HttpListener> automatically sends back a 401 response.</span></span> <span data-ttu-id="e080f-185">可以获取成功经过身份验证的客户端使用的标识<xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-185">You can get the identity of a successfully authenticated client using the <xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="e080f-186">可以将委派到特定于应用程序的方法的身份验证协议的选择是有用的一个实例<xref:System.Net.HttpListener>使用不同的身份验证协议，具体取决于接收 （适用于请求的特征例如，请求的<xref:System.Net.HttpListenerRequest.Url%2A>或<xref:System.Net.HttpListenerRequest.UserHostAddress%2A>属性)。</span><span class="sxs-lookup"><span data-stu-id="e080f-186">The ability to delegate the choice of authentication protocol to an application-specific method is useful if you want an instance of <xref:System.Net.HttpListener> to use different authentication protocols depending on the characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostAddress%2A> property).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e080f-187">若要设置此属性来启用摘要式、 NTLM 或 Negotiate 需要<xref:System.Security.Permissions.SecurityPermission>， <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>。</span><span class="sxs-lookup"><span data-stu-id="e080f-187">To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-188">下面的代码示例设置此属性的值。</span><span class="sxs-lookup"><span data-stu-id="e080f-188">The following code example sets the value of this property.</span></span>  
  
 [!code-csharp[NclListener#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#2)]
 [!code-vb[NclListener#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#2)]  
  
 <span data-ttu-id="e080f-189">下面的代码示例提供了调用方法的实现<xref:System.Net.AuthenticationSchemeSelector>委托。</span><span class="sxs-lookup"><span data-stu-id="e080f-189">The following code example provides an implementation of a method invoked by an <xref:System.Net.AuthenticationSchemeSelector> delegate.</span></span>  
  
 [!code-csharp[NclListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#1)]
 [!code-vb[NclListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e080f-190">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="e080f-190">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginGetContext">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginGetContext (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginGetContext(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginGetContext (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginGetContext(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginGetContext : AsyncCallback * obj -&gt; IAsyncResult" Usage="httpListener.BeginGetContext (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="e080f-191"><see cref="T:System.AsyncCallback" /> 委托，引用客户端请求可用时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-191">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when a client request is available.</span></span></param>
        <param name="state"><span data-ttu-id="e080f-192">一个用户定义对象，其中包含操作的相关信息。</span><span class="sxs-lookup"><span data-stu-id="e080f-192">A user-defined object that contains information about the operation.</span></span> <span data-ttu-id="e080f-193">操作完成时，此对象传递给 <paramref name="callback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="e080f-193">This object is passed to the <paramref name="callback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="e080f-194">开始异步检索传入的请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-194">Begins asynchronously retrieving an incoming request.</span></span></summary>
        <returns><span data-ttu-id="e080f-195">一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="e080f-195">An <see cref="T:System.IAsyncResult" /> object that indicates the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-196"><xref:System.Net.HttpListener.BeginGetContext%2A>方法开始异步 （非阻塞） 调用来接收传入的客户端请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-196">The <xref:System.Net.HttpListener.BeginGetContext%2A> method begins an asynchronous (non-blocking) call to receive incoming client requests.</span></span> <span data-ttu-id="e080f-197">调用此方法之前，必须调用<xref:System.Net.HttpListener.Start%2A>方法并添加至少一个统一资源标识符 (URI) 前缀，用于侦听的 URI 将字符串添加到<xref:System.Net.HttpListenerPrefixCollection>返回的<xref:System.Net.HttpListener.Prefixes%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-197">Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one Uniform Resource Identifier (URI) prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span>  
  
 <span data-ttu-id="e080f-198">必须通过调用完成异步操作<xref:System.Net.HttpListener.EndGetContext%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-198">The asynchronous operation must be completed by calling the <xref:System.Net.HttpListener.EndGetContext%2A> method.</span></span> <span data-ttu-id="e080f-199">通常情况下，通过调用该方法`callback`委托。</span><span class="sxs-lookup"><span data-stu-id="e080f-199">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="e080f-200">在操作完成时，此方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="e080f-200">This method does not block while the operation completes.</span></span> <span data-ttu-id="e080f-201">若要获取传入的请求和块，直到操作完成，请调用<xref:System.Net.HttpListener.GetContext%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-201">To get an incoming request and block until the operation completes, call the <xref:System.Net.HttpListener.GetContext%2A> method.</span></span>  
  
 <span data-ttu-id="e080f-202">有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="e080f-202">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-203">下面的代码示例演示了如何使用<xref:System.Net.HttpListener.BeginGetContext%2A>方法，以指定将处理传入的客户端请求的回调方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-203">The following code example demonstrates using the <xref:System.Net.HttpListener.BeginGetContext%2A> method to specify a callback method that will handle incoming client requests.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 <span data-ttu-id="e080f-204">下面的代码示例实现一个回调方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-204">The following code example implements a callback method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="e080f-205">Win32 函数调用失败。</span><span class="sxs-lookup"><span data-stu-id="e080f-205">A Win32 function call failed.</span></span> <span data-ttu-id="e080f-206">检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性以确定导致异常的原因。</span><span class="sxs-lookup"><span data-stu-id="e080f-206">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e080f-207">此对象尚未启动或当前已停止。</span><span class="sxs-lookup"><span data-stu-id="e080f-207">This object has not been started or is currently stopped.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e080f-208">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="e080f-208">This object is closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="e080f-209">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="e080f-209">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e080f-210">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e080f-210">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="httpListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e080f-211">关闭 <see cref="T:System.Net.HttpListener" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-211">Shuts down the <see cref="T:System.Net.HttpListener" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-212">调用此方法后，你无法再使用<xref:System.Net.HttpListener>对象。</span><span class="sxs-lookup"><span data-stu-id="e080f-212">After calling this method, you can no longer use the <xref:System.Net.HttpListener> object.</span></span> <span data-ttu-id="e080f-213">若要临时暂停<xref:System.Net.HttpListener>对象，请使用<xref:System.Net.HttpListener.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-213">To temporarily pause an <xref:System.Net.HttpListener> object, use the <xref:System.Net.HttpListener.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="e080f-214">此方法关闭列表<xref:System.Net.HttpListener>对象而不会处理排队的请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-214">This method shut downs the <xref:System.Net.HttpListener> object without processing queued requests.</span></span> <span data-ttu-id="e080f-215">任何挂起的请求不能完成。</span><span class="sxs-lookup"><span data-stu-id="e080f-215">Any pending requests are unable to complete.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-216">下面的代码示例演示如何调用此方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-216">The following code example demonstrates calling this method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="e080f-217">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="e080f-217">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e080f-218">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e080f-218">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="DefaultServiceNames">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.DefaultServiceNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultServiceNames As ServiceNameCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ServiceNameCollection ^ DefaultServiceNames { System::Security::Authentication::ExtendedProtection::ServiceNameCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultServiceNames : System.Security.Authentication.ExtendedProtection.ServiceNameCollection" Usage="System.Net.HttpListener.DefaultServiceNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ServiceNameCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e080f-219">获取由已注册前缀确定的服务提供程序名 (SPN) 的默认列表。</span><span class="sxs-lookup"><span data-stu-id="e080f-219">Gets a default list of Service Provider Names (SPNs) as determined by registered prefixes.</span></span></summary>
        <value><span data-ttu-id="e080f-220">一个包含 SPN 列表的 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-220">A <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> that contains a list of SPNs.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-221"><xref:System.Net.HttpListener.DefaultServiceNames%2A>属性用于集成 Windows 身份验证来提供扩展的保护。</span><span class="sxs-lookup"><span data-stu-id="e080f-221">The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is used with integrated Windows authentication to provide extended protection.</span></span> <span data-ttu-id="e080f-222">从初始化的 Spn 的列表<xref:System.Net.HttpListener.Prefixes%2A>属性访问，并且当新的前缀添加到时清除时<xref:System.Net.HttpListener.Prefixes%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-222">The list of SPNs is initialized from the <xref:System.Net.HttpListener.Prefixes%2A> property when accessed and cleared when new prefixes are added to the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span>  
  
 <span data-ttu-id="e080f-223"><xref:System.Net.HttpListener.DefaultServiceNames%2A>如果应用程序不会设置使用属性<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A>上其扩展的保护策略的属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-223">The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is used if an application doesn't set the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A> property on its extended protection policy.</span></span>  
  
 <span data-ttu-id="e080f-224"><xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection>检索的<xref:System.Net.HttpListener.DefaultServiceNames%2A>属性从生成<xref:System.Net.HttpListener.Prefixes%2A>属性根据以下规则：</span><span class="sxs-lookup"><span data-stu-id="e080f-224">The <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection> that is retrieved with the <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is built from the <xref:System.Net.HttpListener.Prefixes%2A> property according to the following rules:</span></span>  
  
1.  <span data-ttu-id="e080f-225">如果主机名为"+"、"\*"，或 IPv4 或 IPv6 文字 (等效于"\*"但限制为特定的本地接口)，添加以下的 SPN:</span><span class="sxs-lookup"><span data-stu-id="e080f-225">If the hostname is "+", "\*", or an IPv4 or IPv6 literal (equivalent to "\*" but restricted to a specific local interface), the following SPN is added:</span></span>  
  
 <span data-ttu-id="e080f-226">`"HTTP/"` 加上的计算机的完全限定的域名。</span><span class="sxs-lookup"><span data-stu-id="e080f-226">`"HTTP/"` plus the fully qualified domain name of the computer.</span></span>  
  
1.  <span data-ttu-id="e080f-227">如果主机名不包含点 （任何域或子域），尝试解决使用 DNS 名称的完全限定域名 (相同的行为由<xref:System.Net.HttpWebRequest>)。</span><span class="sxs-lookup"><span data-stu-id="e080f-227">If the hostname contains no dots (no domains or subdomains), an attempt is made to resolve the fully-qualified domain name using DNS (the same behavior used by <xref:System.Net.HttpWebRequest>).</span></span> <span data-ttu-id="e080f-228">如果可解析的完全限定域名，则添加以下的 Spn:</span><span class="sxs-lookup"><span data-stu-id="e080f-228">If the fully-qualified domain name can be resolved, the following SPNs are added:</span></span>  
  
 <span data-ttu-id="e080f-229">`"HTTP/"` 此外，主机名 （短名称）。</span><span class="sxs-lookup"><span data-stu-id="e080f-229">`"HTTP/"` plus the hostname (the short name).</span></span>  
  
 <span data-ttu-id="e080f-230">`"HTTP/"` 加上主机名的完全限定的域名。</span><span class="sxs-lookup"><span data-stu-id="e080f-230">`"HTTP/"` plus the fully qualified domain name for the hostname.</span></span>  
  
1.  <span data-ttu-id="e080f-231">如果主机名不包含点 （任何域或子域） 和完全限定的域名不能为已解决，添加以下的 SPN:</span><span class="sxs-lookup"><span data-stu-id="e080f-231">If the hostname contains not dots (no domains or subdomains) and a fully-qualified domain name can't be resolved, the following SPN is added:</span></span>  
  
 <span data-ttu-id="e080f-232">`"HTTP/"` 此外，主机名。</span><span class="sxs-lookup"><span data-stu-id="e080f-232">`"HTTP/"` plus the hostname.</span></span>  
  
1.  <span data-ttu-id="e080f-233">如果主机名包含点 （域或子域），将添加以下的 SPN:</span><span class="sxs-lookup"><span data-stu-id="e080f-233">If the hostname contains dots (domains or subdomains), the following SPN is added:</span></span>  
  
 <span data-ttu-id="e080f-234">`"HTTP/"` 此外，主机名。</span><span class="sxs-lookup"><span data-stu-id="e080f-234">`"HTTP/"` plus the hostname.</span></span>  
  
 <span data-ttu-id="e080f-235"><xref:System.Net.HttpListener.DefaultServiceNames%2A>属性可以使用应用程序，若要查看的默认 Spn 将用于身份验证如果不提供任何自定义列表的列表。</span><span class="sxs-lookup"><span data-stu-id="e080f-235">The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property can be used by an application to review the list of default SPNs which will be used for authentication if no custom list is supplied.</span></span> <span data-ttu-id="e080f-236">如果需要其他 Spn，应用程序可以添加它们使用之一<xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-236">If other SPNs are needed, an application can add them using one of the <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A> methods.</span></span>  
  
 <span data-ttu-id="e080f-237">使用扩展的保护策略根据做出决策所请求的 URL，因为这可能伪装时，它是不安全。</span><span class="sxs-lookup"><span data-stu-id="e080f-237">It is not safe when using extended protection to make policy decisions based on the requested URL, since this can be spoofed.</span></span> <span data-ttu-id="e080f-238">相反，应用程序应依赖于<xref:System.Net.HttpListenerRequest.LocalEndPoint%2A>或<xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A>属性以使此类策略决策。</span><span class="sxs-lookup"><span data-stu-id="e080f-238">Rather, applications should rely on the <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A> or <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A> properties to make such policy decisions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="e080f-239">带有扩展保护的集成 Windows 身份验证</span><span class="sxs-lookup"><span data-stu-id="e080f-239">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndGetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext EndGetContext (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext EndGetContext(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndGetContext (asyncResult As IAsyncResult) As HttpListenerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::HttpListenerContext ^ EndGetContext(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndGetContext : IAsyncResult -&gt; System.Net.HttpListenerContext" Usage="httpListener.EndGetContext asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="e080f-240">启动异步操作时获得的 <see cref="T:System.IAsyncResult" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="e080f-240">An <see cref="T:System.IAsyncResult" /> object that was obtained when the asynchronous operation was started.</span></span></param>
        <summary><span data-ttu-id="e080f-241">完成检索传入的客户端请求的异步操作。</span><span class="sxs-lookup"><span data-stu-id="e080f-241">Completes an asynchronous operation to retrieve an incoming client request.</span></span></summary>
        <returns><span data-ttu-id="e080f-242">表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="e080f-242">An <see cref="T:System.Net.HttpListenerContext" /> object that represents the client request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-243"><xref:System.Net.HttpListener.EndGetContext%2A>调用方法时，通常在调用委托时，若要获取的应用程序定义的回调方法中<xref:System.Net.HttpListenerContext>对象，包含传入的客户端请求和其关联的响应。</span><span class="sxs-lookup"><span data-stu-id="e080f-243">The <xref:System.Net.HttpListener.EndGetContext%2A> method is called, usually within an application-defined callback method invoked by a delegate, to obtain the <xref:System.Net.HttpListenerContext> object that contains an incoming client request and its associated response.</span></span> <span data-ttu-id="e080f-244">此方法完成以前通过调用启动的操作<xref:System.Net.HttpListener.BeginGetContext%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-244">This method completes an operation previously started by calling the <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span> <span data-ttu-id="e080f-245">如果该操作未完成，此方法阻止，直至它。</span><span class="sxs-lookup"><span data-stu-id="e080f-245">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="e080f-246">因为在调用<xref:System.Net.HttpListener.EndGetContext%2A>方法要求<xref:System.Net.HttpListener>对象，此对象通常传递到回调方法，将使用状态对象传递到<xref:System.Net.HttpListener.BeginGetContext%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-246">Because calling the <xref:System.Net.HttpListener.EndGetContext%2A> method requires the <xref:System.Net.HttpListener> object, this object is typically passed into a callback method by using the state object passed into the <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span> <span data-ttu-id="e080f-247">可以使用来获取此状态对象<xref:System.IAsyncResult.AsyncState%2A>属性的`asyncResult`对象。</span><span class="sxs-lookup"><span data-stu-id="e080f-247">You can obtain this state object by using the <xref:System.IAsyncResult.AsyncState%2A> property of the `asyncResult` object.</span></span>  
  
 <span data-ttu-id="e080f-248">有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="e080f-248">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-249">下面的代码示例显示了调用的回调方法的实现<xref:System.Net.HttpListener.EndGetContext%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-249">The following code example shows the implementation of a callback method that calls the <xref:System.Net.HttpListener.EndGetContext%2A> method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e080f-250">未通过调用 <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> 方法获取 <paramref name="asyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-250"><paramref name="asyncResult" /> was not obtained by calling the <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e080f-251"><paramref name="asyncResult" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-251"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e080f-252">已为指定的 <paramref name="asyncResult" /> 对象调用 <see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-252">The <see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> method was already called for the specified <paramref name="asyncResult" /> object.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e080f-253">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="e080f-253">This object is closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="e080f-254">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="e080f-254">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e080f-255">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e080f-255">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionPolicy">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedProtectionPolicy As ExtendedProtectionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ ExtendedProtectionPolicy { System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ get(); void set(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProtectionPolicy : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy with get, set" Usage="System.Net.HttpListener.ExtendedProtectionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("not used anywhere in the implementation")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e080f-256">获取或设置用于会话的扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-256">Get or set the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> to use for extended protection for a session.</span></span></summary>
        <value><span data-ttu-id="e080f-257">一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />，它指定要用于扩展保护的策略。</span><span class="sxs-lookup"><span data-stu-id="e080f-257">A <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that specifies the policy to use for extended protection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-258"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>属性用于集成 Windows 身份验证来提供扩展的保护。</span><span class="sxs-lookup"><span data-stu-id="e080f-258">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property is used with integrated Windows authentication to provide extended protection.</span></span> <span data-ttu-id="e080f-259"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>属性，可配置的扩展的保护策略为整个<xref:System.Net.HttpListener>会话。</span><span class="sxs-lookup"><span data-stu-id="e080f-259">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session.</span></span> <span data-ttu-id="e080f-260"><xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A>属性允许的每个请求的扩展的保护策略的配置。</span><span class="sxs-lookup"><span data-stu-id="e080f-260">The <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> property allows the configuration of the extended protection policy for each individual request.</span></span>  
  
 <span data-ttu-id="e080f-261"><xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> 属性必须为 `null`。</span><span class="sxs-lookup"><span data-stu-id="e080f-261">The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`.</span></span> <span data-ttu-id="e080f-262"><xref:System.Net.HttpListener>实例在如果有一个直接从其自己的 TLS 会话获取通道绑定令牌 (CBT)。</span><span class="sxs-lookup"><span data-stu-id="e080f-262">The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e080f-263">尝试设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 属性，但 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 属性不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-263">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property, but the <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> property was not <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e080f-264">尝试将 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 属性设置为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-264">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e080f-265">尝试在调用 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 方法后设置 <see cref="M:System.Net.HttpListener.Start" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-265">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property after the <see cref="M:System.Net.HttpListener.Start" /> method was already called.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e080f-266">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="e080f-266">This object is closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="e080f-267"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement" /> 属性设置为平台上的 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />，其不支持扩展的保护。</span><span class="sxs-lookup"><span data-stu-id="e080f-267">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement" /> property was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="e080f-268">带有扩展保护的集成 Windows 身份验证</span><span class="sxs-lookup"><span data-stu-id="e080f-268">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.HttpListener.ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListener/ExtendedProtectionSelector ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedProtectionSelectorDelegate As HttpListener.ExtendedProtectionSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListener::ExtendedProtectionSelector ^ ExtendedProtectionSelectorDelegate { System::Net::HttpListener::ExtendedProtectionSelector ^ get(); void set(System::Net::HttpListener::ExtendedProtectionSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProtectionSelectorDelegate : System.Net.HttpListener.ExtendedProtectionSelector with get, set" Usage="System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpListener+ExtendedProtectionSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e080f-269">获取或设置在确定要用于每个请求的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 时调用的委托。</span><span class="sxs-lookup"><span data-stu-id="e080f-269">Get or set the delegate called to determine the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> to use for each request.</span></span></summary>
        <value><span data-ttu-id="e080f-270">一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />，它指定要用于扩展保护的策略。</span><span class="sxs-lookup"><span data-stu-id="e080f-270">A <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that specifies the policy to use for extended protection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-271"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>属性用于集成 Windows 身份验证来提供扩展的保护。</span><span class="sxs-lookup"><span data-stu-id="e080f-271">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property is used with integrated Windows authentication to provide extended protection.</span></span> <span data-ttu-id="e080f-272"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>属性，可配置的扩展的保护策略为整个<xref:System.Net.HttpListener>会话。</span><span class="sxs-lookup"><span data-stu-id="e080f-272">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session.</span></span> <span data-ttu-id="e080f-273"><xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A>属性，可按每个请求的扩展的保护策略的配置。</span><span class="sxs-lookup"><span data-stu-id="e080f-273">The <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> property allows the configuration of the extended protection policy per individual request.</span></span>  
  
 <span data-ttu-id="e080f-274"><xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> 属性必须为 `null`。</span><span class="sxs-lookup"><span data-stu-id="e080f-274">The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`.</span></span> <span data-ttu-id="e080f-275"><xref:System.Net.HttpListener>实例在如果有一个直接从其自己的 TLS 会话获取通道绑定令牌 (CBT)。</span><span class="sxs-lookup"><span data-stu-id="e080f-275">The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.</span></span>  
  
 <span data-ttu-id="e080f-276">对于每个请求，该委托可以选择设置，<xref:System.Net.HttpListener>实例将用于提供扩展的保护。</span><span class="sxs-lookup"><span data-stu-id="e080f-276">For each request, the delegate can choose the settings that the <xref:System.Net.HttpListener> instance will use to provide extended protection.</span></span>  
  
 <span data-ttu-id="e080f-277">如果委托返回`null`对于此属性，这表示<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy>这<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>属性设置为<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。</span><span class="sxs-lookup"><span data-stu-id="e080f-277">If a delegate returns `null` for this property, this represents a <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy> which the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> property set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e080f-278">尝试设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 属性，但 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 属性必须为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-278">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property, but the <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> property must be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e080f-279">尝试将 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 属性设置为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-279">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e080f-280">尝试在调用 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 方法后设置 <see cref="M:System.Net.HttpListener.Start" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-280">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property after the <see cref="M:System.Net.HttpListener.Start" /> method was already called.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e080f-281">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="e080f-281">This object is closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="e080f-282">已试图在不支持扩展的保护的平台上设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-282">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="e080f-283">带有扩展保护的集成 Windows 身份验证</span><span class="sxs-lookup"><span data-stu-id="e080f-283">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As HttpListenerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::HttpListenerContext ^ GetContext();" />
      <MemberSignature Language="F#" Value="member this.GetContext : unit -&gt; System.Net.HttpListenerContext" Usage="httpListener.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e080f-284">等待传入的请求，接收到请求时返回。</span><span class="sxs-lookup"><span data-stu-id="e080f-284">Waits for an incoming request and returns when one is received.</span></span></summary>
        <returns><span data-ttu-id="e080f-285">表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="e080f-285">An <see cref="T:System.Net.HttpListenerContext" /> object that represents a client request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-286">调用此方法之前，必须调用<xref:System.Net.HttpListener.Start%2A>方法并添加至少一个用于侦听的 URI 将字符串添加到的 URI 前缀<xref:System.Net.HttpListenerPrefixCollection>返回的<xref:System.Net.HttpListener.Prefixes%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-286">Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span> <span data-ttu-id="e080f-287">有关前缀的详细说明，请参阅<xref:System.Net.HttpListener>类概述。</span><span class="sxs-lookup"><span data-stu-id="e080f-287">For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.</span></span>  
  
 <span data-ttu-id="e080f-288">此方法在等待传入的请求时阻止。</span><span class="sxs-lookup"><span data-stu-id="e080f-288">This method blocks while waiting for an incoming request.</span></span> <span data-ttu-id="e080f-289">如果您要处理异步 （单独的线程上），以便你的应用程序不会阻止传入请求，使用<xref:System.Net.HttpListener.BeginGetContext%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-289">If you want incoming requests to be processed asynchronously (on separate threads) so that your application does not block, use the <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-290">下面的代码示例演示如何调用此方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-290">The following code example demonstrates calling this method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="e080f-291">Win32 函数调用失败。</span><span class="sxs-lookup"><span data-stu-id="e080f-291">A Win32 function call failed.</span></span> <span data-ttu-id="e080f-292">检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性以确定导致异常的原因。</span><span class="sxs-lookup"><span data-stu-id="e080f-292">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e080f-293">此对象尚未启动或当前已停止。</span><span class="sxs-lookup"><span data-stu-id="e080f-293">This object has not been started or is currently stopped.</span></span>  
  
<span data-ttu-id="e080f-294">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e080f-294">-or-</span></span> 
<span data-ttu-id="e080f-295"><see cref="T:System.Net.HttpListener" /> 没有任何要响应的统一资源标识符 (URI) 前缀。</span><span class="sxs-lookup"><span data-stu-id="e080f-295">The <see cref="T:System.Net.HttpListener" /> does not have any Uniform Resource Identifier (URI) prefixes to respond to.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e080f-296">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="e080f-296">This object is closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="e080f-297">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="e080f-297">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e080f-298">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e080f-298">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetContextAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt; GetContextAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.HttpListenerContext&gt; GetContextAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContextAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextAsync () As Task(Of HttpListenerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::HttpListenerContext ^&gt; ^ GetContextAsync();" />
      <MemberSignature Language="F#" Value="member this.GetContextAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt;" Usage="httpListener.GetContextAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e080f-299">等待传入请求以作为异步操作。</span><span class="sxs-lookup"><span data-stu-id="e080f-299">Waits for an incoming request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="e080f-300">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="e080f-300">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="e080f-301">任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="e080f-301">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns an <see cref="T:System.Net.HttpListenerContext" /> object that represents a client request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-302">不会阻止此操作。</span><span class="sxs-lookup"><span data-stu-id="e080f-302">This operation will not block.</span></span> <span data-ttu-id="e080f-303">返回<xref:System.Threading.Tasks.Task%601>对象完成后，将收到的传入的请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-303">The returned <xref:System.Threading.Tasks.Task%601> object will complete when the incoming request has been received.</span></span>  
  
 <span data-ttu-id="e080f-304">调用此方法之前，必须调用<xref:System.Net.HttpListener.Start%2A>方法并添加至少一个用于侦听的 URI 将字符串添加到的 URI 前缀<xref:System.Net.HttpListenerPrefixCollection>返回的<xref:System.Net.HttpListener.Prefixes%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-304">Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span> <span data-ttu-id="e080f-305">有关前缀的详细说明，请参阅<xref:System.Net.HttpListener>类概述。</span><span class="sxs-lookup"><span data-stu-id="e080f-305">For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListenerContext" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWriteExceptions">
      <MemberSignature Language="C#" Value="public bool IgnoreWriteExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWriteExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IgnoreWriteExceptions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWriteExceptions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWriteExceptions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreWriteExceptions : bool with get, set" Usage="System.Net.HttpListener.IgnoreWriteExceptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e080f-306">获取或设置 <see cref="T:System.Boolean" /> 值，该值指定应用程序是否接收 <see cref="T:System.Net.HttpListener" /> 向客户端发送响应时发生的异常。</span><span class="sxs-lookup"><span data-stu-id="e080f-306">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether your application receives exceptions that occur when an <see cref="T:System.Net.HttpListener" /> sends the response to the client.</span></span></summary>
        <value><span data-ttu-id="e080f-307">如果此 <see cref="T:System.Net.HttpListener" /> 不返回向客户端发送响应时发生的异常，则返回 <see langword="true" />；否则返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-307"><see langword="true" /> if this <see cref="T:System.Net.HttpListener" /> should not return exceptions that occur when sending the response to the client; otherwise <see langword="false" />.</span></span> <span data-ttu-id="e080f-308">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-308">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-309">将此属性设置为`true`如果你的应用程序不需要响应成功发送到每个客户端。</span><span class="sxs-lookup"><span data-stu-id="e080f-309">Set this property to `true` if your application does not require that a response is successfully sent to each client.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-310">下面的代码示例演示如何设置此属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-310">The following code example demonstrates setting this property.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e080f-311">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="e080f-311">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsListening">
      <MemberSignature Language="C#" Value="public bool IsListening { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsListening" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsListening" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsListening As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsListening { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsListening : bool" Usage="System.Net.HttpListener.IsListening" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e080f-312">获取一个值，指示 <see cref="T:System.Net.HttpListener" /> 是否已启动。</span><span class="sxs-lookup"><span data-stu-id="e080f-312">Gets a value that indicates whether <see cref="T:System.Net.HttpListener" /> has been started.</span></span></summary>
        <value><span data-ttu-id="e080f-313">如果已启动 <see cref="T:System.Net.HttpListener" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-313"><see langword="true" /> if the <see cref="T:System.Net.HttpListener" /> was started; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-314">若要启动<xref:System.Net.HttpListener>，调用<xref:System.Net.HttpListener.Start%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-314">To start an <xref:System.Net.HttpListener>, call the <xref:System.Net.HttpListener.Start%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-315">下面的代码示例演示如何使用此属性来确定实例的侦听状态。</span><span class="sxs-lookup"><span data-stu-id="e080f-315">The following code example demonstrates using this property to determine the listening state of an instance.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public static bool IsSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsSupported" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsSupported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsSupported { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSupported : bool" Usage="System.Net.HttpListener.IsSupported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e080f-316">获取一个值，指示 <see cref="T:System.Net.HttpListener" /> 是否可用于当前操作系统。</span><span class="sxs-lookup"><span data-stu-id="e080f-316">Gets a value that indicates whether <see cref="T:System.Net.HttpListener" /> can be used with the current operating system.</span></span></summary>
        <value><span data-ttu-id="e080f-317">如果支持 <see cref="T:System.Net.HttpListener" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-317"><see langword="true" /> if <see cref="T:System.Net.HttpListener" /> is supported; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-318">此类是仅在运行 Windows XP SP2 或 Windows Server 2003 操作系统的计算机上可用。</span><span class="sxs-lookup"><span data-stu-id="e080f-318">This class is available only on computers running the Windows XP SP2 or Windows Server 2003 operating systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-319">下面的代码示例演示如何将<xref:System.Net.HttpListener.IsSupported%2A>属性来检测是否<xref:System.Net.HttpListener>对象可用于当前操作系统。</span><span class="sxs-lookup"><span data-stu-id="e080f-319">The following code example demonstrates the use of the <xref:System.Net.HttpListener.IsSupported%2A> property to detect whether an <xref:System.Net.HttpListener> object can be used with the current operating system.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixes">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerPrefixCollection Prefixes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerPrefixCollection Prefixes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Prefixes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Prefixes As HttpListenerPrefixCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerPrefixCollection ^ Prefixes { System::Net::HttpListenerPrefixCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Prefixes : System.Net.HttpListenerPrefixCollection" Usage="System.Net.HttpListener.Prefixes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerPrefixCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e080f-320">获取由此 <see cref="T:System.Net.HttpListener" /> 对象处理的统一资源标识符 (URI) 前缀。</span><span class="sxs-lookup"><span data-stu-id="e080f-320">Gets the Uniform Resource Identifier (URI) prefixes handled by this <see cref="T:System.Net.HttpListener" /> object.</span></span></summary>
        <value><span data-ttu-id="e080f-321"><see cref="T:System.Net.HttpListenerPrefixCollection" />，包含此 <see cref="T:System.Net.HttpListener" /> 对象在经配置后要处理的 URI 前缀。</span><span class="sxs-lookup"><span data-stu-id="e080f-321">An <see cref="T:System.Net.HttpListenerPrefixCollection" /> that contains the URI prefixes that this <see cref="T:System.Net.HttpListener" /> object is configured to handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-322">前缀是采用规范格式。</span><span class="sxs-lookup"><span data-stu-id="e080f-322">The prefixes are in canonical form.</span></span> <span data-ttu-id="e080f-323">有关前缀的详细说明，请参阅<xref:System.Net.HttpListener>类概述。</span><span class="sxs-lookup"><span data-stu-id="e080f-323">For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-324">下面的代码示例演示了如何使用<xref:System.Net.HttpListener.Prefixes%2A>属性获取和输出处理的 URI 前缀。</span><span class="sxs-lookup"><span data-stu-id="e080f-324">The following code example demonstrates using the <xref:System.Net.HttpListener.Prefixes%2A> property to obtain and print the URI prefixes that are handled.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e080f-325">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="e080f-325">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Realm">
      <MemberSignature Language="C#" Value="public string Realm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Realm" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Realm" />
      <MemberSignature Language="VB.NET" Value="Public Property Realm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Realm { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Realm : string with get, set" Usage="System.Net.HttpListener.Realm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e080f-326">获取或设置与此 <see cref="T:System.Net.HttpListener" /> 对象关联的领域或资源分区。</span><span class="sxs-lookup"><span data-stu-id="e080f-326">Gets or sets the realm, or resource partition, associated with this <see cref="T:System.Net.HttpListener" /> object.</span></span></summary>
        <value><span data-ttu-id="e080f-327"><see cref="T:System.String" /> 值，包含与 <see cref="T:System.Net.HttpListener" /> 对象关联的领域名。</span><span class="sxs-lookup"><span data-stu-id="e080f-327">A <see cref="T:System.String" /> value that contains the name of the realm associated with the <see cref="T:System.Net.HttpListener" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-328">服务器使用领域将受保护的资源; 分区每个分区可以有其自己的身份验证方案和/或授权数据库。</span><span class="sxs-lookup"><span data-stu-id="e080f-328">Servers use realms to partition protected resources; each partition can have its own authentication scheme and/or authorization database.</span></span> <span data-ttu-id="e080f-329">领域仅用于基本和摘要式身份验证。</span><span class="sxs-lookup"><span data-stu-id="e080f-329">Realms are used only for basic and digest authentication.</span></span> <span data-ttu-id="e080f-330">在客户端成功进行身份验证之后，该身份验证对给定领域内的所有资源都有效。</span><span class="sxs-lookup"><span data-stu-id="e080f-330">After a client successfully authenticates, the authentication is valid for all resources in a given realm.</span></span> <span data-ttu-id="e080f-331">有关领域的详细说明，请参阅在 RFC 2617 [ https://www.ietf.org/ ](https://www.ietf.org/)。</span><span class="sxs-lookup"><span data-stu-id="e080f-331">For a detailed description of realms, see RFC 2617 at [https://www.ietf.org/](https://www.ietf.org/).</span></span>  
  
 <span data-ttu-id="e080f-332">实例<xref:System.Net.HttpListener>具有只有一个关联的领域。</span><span class="sxs-lookup"><span data-stu-id="e080f-332">An instance of <xref:System.Net.HttpListener> has only one associated realm.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-333">下面的代码示例演示了如何设置<xref:System.Net.HttpListener.Realm%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-333">The following code example demonstrates setting the <xref:System.Net.HttpListener.Realm%2A> property.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e080f-334">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="e080f-334">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="httpListener.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e080f-335">允许此实例接收传入的请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-335">Allows this instance to receive incoming requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-336">必须调用此方法，然后再调用<xref:System.Net.HttpListener.GetContext%2A>或<xref:System.Net.HttpListener.BeginGetContext%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-336">This method must be called before you call the <xref:System.Net.HttpListener.GetContext%2A> or <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span>  
  
 <span data-ttu-id="e080f-337">启动后<xref:System.Net.HttpListener>对象，可以使用<xref:System.Net.HttpListener.Stop%2A>方法将其停止。</span><span class="sxs-lookup"><span data-stu-id="e080f-337">After you have started an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Stop%2A> method to stop it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e080f-338">如果此侦听器实例使用 https，必须安装并选择服务器证书。</span><span class="sxs-lookup"><span data-stu-id="e080f-338">If this listener instance uses https, you must install and select a Server Certificate.</span></span> <span data-ttu-id="e080f-339">否则为<xref:System.Net.HttpWebRequest>此查询<xref:System.Net.HttpListener>并意外关闭的连接将失败。</span><span class="sxs-lookup"><span data-stu-id="e080f-339">Otherwise, an <xref:System.Net.HttpWebRequest> query of this <xref:System.Net.HttpListener> will fail with an unexpected close of the connection.</span></span> <span data-ttu-id="e080f-340">可以通过使用 HttpCfg.exe 配置服务器证书和其他侦听器选项。</span><span class="sxs-lookup"><span data-stu-id="e080f-340">You can configure Server Certificates and other listener options by using HttpCfg.exe.</span></span> <span data-ttu-id="e080f-341">请参阅[ http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp ](https://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp)的更多详细信息。</span><span class="sxs-lookup"><span data-stu-id="e080f-341">See [http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp](https://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp) for more details.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-342">下面的代码示例演示了如何使用<xref:System.Net.HttpListener.Start%2A>方法以开始处理传入的请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-342">The following code example demonstrates using the <xref:System.Net.HttpListener.Start%2A> method to begin processing incoming requests.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="e080f-343">Win32 函数调用失败。</span><span class="sxs-lookup"><span data-stu-id="e080f-343">A Win32 function call failed.</span></span> <span data-ttu-id="e080f-344">检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性以确定导致异常的原因。</span><span class="sxs-lookup"><span data-stu-id="e080f-344">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e080f-345">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="e080f-345">This object is closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="e080f-346">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="e080f-346">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e080f-347">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e080f-347">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="httpListener.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e080f-348">使此实例停止接收传入的请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-348">Causes this instance to stop receiving incoming requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-349">如果此实例已停止，调用此方法无效。</span><span class="sxs-lookup"><span data-stu-id="e080f-349">If this instance is already stopped, calling this method has no effect.</span></span>  
  
 <span data-ttu-id="e080f-350">已停止后<xref:System.Net.HttpListener>对象，可以使用<xref:System.Net.HttpListener.Start%2A>方法来重新启动它。</span><span class="sxs-lookup"><span data-stu-id="e080f-350">After you have stopped an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Start%2A> method to restart it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-351">下面的代码示例演示了如何使用<xref:System.Net.HttpListener.Stop%2A>方法来停止处理传入的请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-351">The following code example demonstrates using the <xref:System.Net.HttpListener.Stop%2A> method to stop processing incoming requests.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e080f-352">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="e080f-352">This object has been closed.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="e080f-353">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="e080f-353">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e080f-354">有关详细信息，请参阅[在.NET Framework 中进行网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e080f-354">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e080f-355">释放此 <see cref="T:System.Net.HttpListener" /> 对象持有的资源。</span><span class="sxs-lookup"><span data-stu-id="e080f-355">Releases the resources held by this <see cref="T:System.Net.HttpListener" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-356">应用程序应使用<xref:System.Net.HttpListener.Close%2A>方法，而不调用此方法。</span><span class="sxs-lookup"><span data-stu-id="e080f-356">Applications should use the <xref:System.Net.HttpListener.Close%2A> method instead of calling this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutManager">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerTimeoutManager TimeoutManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerTimeoutManager TimeoutManager" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.TimeoutManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutManager As HttpListenerTimeoutManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerTimeoutManager ^ TimeoutManager { System::Net::HttpListenerTimeoutManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutManager : System.Net.HttpListenerTimeoutManager" Usage="System.Net.HttpListener.TimeoutManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerTimeoutManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e080f-357">此 <see cref="T:System.Net.HttpListener" /> 实例的超时管理器。</span><span class="sxs-lookup"><span data-stu-id="e080f-357">The timeout manager for this <see cref="T:System.Net.HttpListener" /> instance.</span></span></summary>
        <value><span data-ttu-id="e080f-358">此 <see cref="T:System.Net.HttpListener" /> 实例的超时管理器。</span><span class="sxs-lookup"><span data-stu-id="e080f-358">The timeout manager for this <see cref="T:System.Net.HttpListener" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-359">超时管理器定义此连接超时限制<xref:System.Net.HttpListener>实例。</span><span class="sxs-lookup"><span data-stu-id="e080f-359">The timeout manager defines the connection timeout limits for this <xref:System.Net.HttpListener> instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeConnectionNtlmAuthentication">
      <MemberSignature Language="C#" Value="public bool UnsafeConnectionNtlmAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeConnectionNtlmAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.UnsafeConnectionNtlmAuthentication" />
      <MemberSignature Language="VB.NET" Value="Public Property UnsafeConnectionNtlmAuthentication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnsafeConnectionNtlmAuthentication { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UnsafeConnectionNtlmAuthentication : bool with get, set" Usage="System.Net.HttpListener.UnsafeConnectionNtlmAuthentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Support for NTLM needs some loving.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e080f-360">获取或设置 <see cref="T:System.Boolean" /> 值，该值控制当使用 NTLM 时是否需要对使用同一传输控制协议 (TCP) 连接的其他请求进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="e080f-360">Gets or sets a <see cref="T:System.Boolean" /> value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate.</span></span></summary>
        <value><span data-ttu-id="e080f-361">如果第一个请求的 <see cref="T:System.Security.Principal.IIdentity" /> 将用于同一连接上的后续请求，则返回 <see langword="true" />；否则返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-361"><see langword="true" /> if the <see cref="T:System.Security.Principal.IIdentity" /> of the first request will be used for subsequent requests on the same connection; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="e080f-362">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e080f-362">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e080f-363">当此属性设置为`true`和特定的 TCP 连接上的第一个请求进行身份验证使用 NTLM，来处理同一个 TCP 连接上的后续请求使用的身份验证信息 (<xref:System.Security.Principal.IIdentity>) 的初始请求。</span><span class="sxs-lookup"><span data-stu-id="e080f-363">When this property is set to `true` and the first request over a particular TCP connection is authenticated using NTLM, subsequent requests over the same TCP connection are processed using the authentication information (<xref:System.Security.Principal.IIdentity>) of the initial request.</span></span>  
  
 <span data-ttu-id="e080f-364">此属性在 NTLM 不是身份验证协议时无效。</span><span class="sxs-lookup"><span data-stu-id="e080f-364">This property has no effect when NTLM is not the authentication protocol.</span></span> <span data-ttu-id="e080f-365">当指定为身份验证协议协商时，此属性会影响才 NTLM 进行身份验证使用的实际协议。</span><span class="sxs-lookup"><span data-stu-id="e080f-365">When Negotiate is specified as the authentication protocol, this property has an effect only if NTLM is the actual protocol used for authentication.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e080f-366">此属性设置为时`true`提高性能，因为<xref:System.Net.HttpListener>不发送其他 NTLM 身份验证质询，则安全风险中不要求所有请求都提供身份验证信息。</span><span class="sxs-lookup"><span data-stu-id="e080f-366">While setting this property to `true` increases performance because the <xref:System.Net.HttpListener> does not send additional NTLM authentication challenges, there is a security risk in not requiring all requests to provide authentication information.</span></span> <span data-ttu-id="e080f-367">必须确定为提高性能冒此风险是否值得。</span><span class="sxs-lookup"><span data-stu-id="e080f-367">You must determine whether the increase in performance is worth this risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e080f-368">下面的代码示例演示如何设置此属性。</span><span class="sxs-lookup"><span data-stu-id="e080f-368">The following code example demonstrates setting this property.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e080f-369">此对象已关闭。</span><span class="sxs-lookup"><span data-stu-id="e080f-369">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>