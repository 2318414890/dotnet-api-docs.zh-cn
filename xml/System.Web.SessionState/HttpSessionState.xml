<Type Name="HttpSessionState" FullName="System.Web.SessionState.HttpSessionState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ae4ca9a4670ae745ae7f68a9bf24402e4ec78440" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30550541" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpSessionState : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpSessionState extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.SessionState.HttpSessionState" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpSessionState&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpSessionState sealed : System::Collections::ICollection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供对会话状态值以及会话级别设置和生存期管理方法的访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 提供了会话状态管理，使您可以存储与唯一的浏览器会话关联跨多个请求的信息。 你可以存储引用按密钥名称或数字索引的值的集合。 对会话的值和功能的访问是使用<xref:System.Web.SessionState.HttpSessionState>类，该类可通过访问<xref:System.Web.HttpContext.Session%2A>属性的当前<xref:System.Web.HttpContext>，或<xref:System.Web.UI.Page.Session%2A>属性<xref:System.Web.UI.Page>。  
  
 会话数据点使用的唯一标识符的特定浏览器会话是关联。 默认情况下，此标识符存储在非过期的会话 cookie 在浏览器中，但你还可以配置你的应用程序，可以通过设置在 URL 中存储的会话标识符`cookieless`属性设为`true`或<xref:System.Web.HttpCookieMode.UseUri>元素中应用程序配置中。 你可以确定是否 cookie 支持的浏览器通过指定的值的 ASP.NET<xref:System.Web.HttpCookieMode.UseDeviceProfile>为`cookieless`属性。 你还可以确定是否启用 cookie 的浏览器通过指定的值的 ASP.NET<xref:System.Web.HttpCookieMode.AutoDetect>为`cookieless`属性。 如果支持 cookie，则当<xref:System.Web.HttpCookieMode.UseDeviceProfile>指定，或时，将启用<xref:System.Web.HttpCookieMode.AutoDetect>指定，则标识符将存储在一个 cookie，否则为该会话将在 URL 中存储的会话标识符。  
  
 会话将会启动过程的第一个请求和会话值将保持不变，只要新请求发出者是浏览器中指定的分钟数之前<xref:System.Web.SessionState.HttpSessionState.Timeout%2A>属性传递。 当新的会话开始时，会话<xref:System.Web.SessionState.SessionStateModule.Start>引发事件。 你可以使用此事件以执行任何额外工作开头的会话，例如设置会话值的默认值。 当会话超时时，<xref:System.Web.SessionState.HttpSessionState.Abandon%2A>调用方法时，或 ASP.NET 应用程序关闭，会话<xref:System.Web.SessionState.SessionStateModule.End>引发事件。 此事件可用于执行任何必要的清除。 <xref:System.Web.SessionState.SessionStateModule.End>引发事件时，才会话状态`mode`设置为<xref:System.Web.SessionState.SessionStateMode.InProc>。  
  
 若要提高性能，使用 cookie 的会话不分配会话存储数据实际存储到之前<xref:System.Web.UI.Page.Session%2A>对象。 有关更多信息，请参见 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 属性。  
  
 会话状态不会保留跨 ASP.NET 应用程序边界。 如果浏览器导航到另一个应用程序，则会话信息不可用的新应用。  
  
 默认情况下，会话值存储在 Web 服务器上的内存。 此外可以在 SQL Server 数据库、 ASP.NET 状态服务器或自定义服务器存储会话值。 这使你来保留在其中的 ASP.NET 或 IIS 进程或 ASP.NET 应用程序重启的情况下的会话值并在 Web 场中的所有服务器提供会话值。 通过设置配置此行为`mode`属性设为有效<xref:System.Web.SessionState.SessionStateMode>在应用程序配置的元素中的值。 有关详细信息，请参阅[会话状态模式](http://msdn.microsoft.com/library/0bb0a3a3-650f-4c47-a0c5-b08b9b591bb4)。  
  
 为会话状态的替代项包括应用程序状态 (请参阅<xref:System.Web.HttpApplication.Application%2A>属性) 和 ASP.NET 缓存 (请参阅<xref:System.Web.Caching>命名空间)，可由 ASP.NET 应用程序的所有用户访问哪些应用商店变量; ASP.NET 配置文件 (请参阅<xref:System.Web.Profile>命名空间)，该用户将值保留在数据存储区不会过期它们使用超时;ASP.NET <xref:System.Web.UI.WebControls?displayProperty=nameWithType>，其中保留控件中的值<xref:System.Web.UI.Control.ViewState%2A>;<xref:System.Web.HttpResponse.Cookies%2A>;<xref:System.Web.HttpRequest.QueryString%2A>属性; 和 HTML 窗体上的字段，可从 HTTP`POST`使用<xref:System.Web.HttpRequest.Form%2A>集合。 有关会话状态和其他状态管理备选项之间的差异的详细信息，请参阅[ASP.NET 状态管理建议](http://msdn.microsoft.com/library/af79fa0d-4bc8-47a6-9915-d8e355bfb732)。  
  
   
  
## Examples  
 下面的代码示例设置，并从会话状态中检索值。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[HttpSessionState#30](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/session2cs.aspx#30)]
 [!code-aspx-vb[HttpSessionState#30](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/session2vb.aspx#30)]  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Web.Profile" />
    <altmember cref="N:System.Web.Caching" />
  </Docs>
  <Members>
    <Member MemberName="Abandon">
      <MemberSignature Language="C#" Value="public void Abandon ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abandon() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Abandon" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abandon ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abandon();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取消当前会话。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一次<xref:System.Web.SessionState.HttpSessionState.Abandon%2A>调用方法、 当前会话不再有效，可以启动新会话。 <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> 导致<xref:System.Web.SessionState.SessionStateModule.End>引发事件。 一个新<xref:System.Web.SessionState.SessionStateModule.Start>将在下一个请求上引发事件。  
  
 默认情况下，正在回收放弃或已过期的会话的会话标识符。 也就是说，如果发出请求的过期或已放弃的会话中包括的会话标识符，将启动新的会话使用相同的会话标识符。 你可以通过设置来禁用这`regenerateExpiredSessionId`到的配置元素的属性`true`。 有关详细信息，请参阅[会话标识符](http://msdn.microsoft.com/library/146ca206-d151-4f2e-a548-bcca05ccf0cb)。  
  
 <xref:System.Web.SessionState.SessionStateModule.End>支持事件时，才<xref:System.Web.SessionState.HttpSessionState.Mode%2A>属性设置为<xref:System.Web.SessionState.SessionStateMode.InProc>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">要添加到会话状态集合的项的名称。</param>
        <param name="value">要添加到会话状态集合的项的值。</param>
        <summary>向会话状态集合添加一个新项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`name`参数引用现有的会话状态项，现有项，将覆盖具有指定`value`。  
  
   
  
## Examples  
 下面的示例演示如何使用在会话状态中存储值<xref:System.Web.SessionState.HttpSessionState.Add%2A>方法。 它还演示如何通过在会话状态中移除值<xref:System.Web.SessionState.HttpSessionState.Remove%2A>方法。 A<xref:System.Web.UI.WebControls.Repeater>控件用于在网页上显示的内容会话状态。 <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A>方法用于循环访问会话状态集合并填充<xref:System.Web.UI.WebControls.Repeater>控件。  
  
> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-aspx-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从会话状态集合中删除所有键和值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CodePage">
      <MemberSignature Language="C#" Value="public int CodePage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CodePage" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.CodePage" />
      <MemberSignature Language="VB.NET" Value="Public Property CodePage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CodePage { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前会话的字符集标识符。</summary>
        <value>当前会话的字符集标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 字符集 （代码页） 用于解释多字节字符数据，确定字符值，并因此排序顺序。 代码页设置仅适用于多字节字符数据，而不是 Unicode 字符数据。  
  
 这<xref:System.Web.SessionState.IHttpSessionState.CodePage%2A>以便兼容 ASP 的早期版本仅提供属性。 如果你不需要为了保持向后的兼容性 ASP 页，使用<xref:System.Web.HttpResponse.ContentEncoding%2A>属性改为。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contents">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.HttpSessionState Contents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.SessionState.HttpSessionState Contents" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Contents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Contents As HttpSessionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::SessionState::HttpSessionState ^ Contents { System::Web::SessionState::HttpSessionState ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.HttpSessionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对当前会话状态对象的引用。</summary>
        <value>当前的 <see cref="T:System.Web.SessionState.HttpSessionState" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.SessionState.HttpSessionState.Contents%2A>属性提供为了与 ASP 的早期版本兼容。  
  
   
  
## Examples  
 下面的代码示例列出项名称和值中<xref:System.Web.SessionState.HttpSessionState.Contents%2A>属性。  
  
 [!code-csharp[HttpSessionState#9](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/snippetscs.aspx#9)]
 [!code-vb[HttpSessionState#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/snippetsvb.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieMode">
      <MemberSignature Language="C#" Value="public System.Web.HttpCookieMode CookieMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.HttpCookieMode CookieMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.CookieMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CookieMode As HttpCookieMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpCookieMode CookieMode { System::Web::HttpCookieMode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否为无 Cookie 会话配置应用程序。</summary>
        <value>指示是否为无 Cookie 会话配置应用程序的其中一个 <see cref="T:System.Web.HttpCookieMode" /> 值。 默认值为 <see cref="F:System.Web.HttpCookieMode.UseCookies" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A>是`true`、<xref:System.Web.SessionState.HttpSessionState.CookieMode%2A>属性返回<xref:System.Web.HttpCookieMode.UseUri>; 否则为<xref:System.Web.SessionState.HttpSessionState.CookieMode%2A>属性返回<xref:System.Web.HttpCookieMode.UseCookies>。  
  
   
  
## Examples  
 下面的代码示例设置`cookieless`会话属性设置为`true`Web.config 文件中。 对于此示例应用程序配置，<xref:System.Web.SessionState.HttpSessionState.CookieMode%2A>属性将返回<xref:System.Web.HttpCookieMode.UseUri>。  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Array" />，它接收会话值。</param>
        <param name="index">
          <c>array</c> 中从零开始的索引，从该位置开始复制。</param>
        <summary>从数组中指定索引处开始，将会话状态值集合复制到一维数组。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取会话状态集合中的项数。</summary>
        <value>集合中项的数目。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个枚举器，它可用于读取当前会话中的所有会话状态变量名称。</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" /> 可以循环访问会话状态集合中的变量名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用在会话状态中存储值<xref:System.Web.SessionState.HttpSessionState.Add%2A>方法。 它还演示如何通过在会话状态中移除值<xref:System.Web.SessionState.HttpSessionState.Remove%2A>方法。 A<xref:System.Web.UI.WebControls.Repeater>控件用于在网页上显示的会话状态的内容。 <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A>方法用于循环访问会话状态集合并填充<xref:System.Web.UI.WebControls.Repeater>控件。  
  
 [!code-aspx-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-aspx-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCookieless">
      <MemberSignature Language="C#" Value="public bool IsCookieless { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCookieless" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsCookieless" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCookieless As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCookieless { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示会话 ID 是嵌入在 URL 中还是存储在 HTTP Cookie 中。</summary>
        <value>
          如果会话嵌入在 URL 中，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 唯一地标识与每个浏览器会话。 默认情况下，会话的唯一标识符存储在浏览器中的永不过期会话 cookie。 你可以指定的会话标识符不会存储在一个 cookie 设置`cookieless`属性设为`true`配置元素中。  
  
> [!NOTE]
>  若要提高你的应用程序的安全性，你的应用程序应允许的用户注销，则应在哪个点调用<xref:System.Web.SessionState.HttpSessionState.Abandon%2A>方法。 这减少了潜在不需要在 URL 中使用的唯一标识符检索存储在用户的会话中的私有数据源。  
  
 ASP.NET 通过自动将唯一的会话 ID 插入到该页面的 URL 维护无 cookie 会话状态。 例如，ASP.NET 可以包括唯一的会话 ID lit3py55t21z5v55vlm25s55 被修改以下 URL:  
  
```  
http://www.example.com/(S(4danlfat035muve4g0mvgfrr))/orderform.aspx  
```  
  
 ASP.NET 修改通过在发送到浏览器的每一页之前的链接中嵌入会话 ID 值中所有请求的页面包含的链接。 只要用户遵循站点提供的链接的路径，将保持会话状态。 但是，如果用户代理重写 URL，将会丢失会话状态实例。  
  
 之后的斜杠之后的应用程序名称和任何剩余的文件或虚拟目录标识符之前，将在 URL 中嵌入会话 ID。 这使 ASP.NET 可以在涉及之前解决应用程序名称<xref:System.Web.SessionState.SessionStateModule>在请求中。  
  
 默认情况下，无 cookie 会话中使用的会话标识符都是回收。 也就是说，如果已过期的会话 id 请求时，新的会话使用启动请求提供的会话 ID。 此行为可能导致不需要共享会话数据，当一个链接，以包含无 cookie 会话 ID 与共享多个浏览器，可能是通过搜索引擎或其他程序。 你可以减少通过禁用会话标识符的回收共享的多个客户端的会话数据的可能性。 若要执行此操作，将设置`regenerateExpiredSessionId`到的配置元素的属性`true`。 这将导致新的会话 ID 正在生成时无 cookie 会话请求替换过期的会话 id。 请注意，如果过期的会话 id 发出的请求使用 HTTP`POST`方法，然后发送的所有数据都将丢失时`regenerateExpiredSessionId`是`true`，如 ASP.NET 执行重定向，以确保浏览器在 URL 中有新的会话标识符。  
  
> [!NOTE]
>  虽然设置`regenerateExpiredSessionId`属性设为`true`减少了可能性不需要共享的会话数据，它不会保护对通过获取获得对另一个用户的会话的访问不需要源<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>值和其包括在对服务器请求。 如果要在会话状态中存储私有或敏感信息，建议使用 SSL 进行加密的浏览器和包括的服务器之间的任何通信<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>。  
  
   
  
## Examples  
 下面的代码示例设置`cookieless`会话属性设置为 true 的 Web.config 文件中。  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      regenerateExpiredSessionId="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNewSession">
      <MemberSignature Language="C#" Value="public bool IsNewSession { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNewSession" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsNewSession" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNewSession As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNewSession { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示会话是否是与当前请求一起创建的。</summary>
        <value>
          如果会话是与当前请求一起创建的，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示会话是否为只读。</summary>
        <value>
          如果会话为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示对会话状态值的集合的访问是否是同步（线程安全）的。</summary>
        <value>
          如果对该集合的访问是同步的（线程安全），则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取或设置个别会话值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">会话值的数字索引。</param>
        <summary>按数字索引获取或设置会话值。</summary>
        <value>存储在指定索引处的会话状态值；如果该项不存在，则为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string name] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ name); void set(System::String ^ name, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">会话值的键名称。</param>
        <summary>按名称获取或设置会话值。</summary>
        <value>具有指定名称的会话状态值；如果该项不存在，则为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameObjectCollectionBase/KeysCollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As NameObjectCollectionBase.KeysCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameObjectCollectionBase::KeysCollection ^ Keys { System::Collections::Specialized::NameObjectCollectionBase::KeysCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取存储在会话状态集合中所有值的键的集合。</summary>
        <value>包含所有会话键的 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前会话的区域设置标识符 (LCID)。</summary>
        <value>指定当前会话的区域性的 <see cref="T:System.Globalization.CultureInfo" /> 实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.SessionState.HttpSessionState.LCID%2A>以便兼容 ASP 的早期版本仅提供属性。 如果你不需要为了保持向后的兼容性 ASP 页，使用<xref:System.Globalization.CultureInfo.LCID%2A>属性改为。  
  
 ASP.NET 不会在会话状态中存储的区域设置标识符。 <xref:System.Web.SessionState.HttpSessionState.LCID%2A>属性访问<xref:System.Globalization.CultureInfo.LCID%2A>属性来获取和设置的标识符。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.SessionStateMode Mode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.SessionState.SessionStateMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Mode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mode As SessionStateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::SessionState::SessionStateMode Mode { System::Web::SessionState::SessionStateMode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.SessionStateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前会话状态模式。</summary>
        <value>
          <see cref="T:System.Web.SessionState.SessionStateMode" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何配置用于服务器信息<xref:System.Web.SessionState.SessionStateMode.StateServer>或<xref:System.Web.SessionState.SessionStateMode.SQLServer>会话状态存储，请参阅[ASP.NET 会话状态概述](http://msdn.microsoft.com/library/6d60d381-6521-4e1d-9089-da6464f2a9bc)。  
  
   
  
## Examples  
 下面的代码示例设置`mode`会话属性设置为<xref:System.Web.SessionState.SessionStateMode.SQLServer>Web.config 文件中。 对于 SQL Server 会话模式，`sqlConnectionString`属性也是必填。  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="SQLServer"  
      sqlConnectionString="Data Source=localhost;Integrated Security=SSPI"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要从会话状态集合中删除的项的名称。</param>
        <summary>从会话状态集合中删除某项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果会话状态集合不包含具有指定的元素`name`，集合保持不变。 不引发异常。  
  
   
  
## Examples  
 下面的示例演示如何使用在会话状态中存储值<xref:System.Web.SessionState.HttpSessionState.Add%2A>方法。 它还演示如何通过在会话状态中移除值<xref:System.Web.SessionState.HttpSessionState.Remove%2A>方法。 A<xref:System.Web.UI.WebControls.Repeater>控件用于在网页上显示的会话状态的内容。 <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A>方法用于循环访问会话状态集合并填充<xref:System.Web.UI.WebControls.Repeater>控件。  
  
 [!code-aspx-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-aspx-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.RemoveAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从会话状态集合中删除所有键和值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.SessionState.HttpSessionState.RemoveAll%2A> 执行与相同的功能<xref:System.Web.SessionState.HttpSessionState.Clear%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要从会话状态集合中删除的项的索引。</param>
        <summary>删除会话状态集合中指定索引处的项。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小于零。  
  
 \- 或 -  
  
 <paramref name="index" /> 等于或大于 <see cref="P:System.Web.SessionState.HttpSessionState.Count" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SessionID">
      <MemberSignature Language="C#" Value="public string SessionID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SessionID" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.SessionID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SessionID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SessionID { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取会话的唯一标识符。</summary>
        <value>会话的唯一标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>属性用于唯一标识与服务器上的会话数据的浏览器。 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>值是随机由 ASP.NET 生成并存储在浏览器中的永不过期会话 cookie。 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>值然后会在具有 ASP.NET 应用程序的每个请求的 cookie 发送。  
  
 如果你想要禁用使用 ASP.NET 应用程序中的 cookie 和仍使用的会话状态，您可以配置你应用程序，可以通过设置 URL 而不是一个 cookie 中存储的会话标识符`cookieless`配置的属性元素`true`，或<xref:System.Web.HttpCookieMode.UseUri>，你的应用程序的 Web.config 文件中。 你可以确定是否 cookie 支持的浏览器通过指定的值的 ASP.NET<xref:System.Web.HttpCookieMode.UseDeviceProfile>为`cookieless`属性。 你还可以确定是否启用 cookie 的浏览器通过指定的值的 ASP.NET<xref:System.Web.HttpCookieMode.AutoDetect>为`cookieless`属性。 如果支持 cookie，则当<xref:System.Web.HttpCookieMode.UseDeviceProfile>指定，或时，将启用<xref:System.Web.HttpCookieMode.AutoDetect>指定，则标识符将存储在一个 cookie，否则为该会话将在 URL 中存储的会话标识符。 有关更多信息，请参见 <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> 属性。  
  
 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>服务器和浏览器之间以明文形式发送，在一个 cookie 中或在 URL 中。 因此，不需要的源能获得访问权限的会话的另一个用户，通过获取<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>值并将其包括在向服务器请求中。 如果要在会话状态中存储私有或敏感信息，建议使用 SSL 进行加密的浏览器和包括的服务器之间的任何通信<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>。  
  
 在使用基于 cookie 的会话状态时，ASP.NET 不会分配存储之前的会话数据<xref:System.Web.UI.Page.Session%2A>使用对象。 因此，新的会话 ID 为生成每个页请求访问的会话对象之前。 如果你的应用程序为整个会话需要一个静态会话 ID，则可以实现`Session_Start`方法在应用程序的 Global.asax 文件和存储中的数据中<xref:System.Web.UI.Page.Session%2A>对象修复的会话 ID，也可以使用中的另一部分的代码你的应用程序中的数据，从而显式存储<xref:System.Web.UI.Page.Session%2A>对象。  
  
 如果你的应用程序使用无 cookie 会话状态，会话 ID 的第一个的页视图上生成，并且会保留为整个会话。  
  
   
  
## Examples  
 下面的代码示例演示配置会话状态用于无 cookie 会话标识符的 Web.config 文件。 有关更多信息，请参见 <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> 属性。  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      cookieless="true"  
      regenerateExpiredSessionId="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticObjects">
      <MemberSignature Language="C#" Value="public System.Web.HttpStaticObjectsCollection StaticObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpStaticObjectsCollection StaticObjects" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.StaticObjects" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StaticObjects As HttpStaticObjectsCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpStaticObjectsCollection ^ StaticObjects { System::Web::HttpStaticObjectsCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpStaticObjectsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由 ASP.NET 应用程序文件 Global.asax 中的 <see langword="&lt;object Runat=&quot;Server&quot; Scope=&quot;Session&quot;/&gt;" /> 标记声明的对象的集合。</summary>
        <value>一个 <see cref="T:System.Web.HttpStaticObjectsCollection" />，它包含在 Global.asax 文件中声明的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果页面上的对象不支持序列化和<xref:System.Web.SessionState.HttpSessionState.Mode%2A>是进程外 (<xref:System.Web.SessionState.SessionStateMode.SQLServer>或<xref:System.Web.SessionState.SessionStateMode.StateServer>)，该对象将不会创建，并且将不会添加到此集合。  
  
 <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A>属性提供为了与 ASP 的早期版本兼容。  
  
   
  
## Examples  
 下面的代码示例列表`id`和中的对象的对象类型<xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A>集合。  
  
 [!code-csharp[HttpSessionState#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/snippetscs.aspx#10)]
 [!code-vb[HttpSessionState#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/snippetsvb.aspx#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，可使用该对象同步会话状态值的集合的访问权限。</summary>
        <value>可用于同步集合访问的对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Timeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取并设置在会话状态提供程序终止会话之前各请求之间所允许的时间（以分钟为单位）。</summary>
        <value>超时时间（以分钟为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.SessionState.HttpSessionState.Timeout%2A>属性可以在应用程序中使用的 Web.config 文件中设置`timeout`属性的配置元素，也可以设置<xref:System.Web.SessionState.HttpSessionState.Timeout%2A>直接使用应用程序代码的属性值。  
  
 <xref:System.Web.SessionState.HttpSessionState.Timeout%2A>属性不能设置为一个值大于 525600 分钟 （1 年）。 默认值为 20 分钟。  
  
   
  
## Examples  
 下面的代码示例设置`timeout`到 30 分钟的 Web.config 文件中的会话属性。  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>