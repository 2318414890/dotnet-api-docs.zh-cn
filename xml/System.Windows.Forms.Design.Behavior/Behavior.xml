<Type Name="Behavior" FullName="System.Windows.Forms.Design.Behavior.Behavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="506fe7fb1a03e80996ae29e95e579fa2f1062111" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30630261" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Behavior" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Behavior extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.Behavior.Behavior" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Behavior" />
  <TypeSignature Language="C++ CLI" Value="public ref class Behavior abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示由 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 管理的 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类可以扩展以开发任何类型的用户界面行为，包括选择、 拖动和调整大小行为。  
  
 有关详细信息，请参阅[行为服务概述](http://msdn.microsoft.com/library/7c60cc41-4324-46b5-b444-b39eda7cb33f)。  
  
> [!NOTE]
>  你<xref:System.Windows.Forms.Design.Behavior.Behavior>类型必须与关联<xref:System.Windows.Forms.Design.Behavior.Glyph>类型。 不支持独立于标志符号的行为。  
  
   
  
## Examples  
 下面的代码示例演示如何创建您自己的类基于<xref:System.Windows.Forms.Design.Behavior.Behavior>响应用户单击的类。 此代码示例摘自更大的示例为提供<xref:System.Windows.Forms.Design.Behavior.BehaviorService>类。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
    <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
    <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Behavior ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Behavior();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何初始化 <xref:System.Windows.Forms.Design.Behavior.Behavior> 类的新实例。 此代码示例摘自更大的示例为提供<xref:System.Windows.Forms.Design.Behavior.BehaviorService>类。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#7)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Behavior (bool callParentBehavior, System.Windows.Forms.Design.Behavior.BehaviorService behaviorService);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool callParentBehavior, class System.Windows.Forms.Design.Behavior.BehaviorService behaviorService) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.#ctor(System.Boolean,System.Windows.Forms.Design.Behavior.BehaviorService)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Behavior(bool callParentBehavior, System::Windows::Forms::Design::Behavior::BehaviorService ^ behaviorService);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callParentBehavior" Type="System.Boolean" />
        <Parameter Name="behaviorService" Type="System.Windows.Forms.Design.Behavior.BehaviorService" />
      </Parameters>
      <Docs>
        <param name="callParentBehavior">
          如果应该调用父行为（如果存在），则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="behaviorService">要使用的 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />。</param>
        <summary>用给定的 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 初始化 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 父行为是由维护行为堆栈上的下一步行为<xref:System.Windows.Forms.Design.Behavior.BehaviorService>。 如果`callParentBehavior`参数是`true`，则`behaviorService`参数不能`null`。  
  
 `callParentBehavior` 指示是否基<xref:System.Windows.Forms.Design.Behavior.Behavior>类应调用的父行为，，然后允许<xref:System.Windows.Forms.Design.Behavior.BehaviorService>选择正确的父行为。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callParentBehavior" /> 为 <see langword="true" /> 且 <paramref name="behaviorService" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Cursor Cursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.Behavior.Behavior.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Cursor ^ Cursor { System::Windows::Forms::Cursor ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取应为此行为显示的光标。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.Cursor" /> 表示应为此行为显示的光标。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableAllCommands">
      <MemberSignature Language="C#" Value="public virtual bool DisableAllCommands { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisableAllCommands" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisableAllCommands As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool DisableAllCommands { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否应该禁用 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 对象。</summary>
        <value>
          <see langword="true" /> 如果所有<see cref="T:System.ComponentModel.Design.MenuCommand" />设计器接收的对象应具有状态设置为<c>已启用 = false</c>时这<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />活动; 否则为<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A`true`值<xref:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands%2A>属性指示到<xref:System.Windows.Forms.Design.Behavior.BehaviorService>，所有<xref:System.ComponentModel.Design.MenuCommand>设计器接收的对象应具有其状态已禁用此行为处于活动状态时。  
  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands%2A>属性与结合工作<xref:System.Windows.Forms.Design.Behavior.Behavior.FindCommand%2A>方法，以便你可以自定义标志符号和行为之间的交互。 下表汇总了对的调用的结果<xref:System.Windows.Forms.Design.Behavior.Behavior.FindCommand%2A>为特定<xref:System.ComponentModel.Design.MenuCommand>。  
  
||<xref:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands%2A> 为 `true`|<xref:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands%2A> 为 `false`|  
|-|-|-|  
|命中测试的标志符号已分配的行为|如果<xref:System.ComponentModel.Design.MenuCommand>具有指定`command ID`中找到<xref:System.ComponentModel.Design.IMenuCommandService>，则该<xref:System.ComponentModel.Design.MenuCommand>禁用和返回。 否则将返回 `null`。|<xref:System.ComponentModel.Design.MenuCommandService.FindCommand%2A> 对该行为调用和，如果找到，则该行为的<xref:System.ComponentModel.Design.MenuCommand>返回。 否则为结果<xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A?displayProperty=nameWithType>具有指定`command ID`返回。|  
|命中测试的标志符号已没有分配的行为|结果<xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A?displayProperty=nameWithType>具有指定`command ID`返回。|结果<xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A?displayProperty=nameWithType>具有指定`command ID`返回。|  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>默认实现始终返回 <see langword="false" />。</para>
        </block>
        <altmember cref="Overload:System.ComponentModel.Design.MenuCommandService.FindCommand" />
        <altmember cref="M:System.Windows.Forms.Design.Behavior.Behavior.FindCommand(System.ComponentModel.Design.CommandID)" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.Design.MenuCommand FindCommand (System.ComponentModel.Design.CommandID commandId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.MenuCommand FindCommand(class System.ComponentModel.Design.CommandID commandId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.FindCommand(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::Design::MenuCommand ^ FindCommand(System::ComponentModel::Design::CommandID ^ commandId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandId" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandId">
          <see cref="T:System.ComponentModel.Design.CommandID" /> 对象。</param>
        <summary>截获命令。</summary>
        <returns>
          <see cref="T:System.ComponentModel.Design.MenuCommand" />。 默认情况下，<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.FindCommand(System.ComponentModel.Design.CommandID)" /> 返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.FindCommand%2A>方法调用从<xref:System.Windows.Forms.Design.Behavior.BehaviorService>。 它提供了有机会<xref:System.Windows.Forms.Design.Behavior.Behavior>要返回其自己的自定义<xref:System.ComponentModel.Design.MenuCommand>，从而截获此消息。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="public virtual void OnDragDrop (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDragDrop(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragDrop(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDragDrop (g As Glyph, e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDragDrop(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">一个 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 对象，拖放行为对其调用。</param>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>允许自定义的拖放行为。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>您可以重写<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragDrop(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />方法，以便<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />可以指定其自己拖放的规则。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="public virtual void OnDragEnter (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDragEnter(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragEnter(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDragEnter (g As Glyph, e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDragEnter(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">一个 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />，拖入行为对其调用。</param>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>允许自定义的拖入行为。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>您可以重写<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragEnter(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />方法，以便<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />可以指定其自己的拖入规则。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="public virtual void OnDragLeave (System.Windows.Forms.Design.Behavior.Glyph g, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDragLeave(class System.Windows.Forms.Design.Behavior.Glyph g, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragLeave(System.Windows.Forms.Design.Behavior.Glyph,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDragLeave (g As Glyph, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDragLeave(System::Windows::Forms::Design::Behavior::Glyph ^ g, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="g">一个 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />，拖离行为对其调用。</param>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>允许自定义的拖离行为。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>您可以重写<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragLeave(System.Windows.Forms.Design.Behavior.Glyph,System.EventArgs)" />方法，以便<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />可以指定自己拖离规则。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="public virtual void OnDragOver (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDragOver(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragOver(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDragOver (g As Glyph, e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDragOver(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">一个 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />，拖过行为对其调用。</param>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>允许自定义的拖过行为。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>您可以重写<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragOver(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)" />方法，以便<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />可以指定其自己拖过的规则。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="public virtual void OnGiveFeedback (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnGiveFeedback(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnGiveFeedback (g As Glyph, e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnGiveFeedback(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">一个 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />，拖放行为对其调用。</param>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" />。</param>
        <summary>允许自定义的拖放反馈行为。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>您可以重写<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnGiveFeedback(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.GiveFeedbackEventArgs)" />方法，以便<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />可以指定其自己拖放的规则。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnLoseCapture">
      <MemberSignature Language="C#" Value="public virtual void OnLoseCapture (System.Windows.Forms.Design.Behavior.Glyph g, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLoseCapture(class System.Windows.Forms.Design.Behavior.Glyph g, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnLoseCapture(System.Windows.Forms.Design.Behavior.Glyph,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnLoseCapture (g As Glyph, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnLoseCapture(System::Windows::Forms::Design::Behavior::Glyph ^ g, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="g">一个 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />，拖放行为对其调用。</param>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>在丢失鼠标捕获时由装饰器窗口调用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行为可以通过将本身推送到行为堆栈请求通过行为服务鼠标捕获<xref:System.Windows.Forms.Design.Behavior.BehaviorService.PushCaptureBehavior%2A>方法。 如果情况如此，它将通过通知<xref:System.Windows.Forms.Design.Behavior.Behavior.OnLoseCapture%2A>方法捕获时丢失。 通常行为本身从堆栈中移除这次。 当发生以下操作之一时，捕获将丢失：  
  
-   其他人请求捕获。  
  
-   推送另一个行为。  
  
-   此行为已被移除。  
  
 在每个这些情况下，<xref:System.Windows.Forms.Design.Behavior.Behavior.OnLoseCapture%2A>将对该行为调用。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseDoubleClick (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.MouseButtons button, System.Drawing.Point mouseLoc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseDoubleClick(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Windows.Forms.MouseButtons button, valuetype System.Drawing.Point mouseLoc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseDoubleClick (g As Glyph, button As MouseButtons, mouseLoc As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseDoubleClick(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::MouseButtons button, System::Drawing::Point mouseLoc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
        <Parameter Name="mouseLoc" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <param name="button">一个 <see cref="T:System.Windows.Forms.MouseButtons" /> 值，指示单击了哪个按钮。</param>
        <param name="mouseLoc">发生单击的位置。</param>
        <summary>在任何双击消息进入 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 的装饰器窗口时调用。</summary>
        <returns>
          如果消息已处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>时任何双击消息进入调用方法`WndProc`的修饰工具窗口的<xref:System.Windows.Forms.Design.Behavior.BehaviorService>。 消息首先在这里，传递给最顶层<xref:System.Windows.Forms.Design.Behavior.Behavior>行为堆栈中。 返回`true`从此方法表示该消息已处理通过<xref:System.Windows.Forms.Design.Behavior.Behavior>，不应继续进行处理。 从此处，将消息发送到相应的行为。  
  
   
  
## Examples  
 下面的代码示例演示如何处理双击消息。 有关完整代码列表，请参阅[如何： 扩展的外观和行为的控件在设计模式下](http://msdn.microsoft.com/library/68f85054-2253-47f5-a4f2-3f1ac8c9f27b)。  
  
 [!code-csharp[System.Windows.Forms.Design.Behavior.Glyph.MarginBorderAnchorGlyphs#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.Glyph.MarginBorderAnchorGlyphs/CS/DesignerDemoControl.cs#10)]
 [!code-vb[System.Windows.Forms.Design.Behavior.Glyph.MarginBorderAnchorGlyphs#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.Glyph.MarginBorderAnchorGlyphs/VB/DesignerDemoControl.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseDown (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.MouseButtons button, System.Drawing.Point mouseLoc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseDown(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Windows.Forms.MouseButtons button, valuetype System.Drawing.Point mouseLoc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDown(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseDown (g As Glyph, button As MouseButtons, mouseLoc As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseDown(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::MouseButtons button, System::Drawing::Point mouseLoc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
        <Parameter Name="mouseLoc" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <param name="button">一个 <see cref="T:System.Windows.Forms.MouseButtons" /> 值，指示单击了哪个按钮。</param>
        <param name="mouseLoc">发生单击的位置。</param>
        <summary>在任何鼠标按下消息进入 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 的装饰器窗口时调用。</summary>
        <returns>
          如果消息已处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>方法称为当鼠标按下的任何消息进入`WndProc`的修饰工具窗口的<xref:System.Windows.Forms.Design.Behavior.BehaviorService>。 消息首先在这里，传递给最顶层<xref:System.Windows.Forms.Design.Behavior.Behavior>行为堆栈中。 返回`true`从此方法表示该消息已处理通过<xref:System.Windows.Forms.Design.Behavior.Behavior>，不应继续进行处理。 从此处，将消息发送到相应的行为。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseEnter (System.Windows.Forms.Design.Behavior.Glyph g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseEnter(class System.Windows.Forms.Design.Behavior.Glyph g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseEnter(System.Windows.Forms.Design.Behavior.Glyph)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseEnter (g As Glyph) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseEnter(System::Windows::Forms::Design::Behavior::Glyph ^ g);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <summary>在任何鼠标输入消息进入 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 的装饰器窗口时调用。</summary>
        <returns>
          如果消息已处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>方法称为当任何鼠标输入消息进入`WndProc`的修饰工具窗口的<xref:System.Windows.Forms.Design.Behavior.BehaviorService>。 从此处，将消息发送到相应的行为。  
  
 当鼠标指针的位置是明确替换为其他测试命中<xref:System.Windows.Forms.Design.Behavior.Glyph>比以前的命中测试，这种方法称为上<xref:System.Windows.Forms.Design.Behavior.Behavior>与关联<xref:System.Windows.Forms.Design.Behavior.Glyph>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseHover (System.Windows.Forms.Design.Behavior.Glyph g, System.Drawing.Point mouseLoc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseHover(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Drawing.Point mouseLoc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseHover(System.Windows.Forms.Design.Behavior.Glyph,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseHover (g As Glyph, mouseLoc As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseHover(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Drawing::Point mouseLoc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="mouseLoc" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <param name="mouseLoc">发生悬停的位置。</param>
        <summary>在任何鼠标悬停消息进入 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 的装饰器窗口时调用。</summary>
        <returns>
          如果消息已处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>时任何鼠标悬停消息进入调用方法`WndProc`的修饰工具窗口的<xref:System.Windows.Forms.Design.Behavior.BehaviorService>。 消息首先在这里，传递给最顶层<xref:System.Windows.Forms.Design.Behavior.Behavior>行为堆栈中。 返回`true`从此方法表示该消息已处理通过<xref:System.Windows.Forms.Design.Behavior.Behavior>，不应继续进行处理。 从此处，将消息发送到相应的行为。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseLeave (System.Windows.Forms.Design.Behavior.Glyph g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseLeave(class System.Windows.Forms.Design.Behavior.Glyph g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseLeave(System.Windows.Forms.Design.Behavior.Glyph)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseLeave (g As Glyph) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseLeave(System::Windows::Forms::Design::Behavior::Glyph ^ g);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <summary>在任何鼠标离开消息进入 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 的装饰器窗口时调用。</summary>
        <returns>
          如果消息已处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>时任何鼠标离开消息进入调用方法`WndProc`的修饰工具窗口的<xref:System.Windows.Forms.Design.Behavior.BehaviorService>。 从此处，将消息发送到相应的行为。  
  
 当鼠标指针离开经明确命中测试<xref:System.Windows.Forms.Design.Behavior.Glyph>使用一个有效<xref:System.Windows.Forms.Design.Behavior.Behavior>，会调用此方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseMove (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.MouseButtons button, System.Drawing.Point mouseLoc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseMove(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Windows.Forms.MouseButtons button, valuetype System.Drawing.Point mouseLoc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseMove(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseMove (g As Glyph, button As MouseButtons, mouseLoc As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseMove(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::MouseButtons button, System::Drawing::Point mouseLoc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
        <Parameter Name="mouseLoc" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <param name="button">一个 <see cref="T:System.Windows.Forms.MouseButtons" /> 值，指示单击了哪个按钮。</param>
        <param name="mouseLoc">发生移动的位置。</param>
        <summary>在任何鼠标移动消息进入 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 的装饰器窗口时调用。</summary>
        <returns>
          如果消息已处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>时任何鼠标移动消息进入调用方法`WndProc`的修饰工具窗口的<xref:System.Windows.Forms.Design.Behavior.BehaviorService>。 消息首先在这里，传递给最顶层<xref:System.Windows.Forms.Design.Behavior.Behavior>行为堆栈中。 返回`true`从此方法表示该消息已处理通过<xref:System.Windows.Forms.Design.Behavior.Behavior>，不应继续进行处理。 从此处，将消息发送到相应的行为。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="public virtual bool OnMouseUp (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.MouseButtons button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMouseUp(class System.Windows.Forms.Design.Behavior.Glyph g, valuetype System.Windows.Forms.MouseButtons button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseUp(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnMouseUp (g As Glyph, button As MouseButtons) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool OnMouseUp(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::MouseButtons button);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <param name="button">一个 <see cref="T:System.Windows.Forms.MouseButtons" /> 值，指示单击了哪个按钮。</param>
        <summary>在任何鼠标弹起消息进入 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 的装饰器窗口时调用。</summary>
        <returns>
          如果消息已处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick%2A>时任何鼠标弹起消息进入调用方法`WndProc`的修饰工具窗口的<xref:System.Windows.Forms.Design.Behavior.BehaviorService>。 消息首先在这里，传递给最顶层<xref:System.Windows.Forms.Design.Behavior.Behavior>行为堆栈中。 返回`true`从此方法表示该消息已处理通过<xref:System.Windows.Forms.Design.Behavior.Behavior>，不应继续进行处理。 从此处，将消息发送到相应的行为。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="public virtual void OnQueryContinueDrag (System.Windows.Forms.Design.Behavior.Glyph g, System.Windows.Forms.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.Forms.Design.Behavior.Glyph g, class System.Windows.Forms.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Behavior.OnQueryContinueDrag(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnQueryContinueDrag (g As Glyph, e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnQueryContinueDrag(System::Windows::Forms::Design::Behavior::Glyph ^ g, System::Windows::Forms::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Windows.Forms.Design.Behavior.Glyph" />
        <Parameter Name="e" Type="System.Windows.Forms.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />。</param>
        <summary>将此拖放事件从装饰器窗口发送到相应的 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 或经过命中测试的 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>您可以重写<see cref="M:System.Windows.Forms.Design.Behavior.Behavior.OnQueryContinueDrag(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.QueryContinueDragEventArgs)" />方法，以便<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />可以指定其自己拖放的规则。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
  </Members>
</Type>