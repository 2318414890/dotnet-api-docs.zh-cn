<Type Name="Glyph" FullName="System.Windows.Forms.Design.Behavior.Glyph">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e93adb7593fce2a691633fd1cab65f32a1f3b408" /><Meta Name="ms.sourcegitcommit" Value="6089a30c0522e6f43256523e82e94b2ccedfb55b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/04/2019" /><Meta Name="ms.locfileid" Value="59016818" /></Metadata><TypeSignature Language="C#" Value="public abstract class Glyph" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Glyph extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.Behavior.Glyph" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Glyph" />
  <TypeSignature Language="C++ CLI" Value="public ref class Glyph abstract" />
  <TypeSignature Language="F#" Value="type Glyph = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-3.0">
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一个由 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> 管理的用户界面 (UI) 实体。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 唯一目的<xref:System.Windows.Forms.Design.Behavior.Glyph>是画图和点击测试。 一个<xref:System.Windows.Forms.Design.Behavior.Glyph>不具有窗口句柄 (HWND) 所呈现的装饰器窗口控制<xref:System.Windows.Forms.Design.Behavior.BehaviorService>。 每个<xref:System.Windows.Forms.Design.Behavior.Glyph>可以有<xref:System.Windows.Forms.Design.Behavior.Behavior>与之关联。 成功通过命中测试<xref:System.Windows.Forms.Design.Behavior.Glyph>有机会推送一个新的或不同<xref:System.Windows.Forms.Design.Behavior.Behavior>到行为堆栈上的<xref:System.Windows.Forms.Design.Behavior.BehaviorService>。  
  
 有关详细信息，请参阅[行为服务概述](https://msdn.microsoft.com/library/7c60cc41-4324-46b5-b444-b39eda7cb33f)。  
  
   
  
## Examples  
 下面的示例演示如何创建您自己<xref:System.Windows.Forms.Design.Behavior.Glyph>基于类<xref:System.Windows.Forms.Design.Behavior.Behavior>与之关联。 此代码示例是为提供一个更大示例的一部分<xref:System.Windows.Forms.Design.Behavior.BehaviorService>类。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
    <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
    <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
    <related type="Article" href="https://msdn.microsoft.com/library/7c60cc41-4324-46b5-b444-b39eda7cb33f">行为服务概述</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Glyph (System.Windows.Forms.Design.Behavior.Behavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Design.Behavior.Behavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Glyph.#ctor(System.Windows.Forms.Design.Behavior.Behavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Glyph(System::Windows::Forms::Design::Behavior::Behavior ^ behavior);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Design.Behavior.Glyph : System.Windows.Forms.Design.Behavior.Behavior -&gt; System.Windows.Forms.Design.Behavior.Glyph" Usage="new System.Windows.Forms.Design.Behavior.Glyph behavior" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="behavior" Type="System.Windows.Forms.Design.Behavior.Behavior" />
      </Parameters>
      <Docs>
        <param name="behavior">与 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 关联的 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。 可以为 <see langword="null" />。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何初始化的新实例<xref:System.Windows.Forms.Design.Behavior.Glyph>类。 此代码示例是为提供一个更大示例的一部分<xref:System.Windows.Forms.Design.Behavior.BehaviorService>类。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
      </Docs>
    </Member>
    <Member MemberName="Behavior">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Design.Behavior.Behavior Behavior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Design.Behavior.Behavior Behavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.Behavior.Glyph.Behavior" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Behavior As Behavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Design::Behavior::Behavior ^ Behavior { System::Windows::Forms::Design::Behavior::Behavior ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Behavior : System.Windows.Forms.Design.Behavior.Behavior" Usage="System.Windows.Forms.Design.Behavior.Glyph.Behavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Design.Behavior.Behavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 关联的 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</summary>
        <value>与 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 关联的 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />，或者，如果不存在任何行为，则为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle Bounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.Behavior.Glyph.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.Bounds : System.Drawing.Rectangle" Usage="System.Windows.Forms.Design.Behavior.Glyph.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 的边界。</summary>
        <value>一个 <see cref="T:System.Drawing.Rectangle" />，表示 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 的边界。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何重写<xref:System.Windows.Forms.Design.Behavior.Glyph.Bounds%2A>若要创建具有特定尺寸和位置的标志符号。 此代码示例是为提供一个更大示例的一部分<xref:System.Windows.Forms.Design.Behavior.BehaviorService>类。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#8)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
      </Docs>
    </Member>
    <Member MemberName="GetHitTest">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Forms.Cursor GetHitTest (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.Cursor GetHitTest(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Glyph.GetHitTest(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHitTest (p As Point) As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Windows::Forms::Cursor ^ GetHitTest(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="abstract member GetHitTest : System.Drawing.Point -&gt; System.Windows.Forms.Cursor" Usage="glyph.GetHitTest p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">要进行命中测试的点。</param>
        <summary>提供命中测试逻辑。</summary>
        <returns>如果 <see cref="T:System.Windows.Forms.Cursor" /> 与 <paramref name="p" /> 关联，则为 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />；否则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Glyph.GetHitTest%2A>方法是`abstract`方法，可强制<xref:System.Windows.Forms.Design.Behavior.Glyph>实现提供命中的测试逻辑。 给定的任何点，如果<xref:System.Windows.Forms.Design.Behavior.Glyph>决定，位置，它将需要返回一个有效的情况下使用涉及<xref:System.Windows.Forms.Cursor>。 否则，返回`null`将导致<xref:System.Windows.Forms.Design.Behavior.BehaviorService>忽略该位置。  
  
   
  
## Examples  
 下面的示例演示如何重写<xref:System.Windows.Forms.Design.Behavior.Glyph.GetHitTest%2A>若要查看该点是否在此标志符号。 此代码示例是为提供一个更大示例的一部分<xref:System.Windows.Forms.Design.Behavior.BehaviorService>类。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#9)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public abstract void Paint (System.Windows.Forms.PaintEventArgs pe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Paint(class System.Windows.Forms.PaintEventArgs pe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Glyph.Paint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Paint (pe As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Paint(System::Windows::Forms::PaintEventArgs ^ pe);" />
      <MemberSignature Language="F#" Value="abstract member Paint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="glyph.Paint pe" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pe" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="pe">包含事件数据的 <see cref="T:System.Windows.Forms.PaintEventArgs" />。</param>
        <summary>提供绘制逻辑。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.Behavior.Glyph.Paint%2A>方法是`abstract`方法，可强制<xref:System.Windows.Forms.Design.Behavior.Glyph>实现提供绘制逻辑。 `pe`参数包含<xref:System.Drawing.Graphics>到装饰器窗口的相关<xref:System.Windows.Forms.Design.Behavior.BehaviorService>。  
  
   
  
## Examples  
 下面的示例演示如何重写<xref:System.Windows.Forms.Design.Behavior.Glyph.Paint%2A>用于绘制标志符号。 此代码示例是为提供一个更大示例的一部分<xref:System.Windows.Forms.Design.Behavior.BehaviorService>类。  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#10)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
      </Docs>
    </Member>
    <Member MemberName="SetBehavior">
      <MemberSignature Language="C#" Value="protected void SetBehavior (System.Windows.Forms.Design.Behavior.Behavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetBehavior(class System.Windows.Forms.Design.Behavior.Behavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Glyph.SetBehavior(System.Windows.Forms.Design.Behavior.Behavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetBehavior(System::Windows::Forms::Design::Behavior::Behavior ^ behavior);" />
      <MemberSignature Language="F#" Value="member this.SetBehavior : System.Windows.Forms.Design.Behavior.Behavior -&gt; unit" Usage="glyph.SetBehavior behavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Windows.Forms.Design.Behavior.Behavior" />
      </Parameters>
      <Docs>
        <param name="behavior">要与该 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 关联的 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</param>
        <summary>更改与 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 关联的 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Windows.Forms.Design.Behavior.Glyph.SetBehavior(System.Windows.Forms.Design.Behavior.Behavior)" />继承的类来更改调用方法<see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />与关联<see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />。</para></block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">如何：在设计模式下扩展控件的外观和行为</related>
      </Docs>
    </Member>
  </Members>
</Type>