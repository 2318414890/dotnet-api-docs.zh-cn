<Type Name="TextPointer" FullName="System.Windows.Documents.TextPointer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d374acbfa59bece9a23ff4841ba74263d0c6fa42" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30630711" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextPointer : System.Windows.Documents.ContentPosition" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextPointer extends System.Windows.Documents.ContentPosition" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.TextPointer" />
  <TypeSignature Language="VB.NET" Value="Public Class TextPointer&#xA;Inherits ContentPosition" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextPointer : System::Windows::Documents::ContentPosition" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Documents.ContentPosition</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示 <see cref="T:System.Windows.Documents.FlowDocument" /> 或 <see cref="T:System.Windows.Controls.TextBlock" /> 中的一个位置。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.TextPointer>类引入了以下术语：  
  
-   位置-本质上就是，<xref:System.Windows.Documents.TextPointer>始终指向*位置*内容中。  请在之间的内容中的字符或之间流内容元素标记此类位置定义的内容的结构。  
  
-   当前位置-因为<xref:System.Windows.Documents.TextPointer>始终指示一个位置，而是因为可以通过执行的操作的许多<xref:System.Windows.Documents.TextPointer>相对于当前指向的位置是<xref:System.Windows.Documents.TextPointer>，因此只需引用指示的位置<xref:System.Windows.Documents.TextPointer>作为*当前位置*。  
  
-   插入位置-*插入位置*是可在该处添加新的内容而不会破坏关联内容的任何语义规则的位置。  在实践中，插入位置位于任意位置内容可能放置一个插入符号的位置。  一个有效的示例<xref:System.Windows.Documents.TextPointer>不的插入位置的位置是相邻两个位置<xref:System.Windows.Documents.Paragraph>标记 (即上, 一段的结束标记和下一段的开始标记之间)。  
  
-   符号-出于<xref:System.Windows.Documents.TextPointer>涉及符号的操作，将以下任一被视为可*符号*:  
  
    -   一个开始标记或结束标记<xref:System.Windows.Documents.TextElement>元素。  
  
    -   A<xref:System.Windows.UIElement>中包含的元素<xref:System.Windows.Documents.InlineUIContainer>或<xref:System.Windows.Documents.BlockUIContainer>。  请注意，此类<xref:System.Windows.UIElement>始终算做一个符号; 任何其他内容或包含的元素<xref:System.Windows.UIElement>不被视为符号。  
  
    -   每个 16 位[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]字符文本内<xref:System.Windows.Documents.Run>元素。  
  
-   文本容器-一个*文本容器*窗体流内容手头的最终边框的元素; 所指示的位置<xref:System.Windows.Documents.TextPointer>始终在范围内的文本容器。  目前，文本容器必须是<xref:System.Windows.Documents.FlowDocument>或<xref:System.Windows.Controls.TextBlock>。  一般来讲，之间的操作<xref:System.Windows.Documents.TextPointer>不支持在不同的文本容器中的实例。  
  
-   文档的文本容器中的内容被称为*文档*，类似于<xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>方法和<xref:System.Windows.Documents.TextPointer.DocumentStart%2A>和<xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>属性。  
  
 <xref:System.Windows.Documents.TextPointer>类旨在促进遍历和操作的内容由[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]流内容元素; 一般情况下，此类元素派生自<xref:System.Windows.Documents.TextElement>。  某些操作，<xref:System.Windows.Documents.TextPointer>促进如下：  
  
-   执行序号比较的第二个指定位置与当前的位置。  请参阅<xref:System.Windows.Documents.TextPointer.CompareTo%2A>方法。  
  
-   确定指定方向中的当前位置到相邻的内容类型。  请参阅<xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>方法和<xref:System.Windows.Documents.TextPointerContext>枚举。  
  
-   获取<xref:System.Windows.Documents.TextElement>的作用域或靠近当前的位置。  请参阅<xref:System.Windows.Documents.Paragraph>和<xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A>方法。  
  
-   获取文本容器的作用域的当前文档。  请参阅 <xref:System.Windows.Documents.TextPointer.Parent%2A> 属性。  
  
-   获取指定的数目的字符之前或之后的当前位置。  请参阅<xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>方法。  
  
-   在当前的位置插入字符的字符串。  请参阅<xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>方法。  
  
-   在内容中找到行边界。  请参阅<xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>方法和<xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>属性。  
  
-   之间进行转换<xref:System.Windows.Documents.TextPointer>位置与符号偏移量为内容。  请参阅<xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>和<xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>方法。  
  
-   执行之间进行转换来的可视命中测试<xref:System.Windows.Documents.TextPointer>位置和一个<xref:System.Windows.Point>表示相对坐标。  
  
-   查找附近的插入位置，或检查当前的位置是否的插入位置。  请参阅<xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>和<xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>方法和<xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A>属性。  
  
 位置和<xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>由<xref:System.Windows.Documents.TextPointer>对象是不可变。  编辑或修改所指示的位置的内容时<xref:System.Windows.Documents.TextPointer>不会更改相对于周围文本; 而是相应地调整的内容从一开始该位置的偏移量以反映新的相对位置中内容。  例如， <xref:System.Windows.Documents.TextPointer> ，该值指示给定的段的开头的位置继续指向该段的开头，即使内容被插入或删除段落之前或之后。  
  
 <xref:System.Windows.Documents.TextPointer>类不提供任何公共构造函数。  实例<xref:System.Windows.Documents.TextPointer>创建通过属性或方法的其他对象 (包括其他<xref:System.Windows.Documents.TextPointer>对象)。 以下列表提供了几个示例的方法和属性创建并将返回<xref:System.Windows.Documents.TextPointer>。  此列表并不详尽:  
  
-   从<xref:System.Windows.Documents.TextRange>:<xref:System.Windows.Documents.TextRange.Start%2A>和<xref:System.Windows.Documents.TextRange.End%2A>。  
  
-   从<xref:System.Windows.Documents.TextElement>: <xref:System.Windows.Documents.TextElement.ContentStart%2A>， <xref:System.Windows.Documents.TextElement.ContentEnd%2A>， <xref:System.Windows.Documents.TextElement.ElementStart%2A>，和<xref:System.Windows.Documents.TextElement.ElementEnd%2A>。  
  
-   从<xref:System.Windows.Controls.TextBlock>（文本容器）： <xref:System.Windows.Controls.TextBlock.ContentStart%2A>， <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>，和<xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>。  
  
-   从<xref:System.Windows.Documents.FlowDocument>（文本容器）： <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>，和 <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>  
  
-   从现有<xref:System.Windows.Documents.TextPointer>: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>， <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>， <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>，和<xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Documents.TextPointer>查找仅在第一个位置<xref:System.Windows.Documents.Run>指定的文本容器中的元素。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_TextPointer1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_textpointer1)]
 [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_textpointer1)]  
  
 下面的示例实现非常简单的查找算法使用<xref:System.Windows.Documents.TextPointer>设施。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_TextPointer2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_textpointer2)]
 [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_textpointer2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Documents.TextRange" />
    <altmember cref="T:System.Windows.Documents.TextPointerContext" />
    <altmember cref="T:System.Windows.Documents.TextElement" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Windows.Documents.TextPointer position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(class System.Windows.Documents.TextPointer position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (position As TextPointer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Windows::Documents::TextPointer ^ position);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定要与当前位置进行比较的位置。</param>
        <summary>对当前 <see cref="T:System.Windows.Documents.TextPointer" /> 和第二个指定 <see cref="T:System.Windows.Documents.TextPointer" /> 所表示位置的顺序进行比较。</summary>
        <returns>如果当前 <see cref="T:System.Windows.Documents.TextPointer" /> 位于 <paramref name="position" /> 之前，则为 –1；如果位置相同，则为 0；如果当前 <see cref="T:System.Windows.Documents.TextPointer" /> 位于 <paramref name="position" /> 之后，则为 +1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值 – 1 指示位置指定由当前<xref:System.Windows.Documents.TextPointer>之前指定的位置`position`。  值为 0 指示所指示的位置相等。  值为正 + 1 表示由当前指定的位置<xref:System.Windows.Documents.TextPointer>由指定的位置之后`position`。  
  
   
  
## Examples  
 下面的示例演示此方法的用法。  在示例中，<xref:System.Windows.Documents.TextPointer.CompareTo%2A>结合使用方法<xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>方法测试是否指定<xref:System.Windows.Documents.TextElement>为空。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getinsertionposition)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="position" /> 指定位于与当前位置相关联的文本容器之外的某个位置。</exception>
        <altmember cref="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteTextInRun">
      <MemberSignature Language="C#" Value="public int DeleteTextInRun (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DeleteTextInRun(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteTextInRun (count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int DeleteTextInRun(int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">从当前位置开始要删除的字符数。 指定正值将删除当前位置之后的字符；指定负值将删除当前位置之前的字符。</param>
        <summary>从当前 <see cref="T:System.Windows.Documents.TextPointer" /> 指示的位置开始删除指定数目的字符。</summary>
        <returns>实际删除的字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定正值，若要删除当前的位置之后的字符 (如<xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType>); 指定负值可删除的当前的位置之前的字符 (如<xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType>)。  
  
 实际删除的字符数可能小于指定的数`count`。  在情况下将发生这种情况其中`count`指定多于存在要删除的多个字符。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在不允许出现文本的位置处调用此方法。</exception>
        <altmember cref="Overload:System.Windows.Documents.TextPointer.GetTextInRun" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DocumentEnd">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer DocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer DocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.DocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentEnd As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ DocumentEnd { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向文本容器中与当前位置相关联的内容的结束位置。</summary>
        <value>一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向文本容器中与当前位置相关联的内容的结束位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.TextPointer.Parent%2A>针对返回<xref:System.Windows.Documents.TextPointer>始终是文本容器 (<xref:System.Windows.Controls.TextBlock>或<xref:System.Windows.Documents.FlowDocument>)，而不是<xref:System.Windows.Documents.TextElement>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.DocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="DocumentStart">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer DocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer DocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.DocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentStart As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ DocumentStart { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向文本容器中与当前位置相关联的内容的开始位置。</summary>
        <value>一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向文本容器中与当前位置相关联的内容的开始位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性返回作为基准位置，从可用来处理到其他位置的相对偏移量的位置。  <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>和<xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>方法提供了一种方法的位置和位置之间进行转换偏移量。  
  
 <xref:System.Windows.Documents.TextPointer.Parent%2A>针对返回<xref:System.Windows.Documents.TextPointer>始终是文本容器 (<xref:System.Windows.Controls.TextBlock>或<xref:System.Windows.Documents.FlowDocument>)，而不是<xref:System.Windows.Documents.TextElement>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.DocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="GetAdjacentElement">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject GetAdjacentElement (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyObject GetAdjacentElement(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjacentElement (direction As LogicalDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyObject ^ GetAdjacentElement(System::Windows::Documents::LogicalDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定搜索相邻元素时的逻辑方向。</param>
        <summary>返回在指定逻辑方向上的边界正好位于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 处的元素（如果有）。</summary>
        <returns>指定 <paramref name="direction" /> 上的相邻元素；或者，如果不存在任何相邻元素，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的元素是通常<xref:System.Windows.Documents.TextElement>。  A<xref:System.Windows.UIElement>时，会返回<xref:System.Windows.Documents.TextPointer>指示的位置位于<xref:System.Windows.Documents.BlockUIContainer>元素或<xref:System.Windows.Documents.InlineUIContainer>元素。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRect">
      <MemberSignature Language="C#" Value="public System.Windows.Rect GetCharacterRect (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect GetCharacterRect(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCharacterRect (direction As LogicalDirection) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Rect GetCharacterRect(System::Windows::Documents::LogicalDirection direction);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定查找内容边框时的逻辑方向。</param>
        <summary>返回在指定逻辑方向上的边界正好位于当前 <see cref="T:System.Windows.Rect" /> 处的内容的边框 (<see cref="T:System.Windows.Documents.TextPointer" />)。</summary>
        <returns>在指定方向上的边界正好位于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 处的内容的边框；或者，如果当前没有可用的有效布局信息，则为 <see cref="P:System.Windows.Rect.Empty" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.TextElement> 边缘出于的此方法不考虑内容。  如果<xref:System.Windows.Documents.TextPointer>位于之前<xref:System.Windows.Documents.TextElement>边缘，则返回值是边界框的下一非<xref:System.Windows.Documents.TextElement>内容按指定的方向。  指定的方向，零宽度中是否存在任何内容<xref:System.Windows.Rect>返回与匹配内容的任何前面高度高度。  
  
 此方法执行的操作取决于有效的布局。  如有必要，此方法会尝试自动重新生成一个有效的布局，然后再继续操作。  重新生成布局可以是一个代价相对较大的操作。  使用<xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>属性来检查是否存在有效布局，然后执行可能会重新生成布局的操作。  有关详细信息，请参阅[布局](~/docs/framework/wpf/advanced/layout.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.HasValidLayout" />
      </Docs>
    </Member>
    <Member MemberName="GetInsertionPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetInsertionPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetInsertionPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertionPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetInsertionPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定搜索最近插入位置时的逻辑方向。</param>
        <summary>返回一个指向指定逻辑方向上的最近插入位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
        <returns>一个指向指定方向上的最近插入位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插入位置是可在该处添加新的内容而不会破坏关联内容的任何语义规则的位置。  在实践中，插入位置位于任意位置内容可能放置一个插入符号的位置。  一个有效的示例<xref:System.Windows.Documents.TextPointer>不的插入位置的位置是相邻两个位置<xref:System.Windows.Documents.Paragraph>标记 (即上, 一段的结束标记和下一段的开始标记之间)。  
  
 如果<xref:System.Windows.Documents.TextPointer>已指向一个有效的插入的位置，但结束标记为非空的格式设置序列紧随的给定的方向中的此位置则<xref:System.Windows.Documents.TextPointer>返回由此方法进行调整，以指向插入恰好在格式设置序列的关闭后的位置。 例如，考虑标记序列`<Bold>a</Bold>b`。 请注意，有两个字母之间的插入位置`a`和`b`— 一个之前结束`Bold`标记和另一个紧随结束`Bold`标记。 如果<xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>上调用<xref:System.Windows.Documents.TextPointer>到紧跟字母位置`a`和之前的结束`Bold`标记，并与`direction`的<xref:System.Windows.Documents.LogicalDirection.Forward>，返回<xref:System.Windows.Documents.TextPointer>调整以指向位置之前字母`b`之后，结束`Bold`标记。 类似调整专为在相反的逻辑方向中工作时打开格式设置的标记。 此方法旨在提供一种消除两个在类似情况下的插入位置之间的歧义。  
  
 此方法还可以用于涉及的结构化标记序列时，应慎重有关插入点。 例如，在关闭和打开段落标记之间的位置，方向参数可以用于选择下一段落开头最近的插入点 (通过指定<xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType>) 或在前面的段落 （末尾通过指定<xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType>)。  
  
 如果指针已插入位置，并在指定有无相邻的格式设置标记`direction`，返回<xref:System.Windows.Documents.TextPointer>指向与发出调用的相同位置<xref:System.Windows.Documents.TextPointer>。  
  
 可能没有有效的插入位置存在相对于指向的位置<xref:System.Windows.Documents.TextPointer>。  如果引用的内容在结构上不完整，如下所示的空表或列表，也可能发生。  在这种情况下，此方法只返回<xref:System.Windows.Documents.TextPointer>到同一位置<xref:System.Windows.Documents.TextPointer>从中调用此方法。  此方法始终返回一个有效<xref:System.Windows.Documents.TextPointer>。  
  
   
  
## Examples  
 此示例演示如何使用<xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>方法来检查是否指定<xref:System.Windows.Documents.TextElement>为空的可打印的内容。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getinsertionposition)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetLineStartPosition">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向相对于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 指定的行的开始位置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetLineStartPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetLineStartPosition (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetLineStartPosition(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLineStartPosition (count As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetLineStartPosition(int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">在确定要返回其开始位置的行时要跳过的行开始位置标记数。 负值指定前面的行，0 指定当前行，正值指定后面的行。</param>
        <summary>返回一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向相对于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 指定的行的开始位置。</summary>
        <returns>一个指向指定行的开始位置的 <see cref="T:System.Windows.Documents.TextPointer" />（<see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> 设置为 <see cref="F:System.Windows.Documents.LogicalDirection.Forward" />）；或者，如果指定行超出范围或无法定位，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Documents.TextPointer>指向为此位置不明确的位置，例如，两条线之间的行中指定的方向<xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>被选为相对的起始行。  
  
 此方法执行的操作取决于有效的布局。  如有必要，此方法会尝试自动重新生成一个有效的布局，然后再继续操作。  重新生成布局可以是一个代价相对较大的操作。  使用<xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>来检查是否存在有效布局，然后执行可能会重新生成布局的操作。  有关详细信息，请参阅[布局](~/docs/framework/wpf/advanced/layout.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineStartPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetLineStartPosition (int count, out int actualCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetLineStartPosition(int32 count, [out] int32&amp; actualCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLineStartPosition (count As Integer, ByRef actualCount As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetLineStartPosition(int count, [Runtime::InteropServices::Out] int % actualCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="actualCount" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="count">在确定要返回其开始位置的行时要跳过的行开始位置标记数。 负值指定前面的行，0 指定当前行，正值指定后面的行。</param>
        <param name="actualCount">此方法返回时，将包含在确定要返回其开始位置的行时所实际跳过的行开始位置标记数。  如果在跳过指定行数之前遇到内容的开始或结束位置，则此值可能小于 <c>count</c>。 此参数未经初始化即被传递。</param>
        <summary>返回一个指向相对于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 所指定行的开始位置的 <see cref="T:System.Windows.Documents.TextPointer" />，并报告跳过的行数。</summary>
        <returns>一个指向指定行的开始位置的 <see cref="T:System.Windows.Documents.TextPointer" />（<see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> 设置为 <see cref="F:System.Windows.Documents.LogicalDirection.Forward" />）；或者，如果指定行超出范围，则指向最靠近指定行的行的开始位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Documents.TextPointer>指向为此位置不明确的位置，例如，两条线之间的行中指定的方向<xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>属性被选为相对的起始行。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextContextPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetNextContextPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetNextContextPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextContextPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetNextContextPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定搜索下一个符号时的逻辑方向。</param>
        <summary>返回一个指向指定逻辑方向上的下一个符号的指针。</summary>
        <returns>一个指向请求方向上的下一个符号的 <see cref="T:System.Windows.Documents.TextPointer" />；或者，如果当前 <see cref="T:System.Windows.Documents.TextPointer" /> 是内容开始或结束位置的边界，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下任一被视为可符号：  
  
-   一个开始标记或结束标记<xref:System.Windows.Documents.TextElement>元素。  
  
-   A<xref:System.Windows.UIElement>中包含的元素<xref:System.Windows.Documents.InlineUIContainer>或<xref:System.Windows.Documents.BlockUIContainer>。  请注意，此类<xref:System.Windows.UIElement>始终算做一个符号; 任何其他内容或包含的元素<xref:System.Windows.UIElement>不被视为符号。  
  
-   16 位[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]字符文本内<xref:System.Windows.Documents.Run>元素。  
  
 如果下一步符号被归类为<xref:System.Windows.Documents.TextPointerContext.EmbeddedElement>， <xref:System.Windows.Documents.TextPointerContext.ElementStart>，或<xref:System.Windows.Documents.TextPointerContext.ElementEnd>(由鉴定<xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>方法)，则<xref:System.Windows.Documents.TextPointer>返回此方法从当前位置高级由恰好一个符号。  
  
 如果下一步符号被归类为<xref:System.Windows.Documents.TextPointerContext.Text>，则<xref:System.Windows.Documents.TextPointer>返回此方法对下一步的非文本符号的高级越过文本 (即的下一个位置<xref:System.Windows.Documents.TextPointerContext>不<xref:System.Windows.Documents.TextPointerContext.Text>)。  可以通过调用提前计算超过的确切符号数<xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>方法。  
  
   
  
## Examples  
 下面的示例演示此方法的用法。  该示例使用<xref:System.Windows.Documents.TextPointer.GetNextContextPosition%2A>方法结合<xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>方法来遍历并提取中指定的符号<xref:System.Windows.Documents.TextElement>。  
  
 虽然可以使用该示例提取[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]的内容的结构给定<xref:System.Windows.Documents.TextElement>，它旨在仅，供说明用途，不应在生产代码中使用。  请参阅<xref:System.Xml>一套丰富的设计用于处理和处理 XML 的类型的命名空间。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getnextcontextposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getnextcontextposition)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextInsertionPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetNextInsertionPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetNextInsertionPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextInsertionPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetNextInsertionPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定搜索下一个插入位置时的逻辑方向。</param>
        <summary>返回一个指向指定逻辑方向上的下一个插入位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
        <returns>一个 <see cref="T:System.Windows.Documents.TextPointer" />，它标识所请求方向上的下一个插入位置；或者，如果找不到下一个插入位置，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *插入位置*是可在该处添加新的内容而不会破坏关联内容的任何语义规则的位置。  在实践中，插入位置位于任意位置内容可能放置一个插入符号的位置。  一个有效的示例<xref:System.Windows.Documents.TextPointer>不的插入位置的位置是相邻两个位置<xref:System.Windows.Documents.Paragraph>标记 (即上, 一段的结束标记和下一段的开始标记之间)。  
  
   
  
## Examples  
 下面的示例演示此方法的用法。 该示例使用<xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>方法来遍历以便指定数目的内容的元素边界<xref:System.Windows.Documents.Paragraph>之间两个指定的元素存在<xref:System.Windows.Documents.TextPointer>实例。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getnextinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getnextinsertionposition)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <Member MemberName="GetOffsetToPosition">
      <MemberSignature Language="C#" Value="public int GetOffsetToPosition (System.Windows.Documents.TextPointer position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetOffsetToPosition(class System.Windows.Documents.TextPointer position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOffsetToPosition (position As TextPointer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetOffsetToPosition(System::Windows::Documents::TextPointer ^ position);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定一个位置，将查找该位置与当前位置之间相距的距离（以符号数为单位）。</param>
        <summary>返回当前 <see cref="T:System.Windows.Documents.TextPointer" /> 与第二个指定 <see cref="T:System.Windows.Documents.TextPointer" /> 之间的符号数。</summary>
        <returns>当前 <see cref="T:System.Windows.Documents.TextPointer" /> 与 <paramref name="position" /> 之间的相对符号数。  负值指示当前 <see cref="T:System.Windows.Documents.TextPointer" /> 位于 <paramref name="position" /> 指定的位置之后，0 指示位置相同，正值指示当前 <see cref="T:System.Windows.Documents.TextPointer" /> 位于 <paramref name="position" /> 指定的位置之前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下任一被视为可符号：  
  
-   一个开始标记或结束标记<xref:System.Windows.Documents.TextElement>元素。  
  
-   A<xref:System.Windows.UIElement>中包含的元素<xref:System.Windows.Documents.InlineUIContainer>或<xref:System.Windows.Documents.BlockUIContainer>。  请注意，此类<xref:System.Windows.UIElement>始终算做一个符号; 任何其他内容或包含的元素<xref:System.Windows.UIElement>不被视为符号。  
  
-   16 位[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]字符文本内<xref:System.Windows.Documents.Run>元素。  
  
   
  
## Examples  
 下面的示例演示此方法的用法。 该示例使用<xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>方法来查找两个偏移量<xref:System.Windows.Documents.TextPointer>实例，，然后使用此信息用于保存和还原中的选定<xref:System.Windows.Controls.RichTextBox>。  该示例假定的内容<xref:System.Windows.Controls.RichTextBox>未保存的选项并选择还原之间更改。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getoffsettoposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getoffsettoposition)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="position" /> 指定位于与当前位置相关联的文本容器之外的某个位置。</exception>
        <altmember cref="Overload:System.Windows.Documents.TextPointer.GetPositionAtOffset" />
        <altmember cref="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="GetPointerContext">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointerContext GetPointerContext (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Documents.TextPointerContext GetPointerContext(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPointerContext (direction As LogicalDirection) As TextPointerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointerContext GetPointerContext(System::Windows::Documents::LogicalDirection direction);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointerContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定确定相邻内容的类别时的逻辑方向。</param>
        <summary>返回在指定逻辑方向上与当前 <see cref="T:System.Windows.Documents.TextPointer" /> 相邻的内容的类别指示标志。</summary>
        <returns>
          <see cref="T:System.Windows.Documents.TextPointerContext" /> 值之一，它指示指定逻辑方向上相邻内容的类别。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示此方法的用法。 该示例使用<xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>方法来实现一种算法用于计算的开始和结束之间两个指定的元素标记之间的平衡<xref:System.Windows.Documents.TextPointer>位置。  每个开始元素标记计数为 + 1，和每个结束元素标记会被计为 – 1。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getoffsettoposition2)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getoffsettoposition2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPositionAtOffset">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向从内容开始位置计算的由指定偏移量（以符号数为单位）指示的位置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPositionAtOffset">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetPositionAtOffset(int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionAtOffset (offset As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetPositionAtOffset(int offset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="offset">偏移量（以符号数为单位），使用它计算并返回位置。  如果偏移量为负，则在与 <see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> 属性指示的方向相反的逻辑方向上计算位置。</param>
        <summary>返回一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向从当前 <see cref="T:System.Windows.Documents.TextPointer" /> 的开始位置计算的由指定偏移量（以符号数为单位）指示的位置。</summary>
        <returns>一个指向由指定偏移量指示的位置的 <see cref="T:System.Windows.Documents.TextPointer" />；或者，如果找不到对应位置，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下任一被视为可符号：  
  
-   一个开始标记或结束标记<xref:System.Windows.Documents.TextElement>元素。  
  
-   A<xref:System.Windows.UIElement>中包含的元素<xref:System.Windows.Documents.InlineUIContainer>或<xref:System.Windows.Documents.BlockUIContainer>。  请注意，此类<xref:System.Windows.UIElement>始终算做一个符号; 任何其他内容或包含的元素<xref:System.Windows.UIElement>不被视为符号。  
  
-   16 位[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]字符文本内<xref:System.Windows.Documents.Run>元素。  
  
   
  
## Examples  
 下面的示例演示此方法的用法。 该示例使用<xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>方法实现的方法，其中一个来计算到相对于任何托管段落和另一个要返回的指定位置的偏移量对<xref:System.Windows.Documents.TextPointer>到指定段中指定的偏移量。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getpositionatoffset)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getpositionatoffset)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionAtOffset">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset, System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetPositionAtOffset(int32 offset, valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionAtOffset (offset As Integer, direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetPositionAtOffset(int offset, System::Windows::Documents::LogicalDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="offset">偏移量（以符号数为单位），使用它计算并返回位置。  如果偏移量为负，则返回的 <see cref="T:System.Windows.Documents.TextPointer" /> 位于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 之前；否则，位于它之后。</param>
        <param name="direction">
          <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定返回的 <see cref="T:System.Windows.Documents.TextPointer" /> 的逻辑方向。</param>
        <summary>返回一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向从当前 <see cref="T:System.Windows.Documents.TextPointer" /> 的开始位置沿指定方向计算的由指定偏移量（以符号数为单位）指示的位置。</summary>
        <returns>一个指向由指定偏移量指示的位置的 <see cref="T:System.Windows.Documents.TextPointer" />；或者，如果偏移量超过了内容的结束位置，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下任一被视为可符号：  
  
-   一个开始标记或结束标记<xref:System.Windows.Documents.TextElement>元素。  
  
-   A<xref:System.Windows.UIElement>中包含的元素<xref:System.Windows.Documents.InlineUIContainer>或<xref:System.Windows.Documents.BlockUIContainer>。  请注意，此类<xref:System.Windows.UIElement>始终算做一个符号; 任何其他内容或包含的元素<xref:System.Windows.UIElement>不被视为符号。  
  
-   16 位[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]字符文本内<xref:System.Windows.Documents.Run>元素。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTextInRun">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回与当前 <see cref="T:System.Windows.Documents.TextPointer" /> 相邻的文本。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTextInRun">
      <MemberSignature Language="C#" Value="public string GetTextInRun (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTextInRun(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextInRun (direction As LogicalDirection) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTextInRun(System::Windows::Documents::LogicalDirection direction);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定查找并返回任何相邻文本时的逻辑方向。</param>
        <summary>返回一个字符串，其中包含在指定逻辑方向上与当前 <see cref="T:System.Windows.Documents.TextPointer" /> 相邻的任何文本。</summary>
        <returns>一个包含指定逻辑方向上的任何相邻文本的字符串；或者，如果找不到相邻文本，则为 <see cref="F:System.String.Empty" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法仅返回不中断的文本。  未返回任何内容如果以外的任何符号类型<xref:System.Windows.Documents.TextPointerContext.Text>靠近当前<xref:System.Windows.Documents.TextPointer>按指定的方向。  同样，最多的下一步的非文本符号只被返回的文本。  
  
   
  
## Examples  
 下面的示例演示此方法的用法。 该示例使用<xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>方法来实现简单文本提取程序。  该方法返回的所有文本的字符串串联两个指定之间<xref:System.Windows.Documents.TextPointer>实例。  
  
 虽然可以使用该示例提取间两个的任何文本<xref:System.Windows.Documents.TextPointer>实例，它旨在仅，供说明用途，不应在生产代码中使用。  改用 <xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=nameWithType> 属性。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetTextInRun](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_gettextinrun)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetTextInRun](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_gettextinrun)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetTextInRun">
      <MemberSignature Language="C#" Value="public int GetTextInRun (System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTextInRun(valuetype System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextInRun (direction As LogicalDirection, textBuffer As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTextInRun(System::Windows::Documents::LogicalDirection direction, cli::array &lt;char&gt; ^ textBuffer, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
        <Parameter Name="textBuffer" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="direction">
          <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定查找并复制任何相邻文本时的逻辑方向。</param>
        <param name="textBuffer">要向其中复制文本的缓冲区。</param>
        <param name="startIndex">一个索引，从该索引处开始将复制的文本写入 <c>textBuffer</c>。</param>
        <param name="count">要复制的最大字符数。</param>
        <summary>将从指定方向上的任何相邻文本中提取的指定了最大数量的字符复制到由调用方提供的字符数组中。</summary>
        <returns>实际复制到 <paramref name="textBuffer" /> 中的字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法仅返回不中断的文本。  未返回任何内容如果以外的任何符号类型<xref:System.Windows.Documents.TextPointerContext.Text>靠近当前<xref:System.Windows.Documents.TextPointer>按指定的方向。  同样，最多的下一步的非文本符号只被返回的文本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="startIndex" /> 小于 0 或大于 <paramref name="textBuffer" /> 的 <see cref="P:System.Array.Length" /> 属性。  
  
 或  
  
 <paramref name="count" /> 小于 0 或大于 <paramref name="textBuffer" /> 中的剩余空间（<paramref name="textBuffer" />.<see cref="P:System.Array.Length" /> 减去 <paramref name="startIndex" />）。</exception>
        <altmember cref="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetTextRunLength">
      <MemberSignature Language="C#" Value="public int GetTextRunLength (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTextRunLength(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextRunLength (direction As LogicalDirection) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTextRunLength(System::Windows::Documents::LogicalDirection direction);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定计数字符数时的逻辑方向。</param>
        <summary>返回当前 <see cref="T:System.Windows.Documents.TextPointer" /> 与指定逻辑方向上的下一个非文本符号之间的 Unicode 字符数。</summary>
        <returns>当前 <see cref="T:System.Windows.Documents.TextPointer" /> 与下一个非文本符号之间的 Unicode 字符数。  如果没有相邻文本，则此数目可以为 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下任一被视为可符号：  
  
-   一个开始标记或结束标记<xref:System.Windows.Documents.TextElement>元素。  
  
-   A<xref:System.Windows.UIElement>中包含的元素<xref:System.Windows.Documents.InlineUIContainer>或<xref:System.Windows.Documents.BlockUIContainer>。  请注意，此类<xref:System.Windows.UIElement>始终算做一个符号; 任何其他内容或包含的元素<xref:System.Windows.UIElement>不被视为符号。  
  
-   16 位[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]字符文本内<xref:System.Windows.Documents.Run>元素。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValidLayout">
      <MemberSignature Language="C#" Value="public bool HasValidLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValidLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.HasValidLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValidLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValidLayout { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextPointer.HasValidLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前位置相关联的文本容器是否具有有效（最新）的布局。</summary>
        <value>
          如果布局是最新的而且有效，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如有必要，取决于有效的布局的操作 (如<xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>方法，<xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A>方法，和<xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>属性) 尝试自动重新生成一个有效的布局，然后再继续操作。  重新生成布局可以是一个代价相对较大的操作。  此属性用于在执行可能会重新生成布局的操作之前检查存在有效的布局。  有关详细信息，请参阅[布局](~/docs/framework/wpf/advanced/layout.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertLineBreak">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer InsertLineBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer InsertLineBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertLineBreak () As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ InsertLineBreak();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在当前位置插入一个换行符。</summary>
        <returns>紧接在由此方法插入的 <see cref="T:System.Windows.Documents.TextPointer" /> 元素之后的 <see cref="T:System.Windows.Documents.LineBreak" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParagraphBreak">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer InsertParagraphBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer InsertParagraphBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertParagraphBreak () As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ InsertParagraphBreak();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在当前位置插入一个分段符。</summary>
        <returns>一个指向新段落开始位置 (<see cref="T:System.Windows.Documents.TextPointer" />) 的 <see cref="P:System.Windows.Documents.TextElement.ContentStart" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此方法调用时当前的位置是在现有内部<xref:System.Windows.Documents.Paragraph>元素、 现有段落和它包含任何内容将被拆分为两个段落中的当前的位置。  如果当前的位置不是在现有段落内部时，调用此方法，将插入一个新的空段落。  如果调用此方法是在位置不适用于拆分或插入段落 (例如，如果当前位置是内<xref:System.Windows.Documents.Hyperlink>元素)，将引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">应针对无法进行拆分以容纳一个新段落的位置调用此方法，例如在 <see cref="T:System.Windows.Documents.Hyperlink" /> 或 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 的范围内。</exception>
      </Docs>
    </Member>
    <Member MemberName="InsertTextInRun">
      <MemberSignature Language="C#" Value="public void InsertTextInRun (string textData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertTextInRun(string textData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertTextInRun (textData As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertTextInRun(System::String ^ textData);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.InsertTextInRun(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textData" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textData">要插入的文本。</param>
        <summary>将指定文本插入到文本 <see cref="T:System.Windows.Documents.Run" /> 中的当前位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Documents.TextPointer>不的作用范围由<xref:System.Windows.Documents.Run>元素，<xref:System.Windows.Documents.Run>连同插入`textData`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当前位置没有位于 <see cref="T:System.Windows.Documents.Run" /> 元素内。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textData" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAtInsertionPosition">
      <MemberSignature Language="C#" Value="public bool IsAtInsertionPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAtInsertionPosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.IsAtInsertionPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAtInsertionPosition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAtInsertionPosition { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextPointer.IsAtInsertionPosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前位置是否是一个插入位置。</summary>
        <value>
          如果当前位置是插入位置，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插入位置是可在该处添加新的内容而不会破坏关联内容的任何语义规则的位置。  在实践中，插入位置位于任意位置内容可能放置一个插入符号的位置。  一个有效的示例<xref:System.Windows.Documents.TextPointer>不的插入位置的位置是相邻两个位置<xref:System.Windows.Documents.Paragraph>标记 (即上, 一段的结束标记和下一段的开始标记之间)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <Member MemberName="IsAtLineStartPosition">
      <MemberSignature Language="C#" Value="public bool IsAtLineStartPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAtLineStartPosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAtLineStartPosition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAtLineStartPosition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前位置是否位于行的开始处。</summary>
        <value>
          如果当前位置位于行的开始处，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Documents.TextPointer>指向为此位置不明确的位置，例如，两条线之间的行中指定的方向<xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>属性被选为相对的起始行。  
  
 此属性执行的操作取决于有效的布局。  如有必要，此方法会尝试自动重新生成一个有效的布局，然后再继续操作。  重新生成布局可以是一个代价相对较大的操作。  使用<xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>属性来检查是否存在有效布局，然后执行可能会重新生成布局的操作。  有关详细信息，请参阅[布局](~/docs/framework/wpf/advanced/layout.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      </Docs>
    </Member>
    <Member MemberName="IsInSameDocument">
      <MemberSignature Language="C#" Value="public bool IsInSameDocument (System.Windows.Documents.TextPointer textPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInSameDocument(class System.Windows.Documents.TextPointer textPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInSameDocument (textPosition As TextPointer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInSameDocument(System::Windows::Documents::TextPointer ^ textPosition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textPosition" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="textPosition">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定要与当前位置进行比较的位置。</param>
        <summary>指示指定位置与当前位置是否位于相同的文本容器内。</summary>
        <returns>
          如果 <paramref name="textPosition" /> 指示的位置与当前位置位于相同的文本容器内，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大多数操作涉及多个<xref:System.Windows.Documents.TextPointer>实例才有效，如果问题实例表示相同的文本容器作用域中的位置。  例如<xref:System.Windows.Documents.TextPointer.CompareTo%2A>和<xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>方法不能与使用<xref:System.Windows.Documents.TextPointer>到当前的位置与关联的文本容器之外的位置。  使用此方法来验证是否指定<xref:System.Windows.Documents.TextPointer>与此类操作的当前位置兼容。  
  
   
  
## Examples  
 下面的示例演示此方法的用法。  该示例使用<xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>方法来检查是否指定<xref:System.Windows.Documents.TextPointer>位于之间其他两个指定<xref:System.Windows.Documents.TextPointer>时就不能保证所有三个位置都属于相同的文本容器的情况下的实例。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_isinsamedocument)]
 [!code-vb[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_isinsamedocument)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textPosition" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="LogicalDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.LogicalDirection LogicalDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Documents.LogicalDirection LogicalDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.LogicalDirection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogicalDirection As LogicalDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::LogicalDirection LogicalDirection { System::Windows::Documents::LogicalDirection get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextPointer.LogicalDirection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.LogicalDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与当前位置相关联的逻辑方向，用于消除与当前位置相关联内容的不确定性。</summary>
        <value>与当前位置相关联的 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 作为示例，了解如何使用此属性，<xref:System.Windows.Documents.LogicalDirection>的<xref:System.Windows.Documents.TextPointer>返回命中测试方法提供的命中位于的文本的两个字符之间。 逻辑方向指定这两个字符实际命中 — 左侧或右侧。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paragraph">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.Paragraph Paragraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.Paragraph Paragraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.Paragraph" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Paragraph As Paragraph" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::Paragraph ^ Paragraph { System::Windows::Documents::Paragraph ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.Paragraph</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取涵盖当前位置的段落（如果有）。</summary>
        <value>
          <see cref="T:System.Windows.Documents.Paragraph" />的作用域的当前的位置，或<see langword="null" />如果没有此类段落存在。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Parent" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取涵盖当前位置的逻辑父项。</summary>
        <value>涵盖当前位置的逻辑父项。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Paragraph" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>此类型或成员支持 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基础结构，但不可直接在代码中使用。</summary>
        <returns>表示该对象的字符串。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>