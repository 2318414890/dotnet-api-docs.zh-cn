<Type Name="HijriCalendar" FullName="System.Globalization.HijriCalendar">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b5d9fd0bf81e9f98cc88ab5e46b5c3bf9da67f4b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410741" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HijriCalendar : System.Globalization.Calendar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit HijriCalendar extends System.Globalization.Calendar" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.HijriCalendar" />
  <TypeSignature Language="VB.NET" Value="Public Class HijriCalendar&#xA;Inherits Calendar" />
  <TypeSignature Language="C++ CLI" Value="public ref class HijriCalendar : System::Globalization::Calendar" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Calendars</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Globalization.Calendar</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示回历。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在伊斯兰日历识别一个纪元： 纪元 (拉丁"Anno Hegirae"，这意味着"year 的迁移后，"关于迁移的穆罕默德 (PBUH) 从麦加迁)。  
  
> [!NOTE]
>  有关使用信息<xref:System.Globalization.HijriCalendar>类和其他日历.NET Framework 中的类，请参阅[使用日历](~/docs/standard/datetime/working-with-calendars.md)。  
  
 在为被 30、 第二次、 5、 7、 10、 13、 16、 18、 21、 24 整除的年份结束每 30 年周期，26 和 29 年是闰年。 平年有 354 天，闰年有 355 天。  
  
 回历具有 12 个月 29 到 30 天：  
  
|GetMonth 值|月份|天数在平年|中的天闰年|  
|--------------------|-----------|--------------------------|------------------------|  
|1|محرم (Muharram)|30|30|  
|2|صفر (Safar)|29|29|  
|3|ربيع الاول (Rabi 我)|30|30|  
|4|ربيع الثاني (Rabi II)|29|29|  
|5|جمادى الاولى (Jumada 我)|30|30|  
|6|جمادى الثانية (Jumada II)|29|29|  
|7|رجب (Rajab)|30|30|  
|8|شعبان (Shaban)|29|29|  
|9|رمضان （斋月）|30|30|  
|10|شوال （中等）|29|29|  
|11|ذو القعدة (Zulkadah)|30|30|  
|12|ذو الحجة （闰年）|29|30|  
  
 斋月，月在穆斯林世界中，正式开始和结束根据基于观测到的新月法令。 因此，Shaban 的最大天数和斋月的最大天数会有所不同。  
  
 日期到公元 2001 年 1 月 1 日 在公历日历是大致相当于中等 A.H.1421 年的第六天 在回历。  
  
 此实现的<xref:System.Globalization.HijriCalendar>类通过增加或减少一个介于 0 到 2 天，若要容纳开始和结束的斋月的方差，并以适应日期之差国家/地区调整日历日期。 该值存储在<xref:System.Globalization.HijriCalendar.HijriAdjustment%2A>属性。 如果<xref:System.Globalization.HijriCalendar.HijriAdjustment%2A>未显式，它可从控制面板的区域和语言选项部分中的设置中派生其值并将其存储在注册表值 HKEY_CURRENT_USER\Control Panel\International\AddHijriDate 设置。 但是，该信息可以更改的生命周期内<xref:System.AppDomain>。 <xref:System.Globalization.HijriCalendar>类不会检测系统设置中的更改自动。  
  
 每个<xref:System.Globalization.CultureInfo>支持一组的日历。 <xref:System.Globalization.CultureInfo.Calendar%2A>属性返回区域性的默认日历和<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>属性返回一个包含所有支持的区域性的日历数组。 若要更改使用的日历<xref:System.Globalization.CultureInfo>，应用程序应设置<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>到新<xref:System.Globalization.Calendar>。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="P:System.Globalization.CultureInfo.Calendar" />
    <altmember cref="P:System.Globalization.CultureInfo.OptionalCalendars" />
    <altmember cref="T:System.Globalization.UmAlQuraCalendar" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HijriCalendar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HijriCalendar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Globalization.HijriCalendar" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public override DateTime AddMonths (DateTime time, int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.AddMonths(System.DateTime,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AddMonths (time As DateTime, months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DateTime AddMonths(DateTime time, int months);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="time">要向其添加月数的 <see cref="T:System.DateTime" />。</param>
        <param name="months">要添加的月数。</param>
        <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定月数的 <see cref="T:System.DateTime" />。</summary>
        <returns>将指定月数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 日部分的生成<xref:System.DateTime>如果结果的日期不是有效的一天中生成月份影响。 它将更改为在生成每年的生成的每月最后一个有效的一天。 所生成的年份部分<xref:System.DateTime>如果外部的指定年，则结果月份受到<xref:System.DateTime>。 此实现支持仅当前纪元。 因此，<xref:System.ArgumentException>如果所得年份未指定纪元，将引发<xref:System.DateTime>。 所生成的一天时间部分<xref:System.DateTime>保持与指定相同<xref:System.DateTime>。  
  
 例如，如果指定的月份是 Zulkadah，包含 30 天，指定的日期是该月 30 日和的值`months`参数为 3，则生成的年份是一个多个指定的年份，生成的月份是日和生成 d在为 29 日，即 Safar 的最后一天。  
  
 如果值`months`参数是负数，生成<xref:System.DateTime>早于指定<xref:System.DateTime>。  
  
 <xref:System.DateTime.Kind%2A>属性返回<xref:System.DateTime>值始终等于<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 您可以保留<xref:System.DateTime.Kind%2A>属性`time`通过调用的参数<xref:System.DateTime.SpecifyKind%2A?displayProperty=nameWithType>方法，如以下示例所示。  
  
 [!code-csharp[System.Globalization.Calendar.AddMethods#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#5)]
 [!code-vb[System.Globalization.Calendar.AddMethods#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#5)]  
  
   
  
## Examples  
 下面的代码示例显示几个组成部分的值<xref:System.DateTime>方面回历。  
  
 [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CPP/hijricalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CS/hijricalendar_addget.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/VB/hijricalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="months" /> 小于 -120000。  
  
 或  
  
 <paramref name="months" /> 大于 120000。</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:System.Globalization.HijriCalendar.AddYears(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public override DateTime AddYears (DateTime time, int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.AddYears(System.DateTime,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AddYears (time As DateTime, years As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DateTime AddYears(DateTime time, int years);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="time">要向其添加年数的 <see cref="T:System.DateTime" />。</param>
        <param name="years">要添加的年数。</param>
        <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定年数的 <see cref="T:System.DateTime" />。</summary>
        <returns>将指定年数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 日部分的生成<xref:System.DateTime>如果结果的日期不是有效的一天中生成月份影响。 它将更改为在生成每年的生成的每月最后一个有效的一天。 所生成的月份部分<xref:System.DateTime>保持与指定相同<xref:System.DateTime>。 此实现支持仅当前纪元。 因此，<xref:System.ArgumentException>如果所得年份未指定纪元，将引发<xref:System.DateTime>。 所生成的一天时间部分<xref:System.DateTime>保持与指定相同<xref:System.DateTime>。  
  
 例如，闰年有 29 天，但在闰年时它有 30 天。 如果指定的日期是闰年中闰年的 30 天并且的值`years`为 1，则得到的日期将在下一年中的闰年 29 日。  
  
 如果`years`为负，生成<xref:System.DateTime>早于指定<xref:System.DateTime>。  
  
 <xref:System.DateTime.Kind%2A>属性返回<xref:System.DateTime>值始终等于<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。 您可以保留<xref:System.DateTime.Kind%2A>属性`time`通过调用的参数<xref:System.DateTime.SpecifyKind%2A?displayProperty=nameWithType>方法，如以下示例所示。  
  
 [!code-csharp[System.Globalization.Calendar.AddMethods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#8)]
 [!code-vb[System.Globalization.Calendar.AddMethods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#8)]  
  
   
  
## Examples  
 下面的代码示例显示几个组成部分的值<xref:System.DateTime>方面回历。  
  
 [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CPP/hijricalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CS/hijricalendar_addget.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/VB/hijricalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:System.Globalization.HijriCalendar.AddMonths(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="AlgorithmType">
      <MemberSignature Language="C#" Value="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.HijriCalendar.AlgorithmType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AlgorithmType As CalendarAlgorithmType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CalendarAlgorithmType AlgorithmType { System::Globalization::CalendarAlgorithmType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CalendarAlgorithmType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。</summary>
        <value>始终返回 <see cref="F:System.Globalization.CalendarAlgorithmType.LunarCalendar" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例使用反射来实例化每个<xref:System.Globalization.Calendar>类型在.NET Framework 中找到并显示的值其<xref:System.Globalization.Calendar.AlgorithmType%2A>属性。  
  
 [!code-csharp[System.Globalization.Calendar.AlgorithmType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.algorithmtype/cs/algorithmtype1.cs#1)]
 [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.algorithmtype/vb/algorithmtype1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaysInYearBeforeMinSupportedYear">
      <MemberSignature Language="C#" Value="protected override int DaysInYearBeforeMinSupportedYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DaysInYearBeforeMinSupportedYear" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.HijriCalendar.DaysInYearBeforeMinSupportedYear" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DaysInYearBeforeMinSupportedYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int DaysInYearBeforeMinSupportedYear { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="P:System.Globalization.HijriCalendar.MinSupportedDateTime" /> 属性指定的年份之前的年中天数。</summary>
        <value>由 <see cref="P:System.Globalization.HijriCalendar.MinSupportedDateTime" /> 指定的在年之前的一年的天数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回 354 的常量值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Eras">
      <MemberSignature Language="C#" Value="public override int[] Eras { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] Eras" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.HijriCalendar.Eras" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Eras As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;int&gt; ^ Eras { cli::array &lt;int&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Globalization.HijriCalendar" /> 中的纪元列表。</summary>
        <value>表示 <see cref="T:System.Globalization.HijriCalendar" /> 中的纪元的整数数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在伊斯兰日历识别一个纪元： 纪元 (拉丁"Anno Hegirae"，这意味着"year 的迁移后，"关于迁移的穆罕默德 (PBUH) 从麦加迁)。 此属性始终返回包含仅有一个元素的数组。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="F:System.Globalization.HijriCalendar.HijriEra" />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfMonth">
      <MemberSignature Language="C#" Value="public override int GetDayOfMonth (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDayOfMonth(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDayOfMonth (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetDayOfMonth(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
        <summary>返回指定 <see cref="T:System.DateTime" /> 中的月中日期。</summary>
        <returns>1 到 30 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月中日期。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例显示几个组成部分的值<xref:System.DateTime>方面回历。  
  
 [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CPP/hijricalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CS/hijricalendar_addget.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/VB/hijricalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Day" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfWeek">
      <MemberSignature Language="C#" Value="public override DayOfWeek GetDayOfWeek (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDayOfWeek (time As DateTime) As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DayOfWeek GetDayOfWeek(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
        <summary>返回指定 <see cref="T:System.DateTime" /> 中的周中日期。</summary>
        <returns>一个 <see cref="T:System.DayOfWeek" /> 值，用于表示指定的 <see cref="T:System.DateTime" /> 中的周中日期。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DayOfWeek>值如下：  
  
|DayOfWeek 值|指示|  
|---------------------|---------------------|  
|星期日|الاحد (Al Ahad)|  
|星期一|الاثنين (Al Ithnayn)|  
|星期二|الثلاثاء (在 Thulaathaa)|  
|星期三|الاربعاء (Al Arbi'aa)|  
|星期四|الخميس (Al Khamiis)|  
|星期五|الجمعة (Al Jumu'ah)|  
|星期六|السبت (作为 Sabt)|  
  
   
  
## Examples  
 下面的代码示例显示几个组成部分的值<xref:System.DateTime>方面回历。  
  
 [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CPP/hijricalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CS/hijricalendar_addget.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/VB/hijricalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.DayOfWeek" />
        <altmember cref="T:System.DayOfWeek" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfYear">
      <MemberSignature Language="C#" Value="public override int GetDayOfYear (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDayOfYear(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDayOfYear (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetDayOfYear(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
        <summary>返回指定 <see cref="T:System.DateTime" /> 中的日期是该年中的第几天。</summary>
        <returns>1 到 355 之间的一个整数，用于表示指定 <see cref="T:System.DateTime" /> 中的年中日期。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每年的日期被指从该年度的第一天的天数。 例如，<xref:System.Globalization.HijriCalendar.GetDayOfYear%2A>对的第一个月的第一天返回 1，和<xref:System.Globalization.HijriCalendar.GetDayOfYear%2A>上个月的最后一天返回该年中的天的总数，其中相同的值返回<xref:System.Globalization.HijriCalendar.GetDaysInYear%2A>。  
  
   
  
## Examples  
 下面的代码示例显示几个组成部分的值<xref:System.DateTime>方面回历。  
  
 [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CPP/hijricalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CS/hijricalendar_addget.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/VB/hijricalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.DayOfYear" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="GetDaysInMonth">
      <MemberSignature Language="C#" Value="public override int GetDaysInMonth (int year, int month, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDaysInMonth(int32 year, int32 month, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDaysInMonth (year As Integer, month As Integer, era As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetDaysInMonth(int year, int month, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">一个整数，用于表示年份。</param>
        <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
        <param name="era">一个整数，用于表示纪元。</param>
        <summary>返回指定纪元年份中指定月份的天数。</summary>
        <returns>指定纪元中指定年份的指定月份中的天数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例如，此方法为闰年返回 29 或 30 (`month` = 12)，具体取决于`year`是否为闰年。  
  
   
  
## Examples  
 下面的代码示例调用`GetDaysInMonth`个第 12 个月的每个五年中每个纪元。  
  
 [!code-cpp[System.Globalization.HijriCalendar.GetDaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.GetDaysInMonth/CPP/hijricalendar_getdaysinmonth.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar.GetDaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.GetDaysInMonth/CS/hijricalendar_getdaysinmonth.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar.GetDaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.GetDaysInMonth/VB/hijricalendar_getdaysinmonth.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> 超出了此日历支持的范围。  
  
 或  
  
 <paramref name="year" /> 超出了此日历支持的范围。  
  
 或  
  
 <paramref name="month" /> 超出了此日历支持的范围。</exception>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="F:System.Globalization.HijriCalendar.HijriEra" />
        <altmember cref="P:System.Globalization.HijriCalendar.Eras" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDaysInYear">
      <MemberSignature Language="C#" Value="public override int GetDaysInYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDaysInYear(int32 year, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDaysInYear (year As Integer, era As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetDaysInYear(int year, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">一个整数，用于表示年份。</param>
        <param name="era">一个整数，用于表示纪元。</param>
        <summary>返回指定纪元年份中的天数。</summary>
        <returns>指定纪元年份中的天数。 天数在平年中为 354，在闰年中为 355。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例调用`GetDaysInYear`为每个纪元中的五年。  
  
 [!code-cpp[System.Globalization.HijriCalendar.GetDaysInYear#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.GetDaysInYear/CPP/hijricalendar_getdaysinyear.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar.GetDaysInYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.GetDaysInYear/CS/hijricalendar_getdaysinyear.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar.GetDaysInYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.GetDaysInYear/VB/hijricalendar_getdaysinyear.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="F:System.Globalization.HijriCalendar.HijriEra" />
        <altmember cref="P:System.Globalization.HijriCalendar.Eras" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEra">
      <MemberSignature Language="C#" Value="public override int GetEra (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetEra(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEra (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetEra(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
        <summary>返回指定 <see cref="T:System.DateTime" /> 中的纪元。</summary>
        <returns>一个整数，用于表示指定 <see cref="T:System.DateTime" /> 中的纪元。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在伊斯兰日历识别一个纪元： 纪元 (拉丁"Anno Hegirae"，这意味着"year 的迁移后，"关于迁移的穆罕默德 (PBUH) 从麦加迁)。  
  
   
  
## Examples  
 下面的代码示例显示几个组成部分的值<xref:System.DateTime>方面回历。  
  
 [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CPP/hijricalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CS/hijricalendar_addget.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/VB/hijricalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DateTime" />
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="F:System.Globalization.HijriCalendar.HijriEra" />
        <altmember cref="P:System.Globalization.HijriCalendar.Eras" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)" />
        <altmember cref="M:System.Globalization.Calendar.GetHour(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetMinute(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetSecond(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="GetLeapMonth">
      <MemberSignature Language="C#" Value="public override int GetLeapMonth (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLeapMonth(int32 year, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.GetLeapMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLeapMonth (year As Integer, era As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLeapMonth(int year, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年份。</param>
        <param name="era">纪元。 指定 <see cref="F:System.Globalization.Calendar.CurrentEra" /> 或 <see cref="F:System.Globalization.HijriCalendar.HijriEra" />。</param>
        <summary>计算指定纪元年份的闰月。</summary>
        <returns>总为 0，因为 <see cref="T:System.Globalization.HijriCalendar" /> 类型不支持闰月的概念。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在日历中支持闰月的概念，在某个特定的月份之后或在每一年中的任何月份之后发生的闰月。 例如，<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>方法返回一个数字，介于 1 和 13，该值指示指定的日期与关联的月份。 如果一年中，在第八个和第 9 个月之间存在闰月<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>方法闰第八个月的 9 和 10 第 9 个月的第八个月份返回 8。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 小于回历年 1 或大于 9666 年。  
  
 或  
  
 <paramref name="era" /> 不是 <see cref="F:System.Globalization.Calendar.CurrentEra" /> 或 <see cref="F:System.Globalization.HijriCalendar.HijriEra" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMonth">
      <MemberSignature Language="C#" Value="public override int GetMonth (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMonth(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMonth (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMonth(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
        <summary>返回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
        <returns>1 到 12 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月份。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例显示几个组成部分的值<xref:System.DateTime>方面回历。  
  
 [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CPP/hijricalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CS/hijricalendar_addget.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/VB/hijricalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Month" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)" />
        <altmember cref="M:System.Globalization.Calendar.GetHour(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetMinute(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetSecond(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="GetMonthsInYear">
      <MemberSignature Language="C#" Value="public override int GetMonthsInYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMonthsInYear(int32 year, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMonthsInYear (year As Integer, era As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMonthsInYear(int year, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">一个整数，用于表示年份。</param>
        <param name="era">一个整数，用于表示纪元。</param>
        <summary>返回指定纪元年份中的月数。</summary>
        <returns>指定纪元年份中的月数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例调用每个纪元中的五年 GetMonthsInYear 方法。  
  
 [!code-cpp[System.Globalization.HijriCalendar.GetMonthsInYear#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.GetMonthsInYear/CPP/hijricalendar_getmonthsinyear.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar.GetMonthsInYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.GetMonthsInYear/CS/hijricalendar_getmonthsinyear.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar.GetMonthsInYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.GetMonthsInYear/VB/hijricalendar_getmonthsinyear.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> 超出了此日历支持的范围。  
  
 或  
  
 <paramref name="year" /> 超出了此日历支持的范围。</exception>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="F:System.Globalization.HijriCalendar.HijriEra" />
        <altmember cref="P:System.Globalization.HijriCalendar.Eras" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetYear">
      <MemberSignature Language="C#" Value="public override int GetYear (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetYear(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetYear (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetYear(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
        <summary>返回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
        <returns>一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的年份。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例显示几个组成部分的值<xref:System.DateTime>方面回历。  
  
 [!code-cpp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CPP/hijricalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/CS/hijricalendar_addget.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_AddGet/VB/hijricalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Year" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)" />
        <altmember cref="M:System.Globalization.Calendar.GetHour(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetMinute(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetSecond(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="HijriAdjustment">
      <MemberSignature Language="C#" Value="public int HijriAdjustment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HijriAdjustment" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.HijriCalendar.HijriAdjustment" />
      <MemberSignature Language="VB.NET" Value="Public Property HijriAdjustment As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HijriAdjustment { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在日历中添加或减去的天数，以适应斋月的开头和结尾的差异以及国家/地区间的日期差别。</summary>
        <value>-2 到 2 之间的一个整数，表示要在日历中添加或减去的天数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此实现的<xref:System.Globalization.HijriCalendar>类通过增加或减少一个介于 0 到 2 天，若要容纳开始和结束的斋月的方差，并以适应日期之差国家/地区调整日历日期。 该值存储在<xref:System.Globalization.HijriCalendar.HijriAdjustment%2A>属性。 如果<xref:System.Globalization.HijriCalendar.HijriAdjustment%2A>未显式，它可从控制面板的区域和语言选项部分中的设置中派生其值并将其存储在注册表值 HKEY_CURRENT_USER\Control Panel\International\AddHijriDate 设置。 但是，该信息可以更改的生命周期内<xref:System.AppDomain>。 <xref:System.Globalization.HijriCalendar>类不会检测系统设置中的更改自动。  
  
   
  
## Examples  
 下面的代码示例演示如何<xref:System.Globalization.HijriCalendar.HijriAdjustment%2A>会影响日期。  
  
 [!code-cpp[System.Globalization.HijriCalendar.HijriAdjustment#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.HijriAdjustment/CPP/hijriadjustment.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar.HijriAdjustment#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.HijriAdjustment/CS/hijriadjustment.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar.HijriAdjustment#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.HijriAdjustment/VB/hijriadjustment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">属性设置为无效值。</exception>
      </Docs>
    </Member>
    <Member MemberName="HijriEra">
      <MemberSignature Language="C#" Value="public static readonly int HijriEra;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 HijriEra" />
      <MemberSignature Language="DocId" Value="F:System.Globalization.HijriCalendar.HijriEra" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HijriEra As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly int HijriEra;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示当前纪元。 此字段为常数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Globalization.HijriCalendar.HijriEra>字段为 1。  
  
 在伊斯兰日历识别一个纪元： 纪元 (拉丁"Anno Hegirae"，这意味着"year 的迁移后，"关于迁移的穆罕默德 (PBUH) 从麦加迁)。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="P:System.Globalization.HijriCalendar.Eras" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapDay">
      <MemberSignature Language="C#" Value="public override bool IsLeapDay (int year, int month, int day, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsLeapDay (year As Integer, month As Integer, day As Integer, era As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsLeapDay(int year, int month, int day, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">一个整数，用于表示年份。</param>
        <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
        <param name="day">1 到 30 之间的一个整数，用于表示月中日期。</param>
        <param name="era">一个整数，用于表示纪元。</param>
        <summary>确定指定的日期是否为闰日。</summary>
        <returns>
          如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在为被 30、 第二次、 5、 7、 10、 13、 16、 18、 21、 24 整除的年份结束每 30 年周期，26 和 29 年是闰年。 平年有 354 天，闰年有 355 天。  
  
 闰日是仅在闰年中发生了一天。 回历，在闰年的 30 天是唯一的闰日。  
  
   
  
## Examples  
 下面的代码示例调用`IsLeapDay`五年中每个纪元的第二个月份 （年 2 月） 的最后一天的方法。  
  
 [!code-cpp[System.Globalization.HijriCalendar.IsLeapDay#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.IsLeapDay/CPP/hijricalendar_isleapday.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar.IsLeapDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.IsLeapDay/CS/hijricalendar_isleapday.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar.IsLeapDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.IsLeapDay/VB/hijricalendar_isleapday.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> 超出了此日历支持的范围。  
  
 或  
  
 <paramref name="year" /> 超出了此日历支持的范围。  
  
 或  
  
 <paramref name="month" /> 超出了此日历支持的范围。  
  
 或  
  
 <paramref name="day" /> 超出了此日历支持的范围。</exception>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="F:System.Globalization.HijriCalendar.HijriEra" />
        <altmember cref="P:System.Globalization.HijriCalendar.Eras" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapMonth">
      <MemberSignature Language="C#" Value="public override bool IsLeapMonth (int year, int month, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapMonth(int32 year, int32 month, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsLeapMonth (year As Integer, month As Integer, era As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsLeapMonth(int year, int month, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">一个整数，用于表示年份。</param>
        <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
        <param name="era">一个整数，用于表示纪元。</param>
        <summary>确定指定纪元年份中的指定月份是否为闰月。</summary>
        <returns>此方法始终返回 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在为被 30、 第二次、 5、 7、 10、 13、 16、 18、 21、 24 整除的年份结束每 30 年周期，26 和 29 年是闰年。 平年有 354 天，闰年有 355 天。  
  
 闰月是仅在闰年中发生的整月。 回历没有闰月。  
  
   
  
## Examples  
 下面的代码示例调用`IsLeapMonth`当前纪元中的五年中的所有每月。  
  
 [!code-cpp[System.Globalization.HijriCalendar.IsLeapMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.IsLeapMonth/CPP/hijricalendar_isleapmonth.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar.IsLeapMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.IsLeapMonth/CS/hijricalendar_isleapmonth.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar.IsLeapMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.IsLeapMonth/VB/hijricalendar_isleapmonth.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> 超出了此日历支持的范围。  
  
 或  
  
 <paramref name="year" /> 超出了此日历支持的范围。  
  
 或  
  
 <paramref name="month" /> 超出了此日历支持的范围。</exception>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="F:System.Globalization.HijriCalendar.HijriEra" />
        <altmember cref="P:System.Globalization.HijriCalendar.Eras" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public override bool IsLeapYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapYear(int32 year, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsLeapYear (year As Integer, era As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsLeapYear(int year, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">一个整数，用于表示年份。</param>
        <param name="era">一个整数，用于表示纪元。</param>
        <summary>确定指定纪元中的指定年份是否为闰年。</summary>
        <returns>
          如果指定的年是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在为被 30、 第二次、 5、 7、 10、 13、 16、 18、 21、 24 整除的年份结束每 30 年周期，26 和 29 年是闰年。 平年有 354 天，闰年有 355 天。  
  
   
  
## Examples  
 下面的代码示例调用`IsLeapYear`五年中每个纪元的方法。  
  
 [!code-cpp[System.Globalization.HijriCalendar.IsLeapYear#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.IsLeapYear/CPP/hijricalendar_isleapyear.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.IsLeapYear/CS/hijricalendar_isleapyear.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.IsLeapYear/VB/hijricalendar_isleapyear.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> 超出了此日历支持的范围。  
  
 或  
  
 <paramref name="year" /> 超出了此日历支持的范围。</exception>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="F:System.Globalization.HijriCalendar.HijriEra" />
        <altmember cref="P:System.Globalization.HijriCalendar.Eras" />
        <altmember cref="M:System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MaxSupportedDateTime">
      <MemberSignature Language="C#" Value="public override DateTime MaxSupportedDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime MaxSupportedDateTime" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.HijriCalendar.MaxSupportedDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MaxSupportedDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property DateTime MaxSupportedDateTime { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此日历支持的最晚日期和时间。</summary>
        <value>最新的日期和时间受<see cref="T:System.Globalization.HijriCalendar" />类型，等效于的那一刻年 12 月 31 日公元 9999 年 在公历日历中。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 公元 9999 年 12 月 31 日 等效于在伊斯兰日历中每 9666 年的第四个月的第三天。  
  
   
  
## Examples  
 下面的代码示例获取的最小值和日历的最大值。  
  
 [!code-cpp[System.Globalization.HijriCalendar_MinMax#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_MinMax/CPP/hijricalendar_minmax.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar_MinMax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_MinMax/CS/hijricalendar_minmax.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar_MinMax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_MinMax/VB/hijricalendar_minmax.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinSupportedDateTime">
      <MemberSignature Language="C#" Value="public override DateTime MinSupportedDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime MinSupportedDateTime" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.HijriCalendar.MinSupportedDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MinSupportedDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property DateTime MinSupportedDateTime { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此日历支持的最早日期和时间。</summary>
        <value>最早的日期和时间受<see cref="T:System.Globalization.HijriCalendar" />类型，等效于公元 622 年 7 月 18 日的那一刻 在公历日历中。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft Visual Basic 表示时间上支持的最小日期的指定时间作为<xref:System.DateTime>类型，即公元 0001 年 1 月 1 日 但是，<xref:System.Globalization.HijriCalendar>类型不支持该最小日期。 因此，如果调用方法，以设置使用当前日历时间的格式，但未指定的格式说明符，格式设置将使用 ISO 8601 可排序的 ("s") 日期/时间模式而不是默认常规 ("G") 日期/时间模式的格式说明符格式说明符。 有关详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)。  
  
   
  
## Examples  
 下面的代码示例获取的最小值和日历的最大值。  
  
 [!code-cpp[System.Globalization.HijriCalendar_MinMax#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_MinMax/CPP/hijricalendar_minmax.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar_MinMax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_MinMax/CS/hijricalendar_minmax.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar_MinMax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar_MinMax/VB/hijricalendar_minmax.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToDateTime (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, era As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">一个整数，用于表示年份。</param>
        <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
        <param name="day">1 到 30 之间的一个整数，用于表示月中日期。</param>
        <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
        <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
        <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
        <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
        <param name="era">一个整数，用于表示纪元。</param>
        <summary>返回设置为指定的日期、时间和纪元的 <see cref="T:System.DateTime" />。</summary>
        <returns>设置为当前纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> 超出了此日历支持的范围。  
  
 或  
  
 <paramref name="year" /> 超出了此日历支持的范围。  
  
 或  
  
 <paramref name="month" /> 超出了此日历支持的范围。  
  
 或  
  
 <paramref name="day" /> 超出了此日历支持的范围。  
  
 或  
  
 <paramref name="hour" /> 小于 0 或大于 23。  
  
 或  
  
 <paramref name="minute" /> 小于 0 或大于 59。  
  
 或  
  
 <paramref name="second" /> 小于 0 或大于 59。  
  
 或  
  
 <paramref name="millisecond" /> 小于 0 或大于 999。</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="F:System.Globalization.HijriCalendar.HijriEra" />
        <altmember cref="P:System.Globalization.HijriCalendar.Eras" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ToFourDigitYear">
      <MemberSignature Language="C#" Value="public override int ToFourDigitYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ToFourDigitYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.HijriCalendar.ToFourDigitYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToFourDigitYear (year As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ToFourDigitYear(int year);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">一个两位数或四位数的整数，用于表示要转换的年份。</param>
        <summary>使用 <see cref="P:System.Globalization.HijriCalendar.TwoDigitYearMax" /> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
        <returns>包含 <paramref name="year" /> 的四位数表示形式的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A> 是可以用两位数年份表示的 100 年范围内的最后一年。 通过查找两位数字的唯一匹配项来确定世纪`year`该 100 年范围内。 例如，如果<xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A>设置为 1429，则 100 年范围是从 1330年为 1429年; 因此，为 30 的 2 位值被解释为 1330，而 29 一个 2 位数字值被解释为 1429年。  
  
 <xref:System.Globalization.HijriCalendar.ToFourDigitYear%2A> 支持两位数年份或四位数年份。 将两位数年份值 (小于 100) 传递会导致方法的值转换为一个四位数字值根据<xref:System.Globalization.HijriCalendar.TwoDigitYearMax%2A>值，该值表示相应的纪元。 如果应用程序提供在支持的日历范围到内的四位数年份值<xref:System.Globalization.HijriCalendar.ToFourDigitYear%2A>，该方法返回实际的输入的值。 如果应用程序提供一个四位数字值超出了支持的日历，或者它提供了负值，则该方法将引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> 超出了此日历支持的范围。</exception>
        <altmember cref="P:System.Globalization.HijriCalendar.TwoDigitYearMax" />
      </Docs>
    </Member>
    <Member MemberName="TwoDigitYearMax">
      <MemberSignature Language="C#" Value="public override int TwoDigitYearMax { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TwoDigitYearMax" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.HijriCalendar.TwoDigitYearMax" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property TwoDigitYearMax As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TwoDigitYearMax { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
        <value>可以用两位数年份表示的 100 年范围内的最后一年。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性允许两位数年份，要正确转换为 4 位数年份。 例如，如果此属性设置为 1429年，100 年范围是从 1330年为 1429年。 因此，为 30 的 2 位值被解释为 1330，而 29 一个 2 位数字值被解释为 1429年。  
  
 此属性的初始值被派生自控制面板的区域和语言选项部分中的设置。 但是，该信息可以更改的生命周期内<xref:System.AppDomain>。 <xref:System.Globalization.HijriCalendar>类不会检测系统设置中的更改自动。  
  
 应用程序应将此值设置为 99，以指示按字面解释 2 位数字的年份。 例如，如果此属性设置为 99，100 年范围为 0 （不是有效值对于大多数日历而言） 和 99 之间。 因此，为 30 的 2 位值被解释为 30。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此日历为只读。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">设置操作中的值小于 100 或大于 9666。</exception>
        <altmember cref="M:System.Globalization.HijriCalendar.ToFourDigitYear(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>