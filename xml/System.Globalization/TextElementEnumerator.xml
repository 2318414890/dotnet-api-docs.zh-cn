<Type Name="TextElementEnumerator" FullName="System.Globalization.TextElementEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cbf8e17410599af369261ad8f54a24ddedaa1f83" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52375886" /></Metadata><TypeSignature Language="C#" Value="public class TextElementEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TextElementEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.TextElementEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class TextElementEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextElementEnumerator : System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type TextElementEnumerator = class&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>枚举字符串的文本元素。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 作为一个单元显示为单个字符，即，字形的文本定义的文本元素。 一个文本元素可以是以下任一项：  
  
-   表示为单个基字符<xref:System.Char>值。 例如，拉丁文大写字母字母 (u+0041) 和拉丁文小写字母 AE (U + 00E6) 是基本的字符。  
  
-   组合字符序列，其中包含基本字符和一个或多个组合字符。 例如，示例中，LATIN CAPITAL LETTER (u+0041) 后, 跟组合长音符 (U + 0304) 是组合字符序列。  
  
-   代理项对，其中[Unicode 标准](https://go.microsoft.com/fwlink/?linkid=37123)定义为包含两个代码单元的一系列的单一抽象字符的编码的字符集表示形式： 高代理项和低代理项。 代理项对用于表示为 utf-16 编码字符 Unicode 基本多文种平面之外的字符。 例如，UTF 16 编码作为其值是 0xD800 一个高代理项以及其值是 0xDF43 的低代理项中表示文字母 SAUIL (U + 10343)。 代理项对可以表示基字符或组合字符。  
  
 <xref:System.Globalization.TextElementEnumerator>类可用于处理字符串中的文本元素，而不是一个<xref:System.Char>对象。  
  
 实例化<xref:System.Globalization.TextElementEnumerator>对象，表示通过连接到的字符串表示特定字符串<xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType>方法。 这将返回的枚举数放在字符串中的第一个文本元素之前。 调用<xref:System.Globalization.TextElementEnumerator.Reset%2A>方法也会枚举数放回此位置。 因为这表示无效状态，因此必须调用<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>读取的值之前将枚举数前移到字符串的第一个文本元素<xref:System.Globalization.TextElementEnumerator.Current%2A>属性以返回当前文本元素。  
  
 使用时<xref:System.Globalization.TextElementEnumerator>对象，你需要负责定位枚举器。 <xref:System.Globalization.TextElementEnumerator.Current%2A>属性返回相同的文本元素，直到您调用<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>或<xref:System.Globalization.TextElementEnumerator.Reset%2A>。 枚举器处于无效状态，如果它位于第一个文本元素之前或之后在字符串中最后一个文本元素。 尝试检索的值时该枚举数将处于无效状态，<xref:System.Globalization.TextElementEnumerator.Current%2A>属性引发异常。 您可以确定枚举器是否处于无效状态的测试是否的返回值<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>属性是`false`。  
  
 <xref:System.Globalization.TextElementEnumerator>对象表示的字符串变量或字符串文本在时间点的当前状态的快照的<xref:System.Globalization.TextElementEnumerator>实例化对象。 请注意：  
  
-   文本元素的枚举器仅用于读取字符串中的数据。 它们不能修改基础字符串。  
  
-   一个枚举器没有字符串，它表示对独占访问权限。 创建枚举器后，可以修改字符串变量。  
  
-   一个<xref:System.Globalization.TextElementEnumerator>对象枚举在字符串中时显示的文本元素的<xref:System.Globalization.TextElementEnumerator>对象实例化。 如果以后修改该变量，它不反映到字符串变量的任何后续更改。  
  
-   因为<xref:System.Globalization.TextElementEnumerator>类不重写<xref:System.Object.Equals%2A?displayProperty=nameWithType>、 两个<xref:System.Globalization.TextElementEnumerator>对象表示相同的字符串将被视为不相等。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Globalization.TextElementEnumerator>类来枚举字符串的文本元素。  
  
 [!code-cpp[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/CPP/tee_summary.cpp#1)]
 [!code-csharp[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/CS/tee_summary.cs#1)]
 [!code-vb[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/VB/tee_summary.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.StringInfo" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public object Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Current" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextElementEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : obj" Usage="System.Globalization.TextElementEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取字符串中的当前文本元素。</summary>
        <value>包含字符串中当前文本元素的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建一个枚举器或<xref:System.Globalization.TextElementEnumerator.Reset%2A>调用时，<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>枚举数前移到字符串的第一个文本元素，读取的值之前必须调用<xref:System.Globalization.TextElementEnumerator.Current%2A>。 否则为<xref:System.Globalization.TextElementEnumerator.Current%2A>是不确定的。  
  
 <xref:System.Globalization.TextElementEnumerator.Current%2A> 此外会引发异常，如果最后一次调用到<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>返回`false`，这指示字符串的末尾。  
  
 <xref:System.Globalization.TextElementEnumerator.Current%2A> 不会移动位置的枚举器，并对连续调用<xref:System.Globalization.TextElementEnumerator.Current%2A>直到返回同一对象<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>或<xref:System.Globalization.TextElementEnumerator.Reset%2A>调用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">枚举数位于字符串的第一个文本元素之前或最后一个文本元素之后。</exception>
        <altmember cref="M:System.Globalization.TextElementEnumerator.GetTextElement" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.ElementIndex" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.MoveNext" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="ElementIndex">
      <MemberSignature Language="C#" Value="public int ElementIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ElementIndex" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextElementEnumerator.ElementIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElementIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ElementIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementIndex : int" Usage="System.Globalization.TextElementEnumerator.ElementIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取枚举数当前置于其上的文本元素的索引。</summary>
        <value>枚举数当前置于其上的文本元素的索引。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">枚举数位于字符串的第一个文本元素之前或最后一个文本元素之后。</exception>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.GetTextElement" />
      </Docs>
    </Member>
    <Member MemberName="GetTextElement">
      <MemberSignature Language="C#" Value="public string GetTextElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTextElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.GetTextElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextElement () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTextElement();" />
      <MemberSignature Language="F#" Value="member this.GetTextElement : unit -&gt; string" Usage="textElementEnumerator.GetTextElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取字符串中的当前文本元素。</summary>
        <returns>一个包含所读取的字符串中当前文本元素的新字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回相同的文本元素作为<xref:System.Globalization.TextElementEnumerator.Current%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">枚举数位于字符串的第一个文本元素之前或最后一个文本元素之后。</exception>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.ElementIndex" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="textElementEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将枚举数前移到字符串的下一个文本元素。</summary>
        <returns>如果枚举数成功前移到下一个文本元素，则为 <see langword="true" />；如果枚举数已超过字符串的结尾，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建一个枚举器或<xref:System.Globalization.TextElementEnumerator.Reset%2A>是调用，枚举数位于字符串，并在首次调用的第一个文本元素之前<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>将枚举数移到字符串的第一个文本元素上。  
  
 如果创建此枚举器之后, 修改字符串<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>将引发异常。  
  
 字符串的末尾是传递，因为在后续调用后<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>返回`false`直到<xref:System.Globalization.TextElementEnumerator.Reset%2A>调用。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="textElementEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将枚举数设置为其初始位置，该位置位于字符串中第一个文本元素之前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.TextElementEnumerator.Reset%2A>方法将枚举数移到前的第一个文本元素的字符串开头。 在调用<xref:System.Globalization.TextElementEnumerator.Reset%2A>，必须调用<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>将枚举数前移到字符串之前调用的第一个文本元素<xref:System.Globalization.TextElementEnumerator.Current%2A>读取第一个文本元素的值。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.TextElementEnumerator.MoveNext" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
      </Docs>
    </Member>
  </Members>
</Type>