<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="57a3f1970833b876294c8fd9ac91b8e658233e24" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37655169" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <TypeSignature Language="F#" Value="type IdnMapping = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Internet 域名包含名为域名标签，由标签分隔符分隔的一个或多个部分。 例如，域名称"www.proseware.com"包含标签、"www"、"proseware"和"com"，用句点分隔的。 标准域名包含 US ASCII （或基本拉丁文） 字符范围，从 u+0021 到 U + 007E 中的指定字符。 为了便于在不使用 US ASCII 字符集的域名中的应用程序 (IDNA) 的区域性中的 Internet 使用标准已采用 2003 来支持包含 US-ASCII 字符范围以外的 Unicode 字符。 但是，名称服务器和域名解析仍依赖于 US-ASCII 字符范围内的字符。  
  
 IDNA 机制使用 Punycode 映射国际化的域名包含 US-ASCII 字符范围到域名系统支持的 US-ASCII 字符范围以外的 Unicode 字符。 IDNA 机制用于仅将域名转换，不在 Internet 上传输的数据。  
  
> [!IMPORTANT]
>  在中[!INCLUDE[net_v45](~/includes/net-v45-md.md)]，则<xref:System.Globalization.IdnMapping>类支持基于 IDNA 标准，具体取决于正在使用的操作系统的不同版本：  
>   
>  -   运行时[!INCLUDE[win8](~/includes/win8-md.md)]，它支持基于 IDNA 标准中所述的 2008年版本[RFC 5891： 国际化域名中的应用程序 (IDNA): 协议](http://go.microsoft.com/fwlink/?LinkId=231875)。  
> -   当早期版本的 Windows 操作系统上运行，它支持 2003年版本的中所述的标准[RFC 3490： 国际化域名中的应用程序 (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110)。  
>   
>  请参阅[Unicode 技术标准 #46: IDNA 兼容性处理](http://go.microsoft.com/fwlink/?LinkId=232459)这些标准的差异的方式处理某一组字符。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType>方法规范化的域名，将规范化的名称转换为包含 US ASCII 码位范围 (U + 0020 至 U + 007E)，可显示 Unicode 字符和前面添加一个 ASCII 兼容编码 (ACE) 前缀的表示形式 ("xn-") 向每个标签。 <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType>方法将还原由转换的域名标签<xref:System.Globalization.IdnMapping.GetAscii%2A>方法。  
  
 如果要转换的字符串中包含标签分隔符字符象形完全停止 (U + 3002)，全角完全停止 (U + FF0E) 和形字句 (U + FF61)<xref:System.Globalization.IdnMapping.GetAscii%2A>方法将其转换为标签分隔符完全停止 （句点，U +002E)。 <xref:System.Globalization.IdnMapping.GetUnicode%2A>方法，但是，不会还原原始标签分隔符字符。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法将数组转换为国际化域名到 Punycode。 <xref:System.Globalization.IdnMapping.GetUnicode%2A>方法然后转换的 Punycode 域名返回到原始域名，但用标准标签分隔符替换原始标签分隔符。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>所有公共方法<see cref="T:System.Globalization.IdnMapping" />都是线程安全的可能从多个线程，只要同时使用<see cref="T:System.Globalization.IdnMapping" />实例的属性也设置不同时。</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Globalization.IdnMapping" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType>并<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType>属性初始化为`false`。 ASCII 字符 A-Z、 0-9、 连字符 （-） 之外的一小部分字符 (U + 002D)，和句点 （.） 字符允许在域的名称，但不是未分配的 Unicode 码位。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUnassigned : bool with get, set" Usage="System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether unassigned Unicode code points are used in operations performed by members of the current <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
        <value>
          <see langword="true" /> 如果在操作; 使用未分配的码点否则为<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 已注册的域名不能包含未分配的码位。 因此，默认值<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>属性是`false`。 IDNA 规范匹配的字符串的查询中仅允许未分配的码位 (即，在域的名称查找)。 未分配的码位域的名称中使用的详细信息，请参阅[RFC 3454、"准备的国际化字符串 (stringprep)"](http://go.microsoft.com/fwlink/?LinkId=231873)和[RFC 5891、"国际化域名在应用程序 （IDNA): 协议"](http://go.microsoft.com/fwlink/?LinkId=231875)。  
  
> [!IMPORTANT]
>  如果<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>属性是`false`，与属性关联的行为取决于基础操作系统上。 上[!INCLUDE[win8](~/includes/win8-md.md)]，则<xref:System.Globalization.IdnMapping>类符合 IDNA 2008，基于 Unicode 6.0 的标准。 在以前版本的 Windows，<xref:System.Globalization.IdnMapping>类，根据 IDNA 2003 年，Unicode 3 为基础。*x*。 已在 IDNA 2003 未分配的码位分配了字符和 IDNA 2008 支持。 例如，U + 0221年是在 Unicode 4.0 中引入的。 在[!INCLUDE[win8](~/includes/win8-md.md)]，编码为"xn — 6la"。 在以前版本的 Windows，则会引发<xref:System.ArgumentException>异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="idnMapping.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare to the current object.</param>
        <summary>Indicates whether a specified object and the current <see cref="T:System.Globalization.IdnMapping" /> object are equal.</summary>
        <returns>
          <see langword="true" /> if the object specified by the <paramref name="obj" /> parameter is derived from <see cref="T:System.Globalization.IdnMapping" /> and its <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties are equal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Encodes a string of domain name labels that include Unicode characters outside the US-ASCII character range to a string of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E). The string is formatted according to the IDNA standard.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string -&gt; string" Usage="idnMapping.GetAscii unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
        <summary>Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range. The string is formatted according to the IDNA standard.</summary>
        <returns>The equivalent of the string specified by the <paramref name="unicode" /> parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `unicode`参数指定有效的 Unicode 字符组成的一个或多个标签的字符串。 标签由标签分隔符分隔。 `unicode`参数不能以开头的标签分隔符，但它可以包括并根据需要以分隔符结尾。 标签分隔符是完全停止 (时间段，U + 002E)、 表意字符完全停止 (U + 3002)，全角完全停止 (U + FF0E) 和形字句 (U + FF61)。 例如，域名称"www.adatum.com"包含标签、"www"、"adatum"和"com"，用句点分隔的。  
  
 标签不能包含任何以下字符：  
  
-   从 U + U + 001F 和 U + 007F 0001 Unicode 控制字符。  
  
-   如果未分配 Unicode 字符的值<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>属性是`false`。  
  
-   非标准字符在 US-ASCII 字符范围，例如空间 (U + 0020)，感叹号标记 (U + 0021)，和如果低行 (U + 005F) 字符的值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性是`true`。  
  
-   禁止的特定版本的基于 IDNA 标准的字符。 有关禁用的字符的详细信息，请参阅[RFC 3454： 准备的国际化字符串 ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 和[RFC 5982: Unicode 码位和国际化域名应用程序](http://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>方法将所有标签分隔符都转换为完全停止 (时间段，U + 002E)。  
  
 如果`unicode`不包含任何字符之外的 US-ASCII 字符范围和 US-ASCII 字符范围内的任何字符禁止的该方法返回`unicode`不变。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>方法将数组转换为国际化域名到 punycode 编码，这是在 US-ASCII 字符范围的字符组成的编码等效项。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29>方法然后转换为 Punycode 域名返回原始域名，但用标准标签分隔符替换原始标签分隔符。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[net_v45](~/includes/net-v45-md.md)]，<see cref="T:System.Globalization.IdnMapping" />类支持基于 IDNA 标准，具体取决于正在使用的操作系统的不同版本:-运行时 [！它支持基于 IDNA 标准中所述的 2008年版本 INCLUDE[win8](~/includes/win8-md.md)]，[RFC 5891： 国际化域名中的应用程序 (IDNA): 协议] (http://go.microsoft.com/fwlink/?LinkId=231875)。 -当早期版本的 Windows 操作系统上运行，它支持中所述的标准的 2003年版本 [RFC 3490： 国际化域名中的应用程序 (IDNA)] (http://go.microsoft.com/fwlink/?LinkId=158110)。请参阅 [Unicode 技术标准 #46: IDNA 兼容性处理] (http://go.microsoft.com/fwlink/?LinkId=232459)这些标准的差异的方式处理某一组字符。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
        <param name="index">A zero-based offset into <c>unicode</c> that specifies the start of the substring to convert. The conversion operation continues to the end of the <c>unicode</c> string.</param>
        <summary>Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</summary>
        <returns>The equivalent of the substring specified by the <paramref name="unicode" /> and <paramref name="index" /> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `unicode`和`index`参数定义使用有效的 Unicode 字符组成的一个或多个标签的子字符串。 标签由标签分隔符分隔。 子字符串的第一个字符不能以开头的标签分隔符，但它可以包括并根据需要以分隔符结尾。 标签分隔符是完全停止 (时间段，U + 002E)、 表意字符完全停止 (U + 3002)，全角完全停止 (U + FF0E) 和形字句 (U + FF61)。 例如，域名称"www.adatum.com"包含标签、"www"、"adatum"和"com"，用句点分隔的。  
  
 标签不能包含任何以下字符：  
  
-   从 U + U + 001F 和 U + 007F 0001 Unicode 控制字符。  
  
-   未分配的 Unicode 字符，具体取决于值<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>属性。  
  
-   非标准字符在 US-ASCII 字符范围，例如空间 (U + 0020)、 感叹号标记 (U + 0021)，和低行 (U + 005F) 字符，具体取决于值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性。  
  
-   禁止的特定版本的基于 IDNA 标准的字符。 有关禁用的字符的详细信息，请参阅[RFC 3454： 准备的国际化字符串 ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 和[RFC 5982: Unicode 码位和国际化域名应用程序](http://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>方法将所有标签分隔符都转换为完全停止 (时间段，U + 002E)。  
  
 如果`unicode`不包含任何字符之外的 US-ASCII 字符范围和 US-ASCII 字符范围内的任何字符禁止的该方法返回`unicode`不变。  
  
   
  
## Examples  
 以下示例将删除本地部分和 @ 从电子邮件地址，并将传递字符生成的域命名为<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29>方法来创建 Punycode 域名，这是在 US ASCII 字符组成的编码等效项字符范围。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法然后转换为 Punycode 域名返回原始域名，但用标准标签分隔符替换原始标签分隔符。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="unicode" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[net_v45](~/includes/net-v45-md.md)]，<see cref="T:System.Globalization.IdnMapping" />类支持基于 IDNA 标准，具体取决于正在使用的操作系统的不同版本:-运行时 [！它支持基于 IDNA 标准中所述的 2008年版本 INCLUDE[win8](~/includes/win8-md.md)]，[RFC 5891： 国际化域名中的应用程序 (IDNA): 协议] (http://go.microsoft.com/fwlink/?LinkId=231875)。 -当早期版本的 Windows 操作系统上运行，它支持中所述的标准的 2003年版本 [RFC 3490： 国际化域名中的应用程序 (IDNA)] (http://go.microsoft.com/fwlink/?LinkId=158110)。请参阅 [Unicode 技术标准 #46: IDNA 兼容性处理] (http://go.microsoft.com/fwlink/?LinkId=232459)这些标准的差异的方式处理某一组字符。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
        <param name="index">A zero-based offset into <c>unicode</c> that specifies the start of the substring.</param>
        <param name="count">The number of characters to convert in the substring that starts at the position specified by  <c>index</c> in the <c>unicode</c> string.</param>
        <summary>Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</summary>
        <returns>The equivalent of the substring specified by the <paramref name="unicode" />, <paramref name="index" />, and <paramref name="count" /> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Unicode`， `index`，和`count`参数定义使用有效的 Unicode 字符组成的一个或多个标签的子字符串。 标签由标签分隔符分隔。 子字符串的第一个字符不能以开头的标签分隔符，但它可以包括并根据需要以分隔符结尾。 标签分隔符是完全停止 (时间段，U + 002E)、 表意字符完全停止 (U + 3002)，全角完全停止 (U + FF0E) 和形字句 (U + FF61)。 例如，域名称"www.adatum.com"包含标签、"www"、"adatum"和"com"，用句点分隔的。  
  
 标签不能包含任何以下字符：  
  
-   从 U + U + 001F 和 U + 007F 0001 Unicode 控制字符。  
  
-   未分配的 Unicode 字符，具体取决于值<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>属性。  
  
-   非标准字符在 US-ASCII 字符范围，例如空间 (U + 0020)、 感叹号标记 (U + 0021)，和低行 (U + 005F) 字符，具体取决于值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性。  
  
-   禁止的特定版本的基于 IDNA 标准的字符。 有关禁用的字符的详细信息，请参阅[RFC 3454： 准备的国际化字符串 ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 和[RFC 5982: Unicode 码位和国际化域名应用程序](http://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>方法将所有标签分隔符都转换为完全停止 (时间段，U + 002E)。 如果子字符串包含 US-ASCII 字符范围以外的任何字符，并且不禁止使用 US-ASCII 字符范围内的任何字符，该方法返回未更改的子字符串。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法将转换为符合 IDNA 标准的域名的国际化的域名。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法然后标准化的域名会将转换回原始域名，但用标准标签分隔符替换原始标签分隔符。  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="unicode" />.  -or-  <paramref name="index" /> is greater than the length of <paramref name="unicode" /> minus <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
        <block subset="none" type="usage">
          <para>在 [！INCLUDE[net_v45](~/includes/net-v45-md.md)]，<see cref="T:System.Globalization.IdnMapping" />类支持基于 IDNA 标准，具体取决于正在使用的操作系统的不同版本:-运行时 [！它支持基于 IDNA 标准中所述的 2008年版本 INCLUDE[win8](~/includes/win8-md.md)]，[RFC 5891： 国际化域名中的应用程序 (IDNA): 协议] (http://go.microsoft.com/fwlink/?LinkId=231875)。 -当早期版本的 Windows 操作系统上运行，它支持中所述的标准的 2003年版本 [RFC 3490： 国际化域名中的应用程序 (IDNA)] (http://go.microsoft.com/fwlink/?LinkId=158110)。请参阅 [Unicode 技术标准 #46: IDNA 兼容性处理] (http://go.microsoft.com/fwlink/?LinkId=232459)这些标准的差异的方式处理某一组字符。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="idnMapping.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a hash code for this <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
        <returns>One of four 32-bit signed constants derived from the properties of an <see cref="T:System.Globalization.IdnMapping" /> object.  The return value has no special meaning and is not suitable for use in a hash code algorithm.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重写<xref:System.Globalization.IdnMapping.GetHashCode%2A>方法如果你的应用程序需要实现一种有意义的哈希代码算法。  
  
   
  
## Examples  
 下面的示例假定一个字符串可以包含多个由空格分隔的电子邮件地址。 它会删除本地部分和生成的域命名的 @ 字符从每个电子邮件地址，并传递<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29>或<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法来创建 Punycode 域名。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法然后转换回原始域名的 Punycode 域名。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Decodes one or more domain name labels encoded according to the IDNA standard to a string of Unicode characters.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string -&gt; string" Usage="idnMapping.GetUnicode ascii" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
        <summary>Decodes a string of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
        <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关域的名称、 标签和标签分隔符的详细信息，请参阅备注<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>方法将数组转换为国际化域名到 Punycode。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29>方法然后转换为 Punycode 域名返回原始域名，但用标准标签分隔符替换原始标签分隔符。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
        <param name="index">A zero-based offset into <c>ascii</c> that specifies the start of the substring to decode. The decoding operation continues to the end of the <c>ascii</c> string.</param>
        <summary>Decodes a substring of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
        <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" /> and <paramref name="index" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关域的名称、 标签和标签分隔符的详细信息，请参阅备注<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="ascii" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
        <param name="index">A zero-based offset into <c>ascii</c> that specifies the start of the substring.</param>
        <param name="count">The number of characters to convert in the substring that starts at the position specified by <c>index</c> in the <c>ascii</c> string.</param>
        <summary>Decodes a substring of a specified length that contains one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
        <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" />, <paramref name="index" />, and <paramref name="count" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关域的名称、 标签和标签分隔符的详细信息，请参阅备注<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="ascii" />.  -or-  <paramref name="index" /> is greater than the length of <paramref name="ascii" /> minus <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseStd3AsciiRules : bool with get, set" Usage="System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether standard or relaxed naming conventions are used in operations performed by members of the current <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
        <value>
          <see langword="true" /> 如果操作; 中使用标准命名约定否则为<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 遵循标准的命名规则的域名包含 US-ASCII 字符范围中的字符的特定子集。 字符是字母 A 到 Z、 数字 0-9、 连字符 （-） 字符 (U + 002D) 和句点 （.） 字符。 字符的大小写并不重要。 宽松命名约定允许使用更广泛的 ASCII 字符，包括空格字符 (U + 0020)、 感叹号字符 (U + 0021)，和的下划线字符 (U + 005F)。 如果<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>是`true`，只有标准字符可以出现在由返回的标签<xref:System.Globalization.IdnMapping.GetAscii%2A>方法。  
  
 默认情况下的值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性是`false`，并在标签中允许使用扩展的 ASCII 字符的子集。  
  
> [!NOTE]
>  <xref:System.Globalization.IdnMapping>类禁止不可字符 u+0000 到 U + 001F，使用和 U + 007F 中的域名标签而不考虑的设置<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性。 此禁止降低安全攻击等名称欺骗攻击的风险。  
  
   
  
## Examples  
 下面的示例生成包含从 u+0000 到 U + 007F 的 ASCII 范围中的字符的 Url，并将它们传递到<xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>方法的两个<xref:System.Globalization.IdnMapping>对象。 一个对象具有其<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性设置为`true`，和另一个对象已将其设置为`false`。 输出会显示是无效的字符<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性是`true`时才是有效但`false`。  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>