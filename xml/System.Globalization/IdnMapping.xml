<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2c33b447d1b6b540dc51dbe6d103121116d01261" />
    <Meta Name="ms.sourcegitcommit" Value="3507e865a3613c00760f25ad1045aaa11bae4dd8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/23/2018" />
    <Meta Name="ms.locfileid" Value="31780522" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>支持 Internet 域名使用非 ASCII 字符。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Internet 域名包含称为域名标签，由标签分隔符分隔的一个或多个部分。 例如，域名称"www.proseware.com"组成标签、"www"、"proseware"和"com"，用句点分隔。 标准域名包含 US ASCII （或基本拉丁文） 字符范围，从 U + 0021 到 U + 007E 内的指定字符。 为了便于在不使用 US ASCII 字符集，国际化域名在应用程序 (IDNA) 的区域性的 Internet 使用标准已采用 2003 来支持包含 US-ASCII 字符范围外的 Unicode 字符。 但是，名称服务器和域名解析继续依赖于 US-ASCII 字符范围内的字符。  
  
 IDNA 机制使用 Punycode 映射国际化的域名包含对支持的域名系统的 US-ASCII 字符范围 US-ASCII 字符范围外的 Unicode 字符。 IDNA 机制用于将转换仅域名称，不在 Internet 上传输的数据。  
  
> [!IMPORTANT]
>  在[!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<xref:System.Globalization.IdnMapping>类支持不同版本的 IDNA 标准，具体取决于正在使用的操作系统：  
>   
>  -   在上运行时[!INCLUDE[win8](~/includes/win8-md.md)]，它支持通过概述 IDNA 标准的 2008年版[RFC 5891： 国际化域名在应用程序 (IDNA): 协议](http://go.microsoft.com/fwlink/?LinkId=231875)。  
> -   当在早期版本的 Windows 操作系统上运行，它支持通过所述的标准 2003年版本[RFC 3490： 国际化域名在应用程序 (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110)。  
>   
>  请参阅[Unicode 标准的技术 #46: IDNA 兼容性处理](http://go.microsoft.com/fwlink/?LinkId=232459)方式的差异对于这些标准处理某一组字符。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType>方法规范化的域名，将标准化的名称转换为包括在美国 ASCII 代码点范围内 (U + 0020 到 U + 007E)，可显示 Unicode 字符，前面添加的 ASCII 兼容编码 (ACE) 前缀的表示形式 ("xn-") 向每个标签。 <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType>方法还原转换由域名标签<xref:System.Globalization.IdnMapping.GetAscii%2A>方法。  
  
 如果要转换的字符串包含标签分隔符字符字句 (U + 3002)，全角句号 (U + FF0E) 和形字句 (U + FF61)<xref:System.Globalization.IdnMapping.GetAscii%2A>方法将其转换为标签分隔符句号 （句点，U +002E)。 <xref:System.Globalization.IdnMapping.GetUnicode%2A>方法，但是，不会还原原始标签分隔符字符。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法将转换的数组国际域名为 Punycode。 <xref:System.Globalization.IdnMapping.GetUnicode%2A>方法然后将的 Punycode 域名转换回原始域名，但使用的标准标签分隔符替换原始标签分隔符。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>所有公共方法<see cref="T:System.Globalization.IdnMapping" />是线程安全的可从多个线程，只要同时使用<see cref="T:System.Globalization.IdnMapping" />实例的属性未还设置并发。</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Globalization.IdnMapping" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType>和<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType>属性初始化为`false`。 一小部分的 ASCII 字符，而不是 A-Z、 0-9、 连字符 （-） 字符 (U + 002D)，和的句点 （.） 字符允许在域的名称，但未分配的 Unicode 码位不是。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当前 <see cref="T:System.Globalization.IdnMapping" /> 对象的成员所执行的操作中是否使用未分配的 Unicode 码位。</summary>
        <value>
          如果在操作中使用未分配的码位，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 已注册的域名不能包含未分配的码位。 因此，默认值的<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>属性是`false`。 IDNA 规范对匹配字符串的查询中仅允许未分配的代码点 (即，在域的名称查找)。 有关使用域名中的未分配的代码点的详细信息，请参阅[RFC 3454，"准备 Internationalized 字符串 (stringprep) 的"](http://go.microsoft.com/fwlink/?LinkId=231873)和[RFC 5891、"Internationalized 域名在应用程序 （IDNA): 协议"](http://go.microsoft.com/fwlink/?LinkId=231875)。  
  
> [!IMPORTANT]
>  如果<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>属性是`false`，与属性关联的行为取决于基础操作系统。 上[!INCLUDE[win8](~/includes/win8-md.md)]、<xref:System.Globalization.IdnMapping>类符合 IDNA 2008，基于 Unicode 6.0 标准。 在以前版本的 Windows，<xref:System.Globalization.IdnMapping>类是否基于 IDNA 2003，基于 Unicode 3。*x*。 已在 IDNA 2003 未分配某些代码点已经分配字符，IDNA 2008 支持。 例如，U + 0221 Unicode 4.0 中引入。 上[!INCLUDE[win8](~/includes/win8-md.md)]，编码为"xn-6la"。 在以前版本的 Windows，则会引发<xref:System.ArgumentException>异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要与当前对象进行比较的对象。</param>
        <summary>指示当前 <see cref="T:System.Globalization.IdnMapping" /> 对象与指定对象是否相等。</summary>
        <returns>
          如果 <paramref name="obj" /> 参数指定的对象从 <see cref="T:System.Globalization.IdnMapping" /> 派生且它的 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将包含 US-ASCII 字符范围以外的Unicode字符的域名称标签字符串编码为（U+0020 至 U+007E）内的可显示 Unicode 字符的字符串。 根据 IDNA 标准格式化的字符串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">要转换的字符串，它包含一个或多个由标签分隔符分隔的域名标签。</param>
        <summary>将由 Unicode 字符组成的域名标签的字符串编码为 US-ASCII 字符范围内的可显示的 Unicode 字符的字符串。 根据 IDNA 标准格式化的字符串。</summary>
        <returns>由 <paramref name="unicode" /> 参数指定的字符串的等效项包括 US-ASCII 字符范围（U+0020 至 U+007E）内的可显示 Unicode 字符并根据 IDNA 标准格式化。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `unicode`参数指定有效的 Unicode 字符组成的一个或多个标签的字符串。 标签分隔符分隔的标签。 `unicode`参数不能以开头标签分隔符，但它可以包括和 （可选） 以分隔符结尾。 标签分隔符是句号 (时间段，U + 002E)、 表意完全停止 (U + 3002)，全角句号 (U + FF0E) 和形字句 (U + FF61)。 例如，域名称"www.adatum.com"组成标签、"www"、"adatum"和"com"，用句点分隔。  
  
 标签不能包含任何以下字符：  
  
-   从 U + 0001 年 U + 001F 和 U + 007F 的 Unicode 控制字符。  
  
-   如果未分配 Unicode 字符的值<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>属性是`false`。  
  
-   非标准字符中 US-ASCII 字符范围，如空间 (U + 0020)，感叹号标记 (U + 0021)，如果低行 (U + 005F) 字符的值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性是`true`。  
  
-   禁止的 IDNA 标准的特定版本的字符。 有关禁用的字符的详细信息，请参阅[RFC 3454： 准备的国际化字符串 ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 和[RFC 5982: Unicode 码位和国际化域名应用程序](http://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>方法将所有标签分隔符都转换为句号 (时间段，U + 002E)。  
  
 如果`unicode`不包含字符之外 US-ASCII 字符范围和 US-ASCII 字符范围内的任何字符禁止的该方法返回`unicode`不变。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>方法将转换的数组国际化域名到 Punycode，这是包含 US-ASCII 字符范围内的字符编码等效项。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29>方法然后将的 Punycode 域名转换回原始域名，但使用的标准标签分隔符替换原始标签分隔符。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="unicode" /> 是无效的。</exception>
        <block subset="none" type="usage">
          <para>在[!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<see cref="T:System.Globalization.IdnMapping" />类支持不同版本的 IDNA 标准，具体取决于正在使用的操作系统：  
  
-   在上运行时[!INCLUDE[win8](~/includes/win8-md.md)]，它支持通过概述 IDNA 标准的 2008年版[RFC 5891： 国际化域名在应用程序 (IDNA): 协议](http://go.microsoft.com/fwlink/?LinkId=231875)。  
  
-   当在早期版本的 Windows 操作系统上运行，它支持通过所述的标准 2003年版本[RFC 3490： 国际化域名在应用程序 (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110)。  
  
 请参阅[Unicode 标准的技术 #46: IDNA 兼容性处理](http://go.microsoft.com/fwlink/?LinkId=232459)方式的差异对于这些标准处理某一组字符。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">要转换的字符串，它包含一个或多个由标签分隔符分隔的域名标签。</param>
        <param name="index">
          <c>unicode</c> 的从零开始的偏移量，用于指定开始转换的子字符串起始位置。 转换运算将继续执行到 <c>unicode</c> 字符串的末尾。</param>
        <summary>编码包含US-ASCII字符范围以外的 Unicode 字符的域名称标签子字符串。 子串转换为在 US-ASCII 字符范围内可显示的“ Unicode ”字符串并根据 IDNA 标准格式化。</summary>
        <returns>由 <paramref name="unicode" /> 和 <paramref name="index" /> 指定的子字符串的等效项包括 US-ASCII 字符范围（U+0020 至 U+007E）内的可显示 Unicode 字符并根据 IDNA 标准格式化。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `unicode`和`index`参数定义的有效 Unicode 字符组成的一个或多个标签的子字符串。 标签分隔符分隔的标签。 子字符串的第一个字符不能以开头标签分隔符，但它可以包括并 （可选） 以分隔符结尾。 标签分隔符是句号 (时间段，U + 002E)、 表意完全停止 (U + 3002)，全角句号 (U + FF0E) 和形字句 (U + FF61)。 例如，域名称"www.adatum.com"组成标签、"www"、"adatum"和"com"，用句点分隔。  
  
 标签不能包含任何以下字符：  
  
-   从 U + 0001 年 U + 001F 和 U + 007F 的 Unicode 控制字符。  
  
-   未分配的 Unicode 字符，具体取决于值<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>属性。  
  
-   非标准字符中 US-ASCII 字符范围，如空间 (U + 0020)，感叹号标记 (U + 0021)，和低行 (U + 005F) 字符，具体取决于值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性。  
  
-   禁止的 IDNA 标准的特定版本的字符。 有关禁用的字符的详细信息，请参阅[RFC 3454： 准备的国际化字符串 ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 和[RFC 5982: Unicode 码位和国际化域名应用程序](http://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>方法将所有标签分隔符都转换为句号 (时间段，U + 002E)。  
  
 如果`unicode`不包含字符之外 US-ASCII 字符范围和 US-ASCII 字符范围内的任何字符禁止的该方法返回`unicode`不变。  
  
   
  
## Examples  
 下面的示例删除的本地部分和 @ 从电子邮件地址，并将传递字符生成域名称写入<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29>方法来创建 Punycode 域名，这是在美国 ASCII 字符组成的编码等效项字符范围。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法然后将的 Punycode 域名转换回原始域名，但使用的标准标签分隔符替换原始标签分隔符。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小于零。  
  
 或  
  
 <paramref name="index" /> 大于 <paramref name="unicode" /> 的长度。</exception>
        <exception cref="T:System.ArgumentException">
          根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="unicode" /> 是无效的。</exception>
        <block subset="none" type="usage">
          <para>在[!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<see cref="T:System.Globalization.IdnMapping" />类支持不同版本的 IDNA 标准，具体取决于正在使用的操作系统：  
  
-   在上运行时[!INCLUDE[win8](~/includes/win8-md.md)]，它支持通过概述 IDNA 标准的 2008年版[RFC 5891： 国际化域名在应用程序 (IDNA): 协议](http://go.microsoft.com/fwlink/?LinkId=231875)。  
  
-   当在早期版本的 Windows 操作系统上运行，它支持通过所述的标准 2003年版本[RFC 3490： 国际化域名在应用程序 (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110)。  
  
 请参阅[Unicode 标准的技术 #46: IDNA 兼容性处理](http://go.microsoft.com/fwlink/?LinkId=232459)方式的差异对于这些标准处理某一组字符。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">要转换的字符串，它包含一个或多个由标签分隔符分隔的域名标签。</param>
        <param name="index">
          <c>unicode</c> 的从零开始的偏移量，用于指定子字符串的起始位置。</param>
        <param name="count">要在 <c>unicode</c> 字符串中的 <c>index</c> 指定的位置开始的子字符串中转换的字符数。</param>
        <summary>编码包含 US-ASCII 字符范围以外的 Unicode 字符的域名称标签子字符串的指定字符数。 子串转换为在 US-ASCII 字符范围内可显示的“ Unicode ”字符串并根据 IDNA 标准格式化。</summary>
        <returns>由 <paramref name="unicode" />、<paramref name="index" /> 和 <paramref name="count" /> 参数指定的子字符串的等效项，包括 US-ASCII 字符范围（U+0020 至 U+007E）内的可显示 Unicode 字符并根据 IDNA 标准格式化。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Unicode`， `index`，和`count`参数定义的有效 Unicode 字符组成的一个或多个标签的子字符串。 标签分隔符分隔的标签。 子字符串的第一个字符不能以开头标签分隔符，但它可以包括并 （可选） 以分隔符结尾。 标签分隔符是句号 (时间段，U + 002E)、 表意完全停止 (U + 3002)，全角句号 (U + FF0E) 和形字句 (U + FF61)。 例如，域名称"www.adatum.com"组成标签、"www"、"adatum"和"com"，用句点分隔。  
  
 标签不能包含任何以下字符：  
  
-   从 U + 0001 年 U + 001F 和 U + 007F 的 Unicode 控制字符。  
  
-   未分配的 Unicode 字符，具体取决于值<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>属性。  
  
-   非标准字符中 US-ASCII 字符范围，如空间 (U + 0020)，感叹号标记 (U + 0021)，和低行 (U + 005F) 字符，具体取决于值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性。  
  
-   禁止的 IDNA 标准的特定版本的字符。 有关禁用的字符的详细信息，请参阅[RFC 3454： 准备的国际化字符串 ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 和[RFC 5982: Unicode 码位和国际化域名应用程序](http://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>方法将所有标签分隔符都转换为句号 (时间段，U + 002E)。 如果子字符串不包含字符 US-ASCII 字符范围外的并且不禁止 US-ASCII 字符范围内的任何字符，该方法返回未更改的子字符串。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法将国际化的域名转换为符合 IDNA 标准的域名。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法然后将标准化的域名转换回原始域名，但使用的标准标签分隔符替换原始标签分隔符。  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
 或  
  
 <paramref name="index" /> 大于 <paramref name="unicode" /> 的长度。  
  
 或  
  
 <paramref name="index" /> 大于 <paramref name="unicode" /> 的长度减去 <paramref name="count" />。</exception>
        <exception cref="T:System.ArgumentException">
          根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="unicode" /> 是无效的。</exception>
        <block subset="none" type="usage">
          <para>在[!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<see cref="T:System.Globalization.IdnMapping" />类支持不同版本的 IDNA 标准，具体取决于正在使用的操作系统：  
  
-   在上运行时[!INCLUDE[win8](~/includes/win8-md.md)]，它支持通过概述 IDNA 标准的 2008年版[RFC 5891： 国际化域名在应用程序 (IDNA): 协议](http://go.microsoft.com/fwlink/?LinkId=231875)。  
  
-   当在早期版本的 Windows 操作系统上运行，它支持通过所述的标准 2003年版本[RFC 3490： 国际化域名在应用程序 (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110)。  
  
 请参阅[Unicode 标准的技术 #46: IDNA 兼容性处理](http://go.microsoft.com/fwlink/?LinkId=232459)方式的差异对于这些标准处理某一组字符。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此 <see cref="T:System.Globalization.IdnMapping" /> 对象的哈希代码。</summary>
        <returns>从 <see cref="T:System.Globalization.IdnMapping" /> 对象的属性派生的四个 32 位常量中的一个。  返回值没有特殊意义，不适合在哈希代码算法中使用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重写<xref:System.Globalization.IdnMapping.GetHashCode%2A>方法如果你的应用程序需要实现的有意义的哈希代码算法。  
  
   
  
## Examples  
 下面的示例假定单个字符串可以包含用空格分隔的多个电子邮件地址。 它会删除本地部分和 @ 从每个电子邮件地址，并将传递字符生成域名称写入<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29>或<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法来创建 Punycode 域名。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法然后将的 Punycode 域名转换回原始的域名。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>对基于 IDNA 标准编码为 Unicode 字符串的一个或多个域名标签进行解码。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">要解码的字符串，包含根据 IDNA 标准在 US-ASCII 字符范围 （U+0020 至 U+007E） 编码的一个或多个标签。</param>
        <summary>对基于 IDNA 标准编码的一个或者多个域名标签的字符串进行解码，解码为一个 Unicode 字符串。</summary>
        <returns>由 <paramref name="ascii" /> 参数指定的 IDNA 子字符串的 Unicode 等效项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关域名、 标签和标签分隔符的详细信息，请参阅备注<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>方法将转换的数组国际域名为 Punycode。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29>方法然后将的 Punycode 域名转换回原始域名，但使用的标准标签分隔符替换原始标签分隔符。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="ascii" /> 是无效的。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">要解码的字符串，包含根据 IDNA 标准在 US-ASCII 字符范围 （U+0020 至 U+007E） 编码的一个或多个标签。</param>
        <param name="index">
          <c>ascii</c> 的从零开始的偏移量，用于指定开始解码的子字符串起始位置。 解码运算将继续执行到 <c>ascii</c> 字符串的末尾。</param>
        <summary>对基于 IDNA 标准编码的一个或者多个域名标签的子字符串进行解码，解码为 Unicode 字符串。</summary>
        <returns>由 <paramref name="ascii" /> 和 <paramref name="index" /> 参数指定的 IDNA 子字符串的 Unicode 等效项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关域名、 标签和标签分隔符的详细信息，请参阅备注<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小于零。  
  
 或  
  
 <paramref name="index" /> 大于 <paramref name="ascii" /> 的长度。</exception>
        <exception cref="T:System.ArgumentException">
          根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="ascii" /> 是无效的。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">要解码的字符串，包含根据 IDNA 标准在 US-ASCII 字符范围 （U+0020 至 U+007E） 编码的一个或多个标签。</param>
        <param name="index">
          <c>ascii</c> 的从零开始的偏移量，用于指定子字符串的起始位置。</param>
        <param name="count">要在 <c>ascii</c> 字符串中的 <c>index</c> 指定的位置开始的子字符串中转换的字符数。</param>
        <summary>对基于 IDNA 标准编码、具有指定长度并包含一个或者多个域名标签的子字符串进行解码，解码为一个 Unicode 字符串。</summary>
        <returns>由 <paramref name="ascii" />、<paramref name="index" /> 和 <paramref name="count" /> 参数指定的 IDNA 子字符串的 Unicode 等效项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关域名、 标签和标签分隔符的详细信息，请参阅备注<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
 或  
  
 <paramref name="index" /> 大于 <paramref name="ascii" /> 的长度。  
  
 或  
  
 <paramref name="index" /> 大于 <paramref name="ascii" /> 的长度减去 <paramref name="count" />。</exception>
        <exception cref="T:System.ArgumentException">
          根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="ascii" /> 是无效的。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在当前 <see cref="T:System.Globalization.IdnMapping" /> 对象的成员所执行的操作中是使用标准命名约定还是宽松命名约定。</summary>
        <value>
          如果在操作中使用标准命名转换，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 遵循标准的命名规则的域名包含 US-ASCII 字符范围内的字符的特定子集。 字符都是字母 A 到 Z、 0 到 9 的数字、 连字符 （-） 字符 (U + 002D) 和的句点 （.） 字符。 字符的大小写并不重要。 宽松的命名约定允许使用更广泛的 ASCII 字符，包括空格字符 (U + 0020)、 感叹号字符 (U + 0021)，和底线字符 (U + 005F)。 如果<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>是`true`，只有标准字符可以出现在返回的标签<xref:System.Globalization.IdnMapping.GetAscii%2A>方法。  
  
 默认情况下，值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性是`false`，并且在标签中允许扩展的 ASCII 字符的子集。  
  
> [!NOTE]
>  <xref:System.Globalization.IdnMapping>类禁止使用不可字符 U + 0000 到 U + 001F，和 U + 007F 在域名标签不管如何设置<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性。 此禁止减少了例如名称欺骗安全攻击的风险。  
  
   
  
## Examples  
 下面的示例生成包含从 U + 0000 到 U + 007F ASCII 范围内的字符的 Url，并将它们传递到<xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>方法的两个<xref:System.Globalization.IdnMapping>对象。 一个对象具有其<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性设置为`true`，而且与其他对象已将其设置为`false`。 该输出会显示时，将无效的字符<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性是`true`但有效时`false`。  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>