<Type Name="StringInfo" FullName="System.Globalization.StringInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dfcadf1280b7a99ae67ace6278f0fb80976a6481" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33682140" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class StringInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit StringInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.StringInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class StringInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供将字符串拆分为文本元素和循环访问这些文本元素的功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 定义的文本元素的单个字符，即字形的形式显示的文本单位。 文本元素可以是基字符、 代理项对或组合字符序列。 [Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)两个代码单元，其中该对的第一个单位是一个高代理项，第二个是一个较低的序列组成的单个抽象字符的编码的字符表示形式中定义的代理项对代理项。 Unicode 标准定义组合字符序列为基字符和一个或多个组合字符的组合。 代理项对可以表示基字符或组合字符。  
  
 <xref:System.Globalization.StringInfo> 类使您能够将字符串作为一系列文本元素而不是单个 <xref:System.Char> 对象进行处理。  
  
 若要实例化<xref:System.Globalization.StringInfo>对象，表示指定的字符串中，你可以执行以下任一操作：  
  
-   调用<xref:System.Globalization.StringInfo.%23ctor%28System.String%29>构造函数并将其传递字符串，<xref:System.Globalization.StringInfo>对象是表示作为自变量。  
  
-   调用默认<xref:System.Globalization.StringInfo.%23ctor>构造函数，并将字符串分配<xref:System.Globalization.StringInfo>对象是表示对<xref:System.Globalization.StringInfo.String%2A>属性。  
  
 可通过两种方式处理字符串中的单个文本元素：  
  
-   通过枚举每个文本元素。 为此，您可以调用 <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A> 方法，然后对返回的 <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> 对象重复调用 <xref:System.Globalization.TextElementEnumerator> 方法，直到此方法返回 `false`。  
  
-   通过调用 <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A> 方法检索包含每个文本元素的起始索引的数组。 然后可通过将这些索引传递给 <xref:System.Globalization.StringInfo.SubstringByTextElements%2A> 方法来检索单个文本元素。  
  
 下面的示例阐释了两种处理字符串中的文本元素的方法。 它创建两个字符串：  
  
-   `strCombining`，它是一个阿拉伯语字符串，包含三个文本元素和多个 <xref:System.Char> 对象。 第一个文本元素是后跟 ARABIC HAMZA BELOW (U+-655) 和 ARABIC KASRA (U+0650) 的基字符 ARABIC LETTER ALEF (U+-627)。 第二个文本元素是后跟 ARABIC FATHA (U+-64E) 的 ARABIC LETTER HEH (U+0647)。 第三个文本元素是后跟 ARABIC DAMMATAN (U+064C) 的 ARABIC LETTTER BEH (U+0628)。  
  
-   `strSurrogates`，它是一个包含三个代理项对的字符串：辅助多语言平面中的 GREEK ACROPHONIC FIVE TALENTS (U+10148)、增补表意字符平面中的 U+20026 以及私有使用区中的 U+F1001。 每个字符的 UTF-16 编码是一个代理项对，其中依次包含一个高代理项和一个低代理项。  
  
 每个字符串依次通过 <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A> 方法和 <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A> 方法分析一次。 两个方法都可正确分析两个字符串中的文本元素并显示分析操作的结果。  
  
 [!code-csharp[System.Globalization.StringInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.stringinfo.class/cs/indexing1.cs#1)]
 [!code-vb[System.Globalization.StringInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.stringinfo.class/vb/indexing1.vb#1)]  
  
   
  
## Examples  
 此示例演示如何使用<xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A>和<xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A>方法<xref:System.Globalization.StringInfo>类包含代理项和组合字符的字符串进行处理。  
  
 [!code-cpp[stringinfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringInfo/cpp/StringInfo.cpp#1)]
 [!code-csharp[stringinfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringInfo/CS/StringInfo.cs#1)]
 [!code-vb[stringinfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringInfo/vb/stringinfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>在内部的方法<see cref="T:System.Globalization.StringInfo" />类调用的方法的<see cref="T:System.Globalization.CharUnicodeInfo" />类以确定字符类别。 从开始[!INCLUDE[net_v462](~/includes/net-v462-md.md)]，字符分类基于[Unicode Standard、 8.0.0 版](https://unicode.org/versions/Unicode8.0.0)。 有关[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]通过[!INCLUDE[net_v461](~/includes/net-v461-md.md)]，它基于[Unicode Standard、 版本 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)。</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Globalization.StringInfo" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.StringInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Globalization.StringInfo" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新值<xref:System.Globalization.StringInfo>对象初始化为空字符串 ("")。 可以通过使用向其分配另一个字符串<xref:System.Globalization.StringInfo.String%2A>属性。  你还可以实例化<xref:System.Globalization.StringInfo>通过调用表示单个步骤中指定的字符串对象<xref:System.Globalization.StringInfo.%23ctor%28System.String%29>构造函数。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringInfo (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.StringInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StringInfo(System::String ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">用于初始化此 <see cref="T:System.Globalization.StringInfo" /> 对象的字符串。</param>
        <summary>将 <see cref="T:System.Globalization.StringInfo" /> 类的新实例初始化为指定的字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将值自变量分配给对象的<xref:System.Globalization.StringInfo.String%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.StringInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">一个对象。</param>
        <summary>指示当前 <see cref="T:System.Globalization.StringInfo" /> 对象是否与指定的对象相等。</summary>
        <returns>
          如果 <paramref name="value" /> 参数是 <see cref="T:System.Globalization.StringInfo" /> 对象并且其 <see cref="P:System.Globalization.StringInfo.String" /> 属性等同于此 <see cref="T:System.Globalization.StringInfo" /> 对象的 <see cref="P:System.Globalization.StringInfo.String" /> 属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.String.Equals" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.StringInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>计算当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值的哈希代码。</summary>
        <returns>基于此 <see cref="T:System.Globalization.StringInfo" /> 对象的字符串值的 32 位带符号整数哈希代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行为<xref:System.Globalization.StringInfo.GetHashCode%2A>依赖于其实现中，这可能从一个版本的公共语言运行时更改到另一个。 可能发生此事件来提高的性能<xref:System.Globalization.StringInfo.GetHashCode%2A>。 若要使此行为的<xref:System.Globalization.StringInfo.GetHashCode%2A>常量，应用程序应重写的运行时实现<xref:System.Globalization.StringInfo.GetHashCode%2A>与已知永远不变的实现。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.GetHashCode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNextTextElement">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取指定字符串中的第一个文本元素。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNextTextElement">
      <MemberSignature Language="C#" Value="public static string GetNextTextElement (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetNextTextElement(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.StringInfo.GetNextTextElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNextTextElement (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetNextTextElement(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">要从中获取文本元素的字符串。</param>
        <summary>获取指定字符串中的第一个文本元素。</summary>
        <returns>包含指定字符串中的第一个文本元素的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 定义的文本元素的单个字符，即字形的形式显示的文本单位。 文本元素可以是基字符、 代理项对或组合字符序列。 [Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)两个代码单元，其中该对的第一个单位是一个高代理项，第二个是一个较低的序列组成的单个抽象字符的编码的字符表示形式中定义的代理项对代理项。 [Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)定义组合字符序列为基字符和一个或多个组合字符的组合。 代理项对可以表示基字符或组合字符。  
  
 此方法仅返回第一个文本元素。 若要循环访问字符串的文本元素，该应用程序应使用<xref:System.Globalization.TextElementEnumerator>对象生成的<xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)" />
        <altmember cref="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetNextTextElement">
      <MemberSignature Language="C#" Value="public static string GetNextTextElement (string str, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetNextTextElement(string str, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNextTextElement (str As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetNextTextElement(System::String ^ str, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">要从中获取文本元素的字符串。</param>
        <param name="index">文本元素开始位置的从零开始的索引。</param>
        <summary>获取指定字符串中指定索引处的文本元素。</summary>
        <returns>包含指定字符串中指定索引处的文本元素的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 定义的文本元素的单个字符，即字形的形式显示的文本单位。 文本元素可以是基字符、 代理项对或组合字符序列。 [Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)两个代码单元，其中该对的第一个单位是一个高代理项，第二个是一个较低的序列组成的单个抽象字符的编码的字符表示形式中定义的代理项对代理项。 Unicode 标准定义组合字符序列为基字符和一个或多个组合字符的组合。 代理项对可以表示基字符或组合字符。  
  
 此方法仅返回指定索引处开始的子字符串的第一个文本元素。 若要循环访问字符串的文本元素，该应用程序应使用<xref:System.Globalization.TextElementEnumerator>由生成<xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 超出了 <paramref name="str" /> 的有效索引范围。</exception>
        <altmember cref="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)" />
        <altmember cref="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTextElementEnumerator">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个循环访问字符串的文本元素的枚举器。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTextElementEnumerator">
      <MemberSignature Language="C#" Value="public static System.Globalization.TextElementEnumerator GetTextElementEnumerator (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.TextElementEnumerator GetTextElementEnumerator(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTextElementEnumerator (str As String) As TextElementEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::TextElementEnumerator ^ GetTextElementEnumerator(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextElementEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">要循环访问的字符串。</param>
        <summary>返回一个循环访问整个字符串的文本元素的枚举数。</summary>
        <returns>整个字符串的 <see cref="T:System.Globalization.TextElementEnumerator" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 定义的文本元素的单个字符，即字形的形式显示的文本单位。 文本元素可以是基字符、 代理项对或组合字符序列。 [Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)两个代码单元，其中该对的第一个单位是一个高代理项，第二个是一个较低的序列组成的单个抽象字符的编码的字符表示形式中定义的代理项对代理项。 Unicode 标准定义组合字符序列为基字符和一个或多个组合字符的组合。 代理项对可以表示基字符或组合字符。  
  
 文本元素枚举器只能用于读取字符串; 中的数据它不能修改基础的字符串。 枚举数没有对字符串独占访问权。  
  
 如果定位字符串中或在字符串中的最后一个文本元素之后的第一个文本元素的前面，则枚举数将处于无效状态。 当枚举器处于无效状态时，调用<xref:System.Globalization.TextElementEnumerator.Current%2A>引发异常。  
  
 最初，枚举数定位在字符串中的第一个文本元素之前。 <xref:System.Globalization.TextElementEnumerator.Reset%2A> 也会将枚举器放回此位置。 因此，创建一个枚举器或<xref:System.Globalization.TextElementEnumerator.Reset%2A>调用时，<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>必须调用枚举数前移到字符串的第一个文本元素，然后读取的值才能<xref:System.Globalization.TextElementEnumerator.Current%2A>。  
  
 在调用 <xref:System.Globalization.TextElementEnumerator.Current%2A> 或 <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> 之前，<xref:System.Globalization.TextElementEnumerator.Reset%2A> 返回同一对象。  
  
 传递的字符串的末尾之后，枚举数再次处于无效状态，调用<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>返回`false`。 调用<xref:System.Globalization.TextElementEnumerator.Current%2A>到的最后一次调用时引发异常<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>返回`false`。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A>方法。 此代码示例摘自更大的示例为提供<xref:System.Globalization.StringInfo>类。  
  
 [!code-cpp[stringinfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringInfo/cpp/StringInfo.cpp#1)]
 [!code-csharp[stringinfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringInfo/CS/StringInfo.cs#1)]
 [!code-vb[stringinfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringInfo/vb/stringinfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Globalization.TextElementEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetTextElementEnumerator">
      <MemberSignature Language="C#" Value="public static System.Globalization.TextElementEnumerator GetTextElementEnumerator (string str, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.TextElementEnumerator GetTextElementEnumerator(string str, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTextElementEnumerator (str As String, index As Integer) As TextElementEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::TextElementEnumerator ^ GetTextElementEnumerator(System::String ^ str, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextElementEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">要循环访问的字符串。</param>
        <param name="index">开始迭代处的从零开始的索引。</param>
        <summary>返回一个枚举数，它循环访问字符串的文本元素并从指定索引处开始。</summary>
        <returns>在 <paramref name="index" /> 处开始的字符串的 <see cref="T:System.Globalization.TextElementEnumerator" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 定义的文本元素的单个字符，即字形的形式显示的文本单位。 文本元素可以是基字符、 代理项对或组合字符序列。 [Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)两个代码单元，其中该对的第一个单位是一个高代理项，第二个是一个较低的序列组成的单个抽象字符的编码的字符表示形式中定义的代理项对代理项。 Unicode 标准定义组合字符序列为基字符和一个或多个组合字符的组合。 代理项对可以表示基字符或组合字符。  
  
 文本元素枚举器只能用于读取字符串; 中的数据它不能修改基础的字符串。 枚举数没有对字符串独占访问权。  
  
 如果定位字符串中或在字符串中的最后一个文本元素之后的第一个文本元素的前面，则枚举数将处于无效状态。 当枚举器处于无效状态时，调用<xref:System.Globalization.TextElementEnumerator.Current%2A>引发异常。  
  
 最初，枚举数定位在字符串中的第一个文本元素之前。 <xref:System.Globalization.TextElementEnumerator.Reset%2A> 也会将枚举器放回此位置。 因此，创建一个枚举器或<xref:System.Globalization.TextElementEnumerator.Reset%2A>调用时，<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>必须调用枚举数前移到字符串的第一个文本元素，然后读取的值才能<xref:System.Globalization.TextElementEnumerator.Current%2A>。  
  
 在调用 <xref:System.Globalization.TextElementEnumerator.Current%2A> 或 <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> 之前，<xref:System.Globalization.TextElementEnumerator.Reset%2A> 返回同一对象。  
  
 传递的字符串的末尾之后，枚举数再次处于无效状态，调用<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>返回`false`。 调用<xref:System.Globalization.TextElementEnumerator.Current%2A>到的最后一次调用时引发异常<xref:System.Globalization.TextElementEnumerator.MoveNext%2A>返回`false`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 超出了 <paramref name="str" /> 的有效索引范围。</exception>
        <altmember cref="T:System.Globalization.TextElementEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="LengthInTextElements">
      <MemberSignature Language="C#" Value="public int LengthInTextElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LengthInTextElements" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.StringInfo.LengthInTextElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LengthInTextElements As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LengthInTextElements { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Globalization.StringInfo" /> 对象中的文本元素数量。</summary>
        <value>此 <see cref="T:System.Globalization.StringInfo" /> 对象中基本字符、代理项对和组合字符序列的数量。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseCombiningCharacters">
      <MemberSignature Language="C#" Value="public static int[] ParseCombiningCharacters (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] ParseCombiningCharacters(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseCombiningCharacters (str As String) As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;int&gt; ^ ParseCombiningCharacters(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">要搜索的字符串。</param>
        <summary>返回指定字符串中每个基字符、高代理项或控制字符的索引。</summary>
        <returns>一个整数数组，它包含指定字符串中每个基字符、高代理项或控制字符的从零开始的索引。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)两个代码单元，其中该对的第一个单位是一个高代理项，第二个是一个较低的序列组成的单个抽象字符的编码的字符表示形式中定义的代理项对代理项。 高代理项是 Unicode 码位 U + D800 到 U + DBFF 的范围中和低代理项是 Unicode 码位 U + DC00 到 U + DFFF 范围中。  
  
 控制字符为字符的 Unicode 值为 U + 007F 或 U + 0000 到 U + 001F 或 U + 0080 到 U + 009F 的范围内。  
  
 .NET Framework 定义的文本元素的单个字符，即字形的形式显示的文本单位。 文本元素可以是基字符、 代理项对或组合字符序列。 [Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)定义组合字符序列为基字符和一个或多个组合字符的组合。 代理项对可以表示基字符或组合字符。  
  
 如果组合字符序列无效，该序列中的每个组合字符也会返回。  
  
 生成的数组中每个索引是一个文本元素，基字符或高代理项的索引的开头。  
  
 每个元素的长度轻松地将计算为后续索引之间的差异。 数组的长度将始终小于或等于字符串的长度。 例如，给定的字符串"\u4f00\u302a\ud800\udc00\u4f01"，此方法将返回 0、 2 和 4 的索引。  
  
## <a name="equivalent-members"></a>等效成员  
 在 2.0 版中的.NET Framework 中，启动<xref:System.Globalization.StringInfo.SubstringByTextElements%2A>方法和<xref:System.Globalization.StringInfo.LengthInTextElements%2A>属性提供易于使用的提供的功能实现<xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A>方法。 此代码示例摘自更大的示例为提供<xref:System.Globalization.StringInfo>类。  
  
 [!code-cpp[stringinfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringInfo/cpp/StringInfo.cpp#1)]
 [!code-csharp[stringinfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringInfo/CS/StringInfo.cs#1)]
 [!code-vb[stringinfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringInfo/vb/stringinfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> 为 <see langword="null" />。</exception>
        <altmember cref="Overload:System.Globalization.StringInfo.SubstringByTextElements" />
        <altmember cref="P:System.Globalization.StringInfo.LengthInTextElements" />
      </Docs>
    </Member>
    <Member MemberName="String">
      <MemberSignature Language="C#" Value="public string String { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string String" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.StringInfo.String" />
      <MemberSignature Language="VB.NET" Value="Public Property String As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ String { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值。</summary>
        <value>作为当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Globalization.StringInfo>实例化对象，其<xref:System.Globalization.StringInfo.String%2A>属性设置为下列值之一：  
  
-   <xref:System.String.Empty?displayProperty=nameWithType> 如果默认值<xref:System.Globalization.StringInfo.%23ctor>调用。 然后，你应使用<xref:System.Globalization.StringInfo.String%2A>属性来将字符串分配此<xref:System.Globalization.StringInfo>对象 rperesents。  
  
-   作为字符串提供`value`参数<xref:System.Globalization.StringInfo.%23ctor%28System.String%29>构造函数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubstringByTextElements">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从当前 <see cref="T:System.Globalization.StringInfo" /> 对象中检索文本元素的子字符串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubstringByTextElements">
      <MemberSignature Language="C#" Value="public string SubstringByTextElements (int startingTextElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string SubstringByTextElements(int32 startingTextElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SubstringByTextElements (startingTextElement As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ SubstringByTextElements(int startingTextElement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startingTextElement" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startingTextElement">此 <see cref="T:System.Globalization.StringInfo" /> 对象中文本元素的从零开始的索引。</param>
        <summary>从当前的 <see cref="T:System.Globalization.StringInfo" /> 对象检索文本元素的子字符串（从指定的文本元素开始，一直到最后一个文本元素）。</summary>
        <returns>此 <see cref="T:System.Globalization.StringInfo" /> 对象中的文本元素的子字符串（从 <paramref name="startingTextElement" /> 参数指定的文本元素索引开始，一直到此对象中的最后一个文本元素）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请考虑索引从 0 到 4 的五个文本元素组成的字符串。 如果`startingTextElement`参数为 1，<xref:System.Globalization.StringInfo.SubstringByTextElements%2A>方法返回包含的索引为 1、 2、 3 和 4 的文本元素的子字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startingTextElement" /> 小于零。  
  
 或  
  
 当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值字符串是空字符串 ("")。</exception>
      </Docs>
    </Member>
    <Member MemberName="SubstringByTextElements">
      <MemberSignature Language="C#" Value="public string SubstringByTextElements (int startingTextElement, int lengthInTextElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string SubstringByTextElements(int32 startingTextElement, int32 lengthInTextElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SubstringByTextElements (startingTextElement As Integer, lengthInTextElements As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ SubstringByTextElements(int startingTextElement, int lengthInTextElements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startingTextElement" Type="System.Int32" />
        <Parameter Name="lengthInTextElements" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startingTextElement">此 <see cref="T:System.Globalization.StringInfo" /> 对象中文本元素的从零开始的索引。</param>
        <param name="lengthInTextElements">要检索的文本元素的数目。</param>
        <summary>从当前的 <see cref="T:System.Globalization.StringInfo" /> 对象中检索文本元素的子字符串（从指定文本元素开始，一直到指定数目的文本元素）。</summary>
        <returns>此 <see cref="T:System.Globalization.StringInfo" /> 对象中的文本元素的子字符串。 子字符串包含由 <paramref name="lengthInTextElements" /> 参数指定的文本元素数量，并从 <paramref name="startingTextElement" /> 参数指定的文本元素索引开始。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请考虑索引从 0 到 4 的五个文本元素组成的字符串。 如果`startingTextElement`参数为 1 和`lengthInTextElements`参数为 3，<xref:System.Globalization.StringInfo.SubstringByTextElements%2A>方法返回包含的索引为 1、 2 和 3 的文本元素的子字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startingTextElement" /> 小于零。  
  
 或  
  
 <paramref name="startingTextElement" /> 大于或等于当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值字符串的长度。  
  
 或  
  
 <paramref name="lengthInTextElements" /> 小于零。  
  
 或  
  
 当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值字符串是空字符串 ("")。  
  
 或  
  
 <paramref name="startingTextElement" /> + <paramref name="lengthInTextElements" /> 指定大于此 <see cref="T:System.Globalization.StringInfo" /> 对象中的文本元素数目的索引。</exception>
      </Docs>
    </Member>
  </Members>
</Type>