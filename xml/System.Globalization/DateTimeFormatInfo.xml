<Type Name="DateTimeFormatInfo" FullName="System.Globalization.DateTimeFormatInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="109eb84474f226248e8a75e5ce3bb4bbb4d38683" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410811" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.DateTimeFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DateTimeFormatInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateTimeFormatInfo sealed : ICloneable, IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供有关日期和时间值格式的区域性特定信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性<xref:System.Globalization.DateTimeFormatInfo>类包含区域性特定格式设置或分析如下所示的日期和时间值的信息：  
  
-   用于格式化日期值的模式。  
  
-   用于设置时间值的格式模式。  
  
-   每周天数的名称。  
  
-   每年的月份名称。  
  
-   上午 和下午 在时间值中使用的指示符。  
  
-   在其中表示日期的日历。  
  
 本节内容：  
  
-   [实例化 DateTimeFormatInfo 对象](#instantiating)  
  
    -   [用于固定区域性](#instantiating_Invariant)  
  
    -   [针对特定区域性](#instantiating_Specific)  
  
    -   [针对非特定区域性](#instantiating_neutral)  
  
    -   [为当前区域性](#instantiating_Current)  
  
-   [DateTimeFormatInfo 和动态数据](#dynamic)  
  
-   [格式设置的日期和时间](#Formatting_dates_times)  
  
-   [格式字符串和 DateTimeFormatInfo 属性](#properties)  
  
-   [修改 DateTimeFormatInfo 属性](#Modifying)  
  
<a name="instantiating"></a>   
## <a name="instantiating-a-datetimeformatinfo-object"></a>实例化 DateTimeFormatInfo 对象  
 A<xref:System.Globalization.DateTimeFormatInfo>对象可以表示固定区域性、 特定区域性，非特定区域性或当前区域性的格式设置约定。 本部分讨论如何实例化每种类型的<xref:System.Globalization.DateTimeFormatInfo>对象。  
  
<a name="instantiating_Invariant"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-the-invariant-culture"></a>实例化用于固定区域性 DateTimeFormatInfo 对象  
 固定区域性表示区域性的不区分区域性的。 它基于英语语言，但不是能在任何特定英语国家/地区。 虽然特定区域性的数据可以是动态的并且可以更改以反映新区域性约定或用户首选项，则不会更改的固定区域性的数据。 可以实例化<xref:System.Globalization.DateTimeFormatInfo>通过以下方式表示固定区域性的格式设置约定的对象：  
  
-   通过检索的值的<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A>属性。 返回<xref:System.Globalization.DateTimeFormatInfo>对象是只读的。  
  
-   通过调用的无参数<xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A>构造函数。 返回<xref:System.Globalization.DateTimeFormatInfo>对象为读/写。  
  
-   通过检索的值的<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>属性从<xref:System.Globalization.CultureInfo>返回的对象<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>属性。 返回<xref:System.Globalization.DateTimeFormatInfo>对象是只读的。  
  
 下面的示例使用上述每种方法来实例化<xref:System.Globalization.DateTimeFormatInfo>表示固定区域性的对象。 然后，它指示对象是只读的。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#1)]  
  
<a name="instantiating_Specific"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-a-specific-culture"></a>实例化特定区域性 DateTimeFormatInfo 对象  
 特定区域性表示特定的国家/地区中所说的语言。 例如，EN-US 代表美国英语语言的特定区域性，并且 en CA 表示说在加拿大的英语语言的特定区域性。 可以实例化<xref:System.Globalization.DateTimeFormatInfo>通过以下方式表示特定区域性的格式设置约定的对象：  
  
-   通过调用<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType>方法和检索的值的返回<xref:System.Globalization.CultureInfo>对象的<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性。 返回<xref:System.Globalization.DateTimeFormatInfo>对象是只读的。  
  
-   通过将传递静态<xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A>方法<xref:System.Globalization.CultureInfo>表示的区域性的对象其<xref:System.Globalization.DateTimeFormatInfo>你想要检索的对象。 返回<xref:System.Globalization.DateTimeFormatInfo>对象为读/写。  
  
-   通过调用静态<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>方法和检索的值的返回<xref:System.Globalization.CultureInfo>对象的<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性。 返回<xref:System.Globalization.DateTimeFormatInfo>对象为读/写。  
  
-   通过调用<xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>类构造函数和检索的值的返回<xref:System.Globalization.CultureInfo>对象的<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性。 返回<xref:System.Globalization.DateTimeFormatInfo>对象为读/写。  
  
 下面的示例说明了每个实例化这些方式<xref:System.Globalization.DateTimeFormatInfo>对象，并指示生成的对象是只读的。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#3)]  
  
<a name="instantiating_neutral"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-a-neutral-culture"></a>实例化非特定区域性 DateTimeFormatInfo 对象  
 表示非特定区域性的区域性或语言无关的国家/地区;它通常是父任务的一个或多个特定区域性。 例如，Fr 是非特定区域性的法语语言和 FR-FR 区域性的父级。 可以实例化<xref:System.Globalization.DateTimeFormatInfo>对象，以便你创建的相同方式表示非特定区域性的格式设置约定<xref:System.Globalization.DateTimeFormatInfo>对象，表示特定区域性的格式设置约定。 此外，你可以检索非特定区域性<xref:System.Globalization.DateTimeFormatInfo>通过从特定区域性的检索非特定区域性的对象<xref:System.Globalization.CultureInfo.Parent%2A?displayProperty=nameWithType>属性和检索<xref:System.Globalization.DateTimeFormatInfo>对象由其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性。 除非的父区域性表示固定区域性，返回的<xref:System.Globalization.DateTimeFormatInfo>对象为读/写。 下面的示例阐释了这些方法的实例化<xref:System.Globalization.DateTimeFormatInfo>表示非特定区域性的对象。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#2)]  
  
> [!NOTE]
>  在.NET Framework 版本 1.0 通过[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]，尝试检索<xref:System.Globalization.DateTimeFormatInfo>反映的非特定区域性的格式设置约定的对象引发<xref:System.NotSupportedException>异常。  
  
 但是，非特定区域性缺少区域性特定格式设置信息，因为它是独立于特定的国家/地区。 而不是填充<xref:System.Globalization.DateTimeFormatInfo>对象泛型值，.NET Framework 返回<xref:System.Globalization.DateTimeFormatInfo>反映特定的格式设置约定区域性的对象是非特定区域性的子级。 例如，<xref:System.Globalization.DateTimeFormatInfo>对象的非特定 en 区域性反映 EN-US 区域性的格式设置约定和<xref:System.Globalization.DateTimeFormatInfo>对象 fr 区域性反映 FR-FR 区域性的格式设置约定。  
  
 可以使用类似如下的代码来确定哪些特定区域性的格式设置约定表示非特定区域性。 该示例使用反射来比较<xref:System.Globalization.DateTimeFormatInfo>的非特定区域性的特定子区域性属性的属性。 它会将两个日历为如果它们具有相同的日历类型等效，并且为公历日历，如果其<xref:System.Globalization.GregorianCalendar.CalendarType%2A?displayProperty=nameWithType>属性具有相同的值。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate6c.vb#6)]  
  
<a name="instantiating_Current"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-the-current-culture"></a>实例化一个用于当前区域性的 DateTimeFormatInfo 对象  
 可以实例化<xref:System.Globalization.DateTimeFormatInfo>通过以下方式表示当前区域性的格式设置约定的对象：  
  
-   通过检索的值的<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>属性。 返回<xref:System.Globalization.DateTimeFormatInfo>对象是只读的。  
  
-   通过检索的值的<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>属性从<xref:System.Globalization.CultureInfo>返回的对象<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>属性。 返回<xref:System.Globalization.DateTimeFormatInfo>对象是只读的。  
  
-   通过调用<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>方法替换<xref:System.Globalization.CultureInfo>表示当前区域性的对象。 返回<xref:System.Globalization.DateTimeFormatInfo>对象是只读的。  
  
 下面的示例使用上述每种方法来实例化<xref:System.Globalization.DateTimeFormatInfo>对象，表示当前区域性的格式设置约定。 然后，它指示对象是只读的。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create2.cs#4)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create2.vb#4)]  
  
 你可以创建的可写<xref:System.Globalization.DateTimeFormatInfo>对象，表示通过以下方式之一中的当前线程区域性的约定：  
  
-   通过检索<xref:System.Globalization.DateTimeFormatInfo>对象中的任何三个以前的方式和调用<xref:System.Globalization.DateTimeFormatInfo.Clone%2A>方法返回的<xref:System.Globalization.DateTimeFormatInfo>对象。 这将创建的原始副本<xref:System.Globalization.DateTimeFormatInfo>对象，但其<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A>属性是`false`。  
  
-   通过调用<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>方法来创建<xref:System.Globalization.CultureInfo>对象表示的当前区域性，，然后使用其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性，以检索<xref:System.Globalization.DateTimeFormatInfo>对象。  
  
 下面的示例阐释了这两种方法的实例化读/写<xref:System.Globalization.DateTimeFormatInfo>对象，并显示的值其<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A>属性。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate2.cs#7)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate2.vb#7)]  
  
 在 Windows 中，用户可以覆盖其中某些<xref:System.Globalization.DateTimeFormatInfo>格式设置和分析通过操作中使用的属性值**地区和语言**控制面板中应用程序。 例如，其区域性为英语 （美国） 的用户可能选择而不是默认 12 小时制 （在格式 h:mm: ss tt) 显示长时间使用 24 小时制 （采用格式为 hh: mm:） 的时间值。 <xref:System.Globalization.DateTimeFormatInfo>中所述的方式检索对象之前都反映这些用户重写。 如果这是不可取，则可以创建<xref:System.Globalization.NumberFormatInfo>不会反映用户的对象重写 （和也是读/写而不是只读的） 通过调用<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>构造函数和提供的值`false`为`useUserOverride`自变量。 下面的示例阐释了这一点系统的当前区域性为英语 （美国） 和其长时间模式的安全提供程序已从 h:mm: ss tt 默认值更改为 hh: mm:。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate3.cs#8)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate3.vb#8)]  
  
<a name="dynamic"></a>   
## <a name="datetimeformatinfo-and-dynamic-data"></a>DateTimeFormatInfo 和动态数据  
 用于通过提供的日期和时间值的格式的区域性特定数据<xref:System.Globalization.DateTimeFormatInfo>类是动态的就像通过提供的区域性数据一样<xref:System.Globalization.CultureInfo>类。 不应作出有关稳定性的值的任何假设<xref:System.Globalization.DateTimeFormatInfo>关联的对象与特定<xref:System.Globalization.CultureInfo>对象。 仅提供固定区域性和其关联的数据<xref:System.Globalization.DateTimeFormatInfo>对象保持不变。 应用程序会话之间或甚至运行你的应用程序时，可以更改其他数据。 有以下四个主要来源的更改：  
  
-   系统更新。 随着时间的推移更改如首选的日历或常用的日期和时间格式的区域性首选项。 在此情况下，Windows 更新包括对更改<xref:System.Globalization.DateTimeFormatInfo>针对特定区域性的属性值。  
  
-   替换的区域性。 <xref:System.Globalization.CultureAndRegionInfoBuilder>类可以用于替换现有的区域性的数据。  
  
-   级联更改属性值。 多个区域性相关属性可以更改在运行时，这反过来会导致<xref:System.Globalization.DateTimeFormatInfo>数据更改。 例如，以编程方式或通过用户执行任何操作，则可以更改当前区域性。 在此情况下，<xref:System.Globalization.DateTimeFormatInfo>返回对象<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>属性更改为与当前区域性关联的对象。 同样地，区域性的日历可以更改，这可能会导致在更改为大量<xref:System.Globalization.DateTimeFormatInfo>属性值。  
  
-   用户首选项。 应用程序的用户可以选择重写某些与通过控制面板中的区域和语言选项的当前系统区域性关联的值。 例如，用户可以选择以不同格式显示日期。 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType>属性设置为`true`的属性<xref:System.Globalization.DateTimeFormatInfo>从用户设置还检索对象。 如果用户设置均与关联的区域性不兼容<xref:System.Globalization.CultureInfo>对象 (例如，如果所选的日历不是由的日历之一<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>属性)，方法和属性的值的结果是不确定的。  
  
 若要不一致的数据，所有用户可重写属性的可能性降至<xref:System.Globalization.DateTimeFormatInfo>对象时创建该对象进行初始化。 则仍可能的不一致，因为对象创建和用户重写过程都不是原子和相关的值可以在对象创建期间发生更改。 但是，这种情况下应极少出现。  
  
 你可以控制是否将用户重写反映在<xref:System.Globalization.DateTimeFormatInfo>表示与系统区域性相同的区域性的对象。 下表列出了在哪些方面<xref:System.Globalization.DateTimeFormatInfo>对象可以检索和指示生成的对象是否反映用户重写。  
  
|CultureInfo 和 DateTimeFormatInfo 对象数据源|反映用户重写|  
|---------------------------------------------------------|-----------------------------|  
|`CultureInfo.CurrentCulture.DateTimeFormat` 属性|是|  
|<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> 属性|是|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> 方法|是|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> 方法|否|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> 构造函数|是|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 构造函数|取决于值`useUserOverride`参数|  
  
 如果没有人信服的理由，否则，在使用时，请参阅用户替代<xref:System.Globalization.DateTimeFormatInfo>进行格式化和分析用户输入或显示数据的客户端应用程序中的对象。 对于服务器应用程序或无人参与的应用程序，您不应。 但是，如果你使用<xref:System.Globalization.DateTimeFormatInfo>对象显式或隐式若要保存以字符串形式的日期和时间数据，你应使用<xref:System.Globalization.DateTimeFormatInfo>反映固定区域性，或你的格式设置约定的对象应指定自定义日期和时间格式的使用而不考虑区域性的字符串。  
  
<a name="Formatting_dates_times"></a>   
## <a name="formatting-dates-and-times"></a>格式设置的日期和时间  
 A<xref:System.Globalization.DateTimeFormatInfo>对象在所有日期和时间格式设置操作中使用隐式或显式。 这些方法包括对以下方法的调用：  
  
-   所有日期和时间格式设置方法，如<xref:System.DateTime.ToString?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%28System.String%29?displayProperty=nameWithType>。  
  
-   主要的复合格式设置方法，即<xref:System.String.Format%2A?displayProperty=nameWithType>。  
  
-   其他复合格式设置方法，如<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>和<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。  
  
 所有日期和时间格式设置操作使都利用<xref:System.IFormatProvider>实现。 <xref:System.IFormatProvider>接口包含单个方法<xref:System.IFormatProvider.GetFormat%28System.Type%29?displayProperty=nameWithType>。 此回调方法传递<xref:System.Type>表示提供的格式设置信息所需的类型的对象。 该方法返回该类型的实例或`null`如果它不能提供类型的实例。 .NET Framework 包括两个<xref:System.IFormatProvider>格式化日期和时间的实现：  
  
-   <xref:System.Globalization.CultureInfo>类，该类表示特定区域性 （或特定国家/地区中的特定语言）。 日期和时间格式设置操作，<xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType>方法返回<xref:System.Globalization.DateTimeFormatInfo>与关联的对象及其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性。  
  
-   <xref:System.Globalization.DateTimeFormatInfo>类，该类提供的及其关联的区域性信息的格式设置约定。 <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A?displayProperty=nameWithType>方法返回其自身的一个实例。  
  
 如果<xref:System.IFormatProvider>实现不提供给格式设置方法显式<xref:System.Globalization.CultureInfo>返回对象<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>使用表示当前线程区域性的属性。  
  
 下面的示例阐释了之间的关系<xref:System.IFormatProvider>接口和<xref:System.Globalization.DateTimeFormatInfo>在格式设置操作的类。 它定义一个自定义<xref:System.IFormatProvider>实现其<xref:System.IFormatProvider.GetFormat%2A>方法显示的格式设置操作请求的对象的类型。 如果其请求<xref:System.Globalization.DateTimeFormatInfo>对象，该方法提供了<xref:System.Globalization.DateTimeFormatInfo>当前线程区域性的对象。 如示例所示，输出<xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法请求<xref:System.Globalization.DateTimeFormatInfo>对象以提供格式设置信息，而<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法请求<xref:System.Globalization.NumberFormatInfo>和<xref:System.Globalization.DateTimeFormatInfo>对象以及<xref:System.ICustomFormatter>实现。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/formatprovider1.cs#9)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/formatprovider1.vb#9)]  
  
<a name="properties"></a>   
## <a name="format-strings-and-datetimeformatinfo-properties"></a>格式字符串和 DateTimeFormatInfo 属性  
 <xref:System.Globalization.DateTimeFormatInfo>对象在格式设置的日期和时间值的操作包括三种类型的使用的属性：  
  
-   日历相关的属性。 属性，如<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>，和<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>，都与所使用的区域性，由定义日历关联<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性。 这些属性用于长日期和时间格式。  
  
-   生成的标准定义结果字符串的属性。 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>， <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>，和<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>属性包含生成的结果字符串由国际标准定义的自定义格式字符串。 这些属性是只读的并且不能修改。  
  
-   定义区分区域性的结果字符串的属性。 某些属性，如<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>和<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>，包含[自定义格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)指定结果字符串的格式。 其他，如<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>， <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>， <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>，和<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>，定义区分区域性的符号或可以在结果字符串中包含的子字符串。  
  
 [标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)，例如"d"、"D"、"f"和"F"，是对应于特定的别名<xref:System.Globalization.DateTimeFormatInfo>格式化模式属性。 大部分[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)与字符串或子字符串的格式设置操作将插入到结果流。 下表列出了标准和自定义日期和时间格式说明符和其关联<xref:System.Globalization.DateTimeFormatInfo>属性。 有关详细信息，有关如何使用这些格式说明符，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 请注意，每个标准格式字符串对应于<xref:System.Globalization.DateTimeFormatInfo>其值为自定义日期和时间格式字符串的属性。 此自定义格式字符串中的单个说明符反过来对应于其他<xref:System.Globalization.DateTimeFormatInfo>属性。 表仅列出<xref:System.Globalization.DateTimeFormatInfo>属性对其标准格式字符串是别名，且不会不可能访问的自定义格式字符串分配给这些具有别名的属性列表属性。 此外，表列出了对应的自定义格式说明符<xref:System.Globalization.DateTimeFormatInfo>属性。  
  
|格式说明符|关联的属性|  
|----------------------|---------------------------|  
|"d"（短日期; 标准格式字符串）|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>定义结果字符串的总体格式。|  
|"D"（长日期; 标准格式字符串）|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>定义结果字符串的总体格式。|  
|"f"(完整日期 / 时间; 标准短格式字符串)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>定义结果字符串的日期部分的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>定义结果字符串的时间部分的格式。|  
|"F"(完整日期 / 长时间; 标准格式字符串)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>定义结果字符串的日期部分的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>定义结果字符串的时间部分的格式。|  
|"g"(常规日期 / 短时间; 标准格式字符串)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>定义结果字符串的日期部分的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>定义结果字符串的时间部分的格式。|  
|"G"(常规日期 / 是长时间，; 是已标准格式字符串)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>定义结果字符串的日期部分的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>定义结果字符串的时间部分的格式。|  
|"M"、"m"（月/日; 标准格式字符串）|<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>定义结果字符串的总体格式。|  
|"O"、"o"(往返日期/时间; 标准格式字符串)|无。|  
|"R", "r" (RFC1123; standard format string)|<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>定义为遵循 RFC 1123 标准的符合的结果字符串。 该属性是只读的。|  
|"s"（可排序日期/时间; 标准格式字符串）|<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>以 ISO 8601 标准定义符合的结果字符串。 该属性是只读的。|  
|"t"（短时间; 标准格式字符串）|<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>定义结果字符串的总体格式。|  
|"T"（长时间; 标准格式字符串）|<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>定义结果字符串的总体格式。|  
|"u"（通用可排序日期/时间; 标准格式字符串）|<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>以协调世界时为 ISO 8601 标准定义符合的结果字符串。 该属性是只读的。|  
|"U"（通用完整日期/时间; 标准格式字符串）|<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>定义结果字符串的总体格式。|  
|"Y"，"y"（年月; 标准格式字符串）|<xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>定义结果字符串的总体格式。|  
|"ddd"（自定义格式说明符）|<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>若要在结果字符串中包含的日期是星期几的缩写的名称。|  
|"g"、"gg"（自定义格式说明符）|调用<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A>结果字符串中插入纪元名称的方法。|  
|"MMM"（自定义格式说明符）|<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>要包含在结果字符串中的月份的缩写的名称。|  
|"MMMM"（自定义格式说明符）|<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> 或<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>，以在结果字符串中包含完整的月份名称。|  
|"t"（自定义格式说明符）|<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> 或<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>，以在结果字符串中包括的 AM/PM 指示符的第一个字符。|  
|"tt"（自定义格式说明符）|<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> 或<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>、 要包含在结果字符串中的完整 AM/PM 指示符。|  
|":"（自定义格式说明符）|<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>若要在结果字符串中包括的时间分隔符。|  
|"/"（自定义格式说明符）|<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>若要在结果字符串中包含的日期分隔符。|  
  
<a name="Modifying"></a>   
## <a name="modifying-datetimeformatinfo-properties"></a>修改 DateTimeFormatInfo 属性  
 你可以更改通过修改的可写的关联的属性的日期和时间格式字符串产生的结果字符串<xref:System.Globalization.DateTimeFormatInfo>对象。 若要确定如果<xref:System.Globalization.DateTimeFormatInfo>对象是可写，则使用<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A>属性。 若要自定义<xref:System.Globalization.DateTimeFormatInfo>对象以这种方式：  
  
1.  创建的读/写副本<xref:System.Globalization.DateTimeFormatInfo>对象你想要修改其格式设置约定。 (请参阅[DateTimeFormatInfo 对象进行实例化](#instantiating)部分。)  
  
2.  修改或多个用于生成所需的结果字符串的属性。 (有关如何格式设置方法使用<xref:System.Globalization.DateTimeFormatInfo>属性以定义结果字符串，请参阅上一节[格式化字符串和 DateTimeFormatInfo 属性](#properties)。)  
  
3.  使用自定义<xref:System.Globalization.DateTimeFormatInfo>对象你创建为<xref:System.IFormatProvider>为格式化方法的调用中的自变量。  
  
 有两种方法可更改的结果字符串的格式：  
  
-   你可以使用<xref:System.Globalization.CultureAndRegionInfoBuilder>类来定义自定义区域性 （的区域性，它具有一个唯一的名称且补充现有区域性） 或替换区域性 （一个使用而不是特定区域性）。 可以保存并以编程方式访问此区域性，就像任何<xref:System.Globalization.CultureInfo>.NET Framework 支持的对象。  
  
-   如果结果字符串不区分区域性的并且不遵循预定义的格式，你可以使用自定义日期和时间格式字符串。 例如，如果您要序列化格式 YYYYMMDDHHmmss 的日期和时间数据，你可以生成的结果字符串由传递的自定义格式字符串<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法，并且你可以将结果字符串转换回<xref:System.DateTime>值通过调用<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>方法。  
  
### <a name="changing-the-short-date-pattern"></a>更改短日期模式  
 以下示例更改"d"（短日期） 标准格式字符串由生成的结果字符串的格式。 更改关联<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>EN-US 或英语 （美国） 区域性，从"d/yyyy"到其默认属性"yyyy-"MM"-"dd"，并使用"d"标准格式字符串来显示日期之前和之后均<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>属性是更改。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example1.cs#10)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example1.vb#10)]  
  
### <a name="changing-the-date-separator-character"></a>更改日期分隔符字符  
 下面的示例更改中的日期分隔符字符<xref:System.Globalization.DateTimeFormatInfo>表示 FR-FR 区域性的格式设置约定的对象。 该示例使用"g"标准格式字符串来显示日期之前和之后均<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>属性更改。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example3.cs#12)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example3.vb#12)]  
  
### <a name="changing-day-name-abbreviations-and-the-long-date-pattern"></a>更改天名称缩写和的长日期模式  
 在某些情况下，长日期模式中，通常会显示完整的日期和月份名称以及月份和年份中某天的数量，可能会太长。 下面的示例将缩短要返回天数后跟一个字符或两个字符的星期几名称的缩写、 月份名称缩写和年的 EN-US 区域性的长日期模式。 这是通过将分配到较短的一天名称缩写<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>数组，并通过修改自定义格式字符串分配给<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>属性。 这会影响结果字符串由"D"和"f"标准格式字符串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example2.cs#13)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example2.vb#13)]  
  
 通常，更改为<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>属性还会影响<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>属性，又定义了"F"标准格式字符串返回的结果字符串。 若要保留原始完整的日期和时间模式，该示例将重新分配原始的自定义格式字符串分配给<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>属性后的<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>修改属性。  
  
### <a name="changing-from-a-12-hour-clock-to-a-24-hour-clock"></a>从以 12 小时时钟制更改为 24 小时制  
 对于.NET Framework 中的许多区域性的时间表示通过以 12 小时时钟制和 AM/PM 指示符。 下面的示例定义`ReplaceWith24HourClock`替换任何以 12 小时时钟制使用以使用 24 小时制的格式的时间格式的方法。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example5.cs#14)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example5.vb#14)]  
  
 该示例使用正则表达式来修改格式字符串。 正则表达式模式`@"^(?<openAMPM>\s*t+\s*)? (?(openAMPM) h+(?<nonHours>[^ht]+)$ | \s*h+(?<nonHours>[^ht]+)\s*t+)`，如下所示定义：  
  
|模式|描述|  
|-------------|-----------------|  
|`^`|从字符串开头开始匹配。|  
|`(?<openAMPM>\s*t+\s*)?`|匹配零个或一个匹配项的零个或多个空格字符后, 跟字母"t"一个或更多次后, 跟零个或多个空白字符。 名为此捕获组`openAMPM`。|  
|`(?(openAMPM) h+(?<nonHours>[^ht]+)$`|如果`openAMPM`组都没有匹配项，匹配的字母"h"一个或多个时间跟在非"h"非"t"的一个或多个字符。 在字符串的结尾结束匹配。 后"h"包含在名为的捕获组捕获的所有字符`nonHours`。|  
|`&#124; \s*h+(?<nonHours>[^ht]+)\s*t+)`|如果`openAMPM`组没有匹配项，匹配"h"一个或多个时间，跟一个或多个字符的非"h"非"t"后, 跟零个或多个空白字符的字母。 最后，匹配字母"t"的一个或多个匹配的项。 在"h"之后和之前的空白区域和"t"包括在名为的捕获组捕获的所有字符`nonHours`。|  
  
 `nonHours`捕获组包含分钟和可能的自定义日期和时间格式字符串的第二个组件以及与任何时间分隔符符号。 替换模式`HH${nonHours}`前面添加对这些元素的子字符串"HH"。  
  
### <a name="displaying-and-changing-the-era-in-a-date"></a>显示和更改日期中的纪元  
 下面的示例将添加到"g"自定义格式说明符<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>表示 EN-US 区域性的格式设置约定的对象的属性。 此添加影响以下三个标准格式字符串：  
  
-   "D"（长日期） 标准格式字符串，其直接映射到<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>属性。  
  
-   "F"(完整日期 / 短时间) 标准格式字符串，产生的结果字符串串联的子字符串由<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>和<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>属性。  
  
-   "F"(完整日期 / 长时间) 标准格式字符串，直接映射到<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>属性。 因为我们未显式设置此属性值，动态生成通过串联<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>和<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>属性。  
  
 该示例还演示如何更改其日历具有单个纪元区域性的纪元名称。 在这种情况下，EN-US 区域性使用公历，由表示<xref:System.Globalization.GregorianCalendar>对象。 <xref:System.Globalization.GregorianCalendar>类支持单个纪元，其名称公元 （公元）。 该示例的纪元名称更改为公元 （基督纪元） 通过将分配给格式字符串中的"g"自定义格式说明符<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>与文字字符串的属性。 文字字符串的使用是必需的因为通常返回纪元名称<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A>从.NET Framework 或 Windows 操作系统提供的区域性表中的私有数据的方法。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example4.cs#11)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example4.vb#11)]  
  
## <a name="parsing-date-and-time-strings"></a>分析日期和时间字符串  
 分析包括将转换的字符串表示形式的日期和时间<xref:System.DateTime>或<xref:System.DateTimeOffset>值。 这两种类型包括`Parse`， `TryParse`， `ParseExact`，和`TryParseExact`方法，以支持分析操作。 `Parse`和`TryParse`的方法将转换可以具有多种格式，一个字符串，而`ParseExact`和`TryParseExact`要求字符串具有定义的格式。 如果在分析操作失败，`Parse`和`ParseExact`引发异常，而`TryParse`和`TryParseExact`返回`false`。  
  
 分析方法隐式或显式使用<xref:System.Globalization.DateTimeStyles>枚举值来确定的样式元素 （例如前导、 尾随，或内部空白） 可出现在字符串无法被分析，以及如何解释已分析的字符串或任何缺少元素。 如果未提供<xref:System.Globalization.DateTimeStyles>值在调用时`Parse`或`TryParse`方法，默认值是<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>，这是包含的复合样式<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite?displayProperty=nameWithType>， <xref:System.Globalization.DateTimeStyles.AllowTrailingWhite?displayProperty=nameWithType>，和<xref:System.Globalization.DateTimeStyles.AllowInnerWhite?displayProperty=nameWithType>标志。 有关`ParseExact`和`TryParseExact`方法，默认值是<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>; 输入的字符串必须精确对应特定自定义日期和时间格式字符串。  
  
 分析方法，还将隐式或显式使用<xref:System.Globalization.DateTimeFormatInfo>定义特定的符号和模式的对象会导致要分析的字符串。 如果未提供<xref:System.Globalization.DateTimeFormatInfo>对象，<xref:System.Globalization.DateTimeFormatInfo>默认情况下使用当前线程区域性的对象。 有关分析日期和时间字符串的详细信息，请参阅各个的分析方法，如<xref:System.DateTime.Parse%2A?displayProperty=nameWithType>， <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>， <xref:System.DateTimeOffset.ParseExact%2A?displayProperty=nameWithType>，和<xref:System.DateTimeOffset.TryParseExact%2A?displayProperty=nameWithType>。  
  
 下面的示例阐释了分析的日期和时间字符串的区分区域性的性质。 它将尝试通过使用 EN-US、 EN-GB、 FR-FR 和 fi FI 区域性的约定来分析两个日期字符串。 将被解释为 8/18/2014 中为 EN-US 的日期区域性引发<xref:System.FormatException>在其他第三个异常区域性因为 18 解释为月份号。 2015 年 1 月 2 日被解析为 EN-US 区域性中的第一个月的第二个天而应用作剩余区域性的第二个月的第一天。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parsing1.cs#15)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parsing1.vb#15)]  
  
 有两个原因通常分析日期和时间的字符串：  
  
-   若要将用户输入转换为日期和时间值。  
  
-   往返日期和时间值;也就是说，反序列化以前序列化为字符串的日期和时间值。  
  
 以下各节讨论更详细介绍这两个操作。  
  
### <a name="parsing-user-strings"></a>分析用户字符串  
 当分析用户输入的日期和时间字符串时，应始终实例<xref:System.Globalization.DateTimeFormatInfo>反映用户的区域性设置，包括用户可能已做的任何自定义的对象。 否则，日期和时间对象可能具有不正确的值。 有关如何实例化信息<xref:System.Globalization.DateTimeFormatInfo>对象以反映用户区域性自定义项，请参阅[DateTimeFormatInfo 和动态数据](#dynamic)部分。  
  
 下面的示例演示的分析操作中反映用户区域性设置和不之间的差异。 在这种情况下，默认系统区域性为 EN-US，但用户使用控制面板中，**地区和语言**从其默认的"年-月-日"的短日期模式更改为"yy/MM/dd"。 当用户输入一个字符串，反映用户设置，并对字符串进行分析通过<xref:System.Globalization.DateTimeFormatInfo>还反映用户设置 （重写） 的对象在分析操作返回正确的结果。 但是，对字符串分析通过<xref:System.Globalization.DateTimeFormatInfo>反映标准的 EN-US 区域性设置，则分析方法将引发的对象<xref:System.FormatException>异常因为它将解释 14 的月数不在一年的最后两位数。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parse2.cs#16)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parse2.vb#16)]  
  
### <a name="serializing-and-deserializing-date-and-time-data"></a>序列化和反序列化的日期和时间数据  
 序列化日期和时间数据应保存/还原;也就是说，所有序列化和反序列化的值应完全相同。 如果日期和时间值表示单个时刻，反序列化的值应表示相同时间点而不考虑区域性或在其还原系统的时区。 往返行程日期和时间数据成功，你必须使用固定区域性，返回的约定<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A>属性，以生成和分析数据。 在格式设置和分析操作应永远不会反映的默认区域性的约定。 如果你使用默认区域性设置，数据的可移植性是严格限制;它可以是线程的仅在线程的区域性特定的设置是线程的相同的依据其进行序列化上成功反序列化。 在某些情况下，这意味着，数据无法甚至成功序列化和反序列化相同系统上。  
  
 如果日期和时间值的时间组件非常重要，它应此外转换为 UTC，并且使用"o"或"r"序列化[标准格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)。 然后可以通过调用分析方法并将其传递相应的格式字符串沿具有固定区域性为还原时间数据`provider`自变量。  
  
 下面的示例阐释了往返日期和时间值的过程。 其序列化的日期和时间观察到美国的系统上太平洋时间和当前区域性为 EN-US。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize1.cs#17)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize1.vb#17)]  
  
 反序列化布鲁塞尔、 哥本哈根、 马德里和巴黎时区中的系统上的数据和当前区域性为 fr 法属 还原的日期是 9 个小时晚于原始日期，反映从 UTC 晚八个小时到早于 UTC 一小时时区调整。 原始日期和还原的日期表示相同的时刻。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize2.cs#18)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize2.vb#18)]  
  
   
  
## Examples  
 下面的示例使用反射获取的属性<xref:System.Globalization.DateTimeFormatInfo>英语 （美国） 区域性的对象。 它显示这些属性包含自定义格式字符串的值，并使用这些字符串来显示日期的格式。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/format1.cs#5)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/format1.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化不依赖于区域性的（固定的）<see cref="T:System.Globalization.DateTimeFormatInfo" /> 类的新可写实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数创建<xref:System.Globalization.DateTimeFormatInfo>表示固定区域性的日期和时间信息的对象。 若要创建<xref:System.Globalization.DateTimeFormatInfo>特定区域性的对象，请创建<xref:System.Globalization.CultureInfo>该区域性对象，并检索<xref:System.Globalization.DateTimeFormatInfo>对象由其<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性。  
  
 属性<xref:System.Globalization.DateTimeFormatInfo>可以修改此构造函数创建的对象。 但是，不能修改<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性，因为固定区域性支持的本地化的版本的公历。 若要创建<xref:System.Globalization.DateTimeFormatInfo>对象，它使用特定的日历，必须实例化<xref:System.Globalization.CultureInfo>对象，该对象支持的日历和分配到日历<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性<xref:System.Globalization.DateTimeFormatInfo>返回对象<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>属性.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedDayNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedDayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedDayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.String" /> 类型的一维数组，它包含周中各天的区域性特定的缩写名称。</summary>
        <value>一个类型 <see cref="T:System.String" /> 的一维数组，它包含周中各天的特定于区域性的缩写名称。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的数组包含"Sun"、"Mon"、"Tue"、"Wed"、"Thu"、"Fri"和"Sat"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果设置此属性，该数组必须是一维，并且必须完全七个元素。 第一个元素 （位于索引零的元素） 表示由定义日历中每周的第一天<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性。  
  
 如果自定义格式字符串中包含"ddd"格式说明符，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>或<xref:System.DateTimeOffset.ToString%2A>方法包含的适当成员<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>代替"ddd"在结果字符串中的数组。  
  
 如果此属性受影响的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性更改。 如果所选<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>不支持缩写的星期几名称，则数组包含完整的星期几名称。  
  
   
  
## Examples  
 下面的示例创建读/写<xref:System.Globalization.CultureInfo>对象，表示英语 （美国） 区域性，并将分配缩写的星期几名称到其<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>属性。 然后，它使用中的"ddd"格式说明符来显示的字符串表示形式从 2014 年 5 月 28 日开始的一周的日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/cs/abbreviateddaynames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/vb/abbreviateddaynames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">该属性正被设置为多维数组或者长度不是正好为 7 的数组。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedMonthGenitiveNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedMonthGenitiveNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的月份缩写名称的字符串数组。</summary>
        <value>月份缩写名称的数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在某些语言中，日期部分的月份名称将出现在所有格中。 例如，RU-RU 或俄语 （俄罗斯） 区域性中的日期由天数和所有格月份名称，如 1 Января （1 年 1 月） 组成。 对于这些区域性，如果自定义格式字符串中包含"MMM"格式说明符，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>或<xref:System.DateTimeOffset.ToString%2A>方法包含的适当成员<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>代替在结果字符串中的"MMM"的数组。  
  
 在集运算中，该数组必须是一维 13 个元素，因为<xref:System.Globalization.Calendar>对象提供有 13 个月的日历。 对于具有 12 个月的日历，第 13 个元素应为<xref:System.String.Empty?displayProperty=nameWithType>。 第一个元素 （位于索引零的元素） 表示由该年的第一个月<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性。  
  
 如果你设置<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>属性，还必须设置<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>属性。  
  
   
  
## Examples  
 下面的示例创建读/写<xref:System.Globalization.CultureInfo>对象，表示英语 （美国） 区域性，并将分配缩写所有格月份名称传递给其<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>和<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>属性。 然后，它显示的字符串表示形式包括区域性的支持日历中每个月的缩写的月份名称的日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在设置操作中，该数组是多维数组或者长度不是正好为 13 的数组。</exception>
        <exception cref="T:System.ArgumentNullException">在设置操作中，数组或数组的其中一个元素为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">在设置操作中，当前的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedMonthNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedMonthNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一维字符串数组，它包含各月的特定于区域性的缩写名称。</summary>
        <value>一个具有 13 个元素的一维字符串数组，它包含各月的特定于区域性的缩写名称。 对于 12 个月的日历，数组的第 13 个元素是一个空字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 数组包含"Jan"、"Feb"、"Mar"、"Apr"、"May"、"Jun"、"Jul"、"Aug"、"Sep"、"Oct"、"Nov"、"Dec"和""。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果设置此属性，必须完全 13 个元素的一维数组。 <xref:System.Globalization.Calendar> 对象提供具有 13 个月的日历。 第一个元素 （位于索引零的元素） 表示由该年的第一个月<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性。  
  
 如果你设置<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>属性，还必须设置<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>属性。 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>和<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>属性用于设置使用以下格式字符串的日期格式：  
  
-   标准日期和时间格式字符串，别名自定义格式字符串，其中包含"MMM"格式说明符。  
  
-   自定义日期和时间格式字符串，其中包含"MMM"格式说明符。  
  
 如果此属性受影响的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性更改。 如果所选<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>不支持缩写的月份名称、 该数组包含的完整月份名称。  
  
   
  
## Examples  
 下面的示例创建读/写<xref:System.Globalization.CultureInfo>对象，表示英语 （美国） 区域性，并将分配缩写所有格月份名称传递给其<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>和<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>属性。 然后，它显示的字符串表示形式包括区域性的支持日历中每个月的缩写的名称的日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">该属性正被设置为多维数组或者长度不是正好为 13 的数组。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      </Docs>
    </Member>
    <Member MemberName="AMDesignator">
      <MemberSignature Language="C#" Value="public string AMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      <MemberSignature Language="VB.NET" Value="Public Property AMDesignator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AMDesignator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示处于“上午”（中午前）的各小时的字符串指示符。</summary>
        <value>表示属于上午的各小时的字符串指示符。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为"AM"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>属性适用于所有时间从 0:00:00 （午夜） 到 11:59:59.999。  
  
 如果自定义格式字符串中包含"tt"格式说明符，时间是在中午前，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>或<xref:System.DateTimeOffset.ToString%2A>方法包含的值<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>来代替"tt"在结果字符串中的属性。 如果自定义格式字符串中包含"t"自定义格式说明符，仅首字符的<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>属性值将包括在内。 它是需要维护 A.M.之间差异的语言，应使用"tt" 和下午 一个示例是日语，在其中上午 和下午 指示符的差异而不是第一个字符的第二个字符。  
  
 对于不使用上午区域性 指示符，此属性返回一个空字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar Calendar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); void set(System::Globalization::Calendar ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于当前区域性的日历。</summary>
        <value>用于当前区域性的日历。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值是一个 <see cref="T:System.Globalization.GregorianCalendar" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性接受对与关联的区域性有效的日历<xref:System.Globalization.DateTimeFormatInfo>对象。 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>属性指定可由特定区域性的日历和<xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType>属性指定区域性的默认日历。  
  
 更改此属性的值会影响以下属性： <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>， <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A>， <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A>， <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>， <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>， <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>， <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>和<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>。  
  
 例如，如果当前线程的区域性为日语，此属性接受<xref:System.Globalization.JapaneseCalendar>， <xref:System.Globalization.GregorianCalendarTypes.Localized> <xref:System.Globalization.GregorianCalendar>，或<xref:System.Globalization.GregorianCalendarTypes.USEnglish> <xref:System.Globalization.GregorianCalendar>。 当<xref:System.Globalization.JapaneseCalendar>使用默认的长日期说明符是"gg y '\x5e74 AM' \x6708 具有 \x65e5"。 当<xref:System.Globalization.GregorianCalendarTypes.Localized> <xref:System.Globalization.GregorianCalendar>，使用默认的长日期说明符是"yyyy '\x5e74 AM' \x6708 具有 \x65e5"。  
  
   
  
## Examples  
 下面的示例定义`ChangeCalendar`区域性的当前日历更改为指定日历，除非它已是当前日历或不受区域性的方法。 调用的方法的代码实例化<xref:System.Globalization.CultureInfo>对象，表示阿拉伯语 （埃及） 区域性并首先尝试更改其日历为日本日历。 由于不支持日语日历，则该方法会使不更改区域性的日历。 但是，因为 um al Qura 日历为属于<xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>集合，该方法未在当前日历从而的成功 AR-EG 区域性。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Calendar#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/cs/CalendarTest1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Calendar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/vb/CalendarTest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性正被设置为对当前区域性无效的 <see cref="T:System.Globalization.Calendar" /> 对象。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="CalendarWeekRule">
      <MemberSignature Language="C#" Value="public System.Globalization.CalendarWeekRule CalendarWeekRule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CalendarWeekRule CalendarWeekRule" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule" />
      <MemberSignature Language="VB.NET" Value="Public Property CalendarWeekRule As CalendarWeekRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CalendarWeekRule CalendarWeekRule { System::Globalization::CalendarWeekRule get(); void set(System::Globalization::CalendarWeekRule value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CalendarWeekRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定使用哪个规则确定该年的第一个日历周。</summary>
        <value>确定该年的第一个日历周的值。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值是 <see cref="F:System.Globalization.CalendarWeekRule.FirstDay" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此属性受影响的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性更改。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性正被设置的值不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
        <exception cref="T:System.InvalidOperationException">在设置操作中，当前的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
        <altmember cref="T:System.Globalization.CalendarWeekRule" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的浅表副本。</summary>
        <returns>从原始 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 复制的新 <see cref="T:System.Globalization.DateTimeFormatInfo" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 克隆可写即使原始<xref:System.Globalization.DateTimeFormatInfo>对象是只读的。 因此，可以使用用户定义的模式修改克隆的属性。  
  
 一个对象的浅表副本是只是对象的副本。 如果对象包含对其他对象的引用，则浅表复制不创建所引用对象的副本。 它而是指原始对象。 相比之下，对象的深层副本创建的对象的副本以及直接或间接引用该对象的所有内容的副本。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::DateTimeFormatInfo ^ CurrentInfo { System::Globalization::DateTimeFormatInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取基于当前区域性对值进行格式设置的只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</summary>
        <value>一个基于当前线程的 <see cref="T:System.Globalization.CultureInfo" /> 对象的只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo>返回对象<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>属性反映用户重写。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>属性，以检索<xref:System.Globalization.DateTimeFormatInfo>对象，表示当前区域性，在这种情况下即 EN-US 区域性的格式设置约定。 它将显示格式字符串和六个的格式设置属性的结果字符串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/cs/CurrentInfo1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/vb/CurrentInfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="DateSeparator">
      <MemberSignature Language="C#" Value="public string DateSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DateSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property DateSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DateSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置分隔日期中各组成部分（即年、月、日）的字符串。</summary>
        <value>分隔日期中各组成部分（即年、月、日）的字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为“/”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果自定义格式字符串中包含"/"格式说明符，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>方法显示的值<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>代替"/"在结果字符串中。  
  
 <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>属性定义来代替日期分隔符的字符串 （"/"自定义日期和时间格式说明符） 中的结果字符串中的格式设置操作。 它还定义分析操作中的日期分隔符字符串。  
  
   
  
## Examples  
 下面的示例实例化<xref:System.Globalization.CultureInfo>对象对于 EN-US 区域性中，更改到其日期分隔符"-"，并通过使用"d"、"G"和"g"标准格式字符串来显示日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.DateSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/cs/dateseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.DateSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/vb/dateseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      </Docs>
    </Member>
    <Member MemberName="DayNames">
      <MemberSignature Language="C#" Value="public string[] DayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] DayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property DayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ DayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一维字符串数组，它包含该周中各天的特定于区域性的完整名称。</summary>
        <value>一个一维字符串数组，它包含周中各天的特定于区域性的完整名称。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 数组包含"Sunday"、"Monday"、"Tuesday"、"Wednesday"、"Thursday"、"Friday"和"Saturday"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果设置此属性，该数组必须是一维，并且必须完全七个元素。 第一个元素 （位于索引零的元素） 表示由定义日历中每周的第一天<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性。  
  
 如果自定义格式字符串中包含"dddd"格式说明符，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>方法包含相应的值<xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>代替"dddd"在结果字符串中的成员。  
  
 如果此属性受影响的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性更改。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">该属性正被设置为多维数组或者长度不是正好为 7 的数组。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="FirstDayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek FirstDayOfWeek { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek FirstDayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public Property FirstDayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek FirstDayOfWeek { DayOfWeek get(); void set(DayOfWeek value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一周的第一天。</summary>
        <value>表示一周的第一天的枚举值。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值是 <see cref="F:System.DayOfWeek.Sunday" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此属性受影响的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性更改。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性正被设置的值不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="FullDateTimePattern">
      <MemberSignature Language="C#" Value="public string FullDateTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property FullDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullDateTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>为长日期和长时间值获取或设置自定义格式字符串。</summary>
        <value>长日期和时间值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "F"标准格式字符串是的别名<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>属性。 换而言之，分配给此属性的自定义格式字符串定义的"F"标准格式字符串的结果字符串的格式。 有关详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)。  
  
 值<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>通过串联动态生成属性<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>和<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>属性，并用空格分隔。 在以下情况下进行此动态分配：  
  
-   如果之前检索此属性值已显式设置。  
  
-   时的值<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>属性更改。  
  
-   时的值<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>属性更改。  
  
 如果此属性受影响的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性更改。  
  
   
  
## Examples  
 下面的示例显示的值<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>某些区域性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CPP/dtfi_fulldatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CS/dtfi_fulldatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/VB/dtfi_fulldatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedDayName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedDayName(DayOfWeek dayofweek);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek">一个 <see cref="T:System.DayOfWeek" /> 值。</param>
        <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回周中指定日期的区域性特定的缩写名称。</summary>
        <returns>由 <paramref name="dayofweek" /> 表示的周中日期的区域性特定的缩写名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于默认的固定<xref:System.Globalization.DateTimeFormatInfo>对象，此方法将返回字符串中的<xref:System.Globalization.GregorianCalendar>:  
  
|`dayofweek`|返回值|  
|-----------------|------------------|  
|星期日|"Sun"|  
|星期一|"Mon"|  
|星期二|"星期二"|  
|星期三|"星期三"|  
|星期四|"星期四"|  
|星期五|"星期五"|  
|星期六|"周六至"|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedEraName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbbreviatedEraName (era As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedEraName(int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">表示纪元的整数。</param>
        <summary>返回包含指定纪元的缩写名称的字符串（如果缩写名称存在）。</summary>
        <returns>包含指定纪元的缩写名称的字符串（如果缩写名称存在）。  
  
 或  
  
 包含纪元的完整名称的字符串（如果缩写名称不存在）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 纪元名称是日历用来引用一段时间推测从固定的点或事件的名称。 例如，"公元" 或者"开始" 为当前纪元公历日历中。  
  
 有效值`era`中列出<xref:System.Globalization.Calendar.Eras%2A>属性的适当的类派生自<xref:System.Globalization.Calendar>。 例如：<xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=nameWithType>显示的此实现支持的纪元列表。  
  
 在<xref:System.Globalization.JapaneseCalendar>类，缩写的纪元名称是完整的纪元名称的第一个字符。 该字符是单字符不区分大小写拉丁字母缩写或单字符日文汉字缩写。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> 不表示在 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 属性中指定的日历中的有效纪元。</exception>
        <block subset="none" type="usage">
          <para>如果<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />是<see cref="T:System.Globalization.TaiwanCalendar" />但<see cref="P:System.Threading.Thread.CurrentCulture" />不是"ZH-TW"，然后<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />， <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />，和<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />返回空字符串 ("")。</para>
        </block>
        <altmember cref="T:System.Globalization.JapaneseCalendar" />
        <altmember cref="T:System.Globalization.TaiwanCalendar" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedMonthName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbbreviatedMonthName (month As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedMonthName(int month);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">1 到 13 之间的一个整数，用于表示要检索的月份的名称。</param>
        <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回指定月份的区域性特定的缩写名称。</summary>
        <returns>由 <paramref name="month" /> 表示的月份的区域性特定的缩写名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于默认的固定<xref:System.Globalization.DateTimeFormatInfo>对象，此方法将返回字符串中的<xref:System.Globalization.GregorianCalendar>对象。  
  
|`month`|返回值|  
|-------------|------------------|  
|1|"年 1 月"|  
|2|"年 2 月"|  
|3|"日"|  
|4|"日"|  
|5|"可能"|  
|6|"日"|  
|7|"七月"|  
|8|"日"|  
|9|"日"|  
|10|"年 10 月"|  
|11|"Nov"|  
|12|"年 12 月"|  
|13|""|  
  
 <xref:System.Globalization.Calendar> 对象可以适应具有 13 个月的日历。 对于 12 个月日历，则始终作为名称的第 13 个月返回空字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> 小于 1 或大于 13。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAllDateTimePatterns">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回可用于对日期和时间值进行格式设置的标准模式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllDateTimePatterns () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetAllDateTimePatterns();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回可用于对日期和时间值进行格式设置的所有标准模式。</summary>
        <returns>一个数组，包含可以用于对日期和时间值进行格式设置的标准模式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回一个数组，包含对应于标准格式字符串的所有自定义格式字符串。 请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)有关标准格式字符串的列表。  
  
 你可以使用自定义格式字符串中返回的数组<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>在格式设置操作的方法。 但是，如果这样做的字符串表示形式的日期和时间值返回在于格式设置操作无法始终分析成功通过`Parse`和`TryParse`方法。 因此，不能假定返回的自定义格式字符串<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>方法可以用于往返行程日期和时间值。 以下示例阐释了此问题。 它检索<xref:System.Globalization.DateTimeFormatInfo>包含意大利 （意大利语） 区域性的格式设置信息的对象。 它通过每个自定义格式字符串中返回的数组<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns>方法<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法创建的字符串表示形式的日期和时间。 此示例然后尝试通过调用分析此值<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法。 如示例输出所示，某些自定义格式字符串不会生成日期和时间值，它成功往返。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex1.vb#1)]  
  
 若要分析的字符串表示形式的日期和时间，可以表示了大量预定义的自定义格式，请调用以下方法之一：  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>  
  
 返回的数组中的自定义格式字符串<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>方法依赖于区域性的当前日历为其<xref:System.Globalization.DateTimeFormatInfo>对象提供格式设置信息。 如果更改日历，此方法返回的数组也会更改。  
  
   
  
## Examples  
 下面的示例显示日期和时间格式字符串，用于固定区域性，以及生成时，该格式字符串用于设置特定日期的格式的结果字符串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsinv.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsinv.vb#3)]  
  
 该示例实例化<xref:System.Globalization.DateTimeFormatInfo>通过调用表示固定区域性的对象<xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A>构造函数。 它无法检索<xref:System.Globalization.DateTimeFormatInfo>表示固定区域性<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllDateTimePatterns (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetAllDateTimePatterns(char format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">标准格式字符串。</param>
        <summary>返回可在其中使用指定标准格式字符串对日期和时间值进行格式设置的所有模式。</summary>
        <returns>一个数组，它包含可在其中使用指定格式字符串对日期和时间值进行格式设置的标准模式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回包含对应于特定的标准格式字符串的自定义格式字符串的数组。 请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)有关标准格式字符串的列表。  
  
 你可以使用自定义格式字符串中返回的数组<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>在格式设置操作的方法。 但是，如果这样做的字符串表示形式的日期和时间值返回在于格式设置操作无法始终分析成功通过`Parse`和`TryParse`方法。 因此，不能假定返回的自定义格式字符串<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>方法可以用于往返行程日期和时间值。 以下示例阐释了此问题。 它检索<xref:System.Globalization.DateTimeFormatInfo>包含俄罗斯 （俄语） 区域性的格式设置信息的对象。 它调用<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%28System.Char%29>每个标准格式字符串，然后每个自定义格式字符串到返回的数组中的传递方法<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法创建的字符串表示形式的日期和时间。 此示例然后尝试通过调用分析此值<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法。 如示例输出所示，某些自定义格式字符串不会生成日期和时间值，它成功往返。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex2.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex2.vb#2)]  
  
 若要分析的字符串表示形式的日期和时间，可以表示了大量预定义的自定义格式，请调用以下方法之一：  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>  
  
 返回的数组中的自定义格式字符串<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>方法依赖于区域性的当前日历为其<xref:System.Globalization.DateTimeFormatInfo>对象提供格式设置信息。 如果更改日历，此方法返回的数组也会更改。  
  
   
  
## Examples  
 下面的示例显示当前日历的日期和时间模式。  
  
 [!code-cpp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CS/source.cs#1)]
 [!code-vb[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="format" /> 不是有效的标准格式字符串。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetDayName">
      <MemberSignature Language="C#" Value="public string GetDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDayName(DayOfWeek dayofweek);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek">一个 <see cref="T:System.DayOfWeek" /> 值。</param>
        <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回周中指定日期的区域性特定的全名。</summary>
        <returns>由 <paramref name="dayofweek" /> 表示的周中日期的区域性特定的全名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于默认的固定<xref:System.Globalization.DateTimeFormatInfo>对象，此方法将返回字符串中的<xref:System.Globalization.GregorianCalendar>对象。  
  
|`dayofweek`|返回值|  
|-----------------|------------------|  
|星期日|"Sunday"|  
|星期一|"Monday"|  
|星期二|"星期二"|  
|星期三|"Wednesday"|  
|星期四|"Thursday"|  
|星期五|"星期五"|  
|星期六|"星期六"|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetEra">
      <MemberSignature Language="C#" Value="public int GetEra (string eraName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetEra(string eraName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEra (eraName As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetEra(System::String ^ eraName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eraName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eraName">包含纪元名称的字符串。</param>
        <summary>返回表示指定纪元的整数。</summary>
        <returns>如果 <paramref name="eraName" /> 有效，则为表示纪元的整数；否则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 纪元名称是日历用来引用一段时间推测从固定的点或事件的名称。 例如，"公元" 或者"开始" 为当前纪元公历日历中。  
  
 与比较`eraName`不区分大小写，例如，"公元" 等效于"公元"。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> 仅当忽略缩写的纪元名称中的标点<xref:System.Globalization.GregorianCalendar>中选择<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>并且区域性使用"公元" 作为纪元名称，即"公元" 等效于"AD"。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> 比较`eraName`与返回的完整纪元名称<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A>返回的缩写的纪元名称的与<xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A>。  
  
   
  
## Examples  
 下面的示例演示<xref:System.Globalization.DateTimeFormatInfo>忽略纪元名称中的标点，只有当日历为公历并且区域性使用的纪元名称"公元"。  
  
 [!code-cpp[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CPP/gregorian_getera.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CS/gregorian_getera.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/VB/gregorian_getera.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eraName" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="GetEraName">
      <MemberSignature Language="C#" Value="public string GetEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEraName (era As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEraName(int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">表示纪元的整数。</param>
        <summary>返回包含指定纪元名称的字符串。</summary>
        <returns>包含纪元名称的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 纪元名称是日历用来引用一段时间推测从固定的点或事件的名称。 例如，"公元" 或者"开始" 为当前纪元公历日历中。  
  
 有效值`era`中列出<xref:System.Globalization.Calendar.Eras%2A>属性的适当的类派生自<xref:System.Globalization.Calendar>。 例如：<xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=nameWithType>显示的此实现支持的纪元列表。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> 不表示在 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 属性中指定的日历中的有效纪元。</exception>
        <block subset="none" type="usage">
          <para>如果由表示日历<see cref="T:System.Globalization.TaiwanCalendar" />但<see cref="P:System.Threading.Thread.CurrentCulture" />不是"ZH-TW"，然后<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />， <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />，和<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />返回空字符串 ("")。</para>
        </block>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">所需格式化服务的类型。</param>
        <summary>返回指定类型的对象，它提供日期和时间格式化服务。</summary>
        <returns>如果 <paramref name="formatType" /> 与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的类型相同，则为当前对象；否则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Format(String, IFormatProvider)`支持的基本数据类型的方法调用此方法时当前<xref:System.Globalization.DateTimeFormatInfo>对象作为传递<xref:System.IFormatProvider>参数。 此方法实现 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo GetInstance (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo GetInstance(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (provider As IFormatProvider) As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::DateTimeFormatInfo ^ GetInstance(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">获取 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象的 <see cref="T:System.IFormatProvider" />。  
  
 或  
  
 要获取 <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" /> 的 <see langword="null" />。</param>
        <summary>返回与指定 <see cref="T:System.IFormatProvider" /> 关联的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</summary>
        <returns>与 <see cref="T:System.IFormatProvider" /> 关联的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>方法`formatProvider`使用<xref:System.Globalization.DateTimeFormatInfo>对象作为`Type`参数。 如果`formatProvider`是`null`或如果<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>返回`null`，此方法返回<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>。  
  
 你的应用程序可以获取<xref:System.Globalization.DateTimeFormatInfo>使用以下方法之一对特定区域性的对象：  
  
-   <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性。  
  
-   <xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A>方法，其中`provider`是<xref:System.Globalization.CultureInfo>对象。  
  
 A<xref:System.Globalization.DateTimeFormatInfo>只能用于固定区域性或特定区域性 （而不能为非特定区域性） 创建对象。  
  
 有关固定区域性、 特定区域性和非特定区域性的详细信息，请参阅<xref:System.Globalization.CultureInfo>类的说明。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetMonthName">
      <MemberSignature Language="C#" Value="public string GetMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMonthName (month As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetMonthName(int month);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">1 到 13 之间的一个整数，用于表示要检索的月份的名称。</param>
        <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回指定月份的区域性特定的全名。</summary>
        <returns>由 <paramref name="month" /> 表示的月份的区域性特定的全名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于默认的固定<xref:System.Globalization.DateTimeFormatInfo>对象，此方法将返回字符串中的<xref:System.Globalization.GregorianCalendar>对象。  
  
|`month`|返回值|  
|-------------|------------------|  
|1|"年 1 月"|  
|2|"年 2 月"|  
|3|"年 3 月"|  
|4|"年 4 月"|  
|5|"可能"|  
|6|"年 6 月"|  
|7|"年 7 月"|  
|8|"年 8 月"|  
|9|"年 9 月"|  
|10|"年 10 月"|  
|11|"年 11 月"|  
|12|"年 12 月"|  
|13|""|  
  
 <xref:System.Globalization.Calendar> 对象可以适应具有 13 个月的日历。 对于 12 个月日历，则始终作为名称的第 13 个月返回空字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> 小于 1 或大于 13。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      </Docs>
    </Member>
    <Member MemberName="GetShortestDayName">
      <MemberSignature Language="C#" Value="public string GetShortestDayName (DayOfWeek dayOfWeek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetShortestDayName(valuetype System.DayOfWeek dayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetShortestDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetShortestDayName(DayOfWeek dayOfWeek);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayOfWeek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayOfWeek">
          <see cref="T:System.DayOfWeek" /> 值之一。</param>
        <summary>获取与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的周中指定日期的最短日期缩写名称。</summary>
        <returns>对应于 <paramref name="dayOfWeek" /> 参数的周的缩写名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示几个方法和指定日期和时间格式模式、 本机日历名称和完整和缩写的月份和日期名称的属性。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dayOfWeek" /> 不是 <see cref="T:System.DayOfWeek" /> 枚举中的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::DateTimeFormatInfo ^ InvariantInfo { System::Globalization::DateTimeFormatInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取不依赖于区域性的（固定）默认只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</summary>
        <value>不依赖于区域性的（固定的）默认只读对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性不会更改，无论当前区域性。 因此，固定区域性的<xref:System.Globalization.DateTimeFormatInfo>对象可以用于生成在分析和格式设置操作是多区域性的数据的一致，依赖于区域性的结果。 例如，如果从多个区域性的日期和时间数据将保留在字符串形式，它可进行格式设置通过使用<xref:System.Globalization.DateTimeFormatInfo>固定区域性的对象，并已保存。 然后可以通过使用固定区域性的分析它<xref:System.Globalization.DateTimeFormatInfo>对象。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是否为只读。</summary>
        <value>
          如果 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="LongDatePattern">
      <MemberSignature Language="C#" Value="public string LongDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property LongDatePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LongDatePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置长日期值的自定义格式字符串。</summary>
        <value>长日期值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>属性定义通过调用返回的日期字符串的区域性特定格式<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和由复合格式字符串，则提供"D"标准格式字符串。 下面的示例阐释了以下之间的关系:"D"标准格式字符串中，自定义格式字符串由<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>属性和特定于区域性的日期的表示形式。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern1.vb#2)]  
  
 请参阅[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)可结合使用来构造自定义格式字符串，例如，"dddd，dd MMMM yyyy"的单个自定义格式说明符。  
  
 应在为确切字符串而不是使用日期分隔符占位符的长日期模式来设置日期分隔符。 例如，若要获取 MM DD yyyy 的模式，设置为"MM DD yyyy"的长日期模式。  
  
 如果日历由区域性发生变化，可能会更改此属性的值。 例如，下面的示例演示如何<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>属性<xref:System.Globalization.CultureInfo>对象以表示阿拉伯语 （叙利亚） 区域性更改时<xref:System.Globalization.Calendar>对象使用的区域性发生变化。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern2.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern2.vb#3)]  
  
   
  
## Examples  
 下面的示例显示的值<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>某些区域性的属性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CPP/dtfi_longdatepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/dtfi_longdatepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/dtfi_longdatepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
      </Docs>
    </Member>
    <Member MemberName="LongTimePattern">
      <MemberSignature Language="C#" Value="public string LongTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property LongTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LongTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>为长时间值获取或设置自定义格式字符串。</summary>
        <value>长时间值的格式模式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>属性定义通过调用返回的日期字符串的区域性特定格式<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和由复合格式字符串，则提供"T"标准格式字符串。  
  
 我们建议你在为确切字符串而不是使用时间分隔符占位符的长时间模式中设置的时间分隔符。 例如，若要获取模式 h mm ss，设置为"h-mm-ss"的长日期模式。  
  
   
  
## Examples  
 下面的示例显示的值<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>某些区域性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CPP/dtfi_longtimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CS/dtfi_longtimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/VB/dtfi_longtimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
      </Docs>
    </Member>
    <Member MemberName="MonthDayPattern">
      <MemberSignature Language="C#" Value="public string MonthDayPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MonthDayPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthDayPattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MonthDayPattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置月份和日期值的自定义格式字符串。</summary>
        <value>月份和日期值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>属性定义通过调用返回的日期字符串的区域性特定格式<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和由复合格式字符串，则提供的"m"和"M"标准格式字符串。  
  
 如果此属性受影响的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性更改。  
  
 我们建议你在为确切字符串而不是使用日期分隔符占位符的月份和日期模式中设置的日期分隔符。 例如，若要获取的模式 MM DD，设置为"月-日"的月份和日期模式。  
  
   
  
## Examples  
 下面的示例显示的值<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>某些区域性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CPP/dtfi_monthdaypattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CS/dtfi_monthdaypattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/VB/dtfi_monthdaypattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
      </Docs>
    </Member>
    <Member MemberName="MonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] MonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthGenitiveNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ MonthGenitiveNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的月份名称的字符串数组。</summary>
        <value>月份名称的字符串数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在某些语言中，日期部分的月份名称将出现在所有格中。 例如，俄语 （俄罗斯） 或"RU-RU"中的日期，区域性的日编号和包含所有格月份名称，如 1 Января。  
  
 当设置此属性时，该数组必须是一维，并且必须具有完全 13 个元素。 <xref:System.Globalization.Calendar> 对象提供具有 13 个月的日历。 第一个元素 （位于索引零的元素） 表示由该年的第一个月<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性。如果你设置<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>属性，还必须设置<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>属性。  
  
   
  
## Examples  
 下面的示例演示几个方法和指定日期和时间格式模式、 本机日历名称和完整和缩写的月份和日期名称的属性。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在设置操作中，该数组是多维数组或者长度不是正好为 13 的数组。</exception>
        <exception cref="T:System.ArgumentNullException">在设置操作中，数组或数组的其中一个元素为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">在设置操作中，当前的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="MonthNames">
      <MemberSignature Language="C#" Value="public string[] MonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ MonthNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.String" /> 类型的一维数组，它包含月份的区域性特定的全名。</summary>
        <value>一个类型 <see cref="T:System.String" /> 的一维数组，该数组包含月份的特定于区域性的完整名称。 在 12 个月的日历中，数组的第 13 个元素是一个空字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 数组包含"January"、"February"、"March"、"April"、"May"、"June"、"July"、"August"、"September"、"October"、"November"、"December"和""。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当设置此属性时，该数组必须是一维，并且必须具有完全 13 个元素。 <xref:System.Globalization.Calendar> 对象提供具有 13 个月的日历。 第一个元素 （位于索引零的元素） 表示由该年的第一个月<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性。  
  
 如果你设置<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>属性，还必须设置<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>属性。  
  
 如果自定义模式中包括的格式模式"MMMM"<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>显示的值<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>代替"MMMM"中的格式模式。  
  
 如果此属性受影响的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性更改。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">该属性正被设置为多维数组或者长度不是正好为 13 的数组。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NativeCalendarName">
      <MemberSignature Language="C#" Value="public string NativeCalendarName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeCalendarName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NativeCalendarName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NativeCalendarName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的本机日历名称。</summary>
        <value>在与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性中，如果所用日历的本地名称可用，则为该名称；如果该本地日历名称不可用，则为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示几个方法和指定日期和时间格式模式、 本机日历名称和完整和缩写的月份和日期名称的属性。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>如果<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />是<see cref="T:System.Globalization.TaiwanCalendar" />但<see cref="P:System.Threading.Thread.CurrentCulture" />不是"ZH-TW"，然后<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />， <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />，和<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />返回空字符串 ("")。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PMDesignator">
      <MemberSignature Language="C#" Value="public string PMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      <MemberSignature Language="VB.NET" Value="Public Property PMDesignator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PMDesignator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示处于“下午”（中午后）的各小时的字符串指示符。</summary>
        <value>表示处于“下午”（中午后）的各小时的字符串指示符。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为"PM"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>属性用于所有时间自 12:00:00 （中午） 到 23:59:59.999。  
  
 如果自定义模式包括格式模式"tt"并且时间中午后，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>显示的值<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>来代替"tt"中的格式模式。 如果自定义模式中包括的格式模式"t"的第一个字符仅<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>显示。 你的应用程序应为其就需要维护 AM 与 PM 之间的差异的语言中使用"tt"。 以日语为例，其 AM 和 PM 指示符的差异点为第二个字符，而非第一个字符。  
  
 对于不使用 PM 指示符的区域性，此属性返回一个空字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo ReadOnly (System.Globalization.DateTimeFormatInfo dtfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo ReadOnly(class System.Globalization.DateTimeFormatInfo dtfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (dtfi As DateTimeFormatInfo) As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::DateTimeFormatInfo ^ ReadOnly(System::Globalization::DateTimeFormatInfo ^ dtfi);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtfi" Type="System.Globalization.DateTimeFormatInfo" />
      </Parameters>
      <Docs>
        <param name="dtfi">要包装的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</param>
        <summary>返回只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包装。</summary>
        <returns>一个只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包装器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此包装用于防止对进行任何修改`dtfi`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dtfi" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="RFC1123Pattern">
      <MemberSignature Language="C#" Value="public string RFC1123Pattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RFC1123Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RFC1123Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RFC1123Pattern { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取自定义的格式字符串，该字符串用于基于 Internet 工程任务组 (IETF) 征求意见文档 (RFC) 1123 规范的时间值。</summary>
        <value>基于 IETF RFC 1123 规范的时间值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>属性定义通过调用返回的日期字符串的区域性特定格式<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和由复合格式字符串，则提供的"r"和"R"标准格式字符串。  
  
 RFC1123 模式反映已定义的标准，并且属性是只读的。 因此，它始终，无论是相同的区域性。 定义格式字符串为“ddd, dd MMM yyyy HH':'mm':'ss 'GMT'”。  
  
   
  
## Examples  
 下面的示例显示几个区域性 RFC1123Pattern 的值。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CPP/dtfi_rfc1123pattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CS/dtfi_rfc1123pattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/VB/dtfi_rfc1123pattern.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public void SetAllDateTimePatterns (string[] patterns, char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAllDateTimePatterns(string[] patterns, char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAllDateTimePatterns (patterns As String(), format As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAllDateTimePatterns(cli::array &lt;System::String ^&gt; ^ patterns, char format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patterns" Type="System.String[]" />
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="patterns">自定义格式字符串的数组。</param>
        <param name="format">在 patterns 参数中指定的与自定义格式字符串关联的标准格式字符串<c></c>。</param>
        <summary>设置对应于指定的标准格式字符串的自定义日期和时间格式字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A>方法为特定的标准日期和时间格式字符串定义对应的自定义格式字符串。 如果调用的日期和时间格式设置方法包括标准日期和时间格式字符串指定`format`，该方法使用的第一个元素`patterns`数组，定义结果字符串的格式。  
  
> [!WARNING]
>  `Parse`和`TryParse`方法不会完全迭代中的所有字符串`patterns`时分析的字符串表示形式的日期和时间。 如果你需要分析操作中具有特定格式的日期和时间字符串，则应传递到的有效格式的数组<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>， <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>， <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>，或<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>方法。  
  
 你可以定义自定义格式字符串对应于"d"、"D"、"t"、"T"和"y"或"Y"标准日期和时间格式字符串。 如果值`format`是任何其他标准格式字符串，<xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A>方法抛出异常<xref:System.ArgumentException>。  
  
 如果你的自定义日期和时间格式字符串中包含的日期分隔符，则应显式指定的日期分隔符，而不是依靠替换特定的日期分隔符为"/"自定义格式说明符分析或格式设置方法。 例如，若要获取 MM DD yyyy 的模式，使用模式"MM DD yyyy"。  
  
   
  
## Examples  
 下面的示例实例化<xref:System.Globalization.CultureInfo>对象表示为"EN-US"（英语-美国） 区域性，并使用它来分析使用"Y"标准格式字符串的日期和时间字符串的数组。 然后，它使用<xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A>方法以将新的自定义格式字符串与"Y"标准格式字符串，然后尝试分析日期和时间字符串的数组相关联。 示例输出所演示，分析和格式设置操作中使用新的自定义格式字符串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/cs/setalldatetimepatterns.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/vb/setalldatetimepatterns.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="patterns" /> 是 <see langword="null" /> 或长度为零的数组。  
  
 或  
  
 <paramref name="format" /> 不是有效的标准格式字符串，或者是不能设置其模式的标准格式字符串。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patterns" /> 有一个值为 <see langword="null" /> 的数组元素。</exception>
        <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
        <altmember cref="Overload:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
      </Docs>
    </Member>
    <Member MemberName="ShortDatePattern">
      <MemberSignature Language="C#" Value="public string ShortDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortDatePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ShortDatePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置短日期值的自定义格式字符串。</summary>
        <value>短日期值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>属性定义通过调用返回的日期字符串的区域性特定格式<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和由复合格式字符串，则提供"d"标准格式字符串。  
  
 如果此属性受影响的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性更改。  
  
   
  
## Examples  
 下面的示例显示的值<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>使用属性和日期值格式<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>某些区域性的属性。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/dtfi_shortdatepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/dtfi_shortdatepattern.vb#1)]  
  
 下面的示例修改<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>属性<xref:System.Globalization.DateTimeFormatInfo>表示英语 （美国） 区域性的格式设置约定的对象。 它还显示一个 date 值，两次，首先以反映原始<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>属性，然后以反映新的属性值。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/shortdatepattern1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/shortdatepattern1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShortestDayNames">
      <MemberSignature Language="C#" Value="public string[] ShortestDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ShortestDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortestDayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ShortestDayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的唯一最短日期缩写名称的字符串数组。</summary>
        <value>日期名称的字符串数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示几个方法和指定日期和时间格式模式、 本机日历名称和完整和缩写的月份和日期名称的属性。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在设置操作中，该数组中不会正好有七个元素。</exception>
        <exception cref="T:System.ArgumentNullException">在设置操作中，值数组或值数组的其中一个元素为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">在设置操作中，当前的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShortTimePattern">
      <MemberSignature Language="C#" Value="public string ShortTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ShortTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置短时间值的自定义格式字符串。</summary>
        <value>短时间值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>属性定义通过调用返回的日期字符串的区域性特定格式<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和由复合格式字符串，则提供"t"标准格式字符串。  
  
 我们建议你在为确切字符串而不是使用时间分隔符占位符的短时间模式中设置的时间分隔符。 例如，若要获取模式 h mm ss，设置短时间模式与"h-mm-ss"。  
  
   
  
## Examples  
 下面的示例显示的值<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>某些区域性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CPP/dtfi_shorttimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CS/dtfi_shorttimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/VB/dtfi_shorttimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
      </Docs>
    </Member>
    <Member MemberName="SortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string SortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SortableDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortableDateTimePattern { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取可排序数据和时间值的自定义格式字符串。</summary>
        <value>可排序的日期和时间值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>属性定义通过调用返回的日期字符串的区域性特定格式<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和由复合格式字符串，则提供"s"标准格式字符串。  
  
 返回的格式字符串<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>属性反映已定义的标准 (ISO 8601)，并且属性是只读的。 因此，它始终，无论是相同的区域性。 自定义格式字符串为“yyyy'-'MM'-'dd'T'HH':'mm':'ss”。  
  
   
  
## Examples  
 下面的示例显示的值<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>某些区域性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CPP/dtfi_sortabledatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CS/dtfi_sortabledatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/VB/dtfi_sortabledatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      </Docs>
    </Member>
    <Member MemberName="TimeSeparator">
      <MemberSignature Language="C#" Value="public string TimeSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TimeSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TimeSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置分隔时间中各组成部分（即小时、分钟和秒钟）的字符串。</summary>
        <value>分隔时间中各组成部分的字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为“:”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果自定义模式中包括的格式模式":"，<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>显示的值<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>代替了":"中的格式模式。  
  
 时间分隔符派生自<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>属性。 我们建议你简而言之设置的时间分隔符或长时间模式而不是使用时间分隔符占位符确切的字符串。 例如，若要获取模式 h mm ss，设置将模式与"h-mm-ss"。 这种做法还可以设置模式，如"h'h 'mm' ss '"(3 h 36 m 分 12 秒)，包括多个类型的分隔符。 <xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>属性定义替换时间分隔符的字符串 (":"自定义日期和时间格式说明符) 中的结果字符串中的格式设置操作。 它还定义分析操作中的时间分隔符字符串。  
  
   
  
## Examples  
 下面的示例实例化<xref:System.Globalization.CultureInfo>对象对于 EN-US 区域性中，更改到其日期分隔符"。"，并通过使用"t"、"T"、"F"、"f"、"G"和"g"标准格式字符串来显示日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.TimeSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/cs/timeseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.TimeSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/vb/timeseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
      </Docs>
    </Member>
    <Member MemberName="UniversalSortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string UniversalSortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniversalSortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UniversalSortableDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UniversalSortableDateTimePattern { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取通用的可排序数据和时间字符串的自定义格式字符串。</summary>
        <value>通用的可排序的日期和时间字符串的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>属性定义通过调用返回的日期字符串的格式<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和由复合格式字符串，则提供"u"标准格式字符串。 它可以用于显示日期和时间与结束时的通用时间指示符"Z"可排序顺序。 格式为可排序，因为它使用前导零的年、 月、 日、 小时、 分钟和秒。 自定义格式字符串 ("yyyy '-' MM'-' dd HH': 'mm': 'ss'Z'") 区域性或格式提供程序无论是相同的。  
  
 返回的格式字符串<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>属性反映已定义的标准，并且属性是只读的。 因此，它始终，无论是相同的区域性。 自定义格式字符串为“yyyy'-'MM'-'dd HH':'mm':'ss'Z'”。  
  
   
  
## Examples  
 下面的示例显示的值<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>某些区域性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CPP/dtfi_universalsortabledatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CS/dtfi_universalsortabledatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/VB/dtfi_universalsortabledatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      </Docs>
    </Member>
    <Member MemberName="YearMonthPattern">
      <MemberSignature Language="C#" Value="public string YearMonthPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string YearMonthPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property YearMonthPattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ YearMonthPattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置年份和月份值的自定义格式字符串。</summary>
        <value>年份和月份值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>属性定义通过调用返回的日期字符串的区域性特定格式<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>和<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>方法和由复合格式字符串，则提供的"y"和"Y"标准格式字符串。  
  
 如果此属性受影响的值<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性更改。  
  
 我们建议你在为确切字符串而不是使用日期分隔符占位符年月模式中设置的日期分隔符。 例如，若要获取 MM yyyy 的模式，设置为"MM yyyy"年月模式。  
  
   
  
## Examples  
 下面的示例显示的值<xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>某些区域性。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CPP/dtfi_yearmonthpattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CS/dtfi_yearmonthpattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/VB/dtfi_yearmonthpattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
      </Docs>
    </Member>
  </Members>
</Type>