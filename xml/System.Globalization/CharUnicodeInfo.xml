<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="27fd45175764ebdd82dadcc980311bdf7989b4ec" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37655852" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <TypeSignature Language="F#" Value="type CharUnicodeInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Retrieves information about a Unicode character. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)定义数量的 Unicode 字符类别。 例如，字符可能属于一个大写字母、 小写字母、 十进制数、 以字母数字、 段落分隔符、 数学符号或货币符号。 你的应用程序可以使用的字符类别来控制基于字符串的操作，如分析或提取子字符串与正则表达式。 <xref:System.Globalization.UnicodeCategory>枚举定义可能的字符类别。  
  
 您使用<xref:System.Globalization.CharUnicodeInfo>类来获取<xref:System.Globalization.UnicodeCategory>特定字符的值。 <xref:System.Globalization.CharUnicodeInfo>类定义返回以下 Unicode 字符值的方法：  
  
-   字符或代理项对所属的特定类别。 返回的值是的成员<xref:System.Globalization.UnicodeCategory>枚举。  
  
-   数值。 仅适用于数字字符，包括小数部分、 下标、 上标、 罗马数字、 货币分子、 循环的数和特定于脚本的数字。  
  
-   数字值。 适用于可以组合使用以其他数字的字符编号系统中表示为整数的数字字符。  
  
-   十进制数字值。 仅适用于十进制 (基数为 10) 系统中表示十进制数字的字符。 十进制数字可以是从 0 到 9 的十个数字之一。 这些字符均隶属于<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>类别。  
  
 此外，<xref:System.Globalization.CharUnicodeInfo>类在内部使用的其他.NET Framework 类型和依赖于字符分类的方法数。 这些方法包括：  
  
-   <xref:System.Globalization.StringInfo>类，该类适用于文本元素而不是字符串中的单个字符。  
  
-   重载<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法，确定一个字符或代理项对所属的类别。  
  
-   [字符类](~/docs/standard/base-types/character-classes-in-regular-expressions.md)识别的<xref:System.Text.RegularExpressions.Regex>，.NET Framework 正则表达式引擎。  
  
 时使用此类应用程序中，请记住以下有关使用编程注意事项<xref:System.Char>类型。 类型可能很难使用，以及字符串表示语言的内容通常更好。  
  
-   一个<xref:System.Char>对象并不始终对应于单个字符。 尽管<xref:System.Char>类型表示单个 16 位值时，某些字符 （如字形群集和代理项对） 包含的两个或多个 utf-16 代码单元。 详细信息，请参阅"Char 对象和 Unicode 字符"中<xref:System.String>类。  
  
-   为"character"的概念也是灵活的。 字符通常看作标志符号，但很多行标志符号需要多个码位。 例如，可以是 ä 表示通过两个代码点 （"a"以及 U + 0308，这是组合分音符） 或通过一个单独的码位 （"ä"或 U + 00A4）。 某些语言有很多字母、 字符和需要多个码位，可能会造成混淆语言内容的表示形式中的标志符号。 例如，没有 ΰ （U + 03B0、 希腊文小写字母 upsilon dialytika 和音调符号），但没有任何等效的大写字母。 大写这样的值只是检索原始值。  
  
   
  
## Examples  
 下面的代码示例显示了不同类型的字符为每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>可识别的字符和其所属的特定类别由 Unicode 标准定义，并可以从 Unicode 标准的一个版本更改为另一个。分类的特定版本的.NET framework 中的字符基于 Unicode 标准，无论什么基础操作系统在其运行.NET Framework 的一个版本。下表列出了版本的.NET Framework 自 [！INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 和 Unicode 标准版本用于对字符进行分类。 <list type="table"><listheader><term> .NET framework 版本</term><description> Unicode 标准版本</description></listheader><item><term> [！INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] </term><description> [Unicode 标准，5.0.0 版] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [！INCLUDE[net_v45](~/includes/net-v45-md.md)] </term><description> [Unicode 标准，5.0.0 版] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [！INCLUDE[net_v451](~/includes/net-v451-md.md)] </term><description> [Unicode 标准，5.0.0 版] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [！INCLUDE[net_v452](~/includes/net-v452-md.md)] </term><description> [Unicode 标准，5.0.0 版] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [！INCLUDE[net_v46](~/includes/net-v46-md.md)] </term><description> [Unicode 标准，6.3.0 版] (https://www.unicode.org/versions/Unicode6.3.0/) </description></item><item><term> [！INCLUDE[net_v461](~/includes/net-v461-md.md)] </term><description> [Unicode 标准，6.3.0 版] (https://www.unicode.org/versions/Unicode6.3.0/) </description></item><item><term> [！INCLUDE[net_v462](~/includes/net-v462-md.md)] </term><description> [Unicode 标准，版本 8.0.0] (https://www.unicode.org/versions/Unicode8.0.0/) </description></item></list>每个版本的 Unicode标准包括对 Unicode 字符数据库更改自上一版本的信息。              使用 Unicode 字符数据库<see cref="T:System.Globalization.CharUnicodeInfo" />类用于对字符进行分类。</para>
    </block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the decimal digit value of a numeric Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the decimal digit value.</param>
        <summary>Gets the decimal digit value of the specified numeric character.</summary>
        <returns>The decimal digit value of the specified numeric character.  -or-  -1, if the specified character is not a decimal digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将转换为其等效的整数值表示十进制数字的字符。 小数位数为字符的<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>可以表示一个十进制 (基数为 10) 编号系统，从 0 到 9 的十位的类别。 它通过 U + 1049年 （包括字符，如 U + 0030-u （数字零） 到 U + 0039 (数字 9)，U + 0660 通过 U + 0669 (阿拉伯-印度文数字 9)，U + 07 C 0 （NKO 数字零） 到 U + 07C 9 (NKO 数字 9) 和 U + 1040 （缅甸数字零） （阿拉伯-印度文数字零）缅甸数字 9 个）。  
  
 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
   
  
## Examples  
 下面的代码示例显示了不同类型的字符为每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the decimal digit value.</param>
        <param name="index">The index of the Unicode character for which to get the decimal digit value.</param>
        <summary>Gets the decimal digit value of the numeric character at the specified index of the specified string.</summary>
        <returns>The decimal digit value of the numeric character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a decimal digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将转换为其等效的整数值表示十进制数字的字符。 小数位数为字符的<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>可以表示一个十进制 (基数为 10) 编号系统，从 0 到 9 的十位的类别。 它通过 U + 1049年 （包括字符，如 U + 0030-u （数字零） 到 U + 0039 (数字 9)，U + 0660 通过 U + 0669 (阿拉伯-印度文数字 9)，U + 07 C 0 （NKO 数字零） 到 U + 07C 9 (NKO 数字 9) 和 U + 1040 （缅甸数字零） （阿拉伯-印度文数字零）缅甸数字 9 个）。  
  
 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
   
  
## Examples  
 下面的代码示例显示了不同类型的字符为每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the digit value of a numeric Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the digit value.</param>
        <summary>Gets the digit value of the specified numeric character.</summary>
        <returns>The digit value of the specified numeric character.  -or-  -1, if the specified character is not a digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数字值是一个属性，它仅适用于可用作数字的数字字符。 一个数字是可以结合其他数字编号系统中表示为整数的数字字符。  
  
 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
   
  
## Examples  
 下面的代码示例显示了不同类型的字符为每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the digit value.</param>
        <param name="index">The index of the Unicode character for which to get the digit value.</param>
        <summary>Gets the digit value of the numeric character at the specified index of the specified string.</summary>
        <returns>The digit value of the numeric character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数字值是一个属性，它仅适用于可用作数字的数字字符。 一个数字是可以结合其他数字编号系统中表示为整数的数字字符。  
  
 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
   
  
## Examples  
 下面的代码示例显示了不同类型的字符为每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the numeric value associated with a Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the numeric value.</param>
        <summary>Gets the numeric value associated with the specified character.</summary>
        <returns>The numeric value associated with the specified character.  -or-  -1, if the specified character is not a numeric character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数值为仅适用于数字字符，其中包括小数部分、 下标、 上标、 罗马数字、 货币分子、 循环的数和特定于脚本的数字 Unicode 字符属性。 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
 <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29>方法假设`ch`对应于单一语言字符，并检查该字符是否可以转换为十进制数字。 但是，由两个表示 Unicode 标准中的某些数字<xref:System.Char>形成一个代理项对的对象。 例如，数字系统爱琴包含码位 U + 10107 至 U + 10133。 下面的示例使用<xref:System.Char.ConvertFromUtf32%2A>方法可实例化一个字符串，表示爱琴海的第一个。 中的示例所示，输出的形式<xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29>方法返回-1，如果它传递一个高代理项或低代理项的此字符。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 下面的代码示例显示了不同类型的字符为每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the numeric value.</param>
        <param name="index">The index of the Unicode character for which to get the numeric value.</param>
        <summary>Gets the numeric value associated with the character at the specified index of the specified string.</summary>
        <returns>The numeric value associated with the character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a numeric character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数值为仅适用于数字字符，其中包括小数部分、 下标、 上标、 罗马数字、 货币分子、 循环的数和特定于脚本的数字 Unicode 字符属性。 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
 如果<xref:System.Char>位置处的对象`index`第一个字符是一个有效的代理项对，<xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29>方法确定是否代理项对窗体数字，并且，如果是这样，返回其数值。 例如，数字系统爱琴包含码位 U + 10107 至 U + 10133。 下面的示例使用<xref:System.Char.ConvertFromUtf32%2A>方法可实例化一个字符串，表示每个爱琴海数目。 中的示例所示，输出的形式<xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29>方法返回正确的数字值，如果它传递爱琴海的数目的高代理项。 但是，如果它传递的低代理项，它会考虑仅在隔离的低代理项，并返回-1。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 下面的代码示例显示了不同类型的字符为每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the Unicode category of a Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the Unicode category.</param>
        <summary>Gets the Unicode category of the specified character.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the specified character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类别划分为 Unicode 字符。 字符的类别是其属性之一。 例如，字符可能是一个大写字母、 小写字母、 十进制数、 以字母数字、 连接符标点、 数学符号或货币符号。 <xref:System.Globalization.UnicodeCategory>类返回的 Unicode 字符类别。 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A>方法假设`ch`对应于单一语言字符，并返回其类别。 这意味着，对于代理项对，它将返回<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>而不是该代理项所属的类别。 例如，点滴字母表占用到 U + 1039F 码从 U + 10380。 下面的示例使用<xref:System.Char.ConvertFromUtf32%2A>方法可实例化一个字符串，表示 UGARITIC 字母 ALPA (从 U + 10380)，这是点滴字母表的第一个字母。 如示例所示，输出<xref:System.Char.IsNumber%28System.Char%29>方法将返回`false`如果它传递的高代理项或此字符的低代理项。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 请注意，<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>不会始终返回相同<xref:System.Globalization.UnicodeCategory>值作为<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法时作为参数传递特定的字符。 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>方法设计以反映当前版本的 Unicode 标准。 与此相反，尽管<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法通常反映当前版本的 Unicode 标准，它可能会返回的字符类别基于以前版本的标准，或它可能会返回不同的类别，从当前到标准保留向后兼容性。  
  
   
  
## Examples  
 下面的代码示例显示了不同类型的字符为每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory codePoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the Unicode category.</param>
        <param name="index">The index of the Unicode character for which to get the Unicode category.</param>
        <summary>Gets the Unicode category of the character at the specified index of the specified string.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the character at the specified index of the specified string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类别划分为 Unicode 字符。 字符的类别是其属性之一。 例如，字符可能是一个大写字母、 小写字母、 十进制数、 以字母数字、 连接符标点、 数学符号或货币符号。 <xref:System.Globalization.UnicodeCategory>类返回的 Unicode 字符类别。 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
 如果<xref:System.Char>位置处的对象`index`第一个字符是有效的代理项对<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29>方法将返回而不是返回的代理项对的 Unicode 类别<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>。 例如，点滴字母表占用到 U + 1039F 码从 U + 10380。 下面的示例使用<xref:System.Char.ConvertFromUtf32%2A>方法可实例化一个字符串，表示 UGARITIC 字母 ALPA (从 U + 10380)，这是点滴字母表的第一个字母。 如示例所示，输出<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29>方法将返回<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType>如果它传递此字符，它指示它将代理项对的高代理项。 但是，如果它传递的低代理项，则它会考虑仅在隔离的低代理项并返回<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 请注意，<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>方法不会始终返回相同<xref:System.Globalization.UnicodeCategory>值作为<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法时作为参数传递特定的字符。 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>方法设计以反映当前版本的 Unicode 标准。 与此相反，尽管<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法通常反映当前版本的 Unicode 标准，它可能会返回的字符类别基于以前版本的标准，或它可能会返回不同的类别，从当前到标准保留向后兼容性。  
  
   
  
## Examples  
 下面的代码示例显示了不同类型的字符为每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>