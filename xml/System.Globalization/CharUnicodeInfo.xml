<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a8bee7b96cd712f99cea3c5b643e9b885b969b98" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33682195" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>检索关于 Unicode 字符的信息。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)定义了多个 Unicode 字符类别。 例如，字符可能属于大写字母、 小写字母、 十进制数字，字母数字、 段落分隔符、 数学符号或货币符号。 你的应用程序可以使用的字符类别来控制基于字符串的操作，如分析或提取与正则表达式的子字符串。 <xref:System.Globalization.UnicodeCategory>枚举定义可能的字符类别。  
  
 你使用<xref:System.Globalization.CharUnicodeInfo>类来获取<xref:System.Globalization.UnicodeCategory>特定字符的值。 <xref:System.Globalization.CharUnicodeInfo>类定义返回以下 Unicode 字符值的方法：  
  
-   字符或代理项对所属的特定类别。 返回的值为属于<xref:System.Globalization.UnicodeCategory>枚举。  
  
-   数值。 仅适用于数字字符，包括秒的小数部分、 下标、 上标、 罗马数字、 货币分子、 循环的数和脚本特有的数字。  
  
-   数字值。 适用于可以使用其他编号系统中表示整数数量的数字字符组合的数字字符。  
  
-   十进制数字值。 仅适用于表示十进制 (基数为 10) 系统中的十进制数字的字符。 十进制数字类别可以是从 0 到 9 的 10 个数字之一。 这些字符是的成员<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>类别。  
  
 此外，<xref:System.Globalization.CharUnicodeInfo>类由其他.NET Framework 类型和依赖于字符分类的方法的很多内部使用。 这些方法包括：  
  
-   <xref:System.Globalization.StringInfo>类，该类处理而不是字符串中的单个字符的文本元素。  
  
-   重载<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法，这些扩展名决定了字符或代理项对所属的类别。  
  
-   [字符类](~/docs/standard/base-types/character-classes-in-regular-expressions.md)识别<xref:System.Text.RegularExpressions.Regex>，.NET Framework 的正则表达式引擎。  
  
 在你的应用程序中使用此类时, 保留记住以下有关使用编程注意事项<xref:System.Char>类型。 类型可能很难使用，并且通常用于表示语言的内容更可取字符串。  
  
-   A<xref:System.Char>对象并不始终对应于单个字符。 尽管<xref:System.Char>类型表示单个 16 位值时，某些字符 （如字形群集和代理项对） 包含两个或多个 utf-16 代码单元。 有关详细信息，请参阅"Char 对象和 Unicode 字符"<xref:System.String>类。  
  
-   为"character"的概念也是灵活的。 一个字符通常想象成符号，但许多标志符号需要多个码位。 例如，ä 可以表示通过两个代码点 （"a"加 U + 0308，这是组合分音符）、 或通过一个单独的码位 （"ä"或 U + 00A4）。 某些语言具有很多字母、 字符和需要多个码位，这会导致混淆语言内容的表示形式中的标志符号。 例如，没有 ΰ （U + 03B0，希腊文小写字母 upsilon dialytika 和音调符号），但没有没有等效的大写字母。 大写这样的值只需检索的原始值。  
  
   
  
## Examples  
 下面的代码示例演示为不同类型的字符的每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>可识别的字符和它们所属的特定类别由 Unicode 标准定义，并且可以从 Unicode 标准的一个版本更改为另一个。 .NET Framework 的特定版本中的字符分类基于 Unicode 标准而不考虑在其运行.NET Framework 的基础操作系统的单个版本。 下表列出了自以来的.NET framework 的版本[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]和用于对字符进行分类的 Unicode 标准版本。  
  
 <list type="table"><listheader><term> .NET framework 版本  
  
 </term><description> Unicode 标准版本  
  
 </description></listheader><item><term> [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]  
  
 </term><description> [Unicode 标准，版本为 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v45](~/includes/net-v45-md.md)]  
  
 </term><description> [Unicode 标准，版本为 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  
  
 </term><description> [Unicode 标准，版本为 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v452](~/includes/net-v452-md.md)]  
  
 </term><description> [Unicode 标准，版本为 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v46](~/includes/net-v46-md.md)]  
  
 </term><description> [Unicode 标准，版本 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v461](~/includes/net-v461-md.md)]  
  
 </term><description> [Unicode 标准，版本 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v462](~/includes/net-v462-md.md)]  
  
 </term><description> [Unicode 标准，8.0.0 版](https://www.unicode.org/versions/Unicode8.0.0/)  
  
 </description></item></list>  
  
 每个版本的 Unicode 标准包括由于以前的版本到 Unicode 字符数据库更改的信息。 所使用的 Unicode 字符数据库<see cref="T:System.Globalization.CharUnicodeInfo" />类，用于对字符进行分类。</para>
    </block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取数值型 Unicode 字符的十进制数字值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">要获取其十进制数字值的 Unicode 字符。</param>
        <summary>获取指定数值型字符的十进制数字值。</summary>
        <returns>指定数值型字符的十进制数字值。  
  
 或  
  
 如果指定字符不是十进制数字，则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将转换为其等效的整数值表示十进制数字的字符。 十进制数字都是中的字符<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>可以表示一个编号从 0 到 9 的系统，十进制 (基数为 10) 中的 10 个数字的类别。 它通过 U + 1049年 （包括字符如 U + 0030 （数字零） 到 U + 0039 （数字九个），U + 0660 通过 U + 0669 （阿拉伯-印度文数字九个），U + 07c 0 （NKO 数字零） 通过 U + 07C 9 （NKO 数字九个） 和 U + 1040 （缅甸数字零） （阿拉伯-印度文数字零）缅甸文数字包含 9 个）。  
  
 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
   
  
## Examples  
 下面的代码示例演示为不同类型的字符的每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">包含要获取其十进制数字值的 Unicode 字符的 <see cref="T:System.String" />。</param>
        <param name="index">要获取其十进制数字值的 Unicode 字符的索引。</param>
        <summary>获取位于指定字符串的指定索引处的数值型字符的十进制数字值。</summary>
        <returns>位于指定字符串的指定索引处的数值型字符的十进制数字值。  
  
 或  
  
 如果位于指定字符串的指定索引位处的字符不是十进制数字，则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将转换为其等效的整数值表示十进制数字的字符。 十进制数字都是中的字符<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber>可以表示一个编号从 0 到 9 的系统，十进制 (基数为 10) 中的 10 个数字的类别。 它通过 U + 1049年 （包括字符如 U + 0030 （数字零） 到 U + 0039 （数字九个），U + 0660 通过 U + 0669 （阿拉伯-印度文数字九个），U + 07c 0 （NKO 数字零） 通过 U + 07C 9 （NKO 数字九个） 和 U + 1040 （缅甸数字零） （阿拉伯-印度文数字零）缅甸文数字包含 9 个）。  
  
 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
   
  
## Examples  
 下面的代码示例演示为不同类型的字符的每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 超出 <paramref name="s" /> 中的有效索引范围。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取数值型 Unicode 字符的数字值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">要为其获取数字值的 Unicode 字符。</param>
        <summary>获取指定数值型字符的数字值。</summary>
        <returns>指定数值型字符的数字值。  
  
 或  
  
 如果指定的字符不是数字，则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数字值是一个属性，仅适用于可用作位数的数字字符。 一个数字是可以用来表示整数数量编号系统中其他数字组合的数字字符。  
  
 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
   
  
## Examples  
 下面的代码示例演示为不同类型的字符的每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">包含要获取其数字值的 Unicode 字符的 <see cref="T:System.String" />。</param>
        <param name="index">要获取其数字值的 Unicode 字符的索引。</param>
        <summary>获取位于指定字符串的指定索引处的数值型字符的数字值。</summary>
        <returns>位于指定字符串的指定索引处的数值型字符的数字值。  
  
 或  
  
 如果位于指定字符串的指定索引处的字符不是数字，则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数字值是一个属性，仅适用于可用作位数的数字字符。 一个数字是可以用来表示整数数量编号系统中其他数字组合的数字字符。  
  
 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
   
  
## Examples  
 下面的代码示例演示为不同类型的字符的每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 超出 <paramref name="s" /> 中的有效索引范围。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取与 Unicode 字符关联的数值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">要获取其数值的 Unicode 字符。</param>
        <summary>获取与指定字符关联的数值。</summary>
        <returns>与指定字符关联的数值。  
  
 或  
  
 如果指定的字符不是数值型字符，则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数值为仅适用于数字字符，包括秒的小数部分、 下标、 上标、 罗马数字、 货币分子、 循环的数和脚本特有的数字 Unicode 字符属性。 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
 <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29>方法假设`ch`对应于单个语言字符，并且检查是否可以将该字符转换为十进制数字类别。 但是，由两个表示 Unicode 标准中的一些数字<xref:System.Char>形成一个代理项对的对象。 例如，数字系统爱琴包含码位 U + 10107 至 U + 10133。 下面的示例使用<xref:System.Char.ConvertFromUtf32%2A>方法可实例化一个字符串，表示爱琴海数字一。 如示例所示，输出<xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29>方法返回-1，如果它传递一个高代理项或低代理项的此字符。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 下面的代码示例演示为不同类型的字符的每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">包含要获取其数值的 Unicode 字符的 <see cref="T:System.String" />。</param>
        <param name="index">要获取其数值的 Unicode 字符的索引。</param>
        <summary>获取与位于指定字符串的指定索引处的字符关联的数值。</summary>
        <returns>与位于指定字符串的指定索引处的字符关联的数值。  
  
 或  
  
 如果位于指定字符串的指定索引处的字符不是数值型字符，则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数值为仅适用于数字字符，包括秒的小数部分、 下标、 上标、 罗马数字、 货币分子、 循环的数和脚本特有的数字 Unicode 字符属性。 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
 如果<xref:System.Char>对象位于位置`index`有效的代理项对的第一个字符<xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29>方法确定是否代理项对窗体一个数字，，如果是这样，则返回相应的数字值。 例如，数字系统爱琴包含码位 U + 10107 至 U + 10133。 下面的示例使用<xref:System.Char.ConvertFromUtf32%2A>方法可实例化一个字符串，表示每个爱琴海数目。 如示例所示，输出<xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29>方法返回正确的数字值，如果它传递爱琴海的数目的高代理项。 但是，如果它传递的低代理项，它将仅在隔离的低代理项，并返回-1。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 下面的代码示例演示为不同类型的字符的每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 超出 <paramref name="s" /> 中的有效索引范围。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取 Unicode 字符的 Unicode 类别。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">要获取其 Unicode 类别的 Unicode 字符。</param>
        <summary>获取指定字符的 Unicode 类别。</summary>
        <returns>指示指定字符类别的 <see cref="T:System.Globalization.UnicodeCategory" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unicode 字符分为类别。 字符的类别是其属性之一。 例如，字符可能是一个大写字母、 小写字母、 十进制数字，字母数字、 连接器标点符号、 数学符号或货币符号。 <xref:System.Globalization.UnicodeCategory>类返回的 Unicode 字符类别。 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A>方法假设`ch`对应于单个语言字符并返回其类别。 这意味着，对于代理项对，它将返回<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>而不是该代理项所属的类别。 例如，点滴字母表占用代码点从 U + 10380 到 U + 1039F。 下面的示例使用<xref:System.Char.ConvertFromUtf32%2A>方法可实例化一个字符串，表示 UGARITIC 字母 ALPA (从 U + 10380)，即点滴字母表的第一个字母。 如示例所示，输出<xref:System.Char.IsNumber%28System.Char%29>方法返回`false`如果它传递的高代理项或此字符的低代理项。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 请注意，<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>不始终返回相同<xref:System.Globalization.UnicodeCategory>值作为<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法时作为参数传递特定的字符。 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>方法用于反映 Unicode 标准的当前版本。 与此相反，尽管<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法通常反映 Unicode 标准的当前版本，它可能会返回在早期版本的标准，基于字符的类别或它可能会返回不同的类别，与当前到标准保留向后兼容性。  
  
   
  
## Examples  
 下面的代码示例演示为不同类型的字符的每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">包含要获取其 Unicode 类别的 Unicode 字符的 <see cref="T:System.String" />。</param>
        <param name="index">要获取其 Unicode 类别的 Unicode 字符的索引。</param>
        <summary>获取位于指定字符串的指定索引处的字符的 Unicode 类别。</summary>
        <returns>指示位于指定字符串的指定索引处的字符类别的 <see cref="T:System.Globalization.UnicodeCategory" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unicode 字符分为类别。 字符的类别是其属性之一。 例如，字符可能是一个大写字母、 小写字母、 十进制数字，字母数字、 连接器标点符号、 数学符号或货币符号。 <xref:System.Globalization.UnicodeCategory>类返回的 Unicode 字符类别。 有关 Unicode 字符的详细信息，请参阅[Unicode 标准](http://go.microsoft.com/fwlink/?linkid=37123)。  
  
 如果<xref:System.Char>对象位于位置`index`有效的代理项对的第一个字符<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29>方法返回而不是返回的代理项对的 Unicode 类别<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>。 例如，点滴字母表占用代码点从 U + 10380 到 U + 1039F。 下面的示例使用<xref:System.Char.ConvertFromUtf32%2A>方法可实例化一个字符串，表示 UGARITIC 字母 ALPA (从 U + 10380)，即点滴字母表的第一个字母。 如示例所示，输出<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29>方法返回<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType>如果它传递此字符，它指示它认为代理项对的高代理项。 但是，如果它传递的低代理项，则它会考虑仅在隔离的低代理项并返回<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>。  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 请注意，<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>方法不始终返回相同<xref:System.Globalization.UnicodeCategory>值作为<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法时作为参数传递特定的字符。 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>方法用于反映 Unicode 标准的当前版本。 与此相反，尽管<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法通常反映 Unicode 标准的当前版本，它可能会返回在早期版本的标准，基于字符的类别或它可能会返回不同的类别，与当前到标准保留向后兼容性。  
  
   
  
## Examples  
 下面的代码示例演示为不同类型的字符的每个方法返回的值。  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 超出 <paramref name="s" /> 中的有效索引范围。</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>