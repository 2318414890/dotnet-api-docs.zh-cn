<Type Name="ISymbolBinder" FullName="System.Diagnostics.SymbolStore.ISymbolBinder">
  <TypeSignature Language="C#" Value="public interface ISymbolBinder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISymbolBinder" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.SymbolStore.ISymbolBinder" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISymbolBinder" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISymbolBinder" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.StackTrace</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0b1e5-101">表示托管代码的符号联编程序。</span><span class="sxs-lookup"><span data-stu-id="0b1e5-101">Represents a symbol binder for managed code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0b1e5-102">此接口是托管的副本的`ISymUnmanagedBinder`接口，该提供另一种方法来读取和写入调试符号信息的非托管的符号存储区接口之一。</span><span class="sxs-lookup"><span data-stu-id="0b1e5-102">This interface is the managed counterpart of the `ISymUnmanagedBinder` interface, which is one of the unmanaged symbol store interfaces that provide an alternate way to read and write debug symbol information.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetReader">
      <MemberSignature Language="C#" Value="public System.Diagnostics.SymbolStore.ISymbolReader GetReader (int importer, string filename, string searchPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Diagnostics.SymbolStore.ISymbolReader GetReader(int32 importer, string filename, string searchPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReader (importer As Integer, filename As String, searchPath As String) As ISymbolReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::SymbolStore::ISymbolReader ^ GetReader(int importer, System::String ^ filename, System::String ^ searchPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.StackTrace</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This interface is not 64-bit clean.  Use ISymbolBinder1 instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.ISymbolReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importer" Type="System.Int32" />
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="searchPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="importer"><span data-ttu-id="0b1e5-103">元数据导入接口。</span><span class="sxs-lookup"><span data-stu-id="0b1e5-103">The metadata import interface.</span></span></param>
        <param name="filename"><span data-ttu-id="0b1e5-104">需要读取器接口的文件名称。</span><span class="sxs-lookup"><span data-stu-id="0b1e5-104">The name of the file for which the reader interface is required.</span></span></param>
        <param name="searchPath"><span data-ttu-id="0b1e5-105">用于查找符号文件的搜索路径。</span><span class="sxs-lookup"><span data-stu-id="0b1e5-105">The search path used to locate the symbol file.</span></span></param>
        <summary><span data-ttu-id="0b1e5-106">获取当前文件的符号读取器的接口。</span><span class="sxs-lookup"><span data-stu-id="0b1e5-106">Gets the interface of the symbol reader for the current file.</span></span></summary>
        <returns><span data-ttu-id="0b1e5-107"><see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> 接口，它读取调试符号。</span><span class="sxs-lookup"><span data-stu-id="0b1e5-107">The <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> interface that reads the debugging symbols.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b1e5-108">在给定元数据接口、 文件名称和搜索路径<xref:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader%2A>方法返回<xref:System.Diagnostics.SymbolStore.ISymbolReader>接口，它读取调试符号与模块关联。</span><span class="sxs-lookup"><span data-stu-id="0b1e5-108">When given a metadata interface, a file name, and a search path, the <xref:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader%2A> method returns the <xref:System.Diagnostics.SymbolStore.ISymbolReader> interface that reads the debugging symbols associated with the module.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>