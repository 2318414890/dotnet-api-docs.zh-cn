<Type Name="LifetimeServices" FullName="System.Runtime.Remoting.Lifetime.LifetimeServices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b4eae8cc69c33f2feb738aec30ce81c4b989044f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30487901" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LifetimeServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LifetimeServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Lifetime.LifetimeServices" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LifetimeServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class LifetimeServices sealed" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>控制 .NET 远程处理生存期服务。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 分布式的垃圾回收是负责控制服务器应用程序的生存期，并在它们的生存期结束时删除它们。 传统上，分布式的垃圾回收使用引用计数和 ping 进行控制。 这适用于有几个客户端每个对象，但也有数千个每个每个对象的客户端时无法正常工作。 当客户端的数量增加时，生存期服务可以假定传统的分布式垃圾回收器中和规模的函数。  
  
 生存期服务将与每个远程激活对象关联的租约。 当租约已过期时，将删除该对象。  
  
> [!NOTE]
>  此类，使链接要求。 如果直接调用方没有基础结构的权限，将引发安全异常。 请参阅[链接需求](~/docs/framework/misc/link-demands.md)有关详细信息。  
  
   
  
## Examples  
 [!code-cpp[System.Runtime.Remoting.Lifetime#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Lifetime/CPP/server.cpp#2)]
 [!code-csharp[System.Runtime.Remoting.Lifetime#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Lifetime/CS/server.cs#2)]
 [!code-vb[System.Runtime.Remoting.Lifetime#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Runtime.Remoting.Lifetime/VB/server.vb#2)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">用于操作基础结构代码。 要求值： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />;权限值： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LifetimeServices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LifetimeServices();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Call the static methods directly on this type instead", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Runtime.Remoting.Lifetime.LifetimeServices" /> 的实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaseManagerPollTime">
      <MemberSignature Language="C#" Value="public static TimeSpan LeaseManagerPollTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan LeaseManagerPollTime" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LeaseManagerPollTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan LeaseManagerPollTime { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置每次激活租约管理器以清除到期租约之间的时间间隔。</summary>
        <value>租约管理器检查到期租约后休眠的默认时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前的属性定义从该处的租用管理器将变为活动状态，以清除过期的租约的频率。 例如，如果<xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A>设置为 100 秒租约列表中将检查清理和续订每隔 100 秒。  
  
 默认值<xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A>属性为 10 秒。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">在调用堆栈上部，至少有一个调用方没有配置远程处理类型和通道的权限。 仅在设置该属性值时才会引发此异常。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">有关远程处理基础结构的配置。 要求值： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />;权限值： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="LeaseTime">
      <MemberSignature Language="C#" Value="public static TimeSpan LeaseTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan LeaseTime" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LeaseTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan LeaseTime { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.AppDomain" /> 的初始租约时间范围。</summary>
        <value>可以在 <see cref="T:System.TimeSpan" /> 中拥有租约的对象的初始租约 <see cref="T:System.AppDomain" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认租约时间跨度为 5 分钟。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">在调用堆栈上部，至少有一个调用方没有配置远程处理类型和通道的权限。 仅在设置该属性值时才会引发此异常。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">有关远程处理基础结构的配置。 要求值： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />;权限值： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="RenewOnCallTime">
      <MemberSignature Language="C#" Value="public static TimeSpan RenewOnCallTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan RenewOnCallTime" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property RenewOnCallTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan RenewOnCallTime { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置每当调用到达服务器对象时延续租约的时间。</summary>
        <value>每次调用后延续当前 <see cref="T:System.TimeSpan" /> 中的生存期租约的 <see cref="T:System.AppDomain" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过该扩展的生存期租约的默认值续订时间为 2 分钟。  
  
   
  
## Examples  
 [!code-cpp[ILease_ILease#3](~/samples/snippets/cpp/VS_Snippets_Remoting/ILease_ILease/CPP/ilease_client.cpp#3)]
 [!code-csharp[ILease_ILease#3](~/samples/snippets/csharp/VS_Snippets_Remoting/ILease_ILease/CS/ilease_client.cs#3)]
 [!code-vb[ILease_ILease#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ILease_ILease/VB/ilease_client.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">在调用堆栈上部，至少有一个调用方没有配置远程处理类型和通道的权限。 仅在设置该属性值时才会引发此异常。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">有关远程处理基础结构的配置。 要求值： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />;权限值： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SponsorshipTimeout">
      <MemberSignature Language="C#" Value="public static TimeSpan SponsorshipTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan SponsorshipTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SponsorshipTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan SponsorshipTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置租约管理器等待主办方返回租约续订时间的时间。</summary>
        <value>初始主办关系超时。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 发起人调用操作已超时的默认时间为 2 分钟。  
  
   
  
## Examples  
 [!code-cpp[ILease_ILease#3](~/samples/snippets/cpp/VS_Snippets_Remoting/ILease_ILease/CPP/ilease_client.cpp#3)]
 [!code-csharp[ILease_ILease#3](~/samples/snippets/csharp/VS_Snippets_Remoting/ILease_ILease/CS/ilease_client.cs#3)]
 [!code-vb[ILease_ILease#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ILease_ILease/VB/ilease_client.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">在调用堆栈上部，至少有一个调用方没有配置远程处理类型和通道的权限。 仅在设置该属性值时才会引发此异常。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">有关远程处理基础结构的配置。 要求值： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />;权限值： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>