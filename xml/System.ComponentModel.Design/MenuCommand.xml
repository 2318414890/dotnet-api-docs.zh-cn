<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MenuCommand.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59857b16d26530fe05c26f2d684fccf8ed627f766.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9857b16d26530fe05c26f2d684fccf8ed627f766</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>Represents a Windows menu or toolbar command item.</source>
          <target state="translated">表示 Windows 菜单项或工具栏命令项。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph> class represents information about a Windows menu or toolbar command.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph>类表示有关 Windows 菜单或工具栏命令的信息。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.IMenuCommandService&gt;</ph> interface allows you to add <ph id="ph2">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph> objects to the Visual Studio menu.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.IMenuCommandService&gt;</ph>接口，您可以添加<ph id="ph2">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph>到 Visual Studio 菜单的对象。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>This class provides the following members:</source>
          <target state="translated">此类提供了以下成员：</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>An event-handler property to which you can attach an event handler for the command.</source>
          <target state="translated">可以在其中附加的事件处理程序命令事件处理程序属性。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.Design.CommandID&gt;</ph> property that uniquely identifies the command.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.ComponentModel.Design.CommandID&gt;</ph>唯一标识该命令的属性。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>An <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.Invoke%2A&gt;</ph> method that executes the command.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.Invoke%2A&gt;</ph>执行命令的方法。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>An <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.OnCommandChanged%2A&gt;</ph> method that can be overridden to handle the event that occurs when a new command is selected.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.OnCommandChanged%2A&gt;</ph>可以重写以处理在选择新的命令时发生该事件的方法。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>Boolean flag states that indicate whether the command is <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.Checked%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ComponentModel.Design.MenuCommand.Enabled%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.ComponentModel.Design.MenuCommand.Supported%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.ComponentModel.Design.MenuCommand.Visible%2A&gt;</ph>.</source>
          <target state="translated">指示该命令是否是布尔型标志状态<ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.Checked%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.ComponentModel.Design.MenuCommand.Enabled%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.ComponentModel.Design.MenuCommand.Supported%2A&gt;</ph>，或<ph id="ph4">&lt;xref:System.ComponentModel.Design.MenuCommand.Visible%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>An <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.OleStatus%2A&gt;</ph> property that indicates the OLE command status code for the command.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.OleStatus%2A&gt;</ph>属性，该值指示 OLE 命令的命令的状态代码。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>An override for the <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.ToString%2A&gt;</ph> method.</source>
          <target state="translated">替代<ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.ToString%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph> object, configures its properties, and adds it to the <ph id="ph2">&lt;xref:System.ComponentModel.Design.IMenuCommandService&gt;</ph>.</source>
          <target state="translated">下面的代码示例创建<ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph>对象，配置其属性，并将其添加到<ph id="ph2">&lt;xref:System.ComponentModel.Design.IMenuCommandService&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>Create an instance of the <ph id="ph1">`Component1`</ph> class on your form and open the form in a design environment like Visual Studio.</source>
          <target state="translated">创建的实例<ph id="ph1">`Component1`</ph>类在你的窗体上并在 Visual Studio 类似的设计环境中打开窗体。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>Press the F1 key to invoke the <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph>.</source>
          <target state="translated">按 F1 键来调用<ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>for full access to system resources.</source>
          <target state="translated">对系统资源的完全访问权限。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>Demand values: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>.</source>
          <target state="translated">要求值： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>， <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>Associated state:</source>
          <target state="translated">关联的状态：</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
          <source>The event to raise when the user selects the menu item or toolbar button.</source>
          <target state="translated">在用户选择菜单项或工具栏按钮时引发的事件。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
          <source>The unique command ID that links this menu command to the environment's menu.</source>
          <target state="translated">将此菜单命令链接到环境菜单的唯一命令 ID。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.MenuCommand" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.MenuCommand" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph> object, configures its properties, and adds it to an <ph id="ph2">&lt;xref:System.ComponentModel.Design.IMenuCommandService&gt;</ph> object.</source>
          <target state="translated">下面的代码示例创建<ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph>对象，配置其属性，并将其添加到<ph id="ph2">&lt;xref:System.ComponentModel.Design.IMenuCommandService&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.MenuCommand.Checked">
          <source>Gets or sets a value indicating whether this menu item is checked.</source>
          <target state="translated">获取或设置一个值，用以指示是否选中此菜单项。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.MenuCommand.Checked">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the item is checked; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果选中该项，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
          <source>Occurs when the menu command changes.</source>
          <target state="translated">在菜单命令出现更改时发生。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
          <source>A command can change if it becomes checked or disabled.</source>
          <target state="translated">如果将成为检查或禁用它，可以更改命令。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.MenuCommand.CommandID">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.CommandID" /&gt;</ph> associated with this menu command.</source>
          <target state="translated">获取与此菜单命令相关联的 <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.CommandID" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.MenuCommand.CommandID">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.CommandID" /&gt;</ph> associated with the menu command.</source>
          <target state="translated">与此菜单命令相关联的 <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.CommandID" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.MenuCommand.Enabled">
          <source>Gets a value indicating whether this menu item is available.</source>
          <target state="translated">获取一个值，该值指示此菜单项是否可用。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.MenuCommand.Enabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the item is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已启用此项，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.MenuCommand.Enabled">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph> object, configures its properties, and adds it to <ph id="ph2">&lt;xref:System.ComponentModel.Design.IMenuCommandService&gt;</ph>.</source>
          <target state="translated">下面的代码示例创建<ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph>对象，配置其属性，并将其添加到<ph id="ph2">&lt;xref:System.ComponentModel.Design.IMenuCommandService&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.MenuCommand">
          <source>Invokes the command.</source>
          <target state="translated">调用该命令。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.MenuCommand.Invoke">
          <source>Invokes the command.</source>
          <target state="translated">调用该命令。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
          <source>An optional argument for use by the command.</source>
          <target state="translated">供该命令使用的可选参数。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
          <source>Invokes the command with the given parameter.</source>
          <target state="translated">使用给定参数调用命令。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
          <source>The default implementation of this method ignores <ph id="ph1">&lt;paramref name="arg" /&gt;</ph>, but deriving classes may override this method and use it.</source>
          <target state="translated">此方法的默认实现会忽略<ph id="ph1">&lt;paramref name="arg" /&gt;</ph>，但派生类可以重写此方法并使用它。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.MenuCommand.OleStatus">
          <source>Gets the OLE command status code for this menu item.</source>
          <target state="translated">获取此菜单项的 OLE 命令状态代码。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.MenuCommand.OleStatus">
          <source>An integer containing a mixture of status flags that reflect the state of this menu item.</source>
          <target state="translated">一个整数，由反映此菜单项状态的状态标志组合而成。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件数据的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /&gt;</ph> event.</source>
          <target state="translated">引发 <ph id="ph1">&lt;see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引发事件时，将通过委托调用事件处理程序。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>处理和引发事件<ept id="p1">](~/docs/standard/events/index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.OnCommandChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.OnCommandChanged%2A&gt;</ph> 方法还允许派生类对事件进行处理而不必附加委托。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">这是在派生类中处理事件的首选技术。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class’s <ph id="ph2">&lt;see cref="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">在重写<ph id="ph1">&lt;see cref="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)" /&gt;</ph>在派生类中，一定要调用基类的<ph id="ph2">&lt;see cref="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)" /&gt;</ph>方法，以便已注册的委托对事件进行接收。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.MenuCommand.Properties">
          <source>Gets the public properties associated with the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.MenuCommand" /&gt;</ph>.</source>
          <target state="translated">获取与 <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.MenuCommand" /&gt;</ph> 关联的公共属性。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.MenuCommand.Properties">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> containing the public properties of the <ph id="ph2">&lt;see cref="T:System.ComponentModel.Design.MenuCommand" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> 包含 <ph id="ph2">&lt;see cref="T:System.ComponentModel.Design.MenuCommand" /&gt;</ph> 的公共属性。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.MenuCommand.Properties">
          <source>All menu commands store their public properties in the <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.Properties%2A&gt;</ph> collection.</source>
          <target state="translated">所有菜单命令都存储在其公共属性<ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand.Properties%2A&gt;</ph>集合。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.MenuCommand.Properties">
          <source>The key in the properties dictionary is the property name.</source>
          <target state="translated">属性字典中的键是属性名称。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.MenuCommand.Properties">
          <source>This allows for generic enumeration of properties and provides a consistent substrate from which new properties can be added without modifying the class definition.</source>
          <target state="translated">这使泛型枚举的属性，并提供一致的基底，从中可以将新属性添加而无需修改的类定义。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.MenuCommand.Supported">
          <source>Gets or sets a value indicating whether this menu item is supported.</source>
          <target state="translated">获取或设置一个值，用以指示是否支持此菜单项。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.MenuCommand.Supported">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the item is supported, which is the default; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果支持此项（默认情况），则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.MenuCommand.Supported">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph> object, configures its properties, and adds it to the <ph id="ph2">&lt;xref:System.ComponentModel.Design.IMenuCommandService&gt;</ph>.</source>
          <target state="translated">下面的代码示例创建<ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph>对象，配置其属性，并将其添加到<ph id="ph2">&lt;xref:System.ComponentModel.Design.IMenuCommandService&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.MenuCommand.ToString">
          <source>Returns a string representation of this menu command.</source>
          <target state="translated">返回此菜单命令的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.MenuCommand.ToString">
          <source>A string containing the value of the <ph id="ph1">&lt;see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /&gt;</ph> property appended with the names of any flags that are set, separated by pipe bars (|).</source>
          <target state="translated">一个字符串，它包含 <ph id="ph1">&lt;see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /&gt;</ph> 属性的值并附加所设置的任何标志的名称，两者用竖线 (|) 分隔。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.MenuCommand.ToString">
          <source>These flag properties include <ph id="ph1">&lt;see cref="P:System.ComponentModel.Design.MenuCommand.Checked" /&gt;</ph>, <ph id="ph2">&lt;see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" /&gt;</ph>, <ph id="ph3">&lt;see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /&gt;</ph>, and <ph id="ph4">&lt;see cref="P:System.ComponentModel.Design.MenuCommand.Visible" /&gt;</ph>.</source>
          <target state="translated">这些标志属性包括 <ph id="ph1">&lt;see cref="P:System.ComponentModel.Design.MenuCommand.Checked" /&gt;</ph>、<ph id="ph2">&lt;see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" /&gt;</ph>、<ph id="ph3">&lt;see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /&gt;</ph> 和 <ph id="ph4">&lt;see cref="P:System.ComponentModel.Design.MenuCommand.Visible" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.MenuCommand.Visible">
          <source>Gets or sets a value indicating whether this menu item is visible.</source>
          <target state="translated">获取或设置一个值，用以指示此菜单项是否可见。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.MenuCommand.Visible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the item is visible; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此项可见，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.MenuCommand.Visible">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph> object, configures its properties, and adds it to the <ph id="ph2">&lt;xref:System.ComponentModel.Design.IMenuCommandService&gt;</ph>.</source>
          <target state="translated">下面的代码示例创建<ph id="ph1">&lt;xref:System.ComponentModel.Design.MenuCommand&gt;</ph>对象，配置其属性，并将其添加到<ph id="ph2">&lt;xref:System.ComponentModel.Design.IMenuCommandService&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>