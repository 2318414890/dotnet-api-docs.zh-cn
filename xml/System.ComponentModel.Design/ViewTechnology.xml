<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ViewTechnology.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d63614a-fd48-4a83-9dc4-ea1e401b6c15459f390c97929264d6e88e0b246805ff33a0d5b3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">459f390c97929264d6e88e0b246805ff33a0d5b3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b4804968da1dfdf71c501075a5b66957b54f2e8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/27/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>Defines identifiers for a set of technologies that designer hosts support.</source>
          <target state="translated">定义设计器宿主所支持的技术集的标识符。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>The view adapter model replaces and adds functionality to the <ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> feature; however, the <ph id="ph2">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> feature is retained for both backward compatibility and future use, if you choose.</source>
          <target state="translated">视图适配器模型替换，并添加了功能<ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph>功能; 但是，<ph id="ph2">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph>功能将保留向后兼容性和将来使用，如果你选择。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>For more information, see ".NET Shape Library: A Sample Designer" in the Windows Forms Knowledge Base at <ph id="ph1">http://windowsforms.net/articles/shapedesigner.aspx</ph>.</source>
          <target state="translated">有关详细信息，请参阅".NET 形状库:: 示例设计器"Windows 窗体知识库中在<ph id="ph1">http://windowsforms.net/articles/shapedesigner.aspx</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> defines identifiers that can indicate the mode to use for controlling the display of a designer-hosted document.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> 定义可以指示要用于控制设计器承载的文档的显示模式的标识符。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>You should only use the Default value in your designer hosting environment.</source>
          <target state="translated">你只应在设计器宿主环境中使用的默认值。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>In previous versions of the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ComponentModel.Design.ViewTechnology.Default&gt;</ph> enumeration specified the type of UI model supported by a root designer.</source>
          <target state="translated">在以前版本的<ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>、<ph id="ph2">&lt;xref:System.ComponentModel.Design.ViewTechnology.Default&gt;</ph>枚举指定的用户界面模型根设计器支持的类型。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>Because this model is not extensible, you should instead use a <bpt id="p1">*</bpt>view adapter<ept id="p1">*</ept> model.</source>
          <target state="translated">由于此模型不是可扩展的则应改用<bpt id="p1">*</bpt>视图适配器<ept id="p1">*</ept>模型。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>A view adapter is a type that adapts an object of one type to another.</source>
          <target state="translated">视图适配器是适应到另一种类型的对象的类型。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>For example, an HTML designer might return a <ph id="ph1">`DemoDOM`</ph> tree as its view.</source>
          <target state="translated">例如，HTML 设计器可能会返回<ph id="ph1">`DemoDOM`</ph>树作为其视图。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>The HTML designer returns a view technology of Default.</source>
          <target state="translated">HTML 设计器返回默认视图的技术。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>A Windows Forms hosting environment would have one or more view adapter classes available.</source>
          <target state="translated">Windows 窗体承载环境将具有一个或多个适配器可用视图类。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>If one such class could convert the <ph id="ph1">`DemoDOM`</ph> into a Windows Forms control, the hosting application can support this type of designer.</source>
          <target state="translated">如果有这样一个类可以转换<ph id="ph1">`DemoDOM`</ph>到 Windows 窗体控件中，主机应用程序可以支持此类型的设计器。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>If no adapter can handle the data type returned from the designer’s <ph id="ph1">&lt;xref:System.ComponentModel.Design.IRootDesigner.GetView%2A&gt;</ph> method, the load of the designer will fail, and the user will be presented with an error.</source>
          <target state="translated">如果未适配器可以处理从设计器的返回的数据类型<ph id="ph1">&lt;xref:System.ComponentModel.Design.IRootDesigner.GetView%2A&gt;</ph>方法，设计器的负载将失败，并且用户将看到出现错误。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>Visual Studio has an extensible scheme for providing view adapters, so it can adapt to any UI technology.</source>
          <target state="translated">Visual Studio 具有一套用于提供视图适配器，以便它可调整到任何 UI 技术可扩展方案。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>Third-party technology providers can also offer an appropriate view adapter, and their object models are immediately consumable.</source>
          <target state="translated">第三方技术提供商也可以提供适当的视图适配器，并且马上就可以使用其对象模型。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>For an example that uses view adapters, see ".NET Shape Library: A Sample Designer" in the Windows Forms Knowledge Base at <ph id="ph1">http://windowsforms.net/articles/shapedesigner.aspx</ph>.</source>
          <target state="translated">有关使用查看适配器示例，请参阅".NET 形状库:: 示例设计器"Windows 窗体知识库中在<ph id="ph1">http://windowsforms.net/articles/shapedesigner.aspx</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology.Default&gt;</ph> class in a designer.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology.Default&gt;</ph>在设计器中的类。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.Design.IRootDesigner.GetView%2A&gt;</ph> interface.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.ComponentModel.Design.IRootDesigner.GetView%2A&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.Design.ViewTechnology.Default">
          <source>Specifies the default view technology support.</source>
          <target state="translated">指定默认的视图技术支持。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Default">
          <source>The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host.</source>
          <target state="translated">根设计器可能会返回任何类型的对象，但该对象必须是与主机的技术的适配器兼容。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Default">
          <source>Hosting environments such as Visual Studio provide a way to plug in new view technology adapters.</source>
          <target state="translated">宿主环境，如 Visual Studio 提供了一种新的视图技术适配器中插入方法。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Default">
          <source>The default view object for the Windows Forms designer is a <ph id="ph1">&lt;xref:System.Windows.Forms.Control?displayProperty=nameWithType&gt;</ph> instance.</source>
          <target state="translated">Windows 窗体设计器的默认视图对象是<ph id="ph1">&lt;xref:System.Windows.Forms.Control?displayProperty=nameWithType&gt;</ph>实例。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Default">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> class in a designer.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph>在设计器中的类。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Default">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.Design.IRootDesigner&gt;</ph> interface.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.ComponentModel.Design.IRootDesigner&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
          <source>Represents a mode in which the view object is passed directly to the development environment.</source>
          <target state="translated">表示将视图对象直接传递给开发环境的模式。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
          <source>The view object must implement any interfaces the development environment requires.</source>
          <target state="translated">视图对象必须实现的开发环境要求任何接口。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
          <source>The Visual Studio development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through Visual Studio VSI (Visual Studio Integration) program.</source>
          <target state="translated">Visual Studio 开发环境支持 ActiveX 控件、 活动文档或实现可通过 Visual Studio VSI （Visual Studio 集成） 计划 IVsWindowPane 接口的对象的视图对象。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
          <source>The Visual Studio development environment provides support for this view technology.</source>
          <target state="translated">Visual Studio 开发环境对此视图技术提供支持。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
          <source>Support for this view technology is not necessarily available in all development environments.</source>
          <target state="translated">不一定能够使用在所有开发环境中对此视图技术的支持。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
          <source>Represents a mode in which a Windows Forms control object provides the display for the root designer.</source>
          <target state="translated">表示由 Windows 窗体控件对象为根设计器提供显示的模式。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
          <source>The designer host fills the development environment document window with the Windows Forms control.</source>
          <target state="translated">设计器宿主用 Windows 窗体控件填充开发环境文档窗口。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> class in a designer.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph>在设计器中的类。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.Design.LocalizationExtenderProvider&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.ComponentModel.Design.LocalizationExtenderProvider&gt;</ph>类。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>