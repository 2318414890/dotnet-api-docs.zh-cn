<Type Name="MailMessage" FullName="System.Net.Mail.MailMessage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="624ebd513f0f82b3aa1e60ee1a34e7f37de2ac93" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30461051" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MailMessage : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MailMessage extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Mail.MailMessage" />
  <TypeSignature Language="VB.NET" Value="Public Class MailMessage&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MailMessage : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Mail</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示可以使用 <see cref="T:System.Net.Mail.SmtpClient" /> 类发送的电子邮件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实例<xref:System.Net.Mail.MailMessage>类用于构造传输到用于传递使用的 SMTP 服务器的电子邮件<xref:System.Net.Mail.SmtpClient>类。  
  
 发件人、 收件人、 主题和电子邮件消息的正文可以指定为参数时<xref:System.Net.Mail.MailMessage.%23ctor%2A>用于初始化<xref:System.Net.Mail.MailMessage>对象。 这些参数还可以设置或上使用属性访问<xref:System.Net.Mail.MailMessage>对象。  
  
 可能使用的以下属性将设置主邮件消息标头和消息元素<xref:System.Net.Mail.MailMessage>类。  
  
|邮件标头或部分|Property|  
|-------------------------|--------------|  
|附件|<xref:System.Net.Mail.MailMessage.Attachments%2A>|  
|密件抄送 (BCC)|<xref:System.Net.Mail.MailMessage.Bcc%2A>|  
|抄送 (CC)|<xref:System.Net.Mail.MailMessage.CC%2A>|  
|Content-Type|<xref:System.Net.Mail.MailMessage.BodyEncoding%2A>|  
|自定义头的编码|<xref:System.Net.Mail.MailMessage.HeadersEncoding%2A>|  
|消息正文|<xref:System.Net.Mail.MailMessage.Body%2A>|  
|优先级|<xref:System.Net.Mail.MailMessage.Priority%2A>|  
|收件人|<xref:System.Net.Mail.MailMessage.To%2A>|  
|答复到|<xref:System.Net.Mail.MailMessage.ReplyToList%2A>|  
|发件人|<xref:System.Net.Mail.MailMessage.From%2A>|  
|Subject|<xref:System.Net.Mail.MailMessage.Subject%2A>|  
  
 <xref:System.Net.Mail.MailMessage>类还允许应用程序访问消息使用的标头集合<xref:System.Net.Mail.MailMessage.Headers%2A>属性。 虽然此集合是只读的 （新的集合不能设置），自定义标头可以添加到或从该集合中删除。 添加任何自定义标头将包含时<xref:System.Net.Mail.MailMessage>实例发送。 仅标头发送一条消息之前，请专门添加到此集合中<xref:System.Net.Mail.MailMessage.Headers%2A>收集中包括的属性。 后<xref:System.Net.Mail.MailMessage>发送实例，<xref:System.Net.Mail.MailMessage.Headers%2A>属性还将包括使用的关联的属性设置的标头<xref:System.Net.Mail.MailMessage>类或参数传递时<xref:System.Net.Mail.MailMessage.%23ctor%2A>用于初始化<xref:System.Net.Mail.MailMessage>对象。  
  
 如果某些邮件标头格式不正确，它们可能会导致损坏的电子邮件消息。 因此任何邮件标头中可以使用上的属性设置的标头集合<xref:System.Net.Mail.MailMessage>仅应使用设置类<xref:System.Net.Mail.MailMessage>类属性，或作为参数传递时<xref:System.Net.Mail.MailMessage.%23ctor%2A>初始化<xref:System.Net.Mail.MailMessage>对象。 不应使用添加邮件标头的以下列表<xref:System.Net.Mail.MailMessage.Headers%2A>为使用这些标头设置属性和任何值<xref:System.Net.Mail.MailMessage.Headers%2A>属性将被丢弃或覆盖发送消息时：  
  
-   Bcc  
  
-   Cc  
  
-   Content-ID  
  
-   Content-Location  
  
-   Content-Transfer-Encoding  
  
-   Content-Type  
  
-   日期  
  
-   From  
  
-   重要性  
  
-   MIME-Version  
  
-   优先级  
  
-   答复到  
  
-   发件人  
  
-   到  
  
-   X 优先级  
  
 如果应用程序未指定 X 发件人标头使用<xref:System.Net.Mail.MailMessage.Headers%2A>属性，<xref:System.Net.Mail.MailMessage>类发送消息时将创建一个。  
  
 使用<xref:System.Net.Mail.MailMessage.AlternateViews%2A>属性不同的格式指定电子邮件的副本。 例如，如果您在 HTML 中发送一条消息，可能还想要提供纯文本版本以防到部分收件人使用电子邮件的无法显示 HTML 内容的读取器。 有关示例，演示如何使用替代视图中创建一条消息，请参阅<xref:System.Net.Mail.MailMessage.AlternateViews%2A>。  
  
 使用<xref:System.Net.Mail.MailMessage.Attachments%2A>属性来将附件添加到电子邮件。 有关示例，演示如何创建带有附件的一条消息，请参阅<xref:System.Net.Mail.MailMessage.Attachments%2A>。  
  
 将你的电子邮件之后, 你可以使用发送<xref:System.Net.Mail.SmtpClient.Send%2A>或<xref:System.Net.Mail.SmtpClient.SendAsync%2A>方法。  
  
   
  
## Examples  
 下面的代码示例演示如何创建和发送电子邮件消息，其中包含附件。  
  
 [!code-cpp[NclMailSync#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#6)]
 [!code-csharp[NclMailSync#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Net.Mail.MailMessage" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MailMessage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.MailMessage.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MailMessage();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Net.Mail.MailMessage" /> 类的空实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从设置为 mailSettings 网络元素中的值[&lt;smtp&gt;元素 （网络设置）](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md)，如果它存在。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MailMessage (System.Net.Mail.MailAddress from, System.Net.Mail.MailAddress to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Mail.MailAddress from, class System.Net.Mail.MailAddress to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.MailMessage.#ctor(System.Net.Mail.MailAddress,System.Net.Mail.MailAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (from As MailAddress, to As MailAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MailMessage(System::Net::Mail::MailAddress ^ from, System::Net::Mail::MailAddress ^ to);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="from" Type="System.Net.Mail.MailAddress" />
        <Parameter Name="to" Type="System.Net.Mail.MailAddress" />
      </Parameters>
      <Docs>
        <param name="from">
          <see cref="T:System.Net.Mail.MailAddress" />，其中包含电子邮件发件人的地址。</param>
        <param name="to">
          <see cref="T:System.Net.Mail.MailAddress" />，其中包含电子邮件收件人的地址。</param>
        <summary>使用指定的 <see cref="T:System.Net.Mail.MailAddress" /> 类对象初始化 <see cref="T:System.Net.Mail.MailMessage" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.MailMessage.From%2A>属性初始化使用`from`和<xref:System.Net.Mail.MailMessage.To%2A>属性初始化使用`to`。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此构造函数。  
  
 [!code-cpp[NclMailSync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#4)]
 [!code-csharp[NclMailSync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="to" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="from" /> 或 <paramref name="to" /> 的格式不正确。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MailMessage (string from, string to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string from, string to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.MailMessage.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (from As String, to As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MailMessage(System::String ^ from, System::String ^ to);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="to" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="from">
          <see cref="T:System.String" />，其中包含电子邮件发件人的地址。</param>
        <param name="to">
          <see cref="T:System.String" />，其中包含电子邮件收件人的地址。</param>
        <summary>使用指定的 <see cref="T:System.String" /> 类对象初始化 <see cref="T:System.Net.Mail.MailMessage" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.MailMessage.From%2A>属性初始化使用`from`和<xref:System.Net.Mail.MailMessage.To%2A>属性初始化使用`to`。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此构造函数。  
  
 [!code-cpp[NclMailSync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#2)]
 [!code-csharp[NclMailSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="to" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> 为 <see cref="F:System.String.Empty" /> ("")。  
  
 或  
  
 <paramref name="to" /> 为 <see cref="F:System.String.Empty" /> ("")。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="from" /> 或 <paramref name="to" /> 的格式不正确。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MailMessage (string from, string to, string subject, string body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string from, string to, string subject, string body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.MailMessage.#ctor(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (from As String, to As String, subject As String, body As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MailMessage(System::String ^ from, System::String ^ to, System::String ^ subject, System::String ^ body);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="to" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="body" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="from">
          <see cref="T:System.String" />，其中包含电子邮件发件人的地址。</param>
        <param name="to">
          <see cref="T:System.String" />，其中包含电子邮件收件人的地址。</param>
        <param name="subject">包含主题文本的 <see cref="T:System.String" />。</param>
        <param name="body">一个包含邮件正文的 <see cref="T:System.String" />。</param>
        <summary>初始化 <see cref="T:System.Net.Mail.MailMessage" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新的属性<xref:System.Net.Mail.MailMessage>对象进行初始化，如下所示：  
  
|参数|Property|  
|---------------|--------------|  
|`from`|<xref:System.Net.Mail.MailMessage.From%2A>|  
|`to`|<xref:System.Net.Mail.MailMessage.To%2A>|  
|`subject`|<xref:System.Net.Mail.MailMessage.Subject%2A>|  
|`body`|<xref:System.Net.Mail.MailMessage.Body%2A>|  
  
 默认情况下，使用者和内容假定在本地计算机设置基于若要使用默认编码。 使用<xref:System.Net.Mail.MailMessage.BodyEncoding%2A>和<xref:System.Net.Mail.MailMessage.SubjectEncoding%2A>属性以指定不同的编码。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此构造函数。  
  
 [!code-cpp[NclMailSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#3)]
 [!code-csharp[NclMailSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> 为 <see langword="null" />。  
  
 或  
  
 <paramref name="to" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> 为 <see cref="F:System.String.Empty" /> ("")。  
  
 或  
  
 <paramref name="to" /> 为 <see cref="F:System.String.Empty" /> ("")。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="from" /> 或 <paramref name="to" /> 的格式不正确。</exception>
      </Docs>
    </Member>
    <Member MemberName="AlternateViews">
      <MemberSignature Language="C#" Value="public System.Net.Mail.AlternateViewCollection AlternateViews { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Mail.AlternateViewCollection AlternateViews" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.AlternateViews" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AlternateViews As AlternateViewCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::AlternateViewCollection ^ AlternateViews { System::Net::Mail::AlternateViewCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.AlternateViewCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于存储邮件正文的替代形式的附件集合。</summary>
        <value>可写的 <see cref="T:System.Net.Mail.AlternateViewCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Net.Mail.MailMessage.AlternateViews%2A>属性不同的格式指定电子邮件的副本。 例如，如果您在 HTML 中发送一条消息，可能还想要提供纯文本版本以防到部分收件人使用电子邮件的无法显示 HTML 内容的读取器。  
  
 若要添加到另一种视图<xref:System.Net.Mail.MailMessage>对象，请创建<xref:System.Net.Mail.Attachment>对于视图，然后将它添加到返回的集合<xref:System.Net.Mail.MailMessage.AlternateViews%2A>。 使用<xref:System.Net.Mail.MailMessage.Body%2A>属性以指定文本版本并使用<xref:System.Net.Mail.MailMessage.AlternateViews%2A>集合，以指定视图与其他 MIME 类型。 使用<xref:System.Net.Mime.MediaTypeNames>类成员来指定替代视图的 MIME 类型。  
  
   
  
## Examples  
 下面的代码示例演示如何创建和发送电子邮件具有纯文本和 HTML 替代视图。  
  
 [!code-cpp[NclMailSync#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#5)]
 [!code-csharp[NclMailSync#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#5)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="none" />
      </Docs>
    </Member>
    <Member MemberName="Attachments">
      <MemberSignature Language="C#" Value="public System.Net.Mail.AttachmentCollection Attachments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Mail.AttachmentCollection Attachments" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.Attachments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attachments As AttachmentCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::AttachmentCollection ^ Attachments { System::Net::Mail::AttachmentCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.AttachmentCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于存储附加到此电子邮件的数据的附件集合。</summary>
        <value>可写的 <see cref="T:System.Net.Mail.AttachmentCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用返回的集合<xref:System.Net.Mail.MailMessage.Attachments%2A>属性来添加附件，如文件或的内容<xref:System.IO.Stream>，到此<xref:System.Net.Mail.MailMessage>。  
  
 创建<xref:System.Net.Mail.Attachment>，包含或引用数据附加，，然后添加<xref:System.Net.Mail.Attachment>到返回的集合<xref:System.Net.Mail.MailMessage.Attachments%2A>。  
  
   
  
## Examples  
 下面的代码示例演示如何创建和发送带有附件的电子邮件。  
  
 [!code-cpp[NclMailSync#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#6)]
 [!code-csharp[NclMailSync#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#6)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None" />
      </Docs>
    </Member>
    <Member MemberName="Bcc">
      <MemberSignature Language="C#" Value="public System.Net.Mail.MailAddressCollection Bcc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Mail.MailAddressCollection Bcc" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.Bcc" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bcc As MailAddressCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::MailAddressCollection ^ Bcc { System::Net::Mail::MailAddressCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.MailAddressCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含此电子邮件密件抄送 (BCC) 收件人的地址集合。</summary>
        <value>可写的 <see cref="T:System.Net.Mail.MailAddressCollection" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要添加到电子邮件的密件抄送收件人，创建<xref:System.Net.Mail.MailAddress>收件人的地址、，然后将该对象添加到返回的集合<xref:System.Net.Mail.MailMessage.Bcc%2A>属性。  
  
 当收件人查看电子邮件，<xref:System.Net.Mail.MailMessage.Bcc%2A>地址通常不显示。  
  
   
  
## Examples  
 下面的代码示例演示添加到地址<xref:System.Net.Mail.MailMessage.Bcc%2A>地址集合。  
  
 [!code-cpp[NclMailSync#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#9)]
 [!code-csharp[NclMailSync#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#9)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None" />
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public string Body { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Body" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.Body" />
      <MemberSignature Language="VB.NET" Value="Public Property Body As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Body { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置邮件正文。</summary>
        <value>包含正文的 <see cref="T:System.String" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mime.ContentType>的<xref:System.Net.Mail.MailMessage.Body%2A>内容是"文本/plain"。 指定用于与正文的编码<xref:System.Net.Mail.MailMessage.BodyEncoding%2A>属性。  
  
 如果可用提供更丰富的显示选项，以便收件人的替代格式的正文内容，则可以通过使用指定的正文内容的替代视图<xref:System.Net.Mail.MailMessage.AlternateViews%2A>属性。 例如，应用程序可以选择发送纯文本正文和消息正文的 HTML 版本。 可以显示 HTML 的电子邮件读取器可以向正文该 HTML 版本接收方时无法显示 html 格式的读取器将显示的消息的纯文本版本相反。  
  
   
  
## Examples  
 下面的代码示例演示了如何设置<xref:System.Net.Mail.MailMessage.Body%2A>属性。  
  
 [!code-cpp[NclMailSync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#2)]
 [!code-csharp[NclMailSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BodyEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding BodyEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding BodyEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.BodyEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property BodyEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ BodyEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于邮件正文的编码。</summary>
        <value>应用于 <see cref="T:System.Text.Encoding" /> 的内容的 <see cref="P:System.Net.Mail.MailMessage.Body" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为指定的值<xref:System.Net.Mail.MailMessage.BodyEncoding%2A>属性可以设置字符组字段中的内容类型标头。 默认字符集是`"us-ascii"`。  
  
 如果你设置<xref:System.Net.Mail.MailMessage.BodyEncoding%2A>属性<xref:System.Text.Encoding.UTF8%2A>， <xref:System.Text.Encoding.Unicode%2A>，或<xref:System.Text.Encoding.UTF32%2A>，则框架将选择<xref:System.Net.Mime.TransferEncoding>的<xref:System.Net.Mime.TransferEncoding.Base64>此<xref:System.Net.Mail.MailMessage>。  
  
   
  
## Examples  
 下面的代码示例演示如何创建使用 UTF8 编码一封电子邮件。  
  
 [!code-cpp[NclMailAsync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#3)]
 [!code-csharp[NclMailAsync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#3)]
 [!code-vb[NclMailAsync#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Mail.MailMessage.HeadersEncoding" />
        <altmember cref="P:System.Net.Mail.MailMessage.SubjectEncoding" />
        <altmember cref="T:System.Net.Mime.TransferEncoding" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="BodyTransferEncoding">
      <MemberSignature Language="C#" Value="public System.Net.Mime.TransferEncoding BodyTransferEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Mime.TransferEncoding BodyTransferEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.BodyTransferEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property BodyTransferEncoding As TransferEncoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mime::TransferEncoding BodyTransferEncoding { System::Net::Mime::TransferEncoding get(); void set(System::Net::Mime::TransferEncoding value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mime.TransferEncoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于邮件正文的传输编码。</summary>
        <value>返回 <see cref="T:System.Net.Mime.TransferEncoding" />。  
  
 应用于 <see cref="T:System.Net.Mime.TransferEncoding" /> 的内容的 <see cref="P:System.Net.Mail.MailMessage.Body" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CC">
      <MemberSignature Language="C#" Value="public System.Net.Mail.MailAddressCollection CC { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Mail.MailAddressCollection CC" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.CC" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CC As MailAddressCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::MailAddressCollection ^ CC { System::Net::Mail::MailAddressCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.MailAddressCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含此电子邮件抄送 (CC) 收件人的地址集合。</summary>
        <value>可写的 <see cref="T:System.Net.Mail.MailAddressCollection" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要添加到电子邮件的抄送收件人，创建<xref:System.Net.Mail.MailAddress>收件人的地址，然后将该对象添加到返回的集合<xref:System.Net.Mail.MailMessage.CC%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示添加到地址<xref:System.Net.Mail.MailMessage.CC%2A>地址集合。  
  
 [!code-cpp[NclMailSync#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#10)]
 [!code-csharp[NclMailSync#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#10)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None" />
      </Docs>
    </Member>
    <Member MemberName="DeliveryNotificationOptions">
      <MemberSignature Language="C#" Value="public System.Net.Mail.DeliveryNotificationOptions DeliveryNotificationOptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Mail.DeliveryNotificationOptions DeliveryNotificationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.DeliveryNotificationOptions" />
      <MemberSignature Language="VB.NET" Value="Public Property DeliveryNotificationOptions As DeliveryNotificationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::DeliveryNotificationOptions DeliveryNotificationOptions { System::Net::Mail::DeliveryNotificationOptions get(); void set(System::Net::Mail::DeliveryNotificationOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.DeliveryNotificationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此电子邮件的发送通知。</summary>
        <value>包含此邮件的发送通知的 <see cref="T:System.Net.Mail.DeliveryNotificationOptions" /> 值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>释放由 <see cref="T:System.Net.Mail.MailMessage" /> 占用的资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.MailMessage.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Net.Mail.MailMessage" /> 使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用完 <xref:System.Net.Mail.MailMessage.Dispose%2A> 后调用 <xref:System.Net.Mail.MailMessage> 方法。 <xref:System.Net.Mail.MailMessage.Dispose%2A> 方法使 <xref:System.Net.Mail.MailMessage> 处于不可用状态。 在调用<xref:System.Net.Mail.MailMessage.Dispose%2A>，必须释放对所有引用<xref:System.Net.Mail.MailMessage>以便垃圾回收器才能回收的内存，<xref:System.Net.Mail.MailMessage>占用。 有关详细信息，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  每次释放对 <xref:System.Net.Mail.MailMessage.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Net.Mail.MailMessage>。  
  
   
  
## Examples  
 下面的代码示例演示如何释放<xref:System.Net.Mail.MailMessage>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.MailMessage.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.Net.Mail.MailMessage" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法称为由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。 `Dispose()` 调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A> 调用`Dispose`与`disposing`设置为`false`。  
  
 当`disposing`参数为 true 时，此方法释放由任何托管对象持有的全部资源此<xref:System.Net.Mail.MailMessage>引用。 此方法调用每个引用对象的 `Dispose()` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> 可以由其他对象多次调用。 在重写<see langword="Dispose(Boolean)" />请注意不要引用已释放的以前调用中的对象<see langword="Dispose" />。 有关如何实现详细信息<see langword="Dispose(Boolean)" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
 有关详细信息<see langword="Dispose" />和<see cref="M:System.Object.Finalize" />，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[重写 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public System.Net.Mail.MailAddress From { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Mail.MailAddress From" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.From" />
      <MemberSignature Language="VB.NET" Value="Public Property From As MailAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::MailAddress ^ From { System::Net::Mail::MailAddress ^ get(); void set(System::Net::Mail::MailAddress ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.MailAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此电子邮件的发件人地址。</summary>
        <value>包含发信人地址信息的 <see cref="T:System.Net.Mail.MailAddress" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从地址不验证或未绑定到当前登录的用户。  
  
   
  
## Examples  
 下面的代码示例演示如何设置的值<xref:System.Net.Mail.MailMessage.From%2A>属性。  
  
 [!code-cpp[NclMailSync#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#10)]
 [!code-csharp[NclMailSync#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection Headers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.Headers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Headers As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ Headers { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与此电子邮件一起传输的电子邮件标头。</summary>
        <value>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> ，包含电子邮件标头。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.MailMessage.Headers%2A>属性允许应用程序访问消息的标头集合。 虽然此集合是只读的 （新的集合不能设置），自定义标头可以添加到或从该集合中删除。 添加任何自定义标头将包含时<xref:System.Net.Mail.MailMessage>实例发送。 仅标头发送一条消息之前，请专门添加到此集合中<xref:System.Net.Mail.MailMessage.Headers%2A>收集中包括的属性。 后<xref:System.Net.Mail.MailMessage>发送实例，<xref:System.Net.Mail.MailMessage.Headers%2A>属性还将包括使用的关联的属性设置的标头<xref:System.Net.Mail.MailMessage>类或参数传递时<xref:System.Net.Mail.MailMessage.%23ctor%2A>用于初始化<xref:System.Net.Mail.MailMessage>对象。  
  
 如果某些邮件标头格式不正确，它们可能会导致损坏的电子邮件消息。 因此任何邮件标头中可以使用上的属性设置的标头集合<xref:System.Net.Mail.MailMessage>仅应使用设置类<xref:System.Net.Mail.MailMessage>类属性，或作为参数传递时<xref:System.Net.Mail.MailMessage.%23ctor%2A>初始化<xref:System.Net.Mail.MailMessage>对象。 不应使用添加邮件标头的以下列表<xref:System.Net.Mail.MailMessage.Headers%2A>为使用这些标头设置属性和任何值<xref:System.Net.Mail.MailMessage.Headers%2A>属性将被丢弃或覆盖发送消息时：  
  
-   Bcc  
  
-   Cc  
  
-   Content-ID  
  
-   Content-Location  
  
-   Content-Transfer-Encoding  
  
-   Content-Type  
  
-   日期  
  
-   From  
  
-   重要性  
  
-   MIME-Version  
  
-   优先级  
  
-   答复到  
  
-   发件人  
  
-   到  
  
-   X 优先级  
  
 如果应用程序未指定 X 发件人标头使用<xref:System.Net.Mail.MailMessage.Headers%2A>属性，<xref:System.Net.Mail.MailMessage>类发送消息时将创建一个。  
  
 发件人、 收件人、 主题和电子邮件消息的正文可以指定为参数时<xref:System.Net.Mail.MailMessage.%23ctor%2A>用于初始化<xref:System.Net.Mail.MailMessage>对象。 这些参数还可以设置或上使用属性访问<xref:System.Net.Mail.MailMessage>对象。  
  
 可能使用的以下属性将设置主邮件消息标头和消息元素<xref:System.Net.Mail.MailMessage>类。  
  
|邮件标头或部分|Property|  
|-------------------------|--------------|  
|附件|<xref:System.Net.Mail.MailMessage.Attachments%2A>|  
|密件抄送 (BCC)|<xref:System.Net.Mail.MailMessage.Bcc%2A>|  
|抄送 (CC)|<xref:System.Net.Mail.MailMessage.CC%2A>|  
|Content-Type|<xref:System.Net.Mail.MailMessage.BodyEncoding%2A>|  
|自定义头的编码|<xref:System.Net.Mail.MailMessage.HeadersEncoding%2A>|  
|消息正文|<xref:System.Net.Mail.MailMessage.Body%2A>|  
|优先级|<xref:System.Net.Mail.MailMessage.Priority%2A>|  
|收件人|<xref:System.Net.Mail.MailMessage.To%2A>|  
|答复到|<xref:System.Net.Mail.MailMessage.ReplyToList%2A>|  
|发件人|<xref:System.Net.Mail.MailMessage.From%2A>|  
|Subject|<xref:System.Net.Mail.MailMessage.Subject%2A>|  
  
   
  
## Examples  
 下面的代码示例演示如何显示一封电子邮件的标头。  
  
 [!code-cpp[NclMailSync#24](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#24)]
 [!code-csharp[NclMailSync#24](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeadersEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding HeadersEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding HeadersEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.HeadersEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property HeadersEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ HeadersEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此电子邮件的用户自定义标头使用的编码。</summary>
        <value>用于用户定义此电子邮件的自定义标头的编码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Net.Mail.MailMessage.HeadersEncoding%2A>属性默认为<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>。  
  
 SMTP 邮件由标头和正文部分组成。 SMTP IETF Rfc 限制的标头和正文部分的名称为 ASCII。 但是，IETF Rfc 允许标头和正文部分的值为包含 Unicode 字符。 在任何特定值中，如果存在非 ASCII 字符，然后编码的值是结合使用的字符编码 （UTF8 或 Shift JIS，例如） 后跟字节编码 (<xref:System.Net.Mime.TransferEncoding.Base64>或<xref:System.Net.Mime.TransferEncoding.QuotedPrintable>例如)。 结果通常是仅包含 ASCII 字符位于网络传输流。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Mail.MailMessage.BodyEncoding" />
        <altmember cref="P:System.Net.Mail.MailMessage.SubjectEncoding" />
        <altmember cref="T:System.Net.Mime.TransferEncoding" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="IsBodyHtml">
      <MemberSignature Language="C#" Value="public bool IsBodyHtml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBodyHtml" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.IsBodyHtml" />
      <MemberSignature Language="VB.NET" Value="Public Property IsBodyHtml As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBodyHtml { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，指示邮件正文是否为 HTML 格式。</summary>
        <value>
          <see langword="true" /> 如果消息正文在 HTML;其他<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Net.Mail.MailPriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Mail.MailPriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As MailPriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::MailPriority Priority { System::Net::Mail::MailPriority get(); void set(System::Net::Mail::MailPriority value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.MailPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此电子邮件的优先级。</summary>
        <value>包含此邮件的优先级的 <see cref="T:System.Net.Mail.MailPriority" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplyTo">
      <MemberSignature Language="C#" Value="public System.Net.Mail.MailAddress ReplyTo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Mail.MailAddress ReplyTo" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.ReplyTo" />
      <MemberSignature Language="VB.NET" Value="Public Property ReplyTo As MailAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::MailAddress ^ ReplyTo { System::Net::Mail::MailAddress ^ get(); void set(System::Net::Mail::MailAddress ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use ReplyToList instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Mail.MailAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置邮件的回复地址。</summary>
        <value>指示 <see cref="P:System.Net.Mail.MailMessage.ReplyTo" /> 字段的值的 MailAddress。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Net.Mail.MailMessage.ReplyTo%2A>属性以指示地址以外<xref:System.Net.Mail.MailMessage.From%2A>地址用于回复此邮件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplyToList">
      <MemberSignature Language="C#" Value="public System.Net.Mail.MailAddressCollection ReplyToList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Mail.MailAddressCollection ReplyToList" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.ReplyToList" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplyToList As MailAddressCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::MailAddressCollection ^ ReplyToList { System::Net::Mail::MailAddressCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.MailAddressCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取邮件的回复地址的列表。</summary>
        <value>邮件的回复地址的列表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Net.Mail.MailMessage.ReplyToList%2A>属性不指示的地址的列表<xref:System.Net.Mail.MailMessage.From%2A>地址用于回复此邮件。  
  
 <xref:System.Net.Mail.MailMessage.ReplyToList%2A>属性替换<xref:System.Net.Mail.MailMessage.ReplyTo%2A>仅允许单个地址回复的属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sender">
      <MemberSignature Language="C#" Value="public System.Net.Mail.MailAddress Sender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Mail.MailAddress Sender" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.Sender" />
      <MemberSignature Language="VB.NET" Value="Public Property Sender As MailAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::MailAddress ^ Sender { System::Net::Mail::MailAddress ^ get(); void set(System::Net::Mail::MailAddress ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.MailAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此电子邮件的发件人地址。</summary>
        <value>包含发件人地址信息的 <see cref="T:System.Net.Mail.MailAddress" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不验证或未绑定到当前登录的用户发件人地址。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subject">
      <MemberSignature Language="C#" Value="public string Subject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Subject" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.Subject" />
      <MemberSignature Language="VB.NET" Value="Public Property Subject As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Subject { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此电子邮件的主题行。</summary>
        <value>包含主题内容的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定使用该主题的使用的编码<xref:System.Net.Mail.MailMessage.SubjectEncoding%2A>属性。  
  
   
  
## Examples  
 下面的代码示例演示了如何设置<xref:System.Net.Mail.MailMessage.Subject%2A>属性。  
  
 [!code-cpp[NclMailSync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#2)]
 [!code-csharp[NclMailSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubjectEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding SubjectEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding SubjectEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.SubjectEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property SubjectEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ SubjectEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于此电子邮件主题内容的编码。</summary>
        <value>用于对 <see cref="T:System.Text.Encoding" /> 属性进行编码的 <see cref="P:System.Net.Mail.MailMessage.Subject" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果邮件代理不能处理<xref:System.Net.Mail.MailMessage.SubjectEncoding%2A>的<xref:System.Text.Encoding.Unicode%2A>，使用<xref:System.Text.Encoding.UTF8%2A>。  
  
   
  
## Examples  
 下面的代码示例演示了如何设置<xref:System.Net.Mail.MailMessage.SubjectEncoding%2A>属性。  
  
 [!code-cpp[NclMailASync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#3)]
 [!code-csharp[NclMailASync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#3)]
 [!code-vb[NclMailASync#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Mail.MailMessage.BodyEncoding" />
        <altmember cref="P:System.Net.Mail.MailMessage.HeadersEncoding" />
        <altmember cref="T:System.Net.Mime.TransferEncoding" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="To">
      <MemberSignature Language="C#" Value="public System.Net.Mail.MailAddressCollection To { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Mail.MailAddressCollection To" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.MailMessage.To" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property To As MailAddressCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::MailAddressCollection ^ To { System::Net::Mail::MailAddressCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.MailAddressCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含此电子邮件收件人的地址集合。</summary>
        <value>可写的 <see cref="T:System.Net.Mail.MailAddressCollection" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.MailMessage.To%2A>属性用于指定的电子邮件收件人行上的地址。 若要添加到电子邮件收件人，创建<xref:System.Net.Mail.MailAddress>收件人的地址、，然后将该对象添加到此属性返回的集合。  
  
   
  
## Examples  
 下面的代码示例演示了如何设置<xref:System.Net.Mail.MailMessage.To%2A>属性。  
  
 [!code-cpp[NclMailSync#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#7)]
 [!code-csharp[NclMailSync#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#7)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None" />
      </Docs>
    </Member>
  </Members>
</Type>