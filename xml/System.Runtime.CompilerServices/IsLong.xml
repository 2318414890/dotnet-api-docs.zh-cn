<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f8bf804695c48d4ce5c23b8a91eec7f8319047e2" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37472120" /></Metadata><TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <TypeSignature Language="F#" Value="type IsLong = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1d96b-101">指示修饰的整数是标准 C++ <see langword="long" /> 值。</span><span class="sxs-lookup"><span data-stu-id="1d96b-101">Indicates that a modified integer is a standard C++ <see langword="long" /> value.</span></span> <span data-ttu-id="1d96b-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="1d96b-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d96b-103">C + + 标准指示`long`值与整数值是不同的类型。</span><span class="sxs-lookup"><span data-stu-id="1d96b-103">The C++ standard indicates that a `long` value and an integer value are distinct types.</span></span>  <span data-ttu-id="1d96b-104">但是，它们均表示使用`ELEMENT_TYPE_I4`中程序集。</span><span class="sxs-lookup"><span data-stu-id="1d96b-104">However, they are both represented using `ELEMENT_TYPE_I4` in an assembly.</span></span>  <span data-ttu-id="1d96b-105">若要区分`long`从某一整数在 c + + 中，Microsoft c + + 编译器将添加<xref:System.Runtime.CompilerServices.IsLong>修饰符的任何实例`long`的实例时是 emited。</span><span class="sxs-lookup"><span data-stu-id="1d96b-105">To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsLong> modifier to any instance of a `long` when the instance is emited.</span></span>  <span data-ttu-id="1d96b-106">此过程是用于维护语言级别类型安全非常重要。</span><span class="sxs-lookup"><span data-stu-id="1d96b-106">This process is critically important for maintaining language-level type safety.</span></span>  
  
 <span data-ttu-id="1d96b-107">编译器发出元数据更改，在实时 (JIT) 编译器处理值时的默认行为是不适当的方式中的自定义修饰符。</span><span class="sxs-lookup"><span data-stu-id="1d96b-107">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="1d96b-108">当 JIT 编译器遇到了一个自定义修饰符时，它处理修饰符指定的方法中的值。</span><span class="sxs-lookup"><span data-stu-id="1d96b-108">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="1d96b-109">编译器可以将自定义修饰符应用于方法、 参数和返回值。</span><span class="sxs-lookup"><span data-stu-id="1d96b-109">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="1d96b-110">JIT 编译器必须响应所需的修饰符，但可以忽略可选的修饰符。</span><span class="sxs-lookup"><span data-stu-id="1d96b-110">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="1d96b-111">可以将自定义修饰符发出到元数据中使用以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="1d96b-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="1d96b-112">使用中的方法<xref:System.Reflection.Emit.TypeBuilder>如类<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>，和<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="1d96b-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="1d96b-113">生成包含对的调用的 Microsoft 中间语言 (MSIL) 指令文件`modopt`和`modreq`，并组合成与文件[Ilasm.exe （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="1d96b-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="1d96b-114">使用非托管的反射 API。</span><span class="sxs-lookup"><span data-stu-id="1d96b-114">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d96b-115">下面的示例演示如何发出<xref:System.Runtime.CompilerServices.IsLong>使用反射的程序集的对象。</span><span class="sxs-lookup"><span data-stu-id="1d96b-115">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsLong> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>