<Type Name="CallConvCdecl" FullName="System.Runtime.CompilerServices.CallConvCdecl">
  <TypeSignature Language="C#" Value="public class CallConvCdecl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CallConvCdecl extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.CallConvCdecl" />
  <TypeSignature Language="VB.NET" Value="Public Class CallConvCdecl" />
  <TypeSignature Language="C++ CLI" Value="public ref class CallConvCdecl" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cb07e-101">指示方法应使用 <see langword="Cdecl" /> 调用约定。</span><span class="sxs-lookup"><span data-stu-id="cb07e-101">Indicates that a method should use the <see langword="Cdecl" /> calling convention.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb07e-102">调用方清理堆栈。</span><span class="sxs-lookup"><span data-stu-id="cb07e-102">The caller cleans the stack.</span></span> <span data-ttu-id="cb07e-103">这使调用函数使用`varargs`。</span><span class="sxs-lookup"><span data-stu-id="cb07e-103">This enables calling functions with `varargs`.</span></span>  
  
 <span data-ttu-id="cb07e-104">此类仅用作自定义修饰符的方法的元数据签名。</span><span class="sxs-lookup"><span data-stu-id="cb07e-104">This class is used only as a custom modifier of the metadata signature of a method.</span></span>  
  
 <span data-ttu-id="cb07e-105">中的类<xref:System.Runtime.CompilerServices>编译器编写器仅供使用。</span><span class="sxs-lookup"><span data-stu-id="cb07e-105">The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.</span></span>  
  
 <span data-ttu-id="cb07e-106">编译器发出元数据，以更改默认行为不恰当时，会在实时 (JIT) 编译器处理值的方式中的自定义修饰符。</span><span class="sxs-lookup"><span data-stu-id="cb07e-106">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="cb07e-107">当 JIT 编译器遇到了一个自定义修饰符时，它将处理修饰符指定的方法中的值。</span><span class="sxs-lookup"><span data-stu-id="cb07e-107">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="cb07e-108">编译器可以将自定义修饰符应用于方法、 参数和返回值。</span><span class="sxs-lookup"><span data-stu-id="cb07e-108">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="cb07e-109">JIT 编译器必须响应所需修饰符，但可以忽略可选修饰符。</span><span class="sxs-lookup"><span data-stu-id="cb07e-109">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  <span data-ttu-id="cb07e-110">C + + 编译器无法发出一个自定义修饰符来描述一个字节应如何处理在其中 JIT 编译器将字节与 c + + 不兼容的方式的情况下默认情况下。</span><span class="sxs-lookup"><span data-stu-id="cb07e-110">A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.</span></span>  
  
 <span data-ttu-id="cb07e-111">可以将自定义修饰符发出到元数据中使用以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="cb07e-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="cb07e-112">使用中的方法<xref:System.Reflection.Emit.TypeBuilder>类如<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>，和<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb07e-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="cb07e-113">生成包含对的调用的 Microsoft 中间语言 (MSIL) 指令文件`modopt`和`modreq`，再将包含的文件内容组合[Ilasm.exe （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="cb07e-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="cb07e-114">使用非托管的反射 API。</span><span class="sxs-lookup"><span data-stu-id="cb07e-114">Using the unmanaged reflection API.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CallConvCdecl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.CallConvCdecl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CallConvCdecl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cb07e-115">初始化 <see cref="T:System.Runtime.CompilerServices.CallConvCdecl" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cb07e-115">Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallConvCdecl" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb07e-116">中的类<xref:System.Runtime.CompilerServices>编译器编写器仅供使用。</span><span class="sxs-lookup"><span data-stu-id="cb07e-116">The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>