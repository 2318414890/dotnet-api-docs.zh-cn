<Type Name="IsJitIntrinsic" FullName="System.Runtime.CompilerServices.IsJitIntrinsic">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="630993df091f4602f9e2ae5cb8e82fcfa8e504c8" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37639253" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsJitIntrinsic" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsJitIntrinsic extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsJitIntrinsic" />
  <TypeSignature Language="VB.NET" Value="Public Class IsJitIntrinsic" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsJitIntrinsic abstract sealed" />
  <TypeSignature Language="F#" Value="type IsJitIntrinsic = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="94bb8-101">指示某一修饰的方法是一个内部值，实时 (JIT) 编译器可对它执行特殊代码生成。</span>
      <span class="sxs-lookup">
        <span data-stu-id="94bb8-101">Indicates that a modified method is an intrinsic value for which the just-in-time (JIT) compiler  can perform special code generation.</span>
      </span>
      <span data-ttu-id="94bb8-102">此类不能被继承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="94bb8-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94bb8-103">编译器发出元数据更改，在实时 (JIT) 编译器处理值时的默认行为是不适当的方式中的自定义修饰符。</span><span class="sxs-lookup"><span data-stu-id="94bb8-103">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="94bb8-104">当 JIT 编译器遇到了一个自定义修饰符时，它处理修饰符指定的方法中的值。</span><span class="sxs-lookup"><span data-stu-id="94bb8-104">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="94bb8-105">编译器可以将自定义修饰符应用于方法、 参数和返回值。</span><span class="sxs-lookup"><span data-stu-id="94bb8-105">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="94bb8-106">JIT 编译器必须响应所需的修饰符，但可以忽略可选的修饰符。</span><span class="sxs-lookup"><span data-stu-id="94bb8-106">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="94bb8-107">可以将自定义修饰符发出到元数据中使用以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="94bb8-107">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="94bb8-108">使用中的方法<xref:System.Reflection.Emit.TypeBuilder>如类<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>，和<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="94bb8-108">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="94bb8-109">生成包含对的调用的 Microsoft 中间语言 (MSIL) 指令文件`modopt`和`modreq`，并组合成与文件[Ilasm.exe （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="94bb8-109">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="94bb8-110">使用非托管的反射 API。</span><span class="sxs-lookup"><span data-stu-id="94bb8-110">Using the unmanaged reflection API.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>