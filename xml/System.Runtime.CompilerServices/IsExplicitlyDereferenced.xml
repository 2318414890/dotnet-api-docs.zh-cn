<Type Name="IsExplicitlyDereferenced" FullName="System.Runtime.CompilerServices.IsExplicitlyDereferenced">
  <TypeSignature Language="C#" Value="public static class IsExplicitlyDereferenced" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsExplicitlyDereferenced extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsExplicitlyDereferenced" />
  <TypeSignature Language="VB.NET" Value="Public Class IsExplicitlyDereferenced" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsExplicitlyDereferenced abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="84459-101">指示托管指针表示某方法签名内的指针参数。</span><span class="sxs-lookup"><span data-stu-id="84459-101">Indicates that a managed pointer represents a pointer parameter within a method signature.</span></span> <span data-ttu-id="84459-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="84459-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84459-103">在 c + +，托管的指针和托管的引用将发送到元数据作为指针。</span><span class="sxs-lookup"><span data-stu-id="84459-103">In C++, managed pointers and managed references are emitted into metadata as pointers.</span></span>  <span data-ttu-id="84459-104">若要区分元数据中的两种类型，Microsoft c + + 编译器，请适用于托管指针的此修饰符。</span><span class="sxs-lookup"><span data-stu-id="84459-104">To distinguish between the two types in metadata, the Microsoft  C++ compiler applies this modifier to managed pointers.</span></span>  <span data-ttu-id="84459-105">它会发出对托管的引用类型没有修饰符。</span><span class="sxs-lookup"><span data-stu-id="84459-105">It emits no modifier on managed reference types.</span></span>  <span data-ttu-id="84459-106">编译器需要从元数据范围导入方法时知道正确的调用语法。</span><span class="sxs-lookup"><span data-stu-id="84459-106">Compilers need to know the correct calling syntax when importing a method from metadata scope.</span></span>  <span data-ttu-id="84459-107"><xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced>类和其伙伴<xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced>类中，消除歧义从指针参数的引用参数。</span><span class="sxs-lookup"><span data-stu-id="84459-107">The <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> class and its partner, the <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters.</span></span>  
  
 <span data-ttu-id="84459-108">编译器发出元数据，以更改默认行为不恰当时，会在实时 (JIT) 编译器处理值的方式中的自定义修饰符。</span><span class="sxs-lookup"><span data-stu-id="84459-108">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="84459-109">当 JIT 编译器遇到了一个自定义修饰符时，它将处理修饰符指定的方法中的值。</span><span class="sxs-lookup"><span data-stu-id="84459-109">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="84459-110">编译器可以将自定义修饰符应用于方法、 参数和返回值。</span><span class="sxs-lookup"><span data-stu-id="84459-110">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="84459-111">JIT 编译器必须响应所需修饰符，但可以忽略可选修饰符。</span><span class="sxs-lookup"><span data-stu-id="84459-111">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="84459-112">可以将自定义修饰符发出到元数据中使用以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="84459-112">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="84459-113">使用中的方法<xref:System.Reflection.Emit.TypeBuilder>类如<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>，和<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="84459-113">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="84459-114">生成包含对的调用的 Microsoft 中间语言 (MSIL) 指令文件`modopt`和`modreq`，再将包含的文件内容组合[Ilasm.exe （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="84459-114">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="84459-115">使用非托管的反射 API。</span><span class="sxs-lookup"><span data-stu-id="84459-115">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84459-116">下面的示例演示如何发出<xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced>为使用反射程序集的对象。</span><span class="sxs-lookup"><span data-stu-id="84459-116">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsExplicitlyDereferenced#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsExplicitlyDereferenced/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>