<Type Name="IsUdtReturn" FullName="System.Runtime.CompilerServices.IsUdtReturn">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0f0ed8c7fe932669d0f5ed16b5f3bbbac146ec5f" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37471966" /></Metadata><TypeSignature Language="C#" Value="public static class IsUdtReturn" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsUdtReturn extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsUdtReturn" />
  <TypeSignature Language="VB.NET" Value="Public Class IsUdtReturn" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsUdtReturn abstract sealed" />
  <TypeSignature Language="F#" Value="type IsUdtReturn = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6f850-101">指示返回类型是用户定义的类型。</span><span class="sxs-lookup"><span data-stu-id="6f850-101">Indicates that a return type is a user-defined type.</span></span> <span data-ttu-id="6f850-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="6f850-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f850-103"><xref:System.Runtime.CompilerServices.IsUdtReturn> C + + 编译器使用修饰符来标记具有本机 c + + 对象返回语义的方法的返回类型。</span><span class="sxs-lookup"><span data-stu-id="6f850-103">The <xref:System.Runtime.CompilerServices.IsUdtReturn> modifier is used by the C++ compiler to mark return types of methods that have native C++ object return semantics.</span></span>  <span data-ttu-id="6f850-104">托管的调试器识别正确确定本机调用约定是在使用此修饰符。</span><span class="sxs-lookup"><span data-stu-id="6f850-104">The managed debugger recognizes this modifier to correctly determine that the native calling convention is in use.</span></span>  
  
 <span data-ttu-id="6f850-105">编译器发出元数据更改，在实时 (JIT) 编译器处理值时的默认行为是不适当的方式中的自定义修饰符。</span><span class="sxs-lookup"><span data-stu-id="6f850-105">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="6f850-106">当 JIT 编译器遇到了一个自定义修饰符时，它处理修饰符指定的方法中的值。</span><span class="sxs-lookup"><span data-stu-id="6f850-106">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="6f850-107">编译器可以将自定义修饰符应用于方法、 参数和返回值。</span><span class="sxs-lookup"><span data-stu-id="6f850-107">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="6f850-108">JIT 编译器必须响应所需的修饰符，但可以忽略可选的修饰符。</span><span class="sxs-lookup"><span data-stu-id="6f850-108">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="6f850-109">可以将自定义修饰符发出到元数据中使用以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="6f850-109">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="6f850-110">使用中的方法<xref:System.Reflection.Emit.TypeBuilder>如类<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>，和<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="6f850-110">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="6f850-111">生成包含对的调用的 Microsoft 中间语言 (MSIL) 指令文件`modopt`和`modreq`，并组合成与文件[Ilasm.exe （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="6f850-111">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="6f850-112">使用非托管的反射 API。</span><span class="sxs-lookup"><span data-stu-id="6f850-112">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f850-113">下面的代码示例创建一个使用中的类的程序集<xref:System.Reflection.Emit>命名空间，并发出<xref:System.Runtime.CompilerServices.IsUdtReturn>到该程序集的修饰符。</span><span class="sxs-lookup"><span data-stu-id="6f850-113">The following code example creates an assembly using classes in the <xref:System.Reflection.Emit> namespace and emits the <xref:System.Runtime.CompilerServices.IsUdtReturn> modifier into that assembly.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsUdtReturn#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsUdtReturn/CPP/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>