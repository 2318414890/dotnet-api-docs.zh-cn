<Type Name="IsSignUnspecifiedByte" FullName="System.Runtime.CompilerServices.IsSignUnspecifiedByte">
  <TypeSignature Language="C#" Value="public static class IsSignUnspecifiedByte" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsSignUnspecifiedByte extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsSignUnspecifiedByte" />
  <TypeSignature Language="VB.NET" Value="Public Class IsSignUnspecifiedByte" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsSignUnspecifiedByte abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9b742-101">指示修饰符既非有符号，也非无符号。</span><span class="sxs-lookup"><span data-stu-id="9b742-101">Indicates that a modifier is neither signed nor unsigned.</span></span> <span data-ttu-id="9b742-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="9b742-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b742-103">某些编程语言，如 c + +，识别三个不同`char`值： `signed char`， `unsigned char`，和`char`。</span><span class="sxs-lookup"><span data-stu-id="9b742-103">Some programming languages, such as C++, recognize three distinct `char` values: `signed char`, `unsigned char`, and `char`.</span></span>  <span data-ttu-id="9b742-104">若要区分未修改`char`键入与其他 Microsoft c + + 编译器添加<xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte>修饰符添加到每个构造`char`发送到程序集的类型。</span><span class="sxs-lookup"><span data-stu-id="9b742-104">To distinguish the unmodified `char` type from the others, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modifier to each `char` type emitted to an assembly.</span></span>  
  
 <span data-ttu-id="9b742-105">编译器发出元数据，以更改默认行为不恰当时，会在实时 (JIT) 编译器处理值的方式中的自定义修饰符。</span><span class="sxs-lookup"><span data-stu-id="9b742-105">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="9b742-106">当 JIT 编译器遇到了一个自定义修饰符时，它将处理修饰符指定的方法中的值。</span><span class="sxs-lookup"><span data-stu-id="9b742-106">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="9b742-107">编译器可以将自定义修饰符应用于方法、 参数和返回值。</span><span class="sxs-lookup"><span data-stu-id="9b742-107">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="9b742-108">JIT 编译器必须响应所需修饰符，但可以忽略可选修饰符。</span><span class="sxs-lookup"><span data-stu-id="9b742-108">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="9b742-109">可以将自定义修饰符发出到元数据中使用以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="9b742-109">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="9b742-110">使用中的方法<xref:System.Reflection.Emit.TypeBuilder>类如<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>，和<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="9b742-110">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="9b742-111">生成包含对的调用的 Microsoft 中间语言 (MSIL) 指令文件`modopt`和`modreq`，再将包含的文件内容组合[Ilasm.exe （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="9b742-111">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="9b742-112">使用非托管的反射 API。</span><span class="sxs-lookup"><span data-stu-id="9b742-112">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9b742-113">下面的代码示例创建一个使用中的类的程序集<xref:System.Reflection.Emit>命名空间，并发出<xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte>到该程序集的修饰符。</span><span class="sxs-lookup"><span data-stu-id="9b742-113">The following code example creates an assembly using classes in the <xref:System.Reflection.Emit> namespace and emits the <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modifier into that assembly.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsSignUnspecifiedByte#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsSignUnspecifiedByte/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>