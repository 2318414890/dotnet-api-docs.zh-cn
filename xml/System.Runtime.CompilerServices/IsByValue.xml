<Type Name="IsByValue" FullName="System.Runtime.CompilerServices.IsByValue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="836dd4c340c3970457a021d45f72f180eda5d19c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58715366" /></Metadata><TypeSignature Language="C#" Value="public static class IsByValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsByValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsByValue" />
  <TypeSignature Language="VB.NET" Value="Public Class IsByValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsByValue abstract sealed" />
  <TypeSignature Language="F#" Value="type IsByValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指示修饰的方法参数应解释为具有按值传递对象的语义。 此修饰应用于引用类型。  此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.CompilerServices.IsByValue> Microsoft c + + 编译器使用类来表示方法参数和返回的值的语义遵循通过值传递的对象的 c + + 规则。  
  
 编译器发出元数据更改，在实时 (JIT) 编译器处理值时的默认行为是不适当的方式中的自定义修饰符。  当 JIT 编译器遇到了一个自定义修饰符时，它处理修饰符指定的方法中的值。  编译器可以将自定义修饰符应用于方法、 参数和返回值。  JIT 编译器必须响应所需的修饰符，但可以忽略可选的修饰符。  
  
 可以将自定义修饰符发出到元数据中使用以下方法之一：  
  
-   使用中的方法<xref:System.Reflection.Emit.TypeBuilder>如类<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>，和<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。  
  
-   生成包含对的调用的 Microsoft 中间语言 (MSIL) 指令文件`modopt`和`modreq`，并组合成与文件[Ilasm.exe （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。  
  
-   使用非托管的反射 API。  
  
   
  
## Examples  
 下面的示例演示如何发出<xref:System.Runtime.CompilerServices.IsByValue>使用反射的程序集的对象。  
  
 [!code-cpp[Runtime.CompilerServices.IsByValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsByValue/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>