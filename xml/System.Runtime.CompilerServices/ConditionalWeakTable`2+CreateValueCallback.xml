<Type Name="ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback" FullName="System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="94ea36697a8e113a3652a0675c376bce0ad22894" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30476831" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TValue ConditionalWeakTable&lt;TKey,TValue&gt;.CreateValueCallback(TKey key) where TKey : class where TValue : class;" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed ConditionalWeakTable`2/CreateValueCallback&lt;class TKey, class TValue&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function ConditionalWeakTable(Of TKey, TValue).CreateValueCallback(key As TKey) As TValue " />
  <TypeSignature Language="C++ CLI" Value="public:  where TKey : class where TValue : classdelegate TValue ConditionalWeakTable&lt;TKey, TValue&gt;::CreateValueCallback(TKey key);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TValue">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="key" Type="TKey" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TValue</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="key">属于要创建的值的键。</param>
    <summary>表示一种方法，用于创建作为键/值对的一部分添加到 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 对象的非默认值。</summary>
    <returns>一个引用类型的实例，该类型表示要附加到指定键的值。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback>委托封装由调用的回调方法<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A?displayProperty=nameWithType>中找不到密钥传递给方法的方法<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>对象。 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>方法通过回调方法键，表示为动态附加属性值的托管的对象。 方法负责返回其调用方，这反过来将键/值对添加到表的属性值。  
  
 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback>方法用于返回引用类型可以附加到指定的键的实例。 它使该实例使用非默认值初始化。 如果在表中，找不到键<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A?displayProperty=nameWithType>方法将添加在其中使用默认值初始化值的键/值对。  
  
   
  
## Examples  
 下面的示例定义`MainClass`类和一个`MainInfo`类。 `MainInfo` 相关信息提供`MainClass`实例。 它还定义一个静态 (`Shared`在 Visual Basic 中)`CreateAttachedValue`方法可以分配给<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback>委派并传递给<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>方法。 该示例通过调用<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>方法将添加`MainClass`对象和其对应`MainInfo`对象传递给<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602>表。 该示例还演示如何调用<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>和<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>方法将键/值对添加到表，并调用<xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A>方法来检索属于现有密钥的值。  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)" />
  </Docs>
</Type>