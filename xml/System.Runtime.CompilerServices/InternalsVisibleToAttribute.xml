<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="InternalsVisibleToAttribute.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac572f45e174f70fa5053339a1308aae4feae8b8626.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">72f45e174f70fa5053339a1308aae4feae8b8626</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.</source>
          <target state="translated">指定通常仅在当前程序集中可见的类型对指定程序集可见。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Ordinarily, types and members with <ph id="ph1">`internal`</ph> scope (in C#) and <ph id="ph2">`friend`</ph> scope (in Visual Basic) are visible only in the assembly in which they are defined.</source>
          <target state="translated">通常，类型和成员， <ph id="ph1">`internal`</ph> （在 C# 中) 的作用域和<ph id="ph2">`friend`</ph>（在 Visual Basic) 的作用域是仅在程序集在其中定义中可见。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute makes them also visible to the types in a specified assembly, which is known as a friend assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph>属性会使它们也可见的类型中指定的程序集，这被称为友元程序集。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The attribute is applied at the assembly level.</source>
          <target state="translated">程序集级别应用特性。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>This means that it can be included at the beginning of a source code file, or it can be included in the AssemblyInfo file in a Visual Studio project.</source>
          <target state="translated">这意味着可以在源代码文件中，开始包含它，或者它可以包含在 Visual Studio 项目中的 AssemblyInfo 文件。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>You can use the attribute to specify a single friend assembly that can access the internal types and members of the current assembly.</source>
          <target state="translated">该属性可用于指定可以访问的内部类型和成员的当前程序集的单个友元程序集。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>You can define multiple friend assemblies in two ways.</source>
          <target state="translated">你可以通过两种方式来定义多个友元程序集。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>They can appear as individual assembly-level attributes, as the following example illustrates.</source>
          <target state="translated">如下面的示例所示，它们可以显示为单独的程序集级别属性。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>They can also appear with separate <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> tags but a single <ph id="ph2">`assembly`</ph> keyword, as the following example illustrates.</source>
          <target state="translated">它们还会显示为单独<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph>标记但单个<ph id="ph2">`assembly`</ph>关键字，如下面的示例演示。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The friend assembly is identified by the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">友元程序集由<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Both the current assembly and the friend assembly must be unsigned, or both assemblies must be signed with a strong name.</source>
          <target state="translated">当前程序集和友元程序集必须是无符号整数，或两个程序集必须用强名称签名。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>If both assemblies are unsigned, the <ph id="ph1">`assemblyName`</ph> argument consists of the name of the friend assembly, specified without a directory path or file name extension.</source>
          <target state="translated">如果两个程序集是无符号整数，<ph id="ph1">`assemblyName`</ph>自变量包含友元程序集，指定不带目录路径或文件扩展名的名称。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>If both assemblies are signed with a strong name, the argument to the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor must consist of the name of the assembly without its directory path or file name extension, along with the full public key (and not its public key token).</source>
          <target state="translated">如果两个程序集签名用强名称，参数<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph>构造函数必须包含的程序集不包含其目录路径或文件扩展名，以及完整的公钥 （和不其公钥标记） 的名称。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>To get the full public key of a strong-named assembly, see the <bpt id="p1">[</bpt>Getting the full public key<ept id="p1">](#Key)</ept> section later in this article.</source>
          <target state="translated">若要获取完整的公钥的具有强名称程序集，请参阅<bpt id="p1">[</bpt>获取完全公共密钥<ept id="p1">](#Key)</ept>本文后面的部分。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> with strong-named assemblies, see the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">有关使用<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph>具有强名称程序集，请参阅<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Do not include values for the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A&gt;</ph> field in the argument; the Visual Basic, C#, and C++ compilers treat this as a compiler error.</source>
          <target state="translated">不包括值<ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>，或<ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A&gt;</ph>字段 in 自变量; Visual Basic、 C# 和 c + + 编译器将此视为编译器错误。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>If you use a compiler that does not treat it as an error (such as the <bpt id="p1">[</bpt>IL Assembler (ILAsm.exe)<ept id="p1">](~/docs/framework/tools/ilasm-exe-il-assembler.md)</ept>) and the assemblies are strong-named, a <ph id="ph1">&lt;xref:System.MethodAccessException&gt;</ph> exception is thrown the first time the specified friend assembly accesses the assembly that contains the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute.</source>
          <target state="translated">如果你使用不将其视为错误的编译器 (如<bpt id="p1">[</bpt>IL 汇编程序 (ILAsm.exe)<ept id="p1">](~/docs/framework/tools/ilasm-exe-il-assembler.md)</ept>) 并且程序集具有强名称<ph id="ph1">&lt;xref:System.MethodAccessException&gt;</ph>引发第一次指定的友元程序集访问异常。包含程序集<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>For more information about how to use this attribute, see the following topics:</source>
          <target state="translated">有关如何使用此属性的详细信息，请参阅以下主题：</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source><bpt id="p1">[</bpt>Friend Assemblies (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>友元程序集 (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source><bpt id="p1">[</bpt>Friend Assemblies<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>友元程序集<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Getting the full public key</source>
          <target state="translated">获取完整的公钥</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>You can use the <bpt id="p1">[</bpt>Strong Name Tool (Sn.exe)<ept id="p1">](~/docs/framework/tools/sn-exe-strong-name-tool.md)</ept> to retrieve the full public key from a strong-named key (.snk) file.</source>
          <target state="translated">你可以使用<bpt id="p1">[</bpt>强名称工具 (Sn.exe)<ept id="p1">](~/docs/framework/tools/sn-exe-strong-name-tool.md)</ept>从一个具有强名称密钥 (.snk) 文件中检索完整的公钥。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>To do this, you perform the following steps:</source>
          <target state="translated">若要执行此操作，你可以执行以下步骤：</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Extract the public key from the strong-named key file to a separate file:</source>
          <target state="translated">从具有强名称密钥文件提取公钥，到单独的文件：</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source><bpt id="p1">**</bpt>Sn -p<ept id="p1">**</ept>  <bpt id="p2">*</bpt>snk_file<ept id="p2">*</ept> <bpt id="p3">*</bpt>outfile<ept id="p3">*</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Sn -p<ept id="p1">**</ept>  <bpt id="p2">*</bpt>snk_file<ept id="p2">*</ept> <bpt id="p3">*</bpt>outfile<ept id="p3">*</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Display the full public key to the console:</source>
          <target state="translated">向控制台显示完整的公钥：</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source><bpt id="p1">**</bpt>Sn -tp<ept id="p1">**</ept>  <bpt id="p2">*</bpt>outfile<ept id="p2">*</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Sn tp<ept id="p1">**</ept><bpt id="p2">*</bpt>outfile<ept id="p2">*</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Copy and paste the full public key value into your source code.</source>
          <target state="translated">复制并粘贴到你的源代码的完整公钥值。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Compiling the friend assembly with C#</source>
          <target state="translated">编译 C# 为友元程序集</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler option.</source>
          <target state="translated">如果你使用 C# 编译器编译友元程序集，必须通过使用显式指定输出文件 （.exe 或.dll） 的名称<bpt id="p1">**</bpt>/out<ept id="p1">**</ept>编译器选项。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.</source>
          <target state="translated">这是必需的，因为编译器尚未为它在绑定到外部引用时而正在构建的程序集生成名称。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler option is optional for the Visual Basic compiler, and the corresponding <bpt id="p2">**</bpt>-out<ept id="p2">**</ept> or <bpt id="p3">**</bpt>-o<ept id="p3">**</ept> compiler option should not be used when compiling friend assemblies with the F# compiler.</source>
          <target state="translated"><bpt id="p1">**</bpt>/Out<ept id="p1">**</ept>编译器选项是可选的 Visual Basic 编译器，和相应<bpt id="p2">**</bpt>-出<ept id="p2">**</ept>或<bpt id="p3">**</bpt>-o<ept id="p3">**</ept>编译友元时，不应使用编译器选项用 F # 编译器的程序集。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Compiling the friend assembly with C++</source>
          <target state="translated">编译 c + + 为友元程序集</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>In C++, in order to make the internal members enabled by the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute accessible to a friend assembly, you must use the <ph id="ph2">`as_friend`</ph> attribute in the C++  directive.</source>
          <target state="translated">在 c + +，以便由启用的内部成员<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph>属性供友元程序集，则必须使用<ph id="ph2">`as_friend`</ph>在 c + + 指令中的属性。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>For more information, see <bpt id="p1">[</bpt>Friend Assemblies (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>友元程序集 （c + +）<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source><bpt id="p1">**</bpt>Signed assemblies<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>签名的程序集<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute to make an <ph id="ph2">`internal`</ph> method named <ph id="ph3">`AppendDirectorySeparator`</ph> in a signed assembly visible to another signed assembly.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph>特性使<ph id="ph2">`internal`</ph>方法名为<ph id="ph3">`AppendDirectorySeparator`</ph>中签名的程序集对另一个有符号的程序集可见。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>It defines a <ph id="ph1">`FileUtilities`</ph> class that includes an internal <ph id="ph2">`AppendDirectorySeparator`</ph> method.</source>
          <target state="translated">它定义<ph id="ph1">`FileUtilities`</ph>包括内部的类<ph id="ph2">`AppendDirectorySeparator`</ph>方法。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute is applied to the assembly that contains the <ph id="ph2">`FileUtilities`</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph>属性应用于包含的程序集<ph id="ph2">`FileUtilities`</ph>类。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The attribute allows an assembly named <ph id="ph1">`Friend1`</ph> to access this internal member.</source>
          <target state="translated">属性允许程序集名为<ph id="ph1">`Friend1`</ph>访问此内部成员。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>If the following example is compiled into a strong-named assembly named <ph id="ph1">`Friend1`</ph>, the <ph id="ph2">`Example.Main`</ph> method in <ph id="ph3">`Friend1`</ph> can successfully call the <ph id="ph4">`FileUtilities.AppendDirectorySeparator`</ph> method, although the method is internal to the <ph id="ph5">`Assembly1`</ph> assembly.</source>
          <target state="translated">如果将下面的示例编译到名为的具有强名称程序集<ph id="ph1">`Friend1`</ph>、<ph id="ph2">`Example.Main`</ph>中的方法<ph id="ph3">`Friend1`</ph>可以成功调用<ph id="ph4">`FileUtilities.AppendDirectorySeparator`</ph>方法，尽管该方法是内部<ph id="ph5">`Assembly1`</ph>程序集。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Note that if you are compiling in C# from the command line, you must use the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</source>
          <target state="translated">请注意，是否您正在从命令行编译 C# 中，你必须使用<bpt id="p1">**</bpt>/out<ept id="p1">**</ept>编译器开关，以确保友元程序集的名称可用时编译器将绑定到外部引用。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source><bpt id="p1">**</bpt>Unsigned assemblies<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>无符号的程序集<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute to make an <ph id="ph2">`internal`</ph> member of an unsigned assembly visible to another unsigned assembly.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph>特性使<ph id="ph2">`internal`</ph>签名的程序集可见到另一个的成员未签名的程序集。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The attribute ensures that the <ph id="ph1">`internal`</ph> <ph id="ph2">`StringLib.IsFirstLetterUpperCase`</ph> method in an assembly named <ph id="ph3">`UtilityLib`</ph> is visible to the code in an assembly named <ph id="ph4">`Friend2`</ph>.</source>
          <target state="translated">该属性可确保<ph id="ph1">`internal`</ph><ph id="ph2">`StringLib.IsFirstLetterUpperCase`</ph>方法的程序集中名为<ph id="ph3">`UtilityLib`</ph>中名为程序集的代码对可见<ph id="ph4">`Friend2`</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The following is the source code for UtilityLib.dll:</source>
          <target state="translated">下面是 UtilityLib.dll 的源代码：</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The following example provides the source code for the <ph id="ph1">`Friend2`</ph> assembly.</source>
          <target state="translated">下面的示例提供的源代码<ph id="ph1">`Friend2`</ph>程序集。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Note that if you are compiling in C# from the command line, you must use the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</source>
          <target state="translated">请注意，是否您正在从命令行编译 C# 中，你必须使用<bpt id="p1">**</bpt>/out<ept id="p1">**</ept>编译器开关，以确保友元程序集的名称可用时编译器将绑定到外部引用。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The name of a friend assembly.</source>
          <target state="translated">友元程序集的名称。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /&gt;</ph> class with the name of the specified friend assembly.</source>
          <target state="translated">用指定的友元程序集的名称初始化 <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor defines a friend assembly, which is an assembly that has access to the internal types and members of the current assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph>构造函数定义友元程序集，它是有权访问的内部类型和成员当前程序集的程序集。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Both the current assembly and the friend assembly must be unsigned, or both must be signed with a strong name.</source>
          <target state="translated">当前程序集和友元程序集必须是无符号整数，或两者都必须用强名称签名。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>(For more information about strong-named assemblies, see <bpt id="p1">[</bpt>Creating and Using Strong-Named Assemblies<ept id="p1">](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md)</ept>.) If both are unsigned, the <ph id="ph1">`assemblyName`</ph> argument consists of the name of the friend assembly, specified without a directory path or file extension.</source>
          <target state="translated">(有关强名称的程序集的详细信息，请参阅<bpt id="p1">[</bpt>创建和使用具有强名称程序集<ept id="p1">](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md)</ept>。)如果两者都无符号整数，<ph id="ph1">`assemblyName`</ph>自变量包含友元程序集，指定不带目录路径或文件扩展名的名称。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>If both are signed, <ph id="ph1">`assemblyName`</ph> consists of the name of the friend assembly without its directory path or file name extension, along with its full public key (but not its public key token).</source>
          <target state="translated">如果两个都签名<ph id="ph1">`assemblyName`</ph>包含友元程序集不包含其目录路径或文件扩展名，以及其完整公钥 （但不是其公钥标记） 的名称。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The other components of a strong name, such as those that provide culture, version, or processor architecture information, cannot be specified in the <ph id="ph1">`assemblyName`</ph> argument.</source>
          <target state="translated">不能指定一个强名称，例如那些提供区域性、 版本或处理器体系结构信息的其他组件<ph id="ph1">`assemblyName`</ph>自变量。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler option.</source>
          <target state="translated">如果你使用 C# 编译器编译友元程序集，必须通过使用显式指定输出文件 （.exe 或.dll） 的名称<bpt id="p1">**</bpt>/out<ept id="p1">**</ept>编译器选项。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.</source>
          <target state="translated">这是必需的，因为编译器尚未为它在绑定到外部引用时而正在构建的程序集生成名称。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler option is optional for the Visual Basic compiler, and the corresponding <bpt id="p2">**</bpt>-out<ept id="p2">**</ept> or <bpt id="p3">**</bpt>-o<ept id="p3">**</ept> compiler option should not be used when compiling friend assemblies with the F# compiler.</source>
          <target state="translated"><bpt id="p1">**</bpt>/Out<ept id="p1">**</ept>编译器选项是可选的 Visual Basic 编译器，和相应<bpt id="p2">**</bpt>-出<ept id="p2">**</ept>或<bpt id="p3">**</bpt>-o<ept id="p3">**</ept>编译友元时，不应使用编译器选项用 F # 编译器的程序集。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>You can use <bpt id="p1">[</bpt>Sn.exe (Strong Name Tool)<ept id="p1">](~/docs/framework/tools/sn-exe-strong-name-tool.md)</ept> to retrieve the full public key from a strong-named key (.snk) file.</source>
          <target state="translated">你可以使用<bpt id="p1">[</bpt>Sn.exe （强名称工具）<ept id="p1">](~/docs/framework/tools/sn-exe-strong-name-tool.md)</ept>从一个具有强名称密钥 (.snk) 文件中检索完整的公钥。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>To do this, you perform the following steps:</source>
          <target state="translated">若要执行此操作，你可以执行以下步骤：</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Extract the public key from the strong-named key file to a separate file:</source>
          <target state="translated">从具有强名称密钥文件提取公钥，到单独的文件：</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source><bpt id="p1">**</bpt>Sn -p<ept id="p1">**</ept>  <bpt id="p2">*</bpt>snk_file<ept id="p2">*</ept> <bpt id="p3">*</bpt>outfile<ept id="p3">*</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Sn -p<ept id="p1">**</ept>  <bpt id="p2">*</bpt>snk_file<ept id="p2">*</ept> <bpt id="p3">*</bpt>outfile<ept id="p3">*</ept></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Display the full public key to the console:</source>
          <target state="translated">向控制台显示完整的公钥：</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source><bpt id="p1">**</bpt>Sn -tp<ept id="p1">**</ept>  <bpt id="p2">*</bpt>outfile<ept id="p2">*</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Sn tp<ept id="p1">**</ept><bpt id="p2">*</bpt>outfile<ept id="p2">*</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Copy and paste the full public key value into your source code.</source>
          <target state="translated">复制并粘贴到你的源代码的完整公钥值。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>For more information about how to use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute, see the following topics:</source>
          <target state="translated">有关如何使用<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph>属性，请参阅以下主题：</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source><bpt id="p1">[</bpt>Friend Assemblies (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>友元程序集 (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source><bpt id="p1">[</bpt>Friend Assemblies<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>友元程序集<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source><bpt id="p1">**</bpt>Signed assemblies<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>签名的程序集<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute to make an <ph id="ph2">`internal`</ph> method named <ph id="ph3">`AppendDirectorySeparator`</ph> in a signed assembly visible to another signed assembly.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph>特性使<ph id="ph2">`internal`</ph>方法名为<ph id="ph3">`AppendDirectorySeparator`</ph>中签名的程序集对另一个有符号的程序集可见。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>It defines a <ph id="ph1">`FileUtilities`</ph> class that includes an internal <ph id="ph2">`AppendDirectorySeparator`</ph> method.</source>
          <target state="translated">它定义<ph id="ph1">`FileUtilities`</ph>包括内部的类<ph id="ph2">`AppendDirectorySeparator`</ph>方法。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute is applied to the assembly that contains the <ph id="ph2">`FileUtilities`</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph>属性应用于包含的程序集<ph id="ph2">`FileUtilities`</ph>类。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The attribute allows an assembly named <ph id="ph1">`Friend1`</ph> to access this internal member.</source>
          <target state="translated">属性允许程序集名为<ph id="ph1">`Friend1`</ph>访问此内部成员。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>If the following example is compiled into a strong-named assembly named <ph id="ph1">`Friend1`</ph>, it can successfully call the <ph id="ph2">`FileUtilities.AppendDirectorySeparator`</ph> method, even though the method is internal to the <ph id="ph3">`Assembly1`</ph> assembly.</source>
          <target state="translated">如果将下面的示例编译到名为的具有强名称程序集<ph id="ph1">`Friend1`</ph>，它可以成功调用<ph id="ph2">`FileUtilities.AppendDirectorySeparator`</ph>方法，即使该方法是内部<ph id="ph3">`Assembly1`</ph>程序集。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Note that if you are compiling in C# from the command line, you must use the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</source>
          <target state="translated">请注意，是否您正在从命令行编译 C# 中，你必须使用<bpt id="p1">**</bpt>/out<ept id="p1">**</ept>编译器开关，以确保友元程序集的名称可用时编译器将绑定到外部引用。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute to make an <ph id="ph2">`internal`</ph> member of an unsigned assembly visible to another unsigned assembly.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph>特性使<ph id="ph2">`internal`</ph>签名的程序集可见到另一个的成员未签名的程序集。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The attribute ensures that the <ph id="ph1">`internal`</ph> <ph id="ph2">`StringLib.IsFirstLetterUpperCase`</ph> method in an assembly named <ph id="ph3">`UtilityLib`</ph> is visible to the code in an assembly named <ph id="ph4">`Friend2`</ph>.</source>
          <target state="translated">该属性可确保<ph id="ph1">`internal`</ph><ph id="ph2">`StringLib.IsFirstLetterUpperCase`</ph>方法的程序集中名为<ph id="ph3">`UtilityLib`</ph>中名为程序集的代码对可见<ph id="ph4">`Friend2`</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The following is the source code for UtilityLib.dll:</source>
          <target state="translated">下面是 UtilityLib.dll 的源代码：</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source><bpt id="p1">**</bpt>Unsigned assemblies<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>无符号的程序集<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The following example provides the source code for the <ph id="ph1">`Friend2`</ph> assembly.</source>
          <target state="translated">下面的示例提供的源代码<ph id="ph1">`Friend2`</ph>程序集。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Note that if you are compiling in C# from the command line, you must use the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</source>
          <target state="translated">请注意，是否您正在从命令行编译 C# 中，你必须使用<bpt id="p1">**</bpt>/out<ept id="p1">**</ept>编译器开关，以确保友元程序集的名称可用时编译器将绑定到外部引用。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible">
          <source>This property is not implemented.</source>
          <target state="translated">不实现此属性。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible">
          <source>This property does not return a value.</source>
          <target state="translated">此属性不返回值。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
          <source>Gets the name of the friend assembly to which all types and type members that are marked with the <ph id="ph1">&lt;see langword="internal" /&gt;</ph> keyword are to be made visible.</source>
          <target state="translated">获取友元程序集的名称，采用 <ph id="ph1">&lt;see langword="internal" /&gt;</ph> 关键字标记的所有类型和类型成员对该程序集均为可见。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
          <source>A string that represents the name of the friend assembly.</source>
          <target state="translated">一个表示友元程序集名称的字符串。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
          <source>For more information about how to use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute, see the following topics:</source>
          <target state="translated">有关如何使用<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph>属性，请参阅以下主题：</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
          <source><bpt id="p1">[</bpt>Friend Assemblies (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>友元程序集 (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
          <source><bpt id="p1">[</bpt>Friend Assemblies<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>友元程序集<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>