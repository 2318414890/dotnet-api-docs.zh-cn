<Type Name="InternalsVisibleToAttribute" FullName="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fce3c411e3d6daf4320db60d4d1e2a5898d7ff9d" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51903029" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class InternalsVisibleToAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InternalsVisibleToAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InternalsVisibleToAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class InternalsVisibleToAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type InternalsVisibleToAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定通常仅在当前程序集中可见的类型对指定程序集可见。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，类型和成员`internal`（在 C# 中) 的作用域和`friend`作用域 （在 Visual Basic 中) 是仅在定义它们的程序集可见。 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>属性使它们还的可见类型中指定的程序集，这被称为友元程序集。  
  
 程序集级别应用属性。 这意味着它可以是包含源代码文件中，开始时，或者它可以包含在 Visual Studio 项目中的 AssemblyInfo 文件。 该属性可用于指定可以访问的内部类型和成员的当前程序集的单个友元程序集。 可以通过两种方式来定义多个友元程序集。 它们可以显示作为单个程序集级别属性，如以下示例所示。  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)]  
  
 它们还可以显示使用单独<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>标记，但单个`assembly`关键字，如下面的示例说明了。  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)]  
  
 友元程序集由<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A>构造函数。 当前程序集和友元程序集都必须是无符号整数，或两个程序集必须使用强名称签名。  
  
 如果两个程序集是无符号整数，`assemblyName`参数包含的友元程序集，而无需的目录路径或文件名称扩展指定的名称。  
  
 如果两个程序集签名用强名称，为参数<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A>构造函数必须包含不带其目录路径或文件扩展名，以及完整的公钥 （和不的公钥标记） 程序集的名称。 若要获取完整公钥的强名称程序集，请参阅[获取完整公钥](#Key)本文后面的部分。 有关使用详细信息<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>使用强名称程序集，请参阅<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A>构造函数。  
  
 不包括值<xref:System.Reflection.AssemblyName.CultureInfo%2A>， <xref:System.Reflection.AssemblyName.Version%2A>，或<xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A>参数中的字段; Visual Basic、 C# 和 c + + 编译器将此视为编译器错误。 如果你使用不会将它视为错误的编译器 (如[IL 汇编程序 (ILAsm.exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) 和这些程序集进行强命名<xref:System.MethodAccessException>引发第一次指定的友元程序集访问异常。包含程序集<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>属性。  
  
 有关如何使用此属性的详细信息，请参阅以下主题：  
  
-   [友元程序集 (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [友元程序集](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
<a name="Key"></a>   
## <a name="getting-the-full-public-key"></a>获取完整公钥  
 可以使用[强名称工具 (Sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md)从强名称密钥 (.snk) 文件中检索完整的公钥。 若要执行此操作，您执行以下步骤：  
  
1.  从强名称密钥文件中的公钥提取到单独的文件：  
  
     **Sn-p***snk_file* *outfile*   
  
2.  向控制台显示完整的公钥：  
  
     **Sn-tp***outfile*  
  
3.  复制并粘贴到你的源代码的完整公钥值。  
  
## <a name="compiling-the-friend-assembly-with-c"></a>编译使用 C# 的友元程序集  
 如果您使用 C# 编译器来编译友元程序集，必须使用显式指定输出文件 （.exe 或.dll） 的名称 **/out**编译器选项。 这是必需的，因为编译器尚未为它在绑定到外部引用时而正在构建的程序集生成名称。 **/Out**编译器选项是可选的 Visual Basic 编译器和相应 **-out**或 **-o**编译友元时，不应使用编译器选项具有程序集F#编译器。  
  
## <a name="compiling-the-friend-assembly-with-c"></a>编译使用 c + + 的友元程序集  
 在 c + +，以使情况下启用的内部成员<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>属性的友元程序集可以访问，则必须使用`as_friend`c + + 指令中的属性。 有关详细信息，请参阅[友元程序集 （c + +）](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)。  
  
   
  
## Examples  
 **签名的程序集**  
  
 下面的示例使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>特性，以使`internal`方法名为`AppendDirectorySeparator`中签名的程序集对另一个已签名的程序集可见。 它定义`FileUtilities`类，其中包括内部`AppendDirectorySeparator`方法。 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>特性应用于包含的程序集`FileUtilities`类。 该属性允许程序集名为`Friend1`访问该内部成员。  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 如果将下面的示例编译到名为的强名称程序集`Friend1`，则`Example.Main`中的方法`Friend1`可成功调用`FileUtilities.AppendDirectorySeparator`方法，尽管该方法的内部`Assembly1`程序集。 请注意，是否要从命令行编译 C# 中，则必须使用 **/out**编译器开关，以确保友元程序集的名称可用时，编译器将绑定到外部引用。  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 **未签名程序集**  
  
 下面的示例使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>特性，以使`internal`未签名的程序集到另一个可见的成员未签名的程序集。 该属性可确保`internal``StringLib.IsFirstLetterUpperCase`中名为程序集的方法`UtilityLib`是对中名为程序集的代码可见`Friend2`。  以下是 UtilityLib.dll 的源代码：  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 下面的示例提供的源代码`Friend2`程序集。 请注意，是否要从命令行编译 C# 中，则必须使用 **/out**编译器开关，以确保友元程序集的名称可用时，编译器将绑定到外部引用。  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalsVisibleToAttribute (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InternalsVisibleToAttribute(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.CompilerServices.InternalsVisibleToAttribute : string -&gt; System.Runtime.CompilerServices.InternalsVisibleToAttribute" Usage="new System.Runtime.CompilerServices.InternalsVisibleToAttribute assemblyName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">友元程序集的名称。</param>
        <summary>用指定的友元程序集的名称初始化 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A>构造函数定义友元程序集，即有权访问的内部类型和成员的当前程序集的程序集。  
  
 当前程序集和友元程序集都必须是无符号整数，或两者都必须用强名称签名。 (有关强名称的程序集的详细信息，请参阅[创建和使用具有强名称程序集](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md)。)如果两者都是无符号整数，`assemblyName`参数包含的友元程序集，而无需的目录路径或文件扩展指定的名称。 如果两个都签名`assemblyName`包含不带其目录路径或文件扩展名，以及其完整公钥 （但不是的公钥标记） 的友元程序集的名称。 不能指定一个强名称，例如那些提供区域性、 版本或处理器体系结构信息的其他组件`assemblyName`参数。  
  
> [!IMPORTANT]
>  如果您使用 C# 编译器来编译友元程序集，必须使用显式指定输出文件 （.exe 或.dll） 的名称 **/out**编译器选项。 这是必需的，因为编译器尚未为它在绑定到外部引用时而正在构建的程序集生成名称。 **/Out**编译器选项是可选的 Visual Basic 编译器和相应 **-out**或 **-o**编译友元时，不应使用编译器选项具有程序集F#编译器。  
  
 可以使用[Sn.exe （强名称工具）](~/docs/framework/tools/sn-exe-strong-name-tool.md)从强名称密钥 (.snk) 文件中检索完整的公钥。 若要执行此操作，您执行以下步骤：  
  
1.  从强名称密钥文件中的公钥提取到单独的文件：  
  
     **Sn-p***snk_file* *outfile*   
  
2.  向控制台显示完整的公钥：  
  
     **Sn-tp***outfile*  
  
3.  复制并粘贴到你的源代码的完整公钥值。  
  
 详细了解如何使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>属性，请参阅以下主题：  
  
-   [友元程序集 (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [友元程序集](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
   
  
## Examples  
 **签名的程序集**  
  
 下面的示例使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>特性，以使`internal`方法名为`AppendDirectorySeparator`中签名的程序集对另一个已签名的程序集可见。 它定义`FileUtilities`类，其中包括内部`AppendDirectorySeparator`方法。 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>特性应用于包含的程序集`FileUtilities`类。 该属性允许程序集名为`Friend1`访问该内部成员。  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 如果将下面的示例编译到名为的强名称程序集`Friend1`，它可以成功调用`FileUtilities.AppendDirectorySeparator`方法，即使该方法是内部`Assembly1`程序集。 请注意，是否要从命令行编译 C# 中，则必须使用 **/out**编译器开关，以确保友元程序集的名称可用时，编译器将绑定到外部引用。  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 下面的示例使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>特性，以使`internal`未签名的程序集到另一个可见的成员未签名的程序集。 该属性可确保`internal``StringLib.IsFirstLetterUpperCase`中名为程序集的方法`UtilityLib`是对中名为程序集的代码可见`Friend2`。  以下是 UtilityLib.dll 的源代码：  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 **未签名程序集**  
  
 下面的示例提供的源代码`Friend2`程序集。 请注意，是否要从命令行编译 C# 中，则必须使用 **/out**编译器开关，以确保友元程序集的名称可用时，编译器将绑定到外部引用。  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllInternalsVisible">
      <MemberSignature Language="C#" Value="public bool AllInternalsVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllInternalsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property AllInternalsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllInternalsVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllInternalsVisible : bool with get, set" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>不实现此属性。</summary>
        <value>此属性不返回值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public string AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyName : string" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取友元程序集的名称，采用 <see langword="internal" /> 关键字标记的所有类型和类型成员对该程序集均为可见。</summary>
        <value>一个表示友元程序集名称的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 详细了解如何使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>属性，请参阅以下主题：  
  
-   [友元程序集 (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [友元程序集](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>