<Type Name="CallConvFastcall" FullName="System.Runtime.CompilerServices.CallConvFastcall">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b8fe3caac49f37e47f7d6d0ca5e4d0cf96bdd768" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37472325" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CallConvFastcall" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CallConvFastcall extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.CallConvFastcall" />
  <TypeSignature Language="VB.NET" Value="Public Class CallConvFastcall" />
  <TypeSignature Language="C++ CLI" Value="public ref class CallConvFastcall" />
  <TypeSignature Language="F#" Value="type CallConvFastcall = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9f7ed-101">此版本的 .NET Framework 不支持该调用约定。</span>
      <span class="sxs-lookup">
        <span data-stu-id="9f7ed-101">This calling convention is not supported in this version of the .NET Framework.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f7ed-102">`__fastcall`调用约定指定函数的参数将传入寄存器，在可能的情况。</span><span class="sxs-lookup"><span data-stu-id="9f7ed-102">The `__fastcall` calling convention specifies that arguments to functions be passed in registers, when possible.</span></span>  
  
 <span data-ttu-id="9f7ed-103">中的类<xref:System.Runtime.CompilerServices>仅用于编译器编写器。</span><span class="sxs-lookup"><span data-stu-id="9f7ed-103">The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.</span></span>  
  
 <span data-ttu-id="9f7ed-104">编译器发出元数据更改，在实时 (JIT) 编译器处理值时的默认行为是不适当的方式中的自定义修饰符。</span><span class="sxs-lookup"><span data-stu-id="9f7ed-104">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="9f7ed-105">当 JIT 编译器遇到了一个自定义修饰符时，它处理修饰符指定的方法中的值。</span><span class="sxs-lookup"><span data-stu-id="9f7ed-105">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="9f7ed-106">编译器可以将自定义修饰符应用于方法、 参数和返回值。</span><span class="sxs-lookup"><span data-stu-id="9f7ed-106">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="9f7ed-107">JIT 编译器必须响应所需的修饰符，但可以忽略可选的修饰符。</span><span class="sxs-lookup"><span data-stu-id="9f7ed-107">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  <span data-ttu-id="9f7ed-108">C + + 编译器可以发出自定义修饰符，用于描述一个字节应如何处理情况 JIT 编译器与 c + + 不兼容的方式处理字节中默认情况下。</span><span class="sxs-lookup"><span data-stu-id="9f7ed-108">A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in manner that is not compatible with C++ by default.</span></span>  
  
 <span data-ttu-id="9f7ed-109">可以将自定义修饰符发出到元数据中使用以下方法之一：</span><span class="sxs-lookup"><span data-stu-id="9f7ed-109">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="9f7ed-110">使用中的方法<xref:System.Reflection.Emit.TypeBuilder>等类<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>，和<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f7ed-110">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class like <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="9f7ed-111">生成包含对的调用的 Microsoft 中间语言 (MSIL) 指令文件`modopt`和`modreq`，并组合成与文件[Ilasm.exe （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="9f7ed-111">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="9f7ed-112">使用非托管的反射 API。</span><span class="sxs-lookup"><span data-stu-id="9f7ed-112">Using the unmanaged reflection API.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CallConvFastcall ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.CallConvFastcall.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CallConvFastcall();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9f7ed-113">初始化 <see cref="T:System.Runtime.CompilerServices.CallConvFastcall" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f7ed-113">Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallConvFastcall" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f7ed-114">中的类<xref:System.Runtime.CompilerServices>仅用于编译器编写器。</span><span class="sxs-lookup"><span data-stu-id="9f7ed-114">The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>