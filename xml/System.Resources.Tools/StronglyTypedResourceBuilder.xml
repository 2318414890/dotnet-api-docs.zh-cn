<Type Name="StronglyTypedResourceBuilder" FullName="System.Resources.Tools.StronglyTypedResourceBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="46109d8e811f593f65ac9d7403c4b1aaccec15e6" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39877394" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class StronglyTypedResourceBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StronglyTypedResourceBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.Tools.StronglyTypedResourceBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class StronglyTypedResourceBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class StronglyTypedResourceBuilder abstract sealed" />
  <TypeSignature Language="F#" Value="type StronglyTypedResourceBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为强类型资源提供支持。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，资源分隔代码从应用程序中的内容。 创建和使用这些资源可以更轻松地开发可本地化的应用程序。 在.NET Framework 中，会占用的资源通常通过使用<xref:System.Resources.ResourceManager>类，该类包含在运行时提供特定于区域性的资源的访问权限的方法。 有关创建和使用资源的详细信息，请参阅[桌面应用中的资源](http://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890)。  
  
 强类型的资源的支持是一种编译时功能，通过创建类包含一组静态的只读的封装对资源的访问 (`get`) 属性。 这提供了一种方法来消耗资源，而不是调用<xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType>和<xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType>方法。  
  
 提供强类型化的资源支持的基本功能<xref:System.Resources.Tools.StronglyTypedResourceBuilder>类 (以及`/str`中的命令行选项[Resgen.exe （资源文件生成器）](~/docs/framework/tools/resgen-exe-resource-file-generator.md))。 输出<xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>方法是一个类，包含输入参数中引用的资源相匹配的强类型的属性。 此类提供对在处理的文件中可用的资源的只读访问。  
  
   
  
## Examples  
 下面的示例生成一个名为类`DemoResources`编写 C# 或 Visual Basic 中 （具体取决于该示例的源代码）。 此类是在`DemoApp`命名空间和已返回的一个徽标位图和应用程序的名称的属性。 此示例调用`CreateResourceFile`方法来创建必要的.resw 文件，需要一个名为 Logo.bmp 的位图文件位于该示例的当前目录。 代码示例使用名为 demo.resx 的以下资源文件：  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/example1.cs#1)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/example1.vb#1)]  
  
 应用程序代码然后可以按如下所示使用类：  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/demoresources.cs#2)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/demoresources.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>生成一个类文件，该文件包含与输入参数中所指定的资源相匹配的强类型属性。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">
          <see cref="T:System.Collections.IDictionary" /> 集合，其中每个字典项键/值对都是资源的名称和值。</param>
        <param name="baseName">要生成的类的名称。</param>
        <param name="generatedCodeNamespace">要生成的类的命名空间。</param>
        <param name="codeProvider">一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 类，该类提供生成该类所使用的语言。</param>
        <param name="internalClass">如果为 <see langword="true" />，则生成内部类；如果为 <see langword="false" />，则生成公共类。</param>
        <param name="unmatchable">一个数组，该数组包含无法为其生成属性的每个资源名称。 通常，属性无法生成是因为资源名称不是一个有效的标识符。</param>
        <summary>生成一个类文件，该文件包含与指定集合中所引用的资源相匹配的强类型属性。</summary>
        <returns>一个 <see cref="T:System.CodeDom.CodeCompileUnit" /> 容器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>方法以生成类提供强类型化的只读包装器访问的资源中包含的`resourceList`参数。  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder>类会忽略字符"$"开头的任何资源名称或">>"。 资源名称"Culture"和"ResourceManager"是无效的标识符。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceList" />、<paramref name="basename" /> 或 <paramref name="codeProvider" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">资源节点名称与它在 <paramref name="resourceList" /> 中的密钥不匹配。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">.resx 文件的名称用作输入。</param>
        <param name="baseName">要生成的类的名称。</param>
        <param name="generatedCodeNamespace">要生成的类的命名空间。</param>
        <param name="codeProvider">一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 类，该类提供生成该类所使用的语言。</param>
        <param name="internalClass">如果为 <see langword="true" />，则生成内部类；如果为 <see langword="false" />，则生成公共类。</param>
        <param name="unmatchable">一个 <see cref="T:System.String" /> 数组，该数组包含无法为其生成属性的每个资源名称。 通常，属性无法生成是因为资源名称不是一个有效的标识符。</param>
        <summary>生成一个类文件，该文件包含与指定的 .resx 文件中的资源相匹配的强类型属性。</summary>
        <returns>一个 <see cref="T:System.CodeDom.CodeCompileUnit" /> 容器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>方法以生成类提供对中包含的资源的强类型化的只读访问`resxFile`参数。  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder>类会忽略字符"$"开头的任何资源名称或">>"。 资源名称"Culture"和"ResourceManager"是无效的标识符。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basename" /> 或 <paramref name="codeProvider" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">
          <see cref="T:System.Collections.IDictionary" /> 集合，其中每个字典项键/值对都是资源的名称和值。</param>
        <param name="baseName">要生成的类的名称。</param>
        <param name="generatedCodeNamespace">要生成的类的命名空间。</param>
        <param name="resourcesNamespace">要生成的资源的命名空间。</param>
        <param name="codeProvider">一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 对象，该对象提供生成类所使用的语言。</param>
        <param name="internalClass">如果为 <see langword="true" />，则生成内部类；如果为 <see langword="false" />，则生成公共类。</param>
        <param name="unmatchable">一个 <see cref="T:System.String" /> 数组，该数组包含无法为其生成属性的每个资源名称。 通常，属性无法生成是因为资源名称不是一个有效的标识符。</param>
        <summary>生成一个类文件，该文件包含与指定集合中所引用的资源相匹配的强类型属性。</summary>
        <returns>一个 <see cref="T:System.CodeDom.CodeCompileUnit" /> 容器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载，可使用`resourcesNamespace`参数来指定为生成的资源的命名空间。 在这种情况下，生成的代码如下所示：  
  
```  
System.Resources.ResourceManager rm = new System.Resources.ResourceManager("<resourceNamespace>.<baseName>",typeof(baseName).Assembly);  
```  
  
 在大多数情况下，不需要在应用程序代码中调用此方法。  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder>类会忽略字符"$"开头的任何资源名称或">>"。 资源名称"Culture"和"ResourceManager"是无效的标识符。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceList" />、<paramref name="basename" /> 或 <paramref name="codeProvider" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">资源节点名称与它在 <paramref name="resourceList" /> 中的密钥不匹配。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">.resx 文件的名称用作输入。</param>
        <param name="baseName">要生成的类的名称。</param>
        <param name="generatedCodeNamespace">要生成的类的命名空间。</param>
        <param name="resourcesNamespace">要生成的资源的命名空间。</param>
        <param name="codeProvider">一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 类，该类提供生成该类所使用的语言。</param>
        <param name="internalClass">如果为 <see langword="true" />，则生成内部类；如果为 <see langword="false" />，则生成公共类。</param>
        <param name="unmatchable">一个 <see cref="T:System.String" /> 数组，该数组包含无法为其生成属性的每个资源名称。 通常，属性无法生成是因为资源名称不是一个有效的标识符。</param>
        <summary>生成一个类文件，该文件包含与指定的 .resx 文件中的资源相匹配的强类型属性。</summary>
        <returns>一个 <see cref="T:System.CodeDom.CodeCompileUnit" /> 容器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>方法以生成类提供对中包含的资源的强类型化的只读访问`resxFile`参数。  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder>类会忽略字符"$"开头的任何资源名称或">>"。 资源名称"Culture"和"ResourceManager"是无效的标识符。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basename" /> 或 <paramref name="codeProvider" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyResourceName">
      <MemberSignature Language="C#" Value="public static string VerifyResourceName (string key, System.CodeDom.Compiler.CodeDomProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyResourceName(string key, class System.CodeDom.Compiler.CodeDomProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName(System.String,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyResourceName (key As String, provider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VerifyResourceName(System::String ^ key, System::CodeDom::Compiler::CodeDomProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member VerifyResourceName : string * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName (key, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="provider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="key">待验证的字符串，如有必要，则转换为有效的资源名称。</param>
        <param name="provider">
          <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 对象，它指定将使用的目标语言。</param>
        <summary>根据指定的输入字符串和代码提供程序，生成一个有效的资源字符串。</summary>
        <returns>派生自 <paramref name="key" /> 参数的有效资源名称。 如果根据 <paramref name="provider" /> 参数所指定的语言，派生的字符串仍包含无效字符，所有无效标记都会被下划线 (_) 字符或 <see langword="null" /> 替代。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`key`参数有效的字符串的字符，则返回该字符串。 如果`key`参数是字符串无效或包含无效字符的字符串<xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A>方法将尝试生成基于的有效字符串`key`和`provider`参数。 如果可以生成有效的字符串，返回字符串;否则为`null`返回。  
  
 如果`key`参数为空字符串 ("")，返回单个下划线字符 (_) 所组成的字符串。 如果`key`参数不是空字符串，<xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A>方法比较一组基于指定的语言的无效标记到字符串中的每个字符`provider`参数。 在字符串中的任何无效字符替换为下划线字符。 将替换为下划线字符如下所示：  
  
 （空格）、 U + 00A0 （非换行空格） '。（句点）、 （逗号） ';'（分号）&#124;，~，@，#、 %，^，&、 *，+、-，/、\\'，'\<，>、？，[，]，（'，'）、 {，}，"（引号），' '（撇号），:，和 ！。  
  
> [!NOTE]
>  强类型的资源不允许使用语言关键字 (如`if`， `for`，依此类推) 作为资源键名称。 但是，<xref:System.CodeDom>设计模式允许通过在关键字前面加下划线字符的语言关键字使用。 <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A>方法调用<xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A>方法来强制实施这种设计。 例如，如果使用的资源名称的是相同的语言关键字，如`for`，该名称显示为`_for`生成的强类型的资源类中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 或 <paramref name="provider" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>