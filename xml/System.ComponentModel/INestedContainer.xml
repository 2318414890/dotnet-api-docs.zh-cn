<Type Name="INestedContainer" FullName="System.ComponentModel.INestedContainer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6cc08798d0eb6ae4d54fd621e29c663add72ed19" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36702670" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INestedContainer : IDisposable, System.ComponentModel.IContainer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INestedContainer implements class System.ComponentModel.IContainer, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.INestedContainer" />
  <TypeSignature Language="VB.NET" Value="Public Interface INestedContainer&#xA;Implements IContainer, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class INestedContainer : IDisposable, System::ComponentModel::IContainer" />
  <TypeSignature Language="F#" Value="type INestedContainer = interface&#xA;    interface IContainer&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="7fe67-101">提供嵌套容器的功能，嵌套容器逻辑上可包含零个或多个其他组件，且这类容器由父组件拥有。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7fe67-101">Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7fe67-102"><xref:System.ComponentModel.INestedContainer>接口将添加到了所属组件的概念<xref:System.ComponentModel.IContainer>接口。</span><span class="sxs-lookup"><span data-stu-id="7fe67-102">The <xref:System.ComponentModel.INestedContainer> interface adds the concept of an owning component to the <xref:System.ComponentModel.IContainer> interface.</span></span> <span data-ttu-id="7fe67-103">嵌套的容器是在逻辑上，但不是一定是以可视方式，包含零个或多个子组件，并拥有的某些父组件的对象。</span><span class="sxs-lookup"><span data-stu-id="7fe67-103">A nested container is an object that logically, but not necessarily visually, contains zero or more child components and is owned by some parent component.</span></span> <span data-ttu-id="7fe67-104">对于可视包容所属的组件通常是另一个容器。</span><span class="sxs-lookup"><span data-stu-id="7fe67-104">For visual containment, the owning component is often another container.</span></span>  
  
 <span data-ttu-id="7fe67-105">嵌套的容器允许控件进行设计，而无需对每个子控件提供的一个显式的序列化的成员变量或自定义序列化程序的各个部分。</span><span class="sxs-lookup"><span data-stu-id="7fe67-105">Nested containers allow sections of a control to be designable, without requiring an explicit serialized member variable or a custom serializer for each subcontrol.</span></span> <span data-ttu-id="7fe67-106">相反，窗体设计器维护组件的一个主的容器。</span><span class="sxs-lookup"><span data-stu-id="7fe67-106">Instead, the form designer maintains one master container of components.</span></span> <span data-ttu-id="7fe67-107">每个组件的站点可能会提供一个地方安置额外的组件的嵌套的容器。</span><span class="sxs-lookup"><span data-stu-id="7fe67-107">Each component’s site may have a nested container that provides a place to put extra components.</span></span> <span data-ttu-id="7fe67-108">在组件被放置在嵌套的容器中后，它接收的名称是其给定名称和其所属的组件名称的组合。</span><span class="sxs-lookup"><span data-stu-id="7fe67-108">When a component is sited in a nested container, the name it receives is a combination of its given name and its owning component’s name.</span></span> <span data-ttu-id="7fe67-109">此外，组件添加到嵌套容器具有完全访问权限的服务的父容器中，并且嵌套的容器提供相同的行为方面添加新组件的父级。</span><span class="sxs-lookup"><span data-stu-id="7fe67-109">Additionally, components added to a nested container have full access to the services of the parent container, and the nested container provides the same behavior of the parent with respect to adding new components.</span></span> <span data-ttu-id="7fe67-110">嵌套的容器将创建设计器中的为每个组件，它包含，从而支持设计时支持。</span><span class="sxs-lookup"><span data-stu-id="7fe67-110">The nested container will create the designer for each component it contains, thereby enabling design-time support.</span></span> <span data-ttu-id="7fe67-111">因为标准的代码序列化程序看不到嵌套的容器，这些组件才会序列化的路径可以获取通过遍历主容器中的组件。</span><span class="sxs-lookup"><span data-stu-id="7fe67-111">Because standard code serializers do not look at nested containers, these components are only serialized if a path to them can be obtained by walking the components in the primary container.</span></span>  
  
 <span data-ttu-id="7fe67-112">嵌套的容器可以通过查询类型的服务的组件的站点找到<xref:System.ComponentModel.INestedContainer>。</span><span class="sxs-lookup"><span data-stu-id="7fe67-112">Nested containers can be found by querying a component's site for services of type <xref:System.ComponentModel.INestedContainer>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.NestedContainer" />
    <altmember cref="T:System.ComponentModel.ContainerFilterService" />
    <altmember cref="M:System.ComponentModel.NestedContainer.GetService(System.Type)" />
  </Docs>
  <Members>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IComponent Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IComponent Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.INestedContainer.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As IComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IComponent ^ Owner { System::ComponentModel::IComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.ComponentModel.IComponent" Usage="System.ComponentModel.INestedContainer.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7fe67-113">获取嵌套容器的所属组件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7fe67-113">Gets the owning component for the nested container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7fe67-114">拥有该嵌套容器的 <see cref="T:System.ComponentModel.IComponent" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7fe67-114">The <see cref="T:System.ComponentModel.IComponent" /> that owns the nested container.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7fe67-115">所属的组件是区分嵌套的容器和普通的容器的特征。</span><span class="sxs-lookup"><span data-stu-id="7fe67-115">The owning component is the characteristic that differentiates nested containers from ordinary containers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IComponent" />
        <altmember cref="T:System.ComponentModel.IContainer" />
        <altmember cref="P:System.ComponentModel.NestedContainer.Owner" />
      </Docs>
    </Member>
  </Members>
</Type>