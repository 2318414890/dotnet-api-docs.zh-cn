<Type Name="TypeDescriptionProvider" FullName="System.ComponentModel.TypeDescriptionProvider">
  <TypeSignature Language="C#" Value="public abstract class TypeDescriptionProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TypeDescriptionProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.TypeDescriptionProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TypeDescriptionProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeDescriptionProvider abstract" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c3808-101">向 <see cref="T:System.ComponentModel.TypeDescriptor" /> 提供补充元数据。</span><span class="sxs-lookup"><span data-stu-id="c3808-101">Provides supplemental metadata to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3808-102"><xref:System.ComponentModel.TypeDescriptionProvider>类动态扩展通过添加、 修改或隐藏如属性、 属性和事件的特征与类型或对象关联的类型信息。</span><span class="sxs-lookup"><span data-stu-id="c3808-102">The <xref:System.ComponentModel.TypeDescriptionProvider> class dynamically extends the type information associated with a type or object by adding, modifying, or hiding characteristics such as attributes, properties, and events.</span></span> <span data-ttu-id="c3808-103">可以有多个提供到单个的元数据的类型说明提供程序类<xref:System.ComponentModel.TypeDescriptor>。</span><span class="sxs-lookup"><span data-stu-id="c3808-103">There can be multiple type description provider classes that offer metadata to a single <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="c3808-104">有两种方法将关联<xref:System.ComponentModel.TypeDescriptionProvider>与<xref:System.ComponentModel.TypeDescriptor>:</span><span class="sxs-lookup"><span data-stu-id="c3808-104">There are two ways to associate a <xref:System.ComponentModel.TypeDescriptionProvider> with a <xref:System.ComponentModel.TypeDescriptor>:</span></span>  
  
-   <span data-ttu-id="c3808-105">在设计时，当目标类可以分配相应<xref:System.ComponentModel.TypeDescriptionProviderAttribute>标记。</span><span class="sxs-lookup"><span data-stu-id="c3808-105">At design time, when the target class can be assigned the appropriate <xref:System.ComponentModel.TypeDescriptionProviderAttribute> tag.</span></span>  
  
-   <span data-ttu-id="c3808-106">在运行时，当其中一个的<xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>方法<xref:System.ComponentModel.TypeDescriptor>可以调用类。</span><span class="sxs-lookup"><span data-stu-id="c3808-106">At run time, when one of the <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> methods of the <xref:System.ComponentModel.TypeDescriptor> class can be called.</span></span> <span data-ttu-id="c3808-107">这些重载的方法需要目标对象或其类的类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-107">These overloaded methods require either the target object or its class type.</span></span>  
  
 <span data-ttu-id="c3808-108"><xref:System.ComponentModel.TypeDescriptionProvider>类依赖于相同类型，会在构造过程中提供的父对象。</span><span class="sxs-lookup"><span data-stu-id="c3808-108">The <xref:System.ComponentModel.TypeDescriptionProvider> class relies on a parent object of the same type, supplied during construction.</span></span> <span data-ttu-id="c3808-109">这允许派生自的类<xref:System.ComponentModel.CustomTypeDescriptor>有选择地重写方法。</span><span class="sxs-lookup"><span data-stu-id="c3808-109">This allows classes that derive from <xref:System.ComponentModel.CustomTypeDescriptor> to selectively override methods.</span></span>  
  
 <span data-ttu-id="c3808-110">实例<xref:System.ComponentModel.TypeDescriptionProvider>仅生成根据需要，将对性能的自定义的类型信息的影响降至最低。</span><span class="sxs-lookup"><span data-stu-id="c3808-110">Instances of <xref:System.ComponentModel.TypeDescriptionProvider> are only built upon demand, minimizing the impact of custom type information on performance.</span></span>  
  
 <span data-ttu-id="c3808-111">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="c3808-111">This class cannot be inherited.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="c3808-112">派生的类型可能标记为<see langword="internal" />或<see langword="private" />，但你类型的实例可用于创建<see cref="T:System.ComponentModel.TypeDescriptor" />类。</span><span class="sxs-lookup"><span data-stu-id="c3808-112">Your derived type might be marked as <see langword="internal" /> or <see langword="private" />, but an instance of your type can be created with the <see cref="T:System.ComponentModel.TypeDescriptor" /> class.</span></span> <span data-ttu-id="c3808-113">不写入假定调用方的不安全代码是受信任。</span><span class="sxs-lookup"><span data-stu-id="c3808-113">Do not write insecure code by assuming the caller is trusted.</span></span> <span data-ttu-id="c3808-114">而是假设的调用方可能在部分信任环境中创建类型的实例。</span><span class="sxs-lookup"><span data-stu-id="c3808-114">Assume instead that callers might create instances of your type in partial trust.</span></span></para>
    </block>
    <altmember cref="Overload:System.ComponentModel.TypeDescriptor.AddProvider" />
    <altmember cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" />
    <altmember cref="T:System.ComponentModel.ICustomTypeDescriptor" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3808-115">初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c3808-115">Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeDescriptionProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeDescriptionProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3808-116">初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c3808-116">Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3808-117">此构造函数等效于调用的其他<xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29>构造函数的参数值`null`。</span><span class="sxs-lookup"><span data-stu-id="c3808-117">This constructor is equivalent to calling the other <xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29> constructor with a parameter value that is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeDescriptionProvider (System.ComponentModel.TypeDescriptionProvider parent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.TypeDescriptionProvider parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (parent As TypeDescriptionProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeDescriptionProvider(System::ComponentModel::TypeDescriptionProvider ^ parent);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.ComponentModel.TypeDescriptionProvider" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="c3808-118">父类型说明提供程序。</span><span class="sxs-lookup"><span data-stu-id="c3808-118">The parent type description provider.</span></span></param>
        <summary><span data-ttu-id="c3808-119">使用父类型说明提供程序初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c3808-119">Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class using a parent type description provider.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3808-120">如果`parent`参数是`null`，所有<xref:System.ComponentModel.TypeDescriptionProvider>方法将返回默认值。</span><span class="sxs-lookup"><span data-stu-id="c3808-120">If the `parent` parameter is `null`, all <xref:System.ComponentModel.TypeDescriptionProvider> methods will return default values.</span></span> <span data-ttu-id="c3808-121">否则为所有<xref:System.ComponentModel.TypeDescriptionProvider>方法会将对方法的委托`parent`。</span><span class="sxs-lookup"><span data-stu-id="c3808-121">Otherwise, all <xref:System.ComponentModel.TypeDescriptionProvider> methods will delegate to the methods of `parent`.</span></span>  
  
 <span data-ttu-id="c3808-122">下表显示的默认返回值<xref:System.ComponentModel.TypeDescriptionProvider>方法。</span><span class="sxs-lookup"><span data-stu-id="c3808-122">The following table shows the default return values for <xref:System.ComponentModel.TypeDescriptionProvider> methods.</span></span>  
  
|<span data-ttu-id="c3808-123">方法</span><span class="sxs-lookup"><span data-stu-id="c3808-123">Method</span></span>|<span data-ttu-id="c3808-124">默认返回值</span><span class="sxs-lookup"><span data-stu-id="c3808-124">Default return value</span></span>|  
|------------|--------------------------|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>|`null`|  
|<xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A>|<span data-ttu-id="c3808-125">新创建的对象，通过调用<xref:System.Activator.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c3808-125">A newly created object through a call to the <xref:System.Activator.CreateInstance%2A> method.</span></span>|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>|<span data-ttu-id="c3808-126">默认实例<xref:System.ComponentModel.CustomTypeDescriptor>类。</span><span class="sxs-lookup"><span data-stu-id="c3808-126">A default instance of a <xref:System.ComponentModel.CustomTypeDescriptor> class.</span></span>|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>|<span data-ttu-id="c3808-127">默认实例<xref:System.ComponentModel.CustomTypeDescriptor>类。</span><span class="sxs-lookup"><span data-stu-id="c3808-127">A default instance of a <xref:System.ComponentModel.CustomTypeDescriptor> class.</span></span>|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>|<span data-ttu-id="c3808-128">`objectType`第一个参数。</span><span class="sxs-lookup"><span data-stu-id="c3808-128">The `objectType` first parameter.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.CustomTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (IServiceProvider provider, Type objectType, Type[] argTypes, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(class System.IServiceProvider provider, class System.Type objectType, class System.Type[] argTypes, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (provider As IServiceProvider, objectType As Type, argTypes As Type(), args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(IServiceProvider ^ provider, Type ^ objectType, cli::array &lt;Type ^&gt; ^ argTypes, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="argTypes" Type="System.Type[]" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c3808-129">可选的服务提供程序。</span><span class="sxs-lookup"><span data-stu-id="c3808-129">An optional service provider.</span></span></param>
        <param name="objectType"><span data-ttu-id="c3808-130">要创建的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-130">The type of object to create.</span></span> <span data-ttu-id="c3808-131">此参数决不能为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-131">This parameter is never <see langword="null" />.</span></span></param>
        <param name="argTypes"><span data-ttu-id="c3808-132">可选的类型数组，其中的类型表示要传递给对象的构造函数的参数类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-132">An optional array of types that represent the parameter types to be passed to the object's constructor.</span></span> <span data-ttu-id="c3808-133">此数组可为 <see langword="null" /> 或长度为零。</span><span class="sxs-lookup"><span data-stu-id="c3808-133">This array can be <see langword="null" /> or of zero length.</span></span></param>
        <param name="args"><span data-ttu-id="c3808-134">要传递给对象的构造函数的可选参数值数组。</span><span class="sxs-lookup"><span data-stu-id="c3808-134">An optional array of parameter values to pass to the object's constructor.</span></span></param>
        <summary><span data-ttu-id="c3808-135">创建可替换为另一种数据类型的对象。</span><span class="sxs-lookup"><span data-stu-id="c3808-135">Creates an object that can substitute for another data type.</span></span></summary>
        <returns><span data-ttu-id="c3808-136">替代用 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-136">The substitute <see cref="T:System.Object" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3808-137"><xref:System.IServiceProvider>指定的`provider`参数通过传递在<xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=nameWithType>方法<xref:System.ComponentModel.TypeDescriptor>类。</span><span class="sxs-lookup"><span data-stu-id="c3808-137">The <xref:System.IServiceProvider> specified by the `provider` parameter is passed in by the <xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=nameWithType> method of the <xref:System.ComponentModel.TypeDescriptor> class.</span></span> <span data-ttu-id="c3808-138">如果`provider`不`null`，服务提供商可以由类型说明提供程序用于获取有关创建调用的附加上下文。</span><span class="sxs-lookup"><span data-stu-id="c3808-138">If `provider` is not `null`, the service provider can be used by the type description provider to obtain additional context about the creation call.</span></span>  
  
 <span data-ttu-id="c3808-139"><xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A>方法是`virtual`和默认情况下，返回的结果<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>方法如果`provider`是`null`。</span><span class="sxs-lookup"><span data-stu-id="c3808-139">The <xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> method is `virtual` and, by default, returns the result of the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method if `provider` is `null`.</span></span> <span data-ttu-id="c3808-140">如果`provider`是`null`，该方法将调用<xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A>父提供程序的方法。</span><span class="sxs-lookup"><span data-stu-id="c3808-140">If `provider` is `null`, this method will invoke the <xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> method of the parent provider.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="c3808-141">如果派生的类不感兴趣提供替代实例，它应直接调用基实现。</span><span class="sxs-lookup"><span data-stu-id="c3808-141">If the derived class is not interested in providing a substitute instance, it should just call the base implementation.</span></span></para>
        </block>
        <altmember cref="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="GetCache">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionary GetCache (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionary GetCache(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCache (instance As Object) As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionary ^ GetCache(System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="c3808-142">要获取与其对应的缓存的对象。</span><span class="sxs-lookup"><span data-stu-id="c3808-142">The object for which to get the cache.</span></span></param>
        <summary><span data-ttu-id="c3808-143">获取每个对象均对应有的缓存，此缓存可作为键/值对的 <see cref="T:System.Collections.IDictionary" /> 进行访问。</span><span class="sxs-lookup"><span data-stu-id="c3808-143">Gets a per-object cache, accessed as an <see cref="T:System.Collections.IDictionary" /> of key/value pairs.</span></span></summary>
        <returns><span data-ttu-id="c3808-144">如果提供的对象支持缓存，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-144">An <see cref="T:System.Collections.IDictionary" /> if the provided object supports caching; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3808-145">A<xref:System.ComponentModel.TypeDescriptor>可能需要执行对集合的元数据的复杂操作。</span><span class="sxs-lookup"><span data-stu-id="c3808-145">A <xref:System.ComponentModel.TypeDescriptor> may need to perform complex operations on collections of metadata.</span></span> <span data-ttu-id="c3808-146">由于类型不卸载域的整个生命周期<xref:System.ComponentModel.TypeDescriptor>类将自动缓存基于类型这些操作的结果。</span><span class="sxs-lookup"><span data-stu-id="c3808-146">Because types are not unloaded for the life of a domain, the <xref:System.ComponentModel.TypeDescriptor> class will automatically cache the results of these operations based on type.</span></span> <span data-ttu-id="c3808-147">但是，某些操作使用实时对象实例。</span><span class="sxs-lookup"><span data-stu-id="c3808-147">However, some operations use live object instances.</span></span> <span data-ttu-id="c3808-148">这些操作不能缓存内<xref:System.ComponentModel.TypeDescriptor>类，因为缓存它们将阻止对象被垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="c3808-148">These operations cannot be cached within the <xref:System.ComponentModel.TypeDescriptor> class because caching them would prevent the object from being garbage collected.</span></span> <span data-ttu-id="c3808-149">相反，<xref:System.ComponentModel.TypeDescriptor>类允许为每个对象缓存，作为访问<xref:System.Collections.IDictionary>的键/值对，存在对某个对象。</span><span class="sxs-lookup"><span data-stu-id="c3808-149">Instead, the <xref:System.ComponentModel.TypeDescriptor> class allows for a per-object cache, accessed as an <xref:System.Collections.IDictionary> of key/value pairs, to exist on an object.</span></span> <span data-ttu-id="c3808-150"><xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>方法返回的此缓存实例。</span><span class="sxs-lookup"><span data-stu-id="c3808-150">The <xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A> method returns an instance of this cache.</span></span> <span data-ttu-id="c3808-151"><xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>方法将返回`null`如果对象不支持的缓存。</span><span class="sxs-lookup"><span data-stu-id="c3808-151">The <xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A> method will return `null` if there is no supported cache for an object.</span></span>  
  
 <span data-ttu-id="c3808-152">默认值<xref:System.ComponentModel.TypeDescriptionProvider>由<xref:System.ComponentModel.TypeDescriptor>检查对象是否实现已就位的组件<xref:System.ComponentModel.Design.IDictionaryService>接口。</span><span class="sxs-lookup"><span data-stu-id="c3808-152">The default <xref:System.ComponentModel.TypeDescriptionProvider> used by <xref:System.ComponentModel.TypeDescriptor> examines the object to see if it is a sited component that implements the <xref:System.ComponentModel.Design.IDictionaryService> interface.</span></span> <span data-ttu-id="c3808-153">如果对象是，它使用字典服务来存储对象的缓存。</span><span class="sxs-lookup"><span data-stu-id="c3808-153">If the object is, it uses the dictionary service to store the object's cache.</span></span> <span data-ttu-id="c3808-154">否则，它返回的对象`null`。</span><span class="sxs-lookup"><span data-stu-id="c3808-154">Otherwise, the object it returns `null`.</span></span> <span data-ttu-id="c3808-155">其他类型说明提供程序可能会提供自己在本文中的实现。</span><span class="sxs-lookup"><span data-stu-id="c3808-155">Other type description providers may provide their own implementation here.</span></span> <span data-ttu-id="c3808-156">例如，依赖项对象只可以附加类型的属性<xref:System.Collections.IDictionary>。</span><span class="sxs-lookup"><span data-stu-id="c3808-156">For example, dependency objects can just attach a property of type <xref:System.Collections.IDictionary>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.ComponentModel.Design.IDictionaryService" />
      </Docs>
    </Member>
    <Member MemberName="GetExtendedTypeDescriptor">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtendedTypeDescriptor (instance As Object) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::ICustomTypeDescriptor ^ GetExtendedTypeDescriptor(System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="c3808-157">要为其获取扩展类型说明符的对象。</span><span class="sxs-lookup"><span data-stu-id="c3808-157">The object for which to get the extended type descriptor.</span></span></param>
        <summary><span data-ttu-id="c3808-158">为给定的对象获取扩展的自定义类型说明符。</span><span class="sxs-lookup"><span data-stu-id="c3808-158">Gets an extended custom type descriptor for the given object.</span></span></summary>
        <returns><span data-ttu-id="c3808-159">可以为对象提供扩展元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-159">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide extended metadata for the object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3808-160">扩展的类型描述符是的提供属性的其他对象添加到此对象，但不实际对象定义的自定义类型描述符。</span><span class="sxs-lookup"><span data-stu-id="c3808-160">An extended type descriptor is a custom type descriptor that offers properties that other objects have added to this object, but that are not actually defined on the object.</span></span> <span data-ttu-id="c3808-161">例如，在[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]组件模型对象实现<xref:System.ComponentModel.IExtenderProvider>接口可以将属性附加到驻留在相同的逻辑容器中的其他对象。</span><span class="sxs-lookup"><span data-stu-id="c3808-161">For example, in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] component model, objects that implement the <xref:System.ComponentModel.IExtenderProvider> interface can attach properties to other objects that reside in the same logical container.</span></span> <span data-ttu-id="c3808-162">重载<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法不返回提供这些额外的扩展属性的类型描述符。</span><span class="sxs-lookup"><span data-stu-id="c3808-162">The overloaded <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> methods do not return a type descriptor that provides these extra extended properties.</span></span> <span data-ttu-id="c3808-163"><xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>方法返回的这些扩展属性集。</span><span class="sxs-lookup"><span data-stu-id="c3808-163">The <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> method returns the set of these extended properties.</span></span> <span data-ttu-id="c3808-164"><xref:System.ComponentModel.TypeDescriptor>将自动合并这两个属性集合的结果。</span><span class="sxs-lookup"><span data-stu-id="c3808-164">The <xref:System.ComponentModel.TypeDescriptor> will automatically merge the results of these two property collections.</span></span> <span data-ttu-id="c3808-165">虽然[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]组件模型只支持扩展属性，<xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>可用于扩展的属性，以及事件，如果类型说明提供程序支持它。</span><span class="sxs-lookup"><span data-stu-id="c3808-165">While the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] component model supports only extended properties, <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> can be used for extended attributes as well as events, if the type description provider supports it.</span></span>  
  
 <span data-ttu-id="c3808-166"><xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> 是`virtual`和默认情况下，将返回自定义类型描述符返回空结果，如果未不传递任何父提供程序。</span><span class="sxs-lookup"><span data-stu-id="c3808-166"><xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> is `virtual` and, by default, returns a custom type descriptor that returns empty results if no parent provider was passed.</span></span> <span data-ttu-id="c3808-167">如果传递了父提供程序，此方法将调用父提供程序的<xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c3808-167">If a parent provider was passed, this method will invoke the parent provider's <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeDescriptor" />
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetExtenderProviders">
      <MemberSignature Language="C#" Value="protected internal virtual System.ComponentModel.IExtenderProvider[] GetExtenderProviders (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ComponentModel.IExtenderProvider[] GetExtenderProviders(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetExtenderProviders (instance As Object) As IExtenderProvider()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::ComponentModel::IExtenderProvider ^&gt; ^ GetExtenderProviders(System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IExtenderProvider[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="c3808-168">要为其获取扩展程序提供程序的对象。</span><span class="sxs-lookup"><span data-stu-id="c3808-168">The object to get extender providers for.</span></span></param>
        <summary><span data-ttu-id="c3808-169">获取指定对象的扩展程序提供程序。</span><span class="sxs-lookup"><span data-stu-id="c3808-169">Gets the extender providers for the specified object.</span></span></summary>
        <returns><span data-ttu-id="c3808-170"><paramref name="instance" /> 的扩展程序提供程序的数组。</span><span class="sxs-lookup"><span data-stu-id="c3808-170">An array of extender providers for <paramref name="instance" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c3808-171"><paramref name="instance" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-171"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetFullComponentName">
      <MemberSignature Language="C#" Value="public virtual string GetFullComponentName (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFullComponentName(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFullComponentName (component As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetFullComponentName(System::Object ^ component);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="c3808-172">指定的组件。</span><span class="sxs-lookup"><span data-stu-id="c3808-172">The specified component.</span></span></param>
        <summary><span data-ttu-id="c3808-173">获取指定的组件的名称，如果指定的组件没有名称，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-173">Gets the name of the specified component, or <see langword="null" /> if the component has no name.</span></span></summary>
        <returns><span data-ttu-id="c3808-174">指定组件的名称。</span><span class="sxs-lookup"><span data-stu-id="c3808-174">The name of the specified component.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c3808-175"><paramref name="component" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-175"><paramref name="component" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetReflectionType">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3808-176">针对某个对象执行正常反射。</span><span class="sxs-lookup"><span data-stu-id="c3808-176">Performs normal reflection against an object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetReflectionType">
      <MemberSignature Language="C#" Value="public Type GetReflectionType (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetReflectionType(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReflectionType (instance As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReflectionType(System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="c3808-177">类型的实例（不应为 <see langword="null" />）。</span><span class="sxs-lookup"><span data-stu-id="c3808-177">An instance of the type (should not be <see langword="null" />).</span></span></param>
        <summary><span data-ttu-id="c3808-178">针对给定对象执行正常反射。</span><span class="sxs-lookup"><span data-stu-id="c3808-178">Performs normal reflection against the given object.</span></span></summary>
        <returns><span data-ttu-id="c3808-179">此 <paramref name="instance" /> 的反射的类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-179">The type of reflection for this <paramref name="instance" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3808-180"><xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>方法是较低级别版本<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c3808-180">The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span> <span data-ttu-id="c3808-181">如果可以找到一个对象，没有自定义类型描述符<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>调用以执行与对象的正常反射。</span><span class="sxs-lookup"><span data-stu-id="c3808-181">If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.</span></span>  
  
 <span data-ttu-id="c3808-182">如果已调用使用而不是一种类型的实例的类型描述符成员，请使用此方法重载。</span><span class="sxs-lookup"><span data-stu-id="c3808-182">Use this method overload if you have called a type descriptor member that uses an instance instead of a type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c3808-183"><paramref name="instance" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-183"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetReflectionType">
      <MemberSignature Language="C#" Value="public Type GetReflectionType (Type objectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetReflectionType(class System.Type objectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReflectionType (objectType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReflectionType(Type ^ objectType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="c3808-184">要为其检索 <see cref="T:System.Reflection.IReflect" /> 的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-184">The type of object for which to retrieve the <see cref="T:System.Reflection.IReflect" />.</span></span></param>
        <summary><span data-ttu-id="c3808-185">针对某个类型执行正常反射。</span><span class="sxs-lookup"><span data-stu-id="c3808-185">Performs normal reflection against a type.</span></span></summary>
        <returns><span data-ttu-id="c3808-186">此 <paramref name="objectType" /> 的反射的类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-186">The type of reflection for this <paramref name="objectType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3808-187"><xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>方法是较低级别版本<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c3808-187">The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span> <span data-ttu-id="c3808-188">如果可以找到一个对象，没有自定义类型描述符<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>调用以执行与对象的正常反射。</span><span class="sxs-lookup"><span data-stu-id="c3808-188">If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.</span></span>  
  
 <span data-ttu-id="c3808-189">如果已调用而不是实例使用的类型的类型描述符成员，请使用此方法重载。</span><span class="sxs-lookup"><span data-stu-id="c3808-189">Use this method overload if you have called a type descriptor member that uses a type instead of an instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c3808-190"><paramref name="objectType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-190"><paramref name="objectType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetReflectionType">
      <MemberSignature Language="C#" Value="public virtual Type GetReflectionType (Type objectType, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetReflectionType(class System.Type objectType, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReflectionType (objectType As Type, instance As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetReflectionType(Type ^ objectType, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="c3808-191">要为其检索 <see cref="T:System.Reflection.IReflect" /> 的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-191">The type of object for which to retrieve the <see cref="T:System.Reflection.IReflect" />.</span></span></param>
        <param name="instance"><span data-ttu-id="c3808-192">该类型的实例。</span><span class="sxs-lookup"><span data-stu-id="c3808-192">An instance of the type.</span></span> <span data-ttu-id="c3808-193">可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-193">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="c3808-194">针对具有给定类型的给定对象执行正常反射。</span><span class="sxs-lookup"><span data-stu-id="c3808-194">Performs normal reflection against the given object with the given type.</span></span></summary>
        <returns><span data-ttu-id="c3808-195">此 <paramref name="objectType" /> 的反射的类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-195">The type of reflection for this <paramref name="objectType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3808-196"><xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>方法是较低级别版本<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c3808-196">The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span> <span data-ttu-id="c3808-197">如果可以找到一个对象，没有自定义类型描述符<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>调用以执行与对象的正常反射。</span><span class="sxs-lookup"><span data-stu-id="c3808-197">If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="c3808-198">此方法的原型为<see langword="virtual" />，并通过默认返回<paramref name="objectType" />如果未不传递任何父提供程序。</span><span class="sxs-lookup"><span data-stu-id="c3808-198">This method is prototyped as <see langword="virtual" />, and by default returns <paramref name="objectType" /> if no parent provider was passed.</span></span> <span data-ttu-id="c3808-199">如果传递了父提供程序，此方法将调用父提供程序的<see cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType" />方法。</span><span class="sxs-lookup"><span data-stu-id="c3808-199">If a parent provider was passed, this method will invoke the parent provider's <see cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType" /> method.</span></span></para>
        </block>
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeType">
      <MemberSignature Language="C#" Value="public virtual Type GetRuntimeType (Type reflectionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetRuntimeType(class System.Type reflectionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRuntimeType (reflectionType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetRuntimeType(Type ^ reflectionType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reflectionType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="reflectionType"><span data-ttu-id="c3808-200">要转换为其运行时等效项的类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-200">The type to convert to its runtime equivalent.</span></span></param>
        <summary><span data-ttu-id="c3808-201">将反射类型转换为运行时类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-201">Converts a reflection type into a runtime type.</span></span></summary>
        <returns><span data-ttu-id="c3808-202">一个 <see cref="T:System.Type" />，表示 <paramref name="reflectionType" /> 的运行时等效项。</span><span class="sxs-lookup"><span data-stu-id="c3808-202">A <see cref="T:System.Type" /> that represents the runtime equivalent of <paramref name="reflectionType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3808-203"><xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A>方法反向<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>方法将反射类型转换回运行时类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-203">The <xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A> method reverses the <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method to convert a reflection type back into a runtime type.</span></span> <span data-ttu-id="c3808-204">使用<xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A>方法优于使用<xref:System.Type.UnderlyingSystemType%2A>属性，它在早期版本中用于返回的运行时类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-204">Using the <xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A> method is preferred over using the <xref:System.Type.UnderlyingSystemType%2A> property, which was used in earlier versions to return the runtime type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c3808-205"><paramref name="reflectionType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-205"><paramref name="reflectionType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeDescriptor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3808-206">获取给定类型或对象的自定义类型说明符。</span><span class="sxs-lookup"><span data-stu-id="c3808-206">Gets a custom type descriptor for the given type or object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeDescriptor">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeDescriptor (instance As Object) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::ICustomTypeDescriptor ^ GetTypeDescriptor(System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="c3808-207">该类型的实例。</span><span class="sxs-lookup"><span data-stu-id="c3808-207">An instance of the type.</span></span> <span data-ttu-id="c3808-208">如果没有向 <see cref="T:System.ComponentModel.TypeDescriptor" /> 传递任何实例，则可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-208">Can be <see langword="null" /> if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></param>
        <summary><span data-ttu-id="c3808-209">获取给定对象的自定义类型说明符。</span><span class="sxs-lookup"><span data-stu-id="c3808-209">Gets a custom type descriptor for the given object.</span></span></summary>
        <returns><span data-ttu-id="c3808-210">可以为该类型提供元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-210">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c3808-211"><paramref name="instance" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-211"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeDescriptor">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(class System.Type objectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeDescriptor (objectType As Type) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::ICustomTypeDescriptor ^ GetTypeDescriptor(Type ^ objectType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="c3808-212">要为其检索类型说明符的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-212">The type of object for which to retrieve the type descriptor.</span></span></param>
        <summary><span data-ttu-id="c3808-213">获取给定类型的自定义类型说明符。</span><span class="sxs-lookup"><span data-stu-id="c3808-213">Gets a custom type descriptor for the given type.</span></span></summary>
        <returns><span data-ttu-id="c3808-214">可以为该类型提供元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-214">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeDescriptor">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(class System.Type objectType, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDescriptor (objectType As Type, instance As Object) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::ICustomTypeDescriptor ^ GetTypeDescriptor(Type ^ objectType, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="c3808-215">要为其检索类型说明符的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-215">The type of object for which to retrieve the type descriptor.</span></span></param>
        <param name="instance"><span data-ttu-id="c3808-216">该类型的实例。</span><span class="sxs-lookup"><span data-stu-id="c3808-216">An instance of the type.</span></span> <span data-ttu-id="c3808-217">如果没有向 <see cref="T:System.ComponentModel.TypeDescriptor" /> 传递任何实例，则可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-217">Can be <see langword="null" /> if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></param>
        <summary><span data-ttu-id="c3808-218">获取给定类型和对象的自定义类型说明符。</span><span class="sxs-lookup"><span data-stu-id="c3808-218">Gets a custom type descriptor for the given type and object.</span></span></summary>
        <returns><span data-ttu-id="c3808-219">可以为该类型提供元数据的 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-219">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3808-220">此方法的原型为`virtual`并且，如果未不传递任何父提供程序，则默认情况下，返回了空的描述符。</span><span class="sxs-lookup"><span data-stu-id="c3808-220">This method is prototyped as `virtual` and, by default, returns an empty descriptor if no parent provider was passed.</span></span> <span data-ttu-id="c3808-221">如果传递了父提供程序，此方法将调用父提供程序的<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c3808-221">If a parent provider was passed, this method will invoke the parent provider's <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="c3808-222"><see cref="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" />方法应返回对象的自定义类型描述符。</span><span class="sxs-lookup"><span data-stu-id="c3808-222">The <see cref="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" /> method should return a custom type descriptor for the object.</span></span> <span data-ttu-id="c3808-223">如果方法不提供类型信息对象，它应返回<see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-223">If the method does not provide type information for the object, it should return <see langword="null" />.</span></span></para>
        </block>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsSupportedType">
      <MemberSignature Language="C#" Value="public virtual bool IsSupportedType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupportedType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSupportedType(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c3808-224">要测试兼容性的类型。</span><span class="sxs-lookup"><span data-stu-id="c3808-224">The type to test for compatibility.</span></span></param>
        <summary><span data-ttu-id="c3808-225">获取一个值，该值指示指定的类型是否与类型说明及其类型说明提供程序链兼容。</span><span class="sxs-lookup"><span data-stu-id="c3808-225">Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.</span></span></summary>
        <returns>
          <span data-ttu-id="c3808-226">如果 <paramref name="type" /> 与类型说明及其类型说明提供程序链兼容，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-226"><see langword="true" /> if <paramref name="type" /> is compatible with the type description and its chain of type description providers; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c3808-227"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c3808-227"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>