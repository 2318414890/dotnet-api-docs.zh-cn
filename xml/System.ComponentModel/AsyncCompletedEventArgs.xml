<Type Name="AsyncCompletedEventArgs" FullName="System.ComponentModel.AsyncCompletedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9536ea1bbd455f045b8bf42ca811c20c2823cc54" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30369751" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AsyncCompletedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AsyncCompletedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncCompletedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncCompletedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncCompletedEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 MethodName<see langword="Completed" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你使用的一个类以实现[基于事件的异步模式概述](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)，则该类将提供*MethodName* `Completed`事件。 如果你添加的实例<xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=nameWithType>委托到事件中，你将收到有关中的异步操作的结果的信息<xref:System.ComponentModel.AsyncCompletedEventArgs>相应的事件处理程序方法的参数。  
  
 客户端应用程序的事件处理程序委托可以检查<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>属性来确定是否取消异步任务。  
  
 客户端应用程序的事件处理程序委托可以检查<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>属性以确定异步任务的执行过程中是否发生异常。  
  
 如果类支持多个异步方法或对相同的异步方法的多个调用，则可以确定哪个任务引发*MethodName* `Completed`通过检查的值的事件<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 你的代码将需要跟踪这些令牌，也称为作为任务 Id 及其相应的异步任务开始和完成。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.ComponentModel.AsyncOperation>以跟踪异步操作的生存期。 此代码示例摘自更大的示例为提供<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>类。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>遵循基于事件的异步模式的类可以引发事件以向客户端的挂起的异步操作的状态。 如果此类提供*MethodName* <see langword="Completed" />事件时，你可以使用<see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />需要了解客户端的有关异步操作的结果。  
  
 你可能想要向客户端通知有关比异步操作的结果的详细信息<see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />还包含。 在这种情况下，可以派生您自己的类从<see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />类并提供附加的私有实例变量和相应的只读的公共属性。 调用<see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />之前返回的属性值，该操作已取消或出错的情况下的方法。</para>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncCompletedEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AsyncCompletedEventArgs();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncCompletedEventArgs (Exception error, bool cancelled, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception error, bool cancelled, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (error As Exception, cancelled As Boolean, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AsyncCompletedEventArgs(Exception ^ error, bool cancelled, System::Object ^ userState);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
        <Parameter Name="cancelled" Type="System.Boolean" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="error">在异步操作期间发生的任何错误。</param>
        <param name="cancelled">一个指示异步操作是否已被取消的值。</param>
        <param name="userState">传递给 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> 方法的、用户提供的可选状态对象。</param>
        <summary>初始化 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancelled">
      <MemberSignature Language="C#" Value="public bool Cancelled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Cancelled" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Cancelled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Cancelled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示异步操作是否已被取消。</summary>
        <value>
          如果后台操作已被取消，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>属性是`true`，异步操作已中断。  
  
 应检查客户端应用程序的事件处理程序委托<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>之前访问的类中的任何属性的属性派生自<xref:System.ComponentModel.AsyncCompletedEventArgs>; 否则为该属性将引发<xref:System.InvalidOperationException>如果异步操作中断。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.ComponentModel.AsyncOperation>以跟踪异步操作的生存期。 此代码示例摘自更大的示例为提供<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>类。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果你提供的派生类中的只读属性，一定要调用<see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />方法。 这可以防止客户端访问可能不是有效，因为异步操作中的失败发生的属性。</para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public Exception Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Error" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Error As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Error { Exception ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示异步操作期间发生的错误。</summary>
        <value>如果异步操作期间发生错误，则为 <see cref="T:System.Exception" /> 实例；否则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果异步操作期间引发异常，类将分配到的异常<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>属性。 应检查客户端应用程序的事件处理程序委托<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>之前访问的类中的任何属性的属性派生自<xref:System.ComponentModel.AsyncCompletedEventArgs>; 否则为该属性将引发<xref:System.Reflection.TargetInvocationException>与其<xref:System.Exception.InnerException%2A>属性保存引用<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>。  
  
 值<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>属性是`null`操作已取消的情况。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.ComponentModel.AsyncOperation>以跟踪异步操作的生存期。 此代码示例摘自更大的示例为提供<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>类。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果你提供的派生类中的只读属性，一定要调用<see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />在属性实现的方法。 这可以防止客户端访问可能不是有效，因为异步操作中的失败发生的属性。</para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="RaiseExceptionIfNecessary">
      <MemberSignature Language="C#" Value="protected void RaiseExceptionIfNecessary ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseExceptionIfNecessary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseExceptionIfNecessary ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseExceptionIfNecessary();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果异步操作失败，则引发用户提供的异常。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用<xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A>在派生类属性。  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#6)]
[!code-vb[System.ComponentModel.AsyncOperationManager#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> 属性为 <see langword="true" />。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">该 <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 属性已由异步操作设置。 <see cref="P:System.Exception.InnerException" /> 属性持有对 <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 的引用。</exception>
        <block subset="none" type="overrides">
          <para>如果你具有派生您自己的类从<see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />类，只读属性应调用<see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />之前返回的属性值的方法。 如果该组件的异步辅助代码将分配到异常<see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />属性或设置<see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />属性<see langword="true" />，如果客户端尝试读取其值，该属性将引发的异常。 这可以防止客户端访问可能不是有效，因为异步操作中的失败发生的属性。</para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="UserState">
      <MemberSignature Language="C#" Value="public object UserState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取异步任务的唯一标识符。</summary>
        <value>唯一标识异步任务的对象引用；如果未设置任何值，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果一个类支持多个异步方法或单个方法的多个调用，则可以确定哪个任务引发*MethodName* `Completed`通过检查的值的事件<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 你的代码将需要跟踪这些令牌，也称为作为任务 Id 及其相应的异步任务开始和完成。  
  
 在启动任务的异步方法的原始调用期间设置此属性的值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.ComponentModel.AsyncOperation>以跟踪异步操作的生存期。 此代码示例摘自更大的示例为提供<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>类。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
  </Members>
</Type>