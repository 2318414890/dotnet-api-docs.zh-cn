<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="606bfa8ffd9f758de42817a0e4e7eaf9e11c8260" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30368671" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供支持异步方法调用的类的并发管理。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你的类将需要提供异步行为根据[基于事件的异步模式概述](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)，你将会遇到大量的并发管理问题。 其中一个问题是要求以确保线程或适用于应用程序模型的上下文中调用事件处理程序 (例如，Windows 窗体应用程序，[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]应用程序、 控制台应用程序等)。 <xref:System.ComponentModel.AsyncOperationManager>可以方便地创建类正确运行在所有支持的应用程序模型下[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]。  
  
 <xref:System.ComponentModel.AsyncOperationManager>该类具有一个方法， <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>，它将返回<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>可以用于跟踪特定的异步任务的持续时间。 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> For 任务可在提示客户端，当某项任务完成。 它还可在不终止操作的情况下发布进度更新和增量结果。  
  
 有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.ComponentModel.AsyncOperationManager>类，以创建支持任何应用程序模型的异步操作的类。 它演示如何实现一种类，用于数字，以确定是否为质数。 此计算可以很耗时，因此在单独线程上执行此操作。 通过处理进度报告、 增量结果和完成通知<xref:System.ComponentModel.AsyncOperation>类，这确保适当线程或上下文调用客户端的事件处理程序。  
  
 有关完整代码列表，请参阅[如何： 实现支持基于事件的异步模式的组件](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)。 有关客户端窗体的完整代码列表，请参阅[如何： 实现基于事件的异步模式的客户端](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">一个对象，用于使一个客户端状态（如任务 ID）与一个特定异步操作相关联。</param>
        <summary>返回可用于对特定异步操作的持续时间进行跟踪的 <see cref="T:System.ComponentModel.AsyncOperation" />。</summary>
        <returns>可用于对异步方法调用的持续时间进行跟踪的 <see cref="T:System.ComponentModel.AsyncOperation" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>方法返回<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>，你可以使用跟踪特定的异步操作的持续时间，并在操作完成时发出警报的应用程序模型。 你还可以使用它在不终止操作的情况下发布进度更新和增量结果。 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>将正确封送到的适当线程或应用程序模型的上下文这些调用。  
  
 如果你实现支持基于事件的异步模式的类，应调用你的类<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>每次你*MethodName* `Async`调用方法。 可以使用客户端应用程序对方法的调用`userSuppliedState`参数来唯一地标识每个调用，以便区分异步操作的执行期间引发的事件。  
  
> [!CAUTION]
>  客户端代码必须提供一个唯一值`userSuppliedState`参数。 非唯一的任务 Id 可能会导致您的实现错误地报告进度和其他事件。 你的代码应检查非唯一的任务 ID 和引发<xref:System.ArgumentException?displayProperty=nameWithType>如果检测到一个。  
  
 你的代码应该跟踪每个<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>返回<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>并使用相应的基础异步操作中的对象来后更新和终止操作。 此跟踪可以很简单，只需与传入<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>作为委托中参数。 在更复杂的设计中，你的类可以维护一套<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>对象，启动任务时添加对象和已完成或取消任务时删除它们。 此方法允许你查看的唯一`userSuppliedState`参数值，它是使用支持多个并发调用的类时应使用的方法。  
  
 有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>方法来创建<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>用于跟踪异步操作的持续时间。 此代码示例摘自更大的示例为提供<xref:System.ComponentModel.AsyncOperationManager>类。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于异步操作的同步上下文。</summary>
        <value>用于异步操作的同步上下文。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认实现是自由线程的实现。  
  
 线程应该设置<xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A>属性`null`来完成，否则将永远无法释放其工厂时释放的自由线程的工厂。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">用于设置的同步上下文。 要求值： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。 关联的状态：</permission>
      </Docs>
    </Member>
  </Members>
</Type>