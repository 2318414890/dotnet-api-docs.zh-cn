<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="27b3f4ff3ed46bf8dc07465aaecd985e0ada7d95" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="be926-101">跟踪异步操作的生存期。</span>
      <span class="sxs-lookup">
        <span data-stu-id="be926-101">Tracks the lifetime of an asynchronous operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be926-102">当实现类中的，以便根据[基于事件的异步模式概述](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)，你可能需要跟踪的每个类的实例上调用的异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="be926-102">When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</span></span> <span data-ttu-id="be926-103"><xref:System.ComponentModel.AsyncOperation>类提供方法来跟踪和报告的异步任务的进度。</span><span class="sxs-lookup"><span data-stu-id="be926-103">The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.</span></span>  
  
 <span data-ttu-id="be926-104">以下列表说明了如何使用<xref:System.ComponentModel.AsyncOperation>对象：</span><span class="sxs-lookup"><span data-stu-id="be926-104">The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:</span></span>  
  
-   <span data-ttu-id="be926-105">若要向客户端报告进度和中间结果，调用<xref:System.ComponentModel.AsyncOperation.Post%2A>在异步辅助代码中。</span><span class="sxs-lookup"><span data-stu-id="be926-105">To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.</span></span>  
  
-   <span data-ttu-id="be926-106">若要指示已完成一个异步任务，或取消挂起的异步任务，则调用<xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>。</span><span class="sxs-lookup"><span data-stu-id="be926-106">To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span>  
  
 <span data-ttu-id="be926-107">你的类应获取<xref:System.ComponentModel.AsyncOperation>每个异步任务对象通过调用<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>当每个任务启动。</span><span class="sxs-lookup"><span data-stu-id="be926-107">Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> when each task starts.</span></span> <span data-ttu-id="be926-108">若要允许客户端区分不同的异步任务，<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>采用一个参数的唯一客户端提供令牌，则该命令将作为<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="be926-108">To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="be926-109">它随后可由客户端代码来标识特定的异步任务引发进度或完成事件。</span><span class="sxs-lookup"><span data-stu-id="be926-109">It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be926-110">下面的代码示例演示如何使用<xref:System.ComponentModel.AsyncOperation>以跟踪异步操作的生存期的对象。</span><span class="sxs-lookup"><span data-stu-id="be926-110">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> object to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="be926-111">此代码示例摘自更大的示例为提供<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>类。</span><span class="sxs-lookup"><span data-stu-id="be926-111">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="be926-112">有关完整代码列表，请参阅[如何： 实现支持基于事件的异步模式的组件](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)。</span><span class="sxs-lookup"><span data-stu-id="be926-112">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="be926-113">有关客户端窗体的完整代码列表，请参阅[如何： 实现基于事件的异步模式的客户端](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)。</span><span class="sxs-lookup"><span data-stu-id="be926-113">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="be926-114">实施者必须确保<see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />和<see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />调用是异步的如果它们表示在特定的应用程序中的异步行为，以便类库提供程序不需要与自己考虑导致潜在的堆栈溢出恰好是同步的模型。</span>
        <span class="sxs-lookup">
          <span data-stu-id="be926-114">Implementers must ensure the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> and <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.</span>
        </span>
        <span data-ttu-id="be926-115">有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)。</span>
        <span class="sxs-lookup">
          <span data-stu-id="be926-115">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span>
        </span>
      </para>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="be926-116">完成异步操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-116">Finalizes the asynchronous operation.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="be926-117">结束异步操作的生存期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-117">Ends the lifetime of an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be926-118">调用<xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A>方法来结束异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="be926-118">Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="be926-119">为某个特定的任务调用此方法后，会调用到其对应<xref:System.ComponentModel.AsyncOperation>将引发的异常。</span><span class="sxs-lookup"><span data-stu-id="be926-119">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="be926-120">此前便已为此任务调用了 <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-120">
              <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="be926-121">一个用于包装操作结束时要调用的委托的 <see cref="T:System.Threading.SendOrPostCallback" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-121">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="be926-122">
            <c>d</c> 参数中包含的委托的一个自变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-122">An argument for the delegate contained in the <c>d</c> parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be926-123">在适合于应用程序模型的线程或上下文中调用委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-123">Invokes a delegate on the thread or context appropriate for the application model.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be926-124"><xref:System.ComponentModel.AsyncOperation.Post%2A>方法调用所指定的委托`arg`而无需结束异步操作的生存期的参数。</span><span class="sxs-lookup"><span data-stu-id="be926-124">The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.</span></span>  
  
 <span data-ttu-id="be926-125">你可以调用<xref:System.ComponentModel.AsyncOperation.Post%2A>方法通常不已由调用结束异步操作的生存期时<xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>。</span><span class="sxs-lookup"><span data-stu-id="be926-125">You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span> <span data-ttu-id="be926-126">该方法可用于报告进度或中间结果返回给客户端。</span><span class="sxs-lookup"><span data-stu-id="be926-126">You can use the method to report progress or interim results back to clients.</span></span>  
  
 <span data-ttu-id="be926-127">`d`参数包装你想要发布有关异步任务的状态更新时要调用的委托。</span><span class="sxs-lookup"><span data-stu-id="be926-127">The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</span></span> <span data-ttu-id="be926-128"><xref:System.ComponentModel.AsyncOperation>对象将确保您的代理调用的线程或上下文适合于应用程序模型。</span><span class="sxs-lookup"><span data-stu-id="be926-128">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="be926-129">你的方法也可以选择引发事件，以通知客户端的状态更改，进度更新或新的可用的增量结果。</span><span class="sxs-lookup"><span data-stu-id="be926-129">Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</span></span>  
  
 <span data-ttu-id="be926-130">`arg`参数应该用于将状态传递给委托由包装`d`参数。</span><span class="sxs-lookup"><span data-stu-id="be926-130">The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter.</span></span> <span data-ttu-id="be926-131">它可能是指<xref:System.ComponentModel.AsyncOperation>，也可能是<xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType>对象。</span><span class="sxs-lookup"><span data-stu-id="be926-131">It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="be926-132">它可能需要进行派生您自己的类从<xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType>提供附加的状态存储。</span><span class="sxs-lookup"><span data-stu-id="be926-132">It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> to provide additional state storage.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be926-133">下面的代码示例演示如何使用<xref:System.ComponentModel.AsyncOperation.Post%2A>reporting 进度和增量结果的异步操作的方法。</span><span class="sxs-lookup"><span data-stu-id="be926-133">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.Post%2A> method for reporting progress and incremental results of an asynchronous operation.</span></span> <span data-ttu-id="be926-134">此代码示例摘自更大的示例为提供<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>类。</span><span class="sxs-lookup"><span data-stu-id="be926-134">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="be926-135">此前便已为此任务调用了 <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-135">The <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> method has been called previously for this task.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="be926-136">
            <paramref name="d" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-136">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="be926-137">继承者必须使<see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />调用是异步的以便类库提供程序无需自己考虑可能发生堆栈溢出如果它们采用异步但碰巧是同步的特定应用程序模型。</span>
            <span class="sxs-lookup">
              <span data-stu-id="be926-137">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span>
            </span>
            <block subset="none" type="note">
              <para>
                <span data-ttu-id="be926-138">控制台应用程序不会同步 <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 调用的执行。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="be926-138">Console applications do not synchronize the execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls.</span>
                </span>
                <span data-ttu-id="be926-139">这会导致按错误的顺序引发 <see langword="ProgressChanged" /> 事件。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="be926-139">This can cause <see langword="ProgressChanged" /> events to be raised out of order.</span>
                </span>
                <span data-ttu-id="be926-140">如果希望序列化 <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 调用的执行，请实现并安装 <see cref="T:System.Threading.SynchronizationContext" /> 类。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="be926-140">If you wish to have serialized execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls, implement and install a <see cref="T:System.Threading.SynchronizationContext" /> class.</span>
                </span>
              </para>
            </block>
            <span data-ttu-id="be926-141">有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="be926-141">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="be926-142">一个用于包装操作结束时要调用的委托的 <see cref="T:System.Threading.SendOrPostCallback" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-142">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="be926-143">
            <c>d</c> 参数中包含的委托的一个自变量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-143">An argument for the delegate contained in the <c>d</c> parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be926-144">结束异步操作的生存期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-144">Ends the lifetime of an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be926-145">调用<xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>方法来结束异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="be926-145">Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="be926-146">为某个特定的任务调用此方法后，会调用到其对应<xref:System.ComponentModel.AsyncOperation>对象将引发的异常。</span><span class="sxs-lookup"><span data-stu-id="be926-146">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.</span></span>  
  
 <span data-ttu-id="be926-147">`d`参数包装希望您的类，该任务的生存期结束由于完成、 取消或失败的任务时要调用的委托。</span><span class="sxs-lookup"><span data-stu-id="be926-147">The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</span></span> <span data-ttu-id="be926-148"><xref:System.ComponentModel.AsyncOperation>对象将确保您的代理调用的线程或上下文适合于应用程序模型。</span><span class="sxs-lookup"><span data-stu-id="be926-148">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="be926-149">您的代理选择可以引发事件，以通知已结束异步任务的生存期的客户端。</span><span class="sxs-lookup"><span data-stu-id="be926-149">Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</span></span>  
  
 <span data-ttu-id="be926-150">`arg`参数用于将状态信息传递给完成委托`d`。</span><span class="sxs-lookup"><span data-stu-id="be926-150">The `arg` parameter is used to pass state information to the completion delegate `d`.</span></span> <span data-ttu-id="be926-151">你可以使用<xref:System.ComponentModel.AsyncOperation>对象，或<xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType>对象作为参数值。</span><span class="sxs-lookup"><span data-stu-id="be926-151">You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> object as the parameter value.</span></span> <span data-ttu-id="be926-152">或者，如果你想要提供附加的状态存储，你可以使用派生自的类的实例<xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType>类。</span><span class="sxs-lookup"><span data-stu-id="be926-152">Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be926-153">下面的代码示例演示如何使用<xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>方法来结束异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="be926-153">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="be926-154">此代码示例摘自更大的示例为提供<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>类。</span><span class="sxs-lookup"><span data-stu-id="be926-154">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="be926-155">此前便已为此任务调用了 <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-155">
              <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="be926-156">
            <paramref name="d" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-156">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="be926-157">继承者必须使<see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />调用是异步的以便类库提供程序无需自己考虑可能发生堆栈溢出如果它们采用异步但碰巧是同步的特定应用程序模型。</span>
            <span class="sxs-lookup">
              <span data-stu-id="be926-157">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span>
            </span>
            <span data-ttu-id="be926-158">该方法应被视为"结束生存期"的调用，这意味着需要执行什么是适合于应用程序模型实现。</span>
            <span class="sxs-lookup">
              <span data-stu-id="be926-158">The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model.</span>
            </span>
            <span data-ttu-id="be926-159">例如，ASP.NET 将减少未完成的异步操作其计数。</span>
            <span class="sxs-lookup">
              <span data-stu-id="be926-159">For instance, ASP.NET will decrement its count of outstanding asynchronous operations.</span>
            </span>
            <span data-ttu-id="be926-160">这还应将该操作置于状态，以便到其中的任何后续调用将失败，因为它现在已完成。</span>
            <span class="sxs-lookup">
              <span data-stu-id="be926-160">This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.</span>
            </span>
            <span data-ttu-id="be926-161">有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="be926-161">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="be926-162">获取传递给构造函数的 <see cref="T:System.Threading.SynchronizationContext" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-162">Gets the <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="be926-163">传递给构造函数的 <see cref="T:System.Threading.SynchronizationContext" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-163">The <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="be926-164">获取或设置用于唯一标识异步操作的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-164">Gets or sets an object used to uniquely identify an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="be926-165">传递给异步方法调用的状态对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="be926-165">The state object passed to the asynchronous method invocation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be926-166">如果你的类支持多个异步方法或单个的异步方法的多个调用，客户端将需要确定的异步任务引发事件的方法。</span><span class="sxs-lookup"><span data-stu-id="be926-166">If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</span></span> <span data-ttu-id="be926-167">你`MethodNameAsync`方法应接受类型的参数<xref:System.Object>作为一个任务 id。</span><span class="sxs-lookup"><span data-stu-id="be926-167">Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID.</span></span> <span data-ttu-id="be926-168">调用时，将使用此任务 ID <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>，方法，这会将与异步操作的特定调用关联客户端的任务 ID。</span><span class="sxs-lookup"><span data-stu-id="be926-168">You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</span></span> <span data-ttu-id="be926-169">ID 可用于通过您实现此任务<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="be926-169">This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="be926-170">客户端代码必须小心地将其提供一个唯一值<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="be926-170">Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="be926-171">非唯一的任务 Id 可能会导致您的实现错误地报告进度和其他事件。</span><span class="sxs-lookup"><span data-stu-id="be926-171">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="be926-172">你的代码应检查任务非唯一 id，并将提升<xref:System.ArgumentException>如果检测到一个。</span><span class="sxs-lookup"><span data-stu-id="be926-172">Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="be926-173">下面的代码示例演示如何使用<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A>以跟踪异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="be926-173">The following code example demonstrates using <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="be926-174">此代码示例摘自更大的示例为提供<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>类。</span><span class="sxs-lookup"><span data-stu-id="be926-174">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
  </Members>
</Type>