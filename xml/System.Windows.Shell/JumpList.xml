<Type Name="JumpList" FullName="System.Windows.Shell.JumpList">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f7f2309457e72bf302017b08f6428eab0810f014" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55389420" /></Metadata><TypeSignature Language="C#" Value="public sealed class JumpList : System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed JumpList extends System.Object implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Shell.JumpList" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JumpList&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class JumpList sealed : System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type JumpList = class&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("JumpItems")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示作为菜单显示在 Windows 7 任务栏按钮上的项和任务的列表。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[win7](~/includes/win7-md.md)]任务栏提供了用于直接从任务栏按钮启动程序，通过使用跳转列表的增强的功能。 跳转列表中还使用[!INCLUDE[win7](~/includes/win7-md.md)]开始菜单。 通过右键单击任务栏按钮或单击开始菜单中的某个程序旁边的箭头访问跳转列表。 跳转列表的详细信息，请参阅[任务栏](https://go.microsoft.com/fwlink/?LinkId=178478)部分中的 Windows 用户体验交互准则。  
  
 <xref:System.Windows.Shell.JumpList>类中的跳转列表功能提供托管的包装[!INCLUDE[win7](~/includes/win7-md.md)]任务栏并管理数据传递给[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]shell。 提供的功能<xref:System.Windows.Shell.JumpList>类不是版本中可用[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]早于[!INCLUDE[win7](~/includes/win7-md.md)]。 使用的应用程序<xref:System.Windows.Shell.JumpList>类的其他版本中将运行[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]，但不是能跳转列表。 有关 Windows shell 和本机跳转列表 Api 的详细信息，请参阅[任务栏扩展](https://go.microsoft.com/fwlink/?LinkId=178479)。  
  
 下图显示了跳转列表的 Windows Media Player，与中的项**任务**并**频繁**类别。  
  
 ![Windows Media Player 跳跃](~/add/media/wpfshell-jumplist.png "Windows Media Player 跳转列表")  
Windows Media Player 跳跃菜单  
  
## <a name="configuring-a-jump-list"></a>配置跳转列表  
 跳转列表可以包含两种类型的项，<xref:System.Windows.Shell.JumpTask>和一个<xref:System.Windows.Shell.JumpPath>。 一个<xref:System.Windows.Shell.JumpTask>是一个链接到程序和一个<xref:System.Windows.Shell.JumpPath>是指向文件的链接。 通过创建来直观地分隔跳转列表中的项<xref:System.Windows.Shell.JumpTask>不具有<xref:System.Windows.Shell.JumpTask.Title%2A>和<xref:System.Windows.Shell.JumpItem.CustomCategory%2A>指定。 此空<xref:System.Windows.Shell.JumpTask>将显示为一条水平线跳转列表中。  
  
> [!NOTE]
>  如果在指定的文件类型<xref:System.Windows.Shell.JumpPath>未注册应用程序后，该文件不会出现在跳转列表。 例如，如果您添加<xref:System.Windows.Shell.JumpPath>指向.txt 文件，必须注册您的应用程序来处理.txt 文件。 有关详细信息，请参阅[简介文件关联](https://go.microsoft.com/fwlink/?LinkId=178480)。  
  
 跳转项放入中的类别<xref:System.Windows.Shell.JumpList>。 默认情况下，<xref:System.Windows.Shell.JumpItem> 显示在“任务”类别中。 或者，可以指定<xref:System.Windows.Shell.JumpItem.CustomCategory%2A>为<xref:System.Windows.Shell.JumpItem>。  
  
 可以指定是否在标准**最近**和**频繁**中的显示类别<xref:System.Windows.Shell.JumpList>通过设置<xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>和<xref:System.Windows.Shell.JumpList.ShowFrequentCategory%2A>属性。 这些类别中的内容管理的[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]shell。 因为这些类别中可能包含许多相同的数据，通常显示的一个或另一端是你<xref:System.Windows.Shell.JumpList>，但不可同时使用两者。 [!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)] 如果通过公共文件对话框打开或用来打开通过文件类型关联的应用程序将自动管理最近使用的项目。 通过跳转列表访问某一项，可以通知[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]外壳程序以将项添加到**最近**通过调用类别<xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A>方法。  
  
## <a name="applying-a-jump-list-to-the-windows-shell"></a>将跳转列表应用到 Windows Shell  
 不能直接访问 shell 的跳转列表或其内容读入<xref:System.Windows.Shell.JumpList>类。 相反，<xref:System.Windows.Shell.JumpList>类提供的表示形式跳转列表，可以使用，并将应用到[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]shell。 通常创建<xref:System.Windows.Shell.JumpList>并将其设置一次当首次运行该应用程序。 但是，您可以修改或替换<xref:System.Windows.Shell.JumpList>在运行时。  
  
 如果已设置<xref:System.Windows.Shell.JumpList>属性，你必须应用<xref:System.Windows.Shell.JumpList>到 Windows shell 之前其内容将出现在任务栏跳转列表中。 这自动完成时<xref:System.Windows.Shell.JumpList>首次附加到应用程序，在 XAML 中或在调用<xref:System.Windows.Shell.JumpList.SetJumpList%2A>方法。 如果您修改的内容<xref:System.Windows.Shell.JumpList>在运行时，必须调用<xref:System.Windows.Shell.JumpList.Apply%2A>方法以将其当前的内容应用到 Windows shell。  
  
## <a name="setting-a-jump-list-in-xaml"></a>在 XAML 中设置跳转列表  
 一个<xref:System.Windows.Shell.JumpList>不会自动附加到<xref:System.Windows.Application>对象。 附加<xref:System.Windows.Shell.JumpList>到<xref:System.Windows.Application>对象在 XAML 中的使用附加的属性语法。 <xref:System.Windows.Shell.JumpList>类实现<xref:System.ComponentModel.ISupportInitialize>接口以支持 XAML 声明<xref:System.Windows.Shell.JumpList>。 如果<xref:System.Windows.Shell.JumpList>是在 XAML 中声明，附加到当前<xref:System.Windows.Application>，它将自动应用于[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]shell 时<xref:System.Windows.Shell.JumpList>初始化。  
  
## <a name="setting-and-modifying-a-jump-list-in-code"></a>设置和修改代码中的跳转列表  
 附加<xref:System.Windows.Shell.JumpList>到<xref:System.Windows.Application>对象在代码中通过调用静态<xref:System.Windows.Shell.JumpList.SetJumpList%2A>方法。 这同样适用<xref:System.Windows.Shell.JumpList>到[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]shell。  
  
 若要修改<xref:System.Windows.Shell.JumpList>在运行时，调用<xref:System.Windows.Shell.JumpList.GetJumpList%2A>方法来获取<xref:System.Windows.Shell.JumpList>当前附加到<xref:System.Windows.Application>。 已修改的属性后<xref:System.Windows.Shell.JumpList>，必须调用<xref:System.Windows.Shell.JumpList.Apply%2A>方法以将更改应用于 Windows shell。  
  
> [!NOTE]
>  您通常创建一个<xref:System.Windows.Shell.JumpList>附加到<xref:System.Windows.Application>并将应用于[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]shell。 但是，你可以创建多个<xref:System.Windows.Shell.JumpList>对象。 只有一个<xref:System.Windows.Shell.JumpList>一次可应用于[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]shell 中，也只有一个适配器<xref:System.Windows.Shell.JumpList>一次可以关联<xref:System.Windows.Application>。 .NET Framework 不要求这些是相同<xref:System.Windows.Shell.JumpList>。  
  
> [!NOTE]
>  此类包含在类级别应用于所有成员的链接要求。 一个<xref:System.Security.SecurityException>直接调用方没有完全信任权限时引发。 有关安全要求的详细信息，请参阅[链接需求](~/docs/framework/misc/link-demands.md)并[继承需求](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100))。  
  
   
  
## Examples  
 下面的示例演示具有跳转列表的应用程序。 该应用程序，可以将任务添加到当前的跳转列表，请清除的跳转列表中，内容，将新的跳转列表应用到应用程序的三个按钮。  
  
 下面的示例演示如何声明<xref:System.Windows.Shell.JumpList>标记中。 <xref:System.Windows.Shell.JumpList>包含两个<xref:System.Windows.Shell.JumpTask>链接，另一个<xref:System.Windows.Shell.JumpPath>。 将应用<xref:System.Windows.Shell.JumpPath>向 shell 将失败如果应用程序未注册为处理.txt 文件扩展名。  
  
 [!code-xaml[Shell_JumpListSample#000](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#000)]  
  
 下面的示例演示的代码隐藏页`App.xaml`。 此代码处理<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。  
  
 [!code-csharp[Shell_JumpListSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml.cs#100)]  
  
 以下示例演示用于创建应用程序用户界面的标记。  
  
 [!code-xaml[Shell_JumpListSample#300](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml#300)]  
  
 下面的示例演示的代码隐藏页`MainWindow.xaml`。 此代码演示了如何修改、 清除和创建<xref:System.Windows.Shell.JumpList>在程序代码中。 有关新跳转列表，静态<xref:System.Windows.Shell.JumpList.SetJumpList%2A>方法调用以将相关联<xref:System.Windows.Shell.JumpList>与当前应用程序，并将应用<xref:System.Windows.Shell.JumpList>到 Windows shell。  
  
 [!code-csharp[Shell_JumpListSample#200](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#200)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.UIPermission">若要修改 Windows shell 的完全访问权限。 安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Shell.JumpList" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JumpList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JumpList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Shell.JumpList" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JumpList (System.Collections.Generic.IEnumerable&lt;System.Windows.Shell.JumpItem&gt; items, bool showFrequent, bool showRecent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Shell.JumpItem&gt; items, bool showFrequent, bool showRecent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpList.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Shell.JumpItem},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (items As IEnumerable(Of JumpItem), showFrequent As Boolean, showRecent As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JumpList(System::Collections::Generic::IEnumerable&lt;System::Windows::Shell::JumpItem ^&gt; ^ items, bool showFrequent, bool showRecent);" />
      <MemberSignature Language="F#" Value="new System.Windows.Shell.JumpList : seq&lt;System.Windows.Shell.JumpItem&gt; * bool * bool -&gt; System.Windows.Shell.JumpList" Usage="new System.Windows.Shell.JumpList (items, showFrequent, showRecent)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;System.Windows.Shell.JumpItem&gt;" />
        <Parameter Name="showFrequent" Type="System.Boolean" />
        <Parameter Name="showRecent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="items">在跳转列表中显示的 <see cref="T:System.Windows.Shell.JumpItem" /> 对象的集合。</param>
        <param name="showFrequent">一个指示常用项是否显示在跳转列表中的值。</param>
        <param name="showRecent">一个指示最近使用的项是否显示在跳转列表中的值。</param>
        <summary>使用指定的参数初始化 <see cref="T:System.Windows.Shell.JumpList" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **最近**并**频繁**类别通常包含许多相同的跳转项。 因此，应用程序通常显示**最近**或**频繁**跳转列表中，但不同时的类别。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
        <altmember cref="P:System.Windows.Shell.JumpList.JumpItems" />
        <altmember cref="P:System.Windows.Shell.JumpList.ShowFrequentCategory" />
        <altmember cref="P:System.Windows.Shell.JumpList.ShowRecentCategory" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddToRecentCategory">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将指定的项添加到跳转列表的“最近”类别中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddToRecentCategory">
      <MemberSignature Language="C#" Value="public static void AddToRecentCategory (string itemPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddToRecentCategory(string itemPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpList.AddToRecentCategory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddToRecentCategory (itemPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddToRecentCategory(System::String ^ itemPath);" />
      <MemberSignature Language="F#" Value="static member AddToRecentCategory : string -&gt; unit" Usage="System.Windows.Shell.JumpList.AddToRecentCategory itemPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="itemPath">要添加到跳转列表中的路径。</param>
        <summary>将指定的项路径添加到跳转列表的“最近”类别中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容**最近**类别管理的 Windows shell。 若要跳转列表中显示最近使用的项，请设置<xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>属性设置为`true`。  
  
 您可以调用<xref:System.Windows.Shell.JumpList.AddToRecentCategory%28System.String%29>方法来请求 Windows shell 添加到项路径**最近**项列表。 如果你的应用程序未注册为处理的项的文件类型，则不会在中**最近**列表以及对调用<xref:System.Windows.Shell.JumpList.AddToRecentCategory%28System.String%29>将以静默方式失败。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
        <altmember cref="P:System.Windows.Shell.JumpList.ShowRecentCategory" />
      </Docs>
    </Member>
    <Member MemberName="AddToRecentCategory">
      <MemberSignature Language="C#" Value="public static void AddToRecentCategory (System.Windows.Shell.JumpPath jumpPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddToRecentCategory(class System.Windows.Shell.JumpPath jumpPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddToRecentCategory(System::Windows::Shell::JumpPath ^ jumpPath);" />
      <MemberSignature Language="F#" Value="static member AddToRecentCategory : System.Windows.Shell.JumpPath -&gt; unit" Usage="System.Windows.Shell.JumpList.AddToRecentCategory jumpPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jumpPath" Type="System.Windows.Shell.JumpPath" />
      </Parameters>
      <Docs>
        <param name="jumpPath">要添加到跳转列表中的 <see cref="T:System.Windows.Shell.JumpPath" />。</param>
        <summary>将指定的跳转路径添加到跳转列表的“最近”类别中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容**最近**类别管理的 Windows shell。 若要跳转列表中显示最近使用的项，请设置<xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>属性设置为`true`。  
  
 您可以调用<xref:System.Windows.Shell.JumpList.AddToRecentCategory%28System.Windows.Shell.JumpPath%29>方法来请求 Windows shell 添加到指定的跳转路径**最近**项列表。 如果你的应用程序未注册为处理的项的文件类型，则不会在中**最近**列表以及对调用<xref:System.Windows.Shell.JumpList.AddToRecentCategory%28System.Windows.Shell.JumpPath%29>将以静默方式失败。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
        <altmember cref="P:System.Windows.Shell.JumpList.ShowRecentCategory" />
      </Docs>
    </Member>
    <Member MemberName="AddToRecentCategory">
      <MemberSignature Language="C#" Value="public static void AddToRecentCategory (System.Windows.Shell.JumpTask jumpTask);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddToRecentCategory(class System.Windows.Shell.JumpTask jumpTask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpTask)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddToRecentCategory(System::Windows::Shell::JumpTask ^ jumpTask);" />
      <MemberSignature Language="F#" Value="static member AddToRecentCategory : System.Windows.Shell.JumpTask -&gt; unit" Usage="System.Windows.Shell.JumpList.AddToRecentCategory jumpTask" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jumpTask" Type="System.Windows.Shell.JumpTask" />
      </Parameters>
      <Docs>
        <param name="jumpTask">要添加到跳转列表中的 <see cref="T:System.Windows.Shell.JumpTask" />。</param>
        <summary>将指定的跳转任务添加到跳转列表的“最近”类别中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容**最近**类别管理的 Windows shell。 若要跳转列表中显示最近使用的项，请设置<xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>属性设置为`true`。  
  
 您可以调用<xref:System.Windows.Shell.JumpList.AddToRecentCategory%28System.Windows.Shell.JumpTask%29>方法来请求 Windows shell 添加到指定的跳转任务**最近**项列表。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
        <altmember cref="P:System.Windows.Shell.JumpList.ShowRecentCategory" />
      </Docs>
    </Member>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public void Apply ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Apply() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpList.Apply" />
      <MemberSignature Language="VB.NET" Value="Public Sub Apply ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Apply();" />
      <MemberSignature Language="F#" Value="member this.Apply : unit -&gt; unit" Usage="jumpList.Apply " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在其当前状态下将 <see cref="T:System.Windows.Shell.JumpList" /> 发送到 Windows shell 中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Shell.JumpList.Apply%2A>方法发送的内容<xref:System.Windows.Shell.JumpList>的 Windows shell 中其当前状态。 此调用完成后，<xref:System.Windows.Shell.JumpList.JumpItems%2A>属性修改为包含 Windows 外壳程序已成功添加到其任务栏跳转列表中的项目。 您可以通过事件处理程序访问的已删除的项列表<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。  
  
   
  
## Examples  
 下面的示例演示如何获取当前<xref:System.Windows.Shell.JumpList>清除的内容和<xref:System.Windows.Shell.JumpList.JumpItems%2A>集合。 <xref:System.Windows.Shell.JumpList.Apply%2A>然后调用方法来应用<xref:System.Windows.Shell.JumpList>更改为 Windows shell。 此示例摘自一个更大的示例中提供<xref:System.Windows.Shell.JumpList>类概述。  
  
 [!code-csharp[Shell_JumpListSample#230](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#230)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Shell.JumpList" /> 未完全初始化。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpList.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="jumpList.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用信号通知 <see cref="T:System.Windows.Shell.JumpList" /> 初始化开始。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Shell.JumpList>类实现<xref:System.ComponentModel.ISupportInitialize>接口以支持 XAML 声明<xref:System.Windows.Shell.JumpList>。 <xref:System.Windows.Shell.JumpList.BeginInit%2A>时，只调用方法<xref:System.Windows.Shell.JumpList>是在 XAML 中声明，附加到<xref:System.Windows.Application>使用附加的属性语法。 不在代码中调用此方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">对 <see cref="M:System.Windows.Shell.JumpList.BeginInit" /> 的此调用嵌套在对 <see cref="M:System.Windows.Shell.JumpList.BeginInit" /> 的之前调用中。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpList.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="jumpList.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用信号通知 <see cref="T:System.Windows.Shell.JumpList" /> 初始化结束。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Shell.JumpList>类实现<xref:System.ComponentModel.ISupportInitialize>接口以支持 XAML 声明<xref:System.Windows.Shell.JumpList>。 <xref:System.Windows.Shell.JumpList.EndInit%2A>时，只调用方法<xref:System.Windows.Shell.JumpList>是在 XAML 中声明，附加到<xref:System.Windows.Application>使用附加的属性语法。 不在代码中调用此方法。  
  
 <xref:System.Windows.Shell.JumpList.EndInit%2A>方法具有相同的效果<xref:System.Windows.Shell.JumpList.Apply%2A>方法。 <xref:System.Windows.Shell.JumpList.EndInit%2A> 将发送的内容<xref:System.Windows.Shell.JumpList>的 Windows shell 中其当前状态。 此调用完成后，<xref:System.Windows.Shell.JumpList.JumpItems%2A>属性修改为包含 Windows 外壳程序已成功添加到其跳转列表中的项目。 您可以通过事件处理程序访问的已删除的项列表<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">对 <see cref="M:System.Windows.Shell.JumpList.EndInit" /> 的此调用未与对 <see cref="M:System.Windows.Shell.JumpList.BeginInit" /> 的调用配对。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetJumpList">
      <MemberSignature Language="C#" Value="public static System.Windows.Shell.JumpList GetJumpList (System.Windows.Application application);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Shell.JumpList GetJumpList(class System.Windows.Application application) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpList.GetJumpList(System.Windows.Application)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Shell::JumpList ^ GetJumpList(System::Windows::Application ^ application);" />
      <MemberSignature Language="F#" Value="static member GetJumpList : System.Windows.Application -&gt; System.Windows.Shell.JumpList" Usage="System.Windows.Shell.JumpList.GetJumpList application" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Shell.JumpList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="application" Type="System.Windows.Application" />
      </Parameters>
      <Docs>
        <param name="application">与 <see cref="T:System.Windows.Shell.JumpList" /> 关联的应用程序。</param>
        <summary>返回与某个应用程序关联的 <see cref="T:System.Windows.Shell.JumpList" /> 对象。</summary>
        <returns>与指定应用程序关联的 <see cref="T:System.Windows.Shell.JumpList" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以调用<xref:System.Windows.Shell.JumpList.GetJumpList%2A>方法以获取<xref:System.Windows.Shell.JumpList>当前与关联<xref:System.Windows.Application>。 .NET Framework 不需要，这是<xref:System.Windows.Shell.JumpList>的当前应用于 Windows shell。  
  
   
  
## Examples  
 下面的示例演示如何获取<xref:System.Windows.Shell.JumpList>与当前应用程序相关联。 一个<xref:System.Windows.Shell.JumpTask>添加到<xref:System.Windows.Shell.JumpList.JumpItems%2A>集合并添加到**最近**类别。 <xref:System.Windows.Shell.JumpList.Apply%2A>调用方法来应用更新后<xref:System.Windows.Shell.JumpList>到 Windows shell。 此示例摘自一个更大的示例中提供<xref:System.Windows.Shell.JumpList>类概述。  
  
 [!code-csharp[Shell_JumpListSample#240](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#240)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JumpItems">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;System.Windows.Shell.JumpItem&gt; JumpItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;class System.Windows.Shell.JumpItem&gt; JumpItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpList.JumpItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JumpItems As List(Of JumpItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::List&lt;System::Windows::Shell::JumpItem ^&gt; ^ JumpItems { System::Collections::Generic::List&lt;System::Windows::Shell::JumpItem ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.JumpItems : System.Collections.Generic.List&lt;System.Windows.Shell.JumpItem&gt;" Usage="System.Windows.Shell.JumpList.JumpItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Windows.Shell.JumpItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在跳转列表中显示的 <see cref="T:System.Windows.Shell.JumpItem" /> 对象的集合。</summary>
        <value>在跳转列表中显示的 <see cref="T:System.Windows.Shell.JumpItem" /> 对象的集合。 默认值为空集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 跳转列表可以包含两种类型的项，<xref:System.Windows.Shell.JumpTask>和一个<xref:System.Windows.Shell.JumpPath>。 一个<xref:System.Windows.Shell.JumpTask>是一个链接到程序和一个<xref:System.Windows.Shell.JumpPath>是指向文件的链接。  
  
 当<xref:System.Windows.Shell.JumpList>创建后，<xref:System.Windows.Shell.JumpList.JumpItems%2A>集合为空。 您可以添加任何<xref:System.Windows.Shell.JumpTask>或<xref:System.Windows.Shell.JumpPath>到集合的对象。 集合将仅包含已由你的程序添加的项。 之后<xref:System.Windows.Shell.JumpList>通过成功调用传递给 Windows shell<xref:System.Windows.Shell.JumpList.EndInit%2A>或<xref:System.Windows.Shell.JumpList.Apply%2A>方法，<xref:System.Windows.Shell.JumpList.JumpItems%2A>集合将包含已成功添加到任务栏跳转列表的项。 未成功添加的项都将从中<xref:System.Windows.Shell.JumpList.JumpItems%2A>集合。 您可以通过事件处理程序访问的已删除的项列表<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。  
  
   
  
## Examples  
 下面的示例演示如何获取当前<xref:System.Windows.Shell.JumpList>清除的内容和<xref:System.Windows.Shell.JumpList.JumpItems%2A>集合。 <xref:System.Windows.Shell.JumpList.Apply%2A>然后调用方法来应用<xref:System.Windows.Shell.JumpList>更改为 Windows shell。 此示例摘自一个更大的示例中提供<xref:System.Windows.Shell.JumpList>类概述。  
  
 [!code-csharp[Shell_JumpListSample#230](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#230)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JumpItemsRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Shell.JumpItemsRejectedEventArgs&gt; JumpItemsRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Shell.JumpItemsRejectedEventArgs&gt; JumpItemsRejected" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Shell.JumpList.JumpItemsRejected" />
      <MemberSignature Language="VB.NET" Value="Public Event JumpItemsRejected As EventHandler(Of JumpItemsRejectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Shell::JumpItemsRejectedEventArgs ^&gt; ^ JumpItemsRejected;" />
      <MemberSignature Language="F#" Value="member this.JumpItemsRejected : EventHandler&lt;System.Windows.Shell.JumpItemsRejectedEventArgs&gt; " Usage="member this.JumpItemsRejected : System.EventHandler&lt;System.Windows.Shell.JumpItemsRejectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Shell.JumpItemsRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 Windows shell 将跳转项添加到跳转列表中失败时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容之后<xref:System.Windows.Shell.JumpList>应用于 Windows shell 中，<xref:System.Windows.Shell.JumpList.JumpItems%2A>属性修改为包含 Windows 外壳程序已成功添加到其跳转列表中的项目。 您可以通过事件处理程序访问的已删除的项列表<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。  
  
   
  
## Examples  
 下面的示例演示如何处理<xref:System.Windows.Shell.JumpList.JumpItemsRejected>事件，以在消息框中显示被拒绝的项。 此示例摘自一个更大的示例中提供<xref:System.Windows.Shell.JumpList>类概述。  
  
 [!code-csharp[Shell_JumpListSample#110](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml.cs#110)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JumpItemsRemovedByUser">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Shell.JumpItemsRemovedEventArgs&gt; JumpItemsRemovedByUser;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Shell.JumpItemsRemovedEventArgs&gt; JumpItemsRemovedByUser" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Shell.JumpList.JumpItemsRemovedByUser" />
      <MemberSignature Language="VB.NET" Value="Public Event JumpItemsRemovedByUser As EventHandler(Of JumpItemsRemovedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Shell::JumpItemsRemovedEventArgs ^&gt; ^ JumpItemsRemovedByUser;" />
      <MemberSignature Language="F#" Value="member this.JumpItemsRemovedByUser : EventHandler&lt;System.Windows.Shell.JumpItemsRemovedEventArgs&gt; " Usage="member this.JumpItemsRemovedByUser : System.EventHandler&lt;System.Windows.Shell.JumpItemsRemovedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Shell.JumpItemsRemovedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户从跳转列表中移除以前位于该列表中的跳转项时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容之后<xref:System.Windows.Shell.JumpList>应用于 Windows shell 中，<xref:System.Windows.Shell.JumpList.JumpItems%2A>属性修改为包含 Windows 外壳程序已成功添加到其跳转列表中的项目。 您可以通过事件处理程序访问的已删除的项列表<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。  
  
   
  
## Examples  
 下面的示例演示如何处理<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件，以在消息框中显示被拒绝的项。 此示例摘自一个更大的示例中提供<xref:System.Windows.Shell.JumpList>类概述。  
  
 [!code-csharp[Shell_JumpListSample#120](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml.cs#120)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetJumpList">
      <MemberSignature Language="C#" Value="public static void SetJumpList (System.Windows.Application application, System.Windows.Shell.JumpList value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetJumpList(class System.Windows.Application application, class System.Windows.Shell.JumpList value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpList.SetJumpList(System.Windows.Application,System.Windows.Shell.JumpList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetJumpList(System::Windows::Application ^ application, System::Windows::Shell::JumpList ^ value);" />
      <MemberSignature Language="F#" Value="static member SetJumpList : System.Windows.Application * System.Windows.Shell.JumpList -&gt; unit" Usage="System.Windows.Shell.JumpList.SetJumpList (application, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="application" Type="System.Windows.Application" />
        <Parameter Name="value" Type="System.Windows.Shell.JumpList" />
      </Parameters>
      <Docs>
        <param name="application">与 <see cref="T:System.Windows.Shell.JumpList" /> 关联的应用程序。</param>
        <param name="value">要与应用程序关联的 <see cref="T:System.Windows.Shell.JumpList" />。</param>
        <summary>设置与应用程序关联的 <see cref="T:System.Windows.Shell.JumpList" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以创建多个<xref:System.Windows.Shell.JumpList>对象。 但是，只有一个<xref:System.Windows.Shell.JumpList>一次可以关联<xref:System.Windows.Application>。 调用<xref:System.Windows.Shell.JumpList.SetJumpList%2A>方法以设置<xref:System.Windows.Shell.JumpList>当前与关联<xref:System.Windows.Application>。  
  
   
  
## Examples  
 下面的示例演示如何创建<xref:System.Windows.Shell.JumpList>在代码中。 静态<xref:System.Windows.Shell.JumpList.SetJumpList%2A>方法调用以将相关联<xref:System.Windows.Shell.JumpList>与当前应用程序。 <xref:System.Windows.Shell.JumpList>设置该选项时自动应用于 Windows shell。 此示例摘自一个更大的示例中提供<xref:System.Windows.Shell.JumpList>类概述。  
  
 [!code-csharp[Shell_JumpListSample#210](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#210)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowFrequentCategory">
      <MemberSignature Language="C#" Value="public bool ShowFrequentCategory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowFrequentCategory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpList.ShowFrequentCategory" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowFrequentCategory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowFrequentCategory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowFrequentCategory : bool with get, set" Usage="System.Windows.Shell.JumpList.ShowFrequentCategory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示常用项是否显示在跳转列表中。</summary>
        <value>如果常用项显示在跳转列表中，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容**频繁**类别管理的 Windows shell。 若要显示在跳转列表中经常使用的项目，请设置<xref:System.Windows.Shell.JumpList.ShowFrequentCategory%2A>属性设置为`true`。  
  
 **最近**并**频繁**类别通常包含许多相同的跳转项。 因此，应用程序通常显示**最近**或**频繁**跳转列表中，但不同时的类别。  
  
   
  
## Examples  
 下面的示例演示<xref:System.Windows.Shell.JumpList>配置为显示**频繁**类别。 此示例摘自一个更大的示例中提供<xref:System.Windows.Shell.JumpList>类概述。  
  
 [!code-xaml[Shell_JumpListSample#001](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#001)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowRecentCategory">
      <MemberSignature Language="C#" Value="public bool ShowRecentCategory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowRecentCategory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpList.ShowRecentCategory" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowRecentCategory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowRecentCategory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowRecentCategory : bool with get, set" Usage="System.Windows.Shell.JumpList.ShowRecentCategory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示最近使用的项是否显示在跳转列表中。</summary>
        <value>如果最近使用的项显示在跳转列表中，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容**最近**类别管理的 Windows shell。 若要显示在跳转列表中经常使用的项目，请设置<xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>属性设置为`true`。  
  
 **最近**并**频繁**类别通常包含许多相同的跳转项。 因此，应用程序通常显示**最近**或**频繁**跳转列表中，但不同时的类别。  
  
 您可以调用<xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A>方法来请求 Windows shell 添加的项**最近**项列表。 如果你的应用程序未注册为处理的项的文件名类型，则不会在中**最近**列表以及对调用<xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A>将以静默方式失败。  
  
   
  
## Examples  
 下面的示例演示<xref:System.Windows.Shell.JumpList>配置为显示**最近**类别。 此示例摘自一个更大的示例中提供<xref:System.Windows.Shell.JumpList>类概述。  
  
 [!code-xaml[Shell_JumpListSample#001](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#001)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>