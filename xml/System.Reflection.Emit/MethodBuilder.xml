<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MethodBuilder.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c93c1a358d5c177a5835b41cbeaeae252a6af730.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c93c1a358d5c177a5835b41cbeaeae252a6af730</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Defines and represents a method (or constructor) on a dynamic class.</source>
          <target state="translated">定义并表示动态类上的方法（或构造函数）。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> class is used to fully describe a method in Microsoft intermediate language (MSIL), including the name, attributes, signature, and method body.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>类用于全面地描述 Microsoft 中间语言 (MSIL) 中的一个方法，包括名称、 属性、 签名和方法的正文。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>It is used in conjunction with the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> class to create classes at runtime.</source>
          <target state="translated">结合使用<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph>类在运行时创建类。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Global methods and methods as type members</source>
          <target state="translated">全局方法和类型成员方法</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>You can use reflection emit to define global methods and to define methods as type members.</source>
          <target state="translated">你可以使用反射发出定义全局方法以及作为类型成员定义方法。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>The APIs that define methods return <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> objects.</source>
          <target state="translated">定义方法的 Api 返回<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Global methods</source>
          <target state="translated">全局方法</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>A global method is defined by using the <ph id="ph1">&lt;xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A?displayProperty=nameWithType&gt;</ph> method, which returns a <bpt id="p1">**</bpt>MethodBuilder<ept id="p1">**</ept> object.</source>
          <target state="translated">通过使用定义的全局方法<ph id="ph1">&lt;xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A?displayProperty=nameWithType&gt;</ph>方法，它返回<bpt id="p1">**</bpt>MethodBuilder<ept id="p1">**</ept>对象。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Global methods must be static.</source>
          <target state="translated">全局方法必须是静态的。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>If a dynamic module contains global methods, the <ph id="ph1">&lt;xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=nameWithType&gt;</ph> method must be called before persisting the dynamic module or the containing dynamic assembly because the common language runtime postpones fixing up the dynamic module until all global functions have been defined.</source>
          <target state="translated">如果动态模块包含全局性方法，<ph id="ph1">&lt;xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=nameWithType&gt;</ph>必须保持的动态模块或包含的动态程序集，因为公共语言运行时推迟整理之前所有的全局函数的动态模块之前调用方法已定义。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>A global native method is defined by using the <ph id="ph1">&lt;xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">通过使用定义的全局的本机方法<ph id="ph1">&lt;xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Platform invoke (PInvoke) methods must not be declared abstract or virtual.</source>
          <target state="translated">平台调用 (PInvoke) 抽象或虚拟，不能声明方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>The runtime sets the <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.PinvokeImpl?displayProperty=nameWithType&gt;</ph> attribute for a platform invoke method.</source>
          <target state="translated">运行时设置<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.PinvokeImpl?displayProperty=nameWithType&gt;</ph>属性对于平台调用方法。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Methods as members of types</source>
          <target state="translated">为的类型成员的方法</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>A method is defined as a type member by using the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType&gt;</ph> method, which returns a <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> object.</source>
          <target state="translated">一种方法指通过使用类型成员<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType&gt;</ph>方法，它返回<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A&gt;</ph> method is used to set the name and parameter attributes of a parameter, or of the return value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A&gt;</ph>方法用于设置的名称和参数的参数属性或属性的返回值。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.ParameterBuilder&gt;</ph> object returned by this method represents a parameter or the return value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.ParameterBuilder&gt;</ph>此方法返回的对象表示的参数或返回值。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.ParameterBuilder&gt;</ph> object can be used to set the marshaling, to set the constant value, and to apply custom attributes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.ParameterBuilder&gt;</ph>以设置封送处理、 设置常量值，以及要应用自定义特性，可以使用对象。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Attributes</source>
          <target state="translated">特性</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Members of the <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes&gt;</ph> enumeration define the precise character of a dynamic method:</source>
          <target state="translated">成员<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes&gt;</ph>枚举定义的动态方法的精确字符：</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Static methods are specified using the <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph> attribute.</source>
          <target state="translated">使用指定的静态方法<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Final methods (methods that cannot be overridden) are specified using the <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Final?displayProperty=nameWithType&gt;</ph> attribute.</source>
          <target state="translated">使用最终方法 （不能重写的方法） 来指定<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Final?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Virtual methods are specified using the <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Virtual?displayProperty=nameWithType&gt;</ph> attribute.</source>
          <target state="translated">虚方法使用指定<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Virtual?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Abstract methods are specified using the <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Abstract?displayProperty=nameWithType&gt;</ph> attribute.</source>
          <target state="translated">抽象方法使用指定<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Abstract?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Several attributes determine method visibility.</source>
          <target state="translated">多个特性确定方法的可见性。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>See the description of the <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes&gt;</ph> enumeration.</source>
          <target state="translated">请参阅说明<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes&gt;</ph>枚举。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Methods that implement overloaded operators must set the <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType&gt;</ph> attribute.</source>
          <target state="translated">实现重载的运算符的方法必须设置<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Finalizers must set the <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType&gt;</ph> attribute.</source>
          <target state="translated">终结器必须设置<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Known Issues</source>
          <target state="translated">已知问题</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Although <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> is derived from <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>, some of the abstract methods defined in the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> class are not fully implemented in <ph id="ph4">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>.</source>
          <target state="translated">尽管<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>派生自<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>，某些中定义的抽象方法<ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph>类中未完全实现<ph id="ph4">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>These <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> methods throw the <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">这些<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>方法将引发<ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>For example the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=nameWithType&gt;</ph> method is not fully implemented.</source>
          <target state="translated">例如<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=nameWithType&gt;</ph>方法未完全实现。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>You can reflect on these methods by retrieving the enclosing type using the <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">你可以通过检索封闭类型使用这些方法反映<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Custom modifiers are supported starting with the .NET Framework version 2.0.</source>
          <target state="translated">从.NET Framework 2.0 版开始支持自定义修饰符。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>They are not supported in earlier versions.</source>
          <target state="translated">在早期版本中不支持它们。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> class to create a method within a dynamic type.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>类，以创建一个动态类型中的方法。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>The security action to be taken (Demand, Assert, and so on).</source>
          <target state="translated">要执行的安全操作（Demand、Assert 等等）。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>The set of permissions the action applies to.</source>
          <target state="translated">应用此操作的权限集。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>Adds declarative security to this method.</source>
          <target state="translated">向此方法添加声明性安全。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A&gt;</ph> can be called several times, with each call specifying a security action (such as <ph id="ph2">`Demand`</ph>, <ph id="ph3">`Assert`</ph>, and <ph id="ph4">`Deny`</ph>) and a set of permissions that the action applies to.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A&gt;</ph> 可以调用多次，每次调用指定的安全操作 (如<ph id="ph2">`Demand`</ph>， <ph id="ph3">`Assert`</ph>，和<ph id="ph4">`Deny`</ph>) 和一组应用此操作的权限。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a method by using the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A&gt;</ph> method are stored in the old XML metadata format.</source>
          <target state="translated">在.NET Framework 版本 1.0、 1.1 和 2.0 中，应用于方法时使用的声明性安全属性<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A&gt;</ph>方法存储在旧的 XML 元数据格式。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>See Emitting Declarative Security Attributes.</source>
          <target state="translated">请参阅发出的声明性安全属性。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>The code sample below illustrates the contextual use of <ph id="ph1">`AddDeclarativeSecurity`</ph> to require the caller of a method to have unrestricted permissions.</source>
          <target state="translated">下面的代码示例演示如何上下文使用<ph id="ph1">`AddDeclarativeSecurity`</ph>需要方法的调用方具有不受限制的权限。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>The <ph id="ph1">&lt;paramref name="action" /&gt;</ph> is invalid (<ph id="ph2">&lt;see langword="RequestMinimum" /&gt;</ph>, <ph id="ph3">&lt;see langword="RequestOptional" /&gt;</ph>, and <ph id="ph4">&lt;see langword="RequestRefuse" /&gt;</ph> are invalid).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="action" /&gt;</ph> 无效（<ph id="ph2">&lt;see langword="RequestMinimum" /&gt;</ph>、<ph id="ph3">&lt;see langword="RequestOptional" /&gt;</ph> 和 <ph id="ph4">&lt;see langword="RequestRefuse" /&gt;</ph> 无效）。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>The containing type has been created using <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</source>
          <target state="translated">已使用 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> 创建包含类型。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>The permission set <ph id="ph1">&lt;paramref name="pset" /&gt;</ph> contains an action that was added earlier by <ph id="ph2">&lt;see cref="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" /&gt;</ph>.</source>
          <target state="translated">权限集 <ph id="ph1">&lt;paramref name="pset" /&gt;</ph> 包含之前由 <ph id="ph2">&lt;see cref="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" /&gt;</ph> 添加的操作。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source>For the current method, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">对于当前的方法，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
          <source><ph id="ph1">&lt;paramref name="pset" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pset" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.Attributes">
          <source>Retrieves the attributes for this method.</source>
          <target state="translated">检索此方法的属性。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.Attributes">
          <source>Read-only.</source>
          <target state="translated">只读。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.Attributes">
          <source>Retrieves the <ph id="ph1">&lt;see langword="MethodAttributes" /&gt;</ph> for this method.</source>
          <target state="translated">检索此方法的 <ph id="ph1">&lt;see langword="MethodAttributes" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
          <source>Returns the calling convention of the method.</source>
          <target state="translated">返回此方法的调用约定。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
          <source>Read-only.</source>
          <target state="translated">只读。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
          <source>The calling convention of the method.</source>
          <target state="translated">方法的调用约定。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
          <source>Not supported for this type.</source>
          <target state="translated">不支持此类型。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
          <source>Not supported.</source>
          <target state="translated">不支持。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> always represents a generic method definition, and thus cannot be invoked.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>始终表示泛型方法定义，并因此无法被调用。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅 <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType&gt;</ph> 和 <ph id="ph2">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
          <source>For information on generic types, see <ph id="ph1">&lt;xref:System.Type.IsGenericType%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">泛型类型的信息，请参阅<ph id="ph1">&lt;xref:System.Type.IsGenericType%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
          <source>The invoked method is not supported in the base class.</source>
          <target state="translated">基类不支持调用的方法。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>An array containing valid MSIL instructions.</source>
          <target state="translated">包含有效的 MSIL 指令的数组。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>If this parameter is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the method's body is cleared.</source>
          <target state="translated">如果此参数为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则清除方法的主体。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>The number of valid bytes in the MSIL array.</source>
          <target state="translated">MSIL 数组中的有效字节数。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>This value is ignored if MSIL is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果 MSIL 为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则忽略此值。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>Creates the body of the method using a supplied byte array of Microsoft intermediate language (MSIL) instructions.</source>
          <target state="translated">使用 Microsoft 中间语言 (MSIL) 指令提供的字节数组的创建方法的主体。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>This method creates the method's body from <ph id="ph1">`il`</ph>, an array containing MSIL instructions as opcodes.</source>
          <target state="translated">此方法创建从方法的主体<ph id="ph1">`il`</ph>、 包含作为操作码的 MSIL 指令的数组。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>The number of bytes of valid MSIL is given by count.</source>
          <target state="translated">计数由给定的有效的 MSIL 字节数。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>This is currently not fully supported.</source>
          <target state="translated">这是当前不完全支持。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>The user cannot supply the location of token fix ups and exception handlers.</source>
          <target state="translated">用户不能提供的令牌的修复和异常处理程序的位置。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>In the example provided below, a simple method that adds two integers is generated via opcode using <ph id="ph1">`CreateMethodBody`</ph>.</source>
          <target state="translated">在下面提供示例中，将添加两个整数的简单方法生成通过操作码使用<ph id="ph1">`CreateMethodBody`</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="count" /&gt;</ph> is not within the range of indexes of the supplied MSIL instruction array and <ph id="ph2">&lt;paramref name="il" /&gt;</ph> is not <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 不在提供的 MSIL 指令数组的索引范围内，且 <ph id="ph2">&lt;paramref name="il" /&gt;</ph> 不是 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>The containing type was previously created using <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</source>
          <target state="translated">该包含类型是以前使用 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> 创建的。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>This method was called previously on this <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> with an <ph id="ph2">&lt;paramref name="il" /&gt;</ph> argument that was not <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">以前在包含不是 <ph id="ph3">&lt;see langword="null" /&gt;</ph> 的 <ph id="ph2">&lt;paramref name="il" /&gt;</ph> 参数的此 <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> 上调用了此方法。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
          <source>For the current method, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">对于当前的方法，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
          <source>Returns the type that declares this method.</source>
          <target state="translated">返回声明此方法的类型。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
          <source>Read-only.</source>
          <target state="translated">只读。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
          <source>The type that declares this method.</source>
          <target state="translated">声明此方法的类型。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
          <source>The following code illustrates the use of the <ph id="ph1">`Type`</ph> property.</source>
          <target state="translated">下面的代码演示如何使用<ph id="ph1">`Type`</ph>属性。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>An array of strings that represent the names of the generic type parameters.</source>
          <target state="translated">一个字符串数组，表示泛型类型参数的名称。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> objects that can be used to define their constraints.</source>
          <target state="translated">设置当前方法的泛型类型参数的数目，指定其名称并返回一个可用于定义其约束的 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> 对象的数组。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> objects representing the type parameters of the generic method.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> 对象数组，表示泛型方法的类型参数。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>Calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method makes the current method generic.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph>方法使当前方法的泛型。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>There is no way to undo this change.</source>
          <target state="translated">没有要撤销此更改的方法。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>Calling this method a second time causes an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">第二次调用此方法会导致<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>The type parameters of the generic method can be retrieved later by using the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A&gt;</ph> method.</source>
          <target state="translated">可以通过使用更高版本检索泛型方法的类型参数<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>By convention, a type parameter name is a single uppercase letter.</source>
          <target state="translated">按照约定，类型参数名称是一个大写字母。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅 <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType&gt;</ph> 和 <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>For information on generic types, see <ph id="ph1">&lt;xref:System.Type.IsGenericType%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">泛型类型的信息，请参阅<ph id="ph1">&lt;xref:System.Type.IsGenericType%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>The following code example creates a dynamic type, <ph id="ph1">`DemoType`</ph>, which contains the dynamic generic method <ph id="ph2">`DemoMethod`</ph>.</source>
          <target state="translated">下面的代码示例创建一个动态类型， <ph id="ph1">`DemoType`</ph>，其中包含动态泛型方法<ph id="ph2">`DemoMethod`</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>This method has two generic type parameters, one of which is used as a parameter, and the other as the return type.</source>
          <target state="translated">此方法具有两个泛型类型参数，其中之一用作参数，而另一个用作返回类型。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>When the code is executed, the dynamic assembly is saved as DemoGenericMethod1.dll, and can be examined using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.</source>
          <target state="translated">执行代码时，该动态程序集会另存为 DemoGenericMethod1.dll，使用 <bpt id="p1">[</bpt>Ildasm.exe（IL 反汇编程序）<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> 可以对其进行检查。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>This code example generates a simple method body that merely returns a null reference.</source>
          <target state="translated">此代码示例生成仅返回 null 引用的简单的方法体。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>For a code example with a more fully developed method body that creates and uses generic types, see <bpt id="p1">[</bpt>How to: Define a Generic Method with Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md)</ept>.</source>
          <target state="translated">具有创建和使用泛型类型的多个完全开发的方法体的代码示例，请参阅<bpt id="p1">[</bpt>如何： 定义具有反射发出的泛型方法<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md)</ept>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>Generic type parameters have already been defined for this method.</source>
          <target state="translated">已为此方法定义了泛型类型参数。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>The method has been completed already.</source>
          <target state="translated">已完成该方法。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>The <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /&gt;</ph> method has been called for the current method.</source>
          <target state="translated">已为当前方法调用了 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source><ph id="ph1">&lt;paramref name="names" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="names" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source>An element of <ph id="ph1">&lt;paramref name="names" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="names" /&gt;</ph> 的元素为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
          <source><ph id="ph1">&lt;paramref name="names" /&gt;</ph> is an empty array.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="names" /&gt;</ph> 是一个空数组。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The position of the parameter in the parameter list.</source>
          <target state="translated">参数在参数列表中的位置。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.</source>
          <target state="translated">通过第一个参数以数字 1 开头对参数编制索引；数字 0 表示方法的返回值。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The parameter attributes of the parameter.</source>
          <target state="translated">参数的参数属性。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The name of the parameter.</source>
          <target state="translated">参数的名称。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The name can be the null string.</source>
          <target state="translated">名称可以是空字符串。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method.</source>
          <target state="translated">设置参数属性和此方法的参数名称或此方法的返回值的名称。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Returns a ParameterBuilder that can be used to apply custom attributes.</source>
          <target state="translated">返回可用于应用自定义属性的 ParameterBuilder。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="ParameterBuilder" /&gt;</ph> object that represents a parameter of this method or the return value of this method.</source>
          <target state="translated">返回 <ph id="ph1">&lt;see langword="ParameterBuilder" /&gt;</ph> 对象，该对象表示此方法的参数或此方法的返回值。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.ParameterBuilder&gt;</ph> object returned by this method can be used to set the default value for a parameter or to apply custom attributes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.ParameterBuilder&gt;</ph>设置参数的默认值或将应用自定义特性，可以使用此方法返回的对象。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Parameter numbering begins with 1, so <ph id="ph1">`position`</ph> is 1 for the first parameter.</source>
          <target state="translated">参数编号从 1 开始，因此<ph id="ph1">`position`</ph>对于第一个参数是 1。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>If <ph id="ph1">`position`</ph> is zero, this method affects the return value.</source>
          <target state="translated">如果<ph id="ph1">`position`</ph>为零，则此方法会影响返回值。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>In the .NET Framework versions 1.0 and 1.1, an exception is thrown if <ph id="ph1">`position`</ph> is zero, so this method cannot be used to modify attributes of the return value in those versions.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，如果引发异常<ph id="ph1">`position`</ph>为零，因此此方法不能用于修改在那些版本中的返回值的属性。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The method has no parameters.</source>
          <target state="translated">此方法没有参数。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source><ph id="ph1">&lt;paramref name="position" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="position" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source><ph id="ph1">&lt;paramref name="position" /&gt;</ph> is greater than the number of the method's parameters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="position" /&gt;</ph> 大于此方法的参数数目。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The containing type was previously created using <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</source>
          <target state="translated">该包含类型是以前使用 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> 创建的。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>For the current method, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">对于当前的方法，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
          <source>The object to compare with this <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> instance.</source>
          <target state="translated">要与此 <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> 实例进行比较的对象。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
          <source>Determines whether the given object is equal to this instance.</source>
          <target state="translated">确定给定对象是否等于此实例。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is an instance of <ph id="ph3">&lt;see langword="MethodBuilder" /&gt;</ph> and is equal to this object; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="MethodBuilder" /&gt;</ph> 的实例并且等于此对象，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
          <source>Equality is determined by having the same name, attributes, and signature.</source>
          <target state="translated">相等性取决具有相同的名称、 属性和签名。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
          <source>Return the base implementation for a method.</source>
          <target state="translated">返回方法的基实现。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
          <source>The base implementation of this method.</source>
          <target state="translated">此方法的基实现。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
          <source>This always returns the current <ph id="ph1">`MethodBuilder`</ph> object.</source>
          <target state="translated">它将始终返回当前<ph id="ph1">`MethodBuilder`</ph>对象。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Returns the custom attributes defined for this method.</source>
          <target state="translated">返回为此方法定义的自定义属性。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
          <source>Specifies whether to search this member's inheritance chain to find the custom attributes.</source>
          <target state="translated">指定是否搜索此成员的继承链以查找自定义属性。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
          <source>Returns all the custom attributes defined for this method.</source>
          <target state="translated">返回为此方法定义的所有自定义属性。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
          <source>Returns an array of objects representing all the custom attributes of this method.</source>
          <target state="translated">返回一个对象数组，其中的对象表示此方法的所有自定义属性。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
          <source>This method is not currently supported.</source>
          <target state="translated">目前尚不支持此方法。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
          <source>Retrieve the method using <ph id="ph1">&lt;see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> and call <ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph> on the returned <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> 检索此方法，并在返回的 <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 上调用 <ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The custom attribute type.</source>
          <target state="translated">自定义属性类型。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Specifies whether to search this member's inheritance chain to find the custom attributes.</source>
          <target state="translated">指定是否搜索此成员的继承链以查找自定义属性。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns the custom attributes identified by the given type.</source>
          <target state="translated">返回由给定类型标识的自定义属性。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns an array of objects representing the attributes of this method that are of type <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph>.</source>
          <target state="translated">返回一个对象数组，表示此方法的属性属于类型 <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method is not currently supported.</source>
          <target state="translated">目前尚不支持此方法。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Retrieve the method using <ph id="ph1">&lt;see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> and call <ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph> on the returned <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> 检索此方法，并在返回的 <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 上调用 <ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> objects that represent the type parameters of the method, if it is generic.</source>
          <target state="translated">返回表示此方法的类型参数的 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> 对象数组（如果为泛型）。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> objects representing the type parameters, if the method is generic, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method is not generic.</source>
          <target state="translated">如果方法是泛型，则为表示此类型参数的 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph>，或者如果方法不是泛型，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
          <source>The type parameters of a generic method also are returned by the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method that is used to define them.</source>
          <target state="translated">泛型方法的类型参数也由<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph>用于定义它们的方法。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅 <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType&gt;</ph> 和 <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
          <source>For information on generic types, see <ph id="ph1">&lt;xref:System.Type.IsGenericType%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">泛型类型的信息，请参阅<ph id="ph1">&lt;xref:System.Type.IsGenericType%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
          <source>Returns this method.</source>
          <target state="translated">返回此方法。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
          <source>The current instance of <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph> 的当前实例。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> cannot be used to emit a constructed generic method directly.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>不能用于直接发出一个构造泛型方法。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
          <source>The emitted method is a generic method definition.</source>
          <target state="translated">发出的方法是泛型方法定义。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">有关详细信息，请参阅 <ph id="ph1">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType&gt;</ph> 和 <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
          <source>For information on generic types, see <ph id="ph1">&lt;xref:System.Type.IsGenericType%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">泛型类型的信息，请参阅<ph id="ph1">&lt;xref:System.Type.IsGenericType%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
          <source>The current method is not generic.</source>
          <target state="translated">当前方法不是泛型方法。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
          <source>That is, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">也就是说，<ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 属性将返回 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
          <source>Gets the hash code for this method.</source>
          <target state="translated">获取此方法的哈希代码。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
          <source>The hash code for this method.</source>
          <target state="translated">此方法的哈希代码。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Returns an <ph id="ph1">&lt;see langword="ILGenerator" /&gt;</ph> for this method.</source>
          <target state="translated">为此方法返回 <ph id="ph1">&lt;see langword="ILGenerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
          <source>Returns an <ph id="ph1">&lt;see langword="ILGenerator" /&gt;</ph> for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.</source>
          <target state="translated">为此方法返回默认 Microsoft 中间语言 (MSIL) 流大小为 64 字节的 <ph id="ph1">&lt;see langword="ILGenerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
          <source>Returns an <ph id="ph1">&lt;see langword="ILGenerator" /&gt;</ph> object for this method.</source>
          <target state="translated">为此方法返回 <ph id="ph1">&lt;see langword="ILGenerator" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">`GetILGenerator`</ph> method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.</source>
          <target state="translated">下面的代码示例演示的上下文用法<ph id="ph1">`GetILGenerator`</ph>方法、 创建和发出动态程序集，将计算在三维空间中的两个点的点积。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
          <source>The method should not have a body because of its <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Reflection.MethodImplAttributes" /&gt;</ph> flags, for example because it has the <ph id="ph3">&lt;see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /&gt;</ph> flag.</source>
          <target state="translated">由于其 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="T:System.Reflection.MethodImplAttributes" /&gt;</ph> 标志，该方法不应具有主体，例如因为它具有 <ph id="ph3">&lt;see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /&gt;</ph> 标志。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
          <source>The method is a generic method, but not a generic method definition.</source>
          <target state="translated">此方法是泛型方法，但不是泛型方法定义。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
          <source>That is, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">也就是说，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
          <source>The size of the MSIL stream, in bytes.</source>
          <target state="translated">MSIL 流的大小（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
          <source>Returns an <ph id="ph1">&lt;see langword="ILGenerator" /&gt;</ph> for this method with the specified Microsoft intermediate language (MSIL) stream size.</source>
          <target state="translated">为此方法返回具有指定的 Microsoft 中间语言 (MSIL) 流大小的 <ph id="ph1">&lt;see langword="ILGenerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
          <source>Returns an <ph id="ph1">&lt;see langword="ILGenerator" /&gt;</ph> object for this method.</source>
          <target state="translated">为此方法返回 <ph id="ph1">&lt;see langword="ILGenerator" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">`GetILGenerator`</ph> method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.</source>
          <target state="translated">下面的代码示例演示的上下文用法<ph id="ph1">`GetILGenerator`</ph>方法、 创建和发出动态程序集，将计算在三维空间中的两个点的点积。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
          <source>The method should not have a body because of its <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Reflection.MethodImplAttributes" /&gt;</ph> flags, for example because it has the <ph id="ph3">&lt;see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /&gt;</ph> flag.</source>
          <target state="translated">由于其 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="T:System.Reflection.MethodImplAttributes" /&gt;</ph> 标志，该方法不应具有主体，例如因为它具有 <ph id="ph3">&lt;see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /&gt;</ph> 标志。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
          <source>The method is a generic method, but not a generic method definition.</source>
          <target state="translated">此方法是泛型方法，但不是泛型方法定义。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
          <source>That is, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">也就是说，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
          <source>Returns the implementation flags for the method.</source>
          <target state="translated">为此方法返回实现标志。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
          <source>Returns the implementation flags for the method.</source>
          <target state="translated">为此方法返回实现标志。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetModule">
          <source>Returns a reference to the module that contains this method.</source>
          <target state="translated">返回对包含此方法的模块的引用。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetModule">
          <source>Returns a reference to the module that contains this method.</source>
          <target state="translated">返回对包含此方法的模块的引用。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.GetModule">
          <source>The sample code below illustrates the usage of the <ph id="ph1">`GetModule`</ph> method to retrieve information about a dynamically-generated module.</source>
          <target state="translated">下面的示例代码演示了的用法<ph id="ph1">`GetModule`</ph>方法来检索有关动态生成的模块的信息。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetParameters">
          <source>Returns the parameters of this method.</source>
          <target state="translated">返回此方法的参数。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetParameters">
          <source>An array of <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> objects that represent the parameters of the method.</source>
          <target state="translated">表示此方法的参数的 <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> 对象数组。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.GetParameters">
          <source>The code sample below illustrates the use of <ph id="ph1">`GetParameters`</ph> to discover information on the parameters passed to a dynamically-generated method.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">`GetParameters`</ph>来发现传递到动态生成的方法的参数信息。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetParameters">
          <source>This method is not currently supported.</source>
          <target state="translated">目前尚不支持此方法。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetParameters">
          <source>Retrieve the method using <ph id="ph1">&lt;see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> and call <ph id="ph2">&lt;see langword="GetParameters" /&gt;</ph> on the returned <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> 检索此方法，并在返回的 <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 上调用 <ph id="ph2">&lt;see langword="GetParameters" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetToken">
          <source>Returns the <ph id="ph1">&lt;see langword="MethodToken" /&gt;</ph> that represents the token for this method.</source>
          <target state="translated">返回表示此方法的标记的 <ph id="ph1">&lt;see langword="MethodToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.GetToken">
          <source>Returns the <ph id="ph1">&lt;see langword="MethodToken" /&gt;</ph> of this method.</source>
          <target state="translated">返回此方法的 <ph id="ph1">&lt;see langword="MethodToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.InitLocals">
          <source>Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized.</source>
          <target state="translated">获取或设置一个布尔值，该值指定此方法中的局部变量是否初始化为零。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.InitLocals">
          <source>The default value of this property is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">此属性的默认值为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.InitLocals">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the local variables in this method should be zero initialized; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果应将此方法中的局部变量初始化为零，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.InitLocals">
          <source>If this property is set to <ph id="ph1">`true`</ph>, the emitted MSIL includes initialization of local variables.</source>
          <target state="translated">如果此属性设置为<ph id="ph1">`true`</ph>，发出的 MSIL 包括本地变量的初始化。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.InitLocals">
          <source>If it is set to <ph id="ph1">`false`</ph>, local variables are not initialized and the generated code is unverifiable.</source>
          <target state="translated">如果设置为<ph id="ph1">`false`</ph>、 未初始化本地变量和生成的代码也无法进行验证。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.InitLocals">
          <source>For the current method, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">对于当前的方法，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.InitLocals">
          <source>(Get or set.)</source>
          <target state="translated">（获取或设置。）</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object on which to invoke the specified method.</source>
          <target state="translated">在其上调用指定方法的对象。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the method is static, this parameter is ignored.</source>
          <target state="translated">如果方法是静态的，则忽略此参数。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph>, and so on.</source>
          <target state="translated">这必须是来自 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> 的位标志：<ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>、<ph id="ph3">&lt;see langword="NonPublic" /&gt;</ph> 等等。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection.</source>
          <target state="translated">启用绑定、强制参数类型、调用成员并通过反射检索 MemberInfo 对象的对象。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If binder is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">如果 binder 为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则使用默认活页夹。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For more details, see <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</source>
          <target state="translated">有关更多详细信息，请参阅 <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An argument list.</source>
          <target state="translated">自变量列表。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</source>
          <target state="translated">此自变量数组在数量、顺序和类型方面与要调用的方法的参数相同。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If there are no parameters this should be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果不存在任何参数，则应为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> used to govern the coercion of types.</source>
          <target state="translated">用于控制类型强制的 <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> 的实例。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this is null, the <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">如果这是 NULL，则使用当前线程的 <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>(Note that this is necessary to, for example, convert a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that represents 1000 to a <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> value, since 1000 is represented differently by different cultures.)</source>
          <target state="translated">（请注意，例如，这对于将表示 1000 的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 转换为 <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> 值是必需的，因为不同的区域性以不同的方式表示 1000。）</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.</source>
          <target state="translated">动态调用方法，此方法由此实例在给定对象上进行反射，传递指定的参数，并受给定绑定器的约束。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Returns an object containing the return value of the invoked method.</source>
          <target state="translated">返回包含已调用方法的返回值的对象。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the method is static, the <ph id="ph1">`obj`</ph> parameter is ignored.</source>
          <target state="translated">如果该方法是静态的<ph id="ph1">`obj`</ph>参数将被忽略。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For non-static methods, <ph id="ph1">`obj`</ph> should be an instance of a class that inherits or declares the method and must be the same type as this class.</source>
          <target state="translated">对于非静态方法，<ph id="ph1">`obj`</ph>应是继承或声明方法并且必须是与此类的类型相同的类的实例。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the method has no parameters, the value of <ph id="ph1">`parameters`</ph> should be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果该方法不具有任何参数，值<ph id="ph1">`parameters`</ph>应<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters for the method reflected by this instance.</source>
          <target state="translated">否则数量、 类型和参数数组中的元素的顺序应该是数量、 类型和此实例反射的方法参数的顺序相同。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Access restrictions are ignored for fully-trusted code.</source>
          <target state="translated">访问限制会忽略完全受信任的代码。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully-trusted.</source>
          <target state="translated">即私有构造函数、 方法、 字段和属性可以访问并调用完全信任代码时使用反射。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This method is not currently supported.</source>
          <target state="translated">目前尚不支持此方法。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Retrieve the method using <ph id="ph1">&lt;see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> and call <ph id="ph2">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph> on the returned <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> 检索此方法，并在返回的 <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 上调用 <ph id="ph2">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
          <source>The custom attribute type.</source>
          <target state="translated">自定义属性类型。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Specifies whether to search this member's inheritance chain to find the custom attributes.</source>
          <target state="translated">指定是否搜索此成员的继承链以查找自定义属性。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Checks if the specified custom attribute type is defined.</source>
          <target state="translated">检查是否定义了指定的自定义属性类型。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified custom attribute type is defined; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果定义了指定的自定义属性类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
          <source>This method is not currently supported.</source>
          <target state="translated">目前尚不支持此方法。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Retrieve the method using <ph id="ph1">&lt;see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> and call <ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph> on the returned <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> 检索此方法，并在返回的 <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 上调用 <ph id="ph2">&lt;see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
          <source>Gets a value indicating whether the method is a generic method.</source>
          <target state="translated">获取一个值，该值指示方法是否为泛型方法。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method is generic; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果该方法是泛型方法，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
          <source>A method is generic if it has type parameters.</source>
          <target state="translated">一种方法是泛型，如果它没有类型参数。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
          <source>You can make a method generic by calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method to add type parameters.</source>
          <target state="translated">你可以一种方法泛型通过调用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph>方法将添加类型参数。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
          <source>This change cannot be reversed.</source>
          <target state="translated">无法撤消此更改。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
          <source>The following code example displays the status of a method.</source>
          <target state="translated">下面的代码示例显示方法的状态。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
          <source>Gets a value indicating whether the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph> object represents the definition of a generic method.</source>
          <target state="translated">获取一个值，该值指示当前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph> 对象是否表示泛型方法的定义。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph> object represents the definition of a generic method; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果当前 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph> 对象表示泛型方法的定义，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> can only be used to create generic method definitions; it cannot be used to create a constructed generic method directly.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>仅用于创建泛型方法定义; 它不用于直接创建一个构造泛型方法。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
          <source>However, a subclass of <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> might represent a constructed generic method.</source>
          <target state="translated">但是的一个子类<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>可能表示一个构造泛型方法。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
          <source>The following code example displays the status of a method.</source>
          <target state="translated">下面的代码示例显示方法的状态。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in all cases.</source>
          <target state="translated">在所有情况下均引发 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in all cases.</source>
          <target state="translated">在所有情况下均引发 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
          <source>To determine whether a method in a dynamic assembly is security-critical, complete the type by calling <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Type.GetMethod%2A&gt;</ph> method on the completed type, and get the <ph id="ph3">&lt;xref:System.Reflection.MethodBase.IsSecurityCritical%2A&gt;</ph> property on the resulting <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph>.</source>
          <target state="translated">若要确定在动态程序集方法是否是安全关键，完成的类型，通过调用<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph>，调用<ph id="ph2">&lt;xref:System.Type.GetMethod%2A&gt;</ph>方法已完成的类型，并获取<ph id="ph3">&lt;xref:System.Reflection.MethodBase.IsSecurityCritical%2A&gt;</ph>所产生的属性<ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
          <source>In all cases.</source>
          <target state="translated">在所有情况下。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
          <source>This property is not supported in dynamic assemblies.</source>
          <target state="translated">动态程序集中不支持此属性。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in all cases.</source>
          <target state="translated">在所有情况下均引发 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in all cases.</source>
          <target state="translated">在所有情况下均引发 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
          <source>To determine whether a method in a dynamic assembly is security-safe-critical, complete the type by calling <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Type.GetMethod%2A&gt;</ph> method on the completed type, and get the <ph id="ph3">&lt;xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A&gt;</ph> property on the resulting <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph>.</source>
          <target state="translated">若要确定在动态程序集方法是否是安全-可靠-关键，完成的类型，通过调用<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph>，调用<ph id="ph2">&lt;xref:System.Type.GetMethod%2A&gt;</ph>方法已完成的类型，并获取<ph id="ph3">&lt;xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A&gt;</ph>所产生的属性<ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
          <source>In all cases.</source>
          <target state="translated">在所有情况下。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
          <source>This property is not supported in dynamic assemblies.</source>
          <target state="translated">动态程序集中不支持此属性。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in all cases.</source>
          <target state="translated">在所有情况下均引发 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in all cases.</source>
          <target state="translated">在所有情况下均引发 <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
          <source>To determine whether a method in a dynamic assembly is security-transparent, complete the type by calling <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Type.GetMethod%2A&gt;</ph> method on the completed type, and get the <ph id="ph3">&lt;xref:System.Reflection.MethodBase.IsSecurityTransparent%2A&gt;</ph> property on the resulting <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph>.</source>
          <target state="translated">若要确定在动态程序集的方法是否是安全透明，完成的类型，通过调用<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph>，调用<ph id="ph2">&lt;xref:System.Type.GetMethod%2A&gt;</ph>方法已完成的类型，并获取<ph id="ph3">&lt;xref:System.Reflection.MethodBase.IsSecurityTransparent%2A&gt;</ph>所产生的属性<ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
          <source>In all cases.</source>
          <target state="translated">在所有情况下。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
          <source>This property is not supported in dynamic assemblies.</source>
          <target state="translated">动态程序集中不支持此属性。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that represent the type arguments for the generic method.</source>
          <target state="translated">表示泛型方法的类型参数的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象的数组。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source>Returns a generic method constructed from the current generic method definition using the specified generic type arguments.</source>
          <target state="translated">返回使用指定泛型类型参数从当前泛型方法定义构造的泛型方法。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> representing the generic method constructed from the current generic method definition using the specified generic type arguments.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>，它表示使用指定泛型类型参数从当前泛型方法定义构造的泛型方法。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source>When you are emitting dynamic code, you might need to emit a call to a method constructed from the generic method definition represented by a <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>, before the enclosing type has been completed.</source>
          <target state="translated">在发出动态代码时，你可能需要发出从所表示的泛型方法定义构造的方法调用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>之前已完成的封闭类型。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source>You can use the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A&gt;</ph> method to create a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for such a constructed method, and use the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> in the emitted call.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A&gt;</ph>方法来创建<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>此类的构造的方法，并使用<ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph>发出的调用中。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source>The following code example creates a constructed method from an incomplete generic method definition in an incomplete type.</source>
          <target state="translated">下面的代码示例创建从完整的类型中不完整的泛型方法定义的构造的方法。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source>The example creates a transient assembly and module with a single type, adds a method <ph id="ph1">`M`</ph>, and makes the method generic by adding a type parameter T using the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method.</source>
          <target state="translated">该示例创建了一个单一类型的瞬态程序集和模块，添加一个方法<ph id="ph1">`M`</ph>，并使该方法由类型参数 T 使用添加泛型<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source>The type parameter is used as the type of the method's parameter, and also as its return type.</source>
          <target state="translated">作为该方法的参数的类型以及作为其返回类型，使用类型参数。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source>The generic method definition is not given a body, and the enclosing type is not completed.</source>
          <target state="translated">泛型方法定义未给定主体，和未完成的封闭类型。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A&gt;</ph> method is then used to make the constructed method <ph id="ph2">`M&lt;String&gt;`</ph> (<ph id="ph3">`M(Of String)`</ph> in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A&gt;</ph>方法然后用于使构造的方法<ph id="ph2">`M&lt;String&gt;`</ph>(<ph id="ph3">`M(Of String)`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source>The example code has no output, because the subclass of <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A&gt;</ph> method does not allow reflection over its parameters.</source>
          <target state="translated">此代码示例具有任何输出，因为的子类<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>返回<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A&gt;</ph>方法不允许通过其参数的反射。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source>For another code example that uses <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A&gt;</ph>, see <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph>.</source>
          <target state="translated">有关使用的另一个代码示例<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A&gt;</ph>，请参阅<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A&gt;</ph> is also used extensively when emitting code that uses generic types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A&gt;</ph> 也广泛时发出使用泛型类型的代码。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
          <source>See <bpt id="p1">[</bpt>How to: Define a Generic Method with Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md)</ept>.</source>
          <target state="translated">请参阅<bpt id="p1">[</bpt>如何： 定义一个泛型方法，使用反射发出<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md)</ept>。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
          <source>Retrieves the internal handle for the method.</source>
          <target state="translated">检索此方法的内部句柄。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
          <source>Use this handle to access the underlying metadata handle.</source>
          <target state="translated">使用此句柄来访问基础元数据句柄。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
          <source>Read-only.</source>
          <target state="translated">只读。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
          <source>The internal handle for the method.</source>
          <target state="translated">方法的内部处理程序。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
          <source>Use this handle to access the underlying metadata handle.</source>
          <target state="translated">使用此句柄来访问基础元数据句柄。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
          <source>This method is not currently supported.</source>
          <target state="translated">目前尚不支持此方法。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
          <source>Retrieve the method using <ph id="ph1">&lt;see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> and call <ph id="ph2">&lt;see cref="P:System.Reflection.MethodBase.MethodHandle" /&gt;</ph> on the returned <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /&gt;</ph> 检索此方法，并在返回的 <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 上调用 <ph id="ph2">&lt;see cref="P:System.Reflection.MethodBase.MethodHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.Module">
          <source>Gets the module in which the current method is being defined.</source>
          <target state="translated">获取在其中定义了当前方法的模块。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.Module">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> in which the member represented by the current <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> is being defined.</source>
          <target state="translated">正在定义的当前 <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> 所表示的成员所在的 <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.Module">
          <source>This property is provided as a convenience.</source>
          <target state="translated">提供此属性是为方便起见。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.Module">
          <source>It is equivalent to using the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A&gt;</ph> property to get the type in which the method is being declared, and then calling the <ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph> property of the resulting <ph id="ph3">&lt;xref:System.Type&gt;</ph> object.</source>
          <target state="translated">它相当于使用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A&gt;</ph>要获取在其中被声明该方法，其类型的属性并调用<ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph>属性生成<ph id="ph3">&lt;xref:System.Type&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.Module">
          <source>This property is also equivalent to calling <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.GetModule%2A&gt;</ph>.</source>
          <target state="translated">此属性也是等效于调用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.GetModule%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.Name">
          <source>Retrieves the name of this method.</source>
          <target state="translated">检索此方法的名称。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.Name">
          <source>Read-only.</source>
          <target state="translated">只读。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.Name">
          <source>Retrieves a string containing the simple name of this method.</source>
          <target state="translated">检索包含此方法简单名称的字符串。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
          <source>Retrieves the class that was used in reflection to obtain this object.</source>
          <target state="translated">检索在反射中用于获取此对象的类。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
          <source>Read-only.</source>
          <target state="translated">只读。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
          <source>The type used to obtain this method.</source>
          <target state="translated">用于获取此方法的类型。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> object that contains information about the return type of the method, such as whether the return type has custom modifiers.</source>
          <target state="translated">获取一个 <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> 对象，该对象包含有关方法的返回类型的信息（例如返回类型是否具有自定义修饰符）。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> object that contains information about the return type.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> 对象，包含有关返回类型的信息。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
          <source>Compiler designers can use the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> object returned by this property to discover whether custom modifiers, such as <ph id="ph2">&lt;xref:Microsoft.VisualC.IsConstModifier&gt;</ph>, have been applied to the return type.</source>
          <target state="translated">编译器设计人员可以使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>对象返回此属性来发现是否自定义修饰符，如<ph id="ph2">&lt;xref:Microsoft.VisualC.IsConstModifier&gt;</ph>，已应用于返回类型。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
          <source>The declaring type has not been created.</source>
          <target state="translated">尚未创建声明类型。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.ReturnType">
          <source>Gets the return type of the method represented by this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph>.</source>
          <target state="translated">获取此 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph> 所表示的方法的返回类型。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ReturnType">
          <source>The return type of the method.</source>
          <target state="translated">方法的返回类型。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ReturnType">
          <source>Starting with the .NET Framework 2.0 and the .NET Compact Framework 2.0, this member is inherited from the base class, <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>.</source>
          <target state="translated">从.NET Framework 2.0 和.NET Compact Framework 2.0 开始，此成员从基类继承， <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ReturnType">
          <source>See <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">请参阅 <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
          <source>Returns the custom attributes of the method's return type.</source>
          <target state="translated">返回此方法的返回类型的自定义属性。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
          <source>Read-only.</source>
          <target state="translated">只读。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
          <source>The custom attributes of the method's return type.</source>
          <target state="translated">此方法的返回类型的自定义属性。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
          <source>This method always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">此方法始终返回 <ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
          <source>Get the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> after the containing <ph id="ph2">&lt;xref:System.Type&gt;</ph> has been created and invoked <ph id="ph3">&lt;xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A&gt;</ph> on the <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph>.</source>
          <target state="translated">获取<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>后包含<ph id="ph2">&lt;xref:System.Type&gt;</ph>已创建并调用<ph id="ph3">&lt;xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A&gt;</ph>上<ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.MethodBuilder">
          <source>Sets a custom attribute.</source>
          <target state="translated">设置自定义属性。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>An instance of a helper class to describe the custom attribute.</source>
          <target state="translated">用于描述自定义属性的帮助器类的实例。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>Sets a custom attribute using a custom attribute builder.</source>
          <target state="translated">使用自定义属性生成器设置自定义属性。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph> method can interact with the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method when the two methods are used in combination.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph>方法可以与交互<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph>方法结合使用两个方法时。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>See the Remarks section of the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method for details.</source>
          <target state="translated">请参阅备注部分的<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph>有关详细信息的方法。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source><ph id="ph1">&lt;paramref name="customBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="customBuilder" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>For the current method, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">对于当前的方法，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The constructor for the custom attribute.</source>
          <target state="translated">自定义属性的构造函数。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>A byte blob representing the attributes.</source>
          <target state="translated">表示属性的字节 blob。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>Sets a custom attribute using a specified custom attribute blob.</source>
          <target state="translated">使用指定的自定义属性 blob 设置自定义属性。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>For details on how to format <ph id="ph1">`binaryAttribute`</ph>, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">有关如何设置格式的详细信息<ph id="ph1">`binaryAttribute`</ph>，请参阅公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分： 元数据定义和语义"。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">可联机获取该文档；请参阅 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>和 Ecma International 网站上的<bpt id="p2">[</bpt>标准 ECMA-335 - 公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph> method can interact with the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method when the two methods are used in combination.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph>方法可以与交互<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph>方法结合使用两个方法时。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>See the Remarks section of the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method for details.</source>
          <target state="translated">请参阅备注部分的<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph>有关详细信息的方法。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> or <ph id="ph2">&lt;paramref name="binaryAttribute" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="binaryAttribute" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>For the current method, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">对于当前的方法，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>The implementation flags to set.</source>
          <target state="translated">要设置的实现标志。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>Sets the implementation flags for this method.</source>
          <target state="translated">为此方法设置实现标志。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>When you use the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method in combination with the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph> method, be aware of potential interactions.</source>
          <target state="translated">当你使用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph>方法结合<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph>方法，请注意可能的交互。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>For example, using the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph> method to add the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute also sets the <ph id="ph3">&lt;xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">例如，使用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph>方法将添加<ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>还属性集<ph id="ph3">&lt;xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>If you subsequently call the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Reflection.MethodImplAttributes.PreserveSig&gt;</ph> flag is overwritten.</source>
          <target state="translated">如果您随后调用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Reflection.MethodImplAttributes.PreserveSig&gt;</ph>覆盖标志。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>There are two ways to avoid this:</source>
          <target state="translated">有两种方法来避免这种情况：</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>Call the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method before you call the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph> method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph>方法之前调用<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph> method always respects existing method implementation flags.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph>方法始终遵循现有的方法实现标志。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>When you set implementation flags, call the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A&gt;</ph> method to retrieve the existing flags, use bitwise OR to add your flag, and then call the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method.</source>
          <target state="translated">当设置实现标志时，调用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A&gt;</ph>方法检索现有标志，请使用按位或以添加您的标志，然后调用<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>The code sample below illustrates the contextual use of the <ph id="ph1">`SetImplementationFlags`</ph> method to describe the implementation of MSIL in a method body.</source>
          <target state="translated">下面的代码示例演示如何上下文使用<ph id="ph1">`SetImplementationFlags`</ph>方法，用于描述在方法体中的 MSIL 实现。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>The containing type was previously created using <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</source>
          <target state="translated">该包含类型是以前使用 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> 创建的。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
          <source>For the current method, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">对于当前的方法，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)">
          <source>Marshaling information for the return type of this method.</source>
          <target state="translated">此方法的返回类型的封送处理信息。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)">
          <source>Sets marshaling information for the return type of this method.</source>
          <target state="translated">设置此方法的返回类型的封送处理信息。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)">
          <source>The code sample below illustrates the contextual usage of the <ph id="ph1">`SetMarshal`</ph> method to marshal the results of a method call as a different type.</source>
          <target state="translated">下面的代码示例演示的上下文用法<ph id="ph1">`SetMarshal`</ph>方法进行封送处理为不同类型的方法调用的结果。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)">
          <source>The containing type was previously created using <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</source>
          <target state="translated">该包含类型是以前使用 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> 创建的。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)">
          <source>For the current method, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">对于当前的方法，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>An array that contains valid MSIL instructions.</source>
          <target state="translated">包含有效 MSIL 指令的数组。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The maximum stack evaluation depth.</source>
          <target state="translated">最大堆栈评估深度。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>An array of bytes that contain the serialized local variable structure.</source>
          <target state="translated">包含序列化本地变量结构的字节数组。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Specify <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the method has no local variables.</source>
          <target state="translated">如果此方法不具有任何本地变量，则指定 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A collection that contains the exception handlers for the method.</source>
          <target state="translated">包含此方法的异常处理程序的集合。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Specify <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the method has no exception handlers.</source>
          <target state="translated">如果此方法没有异常处理程序，则指定 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A collection of values that represent offsets in <bpt id="p1">&lt;c&gt;</bpt>il<ept id="p1">&lt;/c&gt;</ept>, each of which specifies the beginning of a token that may be modified.</source>
          <target state="translated">表示 <bpt id="p1">&lt;c&gt;</bpt>il<ept id="p1">&lt;/c&gt;</ept> 中的偏移量的值的集合，其中的每个值指定可以修改的令牌起始点。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Specify <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the method has no tokens that have to be modified.</source>
          <target state="translated">如果此方法没有需要修改的令牌，则指定 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Creates the body of the method by using a specified byte array of Microsoft intermediate language (MSIL) instructions.</source>
          <target state="translated">通过使用 Microsoft 中间语言 (MSIL) 指令指定的字节数组创建方法的主体。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="il" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="il" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="maxStack" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="maxStack" /&gt;</ph> 为负数。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>One of <ph id="ph1">&lt;paramref name="exceptionHandlers" /&gt;</ph> specifies an offset outside of <ph id="ph2">&lt;paramref name="il" /&gt;</ph>.</source>
          <target state="translated">其中一个 <ph id="ph1">&lt;paramref name="exceptionHandlers" /&gt;</ph> 指定 <ph id="ph2">&lt;paramref name="il" /&gt;</ph> 外部的偏移量。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>One of <ph id="ph1">&lt;paramref name="tokenFixups" /&gt;</ph> specifies an offset that is outside the <ph id="ph2">&lt;paramref name="il" /&gt;</ph> array.</source>
          <target state="translated">其中一个 <ph id="ph1">&lt;paramref name="tokenFixups" /&gt;</ph> 指定 <ph id="ph2">&lt;paramref name="il" /&gt;</ph> 数组外部的偏移量。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The containing type was previously created using the <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> method.</source>
          <target state="translated">该包含类型是以前使用 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> 方法创建的。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})">
          <source>This method was called previously on this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph> object.</source>
          <target state="translated">之前已在此 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph> 对象上调用过此方法。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects representing the parameter types.</source>
          <target state="translated">表示参数类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象的数组。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
          <source>Sets the number and types of parameters for a method.</source>
          <target state="translated">为方法设置参数的数量和类型。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
          <source>If the number and types of the parameters are known when the method is defined, they can be set using any overload of the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType&gt;</ph> method that accepts an array of parameter types.</source>
          <target state="translated">如果在定义方法时已知的数量和类型的参数，可以使用的任何重载设置<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType&gt;</ph>接受的参数类型数组的方法。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
          <source>However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined.</source>
          <target state="translated">但是，泛型方法可以具有其类型由一个或多个其自己的泛型类型参数，即后定义方法不能定义之前指定的参数。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
          <source>Use this method to set the parameter types in that case.</source>
          <target state="translated">使用此方法在这种情况下设置的参数类型。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
          <source>If the return type has optional or required custom modifiers, such as <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsConst&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29&gt;</ph> method overload.</source>
          <target state="translated">如果返回类型具有可选或所需的自定义修饰符，如<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsConst&gt;</ph>，使用<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29&gt;</ph>方法重载。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
          <source>Calling this method replaces any parameter types that were set using the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">调用此方法将替换任何已设置使用的参数类型<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method to make a method generic.</source>
          <target state="translated">下面的代码示例使用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph>方法，以便泛型方法。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A&gt;</ph> method is used to give the method one parameter, whose type will be specified by the first generic type parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A&gt;</ph>方法用于为方法一个参数，其类型将由第一个泛型类型参数指定。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A&gt;</ph> method is used to give the method a return type, specified by the second generic type parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A&gt;</ph>方法用于为第二个泛型类型参数所指定的返回类型的方法。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
          <source>The current method is generic, but is not a generic method definition.</source>
          <target state="translated">当前方法是泛型方法，但不是泛型方法定义。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
          <source>That is, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">也就是说，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the return type of the method.</source>
          <target state="translated">表示方法的返回类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
          <source>Sets the return type of the method.</source>
          <target state="translated">设置方法的返回类型。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
          <source>Use this method to set the return type of a generic method, when the return type is specified by one of the generic type parameters of the method.</source>
          <target state="translated">使用此方法时返回的类型由泛型类型参数的方法之一指定设置的泛型方法的返回类型。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
          <source>If the return type has optional or required custom modifiers, such as <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsConst&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29&gt;</ph> method overload.</source>
          <target state="translated">如果返回类型具有可选或所需的自定义修饰符，如<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsConst&gt;</ph>，使用<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29&gt;</ph>方法重载。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
          <source>Calling this method replaces a return type established using the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">调用此方法将替换的返回类型建立使用<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method to make a method generic.</source>
          <target state="translated">下面的代码示例使用<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph>方法，以便泛型方法。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A&gt;</ph> method is used to give the method one parameter, whose type will be specified by the first generic type parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A&gt;</ph>方法用于为方法一个参数，其类型将由第一个泛型类型参数指定。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A&gt;</ph> method is used to give the method a return type, specified by the second generic type parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A&gt;</ph>方法用于为第二个泛型类型参数所指定的返回类型的方法。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
          <source>This code is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method.</source>
          <target state="translated">此代码摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
          <source>The current method is generic, but is not a generic method definition.</source>
          <target state="translated">当前方法是泛型方法，但不是泛型方法定义。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
          <source>That is, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">也就是说，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>The return type of the method.</source>
          <target state="translated">方法的返回类型。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>An array of types representing the required custom modifiers, such as <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>, for the return type of the method.</source>
          <target state="translated">一个类型数组，表示该方法的返回类型所必需的自定义修饰符，如 <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>If the return type has no required custom modifiers, specify <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果返回类型没有所需的自定义修饰符，则指定 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>An array of types representing the optional custom modifiers, such as <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>, for the return type of the method.</source>
          <target state="translated">一个类型数组，表示该方法的返回类型的可选自定义修饰符，如 <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>If the return type has no optional custom modifiers, specify <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果返回类型没有可选的自定义修饰符，则指定 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>The types of the parameters of the method.</source>
          <target state="translated">方法参数的类型。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>An array of arrays of types.</source>
          <target state="translated">由类型数组组成的数组。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>Each array of types represents the required custom modifiers for the corresponding parameter, such as <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>.</source>
          <target state="translated">每个类型数组均表示相应参数所必需的自定义修饰符，如 <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>If a particular parameter has no required custom modifiers, specify <ph id="ph1">&lt;see langword="null" /&gt;</ph> instead of an array of types.</source>
          <target state="translated">如果某个特定参数没有所需的自定义修饰符，则指定 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，而不要指定类型数组。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>If none of the parameters have required custom modifiers, specify <ph id="ph1">&lt;see langword="null" /&gt;</ph> instead of an array of arrays.</source>
          <target state="translated">如果所有参数都没有所需的自定义修饰符，则指定 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，而不要指定由数组组成的数组。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>An array of arrays of types.</source>
          <target state="translated">由类型数组组成的数组。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>Each array of types represents the optional custom modifiers for the corresponding parameter, such as <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>.</source>
          <target state="translated">每个类型数组均表示相应参数的可选自定义修饰符，如 <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>If a particular parameter has no optional custom modifiers, specify <ph id="ph1">&lt;see langword="null" /&gt;</ph> instead of an array of types.</source>
          <target state="translated">如果某个特定参数没有可选的自定义修饰符，则指定 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，而不要指定类型数组。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>If none of the parameters have optional custom modifiers, specify <ph id="ph1">&lt;see langword="null" /&gt;</ph> instead of an array of arrays.</source>
          <target state="translated">如果所有参数都没有可选的自定义修饰符，则指定 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，而不要指定由数组组成的数组。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.</source>
          <target state="translated">设置方法签名，包括返回类型、参数类型以及返回类型和参数类型所需和可选的自定义修饰符。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>If the return type and the number and types of the parameters are known when the method is defined, they can be established using any overload of the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType&gt;</ph> method that accepts an array of parameter types.</source>
          <target state="translated">如果返回类型的数量和类型的参数已知时定义方法，可以使用的任何重载建立<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType&gt;</ph>接受的参数类型数组的方法。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined.</source>
          <target state="translated">但是，泛型方法可以具有其类型由一个或多个其自己的泛型类型参数，即后定义方法不能定义之前指定的参数。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>Use this method to set the parameter types in that case.</source>
          <target state="translated">使用此方法在这种情况下设置的参数类型。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>If neither the return type nor the parameter types have optional or required custom modifiers, such as <ph id="ph1">&lt;xref:Microsoft.VisualC.IsConstModifier&gt;</ph>, you can use the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A&gt;</ph> methods.</source>
          <target state="translated">如果返回类型和参数类型都不具有可选或所需的自定义修饰符，如<ph id="ph1">&lt;xref:Microsoft.VisualC.IsConstModifier&gt;</ph>，你可以使用<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>Calling this method replaces the parameters and return type established using the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">调用此方法取代了参数和返回类型建立使用<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>The following code example contains source code for a generic class named Sample that has a type parameter <ph id="ph1">`T`</ph>.</source>
          <target state="translated">下面的代码示例包含一个名为示例，具有类型参数的泛型类的源代码<ph id="ph1">`T`</ph>。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>The class has a field named <ph id="ph1">`Field`</ph>, of type <ph id="ph2">`T`</ph>, and a generic method <ph id="ph3">`GM`</ph> with its own type parameter, <ph id="ph4">`U`</ph>.</source>
          <target state="translated">此类具有名为的字段<ph id="ph1">`Field`</ph>，类型的<ph id="ph2">`T`</ph>，和泛型方法<ph id="ph3">`GM`</ph>包含其自身类型参数， <ph id="ph4">`U`</ph>。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>Method <ph id="ph1">`GM`</ph> creates an instance of Sample, substituting its own type parameter <ph id="ph2">`U`</ph> for the type parameter of Sample, and stores its input parameter in <ph id="ph3">`Field`</ph>.</source>
          <target state="translated">方法<ph id="ph1">`GM`</ph>创建的示例中，其自身类型参数替换实例<ph id="ph2">`U`</ph>为类型参数的示例中，并将存储在其输入的参数<ph id="ph3">`Field`</ph>。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>This source code is compiled but not used; you can view it with the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, and compare it to the code emitted by class <ph id="ph1">`Example`</ph>.</source>
          <target state="translated">编译但不是使用此类源代码你可以查看其与<bpt id="p1">[</bpt>Ildasm.exe （IL 反汇编程序）<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>，并将其与发出的类的代码比较<ph id="ph1">`Example`</ph>。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>The code in class <ph id="ph1">`Example`</ph> demonstrates the use of the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A&gt;</ph> method in emitting generic code.</source>
          <target state="translated">类中的代码<ph id="ph1">`Example`</ph>演示如何使用<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A&gt;</ph>发出泛型代码中的方法。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>The <ph id="ph1">`Main`</ph> method of class <ph id="ph2">`Example`</ph> creates a dynamic assembly containing a class named <ph id="ph3">`Sample`</ph>, and uses the <ph id="ph4">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType&gt;</ph> method to make it generic by adding a type parameter named <ph id="ph5">`T`</ph>.</source>
          <target state="translated"><ph id="ph1">`Main`</ph>类的方法<ph id="ph2">`Example`</ph>创建动态程序集包含一个名为类<ph id="ph3">`Sample`</ph>，并使用<ph id="ph4">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType&gt;</ph>方法，以使泛型通过添加一个名为的类型参数<ph id="ph5">`T`</ph>。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>A default constructor and a field named <ph id="ph1">`Field`</ph>, of type <ph id="ph2">`T`</ph>, are added to class <ph id="ph3">`Sample`</ph>.</source>
          <target state="translated">默认构造函数和一个名为字段<ph id="ph1">`Field`</ph>，类型的<ph id="ph2">`T`</ph>，添加到类<ph id="ph3">`Sample`</ph>。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>A method <ph id="ph1">`GM`</ph> is added, and turned into a generic method using the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method.</source>
          <target state="translated">一种方法<ph id="ph1">`GM`</ph>添加，并对其转变为泛型方法使用<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>The type parameter of <ph id="ph1">`GM`</ph> is named <ph id="ph2">`U`</ph>.</source>
          <target state="translated">类型参数<ph id="ph1">`GM`</ph>名为<ph id="ph2">`U`</ph>。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>Once the type parameter is defined, the signature of <ph id="ph1">`GM`</ph> is added, using the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A&gt;</ph> method.</source>
          <target state="translated">定义类型参数后, 的签名<ph id="ph1">`GM`</ph>使用的添加<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>There is no return type, and no required or custom modifiers, so all the parameters of this method are <ph id="ph1">`null`</ph> except <ph id="ph2">`parameterTypes`</ph>, which sets the type of the only parameter of the method; this is set to the method's type parameter, <ph id="ph3">`U`</ph>.</source>
          <target state="translated">没有没有返回类型，而且没有所需的或自定义修饰符，因此此方法的所有参数都是<ph id="ph1">`null`</ph>除<ph id="ph2">`parameterTypes`</ph>，这会设置方法的唯一参数的类型; 此值设置为该方法的类型参数， <ph id="ph3">`U`</ph>。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>The body of the method creates an instance of the constructed type <ph id="ph1">`Sample&lt;U&gt;`</ph> (<ph id="ph2">`Sample(Of U)`</ph> in Visual Basic), assigns the method's parameter to <ph id="ph3">`Field`</ph>, and then prints the value of <ph id="ph4">`Field`</ph>.</source>
          <target state="translated">方法的主体创建的构造类型的实例<ph id="ph1">`Sample&lt;U&gt;`</ph>(<ph id="ph2">`Sample(Of U)`</ph>在 Visual Basic 中)，将分配到该方法的参数<ph id="ph3">`Field`</ph>，，然后输出的值<ph id="ph4">`Field`</ph>。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>A dummy type is defined, to hold the entry point method <ph id="ph1">`Main`</ph>.</source>
          <target state="translated">一个虚拟类型定义，以容纳入口点方法<ph id="ph1">`Main`</ph>。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>In the body of <ph id="ph1">`Main`</ph>, the static <ph id="ph2">`GM`</ph> method is invoked on the constructed generic type <ph id="ph3">`Sample&lt;int&gt;`</ph> (<ph id="ph4">`Sample(Of Integer)`</ph> in Visual Basic), with type <ph id="ph5">&lt;xref:System.String&gt;</ph> substituted for <ph id="ph6">`U`</ph>.</source>
          <target state="translated">正文中<ph id="ph1">`Main`</ph>，静态<ph id="ph2">`GM`</ph>方法调用的构造泛型类型上<ph id="ph3">`Sample&lt;int&gt;`</ph>(<ph id="ph4">`Sample(Of Integer)`</ph>在 Visual Basic 中)，与类型<ph id="ph5">&lt;xref:System.String&gt;</ph>替换为<ph id="ph6">`U`</ph>。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A?displayProperty=nameWithType&gt;</ph> method is used to create a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the static <ph id="ph3">`GM`</ph> method of the constructed generic type <ph id="ph4">`Sample&lt;U&gt;`</ph>, and the <ph id="ph5">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType&gt;</ph> method is then used to create a <ph id="ph6">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that can emitted in a method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A?displayProperty=nameWithType&gt;</ph>方法用于创建<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>适用于静态<ph id="ph3">`GM`</ph>构造的泛型类型的方法<ph id="ph4">`Sample&lt;U&gt;`</ph>，和<ph id="ph5">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType&gt;</ph>方法然后用于创建<ph id="ph6">&lt;xref:System.Reflection.MethodInfo&gt;</ph>，可以在方法调用中发出。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</source>
          <target state="translated">当运行时的代码示例时，它将发出的程序集保存为 TypeBuilderGetFieldExample.exe。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>You can run TypeBuilderGetFieldExample.exe, and you can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to compare the emitted code with the code for the <ph id="ph1">`Sample`</ph> class that is compiled into the code example itself.</source>
          <target state="translated">你可以运行 TypeBuilderGetFieldExample.exe，并可以使用<bpt id="p1">[</bpt>Ildasm.exe （IL 反汇编程序）<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>要比较的代码发出的代码<ph id="ph1">`Sample`</ph>编译到其自身的代码示例的类。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>The current method is generic, but is not a generic method definition.</source>
          <target state="translated">当前方法是泛型方法，但不是泛型方法定义。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
          <source>That is, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">也就是说，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>The name of the symbolic custom attribute.</source>
          <target state="translated">符号自定义属性的名称。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>The byte blob that represents the value of the symbolic custom attribute.</source>
          <target state="translated">表示符号自定义属性的值的字节 blob。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>Set a symbolic custom attribute using a blob.</source>
          <target state="translated">使用 blob 设置符号自定义属性。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>Unlike the metadata custom attribute, this custom attribute is associated with a symbol writer.</source>
          <target state="translated">像元数据自定义属性，此自定义属性与器关联的符号编写器。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>The code sample below illustrates the contextual usage of the <ph id="ph1">`SetSymCustomAttribute`</ph> method to set the byte values for the name and key of a custom attribute attached to a method.</source>
          <target state="translated">下面的代码示例演示的上下文用法<ph id="ph1">`SetSymCustomAttribute`</ph>方法以设置的名称和密钥的自定义属性的字节值附加到一种方法。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>The containing type was previously created using <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</source>
          <target state="translated">该包含类型是以前使用 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> 创建的。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>The module that contains this method is not a debug module.</source>
          <target state="translated">包含此方法的模块不是调试模块。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
          <source>For the current method, the <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, but the <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">对于当前的方法，属性 <ph id="ph1">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，但属性 <ph id="ph3">&lt;see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /&gt;</ph> 为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.MethodBuilder.Signature">
          <source>Retrieves the signature of the method.</source>
          <target state="translated">检索方法的签名。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.Signature">
          <source>Read-only.</source>
          <target state="translated">只读。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.MethodBuilder.Signature">
          <source>A String containing the signature of the method reflected by this <ph id="ph1">&lt;see langword="MethodBase" /&gt;</ph> instance.</source>
          <target state="translated">一个字符串，包含此 <ph id="ph1">&lt;see langword="MethodBase" /&gt;</ph> 实例反映的方法的签名。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">留待将来使用。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">要映射的名称的传入数组。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">要映射的名称的计数。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">要在其中解释名称的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array that receives the IDs corresponding to the names.</source>
          <target state="translated">调用方分配的数组，用于接收与名称对应的 ID。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">将一组名称映射为对应的一组调度标识符。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">要返回的类型信息。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">类型信息的区域设置标识符。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">接收一个指针，指向请求的类型信息对象。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfo`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">指向一个位置，该位置接收对象提供的类型信息接口的数量。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">检索对象提供的类型信息接口的数量（0 或 1）。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">标识成员。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">留待将来使用。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">要在其中解释参数的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">描述调用的上下文的标志。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DispID 参数数组和数组中元素数的计数。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">指向要存储结果的位置的指针。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">指向一个包含异常信息的结构的指针。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">第一个出错自变量的索引。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">提供对某一对象公开的属性和方法的访问。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::Invoke`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支持使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定访问。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.ToString">
          <source>Returns this <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> instance as a string.</source>
          <target state="translated">将此 <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> 实例作为字符串返回。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.MethodBuilder.ToString">
          <source>Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.</source>
          <target state="translated">返回一个字符串，此字符串包含名称、 属性、 方法签名、 异常和此方法的本地签名，并且末尾处为当前的 Microsoft 中间语言 (MSIL) 流。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>