<Type Name="MethodRental" FullName="System.Reflection.Emit.MethodRental">
  <TypeSignature Language="C#" Value="public sealed class MethodRental : System.Runtime.InteropServices._MethodRental" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MethodRental extends System.Object implements class System.Runtime.InteropServices._MethodRental" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.MethodRental" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MethodRental&#xA;Implements _MethodRental" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodRental sealed : System::Runtime::InteropServices::_MethodRental" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._MethodRental</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MethodRental))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f2ff5-101">在给定类的方法的情况下，提供一种交换方法体实现的快速方法。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-101">Provides a fast way to swap method body implementation given a method of a class.</span></span></summary>
    <remarks>To be added.</remarks>
    <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f2ff5-102">调用时后期绑定通过机制如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-102">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f2ff5-103">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-103">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
  </Docs>
  <Members>
    <Member MemberName="JitImmediate">
      <MemberSignature Language="C#" Value="public const int JitImmediate = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 JitImmediate = (1)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.MethodRental.JitImmediate" />
      <MemberSignature Language="VB.NET" Value="Public Const JitImmediate As Integer  = 1" />
      <MemberSignature Language="C++ CLI" Value="public: int JitImmediate = 1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="f2ff5-104">指定应以实时 (JIT) 方式立即编译该方法。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-104">Specifies that the method should be just-in-time (JIT) compiled immediately.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f2ff5-105">调用时后期绑定通过机制如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-105">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f2ff5-106">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-106">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="JitOnDemand">
      <MemberSignature Language="C#" Value="public const int JitOnDemand = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 JitOnDemand = (0)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.MethodRental.JitOnDemand" />
      <MemberSignature Language="VB.NET" Value="Public Const JitOnDemand As Integer  = 0" />
      <MemberSignature Language="C++ CLI" Value="public: int JitOnDemand = 0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="f2ff5-107">指定应在需要时以实时 (JIT) 方式编译该方法。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-107">Specifies that the method should be just-in-time (JIT) compiled when needed.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="f2ff5-108">调用时后期绑定通过机制如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-108">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="f2ff5-109">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-109">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SwapMethodBody">
      <MemberSignature Language="C#" Value="public static void SwapMethodBody (Type cls, int methodtoken, IntPtr rgIL, int methodSize, int flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SwapMethodBody(class System.Type cls, int32 methodtoken, native int rgIL, int32 methodSize, int32 flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodRental.SwapMethodBody(System.Type,System.Int32,System.IntPtr,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SwapMethodBody (cls As Type, methodtoken As Integer, rgIL As IntPtr, methodSize As Integer, flags As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SwapMethodBody(Type ^ cls, int methodtoken, IntPtr rgIL, int methodSize, int flags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cls" Type="System.Type" />
        <Parameter Name="methodtoken" Type="System.Int32" />
        <Parameter Name="rgIL" Type="System.IntPtr" />
        <Parameter Name="methodSize" Type="System.Int32" />
        <Parameter Name="flags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cls"><span data-ttu-id="f2ff5-110">包含方法的类。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-110">The class containing the method.</span></span></param>
        <param name="methodtoken"><span data-ttu-id="f2ff5-111">方法的标记。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-111">The token for the method.</span></span></param>
        <param name="rgIL"><span data-ttu-id="f2ff5-112">指向方法的指针。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-112">A pointer to the method.</span></span> <span data-ttu-id="f2ff5-113">它应包括方法头。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-113">This should include the method header.</span></span></param>
        <param name="methodSize"><span data-ttu-id="f2ff5-114">新方法体的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-114">The size of the new method body in bytes.</span></span></param>
        <param name="flags"><span data-ttu-id="f2ff5-115">控制交换的标志。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-115">Flags that control the swapping.</span></span> <span data-ttu-id="f2ff5-116">请参见常数的定义。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-116">See the definitions of the constants.</span></span></param>
        <summary><span data-ttu-id="f2ff5-117">交换方法体。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-117">Swaps the body of a method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2ff5-118">不能使用此方法来交换全局方法的正文。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-118">You cannot use this method to swap the body of a global method.</span></span>  
  
 <span data-ttu-id="f2ff5-119">仅可以创建包含正在交换其方法的正文的类型的动态模块的客户端调用的方法。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-119">The method can only be called by the client that created the dynamic module that contains the type whose method's body is being swapped.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2ff5-120">下面的示例演示如何将方法体更换为新的主体。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-120">The following example illustrates how to swap a method body for a new body.</span></span> <span data-ttu-id="f2ff5-121">它还说明了如何获取现有方法的方法令牌以及如何构造表示要传递到的 Microsoft 中间语言 (MSIL) 代码的字节 blob `SwapMethodBody`。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-121">It also illustrates how to obtain a method token for an existing method and how to construct a blob of bytes representing the Microsoft Intermediate Language (MSIL) code to be passed to `SwapMethodBody`.</span></span>  
  
 [!code-cpp[Classic MethodRental.SwapMethodBody Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodRental.SwapMethodBody Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodRental.SwapMethodBody Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodRental.SwapMethodBody Example/CS/source.cs#1)]
 [!code-vb[Classic MethodRental.SwapMethodBody Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodRental.SwapMethodBody Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f2ff5-122"><paramref name="cls" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-122"><paramref name="cls" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f2ff5-123"><paramref name="cls" /> 类型不完整。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-123">The type <paramref name="cls" /> is not complete.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2ff5-124"><paramref name="methodSize" /> 小于 1 或大于 4128767（十六进制 3effff）。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-124"><paramref name="methodSize" /> is less than one or greater than 4128767 (3effff hex).</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="f2ff5-125">若要执行非托管的代码。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-125">to execute unmanaged code.</span></span> <span data-ttu-id="f2ff5-126">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-126">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodRental.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _MethodRental.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodRental.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _MethodRental.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodRental.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_MethodRental::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodRental.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="f2ff5-127">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-127">Reserved for future use.</span></span> <span data-ttu-id="f2ff5-128">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-128">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="f2ff5-129">要映射的名称的传入数组。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-129">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="f2ff5-130">要映射的名称的计数。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-130">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="f2ff5-131">要在其中解释名称的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-131">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="f2ff5-132">调用方分配的数组，用于接收与名称对应的 ID。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-132">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="f2ff5-133">将一组名称映射为对应的一组调度标识符。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-133">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2ff5-134">此方法用于访问托管类从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-134">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="f2ff5-135">有关详细信息`IDispatch::GetIDsOfNames`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-135">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="f2ff5-136">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-136">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodRental.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _MethodRental.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodRental.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _MethodRental.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodRental.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_MethodRental::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodRental.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="f2ff5-137">要返回的类型信息。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-137">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="f2ff5-138">类型信息的区域设置标识符。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-138">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="f2ff5-139">接收一个指针，指向请求的类型信息对象。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-139">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="f2ff5-140">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-140">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2ff5-141">此方法用于访问托管类从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-141">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="f2ff5-142">有关详细信息`IDispatch::GetTypeInfo`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-142">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="f2ff5-143">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-143">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodRental.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _MethodRental.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodRental.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _MethodRental.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodRental.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_MethodRental::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodRental.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="f2ff5-144">指向一个位置，该位置接收对象提供的类型信息接口的数量。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-144">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="f2ff5-145">检索对象提供的类型信息接口的数量（0 或 1）。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-145">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2ff5-146">此方法用于访问托管类从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-146">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="f2ff5-147">有关详细信息`IDispatch::GetTypeInfoCount`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-147">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="f2ff5-148">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-148">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodRental.Invoke">
      <MemberSignature Language="C#" Value="void _MethodRental.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodRental.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _MethodRental.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodRental.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_MethodRental::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodRental.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="f2ff5-149">标识成员。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-149">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="f2ff5-150">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-150">Reserved for future use.</span></span> <span data-ttu-id="f2ff5-151">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-151">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="f2ff5-152">要在其中解释参数的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-152">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="f2ff5-153">描述调用的上下文的标志。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-153">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="f2ff5-154">指向一个结构的指针，该结构包含一个自变量数组、一个命名自变量的 DISPID 自变量数组和数组中元素数的计数。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-154">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="f2ff5-155">指向要存储结果的位置的指针。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-155">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="f2ff5-156">指向一个包含异常信息的结构的指针。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-156">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="f2ff5-157">第一个出错自变量的索引。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-157">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="f2ff5-158">提供对某一对象公开的属性和方法的访问。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-158">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2ff5-159">此方法用于访问托管类从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-159">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="f2ff5-160">有关详细信息`IDispatch::Invoke`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-160">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="f2ff5-161">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span><span class="sxs-lookup"><span data-stu-id="f2ff5-161">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>