<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnmanagedMarshal.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac546fc4e13279b8ca823d2162a58c8f9ff13114e65.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46fc4e13279b8ca823d2162a58c8f9ff13114e65</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>Represents the class that describes how to marshal a field from managed to unmanaged code.</source>
          <target state="translated">表示说明如何将字段从托管代码封送为非托管代码的类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>This class cannot be inherited.</source>
          <target state="translated">此类不能被继承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The code example shows the workaround for this obsolete type.</source>
          <target state="translated">代码示例演示此过时的类型的解决方法。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>Marshaling is the process of packaging and unpackaging parameters so remote procedure calls can occur.</source>
          <target state="translated">封送处理是打包和解参数的过程，因此远程过程调用可以发生。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>During marshaling, a field might undergo a format conversion when the format of the managed type is different from the format of the corresponding unmanaged type.</source>
          <target state="translated">封送处理，期间字段可能要经历的格式转换的托管类型的格式不同于相应的非托管类型的格式时。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>For example, you might want to marshal a <ph id="ph1">`String`</ph> type as an unmanaged BSTR.</source>
          <target state="translated">例如，你可能想要封送<ph id="ph1">`String`</ph>作为非托管 BSTR 类型。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>Some format conversions are handled automatically by the runtime.</source>
          <target state="translated">由运行时自动处理某些格式转换。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>To override the default behavior, you must use the <ph id="ph1">`UnmanagedMarshal`</ph> class to define the format conversion.</source>
          <target state="translated">若要重写默认行为，必须使用<ph id="ph1">`UnmanagedMarshal`</ph>类定义格式转换。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The following code example shows replacement code for the obsolete <ph id="ph1">&lt;xref:System.Reflection.Emit.UnmanagedMarshal&gt;</ph> type.</source>
          <target state="translated">下面的代码示例显示了过时的替代代码<ph id="ph1">&lt;xref:System.Reflection.Emit.UnmanagedMarshal&gt;</ph>类型。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The example emits a single-module assembly named <ph id="ph1">`EmitMarshalAs.dll`</ph>, containing a type named <ph id="ph2">`Sample`</ph>.</source>
          <target state="translated">该示例发出名为的单个模块程序集<ph id="ph1">`EmitMarshalAs.dll`</ph>，包含名为的类型<ph id="ph2">`Sample`</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The type has a method named <ph id="ph1">`Test`</ph>, with one parameter of type <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">该类型具有一个名为方法<ph id="ph1">`Test`</ph>，一个类型的参数与<ph id="ph2">&lt;xref:System.String&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The code example applies the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> with <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.BStr?displayProperty=nameWithType&gt;</ph> to the parameter.</source>
          <target state="translated">代码示例适用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph>与<ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.BStr?displayProperty=nameWithType&gt;</ph>给参数。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the emitted assembly and observe that the parameter is marked <ph id="ph1">`marshal(bstr)`</ph>.</source>
          <target state="translated">你可以使用<bpt id="p1">[</bpt>Ildasm.exe （IL 反汇编程序）<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>以检查发出的程序集，并观察将参数标记<ph id="ph1">`marshal(bstr)`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
          <source>Gets an unmanaged base type.</source>
          <target state="translated">获取非托管基类型。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
          <source>This property is read-only.</source>
          <target state="translated">此属性是只读的。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
          <source>An <ph id="ph1">&lt;see langword="UnmanagedType" /&gt;</ph> object.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see langword="UnmanagedType" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
          <source>The unmanaged type is not an <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> or a <ph id="ph2">&lt;see langword="SafeArray" /&gt;</ph>.</source>
          <target state="translated">非托管类型不是 <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="SafeArray" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>The number of elements in the fixed-length array.</source>
          <target state="translated">固定长度数组中的元素数目。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.</source>
          <target state="translated">指定要封送为非托管代码的固定长度的数组 (ByValArray)。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>The <ph id="ph1">`DefineByValArray`</ph> method is not a simple native marshal.</source>
          <target state="translated"><ph id="ph1">`DefineByValArray`</ph>方法不是简单的本机封送。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">只能创建非托管封送构造可使用这些静态构造函数。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">封送处理数组是比封送处理整数参数的一个更复杂的过程。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">数组成员复制以特定顺序中，以便在另一侧可以完全重新构造该数组。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">该参数不是简单本机类型。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>The number of elements in the fixed array buffer.</source>
          <target state="translated">固定数组缓冲区中的元素数目。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.</source>
          <target state="translated">指定要封送为非托管代码的固定数组缓冲区 (ByValTStr) 中的字符串。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>The <ph id="ph1">`DefineByValStr`</ph> method is not a simple native marshal.</source>
          <target state="translated"><ph id="ph1">`DefineByValStr`</ph>方法不是简单的本机封送。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">只能创建非托管封送构造可使用这些静态构造函数。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">封送处理数组是比封送处理整数参数的一个更复杂的过程。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">数组成员复制以特定顺序中，以便在另一侧可以完全重新构造该数组。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">该参数不是简单本机类型。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The unmanaged type to which to marshal the array.</source>
          <target state="translated">要将数组封送为的非托管类型。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Specifies an <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> to marshal to unmanaged code.</source>
          <target state="translated">指定要封送为非托管代码的 <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The length of an <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> is determined at runtime by the size of the actual marshaled array.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> 的长度在运行时由实际的已封送数组的大小确定。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The <ph id="ph1">`DefineLPArray`</ph> method is not a simple native marshal.</source>
          <target state="translated"><ph id="ph1">`DefineLPArray`</ph>方法不是简单的本机封送。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">只能创建非托管封送构造可使用这些静态构造函数。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">封送处理数组是比封送处理整数参数的一个更复杂的过程。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">数组成员复制以特定顺序中，以便在另一侧可以完全重新构造该数组。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">该参数不是简单本机类型。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The base type or the <ph id="ph1">&lt;see langword="UnmanagedType" /&gt;</ph> of each element of the array.</source>
          <target state="translated">数组的每个元素的基类型或 <ph id="ph1">&lt;see langword="UnmanagedType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Specifies a <ph id="ph1">&lt;see langword="SafeArray" /&gt;</ph> to marshal to unmanaged code.</source>
          <target state="translated">指定要封送为非托管代码的 <ph id="ph1">&lt;see langword="SafeArray" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The <ph id="ph1">`DefineSafeArray`</ph> method is not a simple native marshal.</source>
          <target state="translated"><ph id="ph1">`DefineSafeArray`</ph>方法不是简单的本机封送。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">只能创建非托管封送构造可使用这些静态构造函数。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">封送处理数组是比封送处理整数参数的一个更复杂的过程。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">数组成员复制以特定顺序中，以便在另一侧可以完全重新构造该数组。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">该参数不是简单本机类型。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>The unmanaged type to which the type is to be marshaled.</source>
          <target state="translated">要将该类型封送到的非托管类型。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>Specifies a given type that is to be marshaled to unmanaged code.</source>
          <target state="translated">指定要封送为非托管代码的给定类型。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> passed to this method must be a simple native type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph>传递给此方法必须是一个简单的本机类型。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>None of the following values may be used: <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValTStr?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.SafeArray?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValArray?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.InteropServices.UnmanagedType.LPArray?displayProperty=nameWithType&gt;</ph>, or <ph id="ph5">&lt;xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">可以使用以下值均未： <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValTStr?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.SafeArray?displayProperty=nameWithType&gt;</ph>， <ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValArray?displayProperty=nameWithType&gt;</ph>， <ph id="ph4">&lt;xref:System.Runtime.InteropServices.UnmanagedType.LPArray?displayProperty=nameWithType&gt;</ph>，或<ph id="ph5">&lt;xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>Only unmanaged marshal constructs can be made using this method.</source>
          <target state="translated">只能创建非托管封送构造可使用此方法。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">该参数不是简单本机类型。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>Gets a number element.</source>
          <target state="translated">获取数字元素。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>This property is read-only.</source>
          <target state="translated">此属性是只读的。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>An integer indicating the element count.</source>
          <target state="translated">指示元素计数的整数。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>There is an <ph id="ph1">`ElementCount`</ph> only if there is a <ph id="ph2">`NativeTypeFixedArray`</ph>.</source>
          <target state="translated">没有<ph id="ph1">`ElementCount`</ph>只有在<ph id="ph2">`NativeTypeFixedArray`</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>The argument is not an unmanaged element count.</source>
          <target state="translated">该参数不是非托管元素计数。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
          <source>Indicates an unmanaged type.</source>
          <target state="translated">指示非托管类型。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
          <source>This property is read-only.</source>
          <target state="translated">此属性是只读的。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.UnmanagedType" /&gt;</ph> object.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.UnmanagedType" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
          <source>The <ph id="ph1">`GetUnmanagedType`</ph> property is an accessor function for the native type.</source>
          <target state="translated"><ph id="ph1">`GetUnmanagedType`</ph>属性是本机类型的访问器函数。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>Gets a GUID.</source>
          <target state="translated">获取 GUID。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>This property is read-only.</source>
          <target state="translated">此属性是只读的。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>This property always returns Guid.Empty.</source>
          <target state="translated">此属性始终返回 Guid.Empty。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>This property might be removed in a future release.</source>
          <target state="translated">可能的未来版本中移除该属性。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>The argument is not a custom marshaler.</source>
          <target state="translated">该参数不是自定义封送拆收器。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>