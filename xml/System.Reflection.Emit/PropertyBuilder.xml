<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PropertyBuilder.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57558fd1a9b8dabee95c7e64c0dbc78bdadc11475.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7558fd1a9b8dabee95c7e64c0dbc78bdadc11475</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>Defines the properties for a type.</source>
          <target state="translated">定义类型的属性。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>A <ph id="ph1">`PropertyBuilder`</ph> is always associated with a <ph id="ph2">`TypeBuilder`</ph>.</source>
          <target state="translated">A<ph id="ph1">`PropertyBuilder`</ph>始终与<ph id="ph2">`TypeBuilder`</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>The <ph id="ph1">`TypeBuilder`</ph>.</source>
          <target state="translated"><ph id="ph1">`TypeBuilder`</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source><ph id="ph1">`DefineProperty`</ph> method will return a new <ph id="ph2">`PropertyBuilder`</ph> to a client.</source>
          <target state="translated"><ph id="ph1">`DefineProperty`</ph> 方法将返回一个新<ph id="ph2">`PropertyBuilder`</ph>到客户端。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>The following code sample demonstrates how to implement properties in a dynamic type using a <ph id="ph1">`PropertyBuilder`</ph> obtained via <ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A?displayProperty=nameWithType&gt;</ph> to create the property framework and an associated <ph id="ph3">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> to implement the IL logic within the property.</source>
          <target state="translated">下面的代码示例演示如何实现中使用的动态类型的属性<ph id="ph1">`PropertyBuilder`</ph>获取通过<ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A?displayProperty=nameWithType&gt;</ph>创建属性框架和一个关联<ph id="ph3">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>实现于该属性的 IL 逻辑。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
          <source>A <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> object that represents the other method.</source>
          <target state="translated">一个表示另一种方法的 <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
          <source>Adds one of the other methods associated with this property.</source>
          <target state="translated">添加与此属性关联的其他方法之一。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
          <source><ph id="ph1">&lt;paramref name="mdBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mdBuilder" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
          <source><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has been called on the enclosing type.</source>
          <target state="translated">已对封闭类型调用了 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.Attributes">
          <source>Gets the attributes for this property.</source>
          <target state="translated">获取此属性 (Property) 的属性 (Attribute)。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.Attributes">
          <source>Attributes of this property.</source>
          <target state="translated">此属性 (Property) 的属性 (Attribute)。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.CanRead">
          <source>Gets a value indicating whether the property can be read.</source>
          <target state="translated">获取一个值，该值指示此属性是否可读。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be read; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此属性可读，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.CanRead">
          <source>Boolean property indicating if the property can be read.</source>
          <target state="translated">布尔值，该值指示是否可以读取属性的属性。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.CanRead">
          <source>If the property does not have a get accessor, it cannot be read.</source>
          <target state="translated">如果属性没有 get 访问器，它无法读取。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
          <source>Gets a value indicating whether the property can be written to.</source>
          <target state="translated">获取一个值，该值指示此属性是否可写。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be written to; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此属性可写，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
          <source>Boolean property indicating if the property can be written to.</source>
          <target state="translated">布尔值，该值指示是否可以写入属性的属性。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
          <source>If the property does not have a set accessor, it cannot be written to.</source>
          <target state="translated">如果属性没有 set 访问器，它无法写入。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
          <source>Gets the class that declares this member.</source>
          <target state="translated">获取声明该成员的类。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object for the class that declares this member.</source>
          <target state="translated">声明该成员的类的 <ph id="ph1">&lt;see langword="Type" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
          <source>Indicates whether non-public methods should be returned in the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> array.</source>
          <target state="translated">指示非公共方法是否应在 <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> 数组中返回。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods are to be included; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要包括非公共方法，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
          <source>Returns an array of the public and non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors on this property.</source>
          <target state="translated">返回此属性上的公共和非公共 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 和 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 访问器的数组。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
          <source>An array of type <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> 类型的数组，它包含匹配的公共或非公共访问器，或者如果在此属性上不存在匹配访问器，则为空数组。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
          <source>To get the accessors of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetAccessors.</source>
          <target state="translated">若要获取的属性访问器，在该属性的父类型使用 Type.GetType 或 Assembly.GetType 上反映、 反射属性对象检索、 类型和调用 PropertyInfo.GetAccessors。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
          <source>This method is not supported.</source>
          <target state="translated">不支持此方法。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>Returns all the custom attributes defined on this property.</source>
          <target state="translated">返回在此属性上定义的所有自定义属性。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, walks up this property's inheritance chain to find the custom attributes</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，则遍历此属性的继承链以查找自定义属性</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
          <source>Returns an array of all the custom attributes for this property.</source>
          <target state="translated">返回此属性的所有自定义属性的数组。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
          <source>An array of all the custom attributes.</source>
          <target state="translated">一个包含所有自定义属性的数组。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
          <source>Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.</source>
          <target state="translated">在该属性的父类型使用 Type.GetType 或 Assembly.GetType 上反映、 反射属性对象检索、 类型和调用 PropertyInfo.GetCustomAttributes。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
          <source>This method is not supported.</source>
          <target state="translated">不支持此方法。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of custom attributes identified by type.</source>
          <target state="translated">由类型标识的自定义属性数组。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, walks up this property's inheritance chain to find the custom attributes.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，则遍历此属性的继承链以查找自定义属性。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns an array of custom attributes identified by <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>.</source>
          <target state="translated">返回由 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 标识的自定义属性数组。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of custom attributes defined on this reflected member, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no attributes are defined on this member.</source>
          <target state="translated">在该反映成员上定义的自定义属性的数组，如果未在该成员上定义任何属性，则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.</source>
          <target state="translated">在该属性的父类型使用 Type.GetType 或 Assembly.GetType 上反映、 反射属性对象检索、 类型和调用 PropertyInfo.GetCustomAttributes。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method is not supported.</source>
          <target state="translated">不支持此方法。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
          <source>Indicates whether non-public get accessors should be returned.</source>
          <target state="translated">指示是否应返回非公共 get 访问器。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods are to be included; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要包括非公共方法，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
          <source>Returns the public and non-public get accessor for this property.</source>
          <target state="translated">返回该属性的公共和非公共 get 访问器。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the get accessor for this property, if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="true" /&gt;</ph>，则返回表示该属性的 get 访问器的 <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph3">&lt;see langword="false" /&gt;</ph> and the get accessor is non-public, or if <ph id="ph4">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph5">&lt;see langword="true" /&gt;</ph> but no get accessors exist.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="false" /&gt;</ph> 且 get 访问器是非公共的，或者如果 <ph id="ph4">&lt;paramref name="nonPublic" /&gt;</ph> 为 <ph id="ph5">&lt;see langword="true" /&gt;</ph> 但不存在 get 访问器，则返回 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
          <source>To get the getter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetGetMethod.</source>
          <target state="translated">若要获取的属性 getter，反射到该属性的父类型使用 Type.GetType 或 Assembly.GetType、 反射属性对象检索、 类型和调用 PropertyInfo.GetGetMethod。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
          <source>Returns an array of all the index parameters for the property.</source>
          <target state="translated">返回此属性的所有索引参数的数组。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
          <source>An array of type <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> containing the parameters for the indexes.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> 类型的数组，它包含索引的参数。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
          <source>To get the index parameters of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetIndexParameters.</source>
          <target state="translated">若要获取的索引参数的属性，反映对该属性的父类型使用 Type.GetType 或 Assembly.GetType、 反射属性对象检索、 类型和调用 PropertyInfo.GetIndexParameters。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
          <source>This method is not supported.</source>
          <target state="translated">不支持此方法。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source>Indicates whether the accessor should be returned if it is non-public.</source>
          <target state="translated">指示如果取值函数为非公共，是否应将其返回。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods are to be included; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要包括非公共方法，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source>Returns the set accessor for this property.</source>
          <target state="translated">返回此属性的 set 访问器。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source>The property's <ph id="ph1">&lt;see langword="Set" /&gt;</ph> method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>, as shown in the following table.</source>
          <target state="translated">此属性的 <ph id="ph1">&lt;see langword="Set" /&gt;</ph> 方法或 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，如下表所示。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 条件</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the Set method for this property.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph>表示此属性的 Set 方法的 <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The set accessor is public.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph>Set 访问器是公共的。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is true and non-public methods can be returned.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> 为 true 且可返回非公共方法。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> null</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph>NULL</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> is true, but the property is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> 为 true，但该属性是只读的。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is false and the set accessor is non-public.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> 为 false，且 set 访问器是非公共的。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source>To get the setter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetSetMethod.</source>
          <target state="translated">若要获取的属性 setter，反射到该属性的父类型使用 Type.GetType 或 Assembly.GetType、 反射属性对象检索、 类型和调用 PropertyInfo.GetSetMethod。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>Gets the value of the property by calling the getter.</source>
          <target state="translated">通过调用 getter 来获取属性值。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>The object whose property value will be returned.</source>
          <target state="translated">将返回其属性值的对象。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">索引化属性的可选索引值。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">对于非索引化属性，该值应为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>Gets the value of the indexed property by calling the property's getter method.</source>
          <target state="translated">通过调用索引化属性的 getter 方法来获取该属性的值。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>The value of the specified indexed property.</source>
          <target state="translated">指定的索引化属性的值。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the <ph id="ph1">`Reflection`</ph> property object from the type, and call <ph id="ph2">`PropertyInfo.GetValue`</ph>.</source>
          <target state="translated">若要获取属性的值，该属性的父类型使用 Type.GetType 或 Assembly.GetType 上反映，检索<ph id="ph1">`Reflection`</ph>属性对象类型，并调用从<ph id="ph2">`PropertyInfo.GetValue`</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>This method is not supported.</source>
          <target state="translated">不支持此方法。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">将返回其属性值的对象。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The invocation attribute.</source>
          <target state="translated">调用属性。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph4">&lt;see langword="Static" /&gt;</ph>, <ph id="ph5">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph7">&lt;see langword="GetProperty" /&gt;</ph>, or <ph id="ph8">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">这必须是来自 <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph> 的位标志：<ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>、<ph id="ph3">&lt;see langword="CreateInstance" /&gt;</ph>、<ph id="ph4">&lt;see langword="Static" /&gt;</ph>、<ph id="ph5">&lt;see langword="GetField" /&gt;</ph>、<ph id="ph6">&lt;see langword="SetField" /&gt;</ph>、<ph id="ph7">&lt;see langword="GetProperty" /&gt;</ph> 或 <ph id="ph8">&lt;see langword="SetProperty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A suitable invocation attribute must be specified.</source>
          <target state="translated">必须指定合适的调用属性。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If a static member is to be invoked, the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag of <ph id="ph2">&lt;see langword="BindingFlags" /&gt;</ph> must be set.</source>
          <target state="translated">如果要调用静态成员，则必须设置 <ph id="ph2">&lt;see langword="BindingFlags" /&gt;</ph> 的 <ph id="ph1">&lt;see langword="Static" /&gt;</ph> 标志。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> 对象的检索。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> 为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则使用默认活页夹。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">索引化属性的可选索引值。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">对于非索引化属性，该值应为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> object that represents the culture for which the resource is to be localized.</source>
          <target state="translated">表示要为其本地化资源的区域性的 <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Note that if the resource is not localized for this culture, the <ph id="ph1">&lt;see langword="CultureInfo.Parent" /&gt;</ph> method will be called successively in search of a match.</source>
          <target state="translated">请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 <ph id="ph1">&lt;see langword="CultureInfo.Parent" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> is obtained from the <ph id="ph3">&lt;see langword="CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">如果此值为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则从 <ph id="ph3">&lt;see langword="CultureInfo.CurrentUICulture" /&gt;</ph> 属性获得 <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Gets the value of a property having the specified binding, index, and <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph>.</source>
          <target state="translated">获取属性的值，该属性具有指定的绑定、索引和 <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property value for <ph id="ph1">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 的属性值。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetValue.</source>
          <target state="translated">若要获取属性的值，在该属性的父类型使用 Type.GetType 或 Assembly.GetType 上反映、 反射属性对象检索、 类型和调用 PropertyInfo.GetValue。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This method is not supported.</source>
          <target state="translated">不支持此方法。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object to which the custom attributes are applied.</source>
          <target state="translated">将应用自定义属性的 <ph id="ph1">&lt;see langword="Type" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Specifies whether to walk up this property's inheritance chain to find the custom attributes.</source>
          <target state="translated">指定是否遍历属性的继承链以查找自定义属性。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Indicates whether one or more instance of <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is defined on this property.</source>
          <target state="translated">指示是否在此属性上定义一个或多个 <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> 的实例。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more instance of <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> is defined on this property; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果在此属性上定义一个或多个 <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> 实例，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.IsDefined.</source>
          <target state="translated">在该属性的父类型使用 Type.GetType 或 Assembly.GetType 上反映、 反射属性对象检索、 类型和调用 PropertyInfo.IsDefined。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
          <source>This method is not supported.</source>
          <target state="translated">不支持此方法。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.Module">
          <source>Gets the module in which the type that declares the current property is being defined.</source>
          <target state="translated">获取在其中定义了特定类型的模块，该类型即为声明当前属性的类型。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.Module">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> in which the type that declares the current property is defined.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph>，在该模块中定义了声明当前属性的类型。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.Module">
          <source>This property is provided as a convenience for the user.</source>
          <target state="translated">此属性是为用户提供为方便起见。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.Module">
          <source>It is equivalent to using the <ph id="ph1">&lt;xref:System.Reflection.Emit.PropertyBuilder.DeclaringType%2A&gt;</ph> property to get the type in which the property is declared, and then calling the <ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph> property of the resulting <ph id="ph3">&lt;xref:System.Type&gt;</ph> object.</source>
          <target state="translated">它相当于使用<ph id="ph1">&lt;xref:System.Reflection.Emit.PropertyBuilder.DeclaringType%2A&gt;</ph>属性用于获取在其中声明该属性的类型并调用<ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph>属性生成<ph id="ph3">&lt;xref:System.Type&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.Name">
          <source>Gets the name of this member.</source>
          <target state="translated">获取此成员的名称。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.Name">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the name of this member.</source>
          <target state="translated">包含此成员名称的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.PropertyToken">
          <source>Retrieves the token for this property.</source>
          <target state="translated">检索此属性的令牌。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.PropertyToken">
          <source>Read-only.</source>
          <target state="translated">只读。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.PropertyToken">
          <source>Retrieves the token for this property.</source>
          <target state="translated">检索此属性的令牌。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
          <source>Gets the type of the field of this property.</source>
          <target state="translated">获取此属性的字段类型。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
          <source>The type of this property.</source>
          <target state="translated">此属性的类型。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
          <source>Gets the class object that was used to obtain this instance of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>.</source>
          <target state="translated">获取用于获取 <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> 的此实例的类对象。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object through which this <ph id="ph2">&lt;see langword="MemberInfo" /&gt;</ph> object was obtained.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Type" /&gt;</ph> 对象，通过它获取了此 <ph id="ph2">&lt;see langword="MemberInfo" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>The default value of this property.</source>
          <target state="translated">此属性的默认值。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>Sets the default value of this property.</source>
          <target state="translated">设置该属性的默认值。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source><ph id="ph1">`defaultValue`</ph> is restricted to the following types: <ph id="ph2">`Boolean`</ph>, <ph id="ph3">`SByte`</ph>, <ph id="ph4">`Int16`</ph>, <ph id="ph5">`Int32`</ph>, <ph id="ph6">`Int64`</ph>, <ph id="ph7">`Byte`</ph>, <ph id="ph8">`UInt16`</ph>, <ph id="ph9">`UInt32`</ph>, <ph id="ph10">`UInt64`</ph>, <ph id="ph11">`Single`</ph>, <ph id="ph12">`Double`</ph>, <ph id="ph13">`DateTime`</ph>, <ph id="ph14">`Char`</ph>, <ph id="ph15">`String`</ph>, and <ph id="ph16">`Enum`</ph>.</source>
          <target state="translated"><ph id="ph1">`defaultValue`</ph> 限制为以下类型： <ph id="ph2">`Boolean`</ph>， <ph id="ph3">`SByte`</ph>， <ph id="ph4">`Int16`</ph>， <ph id="ph5">`Int32`</ph>， <ph id="ph6">`Int64`</ph>， <ph id="ph7">`Byte`</ph>， <ph id="ph8">`UInt16`</ph>， <ph id="ph9">`UInt32`</ph>， <ph id="ph10">`UInt64`</ph>， <ph id="ph11">`Single`</ph>， <ph id="ph12">`Double`</ph>， <ph id="ph13">`DateTime`</ph><ph id="ph14">`Char`</ph>， <ph id="ph15">`String`</ph>，和<ph id="ph16">`Enum`</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>If the property type is a reference type, CLS compliance requires <ph id="ph1">`defaultValue`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果该属性类型是引用类型，需要 CLS 遵从性<ph id="ph1">`defaultValue`</ph>要<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>However, starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">`defaultValue`</ph> can be non-null for reference types as long as the value can be assigned to that reference type.</source>
          <target state="translated">但是，从开始<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>，<ph id="ph2">`defaultValue`</ph>对于引用类型，只要该值可以分配给该引用类型可以为非 null。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>For example, an <ph id="ph1">`Int32`</ph> value can be assigned to a property of type <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">例如，<ph id="ph1">`Int32`</ph>值可以分配给类型的属性<ph id="ph2">&lt;xref:System.Object&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>This is not CLS-compliant, but it can be useful in interop scenarios.</source>
          <target state="translated">这不符合 CLS，但它可以是互操作方案中十分有用。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has been called on the enclosing type.</source>
          <target state="translated">已对封闭类型调用了 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>The property is not one of the supported types.</source>
          <target state="translated">该属性不是受支持类型之一。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>The type of <ph id="ph1">&lt;paramref name="defaultValue" /&gt;</ph> does not match the type of the property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="defaultValue" /&gt;</ph> 类型与该属性类型不匹配。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>The property is of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> or other reference type, <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> is not <ph id="ph3">&lt;see langword="null" /&gt;</ph>, and the value cannot be assigned to the reference type.</source>
          <target state="translated">该属性的类型为 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 或其他引用类型，并且 <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> 不是 <ph id="ph3">&lt;see langword="null" /&gt;</ph>，该值无法赋给引用类型。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>Sets a custom attribute.</source>
          <target state="translated">设置自定义属性。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>An instance of a helper class to define the custom attribute.</source>
          <target state="translated">用于定义自定义属性的帮助程序类的一个实例。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>Set a custom attribute using a custom attribute builder.</source>
          <target state="translated">使用自定义属性生成器设置自定义属性。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source><ph id="ph1">&lt;paramref name="customBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="customBuilder" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>if <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has been called on the enclosing type.</source>
          <target state="translated">如果已对封闭类型调用了 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The constructor for the custom attribute.</source>
          <target state="translated">自定义属性的构造函数。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>A byte blob representing the attributes.</source>
          <target state="translated">表示属性的字节 blob。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>Set a custom attribute using a specified custom attribute blob.</source>
          <target state="translated">使用指定的自定义属性 blob 设置自定义属性。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>See the metadata specification in the ECMA Partition II documentation for details on how to format <ph id="ph1">`binaryAttribute`</ph>.</source>
          <target state="translated">有关如何设置格式，请参阅 ECMA 第 ii 部分文档，有关详细信息中的元数据规范<ph id="ph1">`binaryAttribute`</ph>。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The Partition II documentation is available online on MSDN (<bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=65555)</ept> Web page) and on the ECMA Web site (<bpt id="p2">[</bpt>Standard ECMA-335 Common Language Infrastructure<ept id="p2">](http://go.microsoft.com/fwlink/?linkid=65552)</ept> document).</source>
          <target state="translated">第 ii 部分文档也请可用 MSDN 上 (<bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=65555)</ept>网页) 和 ECMA 网站上 (<bpt id="p2">[</bpt>标准 ecma-335 公共语言基础结构<ept id="p2">](http://go.microsoft.com/fwlink/?linkid=65552)</ept>文档）。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> or <ph id="ph2">&lt;paramref name="binaryAttribute" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="binaryAttribute" /&gt;</ph> 为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has been called on the enclosing type.</source>
          <target state="translated">已对封闭类型调用了 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
          <source>A <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> object that represents the method that gets the property value.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> 对象，表示获取属性值的方法。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
          <source>Sets the method that gets the property value.</source>
          <target state="translated">设置获取属性值的方法。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
          <source>The following code sample demonstrates how to attach a dynamic method to a <ph id="ph1">`get`</ph> property created with <ph id="ph2">`PropertyBuilder`</ph> using <ph id="ph3">`SetGetMethod`</ph>.</source>
          <target state="translated">下面的代码示例演示如何将附加到的动态方法<ph id="ph1">`get`</ph>属性使用创建<ph id="ph2">`PropertyBuilder`</ph>使用<ph id="ph3">`SetGetMethod`</ph>。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
          <source><ph id="ph1">&lt;paramref name="mdBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mdBuilder" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
          <source><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has been called on the enclosing type.</source>
          <target state="translated">已对封闭类型调用了 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
          <source>A <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> object that represents the method that sets the property value.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> 对象，表示设置属性值的方法。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
          <source>Sets the method that sets the property value.</source>
          <target state="translated">设置用于设置属性值的方法。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
          <source>The following code sample demonstrates how to attach a dynamic method to a <ph id="ph1">`set`</ph> property created with <ph id="ph2">`PropertyBuilder`</ph> using <ph id="ph3">`SetSetMethod`</ph>.</source>
          <target state="translated">下面的代码示例演示如何将附加到的动态方法<ph id="ph1">`set`</ph>属性使用创建<ph id="ph2">`PropertyBuilder`</ph>使用<ph id="ph3">`SetSetMethod`</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
          <source><ph id="ph1">&lt;paramref name="mdBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mdBuilder" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
          <source><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has been called on the enclosing type.</source>
          <target state="translated">已对封闭类型调用了 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>Sets the property value for the given object to the given value.</source>
          <target state="translated">将给定对象的属性值设置为给定值。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>The object whose property value will be set.</source>
          <target state="translated">将设置其属性值的对象。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>The new value for this property.</source>
          <target state="translated">此属性的新值。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">索引化属性的可选索引值。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">对于非索引化属性，该值应为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>Sets the value of the property with optional index values for index properties.</source>
          <target state="translated">用索引属性的可选索引值设置该属性的值。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>To set the value of a property, reflect on the property's parent type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>, retrieve the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object from the type, and call <ph id="ph4">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要设置属性的值，反映该属性的父类型使用<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>，检索<ph id="ph3">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象类型，并调用<ph id="ph4">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>This method is not supported.</source>
          <target state="translated">不支持此方法。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">将返回其属性值的对象。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The new value for this property.</source>
          <target state="translated">此属性的新值。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The invocation attribute.</source>
          <target state="translated">调用属性。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph4">&lt;see langword="Static" /&gt;</ph>, <ph id="ph5">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph7">&lt;see langword="GetProperty" /&gt;</ph>, or <ph id="ph8">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">这必须是来自 <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph> 的位标志：<ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>、<ph id="ph3">&lt;see langword="CreateInstance" /&gt;</ph>、<ph id="ph4">&lt;see langword="Static" /&gt;</ph>、<ph id="ph5">&lt;see langword="GetField" /&gt;</ph>、<ph id="ph6">&lt;see langword="SetField" /&gt;</ph>、<ph id="ph7">&lt;see langword="GetProperty" /&gt;</ph> 或 <ph id="ph8">&lt;see langword="SetProperty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A suitable invocation attribute must be specified.</source>
          <target state="translated">必须指定合适的调用属性。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If a static member is to be invoked, the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag of <ph id="ph2">&lt;see langword="BindingFlags" /&gt;</ph> must be set.</source>
          <target state="translated">如果要调用静态成员，则必须设置 <ph id="ph2">&lt;see langword="BindingFlags" /&gt;</ph> 的 <ph id="ph1">&lt;see langword="Static" /&gt;</ph> 标志。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> 对象的检索。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> 为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则使用默认活页夹。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">索引化属性的可选索引值。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">对于非索引化属性，该值应为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> object that represents the culture for which the resource is to be localized.</source>
          <target state="translated">表示要为其本地化资源的区域性的 <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Note that if the resource is not localized for this culture, the <ph id="ph1">&lt;see langword="CultureInfo.Parent" /&gt;</ph> method will be called successively in search of a match.</source>
          <target state="translated">请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 <ph id="ph1">&lt;see langword="CultureInfo.Parent" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> is obtained from the <ph id="ph3">&lt;see langword="CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">如果此值为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则从 <ph id="ph3">&lt;see langword="CultureInfo.CurrentUICulture" /&gt;</ph> 属性获得 <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Sets the property value for the given object to the given value.</source>
          <target state="translated">将给定对象的属性值设置为给定值。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To set the value of a property, reflect on the property's parent type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>, retrieve the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object from the type, and call <ph id="ph4">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要设置属性的值，反映该属性的父类型使用<ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>，检索<ph id="ph3">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>对象类型，并调用<ph id="ph4">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This method is not supported.</source>
          <target state="translated">不支持此方法。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">留待将来使用。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">要映射的名称的传入数组。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">要映射的名称的计数。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">要在其中解释名称的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">调用方分配的数组，用于接收与名称对应的 ID。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">将一组名称映射为对应的一组调度标识符。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">此方法称为使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">要返回的类型信息。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">类型信息的区域设置标识符。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">接收一个指针，指向请求的类型信息对象。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfo`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">此方法称为使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">指向一个位置，该位置接收对象提供的类型信息接口的数量。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">检索对象提供的类型信息接口的数量（0 或 1）。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">此方法称为使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">标识成员。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">留待将来使用。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">要在其中解释参数的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">描述调用的上下文的标志。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">指向一个结构的指针，该结构包含一个自变量数组、一个命名自变量的 DISPID 自变量数组和数组中元素数的计数。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">指向要存储结果的位置的指针。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">指向一个包含异常信息的结构的指针。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">第一个出错自变量的索引。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">提供对某一对象公开的属性和方法的访问。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::Invoke`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">此方法称为使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 接口的后期绑定。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>