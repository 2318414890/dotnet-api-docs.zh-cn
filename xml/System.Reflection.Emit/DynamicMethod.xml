<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DynamicMethod.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5862a235668e7e4b96457329cbd2f33598707245d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">862a235668e7e4b96457329cbd2f33598707245d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Defines and represents a dynamic method that can be compiled, executed, and discarded.</source>
          <target state="translated">定义并表示可以编译、执行和丢弃的一种动态方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Discarded methods are available for garbage collection.</source>
          <target state="translated">丢弃的方法可用于垃圾回收。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>You can use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类进行生成并在运行时，执行一种方法，而无需生成动态程序集和一个动态类型，以包含方法。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The executable code created by the just-in-time (JIT) compiler is reclaimed when the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object is reclaimed.</source>
          <target state="translated">回收由实时 (JIT) 编译器创建的可执行代码时<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>回收对象。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Dynamic methods are the most efficient way to generate and execute small amounts of code.</source>
          <target state="translated">动态方法是代码的生成和执行少量的最有效方式。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>A dynamic method can be anonymously hosted, or it can belogically associated with a module or with a type.</source>
          <target state="translated">可以匿名托管的动态方法，或者它可以 belogically 与模块或类型关联。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</source>
          <target state="translated">如果匿名托管的动态方法，它位于系统提供的程序集，并因此是独立于其他代码。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>By default, it does not have access to any non-public data.</source>
          <target state="translated">默认情况下，它没有访问的任何非公共数据。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">匿名托管的动态方法可以具有受限制地跳过 JIT 编译器的可见性检查，如果它已被授予<ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</source>
          <target state="translated">动态方法访问其非公共成员的程序集的信任级别必须等于或其子集发出动态方法的调用堆栈的信任级别。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>For more information about anonymously hosted dynamic methods, see <bpt id="p1">[</bpt>Walkthrough: Emitting Code in Partial Trust Scenarios<ept id="p1">](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md)</ept>.</source>
          <target state="translated">有关匿名托管的动态方法的详细信息，请参阅<bpt id="p1">[</bpt>演练： 在部分信任方案中发出代码<ept id="p1">](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md)</ept>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</source>
          <target state="translated">如果动态方法与你指定的模块关联，则动态方法是该模块在全局范围内有效。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>It can access all types in the module and all <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) members of the types.</source>
          <target state="translated">它可以访问该模块中的所有类型和所有<ph id="ph1">`internal`</ph>(<ph id="ph2">`Friend`</ph>在 Visual Basic 中) 的类型的成员。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> flag can be satisfied by the call stack that includes your code.</source>
          <target state="translated">你可以将关联动态方法与任何模块，无论是否创建了该模块，提供程序的要求<ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph>标志可以通过包括你的代码的调用堆栈来满足。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If the <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph>标志包括在授权后，该动态方法可以跳过 JIT 编译器的可见性检查并访问所有类型声明为模块中或任何程序集中的任何其他模块中的私有数据。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</source>
          <target state="translated">当指定动态方法与之关联的模块时，该模块不能用于匿名承载的系统提供程序集中。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</source>
          <target state="translated">如果动态方法与你指定的类型相关联，它将有权访问的类型，所有成员，无论访问级别。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>In addition, JIT visibility checks can be skipped.</source>
          <target state="translated">此外，可以跳过 JIT 可见性检查。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</source>
          <target state="translated">这为在相同的模块或任何程序集中的任何其他模块中声明其他类型的专用数据提供动态方法访问。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>You can associate a dynamic method with any type, but your code must be granted <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with both the <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> and <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess&gt;</ph> flags.</source>
          <target state="translated">你可以使用任何类型，关联的动态方法，但你的代码必须获得<ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>两种版本同时<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph>和<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> flag is granted.</source>
          <target state="translated">下表显示哪些类型和成员都是可供匿名托管的动态方法，而无需 JIT 可见性检查，具体取决于是否与访问<ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph>授予标志。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Without <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph></source>
          <target state="translated">不带 <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>With <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph></source>
          <target state="translated">通过 <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Without skipping JIT visibility checks</source>
          <target state="translated">不要跳过 JIT 可见性检查</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public members of public types in any assembly.</source>
          <target state="translated">任何程序集中的公共类型的公共成员。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public members of public types in any assembly.</source>
          <target state="translated">任何程序集中的公共类型的公共成员。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Skipping JIT visibility checks, with restrictions</source>
          <target state="translated">正在跳过 JIT 可见性检查，但存在限制</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public members of public types in any assembly.</source>
          <target state="translated">任何程序集中的公共类型的公共成员。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</source>
          <target state="translated">所有类型，仅在其信任级别都等于或小于发出动态方法的程序集的信任级别的程序集中的所有成员。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Prior to the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, emitting code required <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">之前<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>，发出所需代码<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</source>
          <target state="translated">默认情况下，在 FullTrust 和称为权限集，包括此权限，但不是在 Internet 权限集。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Therefore, in earlier versions of the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> a library can be used with Internet permissions only if it has the <ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> attribute and also executes an <ph id="ph3">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph> for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit&gt;</ph>.</source>
          <target state="translated">因此，在早期版本的<ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>库可以用于 Internet 权限，只有在它<ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph>特性且还执行<ph id="ph3">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph>为<ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Such libraries require careful security review because coding errors could result in security holes.</source>
          <target state="translated">这种库需要进行仔细的安全检查，因为编码错误可能会导致安全漏洞。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The <ph id="ph1">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph> allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph> 允许以部分信任形式发出代码而无需发出任何安全请求，因为生成代码本身不是一项特权操作。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>That is, the generated code has no more permissions than the assembly that emits it.</source>
          <target state="translated">也就是说，生成的代码不会具有比发出它的程序集更多的权限。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>This allows libraries that emit code to be security transparent and removes the need to assert <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit&gt;</ph>, which simplifies the task of writing a secure library.</source>
          <target state="translated">这使得发出代码的库是安全透明的，且不再需要断言 <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit&gt;</ph>，这简化了编写安全库任务。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>To use this feature, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">若要使用此功能，你的应用程序应面向<ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>或更高版本。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</source>
          <target state="translated">下表显示哪些类型和成员都可以访问与模块或使用模块中的类型相关联的动态方法。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Associated with module</source>
          <target state="translated">与模块关联</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Associated with type</source>
          <target state="translated">与类型关联</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Without skipping JIT visibility checks</source>
          <target state="translated">不要跳过 JIT 可见性检查</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public and internal members of public, internal, and private types in the module.</source>
          <target state="translated">模块中的公共、 内部和私有类型的公共和内部成员。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public members of public types in any assembly.</source>
          <target state="translated">任何程序集中的公共类型的公共成员。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>All members of the associated type.</source>
          <target state="translated">关联的类型的所有成员。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public and internal members of all the other types in the module.</source>
          <target state="translated">模块中的所有其他类型的公共和内部成员。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public members of public types in any assembly.</source>
          <target state="translated">任何程序集中的公共类型的公共成员。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Skipping JIT visibility checks</source>
          <target state="translated">正在跳过 JIT 可见性检查</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>All members of all types in any assembly.</source>
          <target state="translated">任何程序集中的所有类型的所有成员。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>All members of all types in any assembly.</source>
          <target state="translated">任何程序集中的所有类型的所有成员。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>A dynamic method that is associated with a module has the permissions of that module.</source>
          <target state="translated">与模块相关联的动态方法具有该模块的权限。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>A dynamic method that is associated with a type has the permissions of the module containing that type.</source>
          <target state="translated">与类型关联的动态方法具有包含该类型的模块的权限。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</source>
          <target state="translated">动态方法和其参数不需要进行命名，但你可以指定名称以协助调试。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Custom attributes are not supported on dynamic methods or their parameters.</source>
          <target state="translated">对动态方法或其参数不支持自定义属性。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Although dynamic methods are <ph id="ph1">`static`</ph> methods (<ph id="ph2">`Shared`</ph> methods in Visual Basic), the relaxed rules for delegate binding introduced in the <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</source>
          <target state="translated">动态方法虽然<ph id="ph1">`static`</ph>方法 (<ph id="ph2">`Shared`</ph>在 Visual Basic 中的方法)，则为的委托绑定中引入宽松规则<ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>允许绑定到一个对象，对象的动态方法，以便其行为类似于实例方法时使用该委托实例调用。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>An example that demonstrates this is provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> method overload.</source>
          <target state="translated">示例演示这一操作，提供有关<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph>方法重载。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>，动态方法不支持所符号信息、 本地变量的名称和行号映射。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>This limitation might be removed in a future version.</source>
          <target state="translated">可能的未来版本中取消此限制。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>You can use <ph id="ph1">&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;</ph> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> calls are the same in both cases.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;</ph>开发简化调试生成的 Microsoft 中间语言 (MSIL)，并切换至动态方法最终在部署期间，因为期间<ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>调用是这两个用例中相同。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Verification</source>
          <target state="translated">确认</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</source>
          <target state="translated">以下列表总结了在其下动态方法包含无法验证的代码的条件。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>(For example, a dynamic method is unverifiable if its <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.)</source>
          <target state="translated">(例如，一个动态方法是无法验证如果其<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A&gt;</ph>属性设置为<ph id="ph2">`false`</ph>。)</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</source>
          <target state="translated">与安全关键的程序集关联的动态方法也是安全关键的并且可以跳过验证。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</source>
          <target state="translated">例如，由运行时没有安全属性作为桌面应用程序运行的程序集被处理为安全关键。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</source>
          <target state="translated">如果将动态方法与程序集相关联，动态方法可包含无法验证的代码。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</source>
          <target state="translated">如果动态方法包含无法验证的代码与具有 1 级透明度的程序集关联，在实时 (JIT) 编译器将插入的安全要求。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The demand succeeds only if the dynamic method is executed by fully trusted code.</source>
          <target state="translated">仅当完全受信任的代码执行动态方法时，要求成功。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>See <bpt id="p1">[</bpt>Security-Transparent Code, Level 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept>.</source>
          <target state="translated">请参阅<bpt id="p1">[</bpt>安全透明的代码，级别 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</source>
          <target state="translated">如果动态方法包含无法验证的代码与具有 2 级透明度 （如 mscorlib.dll) 的程序集关联，它将引发异常 （由 JIT 编译器插入），而不是进行安全要求。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>See <bpt id="p1">[</bpt>Security-Transparent Code, Level 2<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.</source>
          <target state="translated">请参阅<bpt id="p1">[</bpt>安全透明的代码，级别 2<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</source>
          <target state="translated">匿名承载的动态方法始终包含无法验证的代码引发异常。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>It can never skip verification, even if it is created and executed by fully trusted code.</source>
          <target state="translated">它可以永远不会跳过验证，，即使它是创建和执行由完全受信任的代码。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</source>
          <target state="translated">无法验证的代码时引发的异常而异调用动态方法的方式。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If you invoke a dynamic method by using a delegate returned from the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method, a <ph id="ph2">&lt;xref:System.Security.VerificationException&gt;</ph> is thrown.</source>
          <target state="translated">如果调用动态方法使用从返回委托<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Security.VerificationException&gt;</ph>引发。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If you invoke the dynamic method by using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method, a <ph id="ph2">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph> is thrown with an inner <ph id="ph3">&lt;xref:System.Security.VerificationException&gt;</ph>.</source>
          <target state="translated">如果通过使用调用该动态方法<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph>方法，<ph id="ph2">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph>引发内部<ph id="ph3">&lt;xref:System.Security.VerificationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The following code example creates a dynamic method that takes two parameters.</source>
          <target state="translated">下面的代码示例创建一个采用两个参数的动态方法。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</source>
          <target state="translated">该示例发出简单函数体打印到控制台，第一个参数，该示例将用作该方法的返回值的第二个参数。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">该示例完成方法通过创建委托，调用委托，它具有不同的参数，并最后调用动态方法使用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Creates a dynamic method.</source>
          <target state="translated">创建动态方法。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>The name of the dynamic method.</source>
          <target state="translated">动态方法的名称。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">它可以是长度为零的字符串，但不能为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">指定动态方法的参数类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象数组，如果此方法不具有任何参数，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</source>
          <target state="translated">初始化匿名承载的动态方法，指定方法名称、返回类型和参数类型。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</source>
          <target state="translated">此构造函数创建的动态方法是匿名的程序集，而不是一个现有类型或模块相关联。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</source>
          <target state="translated">匿名程序集存在只是为了，它是提供动态方法，一个沙盒环境，以将其隔离其他代码。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</source>
          <target state="translated">此环境，使安全的动态方法发出和部分受信任的代码执行。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</source>
          <target state="translated">此构造函数指定，在实时 (JIT) 可见性检查将会对 Microsoft 中间语言 (MSIL) 强制执行动态方法。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>That is, the code in the dynamic method has access to public methods of public classes.</source>
          <target state="translated">即动态方法中的代码有权访问的公共类的公共方法。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>Exceptions are thrown if the method tries to access types or members that are <ph id="ph1">`private`</ph>, <ph id="ph2">`protected`</ph>, or <ph id="ph3">`internal`</ph> (<ph id="ph4">`Friend`</ph> in Visual Basic).</source>
          <target state="translated">如果尝试访问的类型或成员的方法引发异常<ph id="ph1">`private`</ph>， <ph id="ph2">`protected`</ph>，或<ph id="ph3">`internal`</ph>(<ph id="ph4">`Friend`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">若要创建一个具有受限制地跳过 JIT 可见性检查的动态方法，使用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</source>
          <target state="translated">当构造一个匿名托管的动态方法时，将包含发出程序集的调用堆栈。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</source>
          <target state="translated">当调用的方法时，而不是实际调用方的权限使用发出程序集的权限。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</source>
          <target state="translated">因此，无法在比发出它，即使它是传递给并且由具有更高的信任级别的程序集执行的程序集的更高级别权限执行该动态方法。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>This constructor specifies the method attributes <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, and the calling convention <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">此构造函数指定方法属性<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>，和调用约定<ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>This constructor was introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">此构造函数中引入了<ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>或更高版本。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> 的元素为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is a type for which <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> 是一种 <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> 为其返回 <ph id="ph3">&lt;see langword="true" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>The name of the dynamic method.</source>
          <target state="translated">动态方法的名称。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">它可以是长度为零的字符串，但不能为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">指定动态方法的参数类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象数组，如果此方法不具有任何参数，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，则跳过针对动态方法的 MSIL 访问的类型和成员进行的 JIT 可见性检查，含此限制：包含这些类型和成员的程序集的信任级别必须等于或小于发出动态方法的调用堆栈的信任级别；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</source>
          <target state="translated">初始化匿名托管的动态方法，同时指定方法名称、返回类型、参数类型并指定是否应针对动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员跳过实时 (JIT) 可见性检查。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</source>
          <target state="translated">此构造函数创建的动态方法是匿名的程序集，而不是一个现有类型或模块相关联。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</source>
          <target state="translated">匿名程序集存在只是为了，它是提供动态方法，一个沙盒环境，以将其隔离其他代码。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</source>
          <target state="translated">此环境，使安全的动态方法发出和部分受信任的代码执行。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>Anonymously hosted dynamic methods do not have automatic access to any types or members that are <ph id="ph1">`private`</ph>, <ph id="ph2">`protected`</ph>, or <ph id="ph3">`internal`</ph> (<ph id="ph4">`Friend`</ph> in Visual Basic).</source>
          <target state="translated">匿名托管的动态方法不能对任何类型或成员的自动访问<ph id="ph1">`private`</ph>， <ph id="ph2">`protected`</ph>，或<ph id="ph3">`internal`</ph>(<ph id="ph4">`Friend`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</source>
          <target state="translated">这是不同的动态方法与一个现有的类型或模块，其关联的作用域中具有隐藏成员访问权限。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>Specify <ph id="ph1">`true`</ph> for <ph id="ph2">`restrictedSkipVisibility`</ph> if your dynamic method has to access types or members that are <ph id="ph3">`private`</ph>, <ph id="ph4">`protected`</ph>, or <ph id="ph5">`internal`</ph>.</source>
          <target state="translated">指定<ph id="ph1">`true`</ph>为<ph id="ph2">`restrictedSkipVisibility`</ph>如果动态方法具有类型或成员的访问权<ph id="ph3">`private`</ph>， <ph id="ph4">`protected`</ph>，或<ph id="ph5">`internal`</ph>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This gives the dynamic method restricted access to these members.</source>
          <target state="translated">这为这些成员提供受限的动态方法访问。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>That is, the members can be accessed only if the following conditions are met:</source>
          <target state="translated">也就是说，可以访问成员，仅当满足以下条件：</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</source>
          <target state="translated">目标成员所属的级别为等于或小于发出动态方法的调用堆栈的信任程序集。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>The call stack that emits the dynamic method is granted <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">授予发出动态方法的调用堆栈<ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This is always true when the code is executed with full trust.</source>
          <target state="translated">以完全信任模式执行的代码，这是始终 true。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>For partially trusted code, it is true only if the host explicitly grants the permission.</source>
          <target state="translated">对于部分受信任的代码，它为 true，仅当主机显式授予权限。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>If the permission has not been granted, a security exception is thrown when <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> is called or when the dynamic method is invoked, not when this constructor is called.</source>
          <target state="translated">如果尚未授予权限，安全异常时引发<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph>称为或动态方法调用时，不在此构造函数调用。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>No special permissions are required to emit the dynamic method.</source>
          <target state="translated">发出动态方法不需要任何特殊权限。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>For example, a dynamic method that is created with <ph id="ph1">`restrictedSkipVisibility`</ph> set to <ph id="ph2">`true`</ph> can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</source>
          <target state="translated">例如，使用创建的动态方法<ph id="ph1">`restrictedSkipVisibility`</ph>设置为<ph id="ph2">`true`</ph>可以访问私有成员的调用堆栈上的任何程序集，调用堆栈是否已被授予受限的成员访问权限。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> assembly, because such assemblies are fully trusted.</source>
          <target state="translated">如果调用堆栈上的部分受信任代码创建动态方法，它不能访问私有成员中的类型的<ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>程序集，因为这样的程序集是完全受信任。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>If <ph id="ph1">`restrictedSkipVisibility`</ph> is <ph id="ph2">`false`</ph>, JIT visibility checks are enforced.</source>
          <target state="translated">如果<ph id="ph1">`restrictedSkipVisibility`</ph>是<ph id="ph2">`false`</ph>，JIT 可见性检查会强制执行。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are <ph id="ph1">`private`</ph>, <ph id="ph2">`protected`</ph>, or <ph id="ph3">`internal`</ph>.</source>
          <target state="translated">动态方法中的代码有权访问的公共类的公共方法，以及如果它尝试访问的类型或成员所引发异常<ph id="ph1">`private`</ph>， <ph id="ph2">`protected`</ph>，或<ph id="ph3">`internal`</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</source>
          <target state="translated">当构造一个匿名托管的动态方法时，将包含发出程序集的调用堆栈。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</source>
          <target state="translated">当调用的方法时，而不是实际调用方的权限使用发出调用堆栈的权限。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</source>
          <target state="translated">因此，无法在比发出它，即使它是传递给并且由具有更高的信任级别的程序集执行的程序集的更高级别权限执行该动态方法。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This constructor specifies the method attributes <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, and the calling convention <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">此构造函数指定方法属性<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>，和调用约定<ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This constructor was introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">此构造函数中引入了<ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>或更高版本。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> 的元素为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is a type for which <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> 是一种 <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> 为其返回 <ph id="ph3">&lt;see langword="true" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>The name of the dynamic method.</source>
          <target state="translated">动态方法的名称。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">它可以是长度为零的字符串，但不能为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">指定动态方法的参数类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象数组，如果此方法不具有任何参数，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> representing the module with which the dynamic method is to be logically associated.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph>，表示动态方法将与之逻辑关联的模块。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</source>
          <target state="translated">创建一个对模块全局有效的动态方法，指定方法名称、返回类型、参数类型和模块。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>This constructor specifies method attributes <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, calling convention <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>, and does not skip just-in-time (JIT) visibility checks.</source>
          <target state="translated">此构造函数指定方法属性<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>，调用约定<ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>，和不跳过在实时 (JIT) 可见性检查。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>The dynamic method created with this constructor has access to public and <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) members of all the types contained in module <ph id="ph3">`m`</ph>.</source>
          <target state="translated">使用此构造函数创建的动态方法有权访问公共和<ph id="ph1">`internal`</ph>(<ph id="ph2">`Friend`</ph>在 Visual Basic 中) 的模块中包含的所有类型的成员<ph id="ph3">`m`</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>For backward compatibility, this constructor demands <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> flag if the following conditions are both true: <ph id="ph3">`m`</ph> is a module other than the calling module, and the demand for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag has failed.</source>
          <target state="translated">为了向后兼容，此构造函数可能需要<ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>与<ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph>标志如果以下条件都 true:<ph id="ph3">`m`</ph>是一个模块以外的调用的模块，以及对需求<ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph>标志已失败。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>If the demand for <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.</source>
          <target state="translated">如果为需<ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>成功，允许执行该操作。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>，此成员不再需要<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>(See <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>反射发出中的安全问题<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>。)若要使用此功能，应用程序应为 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 或更高版本。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>The following code example creates a dynamic method that takes two parameters.</source>
          <target state="translated">下面的代码示例创建一个采用两个参数的动态方法。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</source>
          <target state="translated">该示例发出简单函数体打印到控制台，第一个参数，该示例将用作该方法的返回值的第二个参数。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method.</source>
          <target state="translated">该示例完成方法通过创建委托，调用委托，它具有不同的参数，并最后调用动态方法使用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> 的元素为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source><ph id="ph1">&lt;paramref name="m" /&gt;</ph> is a module that provides anonymous hosting for dynamic methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="m" /&gt;</ph> 是为动态方法提供匿名承载的模块。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source><ph id="ph1">&lt;paramref name="m" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="m" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is a type for which <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> 是一种 <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> 为其返回 <ph id="ph3">&lt;see langword="true" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>to associate the dynamic method with a module other than the calling module.</source>
          <target state="translated">若要将动态方法与不同调用模块的模块相关联。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The name of the dynamic method.</source>
          <target state="translated">动态方法的名称。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">它可以是长度为零的字符串，但不能为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">指定动态方法的参数类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象数组，如果此方法不具有任何参数，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> with which the dynamic method is logically associated.</source>
          <target state="translated">动态方法与之在逻辑上相关联的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The dynamic method has access to all members of the type.</source>
          <target state="translated">动态方法有权访问此类型的所有成员。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</source>
          <target state="translated">创建动态方法，并指定方法的名称、 返回类型、 参数类型和此动态方法与之在逻辑上相关联的类型。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The dynamic method created with this constructor has access to all members of the type <ph id="ph1">`owner`</ph>, and to public and <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> in Visual Basic) members of all the other types in the module that contains <ph id="ph4">`owner`</ph>.</source>
          <target state="translated">使用此构造函数创建的动态方法有权访问该类型的所有成员<ph id="ph1">`owner`</ph>，并为公共和<ph id="ph2">`internal`</ph>(<ph id="ph3">`Friend`</ph>在 Visual Basic 中) 中包含的模块的所有其他类型的成员<ph id="ph4">`owner`</ph>。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>This constructor specifies method attributes <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, calling convention <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>, and does not skip just-in-time (JIT) visibility checks.</source>
          <target state="translated">此构造函数指定方法属性<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>，调用约定<ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>，和不跳过在实时 (JIT) 可见性检查。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>For backward compatibility, this constructor demands <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> flag if the following conditions are both true: <ph id="ph3">`owner`</ph> is in a module other than the calling module, and the demand for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag has failed.</source>
          <target state="translated">为了向后兼容，此构造函数可能需要<ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>与<ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph>标志如果以下条件都 true:<ph id="ph3">`owner`</ph>所在的模块之外调用模块，以及对需求<ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph>标志已失败。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>If the demand for <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.</source>
          <target state="translated">如果为需<ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>成功，允许执行该操作。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>，此成员不再需要<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>(See <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>反射发出中的安全问题<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>。)若要使用此功能，应用程序应为 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 或更高版本。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> that is logically associated with a type.</source>
          <target state="translated">下面的代码示例创建<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>逻辑上与该键相关联的类型。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>This association gives it access to the private members of that type.</source>
          <target state="translated">此关联使其可以访问该类型的私有成员。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The code example defines a class named <ph id="ph1">`Example`</ph> with a private field, a class named <ph id="ph2">`DerivedFromxample`</ph> that derives from the first class, a delegate type named <ph id="ph3">`UseLikeStatic`</ph> that returns <ph id="ph4">&lt;xref:System.Int32&gt;</ph> and has parameters of type <ph id="ph5">`Example`</ph> and <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, and a delegate type named <ph id="ph7">`UseLikeInstance`</ph> that returns <ph id="ph8">&lt;xref:System.Int32&gt;</ph> and has one parameter of type <ph id="ph9">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">代码示例定义一个名为<ph id="ph1">`Example`</ph>私有字段，与类名为<ph id="ph2">`DerivedFromxample`</ph>派生自的第一个类，名为的委托类型<ph id="ph3">`UseLikeStatic`</ph>返回<ph id="ph4">&lt;xref:System.Int32&gt;</ph>和具有类型参数<ph id="ph5">`Example`</ph>和<ph id="ph6">&lt;xref:System.Int32&gt;</ph>，和名为的委托类型<ph id="ph7">`UseLikeInstance`</ph>返回<ph id="ph8">&lt;xref:System.Int32&gt;</ph>并且具有一个类型的参数<ph id="ph9">&lt;xref:System.Int32&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The example code then creates a <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> that changes the private field of an instance of <ph id="ph2">`Example`</ph> and returns the previous value.</source>
          <target state="translated">然后，该示例代码创建<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>更改的实例的私有字段<ph id="ph2">`Example`</ph>并返回以前的值。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>In general, changing the internal fields of classes is not good object-oriented coding practice.</source>
          <target state="translated">一般情况下，更改类的内部字段是不好的面向对象的编码做法。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The example code creates an instance of <ph id="ph1">`Example`</ph> and then creates two delegates.</source>
          <target state="translated">该示例代码创建的实例<ph id="ph1">`Example`</ph>，然后创建两个委托。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The first is of type <ph id="ph1">`UseLikeStatic`</ph>, which has the same parameters as the dynamic method.</source>
          <target state="translated">第一个委托类型的<ph id="ph1">`UseLikeStatic`</ph>，它具有与动态方法相同的参数。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The second is of type <ph id="ph1">`UseLikeInstance`</ph>, which lacks the first parameter (of type <ph id="ph2">`Example`</ph>).</source>
          <target state="translated">第二个属于类型<ph id="ph1">`UseLikeInstance`</ph>，该委托的第一个参数缺少 (类型的<ph id="ph2">`Example`</ph>)。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>This delegate is created using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> method overload; the second parameter of that method overload is an instance of <ph id="ph2">`Example`</ph>, in this case the instance just created, which is bound to the newly created delegate.</source>
          <target state="translated">使用创建此委托<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph>方法重载; 第二个参数的该方法重载是的一个实例<ph id="ph2">`Example`</ph>，在这种情况下刚创建的实例绑定到新创建的委托。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>Whenever that delegate is invoked, the dynamic method acts on the bound instance of <ph id="ph1">`Example`</ph>.</source>
          <target state="translated">每当调用该委托，动态方法都作用于的绑定实例<ph id="ph1">`Example`</ph>。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>This is an example of the relaxed rules for delegate binding introduced in the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, along with new overloads of the <ph id="ph2">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">这是宽松规则的一个示例为的委托绑定中引入<ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>，以及的新重载<ph id="ph2">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Delegate&gt;</ph> class.</source>
          <target state="translated">有关更多信息，请参见 <ph id="ph1">&lt;xref:System.Delegate&gt;</ph> 类。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The <ph id="ph1">`UseLikeStatic`</ph> delegate is invoked, passing in the instance of <ph id="ph2">`Example`</ph> that is bound to the <ph id="ph3">`UseLikeInstance`</ph> delegate.</source>
          <target state="translated"><ph id="ph1">`UseLikeStatic`</ph>调用委托时，传递的实例中<ph id="ph2">`Example`</ph>，它绑定到<ph id="ph3">`UseLikeInstance`</ph>委托。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>Then the <ph id="ph1">`UseLikeInstance`</ph> delegate is invoked, so that both delegates act on the same instance of <ph id="ph2">`Example`</ph>.</source>
          <target state="translated">则<ph id="ph1">`UseLikeInstance`</ph>调用委托时，以便这两个委托都作用于的同一个实例<ph id="ph2">`Example`</ph>。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The changes in the values of the internal field are displayed after each call.</source>
          <target state="translated">中的内部字段的值的更改将显示每次调用之后。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>Finally, a <ph id="ph1">`UseLikeInstance`</ph> delegate is bound to an instance of <ph id="ph2">`DerivedFromxample`</ph>, and the delegate calls are repeated.</source>
          <target state="translated">最后，<ph id="ph1">`UseLikeInstance`</ph>委托绑定到某个实例的<ph id="ph2">`DerivedFromxample`</ph>，并且委托调用重复出现。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> 的元素为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> 是一个接口、数组、开放式泛型类型，或者是泛型类型或方法的类型参数。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, or is a type for which <ph id="ph3">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> 是 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，或 <ph id="ph3">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> 为其返回 <ph id="ph4">&lt;see langword="true" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>to associate the dynamic method with a type in a module other than the calling module.</source>
          <target state="translated">若要将动态方法与不同调用模块的模块中的类型相关联。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>The name of the dynamic method.</source>
          <target state="translated">动态方法的名称。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">它可以是长度为零的字符串，但不能为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">指定动态方法的参数类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象数组，如果此方法不具有任何参数，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> representing the module with which the dynamic method is to be logically associated.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph>，表示动态方法将与之逻辑关联的模块。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</source>
          <target state="translated">若要跳过对动态方法的 MSIL 访问的类型和成员的 JIT 可见性检查，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</source>
          <target state="translated">创建一个对模块全局有效的动态方法，指定方法名称、返回类型、参数类型和模块，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>This constructor specifies method attributes <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, and calling convention <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">此构造函数指定方法属性<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>，、 调用约定<ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>The dynamic method created with this constructor has access to public and <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) members of all the types in contained module <ph id="ph3">`m`</ph>.</source>
          <target state="translated">使用此构造函数创建的动态方法有权访问公共和<ph id="ph1">`internal`</ph>(<ph id="ph2">`Friend`</ph>在 Visual Basic 中) 包含模块中的所有类型的成员<ph id="ph3">`m`</ph>。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</source>
          <target state="translated">跳过 JIT 编译器的可见性检查将允许要访问的所有其他类型的私有和受保护成员的动态方法。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>This is useful, for example, when writing code to serialize objects.</source>
          <target state="translated">这很有用，例如，在编写代码用于序列化对象时。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>For backward compatibility, this constructor demands <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> flag if the following conditions are both true: <ph id="ph3">`m`</ph> is a module other than the calling module, and the demand for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag has failed.</source>
          <target state="translated">为了向后兼容，此构造函数可能需要<ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>与<ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph>标志如果以下条件都 true:<ph id="ph3">`m`</ph>是一个模块以外的调用的模块，以及对需求<ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph>标志已失败。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>If the demand for <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.</source>
          <target state="translated">如果为需<ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>成功，允许执行该操作。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>，此成员不再需要<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>(See <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>反射发出中的安全问题<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>。)若要使用此功能，应用程序应为 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 或更高版本。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> 的元素为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="m" /&gt;</ph> is a module that provides anonymous hosting for dynamic methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="m" /&gt;</ph> 是为动态方法提供匿名承载的模块。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="m" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="m" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is a type for which <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> 是一种 <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> 为其返回 <ph id="ph3">&lt;see langword="true" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>to associate the dynamic method with a module other than the calling module.</source>
          <target state="translated">若要将动态方法与不同调用模块的模块相关联。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The name of the dynamic method.</source>
          <target state="translated">动态方法的名称。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">它可以是长度为零的字符串，但不能为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">指定动态方法的参数类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象数组，如果此方法不具有任何参数，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> with which the dynamic method is logically associated.</source>
          <target state="translated">动态方法与之在逻辑上相关联的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The dynamic method has access to all members of the type.</source>
          <target state="translated">动态方法有权访问此类型的所有成员。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若要跳过对动态方法的 MSIL 访问的类型和成员的 JIT 可见性检查，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</source>
          <target state="translated">创建一个动态方法，指定方法名称、返回类型、参数类型，以及与该动态方法逻辑上相关联的类型，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The dynamic method created with this constructor has access to all members of the type <ph id="ph1">`owner`</ph>, and to public and <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> in Visual Basic) members of all the other types in the module that contains <ph id="ph4">`owner`</ph>.</source>
          <target state="translated">使用此构造函数创建的动态方法有权访问该类型的所有成员<ph id="ph1">`owner`</ph>，并为公共和<ph id="ph2">`internal`</ph>(<ph id="ph3">`Friend`</ph>在 Visual Basic 中) 中包含的模块的所有其他类型的成员<ph id="ph4">`owner`</ph>。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</source>
          <target state="translated">跳过 JIT 编译器的可见性检查将允许要访问的所有其他类型的私有和受保护成员的动态方法。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>This is useful, for example, when writing code to serialize objects.</source>
          <target state="translated">这很有用，例如，在编写代码用于序列化对象时。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>This constructor specifies method attributes <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, and calling convention <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">此构造函数指定方法属性<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>，、 调用约定<ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>For backward compatibility, this constructor demands <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> flag if the following conditions are both true: <ph id="ph3">`owner`</ph> is in a module other than the calling module, and the demand for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag has failed.</source>
          <target state="translated">为了向后兼容，此构造函数可能需要<ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>与<ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph>标志如果以下条件都 true:<ph id="ph3">`owner`</ph>所在的模块之外调用模块，以及对需求<ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph>标志已失败。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>If the demand for <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.</source>
          <target state="translated">如果为需<ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>成功，允许执行该操作。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>，此成员不再需要<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>(See <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>反射发出中的安全问题<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>。)若要使用此功能，应用程序应为 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 或更高版本。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> 的元素为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> 是一个接口、数组、开放式泛型类型，或者是泛型类型或方法的类型参数。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, or is a type for which <ph id="ph3">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> 是 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，或 <ph id="ph3">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> 为其返回 <ph id="ph4">&lt;see langword="true" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>to associate the dynamic method with a type in a module other than the calling module.</source>
          <target state="translated">若要将动态方法与不同调用模块的模块中的类型相关联。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>The name of the dynamic method.</source>
          <target state="translated">动态方法的名称。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">它可以是长度为零的字符串，但不能为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> values that specifies the attributes of the dynamic method.</source>
          <target state="translated">用于指定动态方法属性的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> 值的按位组合。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>The only combination allowed is <ph id="ph1">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> and <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>.</source>
          <target state="translated">允许的唯一组合为 <ph id="ph1">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>The calling convention for the dynamic method.</source>
          <target state="translated">动态方法的调用约定。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Must be <ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</source>
          <target state="translated">必须为 <ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">指定动态方法的参数类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象数组，如果此方法不具有任何参数，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若要跳过对动态方法的 MSIL 访问的类型和成员的 JIT 可见性检查，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</source>
          <target state="translated">创建一个对模块全局有效的动态方法，指定方法名称、属性、调用约定、返回类型、参数类型和模块，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>The dynamic method created with this constructor has access to public and <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) members of all the public and internal types contained in module <ph id="ph3">`m`</ph>.</source>
          <target state="translated">使用此构造函数创建的动态方法有权访问公共和<ph id="ph1">`internal`</ph>(<ph id="ph2">`Friend`</ph>在 Visual Basic 中) 的模块中包含的所有公共和内部类型的成员<ph id="ph3">`m`</ph>。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</source>
          <target state="translated">跳过 JIT 编译器的可见性检查将允许要访问的所有其他类型的模块中和所有其他程序集中的私有和受保护成员的动态方法。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>This is useful, for example, when writing code to serialize objects.</source>
          <target state="translated">这很有用，例如，在编写代码用于序列化对象时。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>For backward compatibility, this constructor demands <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> flag if the following conditions are both true: <ph id="ph3">`m`</ph> is a module other than the calling module, and the demand for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag has failed.</source>
          <target state="translated">为了向后兼容，此构造函数可能需要<ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>与<ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph>标志如果以下条件都 true:<ph id="ph3">`m`</ph>是一个模块以外的调用的模块，以及对需求<ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph>标志已失败。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>If the demand for <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.</source>
          <target state="translated">如果为需<ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>成功，允许执行该操作。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>，此成员不再需要<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>(See <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>反射发出中的安全问题<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>。)若要使用此功能，应用程序应为 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 或更高版本。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> 的元素为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="m" /&gt;</ph> is a module that provides anonymous hosting for dynamic methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="m" /&gt;</ph> 是为动态方法提供匿名承载的模块。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="m" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="m" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributes" /&gt;</ph> is a combination of flags other than <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> and <ph id="ph3">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributes" /&gt;</ph> 是标志的组合，而不是 <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> 和 <ph id="ph3">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph> 的组合。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="callingConvention" /&gt;</ph> is not <ph id="ph2">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callingConvention" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is a type for which <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> 是一种 <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> 为其返回 <ph id="ph3">&lt;see langword="true" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>to associate the dynamic method with a module other than the calling module.</source>
          <target state="translated">若要将动态方法与不同调用模块的模块相关联。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The name of the dynamic method.</source>
          <target state="translated">动态方法的名称。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">它可以是长度为零的字符串，但不能为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> values that specifies the attributes of the dynamic method.</source>
          <target state="translated">用于指定动态方法属性的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> 值的按位组合。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The only combination allowed is <ph id="ph1">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> and <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>.</source>
          <target state="translated">允许的唯一组合为 <ph id="ph1">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The calling convention for the dynamic method.</source>
          <target state="translated">动态方法的调用约定。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Must be <ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</source>
          <target state="translated">必须为 <ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象，用于指定动态方法的返回类型，如果此方法没有返回类型，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">指定动态方法的参数类型的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 对象数组，如果此方法不具有任何参数，则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> with which the dynamic method is logically associated.</source>
          <target state="translated">动态方法与之在逻辑上相关联的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The dynamic method has access to all members of the type.</source>
          <target state="translated">动态方法有权访问此类型的所有成员。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若要跳过对动态方法的 MSIL 访问的类型和成员的 JIT 可见性检查，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</source>
          <target state="translated">创建一个动态方法，指定方法名称、属性、调用约定、返回类型、参数类型，以及与该动态方法逻辑上相关联的类型，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The dynamic method is global to the module that contains the type <ph id="ph1">`owner`</ph>.</source>
          <target state="translated">动态方法适用于包含的类型的模块<ph id="ph1">`owner`</ph>。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>It has access to all members of the type <ph id="ph1">`owner`</ph>.</source>
          <target state="translated">它可以访问的类型的所有成员<ph id="ph1">`owner`</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The dynamic method created with this constructor has access to all members of the type <ph id="ph1">`owner`</ph>, and to public and <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> in Visual Basic) members of all the types contained in the module that contains <ph id="ph4">`owner`</ph>.</source>
          <target state="translated">使用此构造函数创建的动态方法有权访问该类型的所有成员<ph id="ph1">`owner`</ph>，并为公共和<ph id="ph2">`internal`</ph>(<ph id="ph3">`Friend`</ph>在 Visual Basic 中) 中包含的模块包含的所有类型的成员<ph id="ph4">`owner`</ph>。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</source>
          <target state="translated">跳过 JIT 编译器的可见性检查将允许要访问的所有其他类型的私有和受保护成员的动态方法。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>This is useful, for example, when writing code to serialize objects.</source>
          <target state="translated">这很有用，例如，在编写代码用于序列化对象时。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>For backward compatibility, this constructor demands <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> flag if the following conditions are both true: <ph id="ph3">`owner`</ph> is in a module other than the calling module, and the demand for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag has failed.</source>
          <target state="translated">为了向后兼容，此构造函数可能需要<ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>与<ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph>标志如果以下条件都 true:<ph id="ph3">`owner`</ph>所在的模块之外调用模块，以及对需求<ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph>标志已失败。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>If the demand for <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.</source>
          <target state="translated">如果为需<ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph>成功，允许执行该操作。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>，此成员不再需要<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>(See <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">(请参阅<bpt id="p1">[</bpt>反射发出中的安全问题<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>。)若要使用此功能，应用程序应为 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 或更高版本。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> 的元素为 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> 是一个接口、数组、开放式泛型类型，或者是泛型类型或方法的类型参数。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributes" /&gt;</ph> is a combination of flags other than <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> and <ph id="ph3">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributes" /&gt;</ph> 是标志的组合，而不是 <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> 和 <ph id="ph3">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph> 的组合。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="callingConvention" /&gt;</ph> is not <ph id="ph2">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callingConvention" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is a type for which <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> 是一种 <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> 为其返回 <ph id="ph3">&lt;see langword="true" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>to associate the dynamic method with a type in a module other than the calling module.</source>
          <target state="translated">若要将动态方法与不同调用模块的模块中的类型相关联。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.Attributes">
          <source>Gets the attributes specified when the dynamic method was created.</source>
          <target state="translated">创建动态方法后获取指定的属性。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Attributes">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> values representing the attributes for the method.</source>
          <target state="translated">表示此方法的属性的 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> 的值的按位组合。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Attributes">
          <source>Currently, the method attributes for a dynamic method are always <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static&gt;</ph>.</source>
          <target state="translated">目前，动态方法的方法属性始终是<ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Attributes">
          <source>The following code example displays the method attributes of a dynamic method.</source>
          <target state="translated">下面的代码示例显示一个动态方法的方法属性。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Attributes">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
          <source>Gets the calling convention specified when the dynamic method was created.</source>
          <target state="translated">创建动态方法后获取指定的调用约定。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Reflection.CallingConventions" /&gt;</ph> values that indicates the calling convention of the method.</source>
          <target state="translated">表示此方法的调用约定的一个 <ph id="ph1">&lt;see cref="T:System.Reflection.CallingConventions" /&gt;</ph> 的值。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
          <source>Currently, the calling convention for a dynamic method is always <ph id="ph1">&lt;xref:System.Reflection.CallingConventions.Standard&gt;</ph>.</source>
          <target state="translated">目前，一个动态方法的调用约定是始终<ph id="ph1">&lt;xref:System.Reflection.CallingConventions.Standard&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
          <source>The following code example displays the calling convention of a dynamic method.</source>
          <target state="translated">下面的代码示例显示一个动态方法的调用约定。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Completes the dynamic method and creates a delegate that can be used to execute it.</source>
          <target state="translated">完成动态方法并创建一个可执行此方法的委托。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>A delegate type whose signature matches that of the dynamic method.</source>
          <target state="translated">其签名与动态方法匹配的委托类型。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>Completes the dynamic method and creates a delegate that can be used to execute it.</source>
          <target state="translated">完成动态方法并创建一个可执行此方法的委托。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>A delegate of the specified type, which can be used to execute the dynamic method.</source>
          <target state="translated">可用于执行此动态方法的指定类型的委托。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method completes the dynamic method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph>方法或<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph>方法完成动态方法。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</source>
          <target state="translated">任何进一步尝试 alter 动态方法，例如修改参数定义或发出多个 Microsoft 中间语言 (MSIL)，将被忽略;不引发异常。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>To create a method body for a dynamic method when you have your own MSIL generator, call the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A&gt;</ph> method to obtain a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">若要创建一个动态方法的方法主体拥有自己的 MSIL 生成器时，调用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A&gt;</ph>方法来获取<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>If you do not have your own MSIL generator, call the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A&gt;</ph> method to obtain an <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> object that can be used to generate the method body.</source>
          <target state="translated">如果你没有你自己的 MSIL 生成器，调用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A&gt;</ph>方法来获取<ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>可以用于生成方法主体的对象。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>The following code example creates a dynamic method that takes two parameters.</source>
          <target state="translated">下面的代码示例创建一个采用两个参数的动态方法。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</source>
          <target state="translated">该示例发出简单函数体打印到控制台，第一个参数，该示例将用作该方法的返回值的第二个参数。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">该示例完成方法通过创建委托，调用委托，它具有不同的参数，并最后调用动态方法使用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>The dynamic method has no method body.</source>
          <target state="translated">动态方法没有方法体。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> has the wrong number of parameters or the wrong parameter types.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> 的参数数量或参数类型不正确。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>A delegate type whose signature matches that of the dynamic method, minus the first parameter.</source>
          <target state="translated">一个签名与动态方法的签名匹配的委托类型，不包括第一个参数。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>An object the delegate is bound to.</source>
          <target state="translated">委托绑定到的对象。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Must be of the same type as the first parameter of the dynamic method.</source>
          <target state="translated">其类型必须与动态方法的第一个参数的类型相同。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</source>
          <target state="translated">完成动态方法并创建一个可用于执行该方法的委托，指定委托类型和委托绑定到的对象。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</source>
          <target state="translated">一个指定类型的委托，可用于对指定的目标对象执行动态方法。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>This method overload creates a delegate bound to a particular object.</source>
          <target state="translated">此方法重载创建委托绑定到特定的对象。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Such a delegate is said to be closed over its first argument.</source>
          <target state="translated">此类委托被称为关闭通过其第一个参数。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Although the method is static, it acts as if it were an instance method; the instance is <ph id="ph1">`target`</ph>.</source>
          <target state="translated">尽管此方法是静态的但其表现就像它是实例方法;实例是<ph id="ph1">`target`</ph>。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>This method overload requires <ph id="ph1">`target`</ph> to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</source>
          <target state="translated">此方法重载都需要<ph id="ph1">`target`</ph>相同的类型作为第一个参数的动态方法，或将赋值给该类型 （例如，派生类）。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The signature of <ph id="ph1">`delegateType`</ph> has all the parameters of the dynamic method except the first.</source>
          <target state="translated">签名<ph id="ph1">`delegateType`</ph>具有除第一个动态方法的所有参数。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>For example, if the dynamic method has the parameters <ph id="ph1">&lt;xref:System.String&gt;</ph>, <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, and <ph id="ph3">&lt;xref:System.Byte&gt;</ph>, then <ph id="ph4">`delegateType`</ph> has the parameters <ph id="ph5">&lt;xref:System.Int32&gt;</ph> and <ph id="ph6">&lt;xref:System.Byte&gt;</ph>; <ph id="ph7">`target`</ph> is of type <ph id="ph8">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">例如，如果动态方法不具有参数<ph id="ph1">&lt;xref:System.String&gt;</ph>， <ph id="ph2">&lt;xref:System.Int32&gt;</ph>，和<ph id="ph3">&lt;xref:System.Byte&gt;</ph>，然后<ph id="ph4">`delegateType`</ph>具有参数<ph id="ph5">&lt;xref:System.Int32&gt;</ph>和<ph id="ph6">&lt;xref:System.Byte&gt;</ph>;<ph id="ph7">`target`</ph>属于类型<ph id="ph8">&lt;xref:System.String&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method completes the dynamic method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph>方法或<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph>方法完成动态方法。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</source>
          <target state="translated">任何进一步尝试 alter 动态方法，例如修改参数定义或发出多个 Microsoft 中间语言 (MSIL)，将被忽略;不引发异常。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>To create a method body for a dynamic method when you have your own MSIL generator, call the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A&gt;</ph> method to obtain a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">若要创建一个动态方法的方法主体拥有自己的 MSIL 生成器时，调用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A&gt;</ph>方法来获取<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>If you do not have your own MSIL generator, call the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A&gt;</ph> method to obtain an <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> object that can be used to generate the method body.</source>
          <target state="translated">如果你没有你自己的 MSIL 生成器，调用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A&gt;</ph>方法来获取<ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>可以用于生成方法主体的对象。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The following code example creates delegate that binds a <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> to an instance of a type, so that the method acts on the same instance each time it is invoked.</source>
          <target state="translated">下面的代码示例创建绑定的委托<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>到一种类型的实例，以便每次对同一个实例担任方法调用它。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The code example defines a class named <ph id="ph1">`Example`</ph> with a private field, a class named <ph id="ph2">`DerivedFromxample`</ph> that derives from the first class, a delegate type named <ph id="ph3">`UseLikeStatic`</ph> that returns <ph id="ph4">&lt;xref:System.Int32&gt;</ph> and has parameters of type <ph id="ph5">`Example`</ph> and <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, and a delegate type named <ph id="ph7">`UseLikeInstance`</ph> that returns <ph id="ph8">&lt;xref:System.Int32&gt;</ph> and has one parameter of type <ph id="ph9">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">代码示例定义一个名为<ph id="ph1">`Example`</ph>私有字段，与类名为<ph id="ph2">`DerivedFromxample`</ph>派生自的第一个类，名为的委托类型<ph id="ph3">`UseLikeStatic`</ph>返回<ph id="ph4">&lt;xref:System.Int32&gt;</ph>和具有类型参数<ph id="ph5">`Example`</ph>和<ph id="ph6">&lt;xref:System.Int32&gt;</ph>，和名为的委托类型<ph id="ph7">`UseLikeInstance`</ph>返回<ph id="ph8">&lt;xref:System.Int32&gt;</ph>并且具有一个类型的参数<ph id="ph9">&lt;xref:System.Int32&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The example code then creates a <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> that changes the private field of an instance of <ph id="ph2">`Example`</ph> and returns the previous value.</source>
          <target state="translated">然后，该示例代码创建<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>更改的实例的私有字段<ph id="ph2">`Example`</ph>并返回以前的值。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>In general, changing the internal fields of classes is not good object-oriented coding practice.</source>
          <target state="translated">一般情况下，更改类的内部字段是不好的面向对象的编码做法。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The example code creates an instance of <ph id="ph1">`Example`</ph> and then creates two delegates.</source>
          <target state="translated">该示例代码创建的实例<ph id="ph1">`Example`</ph>，然后创建两个委托。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The first is of type <ph id="ph1">`UseLikeStatic`</ph>, which has the same parameters as the dynamic method.</source>
          <target state="translated">第一个委托类型的<ph id="ph1">`UseLikeStatic`</ph>，它具有与动态方法相同的参数。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The second is of type <ph id="ph1">`UseLikeInstance`</ph>, which lacks the first parameter (of type <ph id="ph2">`Example`</ph>).</source>
          <target state="translated">第二个属于类型<ph id="ph1">`UseLikeInstance`</ph>，该委托的第一个参数缺少 (类型的<ph id="ph2">`Example`</ph>)。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>This delegate is created using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> method overload; the second parameter of that method overload is an instance of <ph id="ph2">`Example`</ph>, in this case the instance just created, which is bound to the newly created delegate.</source>
          <target state="translated">使用创建此委托<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph>方法重载; 第二个参数的该方法重载是的一个实例<ph id="ph2">`Example`</ph>，在这种情况下刚创建的实例绑定到新创建的委托。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Whenever that delegate is invoked, the dynamic method acts on the bound instance of <ph id="ph1">`Example`</ph>.</source>
          <target state="translated">每当调用该委托，动态方法都作用于的绑定实例<ph id="ph1">`Example`</ph>。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>This is an example of the relaxed rules for delegate binding introduced in the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, along with new overloads of the <ph id="ph2">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">这是宽松规则的一个示例为的委托绑定中引入<ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>，以及的新重载<ph id="ph2">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Delegate&gt;</ph> class.</source>
          <target state="translated">有关更多信息，请参见 <ph id="ph1">&lt;xref:System.Delegate&gt;</ph> 类。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The <ph id="ph1">`UseLikeStatic`</ph> delegate is invoked, passing in the instance of <ph id="ph2">`Example`</ph> that is bound to the <ph id="ph3">`UseLikeInstance`</ph> delegate.</source>
          <target state="translated"><ph id="ph1">`UseLikeStatic`</ph>调用委托时，传递的实例中<ph id="ph2">`Example`</ph>，它绑定到<ph id="ph3">`UseLikeInstance`</ph>委托。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Then the <ph id="ph1">`UseLikeInstance`</ph> delegate is invoked, so that both delegates act on the same instance of <ph id="ph2">`Example`</ph>.</source>
          <target state="translated">则<ph id="ph1">`UseLikeInstance`</ph>调用委托时，以便这两个委托都作用于的同一个实例<ph id="ph2">`Example`</ph>。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The changes in the values of the internal field are displayed after each call.</source>
          <target state="translated">中的内部字段的值的更改将显示每次调用之后。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Finally, a <ph id="ph1">`UseLikeInstance`</ph> delegate is bound to an instance of <ph id="ph2">`DerivedFromxample`</ph>, and the delegate calls are repeated.</source>
          <target state="translated">最后，<ph id="ph1">`UseLikeInstance`</ph>委托绑定到某个实例的<ph id="ph2">`DerivedFromxample`</ph>，并且委托调用重复出现。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The dynamic method has no method body.</source>
          <target state="translated">动态方法没有方法体。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 的类型与动态方法的第一个参数的类型不同，不能赋值给该类型。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> has the wrong number of parameters or the wrong parameter types.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> 的参数数量或参数类型不正确。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
          <source>Gets the type that declares the method, which is always <ph id="ph1">&lt;see langword="null" /&gt;</ph> for dynamic methods.</source>
          <target state="translated">获取声明方法的类型，对于动态方法，此类型始终为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
          <source>Always <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">总是为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
          <source>This property always returns <ph id="ph1">`null`</ph> for dynamic methods.</source>
          <target state="translated">此属性始终返回<ph id="ph1">`null`</ph>对于动态方法。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
          <source>Even when a dynamic method is logically associated with a type, it is not declared by the type.</source>
          <target state="translated">即使在动态方法逻辑上相关联的类型，它不是由声明类型。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
          <source>The following code example displays the declaring type of a dynamic method.</source>
          <target state="translated">下面的代码示例显示一个动态方法的声明类型。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The position of the parameter in the parameter list.</source>
          <target state="translated">参数在参数列表中的位置。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Parameters are indexed beginning with the number 1 for the first parameter.</source>
          <target state="translated">通过第一个参数以数字 1 开头对参数编制索引。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterAttributes" /&gt;</ph> values that specifies the attributes of the parameter.</source>
          <target state="translated">用于指定参数属性的 <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterAttributes" /&gt;</ph> 值的按位组合。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The name of the parameter.</source>
          <target state="translated">参数的名称。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The name can be a zero-length string.</source>
          <target state="translated">名称可以是长度为零的字符串。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Defines a parameter of the dynamic method.</source>
          <target state="translated">定义动态方法的参数。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">始终返回 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>If <ph id="ph1">`position`</ph> is 0, the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph> method refers to the return value.</source>
          <target state="translated">如果<ph id="ph1">`position`</ph>为 0，<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph>方法引用的返回值。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Setting parameter information has no effect on the return value.</source>
          <target state="translated">设置参数信息不起返回的值上。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>If the dynamic method has already been completed, by calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph> method has no effect.</source>
          <target state="translated">如果动态方法已完成，通过调用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph>方法，<ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph>方法不起作用。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>No exception is thrown.</source>
          <target state="translated">不引发异常。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The following code example shows how to define parameter information for a dynamic method.</source>
          <target state="translated">下面的代码示例演示如何定义动态方法的参数信息。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The method has no parameters.</source>
          <target state="translated">此方法没有参数。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source><ph id="ph1">&lt;paramref name="position" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="position" /&gt;</ph> 小于 0。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source><ph id="ph1">&lt;paramref name="position" /&gt;</ph> is greater than the number of the method's parameters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="position" /&gt;</ph> 大于此方法的参数数目。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
          <source>Returns the base implementation for the method.</source>
          <target state="translated">返回方法的基实现。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
          <source>The base implementation of the method.</source>
          <target state="translated">方法的基实现。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
          <source>This method always returns the current <ph id="ph1">`DynamicMethod`</ph> object.</source>
          <target state="translated">此方法始终返回当前<ph id="ph1">`DynamicMethod`</ph>对象。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Returns the custom attributes applied to the method.</source>
          <target state="translated">返回应用于此方法的自定义属性。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search the method's inheritance chain to find the custom attributes; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to check only the current method.</source>
          <target state="translated">为 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 则搜索方法的继承链以查找自定义属性；为 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 则仅检查当前方法。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
          <source>Returns all the custom attributes defined for the method.</source>
          <target state="translated">返回为该方法定义的所有自定义属性。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
          <source>An array of objects representing all the custom attributes of the method.</source>
          <target state="translated">一个对象数组，这些对象表示此方法的所有自定义属性。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
          <source>For dynamic methods, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`inherit`</ph> has no effect, because the method is not declared in a type.</source>
          <target state="translated">对于动态方法，指定<ph id="ph1">`true`</ph>为<ph id="ph2">`inherit`</ph>没有任何作用，因为未在类型中声明方法。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
          <source>Custom attributes are not currently supported on dynamic methods.</source>
          <target state="translated">目前，动态方法不支持自定义属性。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
          <source>The only attribute returned is <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute&gt;</ph>; you can get the method implementation flags more easily using the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A&gt;</ph> method.</source>
          <target state="translated">唯一的属性，则返回<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute&gt;</ph>; 你可以获取该方法实现标志更轻松地使用<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> representing the type of custom attribute to return.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>，表示要返回的自定义特性类型。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search the method's inheritance chain to find the custom attributes; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to check only the current method.</source>
          <target state="translated">为 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 则搜索方法的继承链以查找自定义属性；为 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 则仅检查当前方法。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns the custom attributes of the specified type that have been applied to the method.</source>
          <target state="translated">返回已应用到此方法的指定类型的自定义属性。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of objects representing the attributes of the method that are of type <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> or derive from type <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph>.</source>
          <target state="translated">一个对象数组，表示此方法的属性为 <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> 类型或派生自 <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> 类型。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source>For dynamic methods, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`inherit`</ph> has no effect, because the method is not declared in a type.</source>
          <target state="translated">对于动态方法，指定<ph id="ph1">`true`</ph>为<ph id="ph2">`inherit`</ph>没有任何作用，因为未在类型中声明方法。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Custom attributes are not currently supported on dynamic methods.</source>
          <target state="translated">目前，动态方法不支持自定义属性。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The only attribute returned is <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute&gt;</ph>; you can get the method implementation flags more easily using the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A&gt;</ph> method.</source>
          <target state="translated">唯一的属性，则返回<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute&gt;</ph>; 你可以获取该方法实现标志更轻松地使用<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</source>
          <target state="translated">返回一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 对象，该对象可用于从元数据标记、范围和 Microsoft 中间语言 (MSIL) 流生成方法体。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 对象，可用于从元数据标记、范围和 MSIL 流生成方法体。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class is provided to support unmanaged code generation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>提供类以支持非托管的代码生成。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
          <source>to execute unmanaged code.</source>
          <target state="translated">若要执行非托管的代码。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Returns an MSIL generator that can be used to emit a body for the dynamic method.</source>
          <target state="translated">返回可用于发出动态方法的主体的 MSIL 生成器。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</source>
          <target state="translated">为具有默认 64 字节 Microsoft 中间语言 (MSIL) 流大小的方法返回 MSIL 生成器。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> object for the method.</source>
          <target state="translated">该方法的 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>After a dynamic method has been completed, by calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method, any further attempt to add MSIL is ignored.</source>
          <target state="translated">已完成动态方法，通过调用后<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph>方法，任何进一步尝试添加 MSIL 将被忽略。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>No exception is thrown.</source>
          <target state="translated">不引发异常。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</source>
          <target state="translated">没有对动态方法，甚至在某些完全信任方案中无法验证代码的限制。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>See the "Verification" section in Remarks for <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>.</source>
          <target state="translated">请参阅“验证”部分中的 <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> 注释。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>The following code example creates a dynamic method that takes two parameters.</source>
          <target state="translated">下面的代码示例创建一个采用两个参数的动态方法。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</source>
          <target state="translated">该示例发出简单函数体打印到控制台，第一个参数，该示例将用作该方法的返回值的第二个参数。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">该示例完成方法通过创建委托，调用委托，它具有不同的参数，并最后调用动态方法使用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>The size of the MSIL stream, in bytes.</source>
          <target state="translated">MSIL 流的大小（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</source>
          <target state="translated">为方法返回一个具有指定 MSIL 流大小的 Microsoft 中间语言 (MSIL) 生成器。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> object for the method, with the specified MSIL stream size.</source>
          <target state="translated">方法的 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> 对象，具有指定的 MSIL 流大小。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>After a dynamic method has been completed, by calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method, any further attempt to add MSIL is ignored.</source>
          <target state="translated">已完成动态方法，通过调用后<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph>方法，任何进一步尝试添加 MSIL 将被忽略。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>No exception is thrown.</source>
          <target state="translated">不引发异常。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</source>
          <target state="translated">没有对动态方法，甚至在某些完全信任方案中无法验证代码的限制。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>See the "Verification" section in Remarks for <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>.</source>
          <target state="translated">请参阅“验证”部分中的 <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> 注释。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>The following code example demonstrates this method overload.</source>
          <target state="translated">下面的代码示例演示此方法重载。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
          <source>Returns the implementation flags for the method.</source>
          <target state="translated">为此方法返回实现标志。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodImplAttributes" /&gt;</ph> values representing the implementation flags for the method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodImplAttributes" /&gt;</ph> 值的按位组合，表示此方法的实现标志。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
          <source>Currently, method implementation attributes for dynamic methods are always <ph id="ph1">&lt;xref:System.Reflection.MethodImplAttributes.IL&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodImplAttributes.NoInlining&gt;</ph>.</source>
          <target state="translated">目前，对于动态方法的方法实现属性始终是<ph id="ph1">&lt;xref:System.Reflection.MethodImplAttributes.IL&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.MethodImplAttributes.NoInlining&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetParameters">
          <source>Returns the parameters of the dynamic method.</source>
          <target state="translated">返回动态方法的参数。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetParameters">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> objects that represent the parameters of the dynamic method.</source>
          <target state="translated">表示动态方法的参数的 <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> 对象数组。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetParameters">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objects returned by this method are for information only.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>此方法返回的对象是仅用于提供信息。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetParameters">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph> method to set or change the characteristics of the parameters.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph>方法来设置或更改参数的特征。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetParameters">
          <source>The following code example displays the parameters of a dynamic method.</source>
          <target state="translated">下面的代码示例显示一个动态方法的参数。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetParameters">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source>Gets or sets a value indicating whether the local variables in the method are zero-initialized.</source>
          <target state="translated">获取或设置一个值，该值指示方法中的本地变量是否初始化为零。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the local variables in the method are zero-initialized; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果该方法中的本地变量初始化为零，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source>If this property is set to <ph id="ph1">`true`</ph>, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</source>
          <target state="translated">如果此属性设置为<ph id="ph1">`true`</ph>，发出的 Microsoft 中间语言 (MSIL) 包括本地变量的初始化。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source>If it is set to <ph id="ph1">`false`</ph>, local variables are not initialized and the generated code is unverifiable.</source>
          <target state="translated">如果设置为<ph id="ph1">`false`</ph>、 未初始化本地变量和生成的代码也无法进行验证。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source>The following code example displays the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A&gt;</ph> property of a dynamic method.</source>
          <target state="translated">下面的代码示例显示<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A&gt;</ph>的动态方法的属性。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This parameter is ignored for dynamic methods, because they are static.</source>
          <target state="translated">对动态方法忽略此参数，因为它们是静态的。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Specify <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">指定 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> 值的按位组合。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> 对象，该对象通过反射来启用绑定、参数类型强制、成员调用以及对 <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 对象的检索。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> 为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则使用默认活页夹。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For more details, see <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</source>
          <target state="translated">有关更多详细信息，请参阅 <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An argument list.</source>
          <target state="translated">自变量列表。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</source>
          <target state="translated">此参数数组在数量、顺序和类型方面与要调用的方法的参数相同。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If there are no parameters this parameter should be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果没有任何参数，则此参数应为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> used to govern the coercion of types.</source>
          <target state="translated">用于控制类型强制的 <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> 的实例。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">如果这是 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则使用当前线程的 <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, this information is needed to correctly convert a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that represents 1000 to a <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> value, because 1000 is represented differently by different cultures.</source>
          <target state="translated">例如，将表示 1000 的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 正确转换为 <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> 值时需要此信息，因为不同的区域性使用不同的形式表示 1000。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</source>
          <target state="translated">在指定的活页夹的约束下，用指定的区域性信息，使用指定的参数调用动态方法。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> containing the return value of the invoked method.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>，包含调用的方法的返回值。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</source>
          <target state="translated">除了列出异常，异常调用的代码应准备好捕获的动态方法引发的任何异常。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Executing a dynamic method with a delegate created by the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method is more efficient than executing it with the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">通过创建的委托执行动态方法<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph>方法比执行其与<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method completes the dynamic method.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph>方法或<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph>方法完成动态方法。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</source>
          <target state="translated">任何进一步尝试 alter 动态方法，例如修改参数定义或发出多个 Microsoft 中间语言 (MSIL)，将被忽略;不引发异常。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>All dynamic methods are static, so the <ph id="ph1">`obj`</ph> parameter is always ignored.</source>
          <target state="translated">所有动态方法是静态的因此<ph id="ph1">`obj`</ph>始终忽略参数。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To treat a dynamic method as if it were an instance method, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> overload that takes an object instance.</source>
          <target state="translated">若要将动态方法，就像它是实例方法，使用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph>采用对象的实例的重载。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the dynamic method has no parameters, the value of <ph id="ph1">`parameters`</ph> should be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果动态方法没有任何参数，值<ph id="ph1">`parameters`</ph>应<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</source>
          <target state="translated">否则数量、 类型和参数数组中的元素的顺序应该是相同数量、 类型和动态方法的参数顺序。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This method overload is called by the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29&gt;</ph> method overload inherited from the <ph id="ph2">&lt;xref:System.Reflection.MethodBase&gt;</ph> class, so the preceding remarks apply to both overloads.</source>
          <target state="translated">调用此方法重载<ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29&gt;</ph>方法重载继承自<ph id="ph2">&lt;xref:System.Reflection.MethodBase&gt;</ph>类，因此上面的备注适用于这两个重载。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</source>
          <target state="translated">此方法不要求权限直接，但调用动态方法可能会导致安全请求，具体取决于该方法。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, no demands are made for anonymously hosted dynamic methods that are created with the <ph id="ph1">`restrictedSkipVisibility`</ph> parameter set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">例如，没有任何要求对匿名托管的动态方法与创建<ph id="ph1">`restrictedSkipVisibility`</ph>参数设置为<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>On the other hand, if you create a method with <ph id="ph1">`restrictedSkipVisibility`</ph> set to <ph id="ph2">`true`</ph> so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">另一方面，如果创建方法，以<ph id="ph1">`restrictedSkipVisibility`</ph>设置为<ph id="ph2">`true`</ph>以便它可以访问目标程序集的隐藏的成员，该方法将导致加号的目标程序集的权限的要求<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Prior to the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method required <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess&gt;</ph> flag.</source>
          <target state="translated">之前<ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>，此方法需要<ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>与<ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess&gt;</ph>标志。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The following code example invokes a dynamic method with exact binding, using the US-English culture.</source>
          <target state="translated">下面的代码示例时，将调用动态方法与使用美国英语区域性的确切绑定。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.VarArgs" /&gt;</ph> calling convention is not supported.</source>
          <target state="translated">不支持 <ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.VarArgs" /&gt;</ph> 调用约定。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> does not match the number of parameters in the dynamic method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> 中的元素数量与动态方法中的参数数量不匹配。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The type of one or more elements of <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> does not match the type of the corresponding parameter of the dynamic method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> 的一个或多个元素的类型与动态方法的相应参数的类型不匹配。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <ph id="ph1">&lt;paramref name="skipVisibility" /&gt;</ph> set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>, but the dynamic method accesses members that are not <ph id="ph3">&lt;see langword="public" /&gt;</ph> or <ph id="ph4">&lt;see langword="internal" /&gt;</ph> (<ph id="ph5">&lt;see langword="Friend" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">该动态方法与模块关联，并且不是匿名承载的，而是在 <ph id="ph1">&lt;paramref name="skipVisibility" /&gt;</ph> 设置为 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 的情况下构造的，但是该动态方法可以访问不是 <ph id="ph3">&lt;see langword="public" /&gt;</ph> 或 <ph id="ph4">&lt;see langword="internal" /&gt;</ph>（在 Visual Basic 中为 <ph id="ph5">&lt;see langword="Friend" /&gt;</ph>）的成员。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The dynamic method is anonymously hosted and was constructed with <ph id="ph1">&lt;paramref name="skipVisibility" /&gt;</ph> set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>, but it accesses members that are not <ph id="ph3">&lt;see langword="public" /&gt;</ph>.</source>
          <target state="translated">该动态方法是匿名承载的，并且是在 <ph id="ph1">&lt;paramref name="skipVisibility" /&gt;</ph> 设置为 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 的情况下构造的，但是它可以访问不是 <ph id="ph3">&lt;see langword="public" /&gt;</ph> 的成员。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The dynamic method contains unverifiable code.</source>
          <target state="translated">动态方法包含无法验证的代码。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>See the "Verification" section in Remarks for <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">请参阅“验证”部分中的 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph> 注释。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> representing the type of custom attribute to search for.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>，表示要搜索的自定义特性类型。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search the method's inheritance chain to find the custom attributes; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to check only the current method.</source>
          <target state="translated">为 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 则搜索方法的继承链以查找自定义属性；为 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 则仅检查当前方法。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source>Indicates whether the specified custom attribute type is defined.</source>
          <target state="translated">表示是否定义了指定的自定义属性类型。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified custom attribute type is defined; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果定义了指定的自定义属性类型，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source>For dynamic methods, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`inherit`</ph> has no effect.</source>
          <target state="translated">对于动态方法，指定<ph id="ph1">`true`</ph>为<ph id="ph2">`inherit`</ph>不起作用。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source>Dynamic methods have no inheritance chain.</source>
          <target state="translated">动态方法具有没有继承链。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source>Custom attributes are not currently supported on dynamic methods.</source>
          <target state="translated">目前，动态方法不支持自定义属性。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</source>
          <target state="translated">获取一个值，该值指示当前的动态方法是否为安全关键或安全可靠关键，以执行关键操作。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current dynamic method is security-critical or security-safe-critical; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is transparent.</source>
          <target state="translated">如果当前动态方法是安全关键的或安全可靠关键的，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果它是透明的，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph>属性报告由公共语言运行时 (CLR) 的动态方法的透明度级别。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">下表中显示的这些属性的组合：</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Security level</source>
          <target state="translated">安全级别</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Critical</source>
          <target state="translated">严重</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Safe critical</source>
          <target state="translated">可靠关键</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">使用这些属性比检查程序集及其类型的安全批注、检查当前的信任级别，以及尝试复制运行时的规则要简单得多。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The transparency of a dynamic method depends on the module it is associated with.</source>
          <target state="translated">动态方法的透明度依赖于与之关联的模块。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</source>
          <target state="translated">如果动态方法与类型而不是模块关联，其透明度取决于包含的类型的模块。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</source>
          <target state="translated">动态方法没有安全批注，因此它们被分配相关联的模块的默认透明度。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</source>
          <target state="translated">匿名托管的动态方法始终是透明的因为包含它们的系统提供的模块是透明的。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</source>
          <target state="translated">下表描述了受信任的程序集 （即，具有强名称程序集安装在全局程序集缓存），与关联的动态方法的透明度。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Assembly annotation</source>
          <target state="translated">程序集批注</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Level 1 transparency</source>
          <target state="translated">1 级透明度</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Level 2 transparency</source>
          <target state="translated">级别 2 透明度</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Fully transparent</source>
          <target state="translated">完全透明</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Fully critical</source>
          <target state="translated">完全关键</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Critical</source>
          <target state="translated">严重</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Critical</source>
          <target state="translated">严重</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Mixed transparency</source>
          <target state="translated">混合的透明度</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Security-agnostic</source>
          <target state="translated">安全无关</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Safe-critical</source>
          <target state="translated">安全-关键</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Critical</source>
          <target state="translated">严重</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</source>
          <target state="translated">例如，如果将动态方法的类型属于 mscorlib.dll，后者具有级别 2 的混合的透明度，与关联的动态方法是透明的并无法执行关键代码。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>For information about transparency levels, see <bpt id="p1">[</bpt>Security-Transparent Code, Level 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept> and <bpt id="p2">[</bpt>Security-Transparent Code, Level 2<ept id="p2">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.</source>
          <target state="translated">有关透明度级别的信息，请参阅<bpt id="p1">[</bpt>安全透明的代码，级别 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept>和<bpt id="p2">[</bpt>安全透明的代码，级别 2<ept id="p2">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</source>
          <target state="translated">将动态方法与安全无关，（如 system.dll），受信任的第 1 级程序集中的模块关联不允许使用提升的信任。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the dynamic method is called.</source>
          <target state="translated">如果调用动态方法的代码的授予集不包括 System.dll （即，完全信任） 的授予集<ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph>调用动态方法时引发。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</source>
          <target state="translated">与部分受信任的程序集关联的动态方法的透明度取决于在加载程序集的方式。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">如果以 （例如，到沙盒应用程序域中） 的部分信任方式加载程序集，则运行时将忽略程序集的安全批注。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The assembly and all its types and members, including dynamic methods, are treated as transparent.</source>
          <target state="translated">程序集和所有其类型和成员，包括动态方法被视为透明。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</source>
          <target state="translated">运行时才会注意到安全批注只在部分信任程序集加载 （例如，到桌面应用程序的默认应用程序域） 的完全信任的情况。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</source>
          <target state="translated">在这种情况下，运行时将分配的动态方法根据程序集的批注的方法的默认透明度。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>For more information about reflection emit and transparency, see <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.</source>
          <target state="translated">有关反射发出和透明度，请参阅<bpt id="p1">[</bpt>反射发出中的安全问题<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">透明度有关的信息，请参阅<bpt id="p1">[</bpt>安全更改<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The dynamic method doesn't have a method body.</source>
          <target state="translated">动态方法没有方法体。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</source>
          <target state="translated">获取一个值，该值指示当前动态方法在当前信任级别上是否是安全可靠关键的；即它是否可以执行关键操作并可以由透明代码访问。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the dynamic method is security-safe-critical at the current trust level; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is security-critical or transparent.</source>
          <target state="translated">如果动态方法在当前信任级别上是安全可靠关键的，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果它是安全关键的或透明的，则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph>属性报告由公共语言运行时 (CLR) 的动态方法的透明度级别。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">下表中显示的这些属性的组合：</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Security level</source>
          <target state="translated">安全级别</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Critical</source>
          <target state="translated">严重</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Safe critical</source>
          <target state="translated">可靠关键</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">使用这些属性比检查程序集及其类型的安全批注、检查当前的信任级别，以及尝试复制运行时的规则要简单得多。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The transparency of a dynamic method depends on the module it is associated with.</source>
          <target state="translated">动态方法的透明度依赖于与之关联的模块。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</source>
          <target state="translated">如果动态方法与类型而不是模块关联，其透明度取决于包含的类型的模块。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</source>
          <target state="translated">动态方法没有安全批注，因此它们被分配相关联的模块的默认透明度。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</source>
          <target state="translated">匿名托管的动态方法始终是透明的因为包含它们的系统提供的模块是透明的。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</source>
          <target state="translated">下表描述了受信任的程序集 （即，具有强名称程序集安装在全局程序集缓存），与关联的动态方法的透明度。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Assembly annotation</source>
          <target state="translated">程序集批注</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Level 1 transparency</source>
          <target state="translated">1 级透明度</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Level 2 transparency</source>
          <target state="translated">级别 2 透明度</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Fully transparent</source>
          <target state="translated">完全透明</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Fully critical</source>
          <target state="translated">完全关键</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Critical</source>
          <target state="translated">严重</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Critical</source>
          <target state="translated">严重</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Mixed transparency</source>
          <target state="translated">混合的透明度</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Security-agnostic</source>
          <target state="translated">安全无关</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Safe-critical</source>
          <target state="translated">安全-关键</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Critical</source>
          <target state="translated">严重</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</source>
          <target state="translated">例如，如果将动态方法的类型属于 mscorlib.dll，后者具有级别 2 的混合的透明度，与关联的动态方法是透明的并无法执行关键代码。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>For information about transparency levels, see <bpt id="p1">[</bpt>Security-Transparent Code, Level 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept> and <bpt id="p2">[</bpt>Security-Transparent Code, Level 2<ept id="p2">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.</source>
          <target state="translated">有关透明度级别的信息，请参阅<bpt id="p1">[</bpt>安全透明的代码，级别 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept>和<bpt id="p2">[</bpt>安全透明的代码，级别 2<ept id="p2">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</source>
          <target state="translated">将动态方法与安全无关，（如 system.dll），受信任的第 1 级程序集中的模块关联不允许使用提升的信任。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the dynamic method is called.</source>
          <target state="translated">如果调用动态方法的代码的授予集不包括 System.dll （即，完全信任） 的授予集<ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph>调用动态方法时引发。</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</source>
          <target state="translated">与部分受信任的程序集关联的动态方法的透明度取决于在加载程序集的方式。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">如果以 （例如，到沙盒应用程序域中） 的部分信任方式加载程序集，则运行时将忽略程序集的安全批注。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The assembly and all its types and members, including dynamic methods, are treated as transparent.</source>
          <target state="translated">程序集和所有其类型和成员，包括动态方法被视为透明。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</source>
          <target state="translated">运行时才会注意到安全批注只在部分信任程序集加载 （例如，到桌面应用程序的默认应用程序域） 的完全信任的情况。</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</source>
          <target state="translated">在这种情况下，运行时将分配的动态方法根据程序集的批注的方法的默认透明度。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>For more information about reflection emit and transparency, see <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.</source>
          <target state="translated">有关反射发出和透明度，请参阅<bpt id="p1">[</bpt>反射发出中的安全问题<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">透明度有关的信息，请参阅<bpt id="p1">[</bpt>安全更改<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The dynamic method doesn't have a method body.</source>
          <target state="translated">动态方法没有方法体。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</source>
          <target state="translated">获取一个值，该值指示当前的动态方法是否在当前的信任级别是透明的，并因此无法执行关键操作。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the dynamic method is security-transparent at the current trust level; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果动态方法在当前信任级别上是安全透明的，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph>属性报告由公共语言运行时 (CLR) 的动态方法的透明度级别。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">下表中显示的这些属性的组合：</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Security level</source>
          <target state="translated">安全级别</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Critical</source>
          <target state="translated">严重</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Safe critical</source>
          <target state="translated">可靠关键</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">使用这些属性比检查程序集及其类型的安全批注、检查当前的信任级别，以及尝试复制运行时的规则要简单得多。</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The transparency of a dynamic method depends on the module it is associated with.</source>
          <target state="translated">动态方法的透明度依赖于与之关联的模块。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</source>
          <target state="translated">如果动态方法与类型而不是模块关联，其透明度取决于包含的类型的模块。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</source>
          <target state="translated">动态方法没有安全批注，因此它们被分配相关联的模块的默认透明度。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</source>
          <target state="translated">匿名托管的动态方法始终是透明的因为包含它们的系统提供的模块是透明的。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</source>
          <target state="translated">下表描述了受信任的程序集 （即，具有强名称程序集安装在全局程序集缓存），与关联的动态方法的透明度。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Assembly annotation</source>
          <target state="translated">程序集批注</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Level 1 transparency</source>
          <target state="translated">1 级透明度</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Level 2 transparency</source>
          <target state="translated">级别 2 透明度</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Fully transparent</source>
          <target state="translated">完全透明</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Fully critical</source>
          <target state="translated">完全关键</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Critical</source>
          <target state="translated">严重</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Critical</source>
          <target state="translated">严重</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Mixed transparency</source>
          <target state="translated">混合的透明度</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">透明</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Security-agnostic</source>
          <target state="translated">安全无关</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Safe-critical</source>
          <target state="translated">安全-关键</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Critical</source>
          <target state="translated">严重</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</source>
          <target state="translated">例如，如果将动态方法的类型属于 mscorlib.dll，后者具有级别 2 的混合的透明度，与关联的动态方法是透明的并无法执行关键代码。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>For information about transparency levels, see <bpt id="p1">[</bpt>Security-Transparent Code, Level 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept> and <bpt id="p2">[</bpt>Security-Transparent Code, Level 2<ept id="p2">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.</source>
          <target state="translated">有关透明度级别的信息，请参阅<bpt id="p1">[</bpt>安全透明的代码，级别 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept>和<bpt id="p2">[</bpt>安全透明的代码，级别 2<ept id="p2">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</source>
          <target state="translated">将动态方法与安全无关，（如 system.dll），受信任的第 1 级程序集中的模块关联不允许使用提升的信任。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the dynamic method is called.</source>
          <target state="translated">如果调用动态方法的代码的授予集不包括 System.dll （即，完全信任） 的授予集<ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph>调用动态方法时引发。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</source>
          <target state="translated">与部分受信任的程序集关联的动态方法的透明度取决于在加载程序集的方式。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">如果以 （例如，到沙盒应用程序域中） 的部分信任方式加载程序集，则运行时将忽略程序集的安全批注。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The assembly and all its types and members, including dynamic methods, are treated as transparent.</source>
          <target state="translated">程序集和所有其类型和成员，包括动态方法被视为透明。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</source>
          <target state="translated">运行时才会注意到安全批注只在部分信任程序集加载 （例如，到桌面应用程序的默认应用程序域） 的完全信任的情况。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</source>
          <target state="translated">在这种情况下，运行时将分配的动态方法根据程序集的批注的方法的默认透明度。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>For more information about reflection emit and transparency, see <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.</source>
          <target state="translated">有关反射发出和透明度，请参阅<bpt id="p1">[</bpt>反射发出中的安全问题<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">透明度有关的信息，请参阅<bpt id="p1">[</bpt>安全更改<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The dynamic method doesn't have a method body.</source>
          <target state="translated">动态方法没有方法体。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
          <source>Not supported for dynamic methods.</source>
          <target state="translated">不支持动态方法。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
          <source>Not supported for dynamic methods.</source>
          <target state="translated">不支持动态方法。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
          <source>Not allowed for dynamic methods.</source>
          <target state="translated">不允许动态方法。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.Module">
          <source>Gets the module with which the dynamic method is logically associated.</source>
          <target state="translated">获取动态方法与之在逻辑上相关联的模块。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Module">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> with which the current dynamic method is associated.</source>
          <target state="translated">动态方法当前关联的 <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Module">
          <source>If a module was specified when the dynamic method was created, this property returns that module.</source>
          <target state="translated">如果指定了模块创建动态方法后，此属性将返回该模块。</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Module">
          <source>If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</source>
          <target state="translated">如果创建动态方法后，已为所有者指定的类型，此属性将返回模块，其中包含该类型。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Module">
          <source>The following code example displays the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Module%2A&gt;</ph> property of a dynamic method.</source>
          <target state="translated">下面的代码示例显示<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Module%2A&gt;</ph>的动态方法的属性。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Module">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.Name">
          <source>Gets the name of the dynamic method.</source>
          <target state="translated">获取动态方法的名称。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Name">
          <source>The simple name of the method.</source>
          <target state="translated">方法的简单名称。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Name">
          <source>It is not necessary to name dynamic methods.</source>
          <target state="translated">不需要对动态方法进行命名。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Name">
          <source>The following code example displays the name of a dynamic method.</source>
          <target state="translated">下面的代码示例显示一个动态方法的名称。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Name">
          <source>This code example is part of a larger example provided for  the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
          <source>Gets the class that was used in reflection to obtain the method.</source>
          <target state="translated">获取在反射中用于获取该方法的类。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
          <source>Always <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">总是为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
          <source>This property always returns <ph id="ph1">`null`</ph> for dynamic methods.</source>
          <target state="translated">此属性始终返回<ph id="ph1">`null`</ph>对于动态方法。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
          <source>The following code example displays the reflected type of a dynamic method.</source>
          <target state="translated">下面的代码示例显示一个动态方法的反射的类型。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
          <source>Gets the return parameter of the dynamic method.</source>
          <target state="translated">获取动态方法的返回参数。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
          <source>Always <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">总是为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
          <source>This property always returns <ph id="ph1">`null`</ph> for dynamic methods.</source>
          <target state="translated">此属性始终返回<ph id="ph1">`null`</ph>对于动态方法。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.ReturnType">
          <source>Gets the type of return value for the dynamic method.</source>
          <target state="translated">获取动态方法的返回值的类型。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> representing the type of the return value of the current method; <ph id="ph2">&lt;see cref="T:System.Void" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>，表示当前方法的返回值的类型；如果该方法没有返回类型，则为 <ph id="ph2">&lt;see cref="T:System.Void" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnType">
          <source>If <ph id="ph1">`null`</ph> was specified for the return type when the dynamic method was created, this property returns <ph id="ph2">&lt;xref:System.Void?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">`null`</ph>时创建动态方法后，此属性返回的返回类型指定<ph id="ph2">&lt;xref:System.Void?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnType">
          <source>The following code example displays the return type of a dynamic method.</source>
          <target state="translated">下面的代码示例显示一个动态方法的返回类型。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnType">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
          <source>Gets the custom attributes of the return type for the dynamic method.</source>
          <target state="translated">获取动态方法的返回类型的自定义属性。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> representing the custom attributes of the return type for the dynamic method.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph>，表示动态方法的返回类型的自定义属性。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
          <source>Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A&gt;</ph> method is always empty.</source>
          <target state="translated">因此通过返回自定义特性的数组的动态方法的返回类型不支持自定义特性<ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A&gt;</ph>方法始终为空。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
          <source>The following code example shows how to display the custom attributes of the return type of a dynamic method.</source>
          <target state="translated">下面的代码示例演示如何显示动态方法的返回类型的自定义属性。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.ToString">
          <source>Returns the signature of the method, represented as a string.</source>
          <target state="translated">返回表示为字符串的方法的签名。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.ToString">
          <source>A string representing the method signature.</source>
          <target state="translated">一个表示方法签名的字符串。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.ToString">
          <source>The signature includes only types and the method name, if any.</source>
          <target state="translated">如果有的话，签名包括仅类型和方法名称。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.ToString">
          <source>Parameter names are not included.</source>
          <target state="translated">参数名称不包括。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.ToString">
          <source>The following code example displays the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.ToString%2A&gt;</ph> method of a dynamic method.</source>
          <target state="translated">下面的代码示例显示<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.ToString%2A&gt;</ph>的动态方法的方法。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.ToString">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>类。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>