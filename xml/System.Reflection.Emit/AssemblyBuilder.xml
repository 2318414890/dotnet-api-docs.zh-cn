<Type Name="AssemblyBuilder" FullName="System.Reflection.Emit.AssemblyBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="730b1f5c888ea1da98651c76585221a891bb2949" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58687748" /></Metadata><TypeSignature Language="C#" Value="public sealed class AssemblyBuilder : System.Reflection.Assembly, System.Runtime.InteropServices._AssemblyBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit AssemblyBuilder extends System.Reflection.Assembly implements class System.Runtime.InteropServices._AssemblyBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.AssemblyBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AssemblyBuilder&#xA;Inherits Assembly&#xA;Implements _AssemblyBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AssemblyBuilder sealed : System::Reflection::Assembly, System::Runtime::InteropServices::_AssemblyBuilder" />
  <TypeSignature Language="F#" Value="type AssemblyBuilder = class&#xA;    inherit Assembly&#xA;    interface _AssemblyBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.Assembly</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._AssemblyBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._AssemblyBuilder))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3a4e9-101">定义并表示动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-101">Defines and represents a dynamic assembly.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-102">动态程序集是使用反射发出 Api 创建一个程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-102">A dynamic assembly is an assembly that is created using the Reflection Emit APIs.</span></span> <span data-ttu-id="3a4e9-103">使用保存动态程序集时，将保存在程序集中的动态模块<xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-103">The dynamic modules in the assembly are saved when the dynamic assembly is saved using the <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A> method.</span></span> <span data-ttu-id="3a4e9-104">若要生成可执行文件，<xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>必须调用方法来标识将是对程序集的入口点的方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-104">To generate an executable, the <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A> method must be called to identify the method that is the entry point to the assembly.</span></span> <span data-ttu-id="3a4e9-105">程序集保存为 Dll 默认情况下，除非<xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>方法请求生成一个控制台应用程序或基于 Windows 的应用程序。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-105">Assemblies are saved as DLLs by default, unless the <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A> method requests the generation of a console application or a Windows-based application.</span></span>  
  
 <span data-ttu-id="3a4e9-106">如果动态程序集包含多个动态模块，该程序集的清单文件名称应与指定为第一个参数的模块的名称<xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-106">If a dynamic assembly contains more than one dynamic module, the assembly's manifest file name should match the module's name that is specified as the first argument to the <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A> method.</span></span>  
  
 <span data-ttu-id="3a4e9-107">基上的某些方法<xref:System.Reflection.Assembly>类，如`GetModules`并`GetLoadedModules`，将无法正常工作时从调用<xref:System.Reflection.Emit.AssemblyBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-107">Some methods on the base <xref:System.Reflection.Assembly> class, such as `GetModules` and `GetLoadedModules`, will not work correctly when called from <xref:System.Reflection.Emit.AssemblyBuilder> objects.</span></span> <span data-ttu-id="3a4e9-108">可以加载定义动态程序集，并针对加载的程序集调用的方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-108">You can load the defined dynamic assembly and call the methods on the loaded assembly.</span></span> <span data-ttu-id="3a4e9-109">例如，若要确保资源模块都包含在返回的模块列表中，调用`GetModules`对加载<xref:System.Reflection.Assembly>对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-109">For example, to ensure that resource modules are included in the returned module list, call `GetModules` on the loaded <xref:System.Reflection.Assembly> object.</span></span>  
  
 <span data-ttu-id="3a4e9-110">动态程序集使用的签名<xref:System.Reflection.AssemblyName.KeyPair%2A>才会生效的程序集保存到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-110">The signing of a dynamic assembly using <xref:System.Reflection.AssemblyName.KeyPair%2A> is not effective until the assembly is saved to disk.</span></span> <span data-ttu-id="3a4e9-111">因此，强名称不会使用瞬态动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-111">So, strong names will not work with transient dynamic assemblies.</span></span>  
  
 <span data-ttu-id="3a4e9-112">若要获取<xref:System.Reflection.Emit.AssemblyBuilder>对象，请使用<xref:System.AppDomain.DefineDynamicAssembly%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-112">To get an <xref:System.Reflection.Emit.AssemblyBuilder> object, use the <xref:System.AppDomain.DefineDynamicAssembly%2A?displayProperty=nameWithType> method.</span></span>  
  
## <a name="reflection-emit-dynamic-assembly-scenarios"></a><span data-ttu-id="3a4e9-113">反射发出动态程序集应用场景</span><span class="sxs-lookup"><span data-stu-id="3a4e9-113">Reflection emit dynamic assembly scenarios</span></span>  
 <span data-ttu-id="3a4e9-114">以下是一些需要时使用，请考虑事项<xref:System.Reflection.Emit.AssemblyBuilder>类，以创建动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-114">The following are some things to consider when using the <xref:System.Reflection.Emit.AssemblyBuilder> class to create dynamic assemblies.</span></span>  
  
### <a name="dynamic-modules"></a><span data-ttu-id="3a4e9-115">动态模块</span><span class="sxs-lookup"><span data-stu-id="3a4e9-115">Dynamic modules</span></span>  
 <span data-ttu-id="3a4e9-116">反射发出支持创建动态程序集中定义的动态模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-116">Reflection emit supports the creation of dynamic modules defined in dynamic assemblies.</span></span> <span data-ttu-id="3a4e9-117">在动态程序集中创建的动态模块可以是临时或持久性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-117">A dynamic module created in a dynamic assembly can be transient or persistable.</span></span>  
  
### <a name="restrictions-on-type-references"></a><span data-ttu-id="3a4e9-118">类型引用的限制</span><span class="sxs-lookup"><span data-stu-id="3a4e9-118">Restrictions on type references</span></span>  
 <span data-ttu-id="3a4e9-119">程序集可以引用另一个程序集中定义的类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-119">Assemblies can reference types defined in another assembly.</span></span> <span data-ttu-id="3a4e9-120">瞬态动态程序集可以安全地引用中另一个瞬态动态程序集、 持久的动态程序集或静态程序集定义的类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-120">A transient dynamic assembly can safely reference types defined in another transient dynamic assembly, a persistable dynamic assembly, or a static assembly.</span></span> <span data-ttu-id="3a4e9-121">但是，公共语言运行时不允许持久动态模块，以引用瞬态动态模块中定义的类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-121">However, the common language runtime does not allow a persistable dynamic module to reference a type defined in a transient dynamic module.</span></span> <span data-ttu-id="3a4e9-122">这是因为当将持久动态模块加载时保存到磁盘，在运行时无法解析对瞬态动态模块中定义的类型的引用。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-122">This is because when the persisted dynamic module is loaded after being saved to disk, the runtime cannot resolve the references to types defined in the transient dynamic module.</span></span>  
  
### <a name="restrictions-on-emitting-to-remote-application-domains"></a><span data-ttu-id="3a4e9-123">向远程应用程序域发送元组的限制</span><span class="sxs-lookup"><span data-stu-id="3a4e9-123">Restrictions on emitting to remote application domains</span></span>  
 <span data-ttu-id="3a4e9-124">某些情况下需要创建和执行远程应用程序域中的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-124">Some scenarios require a dynamic assembly to be created and executed in a remote application domain.</span></span> <span data-ttu-id="3a4e9-125">反射发出不允许直接到远程应用程序域发出动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-125">Reflection emit does not allow a dynamic assembly to be emitted directly to a remote application domain.</span></span> <span data-ttu-id="3a4e9-126">解决方案是发出动态程序集在当前应用程序域中的，将发出动态程序集保存到磁盘，然后将动态程序集加载到远程应用程序域。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-126">The solution is to emit the dynamic assembly in the current application domain, save the emitted dynamic assembly to disk, and then load the dynamic assembly into the remote application domain.</span></span>  
  
### <a name="dynamic-assembly-access-modes"></a><span data-ttu-id="3a4e9-127">动态程序集访问模式</span><span class="sxs-lookup"><span data-stu-id="3a4e9-127">Dynamic assembly access modes</span></span>  
 <span data-ttu-id="3a4e9-128">可以使用以下访问模式之一来创建动态程序集：</span><span class="sxs-lookup"><span data-stu-id="3a4e9-128">Dynamic assemblies can be created using one of the following access modes:</span></span>  
  
-   <xref:System.Reflection.Emit.AssemblyBuilderAccess.Run?displayProperty=nameWithType>  
  
     <span data-ttu-id="3a4e9-129">表示动态程序集<xref:System.Reflection.Emit.AssemblyBuilder>是暂时性的对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-129">The dynamic assembly represented by an <xref:System.Reflection.Emit.AssemblyBuilder> object is transient.</span></span> <span data-ttu-id="3a4e9-130">动态程序集仅可用于执行发出的代码。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-130">The dynamic assembly can only be used to execute the emitted code.</span></span>  
  
-   <xref:System.Reflection.Emit.AssemblyBuilderAccess.Save?displayProperty=nameWithType>  
  
     <span data-ttu-id="3a4e9-131">表示动态程序集<xref:System.Reflection.Emit.AssemblyBuilder>对象是持久的但之前已从磁盘加载已保存的可移植可执行 (PE) 文件，无法执行。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-131">The dynamic assembly represented by an <xref:System.Reflection.Emit.AssemblyBuilder> object is persistable but cannot be executed until the saved portable executable (PE) file has been loaded from disk.</span></span>  
  
-   <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType>  
  
     <span data-ttu-id="3a4e9-132">表示动态程序集<xref:System.Reflection.Emit.AssemblyBuilder>对象是持久的但之前/之后保存程序集或也可以执行到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-132">The dynamic assembly represented by an <xref:System.Reflection.Emit.AssemblyBuilder> object is persistable, but can also be executed before and/or after the assembly is saved to disk.</span></span>  
  
 <span data-ttu-id="3a4e9-133">必须提供相应指定访问模式<xref:System.Reflection.Emit.AssemblyBuilderAccess>值对的调用中<xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly%2A?displayProperty=nameWithType>方法时动态程序集定义，并且以后无法更改。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-133">The access mode must be specified by providing the appropriate <xref:System.Reflection.Emit.AssemblyBuilderAccess> value in the call to the <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly%2A?displayProperty=nameWithType> method when the dynamic assembly is defined and cannot be changed later.</span></span> <span data-ttu-id="3a4e9-134">运行时使用动态程序集的访问的模式以优化程序集的内部表示形式。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-134">The runtime uses the access mode of a dynamic assembly to optimize the assembly's internal representation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-135">下面的代码示例演示如何定义具有一个模块的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-135">The following code example shows how to define a dynamic assembly with one module.</span></span> <span data-ttu-id="3a4e9-136">该示例程序集中模块包含一个类型， `MyDynamicType`，其中具有私有字段、 获取和设置私有字段的属性、 构造函数初始化的私有字段和乘以用户提供的数字的私有字段的方法值并返回结果。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-136">The module in the example assembly contains one type, `MyDynamicType`, which has a private field, a property that gets and sets the private field, constructors that initialize the private field, and a method that multiplies a user-supplied number by the private field value and returns the result.</span></span>  
  
 <span data-ttu-id="3a4e9-137"><xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType> 指定当创建该程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-137"><xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType> is specified when the assembly is created.</span></span> <span data-ttu-id="3a4e9-138">立即使用的程序集代码和程序集也会保存到磁盘，以便它可以使用检查[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)或其他程序中使用。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-138">The assembly code is used immediately, and the assembly is also saved to disk so that it can be examined with [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) or used in another program.</span></span>  
  
 [!code-cpp[AssemblyBuilderClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilderClass/cpp/24895.cpp#1)]
 [!code-csharp[AssemblyBuilderClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilderClass/cs/24895.cs#1)]
 [!code-vb[AssemblyBuilderClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilderClass/vb/24895.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-139">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-139">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-140">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-140">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
    <altmember cref="Overload:System.AppDomain.DefineDynamicAssembly" />
    <related type="Article" href="https://msdn.microsoft.com/library/8e8e2631-62fd-40e7-a8ee-0039b06749bc"><span data-ttu-id="3a4e9-141">发出动态方法和程序集</span><span class="sxs-lookup"><span data-stu-id="3a4e9-141">Emitting Dynamic Methods and Assemblies</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AssemblyBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AssemblyBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddResourceFile">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a4e9-142">将现有资源文件添加到此程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-142">Adds an existing resource file to this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddResourceFile">
      <MemberSignature Language="C#" Value="public void AddResourceFile (string name, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResourceFile(string name, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddResourceFile (name As String, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddResourceFile(System::String ^ name, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.AddResourceFile : string * string -&gt; unit" Usage="assemblyBuilder.AddResourceFile (name, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="fileName" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-143">资源的逻辑名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-143">The logical name of the resource.</span></span></param>
        <param name="fileName"><span data-ttu-id="3a4e9-144">逻辑名称将映射到的物理文件（.resources 文件）的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-144">The physical file name (.resources file) to which the logical name is mapped.</span></span> <span data-ttu-id="3a4e9-145">文件名不应包含路径；该文件必须与将其添加到的程序集位于同一目录中。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-145">This should not include a path; the file must be in the same directory as the assembly to which it is added.</span></span></param>
        <summary><span data-ttu-id="3a4e9-146">将现有资源文件添加到此程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-146">Adds an existing resource file to this assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-147">`fileName` 不应为持久的任何其他模块、 独立托管资源或独立的清单文件的相同。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-147">`fileName` should not be the same as that of any other persistable module, standalone managed resource, or the standalone manifest file.</span></span>  
  
 <span data-ttu-id="3a4e9-148">假定该文件中的托管的资源是公共的。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-148">The managed resources in the file are assumed to be public.</span></span>  
  
 <span data-ttu-id="3a4e9-149">指定的资源文件必须将保存程序集的目录中。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-149">The specified resource file must be in the directory where the assembly will be saved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-150">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-150">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-151">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-151">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-152">下面的代码示例演示如何将资源文件附加到一个动态创建的程序集，使用`AddResourceFile`。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-152">The following code sample demonstrates how to attach a resource file to a dynamically created assembly, using `AddResourceFile`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-153">以前定义过 <paramref name="name" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-153"><paramref name="name" /> has been previously defined.</span></span>  
  
<span data-ttu-id="3a4e9-154">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-154">-or-</span></span> 
<span data-ttu-id="3a4e9-155">程序集中还有另一个名为 <paramref name="fileName" /> 的文件。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-155">There is another file in the assembly named <paramref name="fileName" />.</span></span>  
  
<span data-ttu-id="3a4e9-156">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-156">-or-</span></span> 
<span data-ttu-id="3a4e9-157"><paramref name="name" /> 的长度为零。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-157">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="3a4e9-158">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-158">-or-</span></span> 
<span data-ttu-id="3a4e9-159"><paramref name="fileName" /> 的长度为零，或者如果 <paramref name="fileName" /> 包含路径。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-159">The length of <paramref name="fileName" /> is zero, or if <paramref name="fileName" /> includes a path.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-160"><paramref name="name" /> 或 <paramref name="fileName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-160"><paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="3a4e9-161">未找到文件 <paramref name="fileName" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-161">The file <paramref name="fileName" /> is not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-162">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-162">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-163">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-163">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-164">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-164">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="3a4e9-165">需要 FileIOPermissionAccess.Read 权限访问该资源文件<paramref name="resourceFileName" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-165">The FileIOPermissionAccess.Read permission is needed to access the resource file <paramref name="resourceFileName" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AddResourceFile">
      <MemberSignature Language="C#" Value="public void AddResourceFile (string name, string fileName, System.Reflection.ResourceAttributes attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResourceFile(string name, string fileName, valuetype System.Reflection.ResourceAttributes attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String,System.Reflection.ResourceAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddResourceFile (name As String, fileName As String, attribute As ResourceAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddResourceFile(System::String ^ name, System::String ^ fileName, System::Reflection::ResourceAttributes attribute);" />
      <MemberSignature Language="F#" Value="member this.AddResourceFile : string * string * System.Reflection.ResourceAttributes -&gt; unit" Usage="assemblyBuilder.AddResourceFile (name, fileName, attribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="fileName" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="attribute" Type="System.Reflection.ResourceAttributes" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-166">资源的逻辑名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-166">The logical name of the resource.</span></span></param>
        <param name="fileName"><span data-ttu-id="3a4e9-167">逻辑名称将映射到的物理文件（.resources 文件）的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-167">The physical file name (.resources file) to which the logical name is mapped.</span></span> <span data-ttu-id="3a4e9-168">文件名不应包含路径；该文件必须与将其添加到的程序集位于同一目录中。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-168">This should not include a path; the file must be in the same directory as the assembly to which it is added.</span></span></param>
        <param name="attribute"><span data-ttu-id="3a4e9-169">资源属性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-169">The resource attributes.</span></span></param>
        <summary><span data-ttu-id="3a4e9-170">将现有资源文件添加到此程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-170">Adds an existing resource file to this assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-171">`fileName` 不应为持久的任何其他模块、 独立托管资源或独立的清单文件的相同。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-171">`fileName` should not be the same as that of any other persistable module, standalone managed resource, or the standalone manifest file.</span></span>  
  
 <span data-ttu-id="3a4e9-172">可为托管资源指定特性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-172">Attributes can be specified for the managed resource.</span></span>  
  
 <span data-ttu-id="3a4e9-173">指定的资源文件必须将保存程序集的目录中。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-173">The specified resource file must be in the directory where the assembly will be saved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-174">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-174">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-175">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-175">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-176">下面的代码示例演示如何将资源文件附加到一个动态创建的程序集，使用`AddResourceFile`。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-176">The following code sample demonstrates how to attach a resource file to a dynamically created assembly, using `AddResourceFile`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.AddResourceFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.AddResourceFile Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-177">以前定义过 <paramref name="name" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-177"><paramref name="name" /> has been previously defined.</span></span>  
  
<span data-ttu-id="3a4e9-178">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-178">-or-</span></span> 
<span data-ttu-id="3a4e9-179">程序集中还有另一个名为 <paramref name="fileName" /> 的文件。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-179">There is another file in the assembly named <paramref name="fileName" />.</span></span>  
  
<span data-ttu-id="3a4e9-180">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-180">-or-</span></span> 
<span data-ttu-id="3a4e9-181"><paramref name="name" /> 的长度为零，或者，如果 <paramref name="fileName" /> 的长度为零。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-181">The length of <paramref name="name" /> is zero or if the length of <paramref name="fileName" /> is zero.</span></span>  
  
<span data-ttu-id="3a4e9-182">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-182">-or-</span></span> 
 <span data-ttu-id="3a4e9-183"><paramref name="fileName" /> 包含路径。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-183"><paramref name="fileName" /> includes a path.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-184"><paramref name="name" /> 或 <paramref name="fileName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-184"><paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="3a4e9-185">如果未找到文件 <paramref name="fileName" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-185">If the file <paramref name="fileName" /> is not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-186">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-186">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-187">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-187">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-188">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-188">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="3a4e9-189">需要 FileIOPermissionAccess.Read 权限访问该资源文件<paramref name="resourceFileName" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-189">The FileIOPermissionAccess.Read permission is needed to access the resource file <paramref name="resourceFileName" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CodeBase">
      <MemberSignature Language="C#" Value="public override string CodeBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CodeBase" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.CodeBase" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CodeBase As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CodeBase { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeBase : string" Usage="System.Reflection.Emit.AssemblyBuilder.CodeBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a4e9-190">获取最初指定的程序集的位置（例如，在 <see cref="T:System.Reflection.AssemblyName" /> 对象中）。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-190">Gets the location of the assembly, as specified originally (such as in an <see cref="T:System.Reflection.AssemblyName" /> object).</span></span></summary>
        <value><span data-ttu-id="3a4e9-191">程序集的位置（按照最初的指定）。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-191">The location of the assembly, as specified originally.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-192">若要获取已加载的清单包含文件的绝对路径，请使用<xref:System.Reflection.Assembly.Location%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-192">To get the absolute path to the loaded manifest-containing file, use the <xref:System.Reflection.Assembly.Location%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a4e9-193">目前尚不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-193">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-194">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-194">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-195">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-195">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-196">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-196">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefinedTypes">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;System.Reflection.TypeInfo&gt; DefinedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.TypeInfo&gt; DefinedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.DefinedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DefinedTypes As IEnumerable(Of TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::TypeInfo ^&gt; ^ DefinedTypes { System::Collections::Generic::IEnumerable&lt;System::Reflection::TypeInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefinedTypes : seq&lt;System.Reflection.TypeInfo&gt;" Usage="System.Reflection.Emit.AssemblyBuilder.DefinedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.TypeInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineDynamicAssembly">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a4e9-197">定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-197">Defines a dynamic assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access);" />
      <MemberSignature Language="F#" Value="static member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly (name, access)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-198">程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-198">The name of the assembly.</span></span></param>
        <param name="access"><span data-ttu-id="3a4e9-199">程序集的访问权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-199">The access rights of the assembly.</span></span></param>
        <summary><span data-ttu-id="3a4e9-200">定义一个动态程序集，该动态程序集具有指定的名称和访问权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-200">Defines a dynamic assembly that has the specified name and access rights.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-201">一个表示新程序集的对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-201">An object that represents the new assembly.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes);" />
      <MemberSignature Language="F#" Value="static member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * seq&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly (name, access, assemblyAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-202">程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-202">The name of the assembly.</span></span></param>
        <param name="access"><span data-ttu-id="3a4e9-203">程序集的访问权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-203">The access rights of the assembly.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="3a4e9-204">一个包含程序集特性的集合。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-204">A collection that contains the attributes of the assembly.</span></span></param>
        <summary><span data-ttu-id="3a4e9-205">使用指定的名称、访问模式和自定义特性定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-205">Defines a new assembly that has the specified name, access rights, and attributes.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-206">一个表示新程序集的对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-206">An object that represents the new assembly.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineDynamicModule">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a4e9-207">在此程序集中定义动态模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-207">Defines a dynamic module in this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicModule (name As String) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ DefineDynamicModule(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicModule : string -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.DefineDynamicModule name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-208">动态模块的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-208">The name of the dynamic module.</span></span></param>
        <summary><span data-ttu-id="3a4e9-209">在此程序集中定义命名的瞬态动态模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-209">Defines a named transient dynamic module in this assembly.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-210">表示已定义动态模块的 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-210">A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> representing the defined dynamic module.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-211">它是错误的程序集中定义多个具有相同名称的动态模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-211">It is an error to define multiple dynamic modules with the same name in an assembly.</span></span>  
  
 <span data-ttu-id="3a4e9-212">定义的动态模块是瞬态的。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-212">The defined dynamic module is transient.</span></span> <span data-ttu-id="3a4e9-213">未保存的动态模块，即使父动态程序集的创建与<xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-213">The dynamic module is not saved, even if the parent dynamic assembly was created with <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-214">若要调试动态模块时，请取消优化，适用<xref:System.Diagnostics.DebuggableAttribute>属性为动态程序集之前调用<xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-214">To suppress optimizations when debugging dynamic modules, apply the <xref:System.Diagnostics.DebuggableAttribute> attribute to the dynamic assembly before calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>.</span></span> <span data-ttu-id="3a4e9-215">创建的实例<xref:System.Diagnostics.DebuggableAttribute>与<xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations>标志并将其使用应用<xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-215">Create an instance of <xref:System.Diagnostics.DebuggableAttribute> with the <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> flag and apply it using the <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="3a4e9-216">该特性必须应用到的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-216">The attribute must be applied to the dynamic assembly.</span></span> <span data-ttu-id="3a4e9-217">如果应用于该模块则无效。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-217">It has no effect if applied to the module.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-218">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-218">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-219">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-219">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-220">[Visual Basic 中， C#]</span><span class="sxs-lookup"><span data-stu-id="3a4e9-220">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="3a4e9-221">下面的代码示例演示如何创建一个暂时动态模块使用`DefineDynamicModule`。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-221">The code example below demonstrates how to create a transient dynamic module using `DefineDynamicModule`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-222"><paramref name="name" /> 以空白开始。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-222"><paramref name="name" /> begins with white space.</span></span>  
  
<span data-ttu-id="3a4e9-223">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-223">-or-</span></span> 
<span data-ttu-id="3a4e9-224"><paramref name="name" /> 的长度为零。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-224">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="3a4e9-225">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-225">-or-</span></span> 
<span data-ttu-id="3a4e9-226"><paramref name="name" /> 的长度超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-226">The length of <paramref name="name" /> is greater than the system-defined maximum length.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-227"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-227"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-228">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-228">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.ExecutionEngineException"><span data-ttu-id="3a4e9-229">无法加载默认符号编写器的程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-229">The assembly for default symbol writer cannot be loaded.</span></span>  
  
<span data-ttu-id="3a4e9-230">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-230">-or-</span></span> 
<span data-ttu-id="3a4e9-231">无法找到实现默认符号编写器接口的类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-231">The type that implements the default symbol writer interface cannot be found.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-232">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-232">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-233">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-233">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, bool emitSymbolInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name, bool emitSymbolInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicModule (name As String, emitSymbolInfo As Boolean) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ DefineDynamicModule(System::String ^ name, bool emitSymbolInfo);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicModule : string * bool -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.DefineDynamicModule (name, emitSymbolInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="emitSymbolInfo" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-234">动态模块的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-234">The name of the dynamic module.</span></span></param>
        <param name="emitSymbolInfo"><span data-ttu-id="3a4e9-235">如果要发出符号信息，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-235"><see langword="true" /> if symbol information is to be emitted; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="3a4e9-236">在此程序集中定义命名的瞬态动态模块，并指定是否发出符号信息。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-236">Defines a named transient dynamic module in this assembly and specifies whether symbol information should be emitted.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-237">表示已定义动态模块的 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-237">A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> representing the defined dynamic module.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-238">它是错误的程序集中定义多个具有相同名称的动态模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-238">It is an error to define multiple dynamic modules with the same name in an assembly.</span></span>  
  
 <span data-ttu-id="3a4e9-239">未保存的动态模块，即使父动态程序集的创建与<xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-239">The dynamic module is not saved, even if the parent dynamic assembly was created with <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-240">若要调试动态模块时，请取消优化，适用<xref:System.Diagnostics.DebuggableAttribute>属性为动态程序集之前调用<xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-240">To suppress optimizations when debugging dynamic modules, apply the <xref:System.Diagnostics.DebuggableAttribute> attribute to the dynamic assembly before calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>.</span></span> <span data-ttu-id="3a4e9-241">创建的实例<xref:System.Diagnostics.DebuggableAttribute>与<xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations>标志并将其使用应用<xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-241">Create an instance of <xref:System.Diagnostics.DebuggableAttribute> with the <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> flag and apply it using the <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="3a4e9-242">该特性必须应用到的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-242">The attribute must be applied to the dynamic assembly.</span></span> <span data-ttu-id="3a4e9-243">如果应用于该模块则无效。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-243">It has no effect if applied to the module.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-244">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-244">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-245">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-245">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-246">[Visual Basic 中， C#]</span><span class="sxs-lookup"><span data-stu-id="3a4e9-246">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="3a4e9-247">下面的代码示例演示如何创建一个暂时动态模块使用`DefineDynamicModule`，禁止显示符号信息。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-247">The code example below demonstrates how to create a transient dynamic module using `DefineDynamicModule`, suppressing symbol information.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CPP/source.cpp#2)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CS/source.cs#2)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-248"><paramref name="name" /> 以空白开始。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-248"><paramref name="name" /> begins with white space.</span></span>  
  
<span data-ttu-id="3a4e9-249">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-249">-or-</span></span> 
<span data-ttu-id="3a4e9-250"><paramref name="name" /> 的长度为零。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-250">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="3a4e9-251">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-251">-or-</span></span> 
<span data-ttu-id="3a4e9-252"><paramref name="name" /> 的长度超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-252">The length of <paramref name="name" /> is greater than the system-defined maximum length.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-253"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-253"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ExecutionEngineException"><span data-ttu-id="3a4e9-254">无法加载默认符号编写器的程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-254">The assembly for default symbol writer cannot be loaded.</span></span>  
  
<span data-ttu-id="3a4e9-255">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-255">-or-</span></span> 
<span data-ttu-id="3a4e9-256">无法找到实现默认符号编写器接口的类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-256">The type that implements the default symbol writer interface cannot be found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-257">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-257">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-258">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-258">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-259">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-259">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicModule (name As String, fileName As String) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ DefineDynamicModule(System::String ^ name, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicModule : string * string -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.DefineDynamicModule (name, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="fileName" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-260">动态模块的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-260">The name of the dynamic module.</span></span></param>
        <param name="fileName"><span data-ttu-id="3a4e9-261">该动态模块应保存到的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-261">The name of the file to which the dynamic module should be saved.</span></span></param>
        <summary><span data-ttu-id="3a4e9-262">用给定名称定义将保存到指定文件的持久动态模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-262">Defines a persistable dynamic module with the given name that will be saved to the specified file.</span></span> <span data-ttu-id="3a4e9-263">不发出符号信息。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-263">No symbol information is emitted.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-264">表示已定义动态模块的 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-264">A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> object representing the defined dynamic module.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-265">若要定义的持久动态模块，此程序集需要使用创建<xref:System.Reflection.Emit.AssemblyBuilderAccess.Save>或<xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>属性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-265">To define a persistable dynamic module, this assembly needs to be created with the <xref:System.Reflection.Emit.AssemblyBuilderAccess.Save> or the <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave> attribute.</span></span>  
  
 <span data-ttu-id="3a4e9-266">如果你想要包含程序集清单的模块`name`应与程序集的名称相同 (即<xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType>的属性<xref:System.Reflection.AssemblyName>用来创建动态程序集) 和`fileName`应与相同指定在您保存程序集的文件名。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-266">If you want the module to contain the assembly manifest, `name` should be the same as the name of the assembly (that is, the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> property of the <xref:System.Reflection.AssemblyName> used to create the dynamic assembly) and `fileName` should be the same as the filename you specify when you save the assembly.</span></span>  
  
 <span data-ttu-id="3a4e9-267">在具有只有一个模块的程序集，该模块应包含程序集清单。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-267">In an assembly with only one module, that module should contain the assembly manifest.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-268">若要调试动态模块时，请取消优化，适用<xref:System.Diagnostics.DebuggableAttribute>属性为动态程序集之前调用<xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-268">To suppress optimizations when debugging dynamic modules, apply the <xref:System.Diagnostics.DebuggableAttribute> attribute to the dynamic assembly before calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>.</span></span> <span data-ttu-id="3a4e9-269">创建的实例<xref:System.Diagnostics.DebuggableAttribute>与<xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations>标志并将其使用应用<xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-269">Create an instance of <xref:System.Diagnostics.DebuggableAttribute> with the <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> flag and apply it using the <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="3a4e9-270">该特性必须应用到的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-270">The attribute must be applied to the dynamic assembly.</span></span> <span data-ttu-id="3a4e9-271">如果应用于该模块则无效。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-271">It has no effect if applied to the module.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-272">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-272">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-273">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-273">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-274">[Visual Basic 中， C#]</span><span class="sxs-lookup"><span data-stu-id="3a4e9-274">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="3a4e9-275">下面的代码示例演示如何创建持久动态模块使用`DefineDynamicModule`。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-275">The code example below demonstrates how to create a persistent dynamic module using `DefineDynamicModule`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CPP/source.cpp#3)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CS/source.cs#3)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-276"><paramref name="name" /> 或 <paramref name="fileName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-276"><paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-277"><paramref name="name" /> 或 <paramref name="fileName" /> 的长度为零。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-277">The length of <paramref name="name" /> or <paramref name="fileName" /> is zero.</span></span>  
  
<span data-ttu-id="3a4e9-278">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-278">-or-</span></span> 
<span data-ttu-id="3a4e9-279"><paramref name="name" /> 的长度超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-279">The length of <paramref name="name" /> is greater than the system-defined maximum length.</span></span>  
  
<span data-ttu-id="3a4e9-280">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-280">-or-</span></span> 
 <span data-ttu-id="3a4e9-281"><paramref name="fileName" /> 包含路径规范（例如，目录组件）。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-281"><paramref name="fileName" /> contains a path specification (a directory component, for example).</span></span>  
  
<span data-ttu-id="3a4e9-282">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-282">-or-</span></span> 
<span data-ttu-id="3a4e9-283">与属于此程序集的另一个文件的名称有冲突。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-283">There is a conflict with the name of another file that belongs to this assembly.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3a4e9-284">此程序集以前已保存过。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-284">This assembly has been previously saved.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a4e9-285">在动态程序集上用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> 特性调用了此程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-285">This assembly was called on a dynamic assembly with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> attribute.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-286">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-286">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.ExecutionEngineException"><span data-ttu-id="3a4e9-287">无法加载默认符号编写器的程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-287">The assembly for default symbol writer cannot be loaded.</span></span>  
  
<span data-ttu-id="3a4e9-288">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-288">-or-</span></span> 
<span data-ttu-id="3a4e9-289">无法找到实现默认符号编写器接口的类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-289">The type that implements the default symbol writer interface cannot be found.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-290">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-290">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-291">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-291">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="3a4e9-292">编写 = true 或追加 = 保存模块所需的 true</span><span class="sxs-lookup"><span data-stu-id="3a4e9-292">Write=true or Append=true is needed to save the module</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, string fileName, bool emitSymbolInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicModule (name As String, fileName As String, emitSymbolInfo As Boolean) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ DefineDynamicModule(System::String ^ name, System::String ^ fileName, bool emitSymbolInfo);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicModule : string * string * bool -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.DefineDynamicModule (name, fileName, emitSymbolInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="fileName" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="emitSymbolInfo" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-293">动态模块的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-293">The name of the dynamic module.</span></span></param>
        <param name="fileName"><span data-ttu-id="3a4e9-294">该动态模块应保存到的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-294">The name of the file to which the dynamic module should be saved.</span></span></param>
        <param name="emitSymbolInfo"><span data-ttu-id="3a4e9-295">如果为 <see langword="true" />，则使用默认的符号编写器编写符号信息。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-295">If <see langword="true" />, symbolic information is written using the default symbol writer.</span></span></param>
        <summary><span data-ttu-id="3a4e9-296">定义持久动态模块，并指定模块名称、用于保存模块的文件名，同时指定是否使用默认符号编写器发出符号信息。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-296">Defines a persistable dynamic module, specifying the module name, the name of the file to which the module will be saved, and whether symbol information should be emitted using the default symbol writer.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-297">表示已定义动态模块的 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-297">A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> object representing the defined dynamic module.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-298">若要定义的持久动态模块，此程序集需要使用创建<xref:System.Reflection.Emit.AssemblyBuilderAccess.Save>或<xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave>属性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-298">To define a persistable dynamic module, this assembly needs to be created with the <xref:System.Reflection.Emit.AssemblyBuilderAccess.Save> or the <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave> attribute.</span></span>  
  
 <span data-ttu-id="3a4e9-299">如果你想要包含程序集清单的模块`name`应与程序集的名称相同 (即<xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType>的属性<xref:System.Reflection.AssemblyName>用来创建动态程序集) 和`fileName`应与相同指定在您保存程序集的文件名。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-299">If you want the module to contain the assembly manifest, `name` should be the same as the name of the assembly (that is, the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> property of the <xref:System.Reflection.AssemblyName> used to create the dynamic assembly) and `fileName` should be the same as the filename you specify when you save the assembly.</span></span>  
  
 <span data-ttu-id="3a4e9-300">在具有只有一个模块的程序集，该模块应包含程序集清单。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-300">In an assembly with only one module, that module should contain the assembly manifest.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-301">若要调试动态模块时，请取消优化，适用<xref:System.Diagnostics.DebuggableAttribute>属性为动态程序集之前调用<xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-301">To suppress optimizations when debugging dynamic modules, apply the <xref:System.Diagnostics.DebuggableAttribute> attribute to the dynamic assembly before calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>.</span></span> <span data-ttu-id="3a4e9-302">创建的实例<xref:System.Diagnostics.DebuggableAttribute>与<xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations>标志并将其使用应用<xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-302">Create an instance of <xref:System.Diagnostics.DebuggableAttribute> with the <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations> flag and apply it using the <xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="3a4e9-303">该特性必须应用到的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-303">The attribute must be applied to the dynamic assembly.</span></span> <span data-ttu-id="3a4e9-304">如果应用于该模块则无效。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-304">It has no effect if applied to the module.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-305">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-305">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-306">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-306">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-307">[Visual Basic 中， C#]</span><span class="sxs-lookup"><span data-stu-id="3a4e9-307">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="3a4e9-308">下面的代码示例演示如何创建持久的动态模块符号发出使用`DefineDynamicModule`。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-308">The code example below demonstrates how to create a persistent dynamic module with symbol emission using `DefineDynamicModule`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CPP/source.cpp#4)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/CS/source.cs#4)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.DefineDynamicModule Example/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-309"><paramref name="name" /> 或 <paramref name="fileName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-309"><paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-310"><paramref name="name" /> 或 <paramref name="fileName" /> 的长度为零。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-310">The length of <paramref name="name" /> or <paramref name="fileName" /> is zero.</span></span>  
  
<span data-ttu-id="3a4e9-311">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-311">-or-</span></span> 
<span data-ttu-id="3a4e9-312"><paramref name="name" /> 的长度超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-312">The length of <paramref name="name" /> is greater than the system-defined maximum length.</span></span>  
  
<span data-ttu-id="3a4e9-313">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-313">-or-</span></span> 
 <span data-ttu-id="3a4e9-314"><paramref name="fileName" /> 包含路径规范（例如，目录组件）。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-314"><paramref name="fileName" /> contains a path specification (a directory component, for example).</span></span>  
  
<span data-ttu-id="3a4e9-315">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-315">-or-</span></span> 
<span data-ttu-id="3a4e9-316">与属于此程序集的另一个文件的名称有冲突。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-316">There is a conflict with the name of another file that belongs to this assembly.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3a4e9-317">此程序集以前已保存过。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-317">This assembly has been previously saved.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a4e9-318">在动态程序集上用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> 特性调用了此程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-318">This assembly was called on a dynamic assembly with the <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> attribute.</span></span></exception>
        <exception cref="T:System.ExecutionEngineException"><span data-ttu-id="3a4e9-319">无法加载默认符号编写器的程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-319">The assembly for default symbol writer cannot be loaded.</span></span>  
  
<span data-ttu-id="3a4e9-320">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-320">-or-</span></span> 
<span data-ttu-id="3a4e9-321">无法找到实现默认符号编写器接口的类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-321">The type that implements the default symbol writer interface cannot be found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-322">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-322">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-323">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-323">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-324">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-324">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="3a4e9-325">编写 = true 或追加 = 保存此模块所需的 true</span><span class="sxs-lookup"><span data-stu-id="3a4e9-325">Write=true or Append=true is needed to save this module</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineResource">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a4e9-326">为此程序集定义独立托管资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-326">Defines a standalone managed resource for this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineResource">
      <MemberSignature Language="C#" Value="public System.Resources.IResourceWriter DefineResource (string name, string description, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Resources.IResourceWriter DefineResource(string name, string description, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineResource(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineResource (name As String, description As String, fileName As String) As IResourceWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Resources::IResourceWriter ^ DefineResource(System::String ^ name, System::String ^ description, System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.DefineResource : string * string * string -&gt; System.Resources.IResourceWriter" Usage="assemblyBuilder.DefineResource (name, description, fileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Resources.IResourceWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="description" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="fileName" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-327">资源的逻辑名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-327">The logical name of the resource.</span></span></param>
        <param name="description"><span data-ttu-id="3a4e9-328">资源的文本说明。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-328">A textual description of the resource.</span></span></param>
        <param name="fileName"><span data-ttu-id="3a4e9-329">逻辑名称将映射到的物理文件（.resources 文件）的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-329">The physical file name (.resources file) to which the logical name is mapped.</span></span> <span data-ttu-id="3a4e9-330">这应不包括路径。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-330">This should not include a path.</span></span></param>
        <summary><span data-ttu-id="3a4e9-331">用默认的公共资源特性为此程序集定义独立托管资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-331">Defines a standalone managed resource for this assembly with the default public resource attribute.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-332">指定资源的 <see cref="T:System.Resources.ResourceWriter" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-332">A <see cref="T:System.Resources.ResourceWriter" /> object for the specified resource.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-333">可以添加细粒度资源使用返回<xref:System.Resources.ResourceWriter>通过调用<xref:System.Resources.ResourceWriter.AddResource%2A>。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-333">Fine grain resources can be added with the returned <xref:System.Resources.ResourceWriter> by calling <xref:System.Resources.ResourceWriter.AddResource%2A>.</span></span>  
  
 <span data-ttu-id="3a4e9-334">`fileName` 不应为持久的任何其他模块、 独立托管的资源或独立的清单文件的相同。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-334">`fileName` should not be the same as that of any other persistable module, stand-alone managed resource, or the stand-alone manifest file.</span></span>  
  
 <span data-ttu-id="3a4e9-335">运行时调用<xref:System.Resources.ResourceWriter.Close%2A>方法时保存动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-335">The runtime calls the <xref:System.Resources.ResourceWriter.Close%2A> method when the dynamic assembly is saved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-336">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-336">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-337">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-337">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-338">下面的示例使用<xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>方法获取的资源编写器。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-338">The following example uses the <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A> method to get a resource writer.</span></span> <span data-ttu-id="3a4e9-339">该示例使用的资源编写器添加三个资源字符串。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-339">The example uses the resource writer to add three resource strings.</span></span>  
  
 [!code-cpp[AssemblyBuilder.DefineResource Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder.DefineResource Example 2/CPP/assemblybuilder_defineresource.cpp#1)]
 [!code-csharp[AssemblyBuilder.DefineResource Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder.DefineResource Example 2/CS/assemblybuilder_defineresource.cs#1)]
 [!code-vb[AssemblyBuilder.DefineResource Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder.DefineResource Example 2/VB/assemblybuilder_defineresource.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-340">以前定义过 <paramref name="name" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-340"><paramref name="name" /> has been previously defined.</span></span>  
  
<span data-ttu-id="3a4e9-341">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-341">-or-</span></span> 
<span data-ttu-id="3a4e9-342">程序集中还有另一个名为 <paramref name="fileName" /> 的文件。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-342">There is another file in the assembly named <paramref name="fileName" />.</span></span>  
  
<span data-ttu-id="3a4e9-343">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-343">-or-</span></span> 
<span data-ttu-id="3a4e9-344"><paramref name="name" /> 的长度为零。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-344">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="3a4e9-345">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-345">-or-</span></span> 
<span data-ttu-id="3a4e9-346"><paramref name="fileName" /> 的长度为零。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-346">The length of <paramref name="fileName" /> is zero.</span></span>  
  
<span data-ttu-id="3a4e9-347">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-347">-or-</span></span> 
 <span data-ttu-id="3a4e9-348"><paramref name="fileName" /> 包含路径。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-348"><paramref name="fileName" /> includes a path.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-349"><paramref name="name" /> 或 <paramref name="fileName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-349"><paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-350">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-350">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-351">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-351">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-352">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-352">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="3a4e9-353">编写 = true 或追加 = true</span><span class="sxs-lookup"><span data-stu-id="3a4e9-353">Write=true or Append=true</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineResource">
      <MemberSignature Language="C#" Value="public System.Resources.IResourceWriter DefineResource (string name, string description, string fileName, System.Reflection.ResourceAttributes attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Resources.IResourceWriter DefineResource(string name, string description, string fileName, valuetype System.Reflection.ResourceAttributes attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineResource(System.String,System.String,System.String,System.Reflection.ResourceAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineResource (name As String, description As String, fileName As String, attribute As ResourceAttributes) As IResourceWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Resources::IResourceWriter ^ DefineResource(System::String ^ name, System::String ^ description, System::String ^ fileName, System::Reflection::ResourceAttributes attribute);" />
      <MemberSignature Language="F#" Value="member this.DefineResource : string * string * string * System.Reflection.ResourceAttributes -&gt; System.Resources.IResourceWriter" Usage="assemblyBuilder.DefineResource (name, description, fileName, attribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Resources.IResourceWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="description" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="fileName" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="attribute" Type="System.Reflection.ResourceAttributes" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-354">资源的逻辑名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-354">The logical name of the resource.</span></span></param>
        <param name="description"><span data-ttu-id="3a4e9-355">资源的文本说明。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-355">A textual description of the resource.</span></span></param>
        <param name="fileName"><span data-ttu-id="3a4e9-356">逻辑名称将映射到的物理文件（.resources 文件）的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-356">The physical file name (.resources file) to which the logical name is mapped.</span></span> <span data-ttu-id="3a4e9-357">这应不包括路径。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-357">This should not include a path.</span></span></param>
        <param name="attribute"><span data-ttu-id="3a4e9-358">资源属性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-358">The resource attributes.</span></span></param>
        <summary><span data-ttu-id="3a4e9-359">为此程序集定义独立托管资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-359">Defines a standalone managed resource for this assembly.</span></span> <span data-ttu-id="3a4e9-360">可为托管资源指定特性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-360">Attributes can be specified for the managed resource.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-361">指定资源的 <see cref="T:System.Resources.ResourceWriter" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-361">A <see cref="T:System.Resources.ResourceWriter" /> object for the specified resource.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-362">可以添加细粒度资源使用返回<xref:System.Resources.ResourceWriter>通过调用<xref:System.Resources.ResourceWriter.AddResource%2A>。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-362">Fine-grain resources can be added with the returned <xref:System.Resources.ResourceWriter> by calling <xref:System.Resources.ResourceWriter.AddResource%2A>.</span></span>  
  
 <span data-ttu-id="3a4e9-363">`fileName` 不应为持久的任何其他模块、 独立托管资源或独立的清单文件的相同。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-363">`fileName` should not be the same as that of any other persistable module, standalone managed resource, or the standalone manifest file.</span></span>  
  
 <span data-ttu-id="3a4e9-364">运行时调用<xref:System.Resources.ResourceWriter.Close%2A>方法时保存动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-364">The runtime calls the <xref:System.Resources.ResourceWriter.Close%2A> method when the dynamic assembly is saved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-365">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-365">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-366">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-366">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-367"><paramref name="name" /> 以前已定义过，或者如果程序集中有另一个名为 <paramref name="fileName" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-367"><paramref name="name" /> has been previously defined or if there is another file in the assembly named <paramref name="fileName" />.</span></span>  
  
<span data-ttu-id="3a4e9-368">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-368">-or-</span></span> 
<span data-ttu-id="3a4e9-369"><paramref name="name" /> 的长度为零。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-369">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="3a4e9-370">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-370">-or-</span></span> 
<span data-ttu-id="3a4e9-371"><paramref name="fileName" /> 的长度为零。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-371">The length of <paramref name="fileName" /> is zero.</span></span>  
  
<span data-ttu-id="3a4e9-372">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-372">-or-</span></span> 
 <span data-ttu-id="3a4e9-373"><paramref name="fileName" /> 包含路径。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-373"><paramref name="fileName" /> includes a path.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-374"><paramref name="name" /> 或 <paramref name="fileName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-374"><paramref name="name" /> or <paramref name="fileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-375">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-375">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-376">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-376">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-377">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-377">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="3a4e9-378">编写 = true 或追加 = true</span><span class="sxs-lookup"><span data-stu-id="3a4e9-378">Write=true or Append=true</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineUnmanagedResource">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a4e9-379">定义此程序集的非托管资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-379">Defines an unmanaged resource for this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineUnmanagedResource">
      <MemberSignature Language="C#" Value="public void DefineUnmanagedResource (byte[] resource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineUnmanagedResource(unsigned int8[] resource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineUnmanagedResource (resource As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineUnmanagedResource(cli::array &lt;System::Byte&gt; ^ resource);" />
      <MemberSignature Language="F#" Value="member this.DefineUnmanagedResource : byte[] -&gt; unit" Usage="assemblyBuilder.DefineUnmanagedResource resource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.Byte[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="resource"><span data-ttu-id="3a4e9-380">表示非托管资源的不透明字节 Blob。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-380">The opaque blob of bytes representing the unmanaged resource.</span></span></param>
        <summary><span data-ttu-id="3a4e9-381">将此程序集的非托管资源定义为不透明的字节 Blob。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-381">Defines an unmanaged resource for this assembly as an opaque blob of bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-382">程序集可以与一个非托管资源相关联。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-382">An assembly can be associated with only one unmanaged resource.</span></span> <span data-ttu-id="3a4e9-383">这意味着，调用<xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A>或<xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A>后一种方法调用之前将引发正在引发 System.ArgumentException。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-383">This means that calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> or <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> after either one of the methods was called previously will throw the System.ArgumentException being throw.</span></span> <span data-ttu-id="3a4e9-384">需要与 Microsoft ResMerge 实用程序 （不提供与公共语言运行时） 等工具合并多个非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-384">Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-385">下面的代码示例创建并附加到一个动态程序集，使用表示非托管的资源的字节数组`DefineUnmanagedResource`。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-385">The following code sample creates and attaches an array of bytes representing an unmanaged resource to a dynamic assembly, using `DefineUnmanagedResource`.</span></span>  
  
 [!code-cpp[AssemblyBuilder_DefineUnmanagedResource2#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource2/CPP/assemblybuilder_defineunmanagedresource2.cpp#1)]
 [!code-csharp[AssemblyBuilder_DefineUnmanagedResource2#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource2/CS/assemblybuilder_defineunmanagedresource2.cs#1)]
 [!code-vb[AssemblyBuilder_DefineUnmanagedResource2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource2/VB/assemblybuilder_defineunmanagedresource2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-386">以前定义过非托管资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-386">An unmanaged resource was previously defined.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-387"><paramref name="resource" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-387"><paramref name="resource" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-388">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-388">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-389">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-389">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-390">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-390">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineUnmanagedResource">
      <MemberSignature Language="C#" Value="public void DefineUnmanagedResource (string resourceFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineUnmanagedResource(string resourceFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineUnmanagedResource (resourceFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineUnmanagedResource(System::String ^ resourceFileName);" />
      <MemberSignature Language="F#" Value="member this.DefineUnmanagedResource : string -&gt; unit" Usage="assemblyBuilder.DefineUnmanagedResource resourceFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceFileName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="resourceFileName"><span data-ttu-id="3a4e9-391">资源文件的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-391">The name of the resource file.</span></span></param>
        <summary><span data-ttu-id="3a4e9-392">已知资源文件名，定义此程序集的非托管资源文件。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-392">Defines an unmanaged resource file for this assembly given the name of the resource file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-393">程序集可以与一个非托管资源相关联。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-393">An assembly can be associated with only one unmanaged resource.</span></span> <span data-ttu-id="3a4e9-394">这意味着，调用<xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A>或<xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A>后一种方法调用以前会引发 System.ArgumentException。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-394">This means that calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> or <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> after either one of the methods was called previously will throw the System.ArgumentException.</span></span> <span data-ttu-id="3a4e9-395">需要与 Microsoft ResMerge 实用程序 （不提供与公共语言运行时） 等工具合并多个非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-395">Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-396">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-396">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-397">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-397">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-398">下面的示例演示如何通过调用`DefineUnmanagedResource`，并传递外部资源文件。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-398">The example below demonstrates a call to `DefineUnmanagedResource`, passing an external resource file.</span></span>  
  
 [!code-cpp[AssemblyBuilder_DefineUnmanagedResource#3](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource/CPP/assemblybuilder_defineunmanagedresource.cpp#3)]
 [!code-csharp[AssemblyBuilder_DefineUnmanagedResource#3](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource/CS/assemblybuilder_defineunmanagedresource.cs#3)]
 [!code-vb[AssemblyBuilder_DefineUnmanagedResource#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_DefineUnmanagedResource/VB/assemblybuilder_defineunmanagedresource.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-399">以前定义过非托管资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-399">An unmanaged resource was previously defined.</span></span>  
  
<span data-ttu-id="3a4e9-400">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-400">-or-</span></span> 
<span data-ttu-id="3a4e9-401">文件 <paramref name="resourceFileName" /> 不可读。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-401">The file <paramref name="resourceFileName" /> is not readable.</span></span>  
  
<span data-ttu-id="3a4e9-402">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-402">-or-</span></span> 
 <span data-ttu-id="3a4e9-403"><paramref name="resourceFileName" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-403"><paramref name="resourceFileName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-404"><paramref name="resourceFileName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-404"><paramref name="resourceFileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="3a4e9-405"><paramref name="resourceFileName" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-405"><paramref name="resourceFileName" /> is not found.</span></span>  
  
<span data-ttu-id="3a4e9-406">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-406">-or-</span></span> 
 <span data-ttu-id="3a4e9-407"><paramref name="resourceFileName" /> 是一个目录。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-407"><paramref name="resourceFileName" /> is a directory.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-408">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-408">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-409">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-409">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-410">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-410">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="3a4e9-411">需要 FileIOPermissionAccess.Read 权限访问该资源文件<paramref name="resourceFileName" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-411">The FileIOPermissionAccess.Read permission is needed to access the resource file <paramref name="resourceFileName" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineVersionInfoResource">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a4e9-412">定义此程序集的非托管版本信息资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-412">Defines an unmanaged version information resource for this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineVersionInfoResource">
      <MemberSignature Language="C#" Value="public void DefineVersionInfoResource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineVersionInfoResource() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineVersionInfoResource ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineVersionInfoResource();" />
      <MemberSignature Language="F#" Value="member this.DefineVersionInfoResource : unit -&gt; unit" Usage="assemblyBuilder.DefineVersionInfoResource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a4e9-413">使用程序集的 AssemblyName 对象和程序集的自定义特性中指定的信息，定义非托管版本信息资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-413">Defines an unmanaged version information resource using the information specified in the assembly's AssemblyName object and the assembly's custom attributes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-414">程序集可以与一个非托管资源相关联。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-414">An assembly can be associated with only one unmanaged resource.</span></span> <span data-ttu-id="3a4e9-415">这意味着，调用<xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A>或<xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A>后一种方法调用以前会引发 System.ArgumentException。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-415">This means that calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> or <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> after either one of the methods was called previously will throw the System.ArgumentException.</span></span> <span data-ttu-id="3a4e9-416">需要与 Microsoft ResMerge 实用程序 （不提供与公共语言运行时 SDK） 之类的工具合并多个非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-416">Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime SDK).</span></span>  
  
 <span data-ttu-id="3a4e9-417">空参数字符串写入为一个空格。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-417">Empty argument strings get written as a single space.</span></span> <span data-ttu-id="3a4e9-418">空格将替换为参数字符串中的 null 字符。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-418">Spaces are substituted for null characters in the argument strings.</span></span>  
  
 <span data-ttu-id="3a4e9-419">从推断信息`AssemblyName`对象用于定义此动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-419">The information is inferred from the `AssemblyName` object used to define this dynamic assembly.</span></span> <span data-ttu-id="3a4e9-420">此程序集的自定义属性重写中指定的信息`AssemblyName`对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-420">This assembly's custom attributes override information specified in the `AssemblyName` object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-421">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-421">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-422">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-422">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-423">以下示例所示的使用情况`DefineVersionInfoResource`。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-423">The example below illustrates the usage of `DefineVersionInfoResource`.</span></span>  
  
 [!code-cpp[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/CPP/assemblybuilder_defineversioninforesource.cpp#1)]
 [!code-csharp[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/CS/assemblybuilder_defineversioninforesource.cs#1)]
 [!code-vb[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/VB/assemblybuilder_defineversioninforesource.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-424">以前定义过非托管版本信息资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-424">An unmanaged version information resource was previously defined.</span></span>  
  
<span data-ttu-id="3a4e9-425">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-425">-or-</span></span> 
<span data-ttu-id="3a4e9-426">非托管版本信息太大，无法保持。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-426">The unmanaged version information is too large to persist.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-427">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-427">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-428">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-428">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-429">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-429">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineVersionInfoResource">
      <MemberSignature Language="C#" Value="public void DefineVersionInfoResource (string product, string productVersion, string company, string copyright, string trademark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineVersionInfoResource(string product, string productVersion, string company, string copyright, string trademark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineVersionInfoResource (product As String, productVersion As String, company As String, copyright As String, trademark As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineVersionInfoResource(System::String ^ product, System::String ^ productVersion, System::String ^ company, System::String ^ copyright, System::String ^ trademark);" />
      <MemberSignature Language="F#" Value="member this.DefineVersionInfoResource : string * string * string * string * string -&gt; unit" Usage="assemblyBuilder.DefineVersionInfoResource (product, productVersion, company, copyright, trademark)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="product" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="productVersion" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="company" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="copyright" Type="System.String" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="trademark" Type="System.String" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="product"><span data-ttu-id="3a4e9-430">用于分发此程序集的产品的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-430">The name of the product with which this assembly is distributed.</span></span></param>
        <param name="productVersion"><span data-ttu-id="3a4e9-431">用于分发此程序集的产品的版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-431">The version of the product with which this assembly is distributed.</span></span></param>
        <param name="company"><span data-ttu-id="3a4e9-432">生产此程序集的公司名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-432">The name of the company that produced this assembly.</span></span></param>
        <param name="copyright"><span data-ttu-id="3a4e9-433">描述应用于此程序集的所有版权声明、商标和注册商标。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-433">Describes all copyright notices, trademarks, and registered trademarks that apply to this assembly.</span></span> <span data-ttu-id="3a4e9-434">这包括所有声明的完整文本、合法符号、版权日期、商标号，等等。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-434">This should include the full text of all notices, legal symbols, copyright dates, trademark numbers, and so on.</span></span> <span data-ttu-id="3a4e9-435">在英语中，此字符串应采用格式“Copyright Microsoft Corp.1990-2001”。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-435">In English, this string should be in the format "Copyright Microsoft Corp. 1990-2001".</span></span></param>
        <param name="trademark"><span data-ttu-id="3a4e9-436">描述应用于此程序集的所有商标和注册商标。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-436">Describes all trademarks and registered trademarks that apply to this assembly.</span></span> <span data-ttu-id="3a4e9-437">这包括所有声明的完整文本、合法符号、商标号，等等。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-437">This should include the full text of all notices, legal symbols, trademark numbers, and so on.</span></span> <span data-ttu-id="3a4e9-438">该字符串的英语表示形式应为“Windows is a trademark of Microsoft Corporation”。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-438">In English, this string should be in the format "Windows is a trademark of Microsoft Corporation".</span></span></param>
        <summary><span data-ttu-id="3a4e9-439">用给定的规范定义此程序集的非托管版本信息资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-439">Defines an unmanaged version information resource for this assembly with the given specifications.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-440">程序集可以与一个非托管资源相关联。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-440">An assembly can be associated with only one unmanaged resource.</span></span> <span data-ttu-id="3a4e9-441">这意味着，调用<xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A>或<xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A>后一种方法调用以前会引发 System.ArgumentException。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-441">This means that calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource%2A> or <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A> after either one of the methods was called previously will throw the System.ArgumentException.</span></span> <span data-ttu-id="3a4e9-442">需要与 Microsoft 之类的工具合并多个非托管的资源`ResMerge`实用程序 （不提供与公共语言运行时 SDK）。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-442">Multiple unmanaged resources need to be merged with a tool such as the Microsoft `ResMerge` utility (not supplied with the common language runtime SDK).</span></span>  
  
 <span data-ttu-id="3a4e9-443">空参数字符串写入为一个空格。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-443">Empty argument strings get written as a single space.</span></span> <span data-ttu-id="3a4e9-444">空格将替换为参数字符串中的 null 字符。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-444">Spaces are substituted for null characters in the argument strings.</span></span>  
  
 <span data-ttu-id="3a4e9-445">版本资源的结构包括版本、 语言和分发文件的标识的数据。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-445">The structure of the version resource includes data that identifies the version, language, and distribution of the file.</span></span> <span data-ttu-id="3a4e9-446">安装程序文件安装库 （ver.使用函数DLL) 若要从文件中检索版本信息资源，并从资源提取版本信息块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-446">Installation programs use the functions in the file installation library (VER.DLL) to retrieve the version information resource from a file and to extract the version information blocks from the resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-447">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-447">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-448">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-448">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-449">以下示例所示的使用情况`DefineVersionInfoResource`。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-449">The example below illustrates the usage of `DefineVersionInfoResource`.</span></span>  
  
 [!code-cpp[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/CPP/assemblybuilder_defineversioninforesource.cpp#1)]
 [!code-csharp[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/CS/assemblybuilder_defineversioninforesource.cs#1)]
 [!code-vb[AssemblyBuilder_DefineVersionInfoResource#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_DefineVersionInfoResource/VB/assemblybuilder_defineversioninforesource.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-450">以前定义过非托管版本信息资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-450">An unmanaged version information resource was previously defined.</span></span>  
  
<span data-ttu-id="3a4e9-451">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-451">-or-</span></span> 
<span data-ttu-id="3a4e9-452">非托管版本信息太大，无法保持。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-452">The unmanaged version information is too large to persist.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-453">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-453">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-454">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-454">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-455">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-455">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo EntryPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo EntryPoint" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EntryPoint As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ EntryPoint { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EntryPoint : System.Reflection.MethodInfo" Usage="System.Reflection.Emit.AssemblyBuilder.EntryPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a4e9-456">返回此程序集的入口点。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-456">Returns the entry point of this assembly.</span></span></summary>
        <value><span data-ttu-id="3a4e9-457">此程序集的入口点。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-457">The entry point of this assembly.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-458">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-458">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-459">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-459">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-460">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-460">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="assemblyBuilder.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="3a4e9-461">与此实例进行比较的对象，或为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-461">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="3a4e9-462">返回一个值，该值指示此实例是否与指定的对象相等。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-462">Returns a value that indicates whether this instance is equal to the specified object.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-463">如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-463"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evidence">
      <MemberSignature Language="C#" Value="public override System.Security.Policy.Evidence Evidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence Evidence" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.Evidence" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Evidence As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Policy::Evidence ^ Evidence { System::Security::Policy::Evidence ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Evidence : System.Security.Policy.Evidence" Usage="System.Reflection.Emit.AssemblyBuilder.Evidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a4e9-464">获取此程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-464">Gets the evidence for this assembly.</span></span></summary>
        <value><span data-ttu-id="3a4e9-465">此程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-465">The evidence for this assembly.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Reflection.Emit.AssemblyBuilder.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a4e9-466">获取当前动态程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-466">Gets the display name of the current dynamic assembly.</span></span></summary>
        <value><span data-ttu-id="3a4e9-467">动态程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-467">The display name of the dynamic assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-468">请参阅<xref:System.Reflection.AssemblyName>有关程序集的显示名称的格式的说明。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-468">See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a4e9-469">返回已应用于当前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 的自定义属性</span><span class="sxs-lookup"><span data-stu-id="3a4e9-469">Returns custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" /></span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="assemblyBuilder.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="3a4e9-470">对于该类型的对象，将忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-470">This argument is ignored for objects of this type.</span></span></param>
        <summary><span data-ttu-id="3a4e9-471">返回已应用于当前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 的所有自定义属性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-471">Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-472">一个包含自定义属性的数组；如果没有任何属性，该数组将为空。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-472">An array that contains the custom attributes; the array is empty if there are no attributes.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="assemblyBuilder.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="3a4e9-473">从中派生特性的基类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-473">The base type from which attributes derive.</span></span></param>
        <param name="inherit"><span data-ttu-id="3a4e9-474">对于该类型的对象，将忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-474">This argument is ignored for objects of this type.</span></span></param>
        <summary><span data-ttu-id="3a4e9-475">返回已应用于当前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 且派生自指定特性类型的所有自定义特性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-475">Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />, and that derive from a specified attribute type.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-476">包含派生自 <paramref name="attributeType" /> 中任意级别的自定义特性的数组；如果没有此类特性，则数组为空。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-476">An array that contains the custom attributes that are derived at any level from <paramref name="attributeType" />; the array is empty if there are no such attributes.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-477"><paramref name="attributeType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-477"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-478"><paramref name="attributeType" /> 不是由运行时提供的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-478"><paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime.</span></span> <span data-ttu-id="3a4e9-479">例如，<paramref name="attributeType" /> 是一个 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-479">For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributesData">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributesData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributesData () As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributesData();" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributesData : unit -&gt; System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;" Usage="assemblyBuilder.GetCustomAttributesData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a4e9-480">返回 <see cref="T:System.Reflection.CustomAttributeData" /> 对象，这些对象包含已应用到当前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 的特性的相关信息。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-480">Returns <see cref="T:System.Reflection.CustomAttributeData" /> objects that contain information about the attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-481"><see cref="T:System.Reflection.CustomAttributeData" /> 对象的泛型列表，表示已应用到当前模块的特性的相关数据。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-481">A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current module.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-482">此方法用于检查代码中的仅限反射的上下文，在其中加载到仅反射上下文的代码中定义的自定义特性本身的情况下的自定义特性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-482">Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</span></span> <span data-ttu-id="3a4e9-483">等方法<xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType>和<xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType>能在这种情况下，因为它们创建特性的实例。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-483">Methods such as <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> and <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> cannot be used in such cases, because they create instances of the attributes.</span></span> <span data-ttu-id="3a4e9-484">不能执行仅限反射上下文中的代码。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-484">Code in the reflection-only context cannot be executed.</span></span> <span data-ttu-id="3a4e9-485">有关详细信息和有关示例代码，请参阅<xref:System.Reflection.CustomAttributeData>类。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-485">For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ModuleBuilder GetDynamicModule (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ModuleBuilder GetDynamicModule(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicModule (name As String) As ModuleBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ModuleBuilder ^ GetDynamicModule(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetDynamicModule : string -&gt; System.Reflection.Emit.ModuleBuilder" Usage="assemblyBuilder.GetDynamicModule name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-486">请求的动态模块的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-486">The name of the requested dynamic module.</span></span></param>
        <summary><span data-ttu-id="3a4e9-487">返回具有指定名称的动态模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-487">Returns the dynamic module with the specified name.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-488">ModuleBuilder 对象，表示请求的动态模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-488">A ModuleBuilder object representing the requested dynamic module.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-489"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-489"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-490"><paramref name="name" /> 的长度为零。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-490">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-491">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-491">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-492">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-492">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-493">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-493">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetExportedTypes">
      <MemberSignature Language="C#" Value="public override Type[] GetExportedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetExportedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetExportedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetExportedTypes();" />
      <MemberSignature Language="F#" Value="override this.GetExportedTypes : unit -&gt; Type[]" Usage="assemblyBuilder.GetExportedTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a4e9-494">获取在此程序集中定义的导出类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-494">Gets the exported types defined in this assembly.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-495">一个 <see cref="T:System.Type" /> 数组，其中包含此程序集中定义的导出类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-495">An array of <see cref="T:System.Type" /> containing the exported types defined in this assembly.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a4e9-496">未实现此方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-496">This method is not implemented.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-497">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-497">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-498">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-498">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-499">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-499">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFile">
      <MemberSignature Language="C#" Value="public override System.IO.FileStream GetFile (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.FileStream GetFile(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFile (name As String) As FileStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IO::FileStream ^ GetFile(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetFile : string -&gt; System.IO.FileStream" Usage="assemblyBuilder.GetFile name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-500">指定文件的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-500">The name of the specified file.</span></span></param>
        <summary><span data-ttu-id="3a4e9-501">获取此程序集清单的文件表中指定文件的 <see cref="T:System.IO.FileStream" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-501">Gets a <see cref="T:System.IO.FileStream" /> for the specified file in the file table of the manifest of this assembly.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-502">为指定文件的 <see cref="T:System.IO.FileStream" />，如果找不到文件，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-502">A <see cref="T:System.IO.FileStream" /> for the specified file, or <see langword="null" />, if the file is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-503">`name` 不应包括文件的路径。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-503">`name` should not include the path to the file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a4e9-504">目前尚不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-504">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-505">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-505">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-506">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-506">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-507">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-507">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public override System.IO.FileStream[] GetFiles (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.FileStream[] GetFiles(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFiles (getResourceModules As Boolean) As FileStream()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::IO::FileStream ^&gt; ^ GetFiles(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="override this.GetFiles : bool -&gt; System.IO.FileStream[]" Usage="assemblyBuilder.GetFiles getResourceModules" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileStream[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="getResourceModules"><span data-ttu-id="3a4e9-508"><see langword="true" /> 则包括资源模块；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-508"><see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="3a4e9-509">获取程序集清单的文件表中的文件，指定是否包括资源模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-509">Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-510">一个 <see cref="T:System.IO.FileStream" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-510">An array of <see cref="T:System.IO.FileStream" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a4e9-511">目前尚不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-511">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-512">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-512">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-513">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-513">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-514">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-514">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="assemblyBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a4e9-515">返回此实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-515">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-516">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-516">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedModules">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module[] GetLoadedModules (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Module[] GetLoadedModules(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLoadedModules (getResourceModules As Boolean) As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::Module ^&gt; ^ GetLoadedModules(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="override this.GetLoadedModules : bool -&gt; System.Reflection.Module[]" Usage="assemblyBuilder.GetLoadedModules getResourceModules" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="getResourceModules"><span data-ttu-id="3a4e9-517"><see langword="true" /> 则包括资源模块；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-517"><see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="3a4e9-518">返回属于此程序集的所有已加载模块，还可以包括资源模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-518">Returns all the loaded modules that are part of this assembly, and optionally includes resource modules.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-519">属于此程序集的已加载模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-519">The loaded modules that are part of this assembly.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceInfo">
      <MemberSignature Language="C#" Value="public override System.Reflection.ManifestResourceInfo GetManifestResourceInfo (string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetManifestResourceInfo (resourceName As String) As ManifestResourceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::ManifestResourceInfo ^ GetManifestResourceInfo(System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="override this.GetManifestResourceInfo : string -&gt; System.Reflection.ManifestResourceInfo" Usage="assemblyBuilder.GetManifestResourceInfo resourceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ManifestResourceInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="resourceName"><span data-ttu-id="3a4e9-520">资源的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-520">The name of the resource.</span></span></param>
        <summary><span data-ttu-id="3a4e9-521">返回关于给定资源如何保持的信息。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-521">Returns information about how the given resource has been persisted.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-522">用关于资源拓扑的信息填充的 <see cref="T:System.Reflection.ManifestResourceInfo" />；如果未找到资源，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-522"><see cref="T:System.Reflection.ManifestResourceInfo" /> populated with information about the resource's topology, or <see langword="null" /> if the resource is not found.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a4e9-523">目前尚不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-523">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-524">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-524">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-525">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-525">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-526">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-526">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceNames">
      <MemberSignature Language="C#" Value="public override string[] GetManifestResourceNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetManifestResourceNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetManifestResourceNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetManifestResourceNames();" />
      <MemberSignature Language="F#" Value="override this.GetManifestResourceNames : unit -&gt; string[]" Usage="assemblyBuilder.GetManifestResourceNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a4e9-527">从此程序集加载指定的清单资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-527">Loads the specified manifest resource from this assembly.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-528">包含所有资源名称的 <see langword="String" /> 类型的数组。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-528">An array of type <see langword="String" /> containing the names of all the resources.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a4e9-529">在动态程序集上不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-529">This method is not supported on a dynamic assembly.</span></span> <span data-ttu-id="3a4e9-530">若要获取清单资源名称，请使用 <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-530">To get the manifest resource names, use <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-531">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-531">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-532">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-532">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-533">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-533">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetManifestResourceStream">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a4e9-534">从此程序集加载指定的清单资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-534">Loads the specified manifest resource from this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetManifestResourceStream">
      <MemberSignature Language="C#" Value="public override System.IO.Stream GetManifestResourceStream (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream GetManifestResourceStream(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetManifestResourceStream (name As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IO::Stream ^ GetManifestResourceStream(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetManifestResourceStream : string -&gt; System.IO.Stream" Usage="assemblyBuilder.GetManifestResourceStream name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-535">请求的清单资源的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-535">The name of the manifest resource being requested.</span></span></param>
        <summary><span data-ttu-id="3a4e9-536">从此程序集加载指定的清单资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-536">Loads the specified manifest resource from this assembly.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-537">表示此清单资源的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-537">A <see cref="T:System.IO.Stream" /> representing this manifest resource.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a4e9-538">目前尚不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-538">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-539">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-539">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-540">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-540">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-541">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-541">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceStream">
      <MemberSignature Language="C#" Value="public override System.IO.Stream GetManifestResourceStream (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream GetManifestResourceStream(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IO::Stream ^ GetManifestResourceStream(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetManifestResourceStream : Type * string -&gt; System.IO.Stream" Usage="assemblyBuilder.GetManifestResourceStream (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3a4e9-542">其命名空间用于确定清单资源名的范围的类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-542">The type whose namespace is used to scope the manifest resource name.</span></span></param>
        <param name="name"><span data-ttu-id="3a4e9-543">请求的清单资源的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-543">The name of the manifest resource being requested.</span></span></param>
        <summary><span data-ttu-id="3a4e9-544">从此程序集加载指定清单资源，清单资源的范围由指定类型的命名空间确定。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-544">Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-545">表示此清单资源的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-545">A <see cref="T:System.IO.Stream" /> representing this manifest resource.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-546">返回<xref:System.IO.Stream>具有它设置为资源的开头的文件指针。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-546">The returned <xref:System.IO.Stream> has its file pointer set to the beginning of the resource.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-547">如果的全名`type`是"MyNameSpace.MyClasses"和`name`是"Dot"`GetManifestResourceStream`将搜索的一个名为 MyNameSpace.Dot 资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-547">If the full name of `type` is "MyNameSpace.MyClasses" and `name` is "Dot", `GetManifestResourceStream` will search for a resource named MyNameSpace.Dot.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a4e9-548">目前尚不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-548">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-549">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-549">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-550">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-550">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-551">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-551">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/app-domains/assembly-manifest.md"><span data-ttu-id="3a4e9-552">程序集清单</span><span class="sxs-lookup"><span data-stu-id="3a4e9-552">Assembly Manifest</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetModule">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module GetModule (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Module GetModule(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetModule (name As String) As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::Module ^ GetModule(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetModule : string -&gt; System.Reflection.Module" Usage="assemblyBuilder.GetModule name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-553">请求的模块的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-553">The name of the requested module.</span></span></param>
        <summary><span data-ttu-id="3a4e9-554">获取此程序集中的指定模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-554">Gets the specified module in this assembly.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-555">所请求的模块，若未找到该模块则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-555">The module being requested, or <see langword="null" /> if the module is not found.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModules">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module[] GetModules (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Module[] GetModules(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetModules (getResourceModules As Boolean) As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::Module ^&gt; ^ GetModules(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="override this.GetModules : bool -&gt; System.Reflection.Module[]" Usage="assemblyBuilder.GetModules getResourceModules" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="getResourceModules"><span data-ttu-id="3a4e9-556"><see langword="true" /> 则包括资源模块；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-556"><see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="3a4e9-557">获取属于此程序集的所有模块，还可以包括资源模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-557">Gets all the modules that are part of this assembly, and optionally includes resource modules.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-558">属于此程序集的模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-558">The modules that are part of this assembly.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public override System.Reflection.AssemblyName GetName (bool copiedName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.AssemblyName GetName(bool copiedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetName (copiedName As Boolean) As AssemblyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::AssemblyName ^ GetName(bool copiedName);" />
      <MemberSignature Language="F#" Value="override this.GetName : bool -&gt; System.Reflection.AssemblyName" Usage="assemblyBuilder.GetName copiedName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="copiedName" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="copiedName"><span data-ttu-id="3a4e9-559">若要将基本代码设置为其被卷影复制后的程序集位置，则为 <see langword="true" />；若要将基本代码设置为原位置，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-559"><see langword="true" /> to set the code base to the location of the assembly after it is shadow-copied; <see langword="false" /> to set the code base to the original location.</span></span></param>
        <summary><span data-ttu-id="3a4e9-560">获取在创建当前动态程序集时指定的 <see cref="T:System.Reflection.AssemblyName" />，并将基本代码设置为指定代码。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-560">Gets the <see cref="T:System.Reflection.AssemblyName" /> that was specified when the current dynamic assembly was created, and sets the code base as specified.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-561">动态程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-561">The name of the dynamic assembly.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedAssemblies">
      <MemberSignature Language="C#" Value="public override System.Reflection.AssemblyName[] GetReferencedAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.AssemblyName[] GetReferencedAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetReferencedAssemblies () As AssemblyName()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::AssemblyName ^&gt; ^ GetReferencedAssemblies();" />
      <MemberSignature Language="F#" Value="override this.GetReferencedAssemblies : unit -&gt; System.Reflection.AssemblyName[]" Usage="assemblyBuilder.GetReferencedAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a4e9-562">获取由此 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 引用的程序集的 <see cref="T:System.Reflection.AssemblyName" /> 对象的不完整列表。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-562">Gets an incomplete list of <see cref="T:System.Reflection.AssemblyName" /> objects for the assemblies that are referenced by this <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-563">引用的程序集的程序集名称的数组。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-563">An array of assembly names for the referenced assemblies.</span></span> <span data-ttu-id="3a4e9-564">此数组不是完整列表。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-564">This array is not a complete list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-565">此方法不返回引用的程序集的完整列表。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-565">This method does not return a complete list of referenced assemblies.</span></span> <span data-ttu-id="3a4e9-566">例如，如果将应用到的自定义特性<xref:System.Reflection.Emit.AssemblyBuilder>，在其中定义该属性的程序集包含在此方法返回的列表。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-566">For example, if you apply a custom attribute to the <xref:System.Reflection.Emit.AssemblyBuilder>, the assembly in which the attribute was defined is included in the list returned by this method.</span></span> <span data-ttu-id="3a4e9-567">但是，如果您使用<xref:System.Type>对象来指定方法参数，则不包含类型的类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-567">However, if you use a <xref:System.Type> object to specify the type of a method parameter, that type is not included.</span></span>  
  
 <span data-ttu-id="3a4e9-568">若要获取引用的程序集的完整列表，请保存程序集，将其加载到另一个应用程序域，并调用<xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-568">To get a complete list of referenced assemblies, save the assembly, load it into another application domain, and call the <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSatelliteAssembly">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a4e9-569">获取指定的附属程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-569">Gets a specified satellite assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSatelliteAssembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSatelliteAssembly (culture As CultureInfo) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::Assembly ^ GetSatelliteAssembly(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.GetSatelliteAssembly : System.Globalization.CultureInfo -&gt; System.Reflection.Assembly" Usage="assemblyBuilder.GetSatelliteAssembly culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="3a4e9-570">指定的区域性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-570">The specified culture.</span></span></param>
        <summary><span data-ttu-id="3a4e9-571">获取指定区域性的附属程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-571">Gets the satellite assembly for the specified culture.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-572">指定的附属程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-572">The specified satellite assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-573">附属程序集包含本地化的资源，不同于主应用程序程序集，其中包含不可本地化的可执行代码和单个区域性作为默认值或非特定区域性的资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-573">Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.</span></span>  
  
 <span data-ttu-id="3a4e9-574">调用此方法以使用当前的程序集版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-574">Call this method to use your current assembly version.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-575"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-575"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="3a4e9-576">找不到该程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-576">The assembly cannot be found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="3a4e9-577">找到了具有匹配文件名的附属程序集，但 <see langword="CultureInfo" /> 与所指定的不匹配。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-577">The satellite assembly with a matching file name was found, but the <see langword="CultureInfo" /> did not match the one specified.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="3a4e9-578">附属程序集不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-578">The satellite assembly is not a valid assembly.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSatelliteAssembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture, Version version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture, class System.Version version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::Assembly ^ GetSatelliteAssembly(System::Globalization::CultureInfo ^ culture, Version ^ version);" />
      <MemberSignature Language="F#" Value="override this.GetSatelliteAssembly : System.Globalization.CultureInfo * Version -&gt; System.Reflection.Assembly" Usage="assemblyBuilder.GetSatelliteAssembly (culture, version)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="version" Type="System.Version" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="3a4e9-579">指定的区域性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-579">The specified culture.</span></span></param>
        <param name="version"><span data-ttu-id="3a4e9-580">附属程序集的版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-580">The version of the satellite assembly.</span></span></param>
        <summary><span data-ttu-id="3a4e9-581">获取指定区域性的附属程序集的指定版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-581">Gets the specified version of the satellite assembly for the specified culture.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-582">指定的附属程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-582">The specified satellite assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-583">附属程序集包含本地化的资源，不同于主应用程序程序集，其中包含不可本地化的可执行代码和单个区域性作为默认值或非特定区域性的资源。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-583">Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.</span></span>  
  
 <span data-ttu-id="3a4e9-584">调用<xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29>重载来使用你当前的程序集版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-584">Call the <xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29> overload to use your current assembly version.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-585"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-585"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="3a4e9-586">找到了具有匹配的文件名的附属程序集，但 <see langword="CultureInfo" /> 或版本与所指定的不匹配。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-586">The satellite assembly with a matching file name was found, but the <see langword="CultureInfo" /> or the version did not match the one specified.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="3a4e9-587">找不到该程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-587">The assembly cannot be found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="3a4e9-588">附属程序集不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-588">The satellite assembly is not a valid assembly.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public override Type GetType (string name, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetType(string name, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetType (name As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetType(System::String ^ name, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="override this.GetType : string * bool * bool -&gt; Type" Usage="assemblyBuilder.GetType (name, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="throwOnError" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="3a4e9-589">要搜索的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-589">The name of the type to search for.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="3a4e9-590">若要在找不到该类型时引发异常，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-590"><see langword="true" /> to throw an exception if the type is not found; otherwise, <see langword="false" />.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="3a4e9-591">若要在搜索时忽略类型名称的大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-591"><see langword="true" /> to ignore the case of the type name when searching; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="3a4e9-592">从已在当前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 中定义并创建的类型中获取指定的类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-592">Gets the specified type from the types that have been defined and created in the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-593">如果找不到或尚未创建该类型，则为指定的类型或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-593">The specified type, or <see langword="null" /> if the type is not found or has not been created yet.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-594">无法找到的类型，直到通过调用创建为止<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-594">A type cannot be found until it has been created by calling the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAssemblyCache">
      <MemberSignature Language="C#" Value="public override bool GlobalAssemblyCache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GlobalAssemblyCache" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GlobalAssemblyCache As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool GlobalAssemblyCache { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAssemblyCache : bool" Usage="System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a4e9-595">获取一个值，该值指示程序集是否是从全局程序集缓存加载的。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-595">Gets a value that indicates whether the assembly was loaded from the global assembly cache.</span></span></summary>
        <value><span data-ttu-id="3a4e9-596">总是为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-596">Always <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-597"><xref:System.Reflection.Emit.AssemblyBuilder> 对象始终表示动态程序集，并因此永远不会加载从全局程序集缓存。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-597"><xref:System.Reflection.Emit.AssemblyBuilder> objects always represent dynamic assemblies, and therefore are never loaded from the global assembly cache.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostContext">
      <MemberSignature Language="C#" Value="public override long HostContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 HostContext" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.HostContext" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HostContext As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long HostContext { long get(); };" />
      <MemberSignature Language="F#" Value="member this.HostContext : int64" Usage="System.Reflection.Emit.AssemblyBuilder.HostContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a4e9-598">获取创建动态程序集的主机上下文。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-598">Gets the host context where the dynamic assembly is being created.</span></span></summary>
        <value><span data-ttu-id="3a4e9-599">一个值，该值指示创建动态程序集的主机上下文。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-599">A value that indicates the host context where the dynamic assembly is being created.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageRuntimeVersion">
      <MemberSignature Language="C#" Value="public override string ImageRuntimeVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageRuntimeVersion" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ImageRuntimeVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ImageRuntimeVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ImageRuntimeVersion : string" Usage="System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a4e9-600">获取将在包含清单的文件中保存的公共语言运行时的版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-600">Gets the version of the common language runtime that will be saved in the file containing the manifest.</span></span></summary>
        <value><span data-ttu-id="3a4e9-601">表示公共语言运行时版本的字符串。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-601">A string representing the common language runtime version.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-602">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-602">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-603">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-603">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-604">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-604">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="assemblyBuilder.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="3a4e9-605">要测试的特性的类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-605">The type of attribute to test for.</span></span></param>
        <param name="inherit"><span data-ttu-id="3a4e9-606">对于该类型的对象，将忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-606">This argument is ignored for objects of this type.</span></span></param>
        <summary><span data-ttu-id="3a4e9-607">返回一个值，该值指示是否将指定特性类型的一个或多个实例应用于此成员。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-607">Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.</span></span></summary>
        <returns><span data-ttu-id="3a4e9-608">如果一个或多个 <paramref name="attributeType" /> 的实例应用于此动态程序集，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-608"><see langword="true" /> if one or more instances of <paramref name="attributeType" /> is applied to this dynamic assembly; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDynamic">
      <MemberSignature Language="C#" Value="public override bool IsDynamic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDynamic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDynamic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDynamic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDynamic : bool" Usage="System.Reflection.Emit.AssemblyBuilder.IsDynamic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a4e9-609">获取一个值，该值指示当前程序集是动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-609">Gets a value that indicates that the current assembly is a dynamic assembly.</span></span></summary>
        <value><span data-ttu-id="3a4e9-610">总是为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-610">Always <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-611"><xref:System.Reflection.Emit.AssemblyBuilder>对象始终表示动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-611">An <xref:System.Reflection.Emit.AssemblyBuilder> object always represents a dynamic assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public override string Location { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Location" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.Location" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Location As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Location { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Location : string" Usage="System.Reflection.Emit.AssemblyBuilder.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a4e9-612">如果包含清单的已加载文件未被影像复制，获取该文件的位置（基本代码的格式）。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-612">Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied.</span></span></summary>
        <value><span data-ttu-id="3a4e9-613">包含清单的已加载文件的位置。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-613">The location of the loaded file that contains the manifest.</span></span> <span data-ttu-id="3a4e9-614">如果已加载文件已被影像复制，则 <see langword="Location" /> 是文件在影像复制前的位置。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-614">If the loaded file has been shadow-copied, the <see langword="Location" /> is that of the file before being shadow-copied.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a4e9-615">目前尚不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-615">This method is not currently supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-616">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-616">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-617">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-617">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-618">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-618">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ManifestModule">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module ManifestModule { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module ManifestModule" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ManifestModule As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ ManifestModule { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ManifestModule : System.Reflection.Module" Usage="System.Reflection.Emit.AssemblyBuilder.ManifestModule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a4e9-619">获取包含程序集清单的当前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 中的模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-619">Gets the module in the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> that contains the assembly manifest.</span></span></summary>
        <value><span data-ttu-id="3a4e9-620">清单模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-620">The manifest module.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modules">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;System.Reflection.Module&gt; Modules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Module&gt; Modules" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.Modules" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Modules As IEnumerable(Of Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::Module ^&gt; ^ Modules { System::Collections::Generic::IEnumerable&lt;System::Reflection::Module ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Modules : seq&lt;System.Reflection.Module&gt;" Usage="System.Reflection.Emit.AssemblyBuilder.Modules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Module&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PermissionSet">
      <MemberSignature Language="C#" Value="public override System.Security.PermissionSet PermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet PermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.PermissionSet" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::PermissionSet ^ PermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PermissionSet : System.Security.PermissionSet" Usage="System.Reflection.Emit.AssemblyBuilder.PermissionSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a4e9-621">获取当前动态程序集的授予集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-621">Gets the grant set of the current dynamic assembly.</span></span></summary>
        <value><span data-ttu-id="3a4e9-622">当前动态程序集的授予集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-622">The grant set of the current dynamic assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-623"><xref:System.Security.PermissionSet> 对象可以包含敏感信息，例如路径。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-623"><xref:System.Security.PermissionSet> objects can contain sensitive information such as paths.</span></span> <span data-ttu-id="3a4e9-624">因此，若要访问这些对象，需要进行完全信任。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-624">Therefore, full trust is required to access these objects.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="3a4e9-625">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-625">requires full trust for the immediate caller.</span></span> <span data-ttu-id="3a4e9-626">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-626">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnly">
      <MemberSignature Language="C#" Value="public override bool ReflectionOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReflectionOnly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectionOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ReflectionOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectionOnly : bool" Usage="System.Reflection.Emit.AssemblyBuilder.ReflectionOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a4e9-627">获取一个值，该值指示动态程序集是否位于仅反射的上下文中。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-627">Gets a value indicating whether the dynamic assembly is in the reflection-only context.</span></span></summary>
        <value><span data-ttu-id="3a4e9-628">如果动态程序集位于仅反射的上下文中，则此值为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-628"><see langword="true" /> if the dynamic assembly is in the reflection-only context; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-629">若要发出动态程序集仅反射上下文中的，指定<xref:System.Reflection.Emit.AssemblyBuilderAccess.ReflectionOnly?displayProperty=nameWithType>当你创建<xref:System.Reflection.Emit.AssemblyBuilder>。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-629">To emit a dynamic assembly in the reflection-only context, specify <xref:System.Reflection.Emit.AssemblyBuilderAccess.ReflectionOnly?displayProperty=nameWithType> when you create the <xref:System.Reflection.Emit.AssemblyBuilder>.</span></span> <span data-ttu-id="3a4e9-630">如果仅反射上下文中发出动态程序集，无法执行其代码。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-630">If a dynamic assembly is emitted in the reflection-only context, its code cannot be executed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-631">动态程序集保存到磁盘后，可以使用<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>方法已完成的程序集加载到仅反射上下文。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-631">After you have saved a dynamic assembly to disk, you can use the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType> method to load the completed assembly into the reflection-only context.</span></span> <span data-ttu-id="3a4e9-632">但是，不再可以修改程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-632">However, the assembly can no longer be modified.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Reflection.Emit.AssemblyBuilderAccess.ReflectionOnly" />
        <altmember cref="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.String)" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md"><span data-ttu-id="3a4e9-633">如何：将程序集加载到仅反射上下文中</span><span class="sxs-lookup"><span data-stu-id="3a4e9-633">How to: Load Assemblies into the Reflection-Only Context</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a4e9-634">将此动态程序集保存到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-634">Saves this dynamic assembly to disk.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string assemblyFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string assemblyFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (assemblyFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ assemblyFileName);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="assemblyBuilder.Save assemblyFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFileName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="assemblyFileName"><span data-ttu-id="3a4e9-635">程序集的文件名。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-635">The file name of the assembly.</span></span></param>
        <summary><span data-ttu-id="3a4e9-636">将此动态程序集保存到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-636">Saves this dynamic assembly to disk.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-637">此方法将保存在此动态程序集中定义的所有非瞬态动态模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-637">This method saves all non-transient dynamic modules defined in this dynamic assembly.</span></span> <span data-ttu-id="3a4e9-638">瞬态动态模块不会保存。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-638">Transient dynamic modules are not saved.</span></span> <span data-ttu-id="3a4e9-639">程序集文件名称可以是一个模块的名称相同。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-639">The assembly file name can be the same as the name of one of the modules.</span></span> <span data-ttu-id="3a4e9-640">如果是这样，程序集清单将存储在该模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-640">If so, the assembly manifest is stored within that module.</span></span> <span data-ttu-id="3a4e9-641">`assemblyFileName` 可以从所有程序集内包含的模块的名称不同。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-641">`assemblyFileName` can be different from the names of all of the modules contained within the assembly.</span></span> <span data-ttu-id="3a4e9-642">如果是这样，程序集文件将包含仅在程序集清单。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-642">If so, the assembly file contains only the assembly manifest.</span></span>  
  
 <span data-ttu-id="3a4e9-643">每个<xref:System.Resources.ResourceWriter>使用获取<xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>，此方法将.resources 文件和调用写入<xref:System.Resources.ResourceWriter.Close%2A>关闭该流。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-643">For each <xref:System.Resources.ResourceWriter> obtained using <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, this method writes the .resources file and calls <xref:System.Resources.ResourceWriter.Close%2A> to close the stream.</span></span>  
  
 <span data-ttu-id="3a4e9-644">`assemblyFileName`必须是一个简单文件名缺少驱动器或目录的组件。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-644">The `assemblyFileName` needs to be a simple file name without a drive or directory component.</span></span> <span data-ttu-id="3a4e9-645">若要在特定的目录中创建程序集，使用之一<xref:System.AppDomain.DefineDynamicAssembly%2A>采用目标目录参数的方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-645">To create an assembly in a specific directory, use one of the <xref:System.AppDomain.DefineDynamicAssembly%2A> methods that takes a target directory argument.</span></span>  
  
 <span data-ttu-id="3a4e9-646">在.NET Framework 2.0 版中，此重载<xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>方法等效于调用<xref:System.Reflection.Emit.AssemblyBuilder.Save%28System.String%2CSystem.Reflection.PortableExecutableKinds%2CSystem.Reflection.ImageFileMachine%29>方法的重载<xref:System.Reflection.PortableExecutableKinds.ILOnly>有关`portableExecutableKind`参数和<xref:System.Reflection.ImageFileMachine.I386>为`imageFileMachine`参数。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-646">In the .NET Framework version 2.0, this overload of the <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A> method is equivalent to calling the <xref:System.Reflection.Emit.AssemblyBuilder.Save%28System.String%2CSystem.Reflection.PortableExecutableKinds%2CSystem.Reflection.ImageFileMachine%29> method overload with <xref:System.Reflection.PortableExecutableKinds.ILOnly> for the `portableExecutableKind` parameter and <xref:System.Reflection.ImageFileMachine.I386> for the `imageFileMachine` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-647">下面的代码示例创建动态程序集，然后将其保存到本地磁盘使用`Save`。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-647">The following code sample creates a dynamic assembly and then persists it to a local disk using `Save`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.AssemblyBuilder.Save Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.Save Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.AssemblyBuilder.Save Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.Save Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.AssemblyBuilder.Save Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.AssemblyBuilder.Save Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-648"><paramref name="assemblyFileName" /> 的长度为 0。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-648">The length of <paramref name="assemblyFileName" /> is 0.</span></span>  
  
<span data-ttu-id="3a4e9-649">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-649">-or-</span></span> 
<span data-ttu-id="3a4e9-650">程序集中有两个或更多的模块资源文件具有相同的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-650">There are two or more modules resource files in the assembly with the same name.</span></span>  
  
<span data-ttu-id="3a4e9-651">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-651">-or-</span></span> 
<span data-ttu-id="3a4e9-652">程序集的目标目录无效。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-652">The target directory of the assembly is invalid.</span></span>  
  
<span data-ttu-id="3a4e9-653">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-653">-or-</span></span> 
 <span data-ttu-id="3a4e9-654"><paramref name="assemblyFileName" /> 不是简单的文件名（例如，具有目录或驱动器组件），或者此程序集中定义了多个非托管资源（包括版本信息资源）。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-654"><paramref name="assemblyFileName" /> is not a simple file name (for example, has a directory or drive component), or more than one unmanaged resource, including a version information resource, was defined in this assembly.</span></span>  
  
<span data-ttu-id="3a4e9-655">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-655">-or-</span></span> 
<span data-ttu-id="3a4e9-656"><see cref="T:System.Reflection.AssemblyCultureAttribute" /> 中的 <see langword="CultureInfo" /> 字符串不是有效字符串，并且在调用此方法之前调用了 <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-656">The <see langword="CultureInfo" /> string in <see cref="T:System.Reflection.AssemblyCultureAttribute" /> is not a valid string and <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" /> was called prior to calling this method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-657"><paramref name="assemblyFileName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-657"><paramref name="assemblyFileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3a4e9-658">以前已保存过此程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-658">This assembly has been saved before.</span></span>  
  
<span data-ttu-id="3a4e9-659">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-659">-or-</span></span> 
<span data-ttu-id="3a4e9-660">此程序集具有访问 <see langword="Run" /><see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /> 的权限</span><span class="sxs-lookup"><span data-stu-id="3a4e9-660">This assembly has access <see langword="Run" /><see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /></span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="3a4e9-661">在保存期间发生输出错误。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-661">An output error occurs during the save.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a4e9-662">还没有为要写入磁盘的程序集的模块中的任何类型调用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-662"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has not been called for any of the types in the modules of the assembly to be written to disk.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="3a4e9-663">编写 = true 或追加 = true 才可将此程序集保存到指定的文件名。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-663">Write = true or Append = true is needed to save this assembly to the specified file name.</span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-664">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-664">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-665">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-665">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string assemblyFileName, System.Reflection.PortableExecutableKinds portableExecutableKind, System.Reflection.ImageFileMachine imageFileMachine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string assemblyFileName, valuetype System.Reflection.PortableExecutableKinds portableExecutableKind, valuetype System.Reflection.ImageFileMachine imageFileMachine) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.Save(System.String,System.Reflection.PortableExecutableKinds,System.Reflection.ImageFileMachine)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ assemblyFileName, System::Reflection::PortableExecutableKinds portableExecutableKind, System::Reflection::ImageFileMachine imageFileMachine);" />
      <MemberSignature Language="F#" Value="member this.Save : string * System.Reflection.PortableExecutableKinds * System.Reflection.ImageFileMachine -&gt; unit" Usage="assemblyBuilder.Save (assemblyFileName, portableExecutableKind, imageFileMachine)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFileName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="portableExecutableKind" Type="System.Reflection.PortableExecutableKinds" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="imageFileMachine" Type="System.Reflection.ImageFileMachine" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="assemblyFileName"><span data-ttu-id="3a4e9-666">程序集的文件名。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-666">The file name of the assembly.</span></span></param>
        <param name="portableExecutableKind"><span data-ttu-id="3a4e9-667"><see cref="T:System.Reflection.PortableExecutableKinds" /> 值的按位组合，用于指定代码的性质。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-667">A bitwise combination of the <see cref="T:System.Reflection.PortableExecutableKinds" /> values that specifies the nature of the code.</span></span></param>
        <param name="imageFileMachine"><span data-ttu-id="3a4e9-668"><see cref="T:System.Reflection.ImageFileMachine" /> 值之一，用于指定目标平台。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-668">One of the <see cref="T:System.Reflection.ImageFileMachine" /> values that specifies the target platform.</span></span></param>
        <summary><span data-ttu-id="3a4e9-669">将此动态程序集保存到磁盘中，在程序集可执行文件和目标平台中指定代码的特性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-669">Saves this dynamic assembly to disk, specifying the nature of code in the assembly's executables and the target platform.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-670">如果`imageFileMachine`并`portableExecutableKind`不兼容，`imageFileMachine`将优先于`portableExecutableKind`。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-670">If `imageFileMachine` and `portableExecutableKind` are incompatible, `imageFileMachine` takes precedence over `portableExecutableKind`.</span></span> <span data-ttu-id="3a4e9-671">不引发异常。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-671">No exception is thrown.</span></span> <span data-ttu-id="3a4e9-672">例如，如果您指定<xref:System.Reflection.ImageFileMachine.I386?displayProperty=nameWithType>与<xref:System.Reflection.PortableExecutableKinds.PE32Plus?displayProperty=nameWithType>，<xref:System.Reflection.PortableExecutableKinds.PE32Plus?displayProperty=nameWithType>将被忽略。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-672">For example, if you specify <xref:System.Reflection.ImageFileMachine.I386?displayProperty=nameWithType> with <xref:System.Reflection.PortableExecutableKinds.PE32Plus?displayProperty=nameWithType>, <xref:System.Reflection.PortableExecutableKinds.PE32Plus?displayProperty=nameWithType> is ignored.</span></span>  
  
 <span data-ttu-id="3a4e9-673">此方法将保存在此动态程序集中定义的所有非瞬态动态模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-673">This method saves all non-transient dynamic modules defined in this dynamic assembly.</span></span> <span data-ttu-id="3a4e9-674">瞬态动态模块不会保存。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-674">Transient dynamic modules are not saved.</span></span> <span data-ttu-id="3a4e9-675">程序集文件名称可以是一个模块的名称相同。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-675">The assembly file name can be the same as the name of one of the module.</span></span> <span data-ttu-id="3a4e9-676">如果是这样，程序集清单将存储在该模块。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-676">If so, the assembly manifest is stored within that module.</span></span> <span data-ttu-id="3a4e9-677">`assemblyFileName` 可以从所有程序集内包含的模块的名称不同。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-677">`assemblyFileName` can be different from the names of all of the modules contained within the assembly.</span></span> <span data-ttu-id="3a4e9-678">如果是这样，程序集文件将包含仅在程序集清单。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-678">If so, the assembly file contains only the assembly manifest.</span></span>  
  
 <span data-ttu-id="3a4e9-679">每个<xref:System.Resources.ResourceWriter>使用获取<xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>，此方法将.resources 文件和调用写入<xref:System.Resources.ResourceWriter.Close%2A>关闭该流。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-679">For each <xref:System.Resources.ResourceWriter> obtained using <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, this method writes the .resources file and calls <xref:System.Resources.ResourceWriter.Close%2A> to close the stream.</span></span>  
  
 <span data-ttu-id="3a4e9-680">`assemblyFileName`必须是一个简单文件名缺少驱动器或目录的组件。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-680">The `assemblyFileName` needs to be a simple file name without a drive or directory component.</span></span> <span data-ttu-id="3a4e9-681">若要在特定的目录中创建程序集，使用之一<xref:System.AppDomain.DefineDynamicAssembly%2A>采用目标目录参数的方法。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-681">To create an assembly in a specific directory, use one of the <xref:System.AppDomain.DefineDynamicAssembly%2A> methods that takes a target directory argument.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-682"><paramref name="assemblyFileName" /> 的长度为 0。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-682">The length of <paramref name="assemblyFileName" /> is 0.</span></span>  
  
<span data-ttu-id="3a4e9-683">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-683">-or-</span></span> 
<span data-ttu-id="3a4e9-684">程序集中有两个或更多的模块资源文件具有相同的名称。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-684">There are two or more modules resource files in the assembly with the same name.</span></span>  
  
<span data-ttu-id="3a4e9-685">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-685">-or-</span></span> 
<span data-ttu-id="3a4e9-686">程序集的目标目录无效。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-686">The target directory of the assembly is invalid.</span></span>  
  
<span data-ttu-id="3a4e9-687">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-687">-or-</span></span> 
 <span data-ttu-id="3a4e9-688"><paramref name="assemblyFileName" /> 不是简单的文件名（例如，具有目录或驱动器组件），或者此程序集中定义了多个非托管资源（包括版本信息资源）。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-688"><paramref name="assemblyFileName" /> is not a simple file name (for example, has a directory or drive component), or more than one unmanaged resource, including a version information resources, was defined in this assembly.</span></span>  
  
<span data-ttu-id="3a4e9-689">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-689">-or-</span></span> 
<span data-ttu-id="3a4e9-690"><see cref="T:System.Reflection.AssemblyCultureAttribute" /> 中的 <see langword="CultureInfo" /> 字符串不是有效字符串，并且在调用此方法之前调用了 <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-690">The <see langword="CultureInfo" /> string in <see cref="T:System.Reflection.AssemblyCultureAttribute" /> is not a valid string and <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" /> was called prior to calling this method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-691"><paramref name="assemblyFileName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-691"><paramref name="assemblyFileName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3a4e9-692">以前已保存过此程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-692">This assembly has been saved before.</span></span>  
  
<span data-ttu-id="3a4e9-693">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3a4e9-693">-or-</span></span> 
<span data-ttu-id="3a4e9-694">此程序集具有访问 <see langword="Run" /><see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /> 的权限</span><span class="sxs-lookup"><span data-stu-id="3a4e9-694">This assembly has access <see langword="Run" /><see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /></span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="3a4e9-695">在保存期间发生输出错误。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-695">An output error occurs during the save.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3a4e9-696">还没有为要写入磁盘的程序集的模块中的任何类型调用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-696"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has not been called for any of the types in the modules of the assembly to be written to disk.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="3a4e9-697">编写 = true 或追加 = true 才可将此程序集保存到指定的文件名。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-697">Write = true or Append = true is needed to save this assembly to the specified file name.</span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-698">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-698">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-699">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-699">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SecurityRuleSet">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityRuleSet SecurityRuleSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.SecurityRuleSet SecurityRuleSet" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.AssemblyBuilder.SecurityRuleSet" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SecurityRuleSet As SecurityRuleSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::SecurityRuleSet SecurityRuleSet { System::Security::SecurityRuleSet get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityRuleSet : System.Security.SecurityRuleSet" Usage="System.Reflection.Emit.AssemblyBuilder.SecurityRuleSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityRuleSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a4e9-700">获取一个值，该值指示公共语言运行时 (CLR) 对此程序集强制执行的安全规则集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-700">Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.</span></span></summary>
        <value><span data-ttu-id="3a4e9-701">CLR 对该动态程序集强制执行的安全规则集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-701">The security rule set that the CLR enforces for this dynamic assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-702">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]始终强制 2 级透明度 (<xref:System.Security.SecurityRuleSet.Level2?displayProperty=nameWithType>) 生成的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-702">The [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] always enforces level 2 transparency (<xref:System.Security.SecurityRuleSet.Level2?displayProperty=nameWithType>) for the dynamic assemblies it generates.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCustomAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a4e9-703">在此程序集上设置自定义属性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-703">Sets a custom attribute on this assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (customBuilder As CustomAttributeBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::Emit::CustomAttributeBuilder ^ customBuilder);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.Emit.CustomAttributeBuilder -&gt; unit" Usage="assemblyBuilder.SetCustomAttribute customBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customBuilder" Type="System.Reflection.Emit.CustomAttributeBuilder" />
      </Parameters>
      <Docs>
        <param name="customBuilder"><span data-ttu-id="3a4e9-704">用于定义自定义属性的帮助程序类的一个实例。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-704">An instance of a helper class to define the custom attribute.</span></span></param>
        <summary><span data-ttu-id="3a4e9-705">使用自定义特性生成器设置此程序集的自定义特性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-705">Set a custom attribute on this assembly using a custom attribute builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-706"><xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> 不能用于设置声明性安全特性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-706"><xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> cannot be used to set declarative security attributes.</span></span> <span data-ttu-id="3a4e9-707">使用的重载之一<xref:System.AppDomain.DefineDynamicAssembly%2A>采用必需的可选的并被拒绝的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-707">Use one of the overloads of <xref:System.AppDomain.DefineDynamicAssembly%2A> that takes required, optional, and refused permissions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-708">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-708">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-709">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-709">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-710">下面的代码示例演示如何使用`SetCustomAttribute`内<xref:System.Reflection.Emit.AssemblyBuilder>，并使用<xref:System.Reflection.Emit.CustomAttributeBuilder>。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-710">The following code sample illustrates the use of `SetCustomAttribute` within <xref:System.Reflection.Emit.AssemblyBuilder>, using a <xref:System.Reflection.Emit.CustomAttributeBuilder>.</span></span>  
  
 [!code-cpp[AssemblyBuilder_SetCustomAttribute1#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute1/CPP/assemblybuilder_setcustomattribute1.cpp#1)]
 [!code-csharp[AssemblyBuilder_SetCustomAttribute1#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute1/CS/assemblybuilder_setcustomattribute1.cs#1)]
 [!code-vb[AssemblyBuilder_SetCustomAttribute1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute1/VB/assemblybuilder_setcustomattribute1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-711"><paramref name="con" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-711"><paramref name="con" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-712">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-712">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-713">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-713">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-714">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-714">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, unsigned int8[] binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (con As ConstructorInfo, binaryAttribute As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::ConstructorInfo ^ con, cli::array &lt;System::Byte&gt; ^ binaryAttribute);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.ConstructorInfo * byte[] -&gt; unit" Usage="assemblyBuilder.SetCustomAttribute (con, binaryAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binaryAttribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="con"><span data-ttu-id="3a4e9-715">自定义属性的构造函数。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-715">The constructor for the custom attribute.</span></span></param>
        <param name="binaryAttribute"><span data-ttu-id="3a4e9-716">表示属性的字节 blob。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-716">A byte blob representing the attributes.</span></span></param>
        <summary><span data-ttu-id="3a4e9-717">使用指定的自定义特性 Blob 设置此程序集上的自定义特性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-717">Set a custom attribute on this assembly using a specified custom attribute blob.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-718">有关如何设置格式，请参阅 ECMA 第 II 文档有关的详细信息中的元数据规范`binaryAttribute`。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-718">See the metadata specification in the ECMA Partition II documentation for details on how to format `binaryAttribute`.</span></span> <span data-ttu-id="3a4e9-719">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](https://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-719">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="3a4e9-720">`RuntimeConstructorInfo` 是由系统生成的一种特殊类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-720">`RuntimeConstructorInfo` is a special type generated by the system.</span></span> <span data-ttu-id="3a4e9-721">它派生<xref:System.Reflection.ConstructorInfo>类，以及任何<xref:System.Reflection.ConstructorInfo>通过反射获取的对象是实际的实例`RuntimeConstructorInfo`。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-721">It derives from the <xref:System.Reflection.ConstructorInfo> class, and any <xref:System.Reflection.ConstructorInfo> object you obtain through reflection is actually an instance of `RuntimeConstructorInfo`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-722"><xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> 不能用于设置声明性安全特性。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-722"><xref:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute%2A> cannot be used to set declarative security attributes.</span></span> <span data-ttu-id="3a4e9-723">使用的重载之一<xref:System.AppDomain.DefineDynamicAssembly%2A>采用必需的可选的并被拒绝的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-723">Use one of the overloads of <xref:System.AppDomain.DefineDynamicAssembly%2A> that takes required, optional, and refused permissions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-724">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-724">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-725">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-725">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a4e9-726">下面的代码示例演示如何使用`SetCustomAttribute`将自定义特性附加到动态生成的程序集。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-726">The following code sample illustrates the use of `SetCustomAttribute` to attach a custom attribute to a dynamically generated assembly.</span></span>  
  
 [!code-cpp[AssemblyBuilder_SetCustomAttribute2#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute2/CPP/assemblybuilder_setcustomattribute2.cpp#1)]
 [!code-csharp[AssemblyBuilder_SetCustomAttribute2#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute2/CS/assemblybuilder_setcustomattribute2.cs#1)]
 [!code-vb[AssemblyBuilder_SetCustomAttribute2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilder_SetCustomAttribute2/VB/assemblybuilder_setcustomattribute2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-727"><paramref name="con" /> 或 <paramref name="binaryAttribute" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-727"><paramref name="con" /> or <paramref name="binaryAttribute" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-728">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-728">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3a4e9-729"><paramref name="con" /> 不是 <see langword="RuntimeConstructorInfo" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-729"><paramref name="con" /> is not a <see langword="RuntimeConstructorInfo" /> object.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-730">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-730">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-731">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-731">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetEntryPoint">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a4e9-732">设置此动态程序集的入口点。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-732">Sets the entry point for this dynamic assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetEntryPoint">
      <MemberSignature Language="C#" Value="public void SetEntryPoint (System.Reflection.MethodInfo entryMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEntryPoint(class System.Reflection.MethodInfo entryMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetEntryPoint (entryMethod As MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetEntryPoint(System::Reflection::MethodInfo ^ entryMethod);" />
      <MemberSignature Language="F#" Value="member this.SetEntryPoint : System.Reflection.MethodInfo -&gt; unit" Usage="assemblyBuilder.SetEntryPoint entryMethod" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryMethod" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="entryMethod"><span data-ttu-id="3a4e9-733">对表示此动态程序集入口点的方法的引用。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-733">A reference to the method that represents the entry point for this dynamic assembly.</span></span></param>
        <summary><span data-ttu-id="3a4e9-734">设置此动态程序集的入口点，假设正在生成控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-734">Sets the entry point for this dynamic assembly, assuming that a console application is being built.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-735"><paramref name="entryMethod" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-735"><paramref name="entryMethod" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3a4e9-736"><paramref name="entryMethod" /> 不包含在此程序集内。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-736"><paramref name="entryMethod" /> is not contained within this assembly.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-737">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-737">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-738">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-738">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-739">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-739">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetEntryPoint">
      <MemberSignature Language="C#" Value="public void SetEntryPoint (System.Reflection.MethodInfo entryMethod, System.Reflection.Emit.PEFileKinds fileKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEntryPoint(class System.Reflection.MethodInfo entryMethod, valuetype System.Reflection.Emit.PEFileKinds fileKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo,System.Reflection.Emit.PEFileKinds)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetEntryPoint (entryMethod As MethodInfo, fileKind As PEFileKinds)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetEntryPoint(System::Reflection::MethodInfo ^ entryMethod, System::Reflection::Emit::PEFileKinds fileKind);" />
      <MemberSignature Language="F#" Value="member this.SetEntryPoint : System.Reflection.MethodInfo * System.Reflection.Emit.PEFileKinds -&gt; unit" Usage="assemblyBuilder.SetEntryPoint (entryMethod, fileKind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryMethod" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="fileKind" Type="System.Reflection.Emit.PEFileKinds" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="entryMethod"><span data-ttu-id="3a4e9-740">对表示此动态程序集入口点的方法的引用。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-740">A reference to the method that represents the entry point for this dynamic assembly.</span></span></param>
        <param name="fileKind"><span data-ttu-id="3a4e9-741">正在生成的程序集可执行文件的类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-741">The type of the assembly executable being built.</span></span></param>
        <summary><span data-ttu-id="3a4e9-742">设置此程序集的入口点并定义正在构建的可移植执行文件（PE 文件）的类型。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-742">Sets the entry point for this assembly and defines the type of the portable executable (PE file) being built.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3a4e9-743">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-743">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="3a4e9-744">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-744">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a4e9-745"><paramref name="entryMethod" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-745"><paramref name="entryMethod" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3a4e9-746"><paramref name="entryMethod" /> 不包含在此程序集内。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-746"><paramref name="entryMethod" /> is not contained within this assembly.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="3a4e9-747">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-747">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3a4e9-748">当调用后期绑定机制通过如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-748">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="3a4e9-749">关联枚举：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-749">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _AssemblyBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _AssemblyBuilder.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_AssemblyBuilder::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="rgszNames" Type="System.IntPtr" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="cNames" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="rgDispId" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="3a4e9-750">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-750">Reserved for future use.</span></span> <span data-ttu-id="3a4e9-751">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-751">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="3a4e9-752">要映射的名称的传入数组。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-752">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="3a4e9-753">要映射的名称的计数。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-753">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="3a4e9-754">要在其中解释名称的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-754">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="3a4e9-755">调用方分配的数组，用于接收与名称对应的 ID。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-755">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="3a4e9-756">将一组名称映射为对应的一组调度标识符。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-756">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-757">此方法用于访问托管类到从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-757">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="3a4e9-758">有关详细信息`IDispatch::GetIDsOfNames`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-758">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="3a4e9-759">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-759">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _AssemblyBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _AssemblyBuilder.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_AssemblyBuilder::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="3a4e9-760">要返回的类型信息。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-760">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="3a4e9-761">类型信息的区域设置标识符。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-761">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="3a4e9-762">接收一个指针，指向请求的类型信息对象。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-762">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="3a4e9-763">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-763">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-764">此方法用于访问托管类到从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-764">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="3a4e9-765">有关详细信息`IDispatch::GetTypeInfo`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-765">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="3a4e9-766">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-766">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _AssemblyBuilder.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _AssemblyBuilder.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_AssemblyBuilder::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="3a4e9-767">指向一个位置，该位置接收对象提供的类型信息接口的数量。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-767">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="3a4e9-768">检索对象提供的类型信息接口的数量（0 或 1）。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-768">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-769">此方法用于访问托管类到从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-769">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="3a4e9-770">有关详细信息`IDispatch::GetTypeInfoCount`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-770">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="3a4e9-771">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-771">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._AssemblyBuilder.Invoke">
      <MemberSignature Language="C#" Value="void _AssemblyBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._AssemblyBuilder.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _AssemblyBuilder.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._AssemblyBuilder.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_AssemblyBuilder::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._AssemblyBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="wFlags" Type="System.Int16" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="pDispParams" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="pVarResult" Type="System.IntPtr" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" Index="6" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="puArgErr" Type="System.IntPtr" Index="7" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="3a4e9-772">标识成员。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-772">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="3a4e9-773">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-773">Reserved for future use.</span></span> <span data-ttu-id="3a4e9-774">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-774">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="3a4e9-775">要在其中解释自变量的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-775">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="3a4e9-776">描述调用的上下文的标志。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-776">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="3a4e9-777">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组中元素数的计数。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-777">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="3a4e9-778">指向要存储结果的位置的指针。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-778">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="3a4e9-779">指向一个包含异常信息的结构的指针。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-779">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="3a4e9-780">第一个出错参数的索引。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-780">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="3a4e9-781">提供对某一对象公开的属性和方法的访问。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-781">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a4e9-782">此方法用于访问托管类到从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-782">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="3a4e9-783">有关详细信息`IDispatch::Invoke`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-783">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="3a4e9-784">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span><span class="sxs-lookup"><span data-stu-id="3a4e9-784">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>