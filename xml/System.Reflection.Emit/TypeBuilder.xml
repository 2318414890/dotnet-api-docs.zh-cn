<Type Name="TypeBuilder" FullName="System.Reflection.Emit.TypeBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0a3d455de9bd4fc2bafe3221ec13aeb7bd4ade87" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TypeBuilder : System.Reflection.TypeInfo, System.Runtime.InteropServices._TypeBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit TypeBuilder extends System.Reflection.TypeInfo implements class System.Runtime.InteropServices._TypeBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.TypeBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeBuilder&#xA;Inherits TypeInfo&#xA;Implements _TypeBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeBuilder sealed : System::Reflection::TypeInfo, System::Runtime::InteropServices::_TypeBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.TypeInfo</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-2.0">System.Type</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._TypeBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._TypeBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="16598-101">在运行时定义并创建类的新实例。</span>
      <span class="sxs-lookup">
        <span data-stu-id="16598-101">Defines and creates new instances of classes during run time.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-102"><xref:System.Reflection.Emit.TypeBuilder> 用于控制运行时中的动态类创建根类。</span><span class="sxs-lookup"><span data-stu-id="16598-102"><xref:System.Reflection.Emit.TypeBuilder> is the root class used to control the creation of dynamic classes in the runtime.</span></span> <span data-ttu-id="16598-103">它提供一组用于定义类，添加方法和字段，并创建在模块内的类的例程。</span><span class="sxs-lookup"><span data-stu-id="16598-103">It provides a set of routines that are used to define classes, add methods and fields, and create the class inside a module.</span></span> <span data-ttu-id="16598-104">一个新<xref:System.Reflection.Emit.TypeBuilder>可以通过调用从动态模块创建<xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=nameWithType>方法，它返回<xref:System.Reflection.Emit.TypeBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="16598-104">A new <xref:System.Reflection.Emit.TypeBuilder> can be created from a dynamic module by calling the <xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=nameWithType> method, which returns a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="16598-105">反射发出提供用于定义类型的以下选项：</span><span class="sxs-lookup"><span data-stu-id="16598-105">Reflection emit provides the following options for defining types:</span></span>  
  
-   <span data-ttu-id="16598-106">定义类或具有给定名称的接口。</span><span class="sxs-lookup"><span data-stu-id="16598-106">Define a class or interface with the given name.</span></span>  
  
-   <span data-ttu-id="16598-107">定义类或具有给定名称和属性的接口。</span><span class="sxs-lookup"><span data-stu-id="16598-107">Define a class or interface with the given name and attributes.</span></span>  
  
-   <span data-ttu-id="16598-108">定义具有给定名称、 属性和基类的类。</span><span class="sxs-lookup"><span data-stu-id="16598-108">Define a class with the given name, attributes, and base class.</span></span>  
  
-   <span data-ttu-id="16598-109">定义具有给定名称、 属性、 基本类、 和的类实现的接口集的类。</span><span class="sxs-lookup"><span data-stu-id="16598-109">Define a class with the given name, attributes, base class, and the set of interfaces that the class implements.</span></span>  
  
-   <span data-ttu-id="16598-110">定义具有给定名称、 特性、 基类和封装大小的类。</span><span class="sxs-lookup"><span data-stu-id="16598-110">Define a class with the given name, attributes, base class, and packing size.</span></span>  
  
-   <span data-ttu-id="16598-111">作为一个整体定义具有给定名称、 属性、 基本类、 和类大小的类。</span><span class="sxs-lookup"><span data-stu-id="16598-111">Define a class with the given name, attributes, base class, and the class size as a whole.</span></span>  
  
-   <span data-ttu-id="16598-112">作为一个整体定义具有给定名称、 属性、 基类、 封装大小和类大小的类。</span><span class="sxs-lookup"><span data-stu-id="16598-112">Define a class with the given name, attributes, base class, packing size, and the class size as a whole.</span></span>  
  
 <span data-ttu-id="16598-113">若要创建数组类型、 指针类型或不完整类型表示的 byref 类型<xref:System.Reflection.Emit.TypeBuilder>对象，请使用<xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A>方法，<xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A>方法，或<xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A>方法，分别。</span><span class="sxs-lookup"><span data-stu-id="16598-113">To create an array type, pointer type, or byref type for an incomplete type that is represented by a <xref:System.Reflection.Emit.TypeBuilder> object, use the <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method, <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method, or <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="16598-114">使用了类型之前，<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>必须调用方法。</span><span class="sxs-lookup"><span data-stu-id="16598-114">Before a type is used, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> method must be called.</span></span> <span data-ttu-id="16598-115">**CreateType**完成创建该类型。</span><span class="sxs-lookup"><span data-stu-id="16598-115">**CreateType** completes the creation of the type.</span></span> <span data-ttu-id="16598-116">以下调用**CreateType**，调用方可以通过实例化类型<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>方法，并使用调用类型的成员<xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-116">Following the call to **CreateType**, the caller can instantiate the type by using the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and invoke members of the type by using the <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="16598-117">它是调用更改后的类型实现的方法中的错误**CreateType**已调用。</span><span class="sxs-lookup"><span data-stu-id="16598-117">It is an error to invoke methods that change the implementation of a type after **CreateType** has been called.</span></span> <span data-ttu-id="16598-118">例如，公共语言运行时引发异常，如果调用方尝试将新成员添加到一种类型。</span><span class="sxs-lookup"><span data-stu-id="16598-118">For example, the common language runtime throws an exception if the caller tries to add new members to a type.</span></span>  
  
 <span data-ttu-id="16598-119">通过创建了类初始值设定项<xref:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-119">A class initializer is created by using the <xref:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="16598-120">**DefineTypeInitializer**返回<xref:System.Reflection.Emit.ConstructorBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="16598-120">**DefineTypeInitializer** returns a <xref:System.Reflection.Emit.ConstructorBuilder> object.</span></span>  
  
 <span data-ttu-id="16598-121">嵌套的类型定义通过调用之一<xref:System.Reflection.Emit.TypeBuilder.DefineNestedType%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-121">Nested types are defined by calling one of the <xref:System.Reflection.Emit.TypeBuilder.DefineNestedType%2A?displayProperty=nameWithType> methods.</span></span>  
  
## <a name="attributes"></a><span data-ttu-id="16598-122">特性</span><span class="sxs-lookup"><span data-stu-id="16598-122">Attributes</span></span>  
 <span data-ttu-id="16598-123"><xref:System.Reflection.Emit.TypeBuilder>类使用<xref:System.Reflection.TypeAttributes>枚举，以进一步指定要创建的类型的特征：</span><span class="sxs-lookup"><span data-stu-id="16598-123">The <xref:System.Reflection.Emit.TypeBuilder> class uses the <xref:System.Reflection.TypeAttributes> enumeration to further specify the characteristics of the type to be created:</span></span>  
  
-   <span data-ttu-id="16598-124">接口使用指定<xref:System.Reflection.TypeAttributes.Interface?displayProperty=nameWithType>和<xref:System.Reflection.TypeAttributes.Abstract?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="16598-124">Interfaces are specified using the <xref:System.Reflection.TypeAttributes.Interface?displayProperty=nameWithType> and <xref:System.Reflection.TypeAttributes.Abstract?displayProperty=nameWithType> attributes.</span></span>  
  
-   <span data-ttu-id="16598-125">使用指定具体类 （不能进行扩展的类）<xref:System.Reflection.TypeAttributes.Sealed?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="16598-125">Concrete classes (classes that cannot be extended) are specified using the <xref:System.Reflection.TypeAttributes.Sealed?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="16598-126">多个特性确定类型可见性。</span><span class="sxs-lookup"><span data-stu-id="16598-126">Several attributes determine type visibility.</span></span> <span data-ttu-id="16598-127">请参阅说明<xref:System.Reflection.TypeAttributes>枚举。</span><span class="sxs-lookup"><span data-stu-id="16598-127">See the description of the <xref:System.Reflection.TypeAttributes> enumeration.</span></span>  
  
-   <span data-ttu-id="16598-128">如果<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>指定，则类加载程序布局中，将在读取从元数据的顺序的字段。</span><span class="sxs-lookup"><span data-stu-id="16598-128">If <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> is specified, the class loader lays out fields in the order they are read from metadata.</span></span> <span data-ttu-id="16598-129">类加载程序会将指定的封装大小，但忽略任何指定的字段偏移量。</span><span class="sxs-lookup"><span data-stu-id="16598-129">The class loader considers the specified packing size but ignores any specified field offsets.</span></span> <span data-ttu-id="16598-130">元数据保留在其中发出的字段定义的顺序。</span><span class="sxs-lookup"><span data-stu-id="16598-130">The metadata preserves the order in which the field definitions are emitted.</span></span> <span data-ttu-id="16598-131">即使在合并时，元数据不重新排序的字段定义。</span><span class="sxs-lookup"><span data-stu-id="16598-131">Even across a merge, the metadata will not reorder the field definitions.</span></span> <span data-ttu-id="16598-132">加载程序将遵循指定的字段偏移量仅当<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>指定。</span><span class="sxs-lookup"><span data-stu-id="16598-132">The loader will honor the specified field offsets only if <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> is specified.</span></span>  
  
## <a name="known-issues"></a><span data-ttu-id="16598-133">已知问题</span><span class="sxs-lookup"><span data-stu-id="16598-133">Known Issues</span></span>  
  
-   <span data-ttu-id="16598-134">反射发出不验证的非抽象类的实现的接口是否实现该接口中声明的所有方法。</span><span class="sxs-lookup"><span data-stu-id="16598-134">Reflection emit does not verify whether a non-abstract class that implements an interface has implemented all the methods declared in the interface.</span></span> <span data-ttu-id="16598-135">但是，如果类未实现接口中声明的所有方法，则运行时不加载类。</span><span class="sxs-lookup"><span data-stu-id="16598-135">However, if the class does not implement all the methods declared in an interface, the runtime does not load the class.</span></span>  
  
-   <span data-ttu-id="16598-136">尽管<xref:System.Reflection.Emit.TypeBuilder>派生自<xref:System.Type>，某些中定义的抽象方法<xref:System.Type>类中未完全实现<xref:System.Reflection.Emit.TypeBuilder>类。</span><span class="sxs-lookup"><span data-stu-id="16598-136">Although <xref:System.Reflection.Emit.TypeBuilder> is derived from <xref:System.Type>, some of the abstract methods defined in the <xref:System.Type> class are not fully implemented in the <xref:System.Reflection.Emit.TypeBuilder> class.</span></span> <span data-ttu-id="16598-137">对这些调用<xref:System.Reflection.Emit.TypeBuilder>方法将引发<xref:System.NotSupportedException>异常。</span><span class="sxs-lookup"><span data-stu-id="16598-137">Calls to these <xref:System.Reflection.Emit.TypeBuilder> methods throw a <xref:System.NotSupportedException> exception.</span></span> <span data-ttu-id="16598-138">通过检索创建的类型使用，可获得所需的功能<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和反映将检索到的类型。</span><span class="sxs-lookup"><span data-stu-id="16598-138">The desired functionality can be obtained by retrieving the created type using the <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and reflecting on the retrieved type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-139">本部分包含两个代码示例。</span><span class="sxs-lookup"><span data-stu-id="16598-139">This section contains two code examples.</span></span> <span data-ttu-id="16598-140">第一个示例演示如何创建具有字段、 构造函数、 属性和方法的动态类型。</span><span class="sxs-lookup"><span data-stu-id="16598-140">The first example shows how to create a dynamic type with a field, constructor, property, and method.</span></span> <span data-ttu-id="16598-141">第二个示例生成动态从用户输入的方法。</span><span class="sxs-lookup"><span data-stu-id="16598-141">The second example builds a method dynamically from user input.</span></span>  
  
 <span data-ttu-id="16598-142">**示例 1**</span><span class="sxs-lookup"><span data-stu-id="16598-142">**Example one**</span></span>  
  
 <span data-ttu-id="16598-143">下面的代码示例演示如何定义具有一个模块的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="16598-143">The following code example shows how to define a dynamic assembly with one module.</span></span> <span data-ttu-id="16598-144">该示例程序集中的模块包含一个类型， `MyDynamicType`，它具有私有字段、 一个属性，获取和设置私有字段、 初始化该私有字段的构造函数和乘以私有字段的用户提供的数字的方法值并返回结果。</span><span class="sxs-lookup"><span data-stu-id="16598-144">The module in the example assembly contains one type, `MyDynamicType`, which has a private field, a property that gets and sets the private field, constructors that initialize the private field, and a method that multiplies a user-supplied number by the private field value and returns the result.</span></span>  
  
 <span data-ttu-id="16598-145"><xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType>创建程序集时指定字段。</span><span class="sxs-lookup"><span data-stu-id="16598-145">The <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType> field is specified when the assembly is created.</span></span> <span data-ttu-id="16598-146">立即，使用程序集代码和程序集也将保存到磁盘，以便它可以检查与[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)或在另一个程序中使用。</span><span class="sxs-lookup"><span data-stu-id="16598-146">The assembly code is used immediately, and the assembly is also saved to disk so that it can be examined with [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) or used in another program.</span></span>  
  
 [!code-cpp[AssemblyBuilderClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilderClass/cpp/24895.cpp#1)]
 [!code-csharp[AssemblyBuilderClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilderClass/cs/24895.cs#1)]
 [!code-vb[AssemblyBuilderClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilderClass/vb/24895.vb#1)]  
  
 <span data-ttu-id="16598-147">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="16598-147">**Example two**</span></span>  
  
 <span data-ttu-id="16598-148">下面的代码示例演示如何通过使用构建一个动态类型`TypeBuilder`。</span><span class="sxs-lookup"><span data-stu-id="16598-148">The following code sample demonstrates how to build a dynamic type by using `TypeBuilder`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDeclarativeSecurity">
      <MemberSignature Language="C#" Value="public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddDeclarativeSecurity(valuetype System.Security.Permissions.SecurityAction action, class System.Security.PermissionSet pset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddDeclarativeSecurity (action As SecurityAction, pset As PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddDeclarativeSecurity(System::Security::Permissions::SecurityAction action, System::Security::PermissionSet ^ pset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Security.Permissions.SecurityAction" />
        <Parameter Name="pset" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="16598-149">要执行的安全操作，如 Demand、Assert 等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-149">The security action to be taken such as Demand, Assert, and so on.</span>
          </span>
        </param>
        <param name="pset">
          <span data-ttu-id="16598-150">应用此操作的权限集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-150">The set of permissions the action applies to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-151">将声明性安全添加到此类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-151">Adds declarative security to this type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-152">`AddDeclarativeSecurity` 不能调用多次指定安全性操作 （如需、 Assert 或 Deny） 和一组应用于操作的权限的每次调用。</span><span class="sxs-lookup"><span data-stu-id="16598-152">`AddDeclarativeSecurity` may be called several times with each call specifying a security action (such as Demand, Assert, or Deny) and a set of permissions that apply to the action.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-153">在.NET Framework 版本 1.0、 1.1 和 2.0 中，使用此方法应用于类型的声明性安全属性存储在旧的 XML 元数据格式。</span><span class="sxs-lookup"><span data-stu-id="16598-153">In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a type by using this method are stored in the old XML metadata format.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-154">下面的示例演示了利用`AddDeclarativeSecurity`方法将添加的安全要求<xref:System.Security.Permissions.SecurityPermission>与<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>到名为的动态类型的标志`MyDynamicClass`，在名为 EmittedExample.dll 的程序集中。</span><span class="sxs-lookup"><span data-stu-id="16598-154">The following example demonstrates the use of the `AddDeclarativeSecurity` method to add a security demand for <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag to a dynamic type named `MyDynamicClass`, in an assembly named EmittedExample.dll.</span></span> <span data-ttu-id="16598-155">该示例生成没有控制台输出;在运行后，你可以使用[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)检查 EmittedExample.dll。</span><span class="sxs-lookup"><span data-stu-id="16598-155">The example produces no console output; after you run it, you can use [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine EmittedExample.dll.</span></span> <span data-ttu-id="16598-156">在`MyDynamicClass`，打开`.class public auto ansi`语句，以查看声明性的权限。</span><span class="sxs-lookup"><span data-stu-id="16598-156">In `MyDynamicClass`, open the `.class public auto ansi` statement to see the declarative permission.</span></span>  
  
 [!code-cpp[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/CPP/typebuilder_adddeclarativesecurity.cpp#1)]
 [!code-csharp[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/CS/typebuilder_adddeclarativesecurity.cs#1)]
 [!code-vb[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/VB/typebuilder_adddeclarativesecurity.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="16598-157">
            <paramref name="action" /> 无效（<see langword="RequestMinimum" />、<see langword="RequestOptional" /> 和 <see langword="RequestRefuse" /> 无效）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-157">The <paramref name="action" /> is invalid (<see langword="RequestMinimum" />, <see langword="RequestOptional" />, and <see langword="RequestRefuse" /> are invalid).</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-158">已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建包含类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-158">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="16598-159">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-159">-or-</span>
          </span>
          <span data-ttu-id="16598-160">权限集 <paramref name="pset" /> 包含之前由 <see langword="AddDeclarativeSecurity" /> 添加的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-160">The permission set <paramref name="pset" /> contains an action that was added earlier by <see langword="AddDeclarativeSecurity" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-161">
            <paramref name="pset" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-161">
              <paramref name="pset" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddInterfaceImplementation">
      <MemberSignature Language="C#" Value="public void AddInterfaceImplementation (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddInterfaceImplementation(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddInterfaceImplementation (interfaceType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddInterfaceImplementation(Type ^ interfaceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="16598-162">此类型实现的接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-162">The interface that this type implements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-163">添加一个此类型实现的接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-163">Adds an interface that this type implements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="16598-164">下面的代码示例演示如何动态创建的类型使用的接口的实现`AddInterfaceImplementation`。</span><span class="sxs-lookup"><span data-stu-id="16598-164">The following code sample demonstrates the implementation of an interface on a dynamically created type using `AddInterfaceImplementation`.</span></span>  
  
 [!code-cpp[TypeBuilder_Sample_4#3](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#3)]
 [!code-csharp[TypeBuilder_Sample_4#3](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#3)]
 [!code-vb[TypeBuilder_Sample_4#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-165">
            <paramref name="interfaceType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-165">
              <paramref name="interfaceType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-166">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-166">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-167">检索包含此类型定义的动态程序集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-167">Retrieves the dynamic assembly that contains this type definition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-168">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-168">Read-only.</span>
          </span>
          <span data-ttu-id="16598-169">检索包含此类型定义的动态程序集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-169">Retrieves the dynamic assembly that contains this type definition.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public override string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-170">返回由程序集的显示名称限定的此类型的全名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-170">Returns the full name of this type qualified by the display name of the assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-171">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-171">Read-only.</span>
          </span>
          <span data-ttu-id="16598-172">由程序集的显示名称限定的此类型的全名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-172">The full name of this type qualified by the display name of the assembly.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-173">返回字符串的格式为类型的完整名称的串联 (<xref:System.Reflection.Emit.TypeBuilder.FullName%2A>) 和程序集的显示名称 (<xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=nameWithType>)、 逗号和空格分隔。</span><span class="sxs-lookup"><span data-stu-id="16598-173">The format of the returned string is the concatenation of the full name of the type (<xref:System.Reflection.Emit.TypeBuilder.FullName%2A>) and the display name of the assembly (<xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=nameWithType>), separated by a comma and a space.</span></span>  
  
 <span data-ttu-id="16598-174">请参阅<xref:System.Reflection.AssemblyName>有关程序集的显示名称的格式的说明。</span><span class="sxs-lookup"><span data-stu-id="16598-174">See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="16598-175">版本信息</span><span class="sxs-lookup"><span data-stu-id="16598-175">Version Information</span></span>  
 <span data-ttu-id="16598-176">在.NET framework 1.0 和 1.1 版中，此属性的值不包括区域性或公钥。</span><span class="sxs-lookup"><span data-stu-id="16598-176">In the .NET Framework versions 1.0 and 1.1, the value of this property does not include the culture or public key.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public override Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ BaseType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-177">检索此类型的基类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-177">Retrieves the base type of this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-178">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-178">Read-only.</span>
          </span>
          <span data-ttu-id="16598-179">检索此类型的基类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-179">Retrieves the base type of this type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public override bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateType">
      <MemberSignature Language="C#" Value="public Type CreateType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type CreateType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.CreateType" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ CreateType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16598-180">创建类的 <see cref="T:System.Type" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-180">Creates a <see cref="T:System.Type" /> object for the class.</span>
          </span>
          <span data-ttu-id="16598-181">定义了类的字段和方法后，调用 <see langword="CreateType" /> 以加载其 <see langword="Type" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-181">After defining fields and methods on the class, <see langword="CreateType" /> is called in order to load its <see langword="Type" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-182">为此类返回新的 <see cref="T:System.Type" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-182">Returns the new <see cref="T:System.Type" /> object for this class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-183">如果此类型是嵌套的类型，<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>嵌套类型上调用之前必须在封闭类型上调用方法。</span><span class="sxs-lookup"><span data-stu-id="16598-183">If this type is a nested type, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method must be called on the enclosing type before it is called on the nested type.</span></span>  
  
 <span data-ttu-id="16598-184">如果当前的类型派生自不完整类型或实现不完整的接口，调用<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>的父类型以及在当前的类型上调用它之前的接口类型的方法。</span><span class="sxs-lookup"><span data-stu-id="16598-184">If the current type derives from an incomplete type or implements incomplete interfaces, call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the parent type and the interface types before calling it on the current type.</span></span>  
  
 <span data-ttu-id="16598-185">如果封闭类型包含的字段的值类型定义为嵌套类型 （例如，是一个枚举定义为嵌套类型的字段），调用<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>封闭类型的方法将生成<xref:System.AppDomain.TypeResolve?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="16598-185">If the enclosing type contains a field that is a value type defined as a nested type (for example, a field that is an enumeration defined as a nested type), calling the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the enclosing type will generate a <xref:System.AppDomain.TypeResolve?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="16598-186">这是因为加载程序无法确定的封闭类型的大小，直到完成后的嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="16598-186">This is because the loader cannot determine the size of the enclosing type until the nested type has been completed.</span></span> <span data-ttu-id="16598-187">调用方应定义的处理程序<xref:System.AppDomain.TypeResolve>事件，以通过调用完成的嵌套类型的定义<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>上<xref:System.Reflection.Emit.TypeBuilder>对象，表示嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="16598-187">The caller should define a handler for the <xref:System.AppDomain.TypeResolve> event to complete the definition of the nested type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> on the <xref:System.Reflection.Emit.TypeBuilder> object that represents the nested type.</span></span> <span data-ttu-id="16598-188">本主题的代码示例演示如何定义此类事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="16598-188">The code example for this topic shows how to define such an event handler.</span></span>  
  
 <span data-ttu-id="16598-189">创建一个类型是一次，无论多次<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="16598-189">A type is created only once, no matter how many times the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.</span></span> <span data-ttu-id="16598-190">所有调用都返回相同<xref:System.Type>对象。</span><span class="sxs-lookup"><span data-stu-id="16598-190">All calls return the same <xref:System.Type> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-191">下面的代码示例演示如何定义的事件处理程序<xref:System.AppDomain.TypeResolve?displayProperty=nameWithType>事件，以便调用<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>期间一个嵌套类型上的方法<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>在封闭类型上调用。</span><span class="sxs-lookup"><span data-stu-id="16598-191">The following code example shows how to define an event handler for the <xref:System.AppDomain.TypeResolve?displayProperty=nameWithType> event, in order to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on a nested type during a <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> call on the enclosing type.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/CPP/nestedenum.cpp#1)]
 [!code-csharp[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/CS/nestedenum.cs#1)]
 [!code-vb[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/VB/nestedenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-192">尚未创建封闭类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-192">The enclosing type has not been created.</span>
          </span>
          <span data-ttu-id="16598-193">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-193">-or-</span>
          </span>
          <span data-ttu-id="16598-194">此类型是非抽象类型，且包含一个抽象方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-194">This type is non-abstract and contains an abstract method.</span>
          </span>
          <span data-ttu-id="16598-195">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-195">-or-</span>
          </span>
          <span data-ttu-id="16598-196">此类型不是抽象类或接口，并且具有一个没有方法体的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-196">This type is not an abstract class or an interface and has a method without a method body.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-197">此类型包含无效的 Microsoft 中间语言 (MSIL) 代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-197">The type contains invalid Microsoft intermediate language (MSIL) code.</span>
          </span>
          <span data-ttu-id="16598-198">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-198">-or-</span>
          </span>
          <span data-ttu-id="16598-199">分支目标使用 1 个字节的偏移量指定，但目标离分支的距离大于 127 个字节。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-199">The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="16598-200">无法加载此类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-200">The type cannot be loaded.</span>
          </span>
          <span data-ttu-id="16598-201">例如，它包含具有调用约定 <see cref="F:System.Reflection.CallingConventions.HasThis" /> 的 <see langword="static" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-201">For example, it contains a <see langword="static" /> method that has the calling convention <see cref="F:System.Reflection.CallingConventions.HasThis" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTypeInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeInfo CreateTypeInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.TypeInfo CreateTypeInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTypeInfo () As TypeInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::TypeInfo ^ CreateTypeInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16598-202">获取一个表示此类型的 <see cref="T:System.Reflection.TypeInfo" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-202">Gets a <see cref="T:System.Reflection.TypeInfo" /> object that represents this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-203">一个表示此类型的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-203">An object that represents this type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-204">获取声明了当前泛型类型参数的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-204">Gets the method that declared the current generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-205">如果当前的类型是一个泛型类型参数，则为表示声明了当前类型的方法的 <see cref="T:System.Reflection.MethodBase" />；否则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-205">A <see cref="T:System.Reflection.MethodBase" /> that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="16598-206">在发出代码时，由表示泛型类型参数<xref:System.Reflection.Emit.GenericTypeParameterBuilder>对象而不是<xref:System.Reflection.Emit.TypeBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="16598-206">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-207">返回声明此类型的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-207">Returns the type that declared this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-208">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-208">Read-only.</span>
          </span>
          <span data-ttu-id="16598-209">声明此类型的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-209">The type that declared this type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineConstructor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16598-210">将新的构造函数添加到动态类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-210">Adds a new constructor to the dynamic type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineConstructor(valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineConstructor (attributes As MethodAttributes, callingConvention As CallingConventions, parameterTypes As Type()) As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineConstructor(System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="16598-211">构造函数的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-211">The attributes of the constructor.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="16598-212">构造函数的调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-212">The calling convention of the constructor.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="16598-213">构造函数的参数类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-213">The parameter types of the constructor.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-214">用给定的属性和签名，向类型中添加新的构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-214">Adds a new constructor to the type, with the given attributes and signature.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-215">定义构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-215">The defined constructor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-216">如果为动态类型未定义构造函数，自动提供默认构造函数，它会调用基类的默认构造函数。</span><span class="sxs-lookup"><span data-stu-id="16598-216">If you do not define a constructor for your dynamic type, a default constructor is provided automatically, and it calls the default constructor of the base class.</span></span>  
  
 <span data-ttu-id="16598-217">如果为动态类型定义的构造函数，不提供默认构造函数。</span><span class="sxs-lookup"><span data-stu-id="16598-217">If you define a constructor for your dynamic type, a default constructor is not provided.</span></span> <span data-ttu-id="16598-218">必须提供默认构造函数除了你定义的构造函数的以下选项：</span><span class="sxs-lookup"><span data-stu-id="16598-218">You have the following options for providing a default constructor in addition to the constructor you defined:</span></span>  
  
-   <span data-ttu-id="16598-219">如果你希望只需调用基类的默认构造函数的默认构造函数，则可以使用<xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A>方法来创建一个 （也可以将访问限制到它）。</span><span class="sxs-lookup"><span data-stu-id="16598-219">If you want a default constructor that simply calls the default constructor of the base class, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A> method to create one (and optionally restrict access to it).</span></span> <span data-ttu-id="16598-220">不提供此默认构造函数的实现。</span><span class="sxs-lookup"><span data-stu-id="16598-220">Do not provide an implementation for this default constructor.</span></span> <span data-ttu-id="16598-221">如果这样做，当你尝试使用构造函数时，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="16598-221">If you do, an exception is thrown when you try to use the constructor.</span></span> <span data-ttu-id="16598-222">不引发异常时<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="16598-222">No exception is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.</span></span>  
  
-   <span data-ttu-id="16598-223">如果你希望默认构造函数来执行多个只需调用基类的默认构造函数或调用另一个构造函数的基类，或执行其他操作完全，必须使用<xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=nameWithType>方法创建一个，并提供您自己的实现。</span><span class="sxs-lookup"><span data-stu-id="16598-223">If you want a default constructor that does something more than simply calling the default constructor of the base class, or that calls another constructor of the base class, or that does something else entirely, you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=nameWithType> method to create one, and provide your own implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-224">下面的代码示例演示如何使用`DefineConstructor`以设置上一个动态类型的构造函数的特定签名和属性并返回相应<xref:System.Reflection.Emit.ConstructorBuilder>MSIL 填充。</span><span class="sxs-lookup"><span data-stu-id="16598-224">The following code sample demonstrates the use of `DefineConstructor` to set a constructor's particular signature and attributes on a dynamic type and return a corresponding <xref:System.Reflection.Emit.ConstructorBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_Sample_4#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#2)]
 [!code-csharp[TypeBuilder_Sample_4#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#2)]
 [!code-vb[TypeBuilder_Sample_4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-225">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-225">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineConstructor(valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type[] parameterTypes, class System.Type[][] requiredCustomModifiers, class System.Type[][] optionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineConstructor (attributes As MethodAttributes, callingConvention As CallingConventions, parameterTypes As Type(), requiredCustomModifiers As Type()(), optionalCustomModifiers As Type()()) As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineConstructor(System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ requiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ optionalCustomModifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="requiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="optionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="16598-226">构造函数的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-226">The attributes of the constructor.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="16598-227">构造函数的调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-227">The calling convention of the constructor.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="16598-228">构造函数的参数类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-228">The parameter types of the constructor.</span>
          </span>
        </param>
        <param name="requiredCustomModifiers">
          <span data-ttu-id="16598-229">由类型数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-229">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="16598-230">每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-230">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="16598-231">如果某个特定参数没有所需的自定义修饰符，则指定 <see langword="null" />，而不要指定类型数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-231">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="16598-232">如果所有参数都没有所需的自定义修饰符，则指定 <see langword="null" />，而不要指定由数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-232">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <param name="optionalCustomModifiers">
          <span data-ttu-id="16598-233">由类型数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-233">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="16598-234">每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-234">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="16598-235">如果某个特定参数没有可选的自定义修饰符，则指定 <see langword="null" />，而不要指定类型数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-235">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="16598-236">如果所有参数都没有可选的自定义修饰符，则指定 <see langword="null" />，而不要指定由数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-236">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-237">将新构造函数添加到该类型，其属性、签名和自定义修饰符已给定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-237">Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-238">定义构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-238">The defined constructor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-239">此重载是为设计器提供的托管编译器。</span><span class="sxs-lookup"><span data-stu-id="16598-239">This overload is provided for designers of managed compilers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-240">自定义修饰符的详细信息，请参阅 ECMA Partition II 元数据文档。</span><span class="sxs-lookup"><span data-stu-id="16598-240">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="16598-241">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="16598-241">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-242">
            <paramref name="requiredCustomModifiers" /> 或 <paramref name="optionalCustomModifiers" /> 的大小与 <paramref name="parameterTypes" /> 的大小不相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-242">The size of <paramref name="requiredCustomModifiers" /> or <paramref name="optionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-243">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-243">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="16598-244">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-244">-or-</span>
          </span>
          <span data-ttu-id="16598-245">对于当前的动态类型，属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 的值为 <see langword="true" />，但属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 的值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-245">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDefaultConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor (System.Reflection.MethodAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor(valuetype System.Reflection.MethodAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDefaultConstructor (attributes As MethodAttributes) As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineDefaultConstructor(System::Reflection::MethodAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="16598-246">
            <see langword="MethodAttributes" /> 对象，表示要应用到此构造函数的属性 。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-246">A <see langword="MethodAttributes" /> object representing the attributes to be applied to the constructor.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-247">定义默认的构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-247">Defines the default constructor.</span>
          </span>
          <span data-ttu-id="16598-248">在此处定义的构造函数将只调用父类的默认构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-248">The constructor defined here will simply call the default constructor of the parent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-249">返回构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-249">Returns the constructor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-250">由于自动定义的默认构造函数，它不需要调用此方法仅在以下情况：</span><span class="sxs-lookup"><span data-stu-id="16598-250">Because the default constructor is automatically defined, it is necessary to call this method only in the following situations:</span></span>  
  
-   <span data-ttu-id="16598-251">已定义另一个构造函数，并且还想只需调用基类构造函数的默认构造函数。</span><span class="sxs-lookup"><span data-stu-id="16598-251">You have defined another constructor and you also want a default constructor that simply calls the base class constructor.</span></span>  
  
-   <span data-ttu-id="16598-252">你想要设置的属性上成默认构造函数以外<xref:System.Reflection.MethodAttributes.PrivateScope>， <xref:System.Reflection.MethodAttributes.Public>， <xref:System.Reflection.MethodAttributes.HideBySig>， <xref:System.Reflection.MethodAttributes.SpecialName>，和<xref:System.Reflection.MethodAttributes.RTSpecialName>。</span><span class="sxs-lookup"><span data-stu-id="16598-252">You want to set the attributes on the default constructor to something other than <xref:System.Reflection.MethodAttributes.PrivateScope>, <xref:System.Reflection.MethodAttributes.Public>, <xref:System.Reflection.MethodAttributes.HideBySig>, <xref:System.Reflection.MethodAttributes.SpecialName>, and <xref:System.Reflection.MethodAttributes.RTSpecialName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-253">下面的代码示例演示如何使用`DefineConstructor`以设置上一个动态类型的构造函数的特定签名和属性并返回相应<xref:System.Reflection.Emit.ConstructorBuilder>MSIL 填充。</span><span class="sxs-lookup"><span data-stu-id="16598-253">The following code sample demonstrates the use of `DefineConstructor` to set a constructor's particular signature and attributes on a dynamic type and return a corresponding <xref:System.Reflection.Emit.ConstructorBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_Sample_4#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#2)]
 [!code-csharp[TypeBuilder_Sample_4#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#2)]
 [!code-vb[TypeBuilder_Sample_4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-254">此父类型（基类型）没有默认的构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-254">The parent type (base type) does not have a default constructor.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-255">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-255">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="16598-256">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-256">-or-</span>
          </span>
          <span data-ttu-id="16598-257">对于当前的动态类型，属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 的值为 <see langword="true" />，但属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 的值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-257">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.EventBuilder DefineEvent (string name, System.Reflection.EventAttributes attributes, Type eventtype);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.EventBuilder DefineEvent(string name, valuetype System.Reflection.EventAttributes attributes, class System.Type eventtype) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineEvent (name As String, attributes As EventAttributes, eventtype As Type) As EventBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::EventBuilder ^ DefineEvent(System::String ^ name, System::Reflection::EventAttributes attributes, Type ^ eventtype);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.EventBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.EventAttributes" />
        <Parameter Name="eventtype" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-258">事件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-258">The name of the event.</span>
          </span>
          <span data-ttu-id="16598-259">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-259">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-260">事件的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-260">The attributes of the event.</span>
          </span>
        </param>
        <param name="eventtype">
          <span data-ttu-id="16598-261">事件的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-261">The type of the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-262">将新事件添加到该类型，使用给定的名称、属性和事件类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-262">Adds a new event to the type, with the given name, attributes and event type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-263">已定义的事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-263">The defined event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-264">
            <paramref name="name" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-264">The length of <paramref name="name" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-265">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-265">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="16598-266">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-266">-or-</span>
          </span>
          <span data-ttu-id="16598-267">
            <paramref name="eventtype" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-267">
              <paramref name="eventtype" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-268">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-268">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineField">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16598-269">将新字段添加到动态类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-269">Adds a new field to the dynamic type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineField">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineField(string fieldName, class System.Type type, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineField(System::String ^ fieldName, Type ^ type, System::Reflection::FieldAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="fieldName">
          <span data-ttu-id="16598-270">字段的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-270">The name of the field.</span>
          </span>
          <span data-ttu-id="16598-271">
            <c>fieldName</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-271">
              <c>fieldName</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="16598-272">字段的类型</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-272">The type of the field</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-273">字段的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-273">The attributes of the field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-274">将新字段添加到该类型，其名称、属性和字段类型已给定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-274">Adds a new field to the type, with the given name, attributes, and field type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-275">已定义的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-275">The defined field.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-276">
            <paramref name="fieldName" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-276">The length of <paramref name="fieldName" /> is zero.</span>
          </span>
          <span data-ttu-id="16598-277">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-277">-or-</span>
          </span>
          <span data-ttu-id="16598-278">
            <paramref name="type" /> 是 System.Void。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-278">
              <paramref name="type" /> is System.Void.</span>
          </span>
          <span data-ttu-id="16598-279">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-279">-or-</span>
          </span>
          <span data-ttu-id="16598-280">为此字段的父类指定了总大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-280">A total size was specified for the parent class of this field.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-281">
            <paramref name="fieldName" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-281">
              <paramref name="fieldName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-282">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-282">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineField">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineField(string fieldName, class System.Type type, class System.Type[] requiredCustomModifiers, class System.Type[] optionalCustomModifiers, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineField(System::String ^ fieldName, Type ^ type, cli::array &lt;Type ^&gt; ^ requiredCustomModifiers, cli::array &lt;Type ^&gt; ^ optionalCustomModifiers, System::Reflection::FieldAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="requiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="optionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="fieldName">
          <span data-ttu-id="16598-283">字段的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-283">The name of the field.</span>
          </span>
          <span data-ttu-id="16598-284">
            <c>fieldName</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-284">
              <c>fieldName</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="16598-285">字段的类型</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-285">The type of the field</span>
          </span>
        </param>
        <param name="requiredCustomModifiers">
          <span data-ttu-id="16598-286">一个类型数组，表示字段所必需的自定义修饰符，如 <see cref="T:Microsoft.VisualC.IsConstModifier" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-286">An array of types representing the required custom modifiers for the field, such as <see cref="T:Microsoft.VisualC.IsConstModifier" />.</span>
          </span>
        </param>
        <param name="optionalCustomModifiers">
          <span data-ttu-id="16598-287">一个类型数组，表示字段可选的自定义修饰符，如 <see cref="T:Microsoft.VisualC.IsConstModifier" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-287">An array of types representing the optional custom modifiers for the field, such as <see cref="T:Microsoft.VisualC.IsConstModifier" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-288">字段的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-288">The attributes of the field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-289">将新字段添加到该类型，其名称、属性、字段类型和自定义修饰符已给定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-289">Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-290">已定义的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-290">The defined field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-291">此重载是为设计器提供的托管编译器。</span><span class="sxs-lookup"><span data-stu-id="16598-291">This overload is provided for designers of managed compilers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-292">
            <paramref name="fieldName" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-292">The length of <paramref name="fieldName" /> is zero.</span>
          </span>
          <span data-ttu-id="16598-293">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-293">-or-</span>
          </span>
          <span data-ttu-id="16598-294">
            <paramref name="type" /> 是 System.Void。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-294">
              <paramref name="type" /> is System.Void.</span>
          </span>
          <span data-ttu-id="16598-295">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-295">-or-</span>
          </span>
          <span data-ttu-id="16598-296">为此字段的父类指定了总大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-296">A total size was specified for the parent class of this field.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-297">
            <paramref name="fieldName" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-297">
              <paramref name="fieldName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-298">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-298">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineGenericParameters">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters (params string[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters(string[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineGenericParameters (ParamArray names As String()) As GenericTypeParameterBuilder()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::Emit::GenericTypeParameterBuilder ^&gt; ^ DefineGenericParameters(... cli::array &lt;System::String ^&gt; ^ names);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.GenericTypeParameterBuilder[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names">
          <span data-ttu-id="16598-299">泛型类型参数的名称的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-299">An array of names for the generic type parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-300">定义当前类型的泛型类型，指定其数量和名称并返回一个可用于设置其约束的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 对象的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-300">Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to set their constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-301">
            <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 对象的一个数组，可用于定义当前类型的泛型类型参数的约束。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-301">An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to define the constraints of the generic type parameters for the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-302">调用此方法将使当前类型的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="16598-302">Calling this method makes the current type a generic type.</span></span> <span data-ttu-id="16598-303">如果对同一类型，再次调用该方法<xref:System.InvalidOperationException>引发。</span><span class="sxs-lookup"><span data-stu-id="16598-303">If the method is called again on the same type, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-304">下面的代码示例使用两个类型参数创建泛型类型，并将它们保存在程序集 GenericEmitExample1.dll。</span><span class="sxs-lookup"><span data-stu-id="16598-304">The following code example creates a generic type with two type parameters and saves them in the assembly GenericEmitExample1.dll.</span></span> <span data-ttu-id="16598-305">你可以使用[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)若要查看生成的类型。</span><span class="sxs-lookup"><span data-stu-id="16598-305">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to view the generated types.</span></span> <span data-ttu-id="16598-306">有关中动态的泛型类型定义所涉及的步骤的更多详细说明，请参阅[如何： 定义泛型类型反射发出带有](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)。</span><span class="sxs-lookup"><span data-stu-id="16598-306">For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[EmitGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)]
 [!code-csharp[EmitGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)]
 [!code-vb[EmitGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-307">已为此类型定义了泛型类型参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-307">Generic type parameters have already been defined for this type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-308">
            <paramref name="names" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-308">
              <paramref name="names" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="16598-309">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-309">-or-</span>
          </span>
          <span data-ttu-id="16598-310">
            <paramref name="names" /> 的元素为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-310">An element of <paramref name="names" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-311">
            <paramref name="names" /> 是一个空数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-311">
              <paramref name="names" /> is an empty array.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="DefineInitializedData">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineInitializedData (string name, byte[] data, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineInitializedData(string name, unsigned int8[] data, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineInitializedData (name As String, data As Byte(), attributes As FieldAttributes) As FieldBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineInitializedData(System::String ^ name, cli::array &lt;System::Byte&gt; ^ data, System::Reflection::FieldAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-312">用于引用数据的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-312">The name used to refer to the data.</span>
          </span>
          <span data-ttu-id="16598-313">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-313">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="data">
          <span data-ttu-id="16598-314">数据 blob。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-314">The blob of data.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-315">字段的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-315">The attributes for the field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-316">在可移植可执行 (PE) 文件的 .sdata 部分定义已初始化的数据字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-316">Defines initialized data field in the .sdata section of the portable executable (PE) file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-317">用于引用数据的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-317">A field to reference the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-318">使用此方法创建的字段将为`static`，即使不包括`FieldAttributes.Static`中`attributes`参数。</span><span class="sxs-lookup"><span data-stu-id="16598-318">The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-319">
            <paramref name="name" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-319">Length of <paramref name="name" /> is zero.</span>
          </span>
          <span data-ttu-id="16598-320">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-320">-or-</span>
          </span>
          <span data-ttu-id="16598-321">数据的大小小于或等于零，或者大于或等于 0x3f0000。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-321">The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-322">
            <paramref name="name" /> 或 <paramref name="data" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-322">
              <paramref name="name" /> or <paramref name="data" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-323">
            <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 以前被调用过。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-323">
              <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been previously called.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16598-324">向类型添加一个方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-324">Adds a method to the type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-325">方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-325">The name of the method.</span>
          </span>
          <span data-ttu-id="16598-326">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-326">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-327">方法的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-327">The attributes of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-328">向此类型添加新方法，使用指定的名称和方法属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-328">Adds a new method to the type, with the specified name and method attributes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-329">表示新定义的方法的 <see cref="T:System.Reflection.Emit.MethodBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-329">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-330">在定义的方法时不知道方法签名时，请使用此方法重载。</span><span class="sxs-lookup"><span data-stu-id="16598-330">Use this method overload when you do not know the method signature at the time you define the method.</span></span> <span data-ttu-id="16598-331">例如，可能由必须后该方法已添加到该类型定义的方法的泛型类型参数指定的参数类型和泛型方法的返回类型。</span><span class="sxs-lookup"><span data-stu-id="16598-331">For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type.</span></span> <span data-ttu-id="16598-332">参数和返回类型的方法可以稍后将使用设置<xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-332">The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="16598-333">此方法重载定义一个具有方法<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="16598-333">This method overload defines a method with <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span> <span data-ttu-id="16598-334">如果你需要定义一个方法，无签名，使用不同调用约定，使用<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="16598-334">If you need to define a method without a signature, with a different calling convention, use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-335">下面的代码示例定义一个名为的泛型方法`DemoMethod`由其泛型类型参数指定的参数类型和返回类型。</span><span class="sxs-lookup"><span data-stu-id="16598-335">The following code example defines a generic method named `DemoMethod` whose parameter type and return type are specified by its generic type parameters.</span></span> <span data-ttu-id="16598-336">该方法定义没有签名，使用标准调用约定。</span><span class="sxs-lookup"><span data-stu-id="16598-336">The method is defined without a signature, using the standard calling convention.</span></span> <span data-ttu-id="16598-337"><xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType>方法用于进行`DemoMethod`泛型方法，以及新定义的类型参数然后用于签名和返回类型。</span><span class="sxs-lookup"><span data-stu-id="16598-337">The <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method is used to make `DemoMethod` a generic method, and the newly defined type parameters are then used for the signature and return type.</span></span>  
  
 <span data-ttu-id="16598-338">此代码示例摘自更大的示例为提供<xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-338">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#4](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#4)]
 [!code-csharp[GenericMethodBuilder#4](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#4)]
 [!code-vb[GenericMethodBuilder#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#4)]  
[!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]
[!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]
[!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  
[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]
[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]
[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-339">
            <paramref name="name" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-339">The length of <paramref name="name" /> is zero.</span>
          </span>
          <span data-ttu-id="16598-340">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-340">-or-</span>
          </span>
          <span data-ttu-id="16598-341">此方法的父类型是一个接口，并且此方法不是虚方法（Visual Basic 中为 <see langword="Overridable" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-341">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-342">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-342">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-343">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-343">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="16598-344">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-344">-or-</span>
          </span>
          <span data-ttu-id="16598-345">对于当前的动态类型，属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 的值为 <see langword="true" />，但属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 的值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-345">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, callingConvention As CallingConventions) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-346">方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-346">The name of the method.</span>
          </span>
          <span data-ttu-id="16598-347">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-347">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-348">方法的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-348">The attributes of the method.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="16598-349">方法的调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-349">The calling convention of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-350">将具有指定的名称、 方法属性和调用约定的新方法添加到此类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-350">Adds a new method to the type, with the specified name, method attributes, and calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-351">表示新定义的方法的 <see cref="T:System.Reflection.Emit.MethodBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-351">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-352">在定义的方法时不知道方法签名时，请使用此方法重载。</span><span class="sxs-lookup"><span data-stu-id="16598-352">Use this method overload when you do not know the method signature at the time you define the method.</span></span> <span data-ttu-id="16598-353">例如，可能由必须后该方法已添加到该类型定义的方法的泛型类型参数指定的参数类型和泛型方法的返回类型。</span><span class="sxs-lookup"><span data-stu-id="16598-353">For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type.</span></span> <span data-ttu-id="16598-354">参数和返回类型的方法可以稍后将使用设置<xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-354">The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-355">
            <paramref name="name" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-355">The length of <paramref name="name" /> is zero.</span>
          </span>
          <span data-ttu-id="16598-356">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-356">-or-</span>
          </span>
          <span data-ttu-id="16598-357">此方法的父类型是一个接口，并且此方法不是虚方法（Visual Basic 中为 <see langword="Overridable" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-357">The type of the parent of this method is an interface and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-358">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-358">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-359">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-359">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="16598-360">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-360">-or-</span>
          </span>
          <span data-ttu-id="16598-361">对于当前的动态类型，属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 的值为 <see langword="true" />，但属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 的值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-361">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, returnType As Type, parameterTypes As Type()) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-362">方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-362">The name of the method.</span>
          </span>
          <span data-ttu-id="16598-363">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-363">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-364">方法的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-364">The attributes of the method.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="16598-365">方法的返回类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-365">The return type of the method.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="16598-366">方法参数的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-366">The types of the parameters of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-367">向此类型添加新方法，并指定方法的名称、 属性和签名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-367">Adds a new method to the type, with the specified name, method attributes, and method signature.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-368">已定义的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-368">The defined method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="16598-369">下面的代码示例演示如何使用`DefineMethod`动态类型上设置构造函数的特定签名和属性并返回相应<xref:System.Reflection.Emit.MethodBuilder>MSIL 填充。</span><span class="sxs-lookup"><span data-stu-id="16598-369">The following code sample demonstrates the use of `DefineMethod` to set a constructor's particular signature and attributes on a dynamic type and to return a corresponding <xref:System.Reflection.Emit.MethodBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CPP/typebuilder_definenestedtype1.cpp#2)]
 [!code-csharp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CS/typebuilder_definenestedtype1.cs#2)]
 [!code-vb[TypeBuilder_DefineNestedType1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/VB/typebuilder_definenestedtype1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-370">
            <paramref name="name" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-370">The length of <paramref name="name" /> is zero.</span>
          </span>
          <span data-ttu-id="16598-371">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-371">-or-</span>
          </span>
          <span data-ttu-id="16598-372">此方法的父类型是一个接口，并且此方法不是虚方法（Visual Basic 中为 <see langword="Overridable" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-372">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-373">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-373">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-374">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-374">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="16598-375">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-375">-or-</span>
          </span>
          <span data-ttu-id="16598-376">对于当前的动态类型，属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 的值为 <see langword="true" />，但属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 的值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-376">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-377">方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-377">The name of the method.</span>
          </span>
          <span data-ttu-id="16598-378">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-378">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-379">方法的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-379">The attributes of the method.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="16598-380">方法的调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-380">The calling convention of the method.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="16598-381">方法的返回类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-381">The return type of the method.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="16598-382">方法参数的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-382">The types of the parameters of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-383">使用指定的名称、方法属性、调用约定和方法签名向类型中添加新方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-383">Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-384">表示新定义的方法的 <see cref="T:System.Reflection.Emit.MethodBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-384">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="16598-385">下面的代码示例演示如何使用`DefineMethod`动态类型上设置构造函数的特定签名和属性并返回相应<xref:System.Reflection.Emit.MethodBuilder>MSIL 填充。</span><span class="sxs-lookup"><span data-stu-id="16598-385">The following code sample demonstrates the use of `DefineMethod` to set a constructor's particular signature and attributes on a dynamic type and to return a corresponding <xref:System.Reflection.Emit.MethodBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CPP/typebuilder_definenestedtype1.cpp#2)]
 [!code-csharp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CS/typebuilder_definenestedtype1.cs#2)]
 [!code-vb[TypeBuilder_DefineNestedType1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/VB/typebuilder_definenestedtype1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-386">
            <paramref name="name" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-386">The length of <paramref name="name" /> is zero.</span>
          </span>
          <span data-ttu-id="16598-387">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-387">-or-</span>
          </span>
          <span data-ttu-id="16598-388">此方法的父类型是一个接口，并且此方法不是虚方法（Visual Basic 中为 <see langword="Overridable" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-388">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-389">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-389">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-390">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-390">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="16598-391">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-391">-or-</span>
          </span>
          <span data-ttu-id="16598-392">对于当前的动态类型，属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 的值为 <see langword="true" />，但属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 的值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-392">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-393">方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-393">The name of the method.</span>
          </span>
          <span data-ttu-id="16598-394">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-394">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-395">方法的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-395">The attributes of the method.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="16598-396">方法的调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-396">The calling convention of the method.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="16598-397">方法的返回类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-397">The return type of the method.</span>
          </span>
        </param>
        <param name="returnTypeRequiredCustomModifiers">
          <span data-ttu-id="16598-398">一个类型数组，表示该方法的返回类型所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-398">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span>
          </span>
          <span data-ttu-id="16598-399">如果返回类型没有所需的自定义修饰符，则指定 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-399">If the return type has no required custom modifiers, specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnTypeOptionalCustomModifiers">
          <span data-ttu-id="16598-400">一个类型数组，表示该方法的返回类型的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-400">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span>
          </span>
          <span data-ttu-id="16598-401">如果返回类型没有可选的自定义修饰符，则指定 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-401">If the return type has no optional custom modifiers, specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="16598-402">方法参数的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-402">The types of the parameters of the method.</span>
          </span>
        </param>
        <param name="parameterTypeRequiredCustomModifiers">
          <span data-ttu-id="16598-403">由类型数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-403">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="16598-404">每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-404">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="16598-405">如果某个特定参数没有所需的自定义修饰符，则指定 <see langword="null" />，而不要指定类型数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-405">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="16598-406">如果所有参数都没有所需的自定义修饰符，则指定 <see langword="null" />，而不要指定由数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-406">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <param name="parameterTypeOptionalCustomModifiers">
          <span data-ttu-id="16598-407">由类型数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-407">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="16598-408">每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-408">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="16598-409">如果某个特定参数没有可选的自定义修饰符，则指定 <see langword="null" />，而不要指定类型数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-409">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="16598-410">如果所有参数都没有可选的自定义修饰符，则指定 <see langword="null" />，而不要指定由数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-410">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-411">使用指定名称、方法属性、调用约定、方法签名和自定义修饰符向类型中添加新方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-411">Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-412">一个表示新添加方法的 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-412">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> object representing the newly added method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-413">如果你需要指定自定义修饰符，请使用此重载。</span><span class="sxs-lookup"><span data-stu-id="16598-413">Use this overload if you need to specify custom modifiers.</span></span> <span data-ttu-id="16598-414">如果你需要指定自定义修饰符，该方法已创建后, 根据需要例如，含有泛型方法的参数类型指定由其泛型类型参数，你可以使用<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29>或<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29>方法的重载来定义方法，然后使用<xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType>具有自定义修饰符的方法来定义参数和返回类型。</span><span class="sxs-lookup"><span data-stu-id="16598-414">If you need to specify custom modifiers after the method has been created, as you would, for example, with a generic method whose parameter types are specified by its generic type parameters, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29> or <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overloads to define the method and then use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method to define the parameter and return types with custom modifiers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-415">自定义修饰符的详细信息，请参阅 ECMA Partition II 元数据文档。</span><span class="sxs-lookup"><span data-stu-id="16598-415">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="16598-416">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="16598-416">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-417">
            <paramref name="name" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-417">The length of <paramref name="name" /> is zero.</span>
          </span>
          <span data-ttu-id="16598-418">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-418">-or-</span>
          </span>
          <span data-ttu-id="16598-419">此方法的父类型是一个接口，并且此方法不是虚方法（Visual Basic 中为 <see langword="Overridable" />）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-419">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span>
          </span>
          <span data-ttu-id="16598-420">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-420">-or-</span>
          </span>
          <span data-ttu-id="16598-421">
            <paramref name="parameterTypeRequiredCustomModifiers" /> 或 <paramref name="parameterTypeOptionalCustomModifiers" /> 的大小与 <paramref name="parameterTypes" /> 的大小不相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-421">The size of <paramref name="parameterTypeRequiredCustomModifiers" /> or <paramref name="parameterTypeOptionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-422">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-422">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-423">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-423">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="16598-424">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-424">-or-</span>
          </span>
          <span data-ttu-id="16598-425">对于当前的动态类型，属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 的值为 <see langword="true" />，但属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 的值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-425">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineMethodOverride">
      <MemberSignature Language="C#" Value="public void DefineMethodOverride (System.Reflection.MethodInfo methodInfoBody, System.Reflection.MethodInfo methodInfoDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineMethodOverride(class System.Reflection.MethodInfo methodInfoBody, class System.Reflection.MethodInfo methodInfoDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineMethodOverride (methodInfoBody As MethodInfo, methodInfoDeclaration As MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineMethodOverride(System::Reflection::MethodInfo ^ methodInfoBody, System::Reflection::MethodInfo ^ methodInfoDeclaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfoBody" Type="System.Reflection.MethodInfo" />
        <Parameter Name="methodInfoDeclaration" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="methodInfoBody">
          <span data-ttu-id="16598-426">要使用的方法体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-426">The method body to be used.</span>
          </span>
          <span data-ttu-id="16598-427">应当为 <see langword="MethodBuilder" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-427">This should be a <see langword="MethodBuilder" /> object.</span>
          </span>
        </param>
        <param name="methodInfoDeclaration">
          <span data-ttu-id="16598-428">要使用其声明的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-428">The method whose declaration is to be used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-429">指定实现给定方法声明的给定方法体（可能使用其他名称）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-429">Specifies a given method body that implements a given method declaration, potentially with a different name.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-430">不要使用此方法以发出方法重写或接口实现。</span><span class="sxs-lookup"><span data-stu-id="16598-430">Do not use this method to emit method overrides or interface implementations.</span></span> <span data-ttu-id="16598-431">若要重写基类方法或实现接口方法，只需发出具有相同名称和签名的方法作为方法重写或实现，如下面的代码示例中所示。</span><span class="sxs-lookup"><span data-stu-id="16598-431">To override a method of a base class or to implement a method of an interface, simply emit a method with the same name and signature as the method to be overridden or implemented, as demonstrated in the code example.</span></span>  
  
 <span data-ttu-id="16598-432"><xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A>方法正文和一个方法声明具有不同的名称时可使用方法。</span><span class="sxs-lookup"><span data-stu-id="16598-432">The <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is used when a method body and a method declaration have different names.</span></span> <span data-ttu-id="16598-433">例如，一个类可能会重写基类方法，并还提供单独实现接口成员的具有相同的名称，如下面的代码示例中所示。</span><span class="sxs-lookup"><span data-stu-id="16598-433">For example, a class might override a base class method and also provide a separate implementation for an interface member with the same name, as demonstrated in the code example.</span></span>  
  
 <span data-ttu-id="16598-434">`DefineMethodOverride` 定义`methodimpl`，其中包含元数据标记的对。</span><span class="sxs-lookup"><span data-stu-id="16598-434">`DefineMethodOverride` defines a `methodimpl`, which consists of a pair of metadata tokens.</span></span> <span data-ttu-id="16598-435">实现，并正文实现声明的其他令牌点到点一个令牌。</span><span class="sxs-lookup"><span data-stu-id="16598-435">One token points to an implementation, and the other token points to a declaration that the body implements.</span></span> <span data-ttu-id="16598-436">必须在此方法实现定义，类型上定义正文和主体必须是虚拟 (`Overridable`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="16598-436">The body must be defined on the type the method impl is defined on, and the body must be virtual (`Overridable` in Visual Basic).</span></span> <span data-ttu-id="16598-437">声明可为在按类型、 派生的类、 方法或类型中定义的方法实现的接口上定义的方法。</span><span class="sxs-lookup"><span data-stu-id="16598-437">The declaration can be made to a method defined on an interface implemented by the type, a method on a derived class, or a method defined in the type.</span></span> <span data-ttu-id="16598-438">如果该声明是在仅接口上，都将更改为此接口定义的槽。</span><span class="sxs-lookup"><span data-stu-id="16598-438">If the declaration is on an interface only, the slot defined for the interface is altered.</span></span> <span data-ttu-id="16598-439">如果声明由基类型上的方法，重写该方法的槽，并还替换重写方法的任何重复项。</span><span class="sxs-lookup"><span data-stu-id="16598-439">If the declaration is made to a method on a base type, the slot for the method is overridden and any duplicates for the overridden method are also replaced.</span></span> <span data-ttu-id="16598-440">重写的方法不能声明的实际方法。</span><span class="sxs-lookup"><span data-stu-id="16598-440">The overridden method cannot be the actual method that is declared.</span></span> <span data-ttu-id="16598-441">如果该方法是在相同的类型，替换槽，并重写的替换方法的任何重复项。</span><span class="sxs-lookup"><span data-stu-id="16598-441">If the method is on the same type, the slot is replaced and any duplicates for the replaced methods are overridden.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-442">方法 impls 有关的详细信息，请参阅`MethodImpl`ECMA Partition II 元数据文档中。</span><span class="sxs-lookup"><span data-stu-id="16598-442">For more information about method impls, see `MethodImpl` in the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="16598-443">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="16598-443">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="16598-444">后<xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A>调用方法时，某些功能的`methodInfoBody`不能更改。</span><span class="sxs-lookup"><span data-stu-id="16598-444">After the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is called, some features of `methodInfoBody` cannot be changed.</span></span> <span data-ttu-id="16598-445">例如，不能将特性应用于泛型类型参数的`methodInfoBody`使用<xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-445">For example, you cannot apply an attribute to a generic type parameter of `methodInfoBody` by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method.</span></span> <span data-ttu-id="16598-446">如果必须使用<xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A>方法，这样做的所有特性后`methodInfoBody`已定义。</span><span class="sxs-lookup"><span data-stu-id="16598-446">If you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method, do so after all characteristics of `methodInfoBody` have been defined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-447">下面的代码示例包含一个接口`I`与方法`M()`，基类`A`实现接口，以及派生的类`C`可重写的基类实现`M()`以及提供的单独显式实现`I.M()`。</span><span class="sxs-lookup"><span data-stu-id="16598-447">The following code example contains an interface `I` with a method `M()`, a base class `A` that implements the interface, and a derived class `C` that overrides the base class implementation of `M()` and also provides a separate explicit implementation of `I.M()`.</span></span>  
  
 <span data-ttu-id="16598-448">`main()`方法中的代码示例演示如何发出派生的类`C`。</span><span class="sxs-lookup"><span data-stu-id="16598-448">The `main()` method of the code example shows how to emit the derived class `C`.</span></span> <span data-ttu-id="16598-449">重写`A.M()`只需通过发出一种方法来完成`M()`具有相同签名。</span><span class="sxs-lookup"><span data-stu-id="16598-449">The override of `A.M()` is accomplished simply by emitting a method `M()` with the same signature.</span></span> <span data-ttu-id="16598-450">但是，若要提供的单独实现`I.M()`，你必须定义的方法体，然后使用<xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A>方法以将该方法正文，其中含有相关联<xref:System.Reflection.MethodInfo>表示`I.M()`。</span><span class="sxs-lookup"><span data-stu-id="16598-450">However, to provide a separate implementation of `I.M()`, you must define a method body and then use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method to associate that method body with a <xref:System.Reflection.MethodInfo> representing `I.M()`.</span></span> <span data-ttu-id="16598-451">方法体的名称并不重要。</span><span class="sxs-lookup"><span data-stu-id="16598-451">The name of the method body does not matter.</span></span>  
  
 <span data-ttu-id="16598-452">代码示例创建发出类的实例。</span><span class="sxs-lookup"><span data-stu-id="16598-452">The code example creates an instance of the emitted class.</span></span> <span data-ttu-id="16598-453">它获取<xref:System.Reflection.MethodInfo>对象`I.M()`，并使用它来调用发出的类的显式接口实现。</span><span class="sxs-lookup"><span data-stu-id="16598-453">It obtains a <xref:System.Reflection.MethodInfo> object for `I.M()`, and uses it to invoke the emitted class's explicit interface implementation.</span></span> <span data-ttu-id="16598-454">然后，它获取<xref:System.Reflection.MethodInfo>对象`A.M()`，并使用它来调用该方法发出的类重写。</span><span class="sxs-lookup"><span data-stu-id="16598-454">It then obtains a <xref:System.Reflection.MethodInfo> object for `A.M()`, and uses it to invoke the emitted class's override of that method.</span></span>  
  
 [!code-cpp[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/cpp/source.cpp#1)]
 [!code-csharp[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/cs/source.cs#1)]
 [!code-vb[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-455">
            <paramref name="methodInfoBody" /> 不属于此类。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-455">
              <paramref name="methodInfoBody" /> does not belong to this class.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-456">
            <paramref name="methodInfoBody" /> 或 <paramref name="methodInfoDeclaration" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-456">
              <paramref name="methodInfoBody" /> or <paramref name="methodInfoDeclaration" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-457">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-457">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="16598-458">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-458">-or-</span>
          </span>
          <span data-ttu-id="16598-459">
            <paramref name="methodInfoBody" /> 的声明类型不是此 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 表示的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-459">The declaring type of <paramref name="methodInfoBody" /> is not the type represented by this <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineNestedType">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16598-460">定义嵌套类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-460">Defines a nested type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-461">类型的短名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-461">The short name of the type.</span>
          </span>
          <span data-ttu-id="16598-462">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-462">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-463">定义嵌套的类型，并给定其名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-463">Defines a nested type, given its name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-464">已定义的嵌套类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-464">The defined nested type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-465">此方法可以用于创建嵌套类型后仍<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>已经对封闭类型调用方法。</span><span class="sxs-lookup"><span data-stu-id="16598-465">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="16598-466">嵌套的类型需要在完成后才可以反映对其使用<xref:System.Type.GetMembers%2A>， <xref:System.Type.GetNestedType%2A>，或<xref:System.Type.GetNestedTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="16598-466">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="16598-467">请参阅说明<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>嵌套的类型和嵌套类型应完成的顺序。</span><span class="sxs-lookup"><span data-stu-id="16598-467">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="16598-468">重复的名称不一定创建如果`name`等同于以前定义的类型或嵌套的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="16598-468">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="16598-469">若要重复项的完整名称必须相同，包括命名空间和所有嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="16598-469">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-470">
            <paramref name="name" /> 长度为零或大于 1023。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-470">Length of <paramref name="name" /> is zero or greater than 1023.</span>
          </span>
          <span data-ttu-id="16598-471">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-471">-or-</span>
          </span>
          <span data-ttu-id="16598-472">此操作将在当前程序集中创建一个具有重复 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-472">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-473">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-473">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-474">类型的短名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-474">The short name of the type.</span>
          </span>
          <span data-ttu-id="16598-475">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-475">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attr">
          <span data-ttu-id="16598-476">此类型的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-476">The attributes of the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-477">已知名称和属性，定义嵌套类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-477">Defines a nested type, given its name and attributes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-478">已定义的嵌套类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-478">The defined nested type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-479">此方法可以用于创建嵌套类型后仍<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>已经对封闭类型调用方法。</span><span class="sxs-lookup"><span data-stu-id="16598-479">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="16598-480">嵌套的类型需要在完成后才可以反映对其使用<xref:System.Type.GetMembers%2A>， <xref:System.Type.GetNestedType%2A>，或<xref:System.Type.GetNestedTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="16598-480">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="16598-481">请参阅说明<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>嵌套的类型和嵌套类型应完成的顺序。</span><span class="sxs-lookup"><span data-stu-id="16598-481">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="16598-482">重复的名称不一定创建如果`name`等同于以前定义的类型或嵌套的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="16598-482">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="16598-483">若要重复项的完整名称必须相同，包括命名空间和所有嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="16598-483">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-484">未指定嵌套属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-484">The nested attribute is not specified.</span>
          </span>
          <span data-ttu-id="16598-485">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-485">-or-</span>
          </span>
          <span data-ttu-id="16598-486">此类型已密封。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-486">This type is sealed.</span>
          </span>
          <span data-ttu-id="16598-487">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-487">-or-</span>
          </span>
          <span data-ttu-id="16598-488">此类型是一个数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-488">This type is an array.</span>
          </span>
          <span data-ttu-id="16598-489">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-489">-or-</span>
          </span>
          <span data-ttu-id="16598-490">此类型是一个接口，但嵌套类型不是一个接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-490">This type is an interface, but the nested type is not an interface.</span>
          </span>
          <span data-ttu-id="16598-491">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-491">-or-</span>
          </span>
          <span data-ttu-id="16598-492">
            <paramref name="name" /> 的长度为零或大于 1023。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-492">The length of <paramref name="name" /> is zero or greater than 1023.</span>
          </span>
          <span data-ttu-id="16598-493">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-493">-or-</span>
          </span>
          <span data-ttu-id="16598-494">此操作将在当前程序集中创建一个具有重复 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-494">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-495">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-495">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-496">类型的短名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-496">The short name of the type.</span>
          </span>
          <span data-ttu-id="16598-497">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-497">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attr">
          <span data-ttu-id="16598-498">此类型的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-498">The attributes of the type.</span>
          </span>
        </param>
        <param name="parent">
          <span data-ttu-id="16598-499">此嵌套类型扩展的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-499">The type that the nested type extends.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-500">定义嵌套类型，其名称、属性以及它所扩展的类型已给定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-500">Defines a nested type, given its name, attributes, and the type that it extends.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-501">已定义的嵌套类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-501">The defined nested type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-502">此方法可以用于创建嵌套类型后仍<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>已经对封闭类型调用方法。</span><span class="sxs-lookup"><span data-stu-id="16598-502">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="16598-503">嵌套的类型需要在完成后才可以反映对其使用<xref:System.Type.GetMembers%2A>， <xref:System.Type.GetNestedType%2A>，或<xref:System.Type.GetNestedTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="16598-503">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="16598-504">请参阅说明<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>嵌套的类型和嵌套类型应完成的顺序。</span><span class="sxs-lookup"><span data-stu-id="16598-504">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="16598-505">重复的名称不一定创建如果`name`等同于以前定义的类型或嵌套的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="16598-505">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="16598-506">若要重复项的完整名称必须相同，包括命名空间和所有嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="16598-506">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-507">未指定嵌套属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-507">The nested attribute is not specified.</span>
          </span>
          <span data-ttu-id="16598-508">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-508">-or-</span>
          </span>
          <span data-ttu-id="16598-509">此类型已密封。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-509">This type is sealed.</span>
          </span>
          <span data-ttu-id="16598-510">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-510">-or-</span>
          </span>
          <span data-ttu-id="16598-511">此类型是一个数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-511">This type is an array.</span>
          </span>
          <span data-ttu-id="16598-512">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-512">-or-</span>
          </span>
          <span data-ttu-id="16598-513">此类型是一个接口，但嵌套类型不是一个接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-513">This type is an interface, but the nested type is not an interface.</span>
          </span>
          <span data-ttu-id="16598-514">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-514">-or-</span>
          </span>
          <span data-ttu-id="16598-515">
            <paramref name="name" /> 的长度为零或大于 1023。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-515">The length of <paramref name="name" /> is zero or greater than 1023.</span>
          </span>
          <span data-ttu-id="16598-516">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-516">-or-</span>
          </span>
          <span data-ttu-id="16598-517">此操作将在当前程序集中创建一个具有重复 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-517">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-518">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-518">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, int typeSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, int32 typeSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, typeSize As Integer) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, int typeSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="typeSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-519">类型的短名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-519">The short name of the type.</span>
          </span>
          <span data-ttu-id="16598-520">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-520">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attr">
          <span data-ttu-id="16598-521">此类型的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-521">The attributes of the type.</span>
          </span>
        </param>
        <param name="parent">
          <span data-ttu-id="16598-522">此嵌套类型扩展的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-522">The type that the nested type extends.</span>
          </span>
        </param>
        <param name="typeSize">
          <span data-ttu-id="16598-523">此类型的总大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-523">The total size of the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-524">定义嵌套类型，其名称、属性、该类型的总大小以及它所扩展的类型已给定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-524">Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-525">已定义的嵌套类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-525">The defined nested type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-526">此方法可以用于创建嵌套类型后仍<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>已经对封闭类型调用方法。</span><span class="sxs-lookup"><span data-stu-id="16598-526">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="16598-527">嵌套的类型需要在完成后才可以反映对其使用<xref:System.Type.GetMembers%2A>， <xref:System.Type.GetNestedType%2A>，或<xref:System.Type.GetNestedTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="16598-527">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="16598-528">请参阅说明<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>嵌套的类型和嵌套类型应完成的顺序。</span><span class="sxs-lookup"><span data-stu-id="16598-528">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="16598-529">重复的名称不一定创建如果`name`等同于以前定义的类型或嵌套的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="16598-529">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="16598-530">若要重复项的完整名称必须相同，包括命名空间和所有嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="16598-530">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-531">未指定嵌套属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-531">The nested attribute is not specified.</span>
          </span>
          <span data-ttu-id="16598-532">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-532">-or-</span>
          </span>
          <span data-ttu-id="16598-533">此类型已密封。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-533">This type is sealed.</span>
          </span>
          <span data-ttu-id="16598-534">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-534">-or-</span>
          </span>
          <span data-ttu-id="16598-535">此类型是一个数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-535">This type is an array.</span>
          </span>
          <span data-ttu-id="16598-536">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-536">-or-</span>
          </span>
          <span data-ttu-id="16598-537">此类型是一个接口，但嵌套类型不是一个接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-537">This type is an interface, but the nested type is not an interface.</span>
          </span>
          <span data-ttu-id="16598-538">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-538">-or-</span>
          </span>
          <span data-ttu-id="16598-539">
            <paramref name="name" /> 的长度为零或大于 1023。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-539">The length of <paramref name="name" /> is zero or greater than 1023.</span>
          </span>
          <span data-ttu-id="16598-540">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-540">-or-</span>
          </span>
          <span data-ttu-id="16598-541">此操作将在当前程序集中创建一个具有重复 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-541">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-542">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-542">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, valuetype System.Reflection.Emit.PackingSize packSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, packSize As PackingSize) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, System::Reflection::Emit::PackingSize packSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="packSize" Type="System.Reflection.Emit.PackingSize" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-543">类型的短名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-543">The short name of the type.</span>
          </span>
          <span data-ttu-id="16598-544">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-544">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attr">
          <span data-ttu-id="16598-545">此类型的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-545">The attributes of the type.</span>
          </span>
        </param>
        <param name="parent">
          <span data-ttu-id="16598-546">此嵌套类型扩展的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-546">The type that the nested type extends.</span>
          </span>
        </param>
        <param name="packSize">
          <span data-ttu-id="16598-547">此类型的封装大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-547">The packing size of the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-548">定义嵌套类型，其名称、属性、它所扩展的类型以及封装大小已给定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-548">Defines a nested type, given its name, attributes, the type that it extends, and the packing size.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-549">已定义的嵌套类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-549">The defined nested type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-550">此方法可以用于创建嵌套类型后仍<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>已经对封闭类型调用方法。</span><span class="sxs-lookup"><span data-stu-id="16598-550">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="16598-551">嵌套的类型需要在完成后才可以反映对其使用<xref:System.Type.GetMembers%2A>， <xref:System.Type.GetNestedType%2A>，或<xref:System.Type.GetNestedTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="16598-551">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="16598-552">请参阅说明<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>嵌套的类型和嵌套类型应完成的顺序。</span><span class="sxs-lookup"><span data-stu-id="16598-552">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="16598-553">重复的名称不一定创建如果`name`等同于以前定义的类型或嵌套的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="16598-553">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="16598-554">若要重复项的完整名称必须相同，包括命名空间和所有嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="16598-554">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-555">未指定嵌套属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-555">The nested attribute is not specified.</span>
          </span>
          <span data-ttu-id="16598-556">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-556">-or-</span>
          </span>
          <span data-ttu-id="16598-557">此类型已密封。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-557">This type is sealed.</span>
          </span>
          <span data-ttu-id="16598-558">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-558">-or-</span>
          </span>
          <span data-ttu-id="16598-559">此类型是一个数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-559">This type is an array.</span>
          </span>
          <span data-ttu-id="16598-560">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-560">-or-</span>
          </span>
          <span data-ttu-id="16598-561">此类型是一个接口，但嵌套类型不是一个接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-561">This type is an interface, but the nested type is not an interface.</span>
          </span>
          <span data-ttu-id="16598-562">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-562">-or-</span>
          </span>
          <span data-ttu-id="16598-563">
            <paramref name="name" /> 的长度为零或大于 1023。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-563">The length of <paramref name="name" /> is zero or greater than 1023.</span>
          </span>
          <span data-ttu-id="16598-564">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-564">-or-</span>
          </span>
          <span data-ttu-id="16598-565">此操作将在当前程序集中创建一个具有重复 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-565">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-566">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-566">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, Type[] interfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, class System.Type[] interfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, interfaces As Type()) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, cli::array &lt;Type ^&gt; ^ interfaces);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="interfaces" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-567">类型的短名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-567">The short name of the type.</span>
          </span>
          <span data-ttu-id="16598-568">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-568">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attr">
          <span data-ttu-id="16598-569">此类型的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-569">The attributes of the type.</span>
          </span>
        </param>
        <param name="parent">
          <span data-ttu-id="16598-570">此嵌套类型扩展的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-570">The type that the nested type extends.</span>
          </span>
        </param>
        <param name="interfaces">
          <span data-ttu-id="16598-571">此嵌套类型实现的接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-571">The interfaces that the nested type implements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-572">定义嵌套类型，其名称、属性、它所扩展的类型以及它所实现的接口已给定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-572">Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-573">已定义的嵌套类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-573">The defined nested type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-574">此方法可以用于创建嵌套类型后仍<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>已经对封闭类型调用方法。</span><span class="sxs-lookup"><span data-stu-id="16598-574">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="16598-575">嵌套的类型需要在完成后才可以反映对其使用<xref:System.Type.GetMembers%2A>， <xref:System.Type.GetNestedType%2A>，或<xref:System.Type.GetNestedTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="16598-575">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="16598-576">请参阅说明<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>嵌套的类型和嵌套类型应完成的顺序。</span><span class="sxs-lookup"><span data-stu-id="16598-576">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="16598-577">重复的名称不一定创建如果`name`等同于以前定义的类型或嵌套的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="16598-577">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="16598-578">若要重复项的完整名称必须相同，包括命名空间和所有嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="16598-578">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-579">未指定嵌套属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-579">The nested attribute is not specified.</span>
          </span>
          <span data-ttu-id="16598-580">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-580">-or-</span>
          </span>
          <span data-ttu-id="16598-581">此类型已密封。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-581">This type is sealed.</span>
          </span>
          <span data-ttu-id="16598-582">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-582">-or-</span>
          </span>
          <span data-ttu-id="16598-583">此类型是一个数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-583">This type is an array.</span>
          </span>
          <span data-ttu-id="16598-584">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-584">-or-</span>
          </span>
          <span data-ttu-id="16598-585">此类型是一个接口，但嵌套类型不是一个接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-585">This type is an interface, but the nested type is not an interface.</span>
          </span>
          <span data-ttu-id="16598-586">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-586">-or-</span>
          </span>
          <span data-ttu-id="16598-587">
            <paramref name="name" /> 的长度为零或大于 1023。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-587">The length of <paramref name="name" /> is zero or greater than 1023.</span>
          </span>
          <span data-ttu-id="16598-588">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-588">-or-</span>
          </span>
          <span data-ttu-id="16598-589">此操作将在当前程序集中创建一个具有重复 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-589">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-590">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-590">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="16598-591">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-591">-or-</span>
          </span>
          <span data-ttu-id="16598-592">
            <paramref name="interfaces" /> 数组的一个元素是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-592">An element of the <paramref name="interfaces" /> array is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packSize, int typeSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, valuetype System.Reflection.Emit.PackingSize packSize, int32 typeSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, packSize As PackingSize, typeSize As Integer) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, System::Reflection::Emit::PackingSize packSize, int typeSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="packSize" Type="System.Reflection.Emit.PackingSize" />
        <Parameter Name="typeSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-593">类型的短名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-593">The short name of the type.</span>
          </span>
          <span data-ttu-id="16598-594">
            <c>name</c> 不能包含嵌入的 null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-594">
              <c>name</c> cannot contain embedded null values.</span>
          </span>
        </param>
        <param name="attr">
          <span data-ttu-id="16598-595">此类型的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-595">The attributes of the type.</span>
          </span>
        </param>
        <param name="parent">
          <span data-ttu-id="16598-596">此嵌套类型扩展的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-596">The type that the nested type extends.</span>
          </span>
        </param>
        <param name="packSize">
          <span data-ttu-id="16598-597">此类型的封装大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-597">The packing size of the type.</span>
          </span>
        </param>
        <param name="typeSize">
          <span data-ttu-id="16598-598">此类型的总大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-598">The total size of the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-599">定义嵌套类型，指定其名称、 属性、 大小和它所扩展的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-599">Defines a nested type, given its name, attributes, size, and the type that it extends.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-600">已定义的嵌套类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-600">The defined nested type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefinePInvokeMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16598-601">定义 <see langword="PInvoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-601">Defines a <see langword="PInvoke" /> method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefinePInvokeMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefinePInvokeMethod(System::String ^ name, System::String ^ dllName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dllName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="nativeCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="nativeCharSet" Type="System.Runtime.InteropServices.CharSet" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-602">
            <see langword="PInvoke" /> 方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-602">The name of the <see langword="PInvoke" /> method.</span>
          </span>
          <span data-ttu-id="16598-603">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-603">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="dllName">
          <span data-ttu-id="16598-604">定义 <see langword="PInvoke" /> 方法所使用的 DLL 的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-604">The name of the DLL in which the <see langword="PInvoke" /> method is defined.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-605">方法的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-605">The attributes of the method.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="16598-606">方法的调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-606">The method's calling convention.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="16598-607">方法的返回类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-607">The method's return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="16598-608">方法参数的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-608">The types of the method's parameters.</span>
          </span>
        </param>
        <param name="nativeCallConv">
          <span data-ttu-id="16598-609">本地调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-609">The native calling convention.</span>
          </span>
        </param>
        <param name="nativeCharSet">
          <span data-ttu-id="16598-610">方法的本地字符集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-610">The method's native character set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-611">定义 <see langword="PInvoke" /> 方法，指定方法的名称、定义方法所使用的 DLL 的名称、方法的属性、方法的调用约定、 方法的返回类型、 方法的参数类型，以及 <see langword="PInvoke" /> 标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-611">Defines a <see langword="PInvoke" /> method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <see langword="PInvoke" /> flags.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-612">已定义的 <see langword="PInvoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-612">The defined <see langword="PInvoke" /> method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-613">某些 DLL 导入属性 (请参阅说明<xref:System.Runtime.InteropServices.DllImportAttribute>) 不能指定为此方法的自变量。</span><span class="sxs-lookup"><span data-stu-id="16598-613">Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method.</span></span> <span data-ttu-id="16598-614">例如，DLL 导入属性<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>必须之后添加`PInvoke`创建方法后，如果该方法返回一个值。</span><span class="sxs-lookup"><span data-stu-id="16598-614">For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> must be added after the `PInvoke` method is created, if the method returns a value.</span></span> <span data-ttu-id="16598-615">该示例演示如何执行此操作。</span><span class="sxs-lookup"><span data-stu-id="16598-615">The example shows how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-616">下面的示例演示如何使用<xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A>方法来创建`PInvoke`方法，以及如何添加<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>标志设为在创建后的方法实现标志<xref:System.Reflection.Emit.MethodBuilder>，通过使用<xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType>和<xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-616">The following example demonstrates how to use the <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="16598-617">若要获取非零返回值，必须添加<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="16598-617">To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="16598-618">该示例创建一个动态模块和单个类型的动态程序集`MyType`，包含`PInvoke`方法。</span><span class="sxs-lookup"><span data-stu-id="16598-618">The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method.</span></span> <span data-ttu-id="16598-619">`PInvoke`方法表示 Win32`GetTickCount`函数。</span><span class="sxs-lookup"><span data-stu-id="16598-619">The `PInvoke` method represents the Win32 `GetTickCount` function.</span></span>  
  
 <span data-ttu-id="16598-620">当运行示例时，它会执行`PInvoke`方法。</span><span class="sxs-lookup"><span data-stu-id="16598-620">When the example is run, it executes the `PInvoke` method.</span></span> <span data-ttu-id="16598-621">它还将为 PInvokeTest.dll 保存动态程序集。</span><span class="sxs-lookup"><span data-stu-id="16598-621">It also saves the dynamic assembly as PInvokeTest.dll.</span></span> <span data-ttu-id="16598-622">你可以使用[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)检查`MyType`类和`static`(`Shared`在 Visual Basic 中)`PInvoke`它包含的方法。</span><span class="sxs-lookup"><span data-stu-id="16598-622">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains.</span></span> <span data-ttu-id="16598-623">你可以编译使用静态的 Visual Basic 或 C# 程序`MyType.GetTickCount`方法包括对 DLL 的引用，当你运行 csc.exe 或 vbc.exe; 例如， `/r:PInvokeTest.dll`。</span><span class="sxs-lookup"><span data-stu-id="16598-623">You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.</span></span>  
  
 [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]
 [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]
 [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-624">此方法不是静态的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-624">The method is not static.</span>
          </span>
          <span data-ttu-id="16598-625">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-625">-or-</span>
          </span>
          <span data-ttu-id="16598-626">此父类型为一个接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-626">The parent type is an interface.</span>
          </span>
          <span data-ttu-id="16598-627">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-627">-or-</span>
          </span>
          <span data-ttu-id="16598-628">这种方法是抽象的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-628">The method is abstract.</span>
          </span>
          <span data-ttu-id="16598-629">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-629">-or-</span>
          </span>
          <span data-ttu-id="16598-630">此方法之前已定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-630">The method was previously defined.</span>
          </span>
          <span data-ttu-id="16598-631">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-631">-or-</span>
          </span>
          <span data-ttu-id="16598-632">
            <paramref name="name" /> 或 <paramref name="dllName" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-632">The length of <paramref name="name" /> or <paramref name="dllName" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-633">
            <paramref name="name" /> 或 <paramref name="dllName" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-633">
              <paramref name="name" /> or <paramref name="dllName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-634">之前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建包含类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-634">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefinePInvokeMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefinePInvokeMethod(System::String ^ name, System::String ^ dllName, System::String ^ entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dllName" Type="System.String" />
        <Parameter Name="entryName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="nativeCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="nativeCharSet" Type="System.Runtime.InteropServices.CharSet" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-635">
            <see langword="PInvoke" /> 方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-635">The name of the <see langword="PInvoke" /> method.</span>
          </span>
          <span data-ttu-id="16598-636">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-636">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="dllName">
          <span data-ttu-id="16598-637">定义 <see langword="PInvoke" /> 方法所使用的 DLL 的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-637">The name of the DLL in which the <see langword="PInvoke" /> method is defined.</span>
          </span>
        </param>
        <param name="entryName">
          <span data-ttu-id="16598-638">DLL 中入口点的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-638">The name of the entry point in the DLL.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-639">方法的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-639">The attributes of the method.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="16598-640">方法的调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-640">The method's calling convention.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="16598-641">方法的返回类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-641">The method's return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="16598-642">方法参数的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-642">The types of the method's parameters.</span>
          </span>
        </param>
        <param name="nativeCallConv">
          <span data-ttu-id="16598-643">本地调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-643">The native calling convention.</span>
          </span>
        </param>
        <param name="nativeCharSet">
          <span data-ttu-id="16598-644">方法的本地字符集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-644">The method's native character set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-645">定义 <see langword="PInvoke" /> 方法，指定方法的名称、定义方法所使用的 DLL 的名称、入口点名称、 方法的属性、方法的调用约定、 方法的返回类型、 方法的参数类型，以及 <see langword="PInvoke" /> 标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-645">Defines a <see langword="PInvoke" /> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <see langword="PInvoke" /> flags.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-646">已定义的 <see langword="PInvoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-646">The defined <see langword="PInvoke" /> method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-647">某些 DLL 导入属性 (请参阅说明<xref:System.Runtime.InteropServices.DllImportAttribute>) 不能指定为此方法的自变量。</span><span class="sxs-lookup"><span data-stu-id="16598-647">Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method.</span></span> <span data-ttu-id="16598-648">例如，DLL 导入属性<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>必须之后添加`PInvoke`创建方法后，如果该方法返回一个值。</span><span class="sxs-lookup"><span data-stu-id="16598-648">For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> must be added after the `PInvoke` method is created, if the method returns a value.</span></span> <span data-ttu-id="16598-649">该示例演示如何执行此操作。</span><span class="sxs-lookup"><span data-stu-id="16598-649">The example shows how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-650">下面的代码示例演示如何使用<xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A>方法来创建`PInvoke`方法，以及如何添加<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>标志设为在创建后的方法实现标志<xref:System.Reflection.Emit.MethodBuilder>，通过使用<xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType>和<xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-650">The following code example demonstrates how to use the <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="16598-651">若要获取非零返回值，必须添加<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="16598-651">To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="16598-652">该示例创建一个动态模块和单个类型的动态程序集`MyType`，包含`PInvoke`方法。</span><span class="sxs-lookup"><span data-stu-id="16598-652">The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method.</span></span> <span data-ttu-id="16598-653">`PInvoke`方法表示 Win32`GetTickCount`函数。</span><span class="sxs-lookup"><span data-stu-id="16598-653">The `PInvoke` method represents the Win32 `GetTickCount` function.</span></span>  
  
 <span data-ttu-id="16598-654">当运行示例时，它会执行`PInvoke`方法。</span><span class="sxs-lookup"><span data-stu-id="16598-654">When the example is run, it executes the `PInvoke` method.</span></span> <span data-ttu-id="16598-655">它还将为 PInvokeTest.dll 保存动态程序集。</span><span class="sxs-lookup"><span data-stu-id="16598-655">It also saves the dynamic assembly as PInvokeTest.dll.</span></span> <span data-ttu-id="16598-656">你可以使用[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)检查`MyType`类和`static`(`Shared`在 Visual Basic 中)`PInvoke`它包含的方法。</span><span class="sxs-lookup"><span data-stu-id="16598-656">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains.</span></span> <span data-ttu-id="16598-657">你可以编译使用静态的 Visual Basic 或 C# 程序`MyType.GetTickCount`方法包括对 DLL 的引用，当你运行 csc.exe 或 vbc.exe; 例如， `/r:PInvokeTest.dll`。</span><span class="sxs-lookup"><span data-stu-id="16598-657">You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.</span></span>  
  
 [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]
 [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]
 [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-658">此方法不是静态的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-658">The method is not static.</span>
          </span>
          <span data-ttu-id="16598-659">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-659">-or-</span>
          </span>
          <span data-ttu-id="16598-660">此父类型为一个接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-660">The parent type is an interface.</span>
          </span>
          <span data-ttu-id="16598-661">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-661">-or-</span>
          </span>
          <span data-ttu-id="16598-662">这种方法是抽象的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-662">The method is abstract.</span>
          </span>
          <span data-ttu-id="16598-663">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-663">-or-</span>
          </span>
          <span data-ttu-id="16598-664">此方法之前已定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-664">The method was previously defined.</span>
          </span>
          <span data-ttu-id="16598-665">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-665">-or-</span>
          </span>
          <span data-ttu-id="16598-666">
            <paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-666">The length of <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-667">
            <paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-667">
              <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-668">之前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建包含类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-668">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefinePInvokeMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefinePInvokeMethod(System::String ^ name, System::String ^ dllName, System::String ^ entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dllName" Type="System.String" />
        <Parameter Name="entryName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="nativeCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="nativeCharSet" Type="System.Runtime.InteropServices.CharSet" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-669">
            <see langword="PInvoke" /> 方法的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-669">The name of the <see langword="PInvoke" /> method.</span>
          </span>
          <span data-ttu-id="16598-670">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-670">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="dllName">
          <span data-ttu-id="16598-671">定义 <see langword="PInvoke" /> 方法所使用的 DLL 的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-671">The name of the DLL in which the <see langword="PInvoke" /> method is defined.</span>
          </span>
        </param>
        <param name="entryName">
          <span data-ttu-id="16598-672">DLL 中入口点的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-672">The name of the entry point in the DLL.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-673">方法的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-673">The attributes of the method.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="16598-674">方法的调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-674">The method's calling convention.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="16598-675">方法的返回类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-675">The method's return type.</span>
          </span>
        </param>
        <param name="returnTypeRequiredCustomModifiers">
          <span data-ttu-id="16598-676">一个类型数组，表示该方法的返回类型所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-676">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span>
          </span>
          <span data-ttu-id="16598-677">如果返回类型没有所需的自定义修饰符，则指定 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-677">If the return type has no required custom modifiers, specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnTypeOptionalCustomModifiers">
          <span data-ttu-id="16598-678">一个类型数组，表示该方法的返回类型的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-678">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span>
          </span>
          <span data-ttu-id="16598-679">如果返回类型没有可选的自定义修饰符，则指定 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-679">If the return type has no optional custom modifiers, specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="16598-680">方法参数的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-680">The types of the method's parameters.</span>
          </span>
        </param>
        <param name="parameterTypeRequiredCustomModifiers">
          <span data-ttu-id="16598-681">由类型数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-681">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="16598-682">每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-682">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="16598-683">如果某个特定参数没有所需的自定义修饰符，则指定 <see langword="null" />，而不要指定类型数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-683">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="16598-684">如果所有参数都没有所需的自定义修饰符，则指定 <see langword="null" />，而不要指定由数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-684">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <param name="parameterTypeOptionalCustomModifiers">
          <span data-ttu-id="16598-685">由类型数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-685">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="16598-686">每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-686">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="16598-687">如果某个特定参数没有可选的自定义修饰符，则指定 <see langword="null" />，而不要指定类型数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-687">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="16598-688">如果所有参数都没有可选的自定义修饰符，则指定 <see langword="null" />，而不要指定由数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-688">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <param name="nativeCallConv">
          <span data-ttu-id="16598-689">本地调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-689">The native calling convention.</span>
          </span>
        </param>
        <param name="nativeCharSet">
          <span data-ttu-id="16598-690">方法的本地字符集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-690">The method's native character set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-691">定义 <see langword="PInvoke" /> 方法，指定方法的名称、定义方法所使用的 DLL 的名称、入口点名称、方法的属性、方法的调用约定、方法的返回类型、方法的参数类型、<see langword="PInvoke" /> 标志，以及参数和返回类型的自定义修饰符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-691">Defines a <see langword="PInvoke" /> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the <see langword="PInvoke" /> flags, and custom modifiers for the parameters and return type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-692">一个 <see cref="T:System.Reflection.Emit.MethodBuilder" />，表示所定义的 <see langword="PInvoke" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-692">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the defined <see langword="PInvoke" /> method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-693">某些 DLL 导入属性 (请参阅说明<xref:System.Runtime.InteropServices.DllImportAttribute>) 不能指定为此方法的自变量。</span><span class="sxs-lookup"><span data-stu-id="16598-693">Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method.</span></span> <span data-ttu-id="16598-694">例如，DLL 导入属性<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>必须之后添加`PInvoke`创建方法后，如果该方法返回一个值。</span><span class="sxs-lookup"><span data-stu-id="16598-694">For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> must be added after the `PInvoke` method is created, if the method returns a value.</span></span> <span data-ttu-id="16598-695">该示例演示如何执行此操作。</span><span class="sxs-lookup"><span data-stu-id="16598-695">The example shows how to do this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-696">自定义修饰符的详细信息，请参阅 ECMA Partition II 元数据文档。</span><span class="sxs-lookup"><span data-stu-id="16598-696">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="16598-697">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="16598-697">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-698">下面的代码示例演示如何使用 [\]，类型\[\]，类型\[\]，类型\[\]\[\]，类型\[\] \<xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A > 方法来创建`PInvoke`方法，以及如何添加<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>标志设为在创建后的方法实现标志<xref:System.Reflection.Emit.MethodBuilder>，通过使用<xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType>和<xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-698">The following code example demonstrates how to use the [\], Type\[\], Type\[\], Type\[\]\[\], Type\[\]\<xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="16598-699">该示例创建一个动态模块和单个类型的动态程序集`MyType`，包含`PInvoke`方法。</span><span class="sxs-lookup"><span data-stu-id="16598-699">The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method.</span></span> <span data-ttu-id="16598-700">`PInvoke`方法表示 Win32`GetTickCount`函数。</span><span class="sxs-lookup"><span data-stu-id="16598-700">The `PInvoke` method represents the Win32 `GetTickCount` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="16598-701">若要获取非零返回值，必须添加<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="16598-701">To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-702">该示例使用的重载，并不指定自定义修饰符。</span><span class="sxs-lookup"><span data-stu-id="16598-702">The example uses an overload that does not specify custom modifiers.</span></span> <span data-ttu-id="16598-703">若要指定自定义修饰符，更改的示例代码以改为使用此方法重载。</span><span class="sxs-lookup"><span data-stu-id="16598-703">To specify custom modifiers, change the example code to use this method overload instead.</span></span>  
  
 <span data-ttu-id="16598-704">当运行示例时，它会执行`PInvoke`方法。</span><span class="sxs-lookup"><span data-stu-id="16598-704">When the example is run, it executes the `PInvoke` method.</span></span> <span data-ttu-id="16598-705">它还将为 PInvokeTest.dll 保存动态程序集。</span><span class="sxs-lookup"><span data-stu-id="16598-705">It also saves the dynamic assembly as PInvokeTest.dll.</span></span> <span data-ttu-id="16598-706">你可以使用[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)检查`MyType`类和`static`(`Shared`在 Visual Basic 中)`PInvoke`它包含的方法。</span><span class="sxs-lookup"><span data-stu-id="16598-706">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains.</span></span> <span data-ttu-id="16598-707">你可以编译使用静态的 Visual Basic 或 C# 程序`MyType.GetTickCount`方法包括对 DLL 的引用，当你运行 csc.exe 或 vbc.exe; 例如， `/r:PInvokeTest.dll`。</span><span class="sxs-lookup"><span data-stu-id="16598-707">You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.</span></span>  
  
 [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]
 [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]
 [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-708">此方法不是静态的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-708">The method is not static.</span>
          </span>
          <span data-ttu-id="16598-709">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-709">-or-</span>
          </span>
          <span data-ttu-id="16598-710">此父类型为一个接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-710">The parent type is an interface.</span>
          </span>
          <span data-ttu-id="16598-711">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-711">-or-</span>
          </span>
          <span data-ttu-id="16598-712">这种方法是抽象的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-712">The method is abstract.</span>
          </span>
          <span data-ttu-id="16598-713">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-713">-or-</span>
          </span>
          <span data-ttu-id="16598-714">此方法之前已定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-714">The method was previously defined.</span>
          </span>
          <span data-ttu-id="16598-715">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-715">-or-</span>
          </span>
          <span data-ttu-id="16598-716">
            <paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-716">The length of <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is zero.</span>
          </span>
          <span data-ttu-id="16598-717">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-717">-or-</span>
          </span>
          <span data-ttu-id="16598-718">
            <paramref name="parameterTypeRequiredCustomModifiers" /> 或 <paramref name="parameterTypeOptionalCustomModifiers" /> 的大小与 <paramref name="parameterTypes" /> 的大小不相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-718">The size of <paramref name="parameterTypeRequiredCustomModifiers" /> or <paramref name="parameterTypeOptionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-719">
            <paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-719">
              <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-720">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-720">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="16598-721">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-721">-or-</span>
          </span>
          <span data-ttu-id="16598-722">对于当前的动态类型，属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 的值为 <see langword="true" />，但属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 的值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-722">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineProperty">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16598-723">向此类型添加一个新的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-723">Adds a new property to the type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, returnType As Type, parameterTypes As Type()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-724">属性的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-724">The name of the property.</span>
          </span>
          <span data-ttu-id="16598-725">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-725">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-726">属性的特性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-726">The attributes of the property.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="16598-727">属性的返回类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-727">The return type of the property.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="16598-728">属性的参数类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-728">The types of the parameters of the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-729">将新属性添加到具有给定名称和属性签名的类型中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-729">Adds a new property to the type, with the given name and property signature.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-730">定义的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-730">The defined property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="16598-731">下面的代码示例演示如何定义的动态属性和获取<xref:System.Reflection.Emit.PropertyBuilder>规范。</span><span class="sxs-lookup"><span data-stu-id="16598-731">The following code sample demonstrates how to define a dynamic property and obtain a <xref:System.Reflection.Emit.PropertyBuilder> for specification.</span></span> <span data-ttu-id="16598-732">请注意，`PropertyBuilder`还必须具有相应<xref:System.Reflection.Emit.MethodBuilder>，以存放属性的 IL 逻辑。</span><span class="sxs-lookup"><span data-stu-id="16598-732">Note that a `PropertyBuilder` must also have a corresponding <xref:System.Reflection.Emit.MethodBuilder>, which will house the IL logic for the property.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-733">
            <paramref name="name" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-733">The length of <paramref name="name" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-734">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-734">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="16598-735">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-735">-or-</span>
          </span>
          <span data-ttu-id="16598-736">
            <paramref name="parameterTypes" /> 数组的任何元素都是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-736">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-737">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-737">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-738">属性的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-738">The name of the property.</span>
          </span>
          <span data-ttu-id="16598-739">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-739">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-740">属性的特性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-740">The attributes of the property.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="16598-741">属性访问器的调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-741">The calling convention of the property accessors.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="16598-742">属性的返回类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-742">The return type of the property.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="16598-743">属性的参数类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-743">The types of the parameters of the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-744">将新属性添加到具有给定名称、属性、调用约定和属性签名的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-744">Adds a new property to the type, with the given name, attributes, calling convention, and property signature.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-745">定义的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-745">The defined property.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-746">
            <paramref name="name" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-746">The length of <paramref name="name" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-747">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-747">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="16598-748">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-748">-or-</span>
          </span>
          <span data-ttu-id="16598-749">
            <paramref name="parameterTypes" /> 数组的任何元素都是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-749">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-750">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-750">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-751">属性的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-751">The name of the property.</span>
          </span>
          <span data-ttu-id="16598-752">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-752">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-753">属性的特性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-753">The attributes of the property.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="16598-754">属性的返回类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-754">The return type of the property.</span>
          </span>
        </param>
        <param name="returnTypeRequiredCustomModifiers">
          <span data-ttu-id="16598-755">一个类型数组，它表示属性的返回类型所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-755">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span>
          </span>
          <span data-ttu-id="16598-756">如果返回类型没有所需的自定义修饰符，则指定 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-756">If the return type has no required custom modifiers, specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnTypeOptionalCustomModifiers">
          <span data-ttu-id="16598-757">一个类型数组，它表示属性的返回类型的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-757">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span>
          </span>
          <span data-ttu-id="16598-758">如果返回类型没有可选的自定义修饰符，则指定 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-758">If the return type has no optional custom modifiers, specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="16598-759">属性的参数类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-759">The types of the parameters of the property.</span>
          </span>
        </param>
        <param name="parameterTypeRequiredCustomModifiers">
          <span data-ttu-id="16598-760">由类型数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-760">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="16598-761">每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-761">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="16598-762">如果某个特定参数没有所需的自定义修饰符，则指定 <see langword="null" />，而不要指定类型数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-762">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="16598-763">如果所有参数都没有所需的自定义修饰符，则指定 <see langword="null" />，而不要指定由数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-763">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <param name="parameterTypeOptionalCustomModifiers">
          <span data-ttu-id="16598-764">由类型数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-764">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="16598-765">每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-765">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="16598-766">如果某个特定参数没有可选的自定义修饰符，则指定 <see langword="null" />，而不要指定类型数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-766">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="16598-767">如果所有参数都没有可选的自定义修饰符，则指定 <see langword="null" />，而不要指定由数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-767">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-768">将新属性添加到具有给定名称、属性签名和自定义修饰符的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-768">Adds a new property to the type, with the given name, property signature, and custom modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-769">定义的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-769">The defined property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-770">此重载是为设计器提供的托管编译器。</span><span class="sxs-lookup"><span data-stu-id="16598-770">This overload is provided for designers of managed compilers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-771">自定义修饰符的详细信息，请参阅 ECMA Partition II 元数据文档。</span><span class="sxs-lookup"><span data-stu-id="16598-771">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="16598-772">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="16598-772">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-773">
            <paramref name="name" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-773">The length of <paramref name="name" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-774">
            <paramref name="name" /> 为 <see langword="null" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-774">
              <paramref name="name" /> is <see langword="null" /></span>
          </span>
          <span data-ttu-id="16598-775">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-775">-or-</span>
          </span>
          <span data-ttu-id="16598-776">
            <paramref name="parameterTypes" /> 数组的任何元素都是 <see langword="null" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-776">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" /></span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-777">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-777">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, callingConvention As CallingConventions, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-778">属性的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-778">The name of the property.</span>
          </span>
          <span data-ttu-id="16598-779">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-779">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-780">属性的特性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-780">The attributes of the property.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="16598-781">属性访问器的调用约定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-781">The calling convention of the property accessors.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="16598-782">属性的返回类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-782">The return type of the property.</span>
          </span>
        </param>
        <param name="returnTypeRequiredCustomModifiers">
          <span data-ttu-id="16598-783">一个类型数组，它表示属性的返回类型所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-783">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span>
          </span>
          <span data-ttu-id="16598-784">如果返回类型没有所需的自定义修饰符，则指定 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-784">If the return type has no required custom modifiers, specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnTypeOptionalCustomModifiers">
          <span data-ttu-id="16598-785">一个类型数组，它表示属性的返回类型的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-785">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span>
          </span>
          <span data-ttu-id="16598-786">如果返回类型没有可选的自定义修饰符，则指定 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-786">If the return type has no optional custom modifiers, specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="16598-787">属性的参数类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-787">The types of the parameters of the property.</span>
          </span>
        </param>
        <param name="parameterTypeRequiredCustomModifiers">
          <span data-ttu-id="16598-788">由类型数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-788">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="16598-789">每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-789">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="16598-790">如果某个特定参数没有所需的自定义修饰符，则指定 <see langword="null" />，而不要指定类型数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-790">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="16598-791">如果所有参数都没有所需的自定义修饰符，则指定 <see langword="null" />，而不要指定由数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-791">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <param name="parameterTypeOptionalCustomModifiers">
          <span data-ttu-id="16598-792">由类型数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-792">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="16598-793">每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-793">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="16598-794">如果某个特定参数没有可选的自定义修饰符，则指定 <see langword="null" />，而不要指定类型数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-794">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="16598-795">如果所有参数都没有可选的自定义修饰符，则指定 <see langword="null" />，而不要指定由数组组成的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-795">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-796">将新属性添加到具有给定名称、调用约定、属性签名和自定义修饰符的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-796">Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-797">定义的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-797">The defined property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-798">此重载是为设计器提供的托管编译器。</span><span class="sxs-lookup"><span data-stu-id="16598-798">This overload is provided for designers of managed compilers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-799">自定义修饰符的详细信息，请参阅 ECMA Partition II 元数据文档。</span><span class="sxs-lookup"><span data-stu-id="16598-799">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="16598-800">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="16598-800">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="16598-801">此方法重载在中引入[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]或更高版本。</span><span class="sxs-lookup"><span data-stu-id="16598-801">This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-802">
            <paramref name="name" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-802">The length of <paramref name="name" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-803">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-803">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="16598-804">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-804">-or-</span>
          </span>
          <span data-ttu-id="16598-805">
            <paramref name="parameterTypes" /> 数组的任何元素都是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-805">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-806">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-806">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineTypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineTypeInitializer () As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineTypeInitializer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16598-807">定义此类型的初始值设定项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-807">Defines the initializer for this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-808">返回类型初始值设定项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-808">Returns a type initializer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-809">初始值设定项创建始终是公共的。</span><span class="sxs-lookup"><span data-stu-id="16598-809">The initializer created is always public.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-810">下面的代码示例演示如何创建初始化构造函数使用`DefineTypeInitializer`。</span><span class="sxs-lookup"><span data-stu-id="16598-810">The following code sample demonstrates how to create an initialization constructor using `DefineTypeInitializer`.</span></span>  
  
 [!code-cpp[TypeBuilder_Properties1#3](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Properties1/CPP/typebuilder_properties.cpp#3)]
 [!code-csharp[TypeBuilder_Properties1#3](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Properties1/CS/typebuilder_properties.cs#3)]
 [!code-vb[TypeBuilder_Properties1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Properties1/VB/typebuilder_properties.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-811">之前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建包含类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-811">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineUninitializedData">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineUninitializedData (string name, int size, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineUninitializedData(string name, int32 size, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineUninitializedData (name As String, size As Integer, attributes As FieldAttributes) As FieldBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineUninitializedData(System::String ^ name, int size, System::Reflection::FieldAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-812">用于引用数据的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-812">The name used to refer to the data.</span>
          </span>
          <span data-ttu-id="16598-813">
            <c>name</c> 不能包含内嵌的 Null 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-813">
              <c>name</c> cannot contain embedded nulls.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="16598-814">数据字段的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-814">The size of the data field.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="16598-815">字段的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-815">The attributes for the field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-816">在可移植可执行 (PE) 文件的 <see langword=".sdata" /> 部分中定义未初始化的数据字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-816">Defines an uninitialized data field in the <see langword=".sdata" /> section of the portable executable (PE) file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-817">用于引用数据的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-817">A field to reference the data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-818">使用此方法创建的字段将为`static`，即使不包括`FieldAttributes.Static`中`attributes`参数。</span><span class="sxs-lookup"><span data-stu-id="16598-818">The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-819">下面的代码示例演示如何使用`DefineUninitializedData`在一个动态类型中创建一个未初始化的数据字段：</span><span class="sxs-lookup"><span data-stu-id="16598-819">The following code sample demonstrates the use of `DefineUninitializedData` to create an uninitialized data field in a dynamic type:</span></span>  
  
 [!code-cpp[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/CPP/typebuilder_defineuninitializeddata.cpp#1)]
 [!code-csharp[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/CS/typebuilder_defineuninitializeddata.cs#1)]
 [!code-vb[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/VB/typebuilder_defineuninitializeddata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-820">
            <paramref name="name" /> 的长度为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-820">Length of <paramref name="name" /> is zero.</span>
          </span>
          <span data-ttu-id="16598-821">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-821">-or-</span>
          </span>
          <span data-ttu-id="16598-822">
            <paramref name="size" /> 小于或等于零，或者大于或等于 0x003f0000。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-822">
              <paramref name="size" /> is less than or equal to zero, or greater than or equal to 0x003f0000.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-823">
            <paramref name="name" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-823">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-824">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-824">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-825">检索此类型的完整路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-825">Retrieves the full path of this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-826">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-826">Read-only.</span>
          </span>
          <span data-ttu-id="16598-827">检索此类型的完整路径。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-827">Retrieves the full path of this type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-828">返回的格式为嵌套的类型和非嵌套类型"typeName"是"全名 + 名"。</span><span class="sxs-lookup"><span data-stu-id="16598-828">The returned format is "enclosingTypeFullName+nestedTypeName" for nested types and "typeName" for non-nested types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-829">获取一个值，该值指示当前泛型类型参数的协变和特殊约束。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-829">Gets a value that indicates the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-830">
            <see cref="T:System.Reflection.GenericParameterAttributes" /> 值的按位组合，用于描述当前泛型类型参数的协变和特殊约束。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-830">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="16598-831">在发出代码时，由表示泛型类型参数<xref:System.Reflection.Emit.GenericTypeParameterBuilder>对象而不是<xref:System.Reflection.Emit.TypeBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="16598-831">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public override int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-832">获取声明参数的泛型类型的类型参数列表中的类型参数位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-832">Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-833">如果当前 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 对象表示一个泛型类型参数，则为类型参数在声明它的泛型类型的类型参数列表中的位置；否则为未定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-833">If the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="16598-834">在发出代码时，由表示泛型类型参数<xref:System.Reflection.Emit.GenericTypeParameterBuilder>对象而不是<xref:System.Reflection.Emit.TypeBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="16598-834">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="16598-835">如果当前<xref:System.Reflection.Emit.TypeBuilder>不表示泛型类型参数，此属性的值是不确定。</span><span class="sxs-lookup"><span data-stu-id="16598-835">If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent a generic type parameter, the value of this property is undefined.</span></span> <span data-ttu-id="16598-836">使用<xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A>属性来确定是否当前<xref:System.Reflection.Emit.TypeBuilder>表示泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="16598-836">Use the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property to determine whether the current <xref:System.Reflection.Emit.TypeBuilder> represents a generic type parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public override Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public override int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetArrayRank();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public static System.Reflection.ConstructorInfo GetConstructor (Type type, System.Reflection.ConstructorInfo constructor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.ConstructorInfo GetConstructor(class System.Type type, class System.Reflection.ConstructorInfo constructor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::ConstructorInfo ^ GetConstructor(Type ^ type, System::Reflection::ConstructorInfo ^ constructor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="16598-837">已返回其构造函数的构造泛型类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-837">The constructed generic type whose constructor is returned.</span>
          </span>
        </param>
        <param name="constructor">
          <span data-ttu-id="16598-838">
            <c>type</c> 的泛型类型定义的构造函数指定要返回的 <c>type</c> 的构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-838">A constructor on the generic type definition of <c>type</c>, which specifies which constructor of <c>type</c> to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-839">返回与指定泛型类型定义的构造函数相对应的指定构造泛型类型的构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-839">Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-840">
            <see cref="T:System.Reflection.ConstructorInfo" /> 对象，它表示与 <paramref name="constructor" /> 对应的 <paramref name="type" /> 的构造函数，它指定属于 <paramref name="type" /> 的泛型类型定义的构造函数 。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-840">A <see cref="T:System.Reflection.ConstructorInfo" /> object that represents the constructor of <paramref name="type" /> corresponding to <paramref name="constructor" />, which specifies a constructor belonging to the generic type definition of <paramref name="type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-841"><xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A>方法使您能够获取<xref:System.Reflection.ConstructorInfo>表示由其泛型类型定义构造的泛型类型的构造函数的对象<xref:System.Reflection.Emit.TypeBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="16598-841">The <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method provides a way to get a <xref:System.Reflection.ConstructorInfo> object that represents a constructor of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="16598-842">例如，假设你有<xref:System.Reflection.Emit.TypeBuilder>对象，表示类型`G<T>`中 C# 语法 (`G(Of T)`在 Visual Basic 中，`generic <T> ref class G`在 c + +) 和一个<xref:System.Reflection.Emit.ConstructorBuilder>表示的构造函数的对象`G<T>`。</span><span class="sxs-lookup"><span data-stu-id="16598-842">For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.ConstructorBuilder> object that represents a constructor of `G<T>`.</span></span> <span data-ttu-id="16598-843">假设`G<T>`已具有类型参数的泛型方法`U`创建构造类型的实例`G<U>`。</span><span class="sxs-lookup"><span data-stu-id="16598-843">Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>`.</span></span> <span data-ttu-id="16598-844">若要发出代码以创建构造类型的实例，你需要<xref:System.Reflection.ConstructorInfo>对象，表示此构造函数构造类型-换而言之，创建的实例`G<U>`。</span><span class="sxs-lookup"><span data-stu-id="16598-844">In order to emit the code to create an instance of the constructed type, you need a <xref:System.Reflection.ConstructorInfo> object that represents the constructor of this constructed type — in other words, that creates an instance of `G<U>`.</span></span> <span data-ttu-id="16598-845">若要这样做，请先调用<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法<xref:System.Reflection.Emit.TypeBuilder>对象，指定<xref:System.Reflection.Emit.GenericTypeParameterBuilder>对象，表示`U`作为类型参数。</span><span class="sxs-lookup"><span data-stu-id="16598-845">To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument.</span></span> <span data-ttu-id="16598-846">然后调用<xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A>方法的返回值替换<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>作为参数的方法`type`和<xref:System.Reflection.Emit.ConstructorBuilder>表示的构造函数的对象`G<U>`作为参数`constructor`。</span><span class="sxs-lookup"><span data-stu-id="16598-846">Then call the <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.ConstructorBuilder> object that represents the constructor of `G<U>` as parameter `constructor`.</span></span> <span data-ttu-id="16598-847">返回值是<xref:System.Reflection.ConstructorInfo>对象需要发出该函数调用。</span><span class="sxs-lookup"><span data-stu-id="16598-847">The return value is the <xref:System.Reflection.ConstructorInfo> object you need to emit the function call.</span></span> <span data-ttu-id="16598-848">下面的代码示例演示此方案。</span><span class="sxs-lookup"><span data-stu-id="16598-848">The code example demonstrates this scenario.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-849">下面的代码示例包含一个名为的泛型类的源代码`Sample`具有一个名为的类型参数`T`。</span><span class="sxs-lookup"><span data-stu-id="16598-849">The following code example contains source code for a generic class named `Sample` that has a type parameter named `T`.</span></span> <span data-ttu-id="16598-850">此类具有名为的字段`Field`，类型的`T`，和一个名为的泛型方法`GM`包含其自身类型参数，名为`U`。</span><span class="sxs-lookup"><span data-stu-id="16598-850">The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`.</span></span> <span data-ttu-id="16598-851">方法`GM`创建的实例`Sample`，其自身类型参数替换`U`的类型参数`Sample`，并将存储在其输入的参数`Field`。</span><span class="sxs-lookup"><span data-stu-id="16598-851">Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="16598-852">编译但不是使用此类源代码你可以查看其与[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)和将其与发出的类的代码比较`Example`。</span><span class="sxs-lookup"><span data-stu-id="16598-852">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="16598-853">类中的代码`Example`演示如何使用<xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A>方法发出泛型的代码。</span><span class="sxs-lookup"><span data-stu-id="16598-853">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method to emit generic code.</span></span> <span data-ttu-id="16598-854">`Main`类的方法`Example`创建动态程序集包含一个名为类`Sample`并使用<xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A>方法，以使泛型通过添加一个名为的类型参数`T`。</span><span class="sxs-lookup"><span data-stu-id="16598-854">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample` and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="16598-855">默认构造函数和一个名为字段`Field`，类型的`T`，添加到类`Sample`。</span><span class="sxs-lookup"><span data-stu-id="16598-855">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="16598-856">一种方法`GM`添加并通过使用转变为泛型方法<xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-856">A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="16598-857">类型参数`GM`名为`U`。</span><span class="sxs-lookup"><span data-stu-id="16598-857">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="16598-858">定义类型参数后的签名`GM`通过使用添加<xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-858">After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="16598-859">没有没有返回类型，并且无需或自定义修饰符，因此，所有此方法的参数是`null`除`parameterTypes`;`parameterTypes`设置到该方法的唯一参数的类型`U`，该方法的泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="16598-859">There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter.</span></span> <span data-ttu-id="16598-860">方法的主体创建的构造类型的实例`Sample<U>`(`Sample(Of U)`在 Visual Basic 中)，将分配到该方法的参数`Field`，，然后输出的值`Field`。</span><span class="sxs-lookup"><span data-stu-id="16598-860">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="16598-861"><xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A>方法用于创建<xref:System.Reflection.ConstructorInfo>，表示构造泛型类型的默认构造函数`Sample<U>`中<xref:System.Reflection.Emit.OpCodes.Newobj?displayProperty=nameWithType>创建实例的指令。</span><span class="sxs-lookup"><span data-stu-id="16598-861">The <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method is used to create a <xref:System.Reflection.ConstructorInfo> that represents the default constructor of the constructed generic type `Sample<U>` in the <xref:System.Reflection.Emit.OpCodes.Newobj?displayProperty=nameWithType> instruction that creates the instance.</span></span>  
  
 <span data-ttu-id="16598-862">定义一个虚拟类型以容纳入口点方法`Main`。</span><span class="sxs-lookup"><span data-stu-id="16598-862">A dummy type is defined to hold the entry-point method `Main`.</span></span> <span data-ttu-id="16598-863">正文中`Main`，静态`GM`方法调用的构造泛型类型上`Sample<int>`(`Sample(Of Integer)`在 Visual Basic 中)，与类型<xref:System.String>替换为`U`。</span><span class="sxs-lookup"><span data-stu-id="16598-863">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span>  
  
 <span data-ttu-id="16598-864">当运行时的代码示例时，它将发出的程序集保存为 TypeBuilderGetFieldExample.exe。</span><span class="sxs-lookup"><span data-stu-id="16598-864">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="16598-865">你可以运行 TypeBuilderGetFieldExample.exe，并可以使用[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)要比较的代码发出的代码`Sample`编译到其自身的代码示例的类。</span><span class="sxs-lookup"><span data-stu-id="16598-865">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-866">
            <paramref name="type" /> 不表示泛型类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-866">
              <paramref name="type" /> does not represent a generic type.</span>
          </span>
          <span data-ttu-id="16598-867">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-867">-or-</span>
          </span>
          <span data-ttu-id="16598-868">
            <paramref name="type" /> 的类型不是 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-868">
              <paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span>
          </span>
          <span data-ttu-id="16598-869">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-869">-or-</span>
          </span>
          <span data-ttu-id="16598-870">
            <paramref name="constructor" /> 的声明类型不是一个泛型类型定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-870">The declaring type of <paramref name="constructor" /> is not a generic type definition.</span>
          </span>
          <span data-ttu-id="16598-871">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-871">-or-</span>
          </span>
          <span data-ttu-id="16598-872">
            <paramref name="constructor" /> 的声明类型不是 <paramref name="type" /> 的泛型类型定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-872">The declaring type of <paramref name="constructor" /> is not the generic type definition of <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="16598-873">这必须是 <see cref="T:System.Reflection.BindingFlags" /> 中的位标志，类似于 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等中的位标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-873">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-874">按照指定，返回 <see cref="T:System.Reflection.ConstructorInfo" /> 对象的数组，表示为此类定义的公共和非公共构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-874">Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the public and non-public constructors defined for this class, as specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-875">返回 <see cref="T:System.Reflection.ConstructorInfo" /> 对象的数组，表示为此类定义的指定构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-875">Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the specified constructors defined for this class.</span>
          </span>
          <span data-ttu-id="16598-876">如果未定义任何构造函数，则返回一个空数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-876">If no constructors are defined, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-877">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-877">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-878">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-878">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16598-879">返回为此类型定义的自定义属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-879">Returns the custom attributes defined for this type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="16598-880">指定是否搜索此成员的继承链以查找属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-880">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-881">返回为此类型定义的所有自定义属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-881">Returns all the custom attributes defined for this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-882">返回一个对象数组，其中的对象表示此类型的所有自定义属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-882">Returns an array of objects representing all the custom attributes of this type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-883">不完整类型目前不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-883">This method is not currently supported for incomplete types.</span>
          </span>
          <span data-ttu-id="16598-884">使用 <see cref="M:System.Type.GetType" /> 检索此类型，并对返回的 <see cref="T:System.Type" /> 调用 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-884">Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="16598-885">要搜索的属性的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-885">The type of attribute to search for.</span>
          </span>
          <span data-ttu-id="16598-886">仅返回可分配给此类型的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-886">Only attributes that are assignable to this type are returned.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="16598-887">指定是否搜索此成员的继承链以查找属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-887">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-888">返回当前类型的所有自定义属性，该属性可分配给指定类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-888">Returns all the custom attributes of the current type that are assignable to a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-889">在当前类型上定义的自定义属性数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-889">An array of custom attributes defined on the current type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-890">不完整类型目前不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-890">This method is not currently supported for incomplete types.</span>
          </span>
          <span data-ttu-id="16598-891">使用 <see cref="M:System.Type.GetType" /> 检索此类型，并对返回的 <see cref="T:System.Type" /> 调用 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-891">Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Type" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-892">
            <paramref name="attributeType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-892">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-893">该类型必须是由基础运行时系统提供的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-893">The type must be a type provided by the underlying runtime system.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public override Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetElementType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16598-894">调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-894">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-895">不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-895">This method is not supported.</span>
          </span>
          <span data-ttu-id="16598-896">不返回任何值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-896">No value is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-897">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-897">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-898">不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-898">This method is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-899">要搜索的事件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-899">The name of the event to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="16598-900">用于限制搜索的 <see cref="T:System.Reflection.BindingFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-900">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limits the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-901">返回具有指定名称的事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-901">Returns the event with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-902">一个 <see cref="T:System.Reflection.EventInfo" /> 对象，表示这个指定名称的类型声明或继承的事件；如果没有匹配项，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-902">An <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name, or <see langword="null" /> if there are no matches.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-903">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-903">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-904">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-904">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16598-905">返回由当前 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 定义的事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-905">Returns the events defined by the current <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16598-906">返回此类型声明或继承的公共事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-906">Returns the public events declared or inherited by this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-907">返回 <see cref="T:System.Reflection.EventInfo" /> 对象的数组，表示此类型声明或继承的公共事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-907">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public events declared or inherited by this type.</span>
          </span>
          <span data-ttu-id="16598-908">如果没有任何公共事件，则返回一个空数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-908">An empty array is returned if there are no public events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-909">检索类型使用<xref:System.Type.GetType%2A>或<xref:System.Reflection.Assembly.GetType%2A>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-909">Retrieve the type using <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-910">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-910">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="16598-911">用于限制搜索的 <see cref="T:System.Reflection.BindingFlags" /> 值的按位组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-911">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limits the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-912">返回此类型声明的公共和非公共事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-912">Returns the public and non-public events that are declared by this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-913">返回 <see cref="T:System.Reflection.EventInfo" /> 对象的数组，表示此类型声明或继承的与指定的绑定标志匹配的事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-913">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the events declared or inherited by this type that match the specified binding flags.</span>
          </span>
          <span data-ttu-id="16598-914">如果没有匹配的事件，则返回空数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-914">An empty array is returned if there are no matching events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-915">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-915">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-916">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-916">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16598-917">返回由当前 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 定义的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-917">Returns a field defined by the current <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-918">要获取的字段的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-918">The name of the field to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="16598-919">这必须是 <see cref="T:System.Reflection.BindingFlags" /> 中的位标志，类似于 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等中的位标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-919">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-920">返回由给定名称指定的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-920">Returns the field specified by the given name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-921">返回 <see cref="T:System.Reflection.FieldInfo" /> 对象，该对象表示由此类型声明或继承的具有指定名称和公共或非公共修饰符的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-921">Returns the <see cref="T:System.Reflection.FieldInfo" /> object representing the field declared or inherited by this type with the specified name and public or non-public modifier.</span>
          </span>
          <span data-ttu-id="16598-922">如果没有匹配项，则返回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-922">If there are no matches then <see langword="null" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-923">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-923">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-924">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-924">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetField (Type type, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetField(class System.Type type, class System.Reflection.FieldInfo field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::FieldInfo ^ GetField(Type ^ type, System::Reflection::FieldInfo ^ field);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="16598-925">返回其字段的构造泛型类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-925">The constructed generic type whose field is returned.</span>
          </span>
        </param>
        <param name="field">
          <span data-ttu-id="16598-926">
            <c>type</c> 的泛型类型定义的字段指定要返回的 <c>type</c> 的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-926">A field on the generic type definition of <c>type</c>, which specifies which field of <c>type</c> to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-927">返回指定的构造泛型类型的字段，该字段对应于泛型类型定义的指定字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-927">Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-928">
            <see cref="T:System.Reflection.FieldInfo" /> 对象，它表示与 <paramref name="field" /> 对应的 <paramref name="type" /> 的字段，用于指定属于 <paramref name="type" /> 的泛型类型定义的字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-928">A <see cref="T:System.Reflection.FieldInfo" /> object that represents the field of <paramref name="type" /> corresponding to <paramref name="field" />, which specifies a field belonging to the generic type definition of <paramref name="type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-929"><xref:System.Reflection.Emit.TypeBuilder.GetField%2A>方法使您能够获取<xref:System.Reflection.FieldInfo>表示由其泛型类型定义构造的泛型类型的字段的对象<xref:System.Reflection.Emit.TypeBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="16598-929">The <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method provides a way to get a <xref:System.Reflection.FieldInfo> object that represents a field of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="16598-930">例如，假设你有<xref:System.Reflection.Emit.TypeBuilder>对象，表示类型`G<T>`中 C# 语法 (`G(Of T)`在 Visual Basic 中， `generic <T> ref class G` c + + 中) 和一个<xref:System.Reflection.Emit.FieldBuilder>表示的字段的对象`public T F`中 C# 语法 (`Public F As T`在 Visual Basic 中，`public: T F`在 c + +) 由定义`G<T>`。</span><span class="sxs-lookup"><span data-stu-id="16598-930">For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.FieldBuilder> object that represents a field `public T F` in C# syntax (`Public F As T` in Visual Basic, `public: T F` in C++) that is defined by `G<T>`.</span></span> <span data-ttu-id="16598-931">假设`G<T>`已具有类型参数的泛型方法`U`创建构造类型的实例`G<U>`和调用字段`F`该实例上。</span><span class="sxs-lookup"><span data-stu-id="16598-931">Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls field `F` on that instance.</span></span> <span data-ttu-id="16598-932">若要发出该函数调用，你需要<xref:System.Reflection.FieldInfo>对象，表示`F`上构造的类型-换而言之，这是类型的`U`而不是类型`T`。</span><span class="sxs-lookup"><span data-stu-id="16598-932">In order to emit the function call, you need a <xref:System.Reflection.FieldInfo> object that represents `F` on the constructed type — in other words, that is of type `U` rather than type `T`.</span></span> <span data-ttu-id="16598-933">若要这样做，请先调用<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法<xref:System.Reflection.Emit.TypeBuilder>对象，指定<xref:System.Reflection.Emit.GenericTypeParameterBuilder>对象，表示`U`作为类型参数。</span><span class="sxs-lookup"><span data-stu-id="16598-933">To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument.</span></span> <span data-ttu-id="16598-934">然后调用<xref:System.Reflection.Emit.TypeBuilder.GetField%2A>方法的返回值替换<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>作为参数的方法`type`和<xref:System.Reflection.Emit.FieldBuilder>对象，表示`F`作为参数`field`。</span><span class="sxs-lookup"><span data-stu-id="16598-934">Then call the <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.FieldBuilder> object that represents `F` as parameter `field`.</span></span> <span data-ttu-id="16598-935">返回值是<xref:System.Reflection.FieldInfo>对象需要发出该函数调用。</span><span class="sxs-lookup"><span data-stu-id="16598-935">The return value is the <xref:System.Reflection.FieldInfo> object you need to emit the function call.</span></span> <span data-ttu-id="16598-936">下面的代码示例演示此方案。</span><span class="sxs-lookup"><span data-stu-id="16598-936">The code example demonstrates this scenario.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-937">下面的代码示例包含一个名为示例具有一个名为的类型参数的泛型类的源代码`T`。</span><span class="sxs-lookup"><span data-stu-id="16598-937">The following code example contains source code for a generic class named Sample that has a type parameter named `T`.</span></span> <span data-ttu-id="16598-938">此类具有名为的字段`Field`，类型的`T`，和一个名为的泛型方法`GM`包含其自身类型参数，名为`U`。</span><span class="sxs-lookup"><span data-stu-id="16598-938">The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`.</span></span> <span data-ttu-id="16598-939">方法`GM`创建的实例`Sample`，其自身类型参数替换`U`的类型参数`Sample`，并将存储在其输入的参数`Field`。</span><span class="sxs-lookup"><span data-stu-id="16598-939">Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="16598-940">编译但不是使用此类源代码你可以查看其与[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)和将其与发出的类的代码比较`Example`。</span><span class="sxs-lookup"><span data-stu-id="16598-940">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="16598-941">类中的代码`Example`演示如何使用<xref:System.Reflection.Emit.TypeBuilder.GetField%2A>方法发出泛型的代码。</span><span class="sxs-lookup"><span data-stu-id="16598-941">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method to emit generic code.</span></span> <span data-ttu-id="16598-942">`Main`类的方法`Example`创建动态程序集包含一个名为类`Sample`，并使用<xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A>方法，以使泛型通过添加一个名为的类型参数`T`。</span><span class="sxs-lookup"><span data-stu-id="16598-942">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample`, and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="16598-943">默认构造函数和一个名为字段`Field`，类型的`T`，添加到类`Sample`。</span><span class="sxs-lookup"><span data-stu-id="16598-943">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="16598-944">一种方法`GM`添加并通过使用转变为泛型方法<xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-944">A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="16598-945">类型参数`GM`名为`U`。</span><span class="sxs-lookup"><span data-stu-id="16598-945">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="16598-946">定义类型参数后的签名`GM`通过使用添加<xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-946">After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="16598-947">没有没有返回类型，并且无需或自定义修饰符，因此，所有此方法的参数是`null`除`parameterTypes`;`parameterTypes`设置到该方法的唯一参数的类型`U`，该方法的泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="16598-947">There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter.</span></span> <span data-ttu-id="16598-948">方法的主体创建的构造类型的实例`Sample<U>`(`Sample(Of U)`在 Visual Basic 中)，将分配到该方法的参数`Field`，，然后输出的值`Field`。</span><span class="sxs-lookup"><span data-stu-id="16598-948">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="16598-949"><xref:System.Reflection.Emit.TypeBuilder.GetField%2A>方法用于创建<xref:System.Reflection.FieldInfo>所表示的构造泛型类型的字段`Sample<U>`中<xref:System.Reflection.Emit.OpCodes.Stfld?displayProperty=nameWithType>和<xref:System.Reflection.Emit.OpCodes.Ldfld?displayProperty=nameWithType>说明。</span><span class="sxs-lookup"><span data-stu-id="16598-949">The <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method is used to create a <xref:System.Reflection.FieldInfo> that represents the field of the constructed generic type `Sample<U>` in the <xref:System.Reflection.Emit.OpCodes.Stfld?displayProperty=nameWithType> and <xref:System.Reflection.Emit.OpCodes.Ldfld?displayProperty=nameWithType> instructions.</span></span>  
  
 <span data-ttu-id="16598-950">定义一个虚拟类型以容纳入口点方法`Main`。</span><span class="sxs-lookup"><span data-stu-id="16598-950">A dummy type is defined to hold the entry-point method `Main`.</span></span> <span data-ttu-id="16598-951">正文中`Main`，静态`GM`方法调用的构造泛型类型上`Sample<int>`(`Sample(Of Integer)`在 Visual Basic 中)，与类型<xref:System.String>替换为`U`。</span><span class="sxs-lookup"><span data-stu-id="16598-951">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span>  
  
 <span data-ttu-id="16598-952">当运行时的代码示例时，它将发出的程序集保存为 TypeBuilderGetFieldExample.exe。</span><span class="sxs-lookup"><span data-stu-id="16598-952">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="16598-953">你可以运行 TypeBuilderGetFieldExample.exe，并可以使用[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)要比较的代码发出的代码`Sample`编译到其自身的代码示例的类。</span><span class="sxs-lookup"><span data-stu-id="16598-953">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-954">
            <paramref name="type" /> 不表示泛型类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-954">
              <paramref name="type" /> does not represent a generic type.</span>
          </span>
          <span data-ttu-id="16598-955">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-955">-or-</span>
          </span>
          <span data-ttu-id="16598-956">
            <paramref name="type" /> 的类型不是 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-956">
              <paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span>
          </span>
          <span data-ttu-id="16598-957">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-957">-or-</span>
          </span>
          <span data-ttu-id="16598-958">
            <paramref name="field" /> 的声明类型不是一个泛型类型定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-958">The declaring type of <paramref name="field" /> is not a generic type definition.</span>
          </span>
          <span data-ttu-id="16598-959">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-959">-or-</span>
          </span>
          <span data-ttu-id="16598-960">
            <paramref name="field" /> 的声明类型不是 <paramref name="type" /> 的泛型类型定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-960">The declaring type of <paramref name="field" /> is not the generic type definition of <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="16598-961">这必须是来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-961">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-962">返回此类型声明的公共和非公共字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-962">Returns the public and non-public fields that are declared by this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-963">返回 <see cref="T:System.Reflection.FieldInfo" /> 对象的数组，表示此类型声明或继承的公共和非公共字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-963">Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the public and non-public fields declared or inherited by this type.</span>
          </span>
          <span data-ttu-id="16598-964">按照指定，如果没有字段，则返回空数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-964">An empty array is returned if there are no fields, as specified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-965"><xref:System.Reflection.Emit.TypeBuilder.GetFields%2A>方法不返回字段按特定的顺序，如按字母顺序排列或声明顺序排列。</span><span class="sxs-lookup"><span data-stu-id="16598-965">The <xref:System.Reflection.Emit.TypeBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="16598-966">因为该顺序可能会变化，你的代码必须不依赖于字段的返回顺序。</span><span class="sxs-lookup"><span data-stu-id="16598-966">Your code must not depend on the order in which fields are returned, because that order can vary.</span></span>  
  
 <span data-ttu-id="16598-967">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-967">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-968">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-968">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16598-969">返回一个 <see cref="T:System.Type" /> 对象的数组，表示泛型类型的类型变量或泛型类型定义的类型参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-969">Returns an array of <see cref="T:System.Type" /> objects representing the type arguments of a generic type or the type parameters of a generic type definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-970">一个 <see cref="T:System.Type" /> 对象数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-970">An array of <see cref="T:System.Type" /> objects.</span>
          </span>
          <span data-ttu-id="16598-971">此数组的元素表示泛型类型的类型自变量或泛型类型定义的类型参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-971">The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-972">返回的数组的元素将泛型类型定义的类型参数列表中出现的顺序。</span><span class="sxs-lookup"><span data-stu-id="16598-972">The elements of the returned array are in the order in which they appear in the list of type parameters for the generic type definition.</span></span>  
  
 <span data-ttu-id="16598-973">A<xref:System.Reflection.Emit.TypeBuilder>对象表示泛型类型定义，如果<xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A>已使用方法来为其提供的泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="16598-973">A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters.</span></span> <span data-ttu-id="16598-974">此方法检索<xref:System.Reflection.Emit.GenericTypeParameterBuilder>表示泛型类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="16598-974">This method retrieves the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects that represent the generic type parameters.</span></span>  
  
 <span data-ttu-id="16598-975">反射和使用泛型反射中的术语的固定条件列表中的泛型类型的详细信息，请参阅<xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="16598-975">For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])" />
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="M:System.Type.GetGenericArguments" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public override Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetGenericTypeDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16598-976">返回一个 <see cref="T:System.Type" /> 对象，该对象表示可从中获取当前类型的泛型类型定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-976">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current type can be obtained.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-977">一个 <see cref="T:System.Type" /> 对象，该对象表示可从中获取当前类型的泛型类型定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-977">A <see cref="T:System.Type" /> object representing a generic type definition from which the current type can be obtained.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-978">如果调用<xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A>方法<xref:System.Reflection.Emit.TypeBuilder>为其对象<xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A>属性返回`true`、<xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A>属性返回当前实例。</span><span class="sxs-lookup"><span data-stu-id="16598-978">If you call the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> object for which the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property returns `true`, the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> property returns the current instance.</span></span> <span data-ttu-id="16598-979">A<xref:System.Reflection.Emit.TypeBuilder>表示泛型类型始终是泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="16598-979">A <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type is always a generic type definition.</span></span>  
  
 <span data-ttu-id="16598-980">如果你使用<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法来构造泛型类型从<xref:System.Reflection.Emit.TypeBuilder>对象，表示泛型类型定义，使用<xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=nameWithType>方法的构造类型获取回<xref:System.Reflection.Emit.TypeBuilder>对象，表示泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="16598-980">If you used the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method to construct a generic type from a <xref:System.Reflection.Emit.TypeBuilder> object that represents a generic type definition, using the <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=nameWithType> method on the constructed type gets back the <xref:System.Reflection.Emit.TypeBuilder> object that represents the generic type definition.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-981">当前类型不为泛型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-981">The current type is not generic.</span>
          </span>
          <span data-ttu-id="16598-982">也就是说，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-982">That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public override Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-983">接口的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-983">The name of the interface.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="16598-984">如果为 <see langword="true" />，则搜索不区分大小写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-984">If <see langword="true" />, the search is case-insensitive.</span>
          </span>
          <span data-ttu-id="16598-985">如果为 <see langword="false" />，则搜索区分大小写。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-985">If <see langword="false" />, the search is case-sensitive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-986">返回由此类直接或间接实现的接口，该接口具有与给定接口名匹配的完全限定名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-986">Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-987">返回 <see cref="T:System.Type" /> 对象，该对象表示实现的接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-987">Returns a <see cref="T:System.Type" /> object representing the implemented interface.</span>
          </span>
          <span data-ttu-id="16598-988">如果未找到名称匹配的接口，则返回 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-988">Returns null if no interface matching name is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-989">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-989">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-990">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-990">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="16598-991">要为其检索映射的接口的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-991">The <see cref="T:System.Type" /> of the interface for which the mapping is to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-992">返回请求的接口的接口映射。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-992">Returns an interface mapping for the requested interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-993">返回请求的接口映射。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-993">Returns the requested interface mapping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-994">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-994">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-995">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-995">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public override Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16598-996">返回在此类型及其基类上实现的所有接口的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-996">Returns an array of all the interfaces implemented on this type and its base types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-997">返回 <see cref="T:System.Type" /> 对象的数组，表示已实现的接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-997">Returns an array of <see cref="T:System.Type" /> objects representing the implemented interfaces.</span>
          </span>
          <span data-ttu-id="16598-998">如果未定义任何内容，则返回一个空数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-998">If none are defined, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-999">成员名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-999">The name of the member.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="16598-1000">要返回的成员的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1000">The type of the member to return.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="16598-1001">这必须是 <see cref="T:System.Reflection.BindingFlags" /> 的位标志，例如 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等中的位标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1001">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1002">按照指定，返回此类型声明或继承的所有公共和非公共成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1002">Returns all the public and non-public members declared or inherited by this type, as specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1003">如果使用 <paramref name="nonPublic" />，则返回 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，表示在此类型上定义的公共和非公共成员；否则，仅返回公共成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1003">Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public members are returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1004">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-1004">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-1005">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1005">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="16598-1006">这必须是来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志，例如 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1006">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1007">返回此类型声明或继承的公共和非公共成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1007">Returns the members for the public and non-public members declared or inherited by this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1008">返回 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，表示此类型声明或继承的公共和非公共成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1008">Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members declared or inherited by this type.</span>
          </span>
          <span data-ttu-id="16598-1009">如果没有匹配的成员，则返回空数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1009">An empty array is returned if there are no matching members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1010">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-1010">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-1011">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1011">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public static System.Reflection.MethodInfo GetMethod (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodInfo GetMethod(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::MethodInfo ^ GetMethod(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="16598-1012">已返回其方法的构造泛型类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1012">The constructed generic type whose method is returned.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="16598-1013">
            <c>type</c> 的泛型类型定义的方法指定要返回的 <c>type</c> 的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1013">A method on the generic type definition of <c>type</c>, which specifies which method of <c>type</c> to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1014">返回与指定泛型类型定义的方法相对应的指定构造泛型类型的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1014">Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1015">
            <see cref="T:System.Reflection.MethodInfo" /> 对象，它表示与 <paramref name="method" /> 对应的 <paramref name="type" /> 的方法，它指定属于 <paramref name="type" /> 的泛型类型定义的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1015">A <see cref="T:System.Reflection.MethodInfo" /> object that represents the method of <paramref name="type" /> corresponding to <paramref name="method" />, which specifies a method belonging to the generic type definition of <paramref name="type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1016"><xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A>方法使您能够获取<xref:System.Reflection.MethodInfo>对象，表示构造泛型类型，由表示其泛型类型定义的方法<xref:System.Reflection.Emit.TypeBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="16598-1016">The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method provides a way to get a <xref:System.Reflection.MethodInfo> object that represents a method of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="16598-1017">例如，假设你有<xref:System.Reflection.Emit.TypeBuilder>对象，表示类型`G<T>`中 C# 语法 (`G(Of T)`在 Visual Basic 中， `generic <T> ref class G` c + + 中) 和<xref:System.Reflection.Emit.MethodBuilder>表示的方法的对象`T M()`中 C# 语法 (`Function M() As T`在 Visual Basic 中，`T M()`在 c + +) 由定义`G<T>`。</span><span class="sxs-lookup"><span data-stu-id="16598-1017">For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.MethodBuilder> object that represents a method `T M()` in C# syntax (`Function M() As T` in Visual Basic, `T M()` in C++) that is defined by `G<T>`.</span></span> <span data-ttu-id="16598-1018">假设`G<T>`已具有类型参数的泛型方法`U`创建构造类型的实例`G<U>`和调用方法`M`该实例上。</span><span class="sxs-lookup"><span data-stu-id="16598-1018">Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls method `M` on that instance.</span></span> <span data-ttu-id="16598-1019">若要发出该函数调用，你需要<xref:System.Reflection.MethodInfo>对象，表示`M`上构造的类型-换而言之，返回类型`U`而不是类型`T`。</span><span class="sxs-lookup"><span data-stu-id="16598-1019">In order to emit the function call, you need a <xref:System.Reflection.MethodInfo> object that represents `M` on the constructed type — in other words, that returns type `U` rather than type `T`.</span></span> <span data-ttu-id="16598-1020">若要这样做，请先调用<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法<xref:System.Reflection.Emit.TypeBuilder>对象，指定<xref:System.Reflection.Emit.GenericTypeParameterBuilder>对象，表示`U`作为类型参数。</span><span class="sxs-lookup"><span data-stu-id="16598-1020">To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument.</span></span> <span data-ttu-id="16598-1021">然后调用<xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A>方法的返回值替换<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>作为参数的方法`type`和<xref:System.Reflection.Emit.MethodBuilder>对象，表示`T M()`作为参数`method`。</span><span class="sxs-lookup"><span data-stu-id="16598-1021">Then call the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.MethodBuilder> object that represents `T M()` as parameter `method`.</span></span> <span data-ttu-id="16598-1022">返回值是<xref:System.Reflection.MethodInfo>对象需要发出该函数调用。</span><span class="sxs-lookup"><span data-stu-id="16598-1022">The return value is the <xref:System.Reflection.MethodInfo> object you need to emit the function call.</span></span> <span data-ttu-id="16598-1023">代码示例演示一个类似于此方案。</span><span class="sxs-lookup"><span data-stu-id="16598-1023">The code example demonstrates a scenario similar to this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-1024">下面的代码示例包含一个名为的泛型类的源代码`Sample`具有一个名为的类型参数`T`。</span><span class="sxs-lookup"><span data-stu-id="16598-1024">The following code example contains source code for a generic class named `Sample` that has a type parameter named `T`.</span></span> <span data-ttu-id="16598-1025">此类具有名为的字段`Field`，类型的`T`，和一个名为的泛型方法`GM`包含其自身类型参数，名为`U`。</span><span class="sxs-lookup"><span data-stu-id="16598-1025">The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`.</span></span> <span data-ttu-id="16598-1026">方法`GM`创建的实例`Sample`，其自身类型参数替换`U`的类型参数`Sample`，并将存储在其输入的参数`Field`。</span><span class="sxs-lookup"><span data-stu-id="16598-1026">Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="16598-1027">编译但不是使用此类源代码你可以查看其与[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)和将其与发出的类的代码比较`Example`。</span><span class="sxs-lookup"><span data-stu-id="16598-1027">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="16598-1028">类中的代码`Example`演示如何使用<xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A>方法发出泛型的代码。</span><span class="sxs-lookup"><span data-stu-id="16598-1028">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method to emit generic code.</span></span> <span data-ttu-id="16598-1029">`Main`类的方法`Example`创建动态程序集包含一个名为类`Sample`并使用<xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A>方法，以使泛型通过添加一个名为的类型参数`T`。</span><span class="sxs-lookup"><span data-stu-id="16598-1029">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample` and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="16598-1030">默认构造函数和一个名为字段`Field`，类型的`T`，添加到类`Sample`。</span><span class="sxs-lookup"><span data-stu-id="16598-1030">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="16598-1031">一种方法`GM`添加并通过使用转变为泛型方法<xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-1031">A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="16598-1032">类型参数`GM`名为`U`。</span><span class="sxs-lookup"><span data-stu-id="16598-1032">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="16598-1033">定义类型参数后的签名`GM`通过使用添加<xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-1033">After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="16598-1034">没有没有返回类型，并且无需或自定义修饰符，因此，所有此方法的参数是`null`除`parameterTypes`;`parameterTypes`设置到该方法的唯一参数的类型`U`，该方法的泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="16598-1034">There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter.</span></span> <span data-ttu-id="16598-1035">方法的主体创建的构造类型的实例`Sample<U>`(`Sample(Of U)`在 Visual Basic 中)，将分配到该方法的参数`Field`，，然后输出的值`Field`。</span><span class="sxs-lookup"><span data-stu-id="16598-1035">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="16598-1036">定义一个虚拟类型以容纳入口点方法`Main`。</span><span class="sxs-lookup"><span data-stu-id="16598-1036">A dummy type is defined to hold the entry-point method `Main`.</span></span> <span data-ttu-id="16598-1037">正文中`Main`，静态`GM`方法调用的构造泛型类型上`Sample<int>`(`Sample(Of Integer)`在 Visual Basic 中)，与类型<xref:System.String>替换为`U`。</span><span class="sxs-lookup"><span data-stu-id="16598-1037">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span> <span data-ttu-id="16598-1038"><xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A>方法用于创建<xref:System.Reflection.MethodInfo>适用于静态`GM`构造的泛型类型的方法`Sample<U>`，和<xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType>方法然后用于创建<xref:System.Reflection.MethodInfo>，可以在方法调用中发出。</span><span class="sxs-lookup"><span data-stu-id="16598-1038">The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method is used to create a <xref:System.Reflection.MethodInfo> for the static `GM` method of the constructed generic type `Sample<U>`, and the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> method is then used to create a <xref:System.Reflection.MethodInfo> that can emitted in a method call.</span></span>  
  
 <span data-ttu-id="16598-1039">当运行时的代码示例时，它将发出的程序集保存为 TypeBuilderGetFieldExample.exe。</span><span class="sxs-lookup"><span data-stu-id="16598-1039">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="16598-1040">你可以运行 TypeBuilderGetFieldExample.exe，并可以使用[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)要比较的代码发出的代码`Sample`编译到其自身的代码示例的类。</span><span class="sxs-lookup"><span data-stu-id="16598-1040">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-1041">
            <paramref name="method" /> 是一个非泛型方法定义的泛型方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1041">
              <paramref name="method" /> is a generic method that is not a generic method definition.</span>
          </span>
          <span data-ttu-id="16598-1042">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1042">-or-</span>
          </span>
          <span data-ttu-id="16598-1043">
            <paramref name="type" /> 不表示泛型类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1043">
              <paramref name="type" /> does not represent a generic type.</span>
          </span>
          <span data-ttu-id="16598-1044">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1044">-or-</span>
          </span>
          <span data-ttu-id="16598-1045">
            <paramref name="type" /> 的类型不是 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1045">
              <paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span>
          </span>
          <span data-ttu-id="16598-1046">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1046">-or-</span>
          </span>
          <span data-ttu-id="16598-1047">
            <paramref name="method" /> 的声明类型不是一个泛型类型定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1047">The declaring type of <paramref name="method" /> is not a generic type definition.</span>
          </span>
          <span data-ttu-id="16598-1048">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1048">-or-</span>
          </span>
          <span data-ttu-id="16598-1049">
            <paramref name="method" /> 的声明类型不是 <paramref name="type" /> 的泛型类型定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1049">The declaring type of <paramref name="method" /> is not the generic type definition of <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="16598-1050">这必须是 <see cref="T:System.Reflection.BindingFlags" /> 中的位标志，类似于 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等中的位标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1050">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1051">按照指定，返回此类型声明或继承的所有公共和非公共方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1051">Returns all the public and non-public methods declared or inherited by this type, as specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1052">如果使用 <paramref name="nonPublic" />，则返回 <see cref="T:System.Reflection.MethodInfo" /> 对象数组，表示在该类型上定义的公共和非公共方法；否则，仅返回公共方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1052">Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing the public and non-public methods defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public methods are returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1053">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-1053">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-1054">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1054">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-1055">包含要获取的嵌套类型的名称的 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1055">The <see cref="T:System.String" /> containing the name of the nested type to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="16598-1056">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1056">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="16598-1057">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1057">-or-</span>
          </span>
          <span data-ttu-id="16598-1058">零，表示对公共方法执行区分大小写的搜索。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1058">Zero, to conduct a case-sensitive search for public methods.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1059">返回此类型声明的公共和非公共嵌套类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1059">Returns the public and non-public nested types that are declared by this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1060">表示符合指定要求的嵌套类型的 <see cref="T:System.Type" /> 对象（如果找到）；否则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1060">A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1061">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-1061">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 <span data-ttu-id="16598-1062">如果此类型已完成，例如，如果`CreateType`已调用了这种类型，但存在嵌套的类型，然后不完整，`GetNestedTypes`将只返回这些嵌套的类型为其`CreateType`已调用。</span><span class="sxs-lookup"><span data-stu-id="16598-1062">If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-1063">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1063">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="16598-1064">这必须是 <see cref="T:System.Reflection.BindingFlags" /> 的位标志，例如 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等中的位标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1064">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1065">返回此类型声明或继承的公共和非公共嵌套类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1065">Returns the public and non-public nested types that are declared or inherited by this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1066">
            <see cref="T:System.Type" /> 对象数组，表示当前 <see cref="T:System.Type" /> 中嵌套的与指定的绑定约束匹配的所有类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1066">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="16598-1067">如果当前 <see cref="T:System.Type" /> 中未嵌套任何类型，或者如果没有一个嵌套类型与绑定约束匹配，则为类型 <see cref="T:System.Type" /> 的空数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1067">An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1068">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-1068">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 <span data-ttu-id="16598-1069">如果此类型已完成，例如，如果`CreateType`已调用了这种类型，但存在嵌套的类型，然后不完整，`GetNestedTypes`将只返回这些嵌套的类型为其`CreateType`已调用。</span><span class="sxs-lookup"><span data-stu-id="16598-1069">If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-1070">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1070">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="16598-1071">此调用属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1071">This invocation attribute.</span>
          </span>
          <span data-ttu-id="16598-1072">这必须是来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1072">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1073">按照指定，返回此类型声明或继承的所有公共和非公共属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1073">Returns all the public and non-public properties declared or inherited by this type, as specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1074">如果使用 <paramref name="nonPublic" />，则返回 <see langword="PropertyInfo" /> 对象的数组，表示在此类型上定义的公共和非公共属性；否则，仅返回公共属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1074">Returns an array of <see langword="PropertyInfo" /> objects representing the public and non-public properties defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public properties are returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1075">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-1075">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-1076">不会为不完整类型实现此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1076">This method is not implemented for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public override Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GUID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Guid GUID { Guid get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1077">检索此类型的 GUID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1077">Retrieves the GUID of this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1078">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1078">Read-only.</span>
          </span>
          <span data-ttu-id="16598-1079">检索此类型的 GUID</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1079">Retrieves the GUID of this type</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1080">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-1080">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-1081">不完整类型目前不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1081">This method is not currently supported for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool HasElementTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="16598-1082">要调用的成员的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1082">The name of the member to invoke.</span>
          </span>
          <span data-ttu-id="16598-1083">这可以是构造函数、方法、属性或字段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1083">This can be a constructor, method, property, or field.</span>
          </span>
          <span data-ttu-id="16598-1084">必须指定合适的调用属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1084">A suitable invocation attribute must be specified.</span>
          </span>
          <span data-ttu-id="16598-1085">请注意，可以通过将一个空字符串作为成员的名称进行传递来调用一个类的默认成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1085">Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="16598-1086">调用属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1086">The invocation attribute.</span>
          </span>
          <span data-ttu-id="16598-1087">这必须是来自 <see langword="BindingFlags" /> 的位标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1087">This must be a bit flag from <see langword="BindingFlags" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="16598-1088">一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 <see langword="MemberInfo" /> 对象的检索。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1088">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection.</span>
          </span>
          <span data-ttu-id="16598-1089">如果 binder 为 <see langword="null" />，则使用默认活页夹。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1089">If binder is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="16598-1090">请参阅 <see cref="T:System.Reflection.Binder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1090">See <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="16598-1091">对其调用指定成员的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1091">The object on which to invoke the specified member.</span>
          </span>
          <span data-ttu-id="16598-1092">如果该成员为静态，则忽略此参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1092">If the member is static, this parameter is ignored.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="16598-1093">参数列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1093">An argument list.</span>
          </span>
          <span data-ttu-id="16598-1094">这是一个对象的数组，该对象包含要调用的成员的参数的数量、顺序和类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1094">This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked.</span>
          </span>
          <span data-ttu-id="16598-1095">如果不存在任何参数，则这应为 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1095">If there are no parameters this should be null.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="16598-1096">与 <c>args</c> 长度相同的数组，其元素表示与要调用的成员的自变量关联的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1096">An array of the same length as <c>args</c> with elements that represent the attributes associated with the arguments of the member to be invoked.</span>
          </span>
          <span data-ttu-id="16598-1097">参数在元数据中具有与之相关联的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1097">A parameter has attributes associated with it in the metadata.</span>
          </span>
          <span data-ttu-id="16598-1098">它们由不同的互操作性服务使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1098">They are used by various interoperability services.</span>
          </span>
          <span data-ttu-id="16598-1099">有关更多详细信息，请参阅元数据规范。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1099">See the metadata specs for more details.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="16598-1100">用于控制类型强制的 <see langword="CultureInfo" /> 的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1100">An instance of <see langword="CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="16598-1101">如果这是 NULL，则使用当前线程的 <see langword="CultureInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1101">If this is null, the <see langword="CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="16598-1102">（注意，这对于某些转换是必要的，例如，将表示 1000 的 String 转换为 Double 值，因为不同区域性的 1000 表示形式不同。）</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1102">(Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="16598-1103">
            <c>namedParameters</c> 数组中的每个参数获取 <c>args</c> 数组中对应元素的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1103">Each parameter in the <c>namedParameters</c> array gets the value in the corresponding element in the <c>args</c> array.</span>
          </span>
          <span data-ttu-id="16598-1104">如果 <c>args</c> 的长度大于 <c>namedParameters</c> 的长度，则剩余的参数值将按顺序传递。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1104">If the length of <c>args</c> is greater than the length of <c>namedParameters</c>, the remaining argument values are passed in order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1105">调用指定的成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1105">Invokes the specified member.</span>
          </span>
          <span data-ttu-id="16598-1106">在指定的活页夹和调用属性的约束下，要调用的方法必须为可访问，并且提供与指定的自变量列表最具体的匹配。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1106">The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1107">返回被调用的成员的返回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1107">Returns the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1108">将调用一个方法，如果方法声明中的参数的数目等于在指定的自变量列表中，参数的数目和每个自变量的类型可以转换由参数的类型联编程序。</span><span class="sxs-lookup"><span data-stu-id="16598-1108">A method will be invoked if the number of parameters in the method declaration equals the number of arguments in the specified argument list, and the type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="16598-1109">联编程序将查找所有匹配的方法。</span><span class="sxs-lookup"><span data-stu-id="16598-1109">The binder will find all of the matching methods.</span></span> <span data-ttu-id="16598-1110">查找这些方法所基于的绑定请求 （BindingFlags.InvokeMethod、 BindingFlags.GetProperties，依次类推。） 的类型。</span><span class="sxs-lookup"><span data-stu-id="16598-1110">These methods are found based on the type of binding requested (BindingFlags.InvokeMethod, BindingFlags.GetProperties, and so on.).</span></span> <span data-ttu-id="16598-1111">按名称、 数量的参数和一组绑定器中定义的搜索修饰符进行筛选的方法集。</span><span class="sxs-lookup"><span data-stu-id="16598-1111">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span> <span data-ttu-id="16598-1112">选择方法后，将调用它。</span><span class="sxs-lookup"><span data-stu-id="16598-1112">After the method is selected, it will be invoked.</span></span> <span data-ttu-id="16598-1113">此时，检查可访问性。</span><span class="sxs-lookup"><span data-stu-id="16598-1113">Accessibility is checked at that point.</span></span> <span data-ttu-id="16598-1114">搜索可以基于与该方法关联的可访问性属性来控制搜索哪些方法集。</span><span class="sxs-lookup"><span data-stu-id="16598-1114">The search can control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="16598-1115">`IBinder.BindToMethod`方法负责选择要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="16598-1115">The `IBinder.BindToMethod` method is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="16598-1116">默认的联编程序选择最精确的匹配。</span><span class="sxs-lookup"><span data-stu-id="16598-1116">The default binder selects the most specific match.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-1117">访问限制会忽略完全受信任的代码。</span><span class="sxs-lookup"><span data-stu-id="16598-1117">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="16598-1118">即私有构造函数、 方法、 字段和属性可以访问和使用反射，只要完全受信任代码调用。</span><span class="sxs-lookup"><span data-stu-id="16598-1118">That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="16598-1119">目前尚不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="16598-1119">This method is not currently supported.</span></span> <span data-ttu-id="16598-1120">你可以检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-1120">You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-1121">不完整类型目前不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1121">This method is not currently supported for incomplete types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected override bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsArrayImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAssignableFrom">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1122">确定某个指定类型是否可以赋值给此对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1122">Determines whether a specified type can be assigned to this object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Reflection.TypeInfo typeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Reflection.TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(System::Reflection::TypeInfo ^ typeInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeInfo" Type="System.Reflection.TypeInfo" />
      </Parameters>
      <Docs>
        <param name="typeInfo">
          <span data-ttu-id="16598-1123">要测试的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1123">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1124">获取一个值，该值表示是否可以将指定的 <see cref="T:System.Reflection.TypeInfo" /> 对象赋值给此对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1124">Gets a value that indicates whether a specified <see cref="T:System.Reflection.TypeInfo" /> object can be assigned to this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1125">如果可以将 <paramref name="typeInfo" /> 赋值给此对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1125">
              <see langword="true" /> if <paramref name="typeInfo" /> can be assigned to this object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(Type ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="16598-1126">要测试的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1126">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1127">获取一个值，该值指示是否可将指定的 <see cref="T:System.Type" /> 分配给此对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1127">Gets a value that indicates whether a specified <see cref="T:System.Type" /> can be assigned to this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1128">如果 <paramref name="c" /> 参数和当前类型表示相同的类型，或当前类型位于 <paramref name="c" /> 的继承层次结构中，或当前类型是 <paramref name="c" /> 支持的接口，则为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1128">
              <see langword="true" /> if the <paramref name="c" /> parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of <paramref name="c" />, or if the current type is an interface that <paramref name="c" /> supports.</span>
          </span>
          <span data-ttu-id="16598-1129">如果上述条件均无效或 <paramref name="c" /> 为 <see langword="null" />；则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1129">
              <see langword="false" /> if none of these conditions are valid, or if <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected override bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsByRefImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public override bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected override bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsCOMObjectImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public override bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1130">获取指示此对象是否表示构造的泛型类型的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1130">Gets a value that indicates whether this object represents a constructed generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1131">如果此对象表示构造泛型类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1131">
              <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCreated">
      <MemberSignature Language="C#" Value="public bool IsCreated ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsCreated() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsCreated" />
      <MemberSignature Language="VB.NET" Value="Public Function IsCreated () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsCreated();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16598-1132">返回一个值，该值指示是否已创建当前的动态类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1132">Returns a value that indicates whether the current dynamic type has been created.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1133">如果已调用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1133">
              <see langword="true" /> if the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has been called; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1134">后<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>方法已调用，表示的类型<xref:System.Reflection.Emit.TypeBuilder>对象已完成。</span><span class="sxs-lookup"><span data-stu-id="16598-1134">After the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called, the type represented by the <xref:System.Reflection.Emit.TypeBuilder> object is complete.</span></span> <span data-ttu-id="16598-1135">如果尝试将成员添加或更改该类型的其他特性，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="16598-1135">Exceptions are thrown on any further attempts to add members or change other characteristics of the type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="16598-1136">要搜索的属性的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1136">The type of attribute to search for.</span>
          </span>
          <span data-ttu-id="16598-1137">仅返回可分配给此类型的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1137">Only attributes that are assignable to this type are returned.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="16598-1138">指定是否搜索此成员的继承链以查找属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1138">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1139">确定是否将自定义属性应用于当前类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1139">Determines whether a custom attribute is applied to the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1140">如果针对此类型定义了 <paramref name="attributeType" /> 的一个或多个实例，或定义了从 <paramref name="attributeType" /> 派生的属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1140">
              <see langword="true" /> if one or more instances of <paramref name="attributeType" />, or an attribute derived from <paramref name="attributeType" />, is defined on this type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1141">此方法不支持不完整的泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="16598-1141">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="16598-1142">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-1142">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-1143">不完整类型目前不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1143">This method is not currently supported for incomplete types.</span>
          </span>
          <span data-ttu-id="16598-1144">使用 <see cref="M:System.Type.GetType" /> 检索此类型，并对返回的 <see cref="T:System.Type" /> 调用 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1144">Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> on the returned <see cref="T:System.Type" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-1145">未定义 <paramref name="attributeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1145">
              <paramref name="attributeType" /> is not defined.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-1146">
            <paramref name="attributeType" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1146">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public override bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public override bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1147">获取一个值，该值指示当前类型是否是泛型类型参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1147">Gets a value indicating whether the current type is a generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1148">如果当前 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 对象表示泛型类型参数，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1148">
              <see langword="true" /> if the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type parameter; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="16598-1149">在发出代码时，由表示泛型类型参数<xref:System.Reflection.Emit.GenericTypeParameterBuilder>对象而不是<xref:System.Reflection.Emit.TypeBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="16598-1149">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public override bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1150">获取一个值，该值指示当前类型是否是泛型类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1150">Gets a value indicating whether the current type is a generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1151">如果当前 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 对象表示的类型是泛型，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1151">
              <see langword="true" /> if the type represented by the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object is generic; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1152">A<xref:System.Reflection.Emit.TypeBuilder>对象表示泛型类型定义，如果<xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A>已使用方法来为其提供的泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="16598-1152">A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters.</span></span> <span data-ttu-id="16598-1153">实例<xref:System.Reflection.Emit.TypeBuilder>是泛型的类始终是一个泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="16598-1153">An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.</span></span>  
  
 <span data-ttu-id="16598-1154">反射和使用泛型反射中的术语的固定条件列表中的泛型类型的详细信息，请参阅<xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="16598-1154">For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1155">获取一个值，该值指示当前 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 是否表示可以用来构造其他泛型类型的泛型类型定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1155">Gets a value indicating whether the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> represents a generic type definition from which other generic types can be constructed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1156">如果此 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 对象表示泛型类型定义，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1156">
              <see langword="true" /> if this <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type definition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1157">A<xref:System.Reflection.Emit.TypeBuilder>对象表示泛型类型定义，如果<xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A>已使用方法来为其提供的泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="16598-1157">A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters.</span></span> <span data-ttu-id="16598-1158">实例<xref:System.Reflection.Emit.TypeBuilder>是泛型的类始终是一个泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="16598-1158">An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.</span></span>  
  
 <span data-ttu-id="16598-1159">A<xref:System.Reflection.Emit.TypeBuilder>可用来生成泛型类型定义，但不是构造的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="16598-1159">A <xref:System.Reflection.Emit.TypeBuilder> can be used to build generic type definitions, but not constructed generic types.</span></span> <span data-ttu-id="16598-1160">若要获取构造的泛型类型，调用<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法<xref:System.Reflection.Emit.TypeBuilder>表示泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="16598-1160">To get a constructed generic type, call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition.</span></span>  
  
 <span data-ttu-id="16598-1161">反射和使用泛型反射中的术语的固定条件列表中的泛型类型的详细信息，请参阅<xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="16598-1161">For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])" />
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPointerImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPrimitiveImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1162">获取一个值，该值指示当前类型是安全-关键的还是安全-可靠-关键的，且因此是否可执行关键操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1162">Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1163">如果当前类型是安全关键的或安全可靠关键的，则为 <see langword="true" />；如果它是透明的，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1163">
              <see langword="true" /> if the current type is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1164"><xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>， <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>，和<xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A>属性报告的类型的透明度级别，由公共语言运行时 (CLR)。</span><span class="sxs-lookup"><span data-stu-id="16598-1164">The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="16598-1165">下表中显示的这些属性的组合：</span><span class="sxs-lookup"><span data-stu-id="16598-1165">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="16598-1166">安全级别</span><span class="sxs-lookup"><span data-stu-id="16598-1166">Security level</span></span>|<span data-ttu-id="16598-1167">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="16598-1167">IsSecurityCritical</span></span>|<span data-ttu-id="16598-1168">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="16598-1168">IsSecuritySafeCritical</span></span>|<span data-ttu-id="16598-1169">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="16598-1169">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="16598-1170">严重</span><span class="sxs-lookup"><span data-stu-id="16598-1170">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="16598-1171">安全-关键</span><span class="sxs-lookup"><span data-stu-id="16598-1171">Safe-critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="16598-1172">透明</span><span class="sxs-lookup"><span data-stu-id="16598-1172">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="16598-1173">使用这些属性比检查程序集及其类型的安全批注、检查当前的信任级别，以及尝试复制运行时的规则要简单得多。</span><span class="sxs-lookup"><span data-stu-id="16598-1173">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="16598-1174">运行时开始计算在程序集的透明度级别。</span><span class="sxs-lookup"><span data-stu-id="16598-1174">The runtime begins evaluating transparency levels at the assembly.</span></span> <span data-ttu-id="16598-1175">例如，如果动态程序集是安全关键，类型上的注释将被忽略，并且所有类型都是安全关键。</span><span class="sxs-lookup"><span data-stu-id="16598-1175">For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.</span></span>  
  
 <span data-ttu-id="16598-1176">默认情况下，动态程序集继承发出它的程序集的透明度。</span><span class="sxs-lookup"><span data-stu-id="16598-1176">By default, a dynamic assembly inherits the transparency of the assembly that emits it.</span></span> <span data-ttu-id="16598-1177">你可以使用重写此默认设置<xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>， <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>，或<xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>方法重载并指定安全特性。</span><span class="sxs-lookup"><span data-stu-id="16598-1177">You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> method overload and specifying security attributes.</span></span> <span data-ttu-id="16598-1178">不能通过执行此操作; 操作提升安全级别也就是说，透明代码不能发出安全关键或安全可靠关键代码。</span><span class="sxs-lookup"><span data-stu-id="16598-1178">You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.</span></span> <span data-ttu-id="16598-1179">创建动态程序集时，或直到已保存到磁盘并重新加载程序集不会生效，必须指定属性。</span><span class="sxs-lookup"><span data-stu-id="16598-1179">Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-1180">默认继承被限制为运行时的评估的透明度。</span><span class="sxs-lookup"><span data-stu-id="16598-1180">Default inheritance is limited to the runtime's evaluation of transparency.</span></span> <span data-ttu-id="16598-1181">没有特性随即应用于动态程序集。</span><span class="sxs-lookup"><span data-stu-id="16598-1181">No attributes are applied to the dynamic assembly.</span></span> <span data-ttu-id="16598-1182">如果你想要添加的安全属性，你必须自行应用它们。</span><span class="sxs-lookup"><span data-stu-id="16598-1182">If you want to add security attributes, you must apply them yourself.</span></span>  
  
 <span data-ttu-id="16598-1183">有关反射发出和透明度，请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。</span><span class="sxs-lookup"><span data-stu-id="16598-1183">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="16598-1184">透明度有关的信息，请参阅[安全更改](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="16598-1184">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-1185">当前动态类型不是通过调用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1185">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1186">获取一个值，该值指示当前类型是否为安全-可靠-关键，即它是否可执行关键操作且可由透明代码访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1186">Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1187">如果当前类型是安全可靠关键的，则为 <see langword="true" />；如果它是安全关键的或透明的，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1187">
              <see langword="true" /> if the current type is security-safe-critical; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1188"><xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>， <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>，和<xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A>属性报告的类型的透明度级别，由公共语言运行时 (CLR)。</span><span class="sxs-lookup"><span data-stu-id="16598-1188">The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="16598-1189">下表中显示的这些属性的组合：</span><span class="sxs-lookup"><span data-stu-id="16598-1189">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="16598-1190">安全级别</span><span class="sxs-lookup"><span data-stu-id="16598-1190">Security level</span></span>|<span data-ttu-id="16598-1191">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="16598-1191">IsSecurityCritical</span></span>|<span data-ttu-id="16598-1192">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="16598-1192">IsSecuritySafeCritical</span></span>|<span data-ttu-id="16598-1193">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="16598-1193">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="16598-1194">严重</span><span class="sxs-lookup"><span data-stu-id="16598-1194">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="16598-1195">安全-关键</span><span class="sxs-lookup"><span data-stu-id="16598-1195">Safe-critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="16598-1196">透明</span><span class="sxs-lookup"><span data-stu-id="16598-1196">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="16598-1197">使用这些属性比检查程序集及其类型的安全批注、检查当前的信任级别，以及尝试复制运行时的规则要简单得多。</span><span class="sxs-lookup"><span data-stu-id="16598-1197">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="16598-1198">运行时开始计算在程序集的透明度级别。</span><span class="sxs-lookup"><span data-stu-id="16598-1198">The runtime begins evaluating transparency levels at the assembly.</span></span> <span data-ttu-id="16598-1199">例如，如果动态程序集是安全关键，类型上的注释将被忽略，并且所有类型都是安全关键。</span><span class="sxs-lookup"><span data-stu-id="16598-1199">For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.</span></span>  
  
 <span data-ttu-id="16598-1200">默认情况下，动态程序集继承发出它的程序集的透明度。</span><span class="sxs-lookup"><span data-stu-id="16598-1200">By default, a dynamic assembly inherits the transparency of the assembly that emits it.</span></span> <span data-ttu-id="16598-1201">你可以使用重写此默认设置<xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>， <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>，或<xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>方法重载并指定安全特性。</span><span class="sxs-lookup"><span data-stu-id="16598-1201">You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> method overload and specifying security attributes.</span></span> <span data-ttu-id="16598-1202">不能通过执行此操作; 操作提升安全级别也就是说，透明代码不能发出安全关键或安全可靠关键代码。</span><span class="sxs-lookup"><span data-stu-id="16598-1202">You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.</span></span> <span data-ttu-id="16598-1203">创建动态程序集时，或直到已保存到磁盘并重新加载程序集不会生效，必须指定属性。</span><span class="sxs-lookup"><span data-stu-id="16598-1203">Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-1204">默认继承被限制为运行时的评估的透明度。</span><span class="sxs-lookup"><span data-stu-id="16598-1204">Default inheritance is limited to the runtime's evaluation of transparency.</span></span> <span data-ttu-id="16598-1205">没有特性随即应用于动态程序集。</span><span class="sxs-lookup"><span data-stu-id="16598-1205">No attributes are applied to the dynamic assembly.</span></span> <span data-ttu-id="16598-1206">如果你想要添加的安全属性，你必须自行应用它们。</span><span class="sxs-lookup"><span data-stu-id="16598-1206">If you want to add security attributes, you must apply them yourself.</span></span>  
  
 <span data-ttu-id="16598-1207">有关反射发出和透明度，请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。</span><span class="sxs-lookup"><span data-stu-id="16598-1207">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="16598-1208">透明度有关的信息，请参阅[安全更改](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="16598-1208">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-1209">当前动态类型不是通过调用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1209">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1210">获取一个值，该值指示当前类型是否透明，且因此是否无法指定关键操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1210">Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1211">如果类型是安全透明的，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1211">
              <see langword="true" /> if the type is security-transparent; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1212"><xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>， <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>，和<xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A>属性报告的类型的透明度级别，由公共语言运行时 (CLR)。</span><span class="sxs-lookup"><span data-stu-id="16598-1212">The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="16598-1213">下表中显示的这些属性的组合：</span><span class="sxs-lookup"><span data-stu-id="16598-1213">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="16598-1214">安全级别</span><span class="sxs-lookup"><span data-stu-id="16598-1214">Security level</span></span>|<span data-ttu-id="16598-1215">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="16598-1215">IsSecurityCritical</span></span>|<span data-ttu-id="16598-1216">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="16598-1216">IsSecuritySafeCritical</span></span>|<span data-ttu-id="16598-1217">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="16598-1217">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="16598-1218">严重</span><span class="sxs-lookup"><span data-stu-id="16598-1218">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="16598-1219">安全-关键</span><span class="sxs-lookup"><span data-stu-id="16598-1219">Safe-critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="16598-1220">透明</span><span class="sxs-lookup"><span data-stu-id="16598-1220">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="16598-1221">使用这些属性比检查程序集及其类型的安全批注、检查当前的信任级别，以及尝试复制运行时的规则要简单得多。</span><span class="sxs-lookup"><span data-stu-id="16598-1221">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="16598-1222">运行时开始计算在程序集的透明度级别。</span><span class="sxs-lookup"><span data-stu-id="16598-1222">The runtime begins evaluating transparency levels at the assembly.</span></span> <span data-ttu-id="16598-1223">例如，如果动态程序集是安全关键，类型上的注释将被忽略，并且所有类型都是安全关键。</span><span class="sxs-lookup"><span data-stu-id="16598-1223">For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.</span></span>  
  
 <span data-ttu-id="16598-1224">默认情况下，动态程序集继承发出它的程序集的透明度。</span><span class="sxs-lookup"><span data-stu-id="16598-1224">By default, a dynamic assembly inherits the transparency of the assembly that emits it.</span></span> <span data-ttu-id="16598-1225">你可以使用重写此默认设置<xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>， <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>，或<xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>方法重载并指定安全特性。</span><span class="sxs-lookup"><span data-stu-id="16598-1225">You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> method overload and specifying security attributes.</span></span> <span data-ttu-id="16598-1226">不能通过执行此操作; 操作提升安全级别也就是说，透明代码不能发出安全关键或安全可靠关键代码。</span><span class="sxs-lookup"><span data-stu-id="16598-1226">You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.</span></span> <span data-ttu-id="16598-1227">创建动态程序集时，或直到已保存到磁盘并重新加载程序集不会生效，必须指定属性。</span><span class="sxs-lookup"><span data-stu-id="16598-1227">Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-1228">默认继承被限制为运行时的评估的透明度。</span><span class="sxs-lookup"><span data-stu-id="16598-1228">Default inheritance is limited to the runtime's evaluation of transparency.</span></span> <span data-ttu-id="16598-1229">没有特性随即应用于动态程序集。</span><span class="sxs-lookup"><span data-stu-id="16598-1229">No attributes are applied to the dynamic assembly.</span></span> <span data-ttu-id="16598-1230">如果你想要添加的安全属性，你必须自行应用它们。</span><span class="sxs-lookup"><span data-stu-id="16598-1230">If you want to add security attributes, you must apply them yourself.</span></span>  
  
 <span data-ttu-id="16598-1231">有关反射发出和透明度，请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。</span><span class="sxs-lookup"><span data-stu-id="16598-1231">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="16598-1232">透明度有关的信息，请参阅[安全更改](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="16598-1232">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-1233">当前动态类型不是通过调用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1233">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public override bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public override bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsSubclassOf(Type ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="16598-1234">要检查的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1234">A <see cref="T:System.Type" /> that is to be checked.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1235">确定此类型是否派生自指定类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1235">Determines whether this type is derived from a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1236">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1236">Read-only.</span>
          </span>
          <span data-ttu-id="16598-1237">如果此类型与类型 <paramref name="c" /> 相同或为类型 <paramref name="c" /> 的子类型，则返回 <see langword="true" />；否则返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1237">Returns <see langword="true" /> if this type is the same as the type <paramref name="c" />, or is a subtype of type <paramref name="c" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public override bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsValueTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public override bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1238">返回表示当前类型的数组的 <see cref="T:System.Type" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1238">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public override Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeArrayType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16598-1239">返回 <see cref="T:System.Type" /> 对象，该对象表示当前类型的一维数组（下限为零）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1239">Returns a <see cref="T:System.Type" /> object that represents a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1240">
            <see cref="T:System.Type" /> 对象，该对象表示一维数组类型，其元素类型为当前类型（下限为零）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1240">A <see cref="T:System.Type" /> object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1241"><xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A>方法使您能够生成具有任何可能的元素类型，包括泛型类型的数组类型。</span><span class="sxs-lookup"><span data-stu-id="16598-1241">The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-1242">下面的代码示例创建一个动态模块，名为抽象类型`Sample`，和一个名为的抽象方法`TestMethod`。</span><span class="sxs-lookup"><span data-stu-id="16598-1242">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="16598-1243">`TestMethod` 采用`ref`参数 (`ByRef`在 Visual Basic 中) 的类型`Sample`，指向类型的指针`Sample`，和类型的数组`Sample`。</span><span class="sxs-lookup"><span data-stu-id="16598-1243">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="16598-1244">它将返回类型的一个二维数组`Sample`。</span><span class="sxs-lookup"><span data-stu-id="16598-1244">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="16598-1245">下面的代码示例将动态模块保存到磁盘，以便你可以检查其与[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)。</span><span class="sxs-lookup"><span data-stu-id="16598-1245">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public override Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeArrayType(int rank);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank">
          <span data-ttu-id="16598-1246">数组的维数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1246">The number of dimensions for the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1247">返回 <see cref="T:System.Type" /> 对象，此对象表示当前类型的具有指定维数的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1247">Returns a <see cref="T:System.Type" /> object that represents an array of the current type, with the specified number of dimensions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1248">表示当前类型的一维数组的 <see cref="T:System.Type" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1248">A <see cref="T:System.Type" /> object that represents a one-dimensional array of the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1249"><xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A>方法使您能够生成具有任何可能的元素类型，包括泛型类型的数组类型。</span><span class="sxs-lookup"><span data-stu-id="16598-1249">The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-1250">下面的代码示例创建一个动态模块，名为抽象类型`Sample`，和一个名为的抽象方法`TestMethod`。</span><span class="sxs-lookup"><span data-stu-id="16598-1250">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="16598-1251">`TestMethod` 采用`ref`参数 (`ByRef`在 Visual Basic 中) 的类型`Sample`，指向类型的指针`Sample`，和类型的数组`Sample`。</span><span class="sxs-lookup"><span data-stu-id="16598-1251">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="16598-1252">它将返回类型的一个二维数组`Sample`。</span><span class="sxs-lookup"><span data-stu-id="16598-1252">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="16598-1253">下面的代码示例将动态模块保存到磁盘，以便你可以检查其与[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)。</span><span class="sxs-lookup"><span data-stu-id="16598-1253">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="16598-1254">
            <paramref name="rank" /> 不是有效的数组维数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1254">
              <paramref name="rank" /> is not a valid array dimension.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public override Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeByRefType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16598-1255">返回一个 <see cref="T:System.Type" /> 对象，它在作为 <see langword="ref" /> 参数（Visual Basic 中的 <see langword="ByRef" />）传递时表示当前类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1255">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> in Visual Basic).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1256">
            <see cref="T:System.Type" /> 对象，它在作为 <see langword="ref" /> 参数（Visual Basic 中的 <see langword="ByRef" />）传递时表示当前类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1256">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> in Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1257"><xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A>方法使您能够生成`ref`类型 (`ByRef`在 Visual Basic 中) 为参数列出。</span><span class="sxs-lookup"><span data-stu-id="16598-1257">The <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-1258">如果使用 Microsoft 中间语言 (MSIL) 语法，当前<xref:System.Reflection.Emit.TypeBuilder>表示`MyType`，则此方法返回的类型将`MyType&`。</span><span class="sxs-lookup"><span data-stu-id="16598-1258">Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType&`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-1259">下面的代码示例创建一个动态模块，名为抽象类型`Sample`，和一个名为的抽象方法`TestMethod`。</span><span class="sxs-lookup"><span data-stu-id="16598-1259">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="16598-1260">`TestMethod` 采用`ref`参数 (`ByRef`在 Visual Basic 中) 的类型`Sample`，指向类型的指针`Sample`，和类型的数组`Sample`。</span><span class="sxs-lookup"><span data-stu-id="16598-1260">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="16598-1261">它将返回类型的一个二维数组`Sample`。</span><span class="sxs-lookup"><span data-stu-id="16598-1261">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="16598-1262">下面的代码示例将动态模块保存到磁盘，以便你可以检查其与[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)。</span><span class="sxs-lookup"><span data-stu-id="16598-1262">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Reflection.Emit.TypeBuilder.MakeArrayType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public override Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">
          <span data-ttu-id="16598-1263">当前泛型类型定义的类型参数将要替代的类型数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1263">An array of types to be substituted for the type parameters of the current generic type definition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1264">将类型数组中的元素替换为当前泛型类型定义的类型参数，并返回生成的构造类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1264">Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1265">
            <see cref="T:System.Type" /> 表示的构造类型通过以下方式形成：用 <paramref name="typeArguments" /> 的元素取代当前泛型类型的类型参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1265">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1266">当您发出的代码需要从当前泛型类型定义构造的类型时，请使用此方法。</span><span class="sxs-lookup"><span data-stu-id="16598-1266">Use this method when your emitted code requires a type constructed from the current generic type definition.</span></span> <span data-ttu-id="16598-1267">不需要调用<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>方法之前调用<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法<xref:System.Reflection.Emit.TypeBuilder>表示泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="16598-1267">It is not necessary to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method before calling the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition.</span></span> <span data-ttu-id="16598-1268">如果当前<xref:System.Reflection.Emit.TypeBuilder>不表示泛型类型定义<xref:System.InvalidOperationException>引发。</span><span class="sxs-lookup"><span data-stu-id="16598-1268">If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent the definition of a generic type, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 <span data-ttu-id="16598-1269">返回此方法函数作为占位符中发出的代码构造的泛型类型的对象。</span><span class="sxs-lookup"><span data-stu-id="16598-1269">The object returned by this method functions as a placeholder for a constructed generic type in your emitted code.</span></span> <span data-ttu-id="16598-1270">它是派生自此类的实例<xref:System.Type>具有有限的功能。</span><span class="sxs-lookup"><span data-stu-id="16598-1270">It is an instance of a class derived from <xref:System.Type> that has limited capabilities.</span></span> <span data-ttu-id="16598-1271">具体而言：</span><span class="sxs-lookup"><span data-stu-id="16598-1271">In particular:</span></span>  
  
-   <span data-ttu-id="16598-1272">若要获取有关这些构造的泛型类型的方法、 字段和构造函数，请使用<xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29>， <xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29>，和<xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="16598-1272">To get methods, fields, and constructors for these constructed generic types, use the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29>, <xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29>, and <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29> method overloads.</span></span>  
  
-   <span data-ttu-id="16598-1273">表示相同的构造的类型的两个实例不比较结果为相等。</span><span class="sxs-lookup"><span data-stu-id="16598-1273">Two instances that represent the same constructed type do not compare as equal.</span></span> <span data-ttu-id="16598-1274">例如，在下面的代码`t1.Equals(t2)`返回`false`:</span><span class="sxs-lookup"><span data-stu-id="16598-1274">For example, in the following code `t1.Equals(t2)` returns `false`:</span></span>  
  
 [!code-cpp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cs/remarks.cs#1)]
 [!code-vb[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/vb/remarks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-1275">此当前类型不表示泛型类型的定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1275">The current type does not represent the definition of a generic type.</span>
          </span>
          <span data-ttu-id="16598-1276">也就是说，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1276">That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-1277">
            <paramref name="typeArguments" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1277">
              <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="16598-1278">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1278">-or-</span>
          </span>
          <span data-ttu-id="16598-1279">
            <paramref name="typeArguments" /> 的任意元素为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1279">Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-1280">
            <paramref name="typeArguments" /> 的任意元素的属性 <see cref="P:System.Type.Module" /> 的值为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1280">The <see cref="P:System.Type.Module" /> property of any element of <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="16598-1281">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1281">-or-</span>
          </span>
          <span data-ttu-id="16598-1282">
            <paramref name="typeArguments" /> 的任意元素的模块的属性 <see cref="P:System.Reflection.Module.Assembly" /> 的值为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1282">The <see cref="P:System.Reflection.Module.Assembly" /> property of the module of any element of <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public override Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakePointerType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16598-1283">返回表示指向当前类型的非托管指针的类型的 <see cref="T:System.Type" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1283">Returns a <see cref="T:System.Type" /> object that represents the type of an unmanaged pointer to the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1284">表示指向当前类型的非托管指针的类型的 <see cref="T:System.Type" /> 对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1284">A <see cref="T:System.Type" /> object that represents the type of an unmanaged pointer to the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1285"><xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A>方法使您能够生成参数列表的指针类型。</span><span class="sxs-lookup"><span data-stu-id="16598-1285">The <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-1286">如果使用 Microsoft 中间语言 (MSIL) 语法，当前<xref:System.Reflection.Emit.TypeBuilder>表示`MyType`，则此方法返回的类型将`MyType*`。</span><span class="sxs-lookup"><span data-stu-id="16598-1286">Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType*`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="16598-1287">下面的代码示例创建一个动态模块，名为抽象类型`Sample`，和一个名为的抽象方法`TestMethod`。</span><span class="sxs-lookup"><span data-stu-id="16598-1287">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="16598-1288">`TestMethod` 采用`ref`参数 (`ByRef`在 Visual Basic 中) 的类型`Sample`，指向类型的指针`Sample`，和类型的数组`Sample`。</span><span class="sxs-lookup"><span data-stu-id="16598-1288">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="16598-1289">它将返回类型的一个二维数组`Sample`。</span><span class="sxs-lookup"><span data-stu-id="16598-1289">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="16598-1290">下面的代码示例将动态模块保存到磁盘，以便你可以检查其与[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)。</span><span class="sxs-lookup"><span data-stu-id="16598-1290">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
        <altmember cref="Overload:System.Reflection.Emit.TypeBuilder.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1291">检索包含此类型定义的动态模块。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1291">Retrieves the dynamic module that contains this type definition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1292">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1292">Read-only.</span>
          </span>
          <span data-ttu-id="16598-1293">检索包含此类型定义的动态模块。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1293">Retrieves the dynamic module that contains this type definition.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1294">检索此类型的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1294">Retrieves the name of this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1295">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1295">Read-only.</span>
          </span>
          <span data-ttu-id="16598-1296">检索此类型的 <see cref="T:System.String" /> 名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1296">Retrieves the <see cref="T:System.String" /> name of this type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public override string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1297">检索定义了此 <see langword="TypeBuilder" /> 的命名空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1297">Retrieves the namespace where this <see langword="TypeBuilder" /> is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1298">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1298">Read-only.</span>
          </span>
          <span data-ttu-id="16598-1299">检索定义了此 <see langword="TypeBuilder" /> 的命名空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1299">Retrieves the namespace where this <see langword="TypeBuilder" /> is defined.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PackingSize">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PackingSize PackingSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.Emit.PackingSize PackingSize" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.PackingSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PackingSize As PackingSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::PackingSize PackingSize { System::Reflection::Emit::PackingSize get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PackingSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1300">检索此类型的包装大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1300">Retrieves the packing size of this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1301">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1301">Read-only.</span>
          </span>
          <span data-ttu-id="16598-1302">检索此类型的包装大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1302">Retrieves the packing size of this type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1303">返回用于获取此类型的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1303">Returns the type that was used to obtain this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1304">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1304">Read-only.</span>
          </span>
          <span data-ttu-id="16598-1305">用于获取此类型的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1305">The type that was used to obtain this type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCustomAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1306">设置自定义属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1306">Sets a custom attribute.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (customBuilder As CustomAttributeBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::Emit::CustomAttributeBuilder ^ customBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customBuilder" Type="System.Reflection.Emit.CustomAttributeBuilder" />
      </Parameters>
      <Docs>
        <param name="customBuilder">
          <span data-ttu-id="16598-1307">用于定义自定义属性的帮助程序类的一个实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1307">An instance of a helper class to define the custom attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1308">使用自定义属性生成器设置自定义属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1308">Set a custom attribute using a custom attribute builder.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="16598-1309">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="16598-1309">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="16598-1310">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="16598-1310">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-1311">
            <paramref name="customBuilder" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1311">
              <paramref name="customBuilder" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-1312">对于当前的动态类型，属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 的值为 <see langword="true" />，但属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 的值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1312">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, unsigned int8[] binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (con As ConstructorInfo, binaryAttribute As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::ConstructorInfo ^ con, cli::array &lt;System::Byte&gt; ^ binaryAttribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binaryAttribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="con">
          <span data-ttu-id="16598-1313">自定义属性的构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1313">The constructor for the custom attribute.</span>
          </span>
        </param>
        <param name="binaryAttribute">
          <span data-ttu-id="16598-1314">表示属性的字节 blob。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1314">A byte blob representing the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1315">使用指定的自定义属性 blob 设置自定义属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1315">Sets a custom attribute using a specified custom attribute blob.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1316">有关详细信息设置格式的方式`binaryAttribute`，请参阅公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分： 元数据定义和语义"。</span><span class="sxs-lookup"><span data-stu-id="16598-1316">For more information on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="16598-1317">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="16598-1317">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="16598-1318">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，此成员不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>标志。</span><span class="sxs-lookup"><span data-stu-id="16598-1318">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="16598-1319">(请参阅[反射发出中的安全问题](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="16598-1319">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="16598-1320">
            <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1320">
              <paramref name="con" /> or <paramref name="binaryAttribute" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-1321">对于当前的动态类型，属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 的值为 <see langword="true" />，但属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 的值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1321">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetParent">
      <MemberSignature Language="C#" Value="public void SetParent (Type parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParent(class System.Type parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetParent (parent As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetParent(Type ^ parent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="parent">
          <span data-ttu-id="16598-1322">新的基类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1322">The new base type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1323">设置当前正在构造的类型的基类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1323">Sets the base type of the type currently under construction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1324">如果`parent`是`null`，<xref:System.Object>用作基类型。</span><span class="sxs-lookup"><span data-stu-id="16598-1324">If `parent` is `null`, <xref:System.Object> is used as the base type.</span></span>  
  
 <span data-ttu-id="16598-1325">在.NET framework 1.0 和 1.1 版中，在引发任何异常`parent`是接口类型，但<xref:System.TypeLoadException>时，将引发<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="16598-1325">In the .NET Framework versions 1.0 and 1.1, no exception is thrown if `parent` is an interface type, but a <xref:System.TypeLoadException> is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.</span></span>  
  
 <span data-ttu-id="16598-1326"><xref:System.Reflection.Emit.TypeBuilder.SetParent%2A>方法不会检查对于大多数无效的父类型。</span><span class="sxs-lookup"><span data-stu-id="16598-1326">The <xref:System.Reflection.Emit.TypeBuilder.SetParent%2A> method does not check for most invalid parent types.</span></span> <span data-ttu-id="16598-1327">例如，不会拒绝具有没有默认构造函数，如果当前类型具有默认构造函数，它也不会拒绝密封的类型，并且它也不会拒绝的父类型<xref:System.Delegate>类型。</span><span class="sxs-lookup"><span data-stu-id="16598-1327">For example, it does not reject a parent type that has no default constructor when the current type has a default constructor, it does not reject sealed types, and it does not reject the <xref:System.Delegate> type.</span></span> <span data-ttu-id="16598-1328">在所有这些情况下，异常由引发<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="16598-1328">In all these cases, exceptions are thrown by the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-1329">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1329">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="16598-1330">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1330">-or-</span>
          </span>
          <span data-ttu-id="16598-1331">
            <paramref name="parent" /> 为 <see langword="null" />，并且当前实例表示其属性不包括 <see cref="F:System.Reflection.TypeAttributes.Abstract" /> 的接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1331">
              <paramref name="parent" /> is <see langword="null" />, and the current instance represents an interface whose attributes do not include <see cref="F:System.Reflection.TypeAttributes.Abstract" />.</span>
          </span>
          <span data-ttu-id="16598-1332">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1332">-or-</span>
          </span>
          <span data-ttu-id="16598-1333">对于当前的动态类型，属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 的值为 <see langword="true" />，但属性 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 的值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1333">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="16598-1334">
            <paramref name="parent" /> 是一个接口。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1334">
              <paramref name="parent" /> is an interface.</span>
          </span>
          <span data-ttu-id="16598-1335">此异常条件是 .NET Framework 2.0 版中新增的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1335">This exception condition is new in the .NET Framework version 2.0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Size" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Size { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1336">检索类型的总大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1336">Retrieves the total size of a type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1337">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1337">Read-only.</span>
          </span>
          <span data-ttu-id="16598-1338">检索此类型的总大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1338">Retrieves this type’s total size.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _TypeBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _TypeBuilder.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_TypeBuilder::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="16598-1339">留待将来使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1339">Reserved for future use.</span>
          </span>
          <span data-ttu-id="16598-1340">必须为 IID_NULL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1340">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="16598-1341">要映射的名称的传入数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1341">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="16598-1342">要映射的名称的计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1342">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="16598-1343">要在其中解释名称的区域设置上下文。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1343">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="16598-1344">调用方分配的数组，用于接收与名称对应的 ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1344">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1345">将一组名称映射为对应的一组调度标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1345">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1346">此方法用于访问托管类从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="16598-1346">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="16598-1347">有关详细信息`IDispatch::GetIDsOfNames`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="16598-1347">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="16598-1348">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1348">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _TypeBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _TypeBuilder.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_TypeBuilder::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="16598-1349">要返回的类型信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1349">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="16598-1350">类型信息的区域设置标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1350">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="16598-1351">接收一个指针，指向请求的类型信息对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1351">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1352">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1352">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1353">此方法用于访问托管类从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="16598-1353">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="16598-1354">有关详细信息`IDispatch::GetTypeInfo`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="16598-1354">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="16598-1355">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1355">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _TypeBuilder.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _TypeBuilder.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_TypeBuilder::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="16598-1356">指向一个位置，该位置接收对象提供的类型信息接口的数量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1356">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1357">检索对象提供的类型信息接口的数量（0 或 1）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1357">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1358">此方法用于访问托管类从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="16598-1358">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="16598-1359">有关详细信息`IDispatch::GetTypeInfoCount`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="16598-1359">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="16598-1360">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1360">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.Invoke">
      <MemberSignature Language="C#" Value="void _TypeBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _TypeBuilder.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_TypeBuilder::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="16598-1361">标识成员。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1361">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="16598-1362">留待将来使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1362">Reserved for future use.</span>
          </span>
          <span data-ttu-id="16598-1363">必须为 IID_NULL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1363">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="16598-1364">要在其中解释参数的区域设置上下文。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1364">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="16598-1365">描述调用的上下文的标志。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1365">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="16598-1366">指向一个结构的指针，该结构包含一个自变量数组、一个命名自变量的 DISPID 自变量数组和数组中元素数的计数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1366">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="16598-1367">指向要存储结果的位置的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1367">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="16598-1368">指向一个包含异常信息的结构的指针。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1368">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="16598-1369">第一个出错自变量的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1369">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16598-1370">提供对某一对象公开的属性和方法的访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1370">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1371">此方法用于访问托管类从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="16598-1371">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="16598-1372">有关详细信息`IDispatch::Invoke`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="16598-1372">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="16598-1373">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1373">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16598-1374">返回不包括命名空间的类型的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1374">Returns the name of the type excluding the namespace.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16598-1375">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1375">Read-only.</span>
          </span>
          <span data-ttu-id="16598-1376">不包括命名空间的类型的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1376">The name of the type excluding the namespace.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public override RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1377">不支持动态模块。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1377">Not supported in dynamic modules.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1378">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1378">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16598-1379">检索类型使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和检索到的类型使用反射。</span><span class="sxs-lookup"><span data-stu-id="16598-1379">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="16598-1380">不支持动态模块。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1380">Not supported in dynamic modules.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TypeToken">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeToken TypeToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.Emit.TypeToken TypeToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.TypeToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeToken As TypeToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::TypeToken TypeToken { System::Reflection::Emit::TypeToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1381">返回此类型的类型标记。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1381">Returns the type token of this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1382">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1382">Read-only.</span>
          </span>
          <span data-ttu-id="16598-1383">返回此类型的 <see langword="TypeToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1383">Returns the <see langword="TypeToken" /> of this type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-1384">该类型是以前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1384">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public override Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1385">返回此 <see langword="TypeBuilder" /> 的基础系统类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1385">Returns the underlying system type for this <see langword="TypeBuilder" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16598-1386">只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1386">Read-only.</span>
          </span>
          <span data-ttu-id="16598-1387">返回基础系统类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1387">Returns the underlying system type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="16598-1388">此类型是一个枚举，但没有任何基础系统类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1388">This type is an enumeration, but there is no underlying system type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UnspecifiedTypeSize">
      <MemberSignature Language="C#" Value="public const int UnspecifiedTypeSize = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 UnspecifiedTypeSize = (0)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize" />
      <MemberSignature Language="VB.NET" Value="Public Const UnspecifiedTypeSize As Integer  = 0" />
      <MemberSignature Language="C++ CLI" Value="public: int UnspecifiedTypeSize = 0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="16598-1389">表示未指定类型的总大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="16598-1389">Represents that total size for the type is not specified.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>