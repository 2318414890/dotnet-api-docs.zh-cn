<Type Name="CacheRequest" FullName="System.Windows.Automation.CacheRequest">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ba79b367856f83c772f8c7971dde04e0ee956e6d" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
    <Meta Name="ms.locfileid" Value="31909941" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CacheRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CacheRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.CacheRequest" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CacheRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheRequest sealed" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指定在获得 <see cref="T:System.Windows.Automation.AutomationElement" /> 时，UI 自动化框架缓存的属性和模式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 检索属性和模式通过[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]需要跨进程调用，这会降低性能。 通过缓存属性和模式批处理操作中的值，你可以增强你的应用程序的性能。  
  
 通过调用类构造函数创建新的缓存请求。 通过重复调用来填充该请求<xref:System.Windows.Automation.CacheRequest.Add%2A>方法。  
  
 只有一个<xref:System.Windows.Automation.CacheRequest>可处于活动状态。 有两种方法来激活请求：  
  
-   调用<xref:System.Windows.Automation.CacheRequest.Activate%2A>针对此请求。 这将推送到堆栈上，请求并请求将弹出时释放此对象。 若要确保处置，即使引发异常，请使用中的返回值<xref:System.Windows.Automation.CacheRequest.Activate%2A>内`using`块 (`Using`在 Visual Basic 中)。  
  
-   放置在内部堆栈上的请求，通过调用<xref:System.Windows.Automation.CacheRequest.Push%2A>。 仅在堆栈上最顶层的请求处于活动状态，并且它必须是从堆栈中移除的下一个<xref:System.Windows.Automation.CacheRequest.Pop%2A>。 弹出请求停用它。  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 获取请求处于活动状态时的元素将已经缓存的属性和模式指定的值。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>来缓存模式和属性。  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 下面的示例演示如何使用<xref:System.Windows.Automation.CacheRequest.Push%2A>和<xref:System.Windows.Automation.CacheRequest.Pop%2A>来缓存模式和属性。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheRequest();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Automation.CacheRequest" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Automation.CacheRequest>创建后，<xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty>标识符作为默认属性添加到缓存。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public IDisposable Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Activate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将此 <see cref="T:System.Windows.Automation.CacheRequest" /> 设置为在同一线程中请求 <see cref="T:System.Windows.Automation.AutomationElement" /> 时返回的项的活动规范。</summary>
        <returns>可用于释放 <see cref="T:System.Windows.Automation.CacheRequest" /> 的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法时通常最好使用<xref:System.Windows.Automation.CacheRequest.Push%2A>和<xref:System.Windows.Automation.CacheRequest.Pop%2A>作为一种激活<xref:System.Windows.Automation.CacheRequest>。 对象推送到堆栈上时<xref:System.Windows.Automation.CacheRequest.Activate%2A>调用，该方法并释放时，然后弹出。 为了确保释放对象，将返回值中的`using`块 (`Using`在 Visual Basic 中)。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>来缓存模式和属性。  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将一个属性或模式标识符添加到 <see cref="T:System.Windows.Automation.CacheRequest" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Automation.CacheRequest>创建对象时，<xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty>标识符作为默认属性添加到缓存。  
  
 添加已在缓存请求的对象没有任何影响。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationPattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationPattern pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationPattern)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (pattern As AutomationPattern)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationPattern ^ pattern);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.Windows.Automation.AutomationPattern" />
      </Parameters>
      <Docs>
        <param name="pattern">一个标识符，指定要缓存的模式。</param>
        <summary>将指定的 <see cref="T:System.Windows.Automation.AutomationPattern" /> 标识符添加到此 <see cref="T:System.Windows.Automation.CacheRequest" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 添加已在缓存请求的模式没有任何影响。  
  
   
  
## Examples  
 下面的示例演示如何构造<xref:System.Windows.Automation.CacheRequest>并添加要缓存的模式。  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.Automation.CacheRequest" /> 处于活动状态。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (property As AutomationProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationProperty ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.Automation.AutomationProperty" />
      </Parameters>
      <Docs>
        <param name="property">一个标识符，指定要缓存的属性值。</param>
        <summary>将指定的 <see cref="T:System.Windows.Automation.AutomationProperty" /> 标识符添加到此 <see cref="T:System.Windows.Automation.CacheRequest" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.Automation.CacheRequest>创建后，<xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty>标识符作为默认属性添加到缓存。  
  
 添加一个属性，已缓存请求中没有任何影响。  
  
   
  
## Examples  
 下面的示例演示如何构造<xref:System.Windows.Automation.CacheRequest>并添加要缓存的属性。  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.Automation.CacheRequest" /> 处于活动状态。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutomationElementMode">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElementMode AutomationElementMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.AutomationElementMode AutomationElementMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutomationElementMode As AutomationElementMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::AutomationElementMode AutomationElementMode { System::Windows::Automation::AutomationElementMode get(); void set(System::Windows::Automation::AutomationElementMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElementMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定返回的元素是应包含对基础 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 的完整引用，还是仅包含缓存的信息。</summary>
        <value>
          如果返回的元素包含对基础 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 的完整引用，则为 <see cref="F:System.Windows.Automation.AutomationElementMode.Full" />；否则为 <see cref="F:System.Windows.Automation.AutomationElementMode.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.AutomationElementMode.Full> 是默认值，并指定返回的元素，包含对基础的完全引用[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]。 <xref:System.Windows.Automation.AutomationElementMode.None> 指定返回的元素具有未引用基础[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]，并只包含缓存的信息。  
  
 对于元素，包括某些操作<xref:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue%2A>， <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>，和<xref:System.Windows.Automation.AutomationElement.SetFocus%2A>，需要完整的参考; 尝试执行这些上都未元素会导致<xref:System.InvalidOperationException>。  
  
 使用<xref:System.Windows.Automation.AutomationElementMode.None>可以是时需要仅有属性，效率更高，因为它避免了开销参与设置完整的引用。  
  
   
  
## Examples  
 在下面的示例中，<xref:System.Windows.Automation.CacheRequest.AutomationElementMode%2A>设置为<xref:System.Windows.Automation.AutomationElementMode.None>、 结果只能使用缓存的属性和模式是可用于检索到的对象。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.CacheRequest Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.CacheRequest Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::CacheRequest ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Windows.Automation.CacheRequest" /> 的副本。</summary>
        <returns>当前对象的可修改副本。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.CacheRequest Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Automation.CacheRequest Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Automation::CacheRequest ^ Current { System::Windows::Automation::CacheRequest ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前线程中处于活动状态的 <see cref="T:System.Windows.Automation.CacheRequest" />。</summary>
        <value>活动的 <see cref="T:System.Windows.Automation.CacheRequest" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public void Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从当前线程的内部堆栈中移除活动的 <see cref="T:System.Windows.Automation.CacheRequest" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用删除仅当前处于活动状态的请求<xref:System.Windows.Automation.CacheRequest.Pop%2A>方法。 在尝试删除是不引发异常的当前一个结果的请求。  
  
 除非要嵌套缓存请求，最好使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>将请求放在堆栈上。 原因是，你可以使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>内`using`块 (`Using`在 Visual Basic 中)，确保请求将从堆栈弹出，即使引发异常。  
  
   
  
## Examples  
 下面的示例演示如何停用<xref:System.Windows.Automation.CacheRequest>使用<xref:System.Windows.Automation.CacheRequest.Pop%2A>。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尝试移除的缓存请求不是最后压入堆栈的堆栈请求。</exception>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Push" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="T:System.Windows.Automation.CacheRequest" /> 压入内部状态堆栈，并使它成为当前线程中的活动请求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 多个<xref:System.Windows.Automation.CacheRequest>对象可放置到状态堆栈。 必须从; 它们已推送的顺序中的堆栈中删除缓存请求否则为<xref:System.InvalidOperationException>引发异常。  
  
 除非要嵌套缓存请求，最好使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>将请求放在堆栈上。 原因是，你可以使用<xref:System.Windows.Automation.CacheRequest.Activate%2A>内`using`块 (`Using`在 Visual Basic 中)，确保请求将从堆栈弹出，即使引发异常。  
  
   
  
## Examples  
 下面的示例演示如何激活<xref:System.Windows.Automation.CacheRequest>使用<xref:System.Windows.Automation.CacheRequest.Push%2A>。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TreeFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Condition TreeFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Condition TreeFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeFilter As Condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::Condition ^ TreeFilter { System::Windows::Automation::Condition ^ get(); void set(System::Windows::Automation::Condition ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Condition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，指定在缓存时要使用的 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]元素树的视图。</summary>
        <value>[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]元素树的视图。 默认视图为 <see cref="F:System.Windows.Automation.Automation.ControlViewCondition" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关其他信息的视图[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]元素树中，请参阅[UI 自动化树概述](~/docs/framework/ui-automation/ui-automation-tree-overview.md)。  
  
   
  
## Examples  
 在下面的示例中，<xref:System.Windows.Automation.CacheRequest.TreeFilter%2A>设置为<xref:System.Windows.Automation.Automation.RawViewCondition>，以便所有元素，而不考虑它们是否的内容视图或控件视图的一部分都进行缓存。  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.Automation.Automation.ContentViewCondition" />
      </Docs>
    </Member>
    <Member MemberName="TreeScope">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TreeScope TreeScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TreeScope TreeScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeScope As TreeScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TreeScope TreeScope { System::Windows::Automation::TreeScope get(); void set(System::Windows::Automation::TreeScope value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TreeScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定是仅对子树的根进行缓存，还是也对其子级或子代进行缓存。</summary>
        <value>一个或多个 <see cref="F:System.Windows.Automation.TreeScope.Element" />、<see cref="F:System.Windows.Automation.TreeScope.Children" />、<see cref="F:System.Windows.Automation.TreeScope.Descendants" /> 或 <see cref="F:System.Windows.Automation.TreeScope.Subtree" />。 默认值为 <see cref="F:System.Windows.Automation.TreeScope.Element" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 缓存的范围相对于或多个对象正在提取，不是相对于其上的对象<xref:System.Windows.Automation.AutomationElement.FindFirst%2A>或<xref:System.Windows.Automation.AutomationElement.FindAll%2A>调用。 请参阅示例。  
  
   
  
## Examples  
 在下面的示例中，列表框元素获取从父窗口元素时<xref:System.Windows.Automation.CacheRequest>处于活动状态和<xref:System.Windows.Automation.CacheRequest.TreeScope%2A>是<xref:System.Windows.Automation.TreeScope.Children>。 子元素 （即，列表项） 的指定的属性存储在缓存中，并且可以从检索<xref:System.Windows.Automation.AutomationElement.CachedChildren%2A>列表框。  
  
 [!code-csharp[UIAClient_snip#119](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#119)]
 [!code-vb[UIAClient_snip#119](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#119)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">尝试将该属性设置为 <see cref="F:System.Windows.Automation.TreeScope.Parent" /> 或 <see cref="F:System.Windows.Automation.TreeScope.Ancestors" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>