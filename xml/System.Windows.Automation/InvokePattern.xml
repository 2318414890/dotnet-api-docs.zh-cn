<Type Name="InvokePattern" FullName="System.Windows.Automation.InvokePattern">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e681ddcf10259e196472652f43fd9c565e76db9c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36570359" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InvokePattern : System.Windows.Automation.BasePattern" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InvokePattern extends System.Windows.Automation.BasePattern" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.InvokePattern" />
  <TypeSignature Language="VB.NET" Value="Public Class InvokePattern&#xA;Inherits BasePattern" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvokePattern : System::Windows::Automation::BasePattern" />
  <TypeSignature Language="F#" Value="type InvokePattern = class&#xA;    inherit BasePattern" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Automation.BasePattern</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="0dd2b-101">表示用于启动或执行单个明确操作的控件，并且这些控件在激活时不保持其状态。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0dd2b-101">Represents controls that initiate or perform a single, unambiguous action and do not maintain state when activated.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0dd2b-102">控件支持<xref:System.Windows.Automation.InvokePattern>如果相同的行为不通过另一种控件模式公开。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-102">Controls support <xref:System.Windows.Automation.InvokePattern> if the same behavior is not exposed through another control pattern.</span></span> <span data-ttu-id="0dd2b-103">例如，如果<xref:System.Windows.Automation.InvokePattern.Invoke%2A>控件上的方法执行相同的操作<xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A>或<xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A>方法，该控件将支持<xref:System.Windows.Automation.InvokePattern>。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-103">For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control will not support <xref:System.Windows.Automation.InvokePattern>.</span></span>  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]<span data-ttu-id="0dd2b-104"> 其元素表示控件如复选框和单选按钮，它们可维护状态，但是不支持<xref:System.Windows.Automation.TogglePattern>或<xref:System.Windows.Automation.SelectionItemPattern>。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-104"> elements that represent controls such as check boxes and radio buttons, which maintain a state, instead support <xref:System.Windows.Automation.TogglePattern> or <xref:System.Windows.Automation.SelectionItemPattern>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.IInvokeProvider" />
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.InvokePattern.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; unit" Usage="invokePattern.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0dd2b-105">发送请求以激活控件并启动其单一、明确的操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0dd2b-105">Sends a request to activate a control and initiate its single, unambiguous action.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0dd2b-106">调用<xref:System.Windows.Automation.InvokePattern.Invoke%2A>应立即返回而不阻止。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-106">Calls to <xref:System.Windows.Automation.InvokePattern.Invoke%2A> should return immediately without blocking.</span></span> <span data-ttu-id="0dd2b-107">但是，此行为是完全依赖于[!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)]提供程序实现。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-107">However, this behavior is entirely dependent on the [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] provider implementation.</span></span> <span data-ttu-id="0dd2b-108">在方案中，调用<xref:System.Windows.Automation.InvokePattern.Invoke%2A>导致单独的阻止问题 （如一个模式对话框） 可能需要帮助程序线程调用的方法。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-108">In scenarios where calling <xref:System.Windows.Automation.InvokePattern.Invoke%2A> causes a blocking issue (such as a modal dialog) a separate helper thread may be required to call the method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0dd2b-109">在下面的示例<xref:System.Windows.Automation.InvokePattern>从控件获取控件模式和<xref:System.Windows.Automation.InvokePattern.Invoke%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-109">In the following example an <xref:System.Windows.Automation.InvokePattern> control pattern is obtained from a control and the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method is called.</span></span>  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0dd2b-110">该元素不支持 <see cref="T:System.Windows.Automation.InvokePattern" /> 控件模式，或者被隐藏或被阻止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0dd2b-110">The element does not support the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern or is hidden or blocked.</span>
          </span>
        </exception>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">
          <span data-ttu-id="0dd2b-111">元素未启用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0dd2b-111">The element is not enabled.</span>
          </span>
          <span data-ttu-id="0dd2b-112">可在 UI 自动化提供程序已实现自己对 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" /> 属性的处理时引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0dd2b-112">Can be raised when a UI Automation provider has implemented its own handling of the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InvokedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationEvent InvokedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationEvent InvokedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.InvokedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InvokedEvent As AutomationEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationEvent ^ InvokedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvokedEvent : System.Windows.Automation.AutomationEvent" Usage="System.Windows.Automation.InvokePattern.InvokedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0dd2b-113">标识在调用或激活控件时引发的事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0dd2b-113">Identifies the event raised when a control is invoked or activated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0dd2b-114">UI 自动化客户端应用程序使用此标识符。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-114">This identifier is used by UI Automation client applications.</span></span> <span data-ttu-id="0dd2b-115">UI 自动化提供程序应使用中的等效字段<xref:System.Windows.Automation.InvokePatternIdentifiers>。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-115">UI Automation providers should use the equivalent field in <xref:System.Windows.Automation.InvokePatternIdentifiers>.</span></span>  
  
 <span data-ttu-id="0dd2b-116"><xref:System.Windows.Automation.InvokePattern.InvokedEvent>标识符传递作为参数传递给<xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-116">The <xref:System.Windows.Automation.InvokePattern.InvokedEvent> identifier is passed as a parameter to <xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0dd2b-117">在下面的示例中，事件处理程序标识的事件调用的事件作为通过比较<xref:System.Windows.Automation.AutomationEventArgs.EventId%2A>与事件自变量中<xref:System.Windows.Automation.InvokePattern.InvokedEvent>标识符字段。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-117">In the following example, the event handler identifies the event as an Invoked event by comparing the <xref:System.Windows.Automation.AutomationEventArgs.EventId%2A> in the event arguments with the <xref:System.Windows.Automation.InvokePattern.InvokedEvent> identifier field.</span></span>  
  
 [!code-csharp[UIAClient_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#101)]
 [!code-vb[UIAClient_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationPattern Pattern;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationPattern Pattern" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pattern As AutomationPattern " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationPattern ^ Pattern;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pattern : System.Windows.Automation.AutomationPattern" Usage="System.Windows.Automation.InvokePattern.Pattern" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0dd2b-118">标识 <see cref="T:System.Windows.Automation.InvokePattern" /> 控件模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0dd2b-118">Identifies the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0dd2b-119">UI 自动化客户端应用程序使用此标识符。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-119">This identifier is used by UI Automation client applications.</span></span> <span data-ttu-id="0dd2b-120">UI 自动化提供程序应使用中的等效字段<xref:System.Windows.Automation.InvokePatternIdentifiers>。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-120">UI Automation providers should use the equivalent field in <xref:System.Windows.Automation.InvokePatternIdentifiers>.</span></span>  
  
 <span data-ttu-id="0dd2b-121">模式标识符传递到方法，如<xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>若要从指定检索控件模式感兴趣的<xref:System.Windows.Automation.AutomationElement>。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-121">The pattern identifier is passed to methods such as <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A> to retrieve the control pattern of interest from the specified <xref:System.Windows.Automation.AutomationElement>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0dd2b-122">在下面的示例<xref:System.Windows.Automation.InvokePattern>从控件获取控件模式和<xref:System.Windows.Automation.InvokePattern.Invoke%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="0dd2b-122">In the following example an <xref:System.Windows.Automation.InvokePattern> control pattern is obtained from a control and the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method is called.</span></span>  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>