<Type Name="AutomationElement+AutomationElementInformation" FullName="System.Windows.Automation.AutomationElement+AutomationElementInformation">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dde7d70db13246a761ad1726b428ff0e6c170eff" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659216" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct AutomationElement.AutomationElementInformation" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit AutomationElement/AutomationElementInformation extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.AutomationElement.AutomationElementInformation" />
  <TypeSignature Language="VB.NET" Value="Public Structure AutomationElement.AutomationElementInformation" />
  <TypeSignature Language="C++ CLI" Value="public: value class AutomationElement::AutomationElementInformation" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含由 <see cref="P:System.Windows.Automation.AutomationElement.Cached" /> 或 <see cref="P:System.Windows.Automation.AutomationElement.Current" /> 属性使用的属性访问器。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以直接从访问的属性<xref:System.Windows.Automation.AutomationElement.Cached%2A>和<xref:System.Windows.Automation.AutomationElement.Current%2A>; 不需要检索<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation>结构本身。  
  
 此结构中的属性还可以通过使用来检索<xref:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue%2A>和<xref:System.Windows.Automation.AutomationElement.GetCachedPropertyValue%2A>，使用相应标识符从<xref:System.Windows.Automation.AutomationElement>。 例如，<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.AcceleratorKey%2A?displayProperty=nameWithType>属性由<xref:System.Windows.Automation.AutomationElement.AcceleratorKeyProperty?displayProperty=nameWithType>字段。 这些标识符; 参考页上提供了有关各个属性的详细信息请参阅每个引用主题备注部分中的链接。  
  
   
  
## Examples  
 下面的示例演示如何<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.Name%2A>属性检索此结构中。  
  
 [!code-csharp[UIAClient_snip#106](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#106)]
 [!code-vb[UIAClient_snip#106](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#106)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AcceleratorKey">
      <MemberSignature Language="C#" Value="public string AcceleratorKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AcceleratorKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AcceleratorKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AcceleratorKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AcceleratorKey { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个包含元素快捷键组合的字符串。</summary>
        <value>用于调用与元素关联的操作的键组合序列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 快捷键组合调用动作。 例如，CTRL + O 通常用于调用**文件打开**对话框。 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 元素具有快捷键的 key 属性始终设置实现<xref:System.Windows.Automation.InvokePattern>类。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.AcceleratorKeyProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessKey">
      <MemberSignature Language="C#" Value="public string AccessKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AccessKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AccessKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessKey { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个包含元素的访问键字符的字符串。</summary>
        <value>与一个元素关联的、用于激活该元素的字符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 访问键是中的菜单、 菜单项或如激活附加的菜单函数的按钮控件标签的文本的字符。 例如，字母"O"通常用于调用**打开**从文件通用对话框**文件**菜单。  [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 将访问密钥属性始终设置的元素实现<xref:System.Windows.Automation.InvokePattern>类。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.AccessKeyProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutomationId">
      <MemberSignature Language="C#" Value="public string AutomationId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AutomationId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AutomationId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AutomationId { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个字符串，其中包含元素的 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] [!INCLUDE[TLA#tla_id](~/includes/tlasharptla-id-md.md)]。</summary>
        <value>是唯一的而在其容器内的同级元素的 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当它可用时<xref:System.Windows.Automation.AutomationElement.AutomationIdProperty>的元素应始终为应用程序而不考虑本地语言的任何实例中相同。 值应该是唯一的而同级元素但不是一定是唯一跨整个桌面。 例如，应用程序的多个实例或在 Microsoft Windows 资源管理器的多个文件夹视图可能包含具有相同的元素<xref:System.Windows.Automation.AutomationElement.AutomationIdProperty>，如"SystemMenuBar"。  
  
 尽管支持<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId%2A>始终在此属性不强制性更好的可测试性，建议。 只要它受支持，<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId%2A>创建测试自动化脚本，而不考虑 UI 语言运行时很有用。 客户端应进行任何假设有关<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId%2A>由其他应用程序公开的 s。 <xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId%2A>不一定能保证跨不同版本保持不变或生成的应用程序。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.AutomationIdProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingRectangle">
      <MemberSignature Language="C#" Value="public System.Windows.Rect BoundingRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect BoundingRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.BoundingRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BoundingRectangle As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect BoundingRectangle { System::Windows::Rect get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取完全包围元素的矩形的坐标。</summary>
        <value>包围矩形的点坐标。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的矩形可以包含不是可单击的点。 可能发生这种情况的实例时，将[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]项具有不规则形状或可单击区域，或由其他模糊[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]元素。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.Automation.AutomationElement.BoundingRectangleProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClassName">
      <MemberSignature Language="C#" Value="public string ClassName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClassName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ClassName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClassName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClassName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个字符串，其中包含由控件开发人员分配的元素的类名称。</summary>
        <value>由控件开发人员分配的类名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的值是依赖于实现的。 属性是在测试环境中有用。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.ClassNameProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlType">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.ControlType ControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.ControlType ControlType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ControlType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ControlType As ControlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::ControlType ^ ControlType { System::Windows::Automation::ControlType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取元素的 <see cref="T:System.Windows.Automation.ControlType" />。</summary>
        <value>此元素的交互模型。 默认值为 <see cref="F:System.Windows.Automation.ControlType.Custom" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控件类型描述用于的已知的交互模型任意[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]元素而不依赖于本地化的控件类型或复杂的逻辑规则组合。  
  
 唯一的情形在运行时在其中可以更改此属性是支持的控件<xref:System.Windows.Automation.MultipleViewPattern>。 一个示例是[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]ListView 控件，可以更改从<xref:System.Windows.Automation.ControlType.DataGrid>到<xref:System.Windows.Automation.ControlType.List>，取决于当前的视图。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.ControlTypeProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FrameworkId">
      <MemberSignature Language="C#" Value="public string FrameworkId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FrameworkId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.FrameworkId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FrameworkId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FrameworkId { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取基础 UI 框架的名称。</summary>
        <value>UI 框架的名称，例如“Win32”、“WinForm”或“DirectUI”。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回属性的值属于类型<xref:System.String>。 默认值为一个空字符串。  
  
 此属性使应用程序要应用于整个 UI 框架的特殊情况。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.FrameworkIdProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKeyboardFocus">
      <MemberSignature Language="C#" Value="public bool HasKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HasKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasKeyboardFocus { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示此元素是否具有键盘焦点。</summary>
        <value>
          如果此元素具有键盘焦点，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果容器中的元素具有焦点，<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.HasKeyboardFocus%2A>的容器元素也是如此。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.HasKeyboardFocusProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HelpText">
      <MemberSignature Language="C#" Value="public string HelpText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HelpText" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpText { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与元素关联的帮助文本。</summary>
        <value>元素的工具提示帮助文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.HelpTextProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContentElement">
      <MemberSignature Language="C#" Value="public bool IsContentElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContentElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsContentElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContentElement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContentElement { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指定元素是否为内容元素。</summary>
        <value>
          如果元素为内容元素，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容元素包含向用户显示的数据。 内容的元素的示例包括列表框或上一个对话框的按钮中的项。 非内容元素，也称为外围元素，通常用于操作复合控件; 中的内容例如，下拉列表控件上的按钮。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.IsContentElementProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsControlElement">
      <MemberSignature Language="C#" Value="public bool IsControlElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsControlElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsControlElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsControlElement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsControlElement { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示元素是否以控件的形式查看。</summary>
        <value>
          如果元素以控件的形式查看，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.IsControlElementProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否已启用由 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]元素引用的 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 项。</summary>
        <value>
          如果已启用控件，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled%2A>属性可以更改由于[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]交互。 应通过调用获取更新的缓存<xref:System.Windows.Automation.AutomationElement.GetUpdatedCache%2A>如果的值<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled%2A>发出缓存请求后，可能已更改属性。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.IsEnabledProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusable">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsKeyboardFocusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]元素是否可接受键盘焦点。</summary>
        <value>
          如果元素可接收键盘焦点，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.IsKeyboardFocusableProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOffscreen">
      <MemberSignature Language="C#" Value="public bool IsOffscreen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOffscreen" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOffscreen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOffscreen { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]元素在屏幕上是否可见。</summary>
        <value>
          如果控件不可见，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个布尔值，该值指示是否完全滚动元素 （例如，列表框中的项的容器对象视区外位于） 或不在视图折叠 （例如中的树视图、 菜单或最小化的窗口的项）。  
  
 如果元素具有可单击的点可能会导致其获得焦点，它被视为甚至当元素的部分屏幕关闭时，才可在屏幕上。  
  
 属性的值不受被遮蔽其他窗口中，或该元素是否在特定监视器上可见。  
  
 将 IsOffscreen 时`true,`滚动或折叠起来，从视图中，但仍是的一部分的 UI，在最终用户感觉的元素可以将重新装入到视图通过简单的操作，如滚动或单击下拉列表控件。  
  
 如果该元素是最终用户不会根本察觉或简称为"以编程方式隐藏"（例如，对话框中，具有已忽略，但其中下划线对象缓存应用程序），则它应删除从元素树，而不是设置的值将 IsOffscreen 到`true`。  
  
 当值是`true`对于容器，它也是`true`的容器元素的后代。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.IsOffscreenProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPassword">
      <MemberSignature Language="C#" Value="public bool IsPassword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPassword" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsPassword" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPassword As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPassword { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]元素是否包含受保护的内容。</summary>
        <value>
          如果元素包含受保护的内容，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性使如屏幕读取器的应用程序以确定是否应朗读的文本内容的控件。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.IsPasswordProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRequiredForForm">
      <MemberSignature Language="C#" Value="public bool IsRequiredForForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRequiredForForm" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsRequiredForForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRequiredForForm As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRequiredForForm { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否需要在窗体上填充 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]元素。</summary>
        <value>
          如果需要填充元素，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.IsRequiredForFormProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemStatus">
      <MemberSignature Language="C#" Value="public string ItemStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ItemStatus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemStatus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ItemStatus As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ItemStatus { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取元素内某一项的状态说明。</summary>
        <value>状态的说明。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性使客户端来确定某元素是否传达有关某个项的状态。 例如，消息处理应用程序中的联系人与关联的项可能为"忙碌"或"已连接"。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.ItemStatusProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemType">
      <MemberSignature Language="C#" Value="public string ItemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ItemType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ItemType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ItemType { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个项的类型说明。</summary>
        <value>一个描述项的本地化字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性用于获取有关列表、 树视图中或数据网格中的项的信息。 例如，文件目录视图中的项可能是"文档文件"或"文件夹"。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.ItemTypeProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LabeledBy">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement LabeledBy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.AutomationElement LabeledBy" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LabeledBy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LabeledBy As AutomationElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::AutomationElement ^ LabeledBy { System::Windows::Automation::AutomationElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含此元素的文本标签的元素。</summary>
        <value>作为此元素的标签的元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性无法用于检索，例如，组合框的静态文本标签。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.LabeledByProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizedControlType">
      <MemberSignature Language="C#" Value="public string LocalizedControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalizedControlType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LocalizedControlType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalizedControlType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LocalizedControlType { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取控件类型的说明。</summary>
        <value>控件类型（如“button”）的本地化说明。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.LocalizedControlTypeProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取元素的名称。</summary>
        <value>[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]元素的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 元素的名称可以用于查找中的元素[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]元素树时<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId%2A>元素上不支持属性。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.NameProperty>。  
  
   
  
## Examples  
 下面的示例演示如何<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.Name%2A>检索属性。  
  
 [!code-csharp[UIAClient_snip#106](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#106)]
 [!code-vb[UIAClient_snip#106](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#106)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NativeWindowHandle">
      <MemberSignature Language="C#" Value="public int NativeWindowHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NativeWindowHandle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.NativeWindowHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NativeWindowHandle As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NativeWindowHandle { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取元素窗口的句柄。</summary>
        <value>窗口的句柄（如果存在）；否则为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.NativeWindowHandleProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Orientation">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.OrientationType Orientation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.OrientationType Orientation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Orientation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Orientation As OrientationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::OrientationType Orientation { System::Windows::Automation::OrientationType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.OrientationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取控件的方向。</summary>
        <value>方向。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由如滚动条和可以为垂直或水平方向的滑块控件支持此属性。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.OrientationProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessId">
      <MemberSignature Language="C#" Value="public int ProcessId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ProcessId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ProcessId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProcessId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ProcessId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此元素的进程 [!INCLUDE[TLA#tla_id](~/includes/tlasharptla-id-md.md)]。</summary>
        <value>承载此元素的进程 ID。 此属性的默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 进程[!INCLUDE[TLA#tla_id](~/includes/tlasharptla-id-md.md)]由操作系统分配。 将可以看到它在**PID**列**进程**选项卡在任务管理器。  
  
 有关详情，请参阅<xref:System.Windows.Automation.AutomationElement.ProcessIdProperty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>