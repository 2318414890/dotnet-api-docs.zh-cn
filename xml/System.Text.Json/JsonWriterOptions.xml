<Type Name="JsonWriterOptions" FullName="System.Text.Json.JsonWriterOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="604c56611ba309e0717259c0da05485dda26d67c" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541692" /></Metadata><TypeSignature Language="C#" Value="public struct JsonWriterOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonWriterOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonWriterOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonWriterOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonWriterOptions" />
  <TypeSignature Language="F#" Value="type JsonWriterOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>允许用户在使用 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 编写 JSON 时定义自定义行为。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

默认情况下，JSON 编写无需任何缩进或额外的空白区域。 此外，<xref:System.Text.Json.Utf8JsonWriter>将引发异常，如果用户尝试编写结构上无效的 JSON。

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Indented">
      <MemberSignature Language="C#" Value="public bool Indented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Indented" />
      <MemberSignature Language="VB.NET" Value="Public Property Indented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indented : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.Indented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 是否应对 JSON 输入进行格式设置，包括缩进嵌套的 JSON 令牌、添加新行以及在属性名称和值之间添加空格。</summary>
        <value><see langword="true" /> 若要格式化 JSON 输出;<see langword="false" />编写时无需任何额外的空白区域。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipValidation">
      <MemberSignature Language="C#" Value="public bool SkipValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipValidation" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipValidation : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 是否应跳过结构验证并允许用户编写无效 JSON。</summary>
        <value><see langword="true" /> 若要跳过结构验证，并允许无效的 JSON;<see langword="false" />引发<see cref="T:System.InvalidOperationException" />上任何尝试编写无效的 JSON。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

如果要写入的 JSON 已知的正确，然后跳过验证 (通过将此属性设置为`true`) 可能会提高性能。
无效的 JSON 编写器将引发位置的示例 (当`SkipValidation`设置为`false`) 是在编写不包含属性名称的 JSON 对象内的某个值时。 

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>