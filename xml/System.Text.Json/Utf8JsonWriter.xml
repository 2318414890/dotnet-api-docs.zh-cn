<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bf8bd7fdfd80ccc415cee28e69de81768b96942" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541640" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonWriter" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonWriter extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonWriter" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonWriter" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e10bd-101">提供高性能的 API，以便提供 UTF-8 编码 JSON 文本的只进和非缓存编写权限。</span><span class="sxs-lookup"><span data-stu-id="e10bd-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="e10bd-102">`Utf8JsonWriter` 写入的文本按顺序不使用缓存并默认情况下遵循[JSON RFC](https://tools.ietf.org/html/rfc8259)，除了编写注释。</span><span class="sxs-lookup"><span data-stu-id="e10bd-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="e10bd-103">尝试编写无效的 JSON 验证时的方法已启用，则会引发<xref:System.InvalidOperationException>使用特定于上下文的错误消息。</span><span class="sxs-lookup"><span data-stu-id="e10bd-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>
<span data-ttu-id="e10bd-104">由于此类型是 ref 结构，它不直接支持异步。</span><span class="sxs-lookup"><span data-stu-id="e10bd-104">Since this type is a ref struct, it does not directly support async.</span></span> <span data-ttu-id="e10bd-105">但是，它提供对可重入性编写部分数据，若要继续在区块中编写的支持。</span><span class="sxs-lookup"><span data-stu-id="e10bd-105">However, it does provide support for reentrancy to write partial data and to continue writing in chunks.</span></span>
<span data-ttu-id="e10bd-106">若要在格式化输出缩进和空白区域或跳过验证，创建的实例<xref:System.Text.Json.JsonWriterState>并将其在传递到编写器。</span><span class="sxs-lookup"><span data-stu-id="e10bd-106">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterState> and pass that in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterState state = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional state As JsonWriterState = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterState -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="state" Type="System.Text.Json.JsonWriterState" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="e10bd-107"><see cref="T:System.Buffers.IBufferWriter`1" /> 的实例，用作编写 JSON 文本的目标。</span><span class="sxs-lookup"><span data-stu-id="e10bd-107">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text.</span></span></param>
        <param name="state"><span data-ttu-id="e10bd-108">包含读取器状态的结构。</span><span class="sxs-lookup"><span data-stu-id="e10bd-108">A struct that contains the reader state.</span></span> <span data-ttu-id="e10bd-109">第一次调用构造函数时，它应反映默认状态；否则，它应从 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的上一个实例捕获状态并传递回去。</span><span class="sxs-lookup"><span data-stu-id="e10bd-109">On the first call to the constructor, it should reflect a default state; otherwise, it should capture the state from the previous instance instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="e10bd-110">使用指定的 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 初始化 <paramref name="bufferWriter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e10bd-110">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class with the specified <paramref name="bufferWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="e10bd-111">由于此类型是 ref 结构，它是仅限堆栈的类型，并向其应用的 ref 结构的所有限制。</span><span class="sxs-lookup"><span data-stu-id="e10bd-111">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="e10bd-112">这是为什么构造函数接受的原因<xref:System.Text.Json.JsonWriterState>。</span><span class="sxs-lookup"><span data-stu-id="e10bd-112">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonWriterState>.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e10bd-113"><paramref name="bufferWriter" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-113"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e10bd-114">获取目前为止 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 为 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的当前实例提交到输出的字节总数。</span><span class="sxs-lookup"><span data-stu-id="e10bd-114">Gets the total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="e10bd-115">这指示 <see cref="T:System.Buffers.IBufferWriter`1" /> 的升级程度。</span><span class="sxs-lookup"><span data-stu-id="e10bd-115">This indicates how much the <see cref="T:System.Buffers.IBufferWriter`1" /> has advanced.</span></span></summary>
        <value><span data-ttu-id="e10bd-116">总字节数的已提交到由输出<see cref="T:System.Text.Json.Utf8JsonWriter" />到目前为止。</span><span class="sxs-lookup"><span data-stu-id="e10bd-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesWritten">
      <MemberSignature Language="C#" Value="public long BytesWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesWritten" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesWritten As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesWritten { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesWritten : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e10bd-117">获取目前 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 为 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的实例编写的字节总数。</span><span class="sxs-lookup"><span data-stu-id="e10bd-117">Gets the total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="e10bd-118">这包括除了已提交的内容之外编写的数据。</span><span class="sxs-lookup"><span data-stu-id="e10bd-118">This includes data that has been written beyond what has already been committed.</span></span></summary>
        <value><span data-ttu-id="e10bd-119">写入的字节总数<see cref="T:System.Text.Json.Utf8JsonWriter" />到目前为止。</span><span class="sxs-lookup"><span data-stu-id="e10bd-119">The total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e10bd-120">获取当前标记的深度。</span><span class="sxs-lookup"><span data-stu-id="e10bd-120">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="e10bd-121">当前标记的深度。</span><span class="sxs-lookup"><span data-stu-id="e10bd-121">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="e10bd-122">`CurrentDepth`属性跟踪嵌套对象的递归深度 / 当前编写的 JSON 文本中的数组。</span><span class="sxs-lookup"><span data-stu-id="e10bd-122">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (Optional isFinalBlock As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.Flush : bool -&gt; unit" Usage="utf8JsonWriter.Flush isFinalBlock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isFinalBlock"><span data-ttu-id="e10bd-123"><see langword="true" /> 指示不会编写更多数据；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-123"><see langword="true" /> to indicate no more data will be written; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="e10bd-124">这用于验证在没有更多要关注的数据情况下，编写的 JSON 在结构上是否有效。</span><span class="sxs-lookup"><span data-stu-id="e10bd-124">This is used to validate that the JSON written so far is structurally valid if no more data is to follow.</span></span></param>
        <summary><span data-ttu-id="e10bd-125">根据目前已编写的内容提升基础 <see cref="T:System.Buffers.IBufferWriter`1" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-125">Advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-126">编写了不完整的 JSON，并且 <paramref name="isFinalBlock" /> 为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-126">Incomplete JSON has been written and <paramref name="isFinalBlock" /> is <see langword="true" />.</span></span> <span data-ttu-id="e10bd-127">例如，需要关闭打开的对象或数组时。</span><span class="sxs-lookup"><span data-stu-id="e10bd-127">For example, when an open object or array needs to be closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonWriterState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.GetCurrentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState () As JsonWriterState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonWriterState GetCurrentState();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : unit -&gt; System.Text.Json.JsonWriterState" Usage="utf8JsonWriter.GetCurrentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e10bd-128">返回 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 状态的当前快照，该状态必须由调用方捕获并传递回包含更多数据的 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="e10bd-128">Returns the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state that must be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonWriter" /> constructor with more data.</span></span></summary>
        <returns><span data-ttu-id="e10bd-129"><see cref="T:System.Text.Json.Utf8JsonWriter" /> 状态的当前快照。</span><span class="sxs-lookup"><span data-stu-id="e10bd-129">The current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="e10bd-130">与不同<xref:System.Text.Json.Utf8JsonWriter>、 这是 ref 结构、 状态可以经受得住跨异步/等待边界和因此需要此类型提供支持的更多数据然后再继续进行的新实例以异步方式读取<xref:System.Text.Json.Utf8JsonWriter>。</span><span class="sxs-lookup"><span data-stu-id="e10bd-130">Unlike the <xref:System.Text.Json.Utf8JsonWriter>, which is a ref struct, the state can survive across async/await boundaries, and hence this type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonWriter>.</span></span>

<span data-ttu-id="e10bd-131">获取用于创建新的状态<see cref="T:System.Text.Json.Utf8JsonWriter" />结构而无需第一个提交已写入的数据会导致不一致的状态。</span><span class="sxs-lookup"><span data-stu-id="e10bd-131">Getting the state for creating a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> struct without first committing the data that has been written would result in an inconsistent state.</span></span> <span data-ttu-id="e10bd-132">调用<xref:System.Text.Json.Utf8JsonWriter.Flush%2A>之前获取的当前状态。</span><span class="sxs-lookup"><span data-stu-id="e10bd-132">Call <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> before getting the current state.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-133">已对 JSON 数据进行编写和缓冲，但尚未刷新到 <see cref="T:System.Buffers.IBufferWriter`1" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-133">The JSON data has been written and buffered but not yet flushed to the <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-134">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-134">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-135">要写为 JSON 文本“true”或“false”且作为名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-135">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-136">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-136"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-137">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-137">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-138">编写属性名称和 <see cref="T:System.Boolean" /> 值（写为 JSON 文本“true”或“false”）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-138">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-139"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-139"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-140">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-140">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-141">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-141">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-142">要写为 JSON 文本“true”或“false”且作为名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-142">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-143">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-143"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-144">这是可选参数，其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-144">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-145">编写属性名称和 <see cref="T:System.Boolean" /> 值（写为 JSON 文本“true”或“false”）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-145">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-146"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-146"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-147">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-147">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-148">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-148">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-149">要写为 JSON 文本“true”或“false”且作为名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-149">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-150">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-150"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-151">这是可选参数，其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-151">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-152">编写属性名称和 <see cref="T:System.Boolean" /> 值（写为 JSON 文本“true”或“false”）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-152">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-153"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-153"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-154">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-154">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-155">要编写为 JSON 文本“true”或“false”且作为 JSON 数组元素的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-155">The value to be written as a JSON literal "true" or "false" as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e10bd-156">编写 <see cref="T:System.Boolean" /> 值（编写为 JSON 文本“true”或“false”）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-156">Writes the <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-157">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-157">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="e10bd-158">要编写为 JSON 注释的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-158">The UTF-8 encoded value to be written as a JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-159">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-159"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-160">这是可选参数，其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-160">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-161">将 UTF-8 文本值编写为 JSON 注释（在 <c>/../</c> 内）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-161">Writes the UTF-8 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-162"><paramref name="utf8Value" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-162"><paramref name="utf8Value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-163">要编写为 UTF-8 转码 JSON 注释的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-163">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-164">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-164"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-165">这是可选参数，其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-165">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-166">编写 UTF-16 文本值作为 JSON 注释（在 <c>/../</c> 内）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-166">Writes the UTF-16 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-167"><paramref name="value" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-167"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-168">要编写为 UTF-8 转码 JSON 注释的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-168">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-169">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-169"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-170">这是可选参数，其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-170">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-171">编写字符串文本值作为 JSON 注释（在 <c>/../</c> 内）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-171">Writes the string text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-172"><paramref name="value" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-172"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e10bd-173">编写 JSON 数组的结尾。</span><span class="sxs-lookup"><span data-stu-id="e10bd-173">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-174">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-174">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e10bd-175">编写 JSON 对象的结尾。</span><span class="sxs-lookup"><span data-stu-id="e10bd-175">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-176">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-176">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-177">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-177">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-178">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-178"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-179">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-179">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-180">编写属性名称和 JSON 文本“NULL”作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-180">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-181"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-181"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-182">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-182">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-183">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-183">The UTF-16 encoded property name of the JSON object to transcode and write as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-184">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-184"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-185">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-185">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-186">编写属性名称和 JSON 文本“NULL”作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-186">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-187"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-187"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-188">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-188">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-189">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-189">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-190">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-190"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-191">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-191">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-192">编写属性名称和 JSON 文本“NULL”作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-192">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-193"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-193"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-194">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-194">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e10bd-195">编写 JSON 文本“NULL”作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-195">Writes the JSON literal "null" as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-196">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-196">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-197">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-197">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-198">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-198">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-199">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-199"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-200">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-200">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-201">编写属性名称和 <see cref="T:System.Decimal" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-201">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-202">将写入<see cref="T:System.Decimal" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-202">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-203"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-203"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-204">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-204">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-205">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-205">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-206">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-206">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-207">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-207"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-208">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-208">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-209">编写属性名称和 <see cref="T:System.Double" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-209">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-210">将写入<see cref="T:System.Double" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-210">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-211"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-211"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-212">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-212">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-213">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-213">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-214">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-214">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-215">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-215"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-216">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-216">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-217">编写属性名称和 <see cref="T:System.Int32" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-217">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-218">将写入<see cref="T:System.Int32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-218">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-219">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-219">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-220"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-220"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-221">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-221">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-222">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-222">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-223">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-223">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-224">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-224"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-225">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-225">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-226">编写属性名称和 <see cref="T:System.Int64" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-226">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-227">将写入<see cref="T:System.Int64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-227">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-228">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-228">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-229"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-229"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-230">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-230">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-231">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-231">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-232">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-232">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-233">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-233"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-234">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-234">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-235">编写属性名称和 <see cref="T:System.Single" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-235">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-236">将写入<see cref="T:System.Single" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-236">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-237"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-237"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-238">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-238">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-239">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-239">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-240">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-240">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-241">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-241"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-242">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-242">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-243">编写属性名称和 <see cref="T:System.UInt32" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-243">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-244">将写入<see cref="T:System.UInt32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-244">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-245">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-245">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-246"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-246"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-247">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-247">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-248">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-248">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-249">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-249">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-250">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-250"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-251">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-251">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-252">编写属性名称和 <see cref="T:System.UInt64" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-252">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-253">将写入<see cref="T:System.UInt64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-253">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-254">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-254">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-255"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-255"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-256">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-256">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-257">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-257">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-258">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-258">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-259">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-259"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-260">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-260">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-261">编写属性名称和 <see cref="T:System.Decimal" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-261">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-262">将写入<see cref="T:System.Decimal" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-262">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-263"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-263"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-264">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-264">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-265">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-265">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-266">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-267">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-267"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-268">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-268">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-269">编写属性名称和 <see cref="T:System.Double" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-269">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-270">将写入<see cref="T:System.Double" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-270">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-271"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-271"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-272">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-272">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-273">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-273">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-274">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-274">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-275">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-275"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-276">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-276">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-277">编写属性名称和 <see cref="T:System.Int32" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-277">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-278">将写入<see cref="T:System.Int32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-278">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-279">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-279">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-280"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-280"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-281">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-281">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-282">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-282">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-283">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-283">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-284">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-284"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-285">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-285">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-286">编写属性名称和 <see cref="T:System.Int64" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-286">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-287">将写入<see cref="T:System.Int64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-287">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-288">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-288">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-289"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-289"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-290">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-290">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-291">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-291">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-292">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-292">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-293">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-293"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-294">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-294">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-295">编写属性名称和 <see cref="T:System.Single" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-295">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-296">将写入<see cref="T:System.Single" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-296">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-297"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-297"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-298">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-298">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-299">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-299">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-300">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-300">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-301">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-301"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-302">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-302">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-303">编写属性名称和 <see cref="T:System.UInt32" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-303">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-304">将写入<see cref="T:System.UInt32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-304">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-305">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-305">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-306"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-306"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-307">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-307">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-308">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-308">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-309">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-309">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-310">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-310"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-311">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-311">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-312">编写属性名称和 <see cref="T:System.UInt64" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-312">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-313">将写入<see cref="T:System.UInt64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-313">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-314">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-314">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-315"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-315"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-316">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-316">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-317">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-317">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-318">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-318">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-319">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-319"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-320">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-320">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-321">编写属性名称和 <see cref="T:System.Decimal" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-321">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-322">将写入<see cref="T:System.Decimal" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-322">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-323"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-323"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-324">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-324">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-325">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-325">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-326">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-326">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-327">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-327"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-328">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-328">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-329">编写属性名称和 <see cref="T:System.Double" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-329">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-330">将写入<see cref="T:System.Double" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-330">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-331"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-331"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-332">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-332">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-333">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-333">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-334">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-334">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-335">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-335"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-336">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-336">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-337">编写属性名称和 <see cref="T:System.Int32" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-337">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-338">将写入<see cref="T:System.Int32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-338">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-339">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-339">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-340"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-340"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-341">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-341">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-342">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-342">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-343">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-343">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-344">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-344"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-345">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-345">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-346">编写属性名称和 <see cref="T:System.Int64" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-346">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-347">将写入<see cref="T:System.Int64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-347">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-348">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-348">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-349"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-349"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-350">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-350">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-351">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-351">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-352">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-352">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-353">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-353"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-354">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-354">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-355">编写属性名称和 <see cref="T:System.Single" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-355">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-356">将写入<see cref="T:System.Single" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-356">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-357"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-357"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-358">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-358">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-359">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-359">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-360">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-360">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-361">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-361"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-362">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-362">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-363">编写属性名称和 <see cref="T:System.UInt32" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-363">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-364">将写入<see cref="T:System.UInt32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-364">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-365">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-365">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-366"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-366"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-367">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-367">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-368">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-368">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-369">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-369">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-370">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-370"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-371">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-371">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-372">编写属性名称和 <see cref="T:System.UInt64" /> 值（作为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-372">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-373">将写入<see cref="T:System.UInt64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-373">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-374">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-374">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-375"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-375"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-376">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-376">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-377">要以 JSON 数字形式作为 JSON 数组的元素写入的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-377">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e10bd-378">编写 <see cref="T:System.Decimal" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-378">Writes the <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-379">将写入<see cref="T:System.Decimal" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-379">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-380">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-380">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-381">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-381">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e10bd-382">编写 <see cref="T:System.Double" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-382">Writes the <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-383">将写入<see cref="T:System.Double" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-383">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-384">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-384">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-385">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-385">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e10bd-386">编写 <see cref="T:System.Int32" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-386">Writes the <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-387">将写入<see cref="T:System.Int32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-387">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-388">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-388">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-389">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-389">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-390">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-390">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e10bd-391">编写 <see cref="T:System.Int64" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-391">Writes the <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-392">将写入<see cref="T:System.Int64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-392">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-393">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-393">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-394">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-394">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-395">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-395">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e10bd-396">编写 <see cref="T:System.Single" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-396">Writes the <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-397">将写入<see cref="T:System.Single" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-397">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-398">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-398">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-399">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-399">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e10bd-400">编写 <see cref="T:System.UInt32" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-400">Writes the <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-401">将写入<see cref="T:System.UInt32" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-401">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-402">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-402">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-403">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-403">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-404">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-404">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e10bd-405">编写 <see cref="T:System.UInt64" /> 值（作为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-405">Writes the <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-406">将写入<see cref="T:System.UInt64" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，G)。</span><span class="sxs-lookup"><span data-stu-id="e10bd-406">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e10bd-407">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="e10bd-407">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-408">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-408">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e10bd-409">编写 JSON 数组的开头。</span><span class="sxs-lookup"><span data-stu-id="e10bd-409">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-410">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="e10bd-410">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="e10bd-411">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e10bd-411">-or-</span></span>

<span data-ttu-id="e10bd-412">如果这将导致要编写的 JSON 无效（启用验证时）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-412">if this would result in an invalid JSON to be written (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-413">要编写的 JSON 数组的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-413">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-414">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-414"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-415">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-415">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-416">编写 JSON 数组的开头，且带有一个用作键的属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-416">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-417"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-417"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-418">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="e10bd-418">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="e10bd-419">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e10bd-419">-or-</span></span>

<span data-ttu-id="e10bd-420">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-420">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-421">要进行转码并写为 UTF-8 的 JSON 数字的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-421">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-422">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-422"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-423">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-423">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-424">编写 JSON 数组的开头，且带有一个用作键的属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-424">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-425"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-425"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-426">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="e10bd-426">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="e10bd-427">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e10bd-427">-or-</span></span>

<span data-ttu-id="e10bd-428">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-428">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-429">要进行转码并写为 UTF-8 的 JSON 数字的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-429">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-430">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-430"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-431">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-431">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-432">编写 JSON 数组的开头，且带有一个用作键的属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-432">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-433"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-433"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-434">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="e10bd-434">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="e10bd-435">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e10bd-435">-or-</span></span>

<span data-ttu-id="e10bd-436">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-436">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e10bd-437">编写 JSON 对象的开头。</span><span class="sxs-lookup"><span data-stu-id="e10bd-437">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-438">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="e10bd-438">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="e10bd-439">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e10bd-439">-or-</span></span>

<span data-ttu-id="e10bd-440">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-440">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-441">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-441">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-442">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-442"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-443">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-443">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-444">编写 JSON 对象的开头，将属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="e10bd-444">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-445"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-445"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-446">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="e10bd-446">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="e10bd-447">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e10bd-447">-or-</span></span>

<span data-ttu-id="e10bd-448">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-448">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-449">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-449">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-450">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-450"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-451">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-451">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-452">编写 JSON 对象的开头，将属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="e10bd-452">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-453"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-453"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-454">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="e10bd-454">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="e10bd-455">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e10bd-455">-or-</span></span>

<span data-ttu-id="e10bd-456">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-456">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-457">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-457">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-458">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-458"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-459">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-459">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-460">编写 JSON 对象的开头，将属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="e10bd-460">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-461"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-461"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-462">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="e10bd-462">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="e10bd-463">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e10bd-463">-or-</span></span>

<span data-ttu-id="e10bd-464">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-464">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-465">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-465">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-466">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-466">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-467">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-467"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-468">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-468">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-469">编写属性名称和 <see cref="T:System.DateTime" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-469">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-470">将写入<see cref="T:System.DateTime" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="e10bd-470">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="e10bd-471">例如，2017年-06-12T05:30:45.7680000。</span><span class="sxs-lookup"><span data-stu-id="e10bd-471">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-472"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-472"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-473">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-473">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-474">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-474">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-475">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-475">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-476">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-476"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-477">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-477">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-478">编写属性名称和 <see cref="T:System.DateTimeOffset" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-478">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-479">将写入<see cref="T:System.DateTimeOffset" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="e10bd-479">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="e10bd-480">例如，2017年-06-12T05:30:45.7680000-07:00。</span><span class="sxs-lookup"><span data-stu-id="e10bd-480">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-481"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-481"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-482">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-482">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-483">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-483">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-484">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-484">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-485">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-485"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-486">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-486">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-487">编写属性名称和 <see cref="T:System.Guid" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-487">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-488">将写入<see cref="T:System.Guid" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，具有)，与窗体： nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="e10bd-488">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-489"><paramref name="utf8PropertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-489"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-490">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-490">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-491">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-491">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="e10bd-492">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-492">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-493">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。</span><span class="sxs-lookup"><span data-stu-id="e10bd-493">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="e10bd-494">始终对该值进行转义</span><span class="sxs-lookup"><span data-stu-id="e10bd-494">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="e10bd-495">编写 UTF-8 属性名称和 UTF-8 文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-495">Writes the UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-496">指定的属性名称或值太大时引发。</span><span class="sxs-lookup"><span data-stu-id="e10bd-496">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-497">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-497">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-498">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-498">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-499">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-499">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-500">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。</span><span class="sxs-lookup"><span data-stu-id="e10bd-500">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="e10bd-501">始终对该值进行转义</span><span class="sxs-lookup"><span data-stu-id="e10bd-501">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="e10bd-502">编写 UTF-8 属性名称和 UTF-16 文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-502">Writes the UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-503">指定的属性名称或值太大时引发。</span><span class="sxs-lookup"><span data-stu-id="e10bd-503">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-504">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-504">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e10bd-505">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-505">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-506">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-506">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-507">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。</span><span class="sxs-lookup"><span data-stu-id="e10bd-507">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="e10bd-508">始终对该值进行转义</span><span class="sxs-lookup"><span data-stu-id="e10bd-508">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="e10bd-509">编写 UTF-8 属性名称和字符串文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-509">Writes the UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-510">指定的属性名称或值太大时引发。</span><span class="sxs-lookup"><span data-stu-id="e10bd-510">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-511">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-511">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-512">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-512">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-513">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-513">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-514">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-514"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-515">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-515">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-516">编写属性名称和 <see cref="T:System.DateTime" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-516">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-517">将写入<see cref="T:System.DateTime" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="e10bd-517">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="e10bd-518">例如，2017年-06-12T05:30:45.7680000。</span><span class="sxs-lookup"><span data-stu-id="e10bd-518">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-519"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-519"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-520">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-520">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-521">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-521">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-522">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-522">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-523">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-523"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-524">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-524">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-525">编写属性名称和 <see cref="T:System.DateTimeOffset" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-525">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-526">将写入<see cref="T:System.DateTimeOffset" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="e10bd-526">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="e10bd-527">例如，2017年-06-12T05:30:45.7680000-07:00。</span><span class="sxs-lookup"><span data-stu-id="e10bd-527">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-528"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-528"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-529">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-529">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-530">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-530">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-531">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-531">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-532">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-532"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-533">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-533">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-534">编写属性名称和 <see cref="T:System.Guid" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-534">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-535">将写入<see cref="T:System.Guid" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，具有)，与窗体： nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="e10bd-535">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-536"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-536"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-537">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-537">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-538">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-538">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="e10bd-539">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-539">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-540">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。</span><span class="sxs-lookup"><span data-stu-id="e10bd-540">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="e10bd-541">始终对该值进行转义</span><span class="sxs-lookup"><span data-stu-id="e10bd-541">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="e10bd-542">编写 UTF-16 属性名称和 UTF-8 文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-542">Writes the UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-543">指定的属性名称或值太大时引发。</span><span class="sxs-lookup"><span data-stu-id="e10bd-543">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-544">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-544">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-545">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-545">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-546">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-546">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-547">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。</span><span class="sxs-lookup"><span data-stu-id="e10bd-547">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="e10bd-548">始终对该值进行转义</span><span class="sxs-lookup"><span data-stu-id="e10bd-548">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="e10bd-549">编写 UTF-16 属性名称和 UTF-16 文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-549">Writes the UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-550">指定的属性名称或值太大时引发。</span><span class="sxs-lookup"><span data-stu-id="e10bd-550">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-551">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-551">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-552">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-552">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-553">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-553">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-554">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。</span><span class="sxs-lookup"><span data-stu-id="e10bd-554">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="e10bd-555">始终对该值进行转义</span><span class="sxs-lookup"><span data-stu-id="e10bd-555">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="e10bd-556">编写 UTF-16 属性名称和字符串文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-556">Writes the UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-557">指定的属性名称或值太大时引发。</span><span class="sxs-lookup"><span data-stu-id="e10bd-557">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-558">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-558">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-559">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-559">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-560">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-560">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-561">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-561"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-562">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-562">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-563">编写属性名称和 <see cref="T:System.DateTime" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-563">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-564">将写入<see cref="T:System.DateTime" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="e10bd-564">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="e10bd-565">例如，2017年-06-12T05:30:45.7680000。</span><span class="sxs-lookup"><span data-stu-id="e10bd-565">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-566"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-566"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-567">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-567">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-568">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-568">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-569">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-569">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-570">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-570"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-571">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-571">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-572">编写属性名称和 <see cref="T:System.DateTimeOffset" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-572">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-573">将写入<see cref="T:System.DateTimeOffset" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="e10bd-573">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="e10bd-574">例如，2017年-06-12T05:30:45.7680000-07:00。</span><span class="sxs-lookup"><span data-stu-id="e10bd-574">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-575"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-575"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-576">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-576">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-577">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-577">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-578">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-578">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-579">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-579"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-580">这是可选参数；其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-580">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-581">编写属性名称和 <see cref="T:System.Guid" /> 值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-581">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-582">将写入<see cref="T:System.Guid" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，具有)，与窗体： nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="e10bd-582">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-583"><paramref name="propertyName" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-583"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-584">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-584">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-585">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-585">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="e10bd-586">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-586">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-587">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。</span><span class="sxs-lookup"><span data-stu-id="e10bd-587">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="e10bd-588">始终对该值进行转义</span><span class="sxs-lookup"><span data-stu-id="e10bd-588">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="e10bd-589">编写属性名称和 UTF-8 文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-589">Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-590">指定的属性名称或值太大时引发。</span><span class="sxs-lookup"><span data-stu-id="e10bd-590">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-591">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-591">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-592">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-592">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-593">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-593">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-594">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。</span><span class="sxs-lookup"><span data-stu-id="e10bd-594">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="e10bd-595">始终对该值进行转义</span><span class="sxs-lookup"><span data-stu-id="e10bd-595">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="e10bd-596">编写属性名称和 UTF-16 文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-596">Writes the property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-597">指定的属性名称或值太大时引发。</span><span class="sxs-lookup"><span data-stu-id="e10bd-597">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-598">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-598">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e10bd-599">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="e10bd-599">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e10bd-600">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-600">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-601">如果这设置为 false，则编写器会假设属性名称已正确转义，并且跳过转义步骤。</span><span class="sxs-lookup"><span data-stu-id="e10bd-601">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="e10bd-602">始终对该值进行转义</span><span class="sxs-lookup"><span data-stu-id="e10bd-602">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="e10bd-603">编写属性名称和字符串文本值（作为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="e10bd-603">Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-604">指定的属性名称或值太大时引发。</span><span class="sxs-lookup"><span data-stu-id="e10bd-604">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-605">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-605">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-606">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-606">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e10bd-607">编写 <see cref="T:System.DateTime" /> 值（作为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-607">Writes the <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-608">将写入<see cref="T:System.DateTime" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" /> 。</span><span class="sxs-lookup"><span data-stu-id="e10bd-608">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="e10bd-609">例如，2017年-06-12T05:30:45.7680000。</span><span class="sxs-lookup"><span data-stu-id="e10bd-609">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-610">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-610">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-611">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-611">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e10bd-612">编写 <see cref="T:System.DateTimeOffset" /> 值（作为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-612">Writes the <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-613">将写入<see cref="T:System.DateTimeOffset" />使用往返 (O) <see cref="T:System.Buffers.StandardFormat" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-613">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" />.</span></span> <span data-ttu-id="e10bd-614">例如，2017年-06-12T05:30:45.7680000-07:00。</span><span class="sxs-lookup"><span data-stu-id="e10bd-614">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-615">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-615">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-616">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-616">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e10bd-617">编写 <see cref="T:System.Guid" /> 值（作为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-617">Writes the <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e10bd-618">将写入<see cref="T:System.Guid" />使用默认<see cref="T:System.Buffers.StandardFormat" />(即，具有)，与窗体： nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="e10bd-618">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-619">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-619">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="e10bd-620">要编写为 JSON 数组的 JSON 字符串元素的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-620">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-621">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-621"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-622">这是可选参数，其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-622">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-623">编写 UTF-8 文本值（作为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-623">Writes the UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-624"><paramref name="utf8Value" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-624"><paramref name="utf8Value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-625">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-625">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-626">作为 JSON 数组的 UTF-8 转码的 JSON 字符串元素编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-626">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-627">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-627"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-628">这是可选参数，其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-628">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-629">编写 UTF-16 文本值（作为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-629">Writes the UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-630"><paramref name="value" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-630"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-631">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-631">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e10bd-632">作为 JSON 数组的 UTF-8 转码的 JSON 字符串元素编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="e10bd-632">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="e10bd-633">若要指示编写器应假设属性名称已正确转义，并且跳过转义步骤，则为 <see langword="false" />；否则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-633"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="e10bd-634">这是可选参数，其默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="e10bd-634">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="e10bd-635">编写字符串文本值（作为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="e10bd-635">Writes the string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e10bd-636"><paramref name="value" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="e10bd-636"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e10bd-637">要编写的 JSON 数据将是无效的 JSON（同时启用验证）。</span><span class="sxs-lookup"><span data-stu-id="e10bd-637">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
